{"ast":null,"code":"import { Effect } from \"../Materials/effect\";\nimport \"./ShadersInclude/bonesDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobalDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexDeclaration\";\nimport \"./ShadersInclude/instancesDeclaration\";\nimport \"./ShadersInclude/logDepthDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertex\";\nimport \"./ShadersInclude/instancesVertex\";\nimport \"./ShadersInclude/bonesVertex\";\nimport \"./ShadersInclude/logDepthVertex\";\nvar name = 'outlineVertexShader';\nvar shader = \"\\nattribute vec3 position;\\nattribute vec3 normal;\\n#include<bonesDeclaration>\\n#include<morphTargetsVertexGlobalDeclaration>\\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\\n\\nuniform float offset;\\n#include<instancesDeclaration>\\nuniform mat4 viewProjection;\\n#ifdef ALPHATEST\\nvarying vec2 vUV;\\nuniform mat4 diffuseMatrix;\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#endif\\n#include<logDepthDeclaration>\\nvoid main(void)\\n{\\nvec3 positionUpdated=position;\\nvec3 normalUpdated=normal;\\n#ifdef UV1\\nvec2 uvUpdated=uv;\\n#endif\\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\\nvec3 offsetPosition=positionUpdated+(normalUpdated*offset);\\n#include<instancesVertex>\\n#include<bonesVertex>\\ngl_Position=viewProjection*finalWorld*vec4(offsetPosition,1.0);\\n#ifdef ALPHATEST\\n#ifdef UV1\\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\\n#endif\\n#ifdef UV2\\nvUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\\n#endif\\n#endif\\n#include<logDepthVertex>\\n}\\n\";\nEffect.ShadersStore[name] = shader;\n/** @hidden */\n\nexport var outlineVertexShader = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"sources":["../../../sourceES6/core/Shaders/outline.vertex.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,qBAAvB;AACA,OAAO,mCAAP;AACA,OAAO,sDAAP;AACA,OAAO,gDAAP;AACA,OAAO,uCAAP;AACA,OAAO,sCAAP;AACA,OAAO,qCAAP;AACA,OAAO,kCAAP;AACA,OAAO,8BAAP;AACA,OAAO,iCAAP;AAEA,IAAI,IAAI,GAAG,qBAAX;AACA,IAAI,MAAM,GAAG,8/BAAb;AA6CA,MAAM,CAAC,YAAP,CAAoB,IAApB,IAA4B,MAA5B;AACA;;AACA,OAAO,IAAI,mBAAmB,GAAG;AAAE,EAAA,IAAI,EAAA,IAAN;AAAQ,EAAA,MAAM,EAAA;AAAd,CAA1B","sourcesContent":["import { Effect } from \"../Materials/effect\";\nimport \"./ShadersInclude/bonesDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobalDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexDeclaration\";\nimport \"./ShadersInclude/instancesDeclaration\";\nimport \"./ShadersInclude/logDepthDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertex\";\nimport \"./ShadersInclude/instancesVertex\";\nimport \"./ShadersInclude/bonesVertex\";\nimport \"./ShadersInclude/logDepthVertex\";\n\nlet name = 'outlineVertexShader';\nlet shader = `\nattribute vec3 position;\nattribute vec3 normal;\n#include<bonesDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n\nuniform float offset;\n#include<instancesDeclaration>\nuniform mat4 viewProjection;\n#ifdef ALPHATEST\nvarying vec2 vUV;\nuniform mat4 diffuseMatrix;\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#endif\n#include<logDepthDeclaration>\nvoid main(void)\n{\nvec3 positionUpdated=position;\nvec3 normalUpdated=normal;\n#ifdef UV1\nvec2 uvUpdated=uv;\n#endif\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\nvec3 offsetPosition=positionUpdated+(normalUpdated*offset);\n#include<instancesVertex>\n#include<bonesVertex>\ngl_Position=viewProjection*finalWorld*vec4(offsetPosition,1.0);\n#ifdef ALPHATEST\n#ifdef UV1\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\n#endif\n#ifdef UV2\nvUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n#endif\n#endif\n#include<logDepthVertex>\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var outlineVertexShader = { name, shader };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}