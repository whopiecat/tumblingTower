{"ast":null,"code":"/** @hidden */\nvar WebGL2ShaderProcessor =\n/** @class */\nfunction () {\n  function WebGL2ShaderProcessor() {}\n\n  WebGL2ShaderProcessor.prototype.attributeProcessor = function (attribute) {\n    return attribute.replace(\"attribute\", \"in\");\n  };\n\n  WebGL2ShaderProcessor.prototype.varyingProcessor = function (varying, isFragment) {\n    return varying.replace(\"varying\", isFragment ? \"in\" : \"out\");\n  };\n\n  WebGL2ShaderProcessor.prototype.postProcessor = function (code, defines, isFragment) {\n    var hasDrawBuffersExtension = code.search(/#extension.+GL_EXT_draw_buffers.+require/) !== -1; // Remove extensions\n\n    var regex = /#extension.+(GL_OVR_multiview2|GL_OES_standard_derivatives|GL_EXT_shader_texture_lod|GL_EXT_frag_depth|GL_EXT_draw_buffers).+(enable|require)/g;\n    code = code.replace(regex, \"\"); // Replace instructions\n\n    code = code.replace(/texture2D\\s*\\(/g, \"texture(\");\n\n    if (isFragment) {\n      code = code.replace(/texture2DLodEXT\\s*\\(/g, \"textureLod(\");\n      code = code.replace(/textureCubeLodEXT\\s*\\(/g, \"textureLod(\");\n      code = code.replace(/textureCube\\s*\\(/g, \"texture(\");\n      code = code.replace(/gl_FragDepthEXT/g, \"gl_FragDepth\");\n      code = code.replace(/gl_FragColor/g, \"glFragColor\");\n      code = code.replace(/gl_FragData/g, \"glFragData\");\n      code = code.replace(/void\\s+?main\\s*\\(/g, (hasDrawBuffersExtension ? \"\" : \"out vec4 glFragColor;\\n\") + \"void main(\");\n    } else {\n      var hasMultiviewExtension = defines.indexOf(\"#define MULTIVIEW\") !== -1;\n\n      if (hasMultiviewExtension) {\n        return \"#extension GL_OVR_multiview2 : require\\nlayout (num_views = 2) in;\\n\" + code;\n      }\n    }\n\n    return code;\n  };\n\n  return WebGL2ShaderProcessor;\n}();\n\nexport { WebGL2ShaderProcessor };","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/WebGL/webGL2ShaderProcessors.ts"],"names":[],"mappings":"AAEA;AACA,IAAA,qBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,qBAAA,GAAA,CAmCC;;AAlCU,EAAA,qBAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,SAA1B,EAA2C;AACvC,WAAO,SAAS,CAAC,OAAV,CAAkB,WAAlB,EAA+B,IAA/B,CAAP;AACH,GAFM;;AAIA,EAAA,qBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,OAAxB,EAAyC,UAAzC,EAA4D;AACxD,WAAO,OAAO,CAAC,OAAR,CAAgB,SAAhB,EAA2B,UAAU,GAAG,IAAH,GAAU,KAA/C,CAAP;AACH,GAFM;;AAIA,EAAA,qBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,IAArB,EAAmC,OAAnC,EAAsD,UAAtD,EAAyE;AACrE,QAAM,uBAAuB,GAAG,IAAI,CAAC,MAAL,CAAY,0CAAZ,MAA4D,CAAC,CAA7F,CADqE,CAGrE;;AACA,QAAI,KAAK,GAAG,gJAAZ;AACA,IAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAP,CALqE,CAOrE;;AACA,IAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,iBAAb,EAAgC,UAAhC,CAAP;;AACA,QAAI,UAAJ,EAAgB;AACZ,MAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,uBAAb,EAAsC,aAAtC,CAAP;AACA,MAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,yBAAb,EAAwC,aAAxC,CAAP;AACA,MAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,mBAAb,EAAkC,UAAlC,CAAP;AACA,MAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,kBAAb,EAAiC,cAAjC,CAAP;AACA,MAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,eAAb,EAA8B,aAA9B,CAAP;AACA,MAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,cAAb,EAA6B,YAA7B,CAAP;AACA,MAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,oBAAb,EAAmC,CAAC,uBAAuB,GAAG,EAAH,GAAQ,yBAAhC,IAA6D,YAAhG,CAAP;AACH,KARD,MAQO;AACH,UAAI,qBAAqB,GAAG,OAAO,CAAC,OAAR,CAAgB,mBAAhB,MAAyC,CAAC,CAAtE;;AACA,UAAI,qBAAJ,EAA2B;AACvB,eAAO,yEAAyE,IAAhF;AACH;AACJ;;AAED,WAAO,IAAP;AACH,GAzBM;;AA0BX,SAAA,qBAAA;AAAC,CAnCD,EAAA","sourcesContent":["import { IShaderProcessor } from '../Processors/iShaderProcessor';\r\n\r\n/** @hidden */\r\nexport class WebGL2ShaderProcessor implements IShaderProcessor {\r\n    public attributeProcessor(attribute: string) {\r\n        return attribute.replace(\"attribute\", \"in\");\r\n    }\r\n\r\n    public varyingProcessor(varying: string, isFragment: boolean) {\r\n        return varying.replace(\"varying\", isFragment ? \"in\" : \"out\");\r\n    }\r\n\r\n    public postProcessor(code: string, defines: string[], isFragment: boolean) {\r\n        const hasDrawBuffersExtension = code.search(/#extension.+GL_EXT_draw_buffers.+require/) !== -1;\r\n\r\n        // Remove extensions\r\n        var regex = /#extension.+(GL_OVR_multiview2|GL_OES_standard_derivatives|GL_EXT_shader_texture_lod|GL_EXT_frag_depth|GL_EXT_draw_buffers).+(enable|require)/g;\r\n        code = code.replace(regex, \"\");\r\n\r\n        // Replace instructions\r\n        code = code.replace(/texture2D\\s*\\(/g, \"texture(\");\r\n        if (isFragment) {\r\n            code = code.replace(/texture2DLodEXT\\s*\\(/g, \"textureLod(\");\r\n            code = code.replace(/textureCubeLodEXT\\s*\\(/g, \"textureLod(\");\r\n            code = code.replace(/textureCube\\s*\\(/g, \"texture(\");\r\n            code = code.replace(/gl_FragDepthEXT/g, \"gl_FragDepth\");\r\n            code = code.replace(/gl_FragColor/g, \"glFragColor\");\r\n            code = code.replace(/gl_FragData/g, \"glFragData\");\r\n            code = code.replace(/void\\s+?main\\s*\\(/g, (hasDrawBuffersExtension ? \"\" : \"out vec4 glFragColor;\\n\") + \"void main(\");\r\n        } else {\r\n            var hasMultiviewExtension = defines.indexOf(\"#define MULTIVIEW\") !== -1;\r\n            if (hasMultiviewExtension) {\r\n                return \"#extension GL_OVR_multiview2 : require\\nlayout (num_views = 2) in;\\n\" + code;\r\n            }\r\n        }\r\n\r\n        return code;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}