{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\nimport { Mesh } from \"../Meshes/mesh\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { VertexBuffer } from \"../Meshes/buffer\";\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\n/**\r\n * Class used to create a trail following a mesh\r\n */\n\nvar TrailMesh =\n/** @class */\nfunction (_super) {\n  __extends(TrailMesh, _super);\n  /**\r\n   * @constructor\r\n   * @param name The value used by scene.getMeshByName() to do a lookup.\r\n   * @param generator The mesh or transform node to generate a trail.\r\n   * @param scene The scene to add this mesh to.\r\n   * @param diameter Diameter of trailing mesh. Default is 1.\r\n   * @param length Length of trailing mesh. Default is 60.\r\n   * @param autoStart Automatically start trailing mesh. Default true.\r\n   */\n\n\n  function TrailMesh(name, generator, scene, diameter, length, autoStart) {\n    if (diameter === void 0) {\n      diameter = 1;\n    }\n\n    if (length === void 0) {\n      length = 60;\n    }\n\n    if (autoStart === void 0) {\n      autoStart = true;\n    }\n\n    var _this = _super.call(this, name, scene) || this;\n\n    _this._sectionPolygonPointsCount = 4;\n    _this._running = false;\n    _this._autoStart = autoStart;\n    _this._generator = generator;\n    _this._diameter = diameter;\n    _this._length = length;\n    _this._sectionVectors = [];\n    _this._sectionNormalVectors = [];\n\n    for (var i = 0; i < _this._sectionPolygonPointsCount; i++) {\n      _this._sectionVectors[i] = Vector3.Zero();\n      _this._sectionNormalVectors[i] = Vector3.Zero();\n    }\n\n    _this._createMesh();\n\n    return _this;\n  }\n  /**\r\n   * \"TrailMesh\"\r\n   * @returns \"TrailMesh\"\r\n   */\n\n\n  TrailMesh.prototype.getClassName = function () {\n    return \"TrailMesh\";\n  };\n\n  TrailMesh.prototype._createMesh = function () {\n    var data = new VertexData();\n    var positions = [];\n    var normals = [];\n    var indices = [];\n    var meshCenter = Vector3.Zero();\n\n    if (this._generator instanceof AbstractMesh && this._generator._boundingInfo) {\n      meshCenter = this._generator._boundingInfo.boundingBox.centerWorld;\n    } else {\n      meshCenter = this._generator.position;\n    }\n\n    var alpha = 2 * Math.PI / this._sectionPolygonPointsCount;\n\n    for (var i = 0; i < this._sectionPolygonPointsCount; i++) {\n      positions.push(meshCenter.x + Math.cos(i * alpha) * this._diameter, meshCenter.y + Math.sin(i * alpha) * this._diameter, meshCenter.z);\n    }\n\n    for (var i = 1; i <= this._length; i++) {\n      for (var j = 0; j < this._sectionPolygonPointsCount; j++) {\n        positions.push(meshCenter.x + Math.cos(j * alpha) * this._diameter, meshCenter.y + Math.sin(j * alpha) * this._diameter, meshCenter.z);\n      }\n\n      var l = positions.length / 3 - 2 * this._sectionPolygonPointsCount;\n\n      for (var j = 0; j < this._sectionPolygonPointsCount - 1; j++) {\n        indices.push(l + j, l + j + this._sectionPolygonPointsCount, l + j + this._sectionPolygonPointsCount + 1);\n        indices.push(l + j, l + j + this._sectionPolygonPointsCount + 1, l + j + 1);\n      }\n\n      indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount - 1 + this._sectionPolygonPointsCount, l + this._sectionPolygonPointsCount);\n      indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount, l);\n    }\n\n    VertexData.ComputeNormals(positions, indices, normals);\n    data.positions = positions;\n    data.normals = normals;\n    data.indices = indices;\n    data.applyToMesh(this, true);\n\n    if (this._autoStart) {\n      this.start();\n    }\n  };\n  /**\r\n   * Start trailing mesh.\r\n   */\n\n\n  TrailMesh.prototype.start = function () {\n    var _this = this;\n\n    if (!this._running) {\n      this._running = true;\n      this._beforeRenderObserver = this.getScene().onBeforeRenderObservable.add(function () {\n        _this.update();\n      });\n    }\n  };\n  /**\r\n   * Stop trailing mesh.\r\n   */\n\n\n  TrailMesh.prototype.stop = function () {\n    if (this._beforeRenderObserver && this._running) {\n      this._running = false;\n      this.getScene().onBeforeRenderObservable.remove(this._beforeRenderObserver);\n    }\n  };\n  /**\r\n   * Update trailing mesh geometry.\r\n   */\n\n\n  TrailMesh.prototype.update = function () {\n    var positions = this.getVerticesData(VertexBuffer.PositionKind);\n    var normals = this.getVerticesData(VertexBuffer.NormalKind);\n\n    var wm = this._generator.getWorldMatrix();\n\n    if (positions && normals) {\n      for (var i = 3 * this._sectionPolygonPointsCount; i < positions.length; i++) {\n        positions[i - 3 * this._sectionPolygonPointsCount] = positions[i] - normals[i] / this._length * this._diameter;\n      }\n\n      for (var i = 3 * this._sectionPolygonPointsCount; i < normals.length; i++) {\n        normals[i - 3 * this._sectionPolygonPointsCount] = normals[i];\n      }\n\n      var l = positions.length - 3 * this._sectionPolygonPointsCount;\n      var alpha = 2 * Math.PI / this._sectionPolygonPointsCount;\n\n      for (var i = 0; i < this._sectionPolygonPointsCount; i++) {\n        this._sectionVectors[i].copyFromFloats(Math.cos(i * alpha) * this._diameter, Math.sin(i * alpha) * this._diameter, 0);\n\n        this._sectionNormalVectors[i].copyFromFloats(Math.cos(i * alpha), Math.sin(i * alpha), 0);\n\n        Vector3.TransformCoordinatesToRef(this._sectionVectors[i], wm, this._sectionVectors[i]);\n        Vector3.TransformNormalToRef(this._sectionNormalVectors[i], wm, this._sectionNormalVectors[i]);\n      }\n\n      for (var i = 0; i < this._sectionPolygonPointsCount; i++) {\n        positions[l + 3 * i] = this._sectionVectors[i].x;\n        positions[l + 3 * i + 1] = this._sectionVectors[i].y;\n        positions[l + 3 * i + 2] = this._sectionVectors[i].z;\n        normals[l + 3 * i] = this._sectionNormalVectors[i].x;\n        normals[l + 3 * i + 1] = this._sectionNormalVectors[i].y;\n        normals[l + 3 * i + 2] = this._sectionNormalVectors[i].z;\n      }\n\n      this.updateVerticesData(VertexBuffer.PositionKind, positions, true, false);\n      this.updateVerticesData(VertexBuffer.NormalKind, normals, true, false);\n    }\n  };\n  /**\r\n   * Returns a new TrailMesh object.\r\n   * @param name is a string, the name given to the new mesh\r\n   * @param newGenerator use new generator object for cloned trail mesh\r\n   * @returns a new mesh\r\n   */\n\n\n  TrailMesh.prototype.clone = function (name, newGenerator) {\n    if (name === void 0) {\n      name = \"\";\n    }\n\n    return new TrailMesh(name, newGenerator === undefined ? this._generator : newGenerator, this.getScene(), this._diameter, this._length, this._autoStart);\n  };\n  /**\r\n   * Serializes this trail mesh\r\n   * @param serializationObject object to write serialization to\r\n   */\n\n\n  TrailMesh.prototype.serialize = function (serializationObject) {\n    _super.prototype.serialize.call(this, serializationObject);\n  };\n  /**\r\n   * Parses a serialized trail mesh\r\n   * @param parsedMesh the serialized mesh\r\n   * @param scene the scene to create the trail mesh in\r\n   * @returns the created trail mesh\r\n   */\n\n\n  TrailMesh.Parse = function (parsedMesh, scene) {\n    return new TrailMesh(parsedMesh.name, parsedMesh._generator, scene, parsedMesh._diameter, parsedMesh._length, parsedMesh._autoStart);\n  };\n\n  return TrailMesh;\n}(Mesh);\n\nexport { TrailMesh };","map":{"version":3,"sources":["../../../sourceES6/core/Meshes/trailMesh.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Nullable } from \"../types\";\r\nimport { Observer } from \"../Misc/observable\";\r\nimport { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Meshes/buffer\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\n\r\n/**\r\n * Class used to create a trail following a mesh\r\n */\r\nexport class TrailMesh extends Mesh {\r\n    private _generator: TransformNode;\r\n    private _autoStart: boolean;\r\n    private _running: boolean;\r\n    private _diameter: number;\r\n    private _length: number;\r\n    private _sectionPolygonPointsCount: number = 4;\r\n    private _sectionVectors: Array<Vector3>;\r\n    private _sectionNormalVectors: Array<Vector3>;\r\n    private _beforeRenderObserver: Nullable<Observer<Scene>>;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name The value used by scene.getMeshByName() to do a lookup.\r\n     * @param generator The mesh or transform node to generate a trail.\r\n     * @param scene The scene to add this mesh to.\r\n     * @param diameter Diameter of trailing mesh. Default is 1.\r\n     * @param length Length of trailing mesh. Default is 60.\r\n     * @param autoStart Automatically start trailing mesh. Default true.\r\n     */\r\n    constructor(name: string, generator: TransformNode, scene: Scene, diameter: number = 1, length: number = 60, autoStart: boolean = true) {\r\n        super(name, scene);\r\n\r\n        this._running = false;\r\n        this._autoStart = autoStart;\r\n        this._generator = generator;\r\n        this._diameter = diameter;\r\n        this._length = length;\r\n        this._sectionVectors = [];\r\n        this._sectionNormalVectors = [];\r\n        for (let i: number = 0; i < this._sectionPolygonPointsCount; i++) {\r\n            this._sectionVectors[i] = Vector3.Zero();\r\n            this._sectionNormalVectors[i] = Vector3.Zero();\r\n        }\r\n        this._createMesh();\r\n    }\r\n\r\n    /**\r\n     * \"TrailMesh\"\r\n     * @returns \"TrailMesh\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"TrailMesh\";\r\n    }\r\n\r\n    private _createMesh(): void {\r\n        let data: VertexData = new VertexData();\r\n        let positions: Array<number> = [];\r\n        let normals: Array<number> = [];\r\n        let indices: Array<number> = [];\r\n        let meshCenter = Vector3.Zero();\r\n        if (this._generator instanceof AbstractMesh && this._generator._boundingInfo) {\r\n            meshCenter = this._generator._boundingInfo.boundingBox.centerWorld;\r\n        } else {\r\n            meshCenter = this._generator.position;\r\n        }\r\n        let alpha: number = 2 * Math.PI / this._sectionPolygonPointsCount;\r\n        for (let i: number = 0; i < this._sectionPolygonPointsCount; i++) {\r\n            positions.push(\r\n                meshCenter.x + Math.cos(i * alpha) * this._diameter,\r\n                meshCenter.y + Math.sin(i * alpha) * this._diameter,\r\n                meshCenter.z\r\n            );\r\n        }\r\n        for (let i: number = 1; i <= this._length; i++) {\r\n            for (let j: number = 0; j < this._sectionPolygonPointsCount; j++) {\r\n                positions.push(\r\n                    meshCenter.x + Math.cos(j * alpha) * this._diameter,\r\n                    meshCenter.y + Math.sin(j * alpha) * this._diameter,\r\n                    meshCenter.z\r\n                );\r\n            }\r\n            let l: number = positions.length / 3 - 2 * this._sectionPolygonPointsCount;\r\n            for (let j: number = 0; j < this._sectionPolygonPointsCount - 1; j++) {\r\n                indices.push(\r\n                    l + j,\r\n                    l + j + this._sectionPolygonPointsCount,\r\n                    l + j + this._sectionPolygonPointsCount + 1,\r\n                );\r\n                indices.push(\r\n                    l + j,\r\n                    l + j + this._sectionPolygonPointsCount + 1,\r\n                    l + j + 1\r\n                );\r\n            }\r\n            indices.push(\r\n                l + this._sectionPolygonPointsCount - 1,\r\n                l + this._sectionPolygonPointsCount - 1 + this._sectionPolygonPointsCount,\r\n                l + this._sectionPolygonPointsCount,\r\n            );\r\n            indices.push(\r\n                l + this._sectionPolygonPointsCount - 1,\r\n                l + this._sectionPolygonPointsCount,\r\n                l\r\n            );\r\n        }\r\n        VertexData.ComputeNormals(positions, indices, normals);\r\n        data.positions = positions;\r\n        data.normals = normals;\r\n        data.indices = indices;\r\n        data.applyToMesh(this, true);\r\n        if (this._autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start trailing mesh.\r\n     */\r\n    public start(): void {\r\n        if (!this._running) {\r\n            this._running = true;\r\n            this._beforeRenderObserver = this.getScene().onBeforeRenderObservable.add(() => {\r\n                this.update();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop trailing mesh.\r\n     */\r\n    public stop(): void {\r\n        if (this._beforeRenderObserver && this._running) {\r\n            this._running = false;\r\n            this.getScene().onBeforeRenderObservable.remove(this._beforeRenderObserver);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update trailing mesh geometry.\r\n     */\r\n    public update(): void {\r\n        let positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        let normals = this.getVerticesData(VertexBuffer.NormalKind);\r\n        let wm = this._generator.getWorldMatrix();\r\n        if (positions && normals) {\r\n            for (let i: number = 3 * this._sectionPolygonPointsCount; i < positions.length; i++) {\r\n                positions[i - 3 * this._sectionPolygonPointsCount] = positions[i] - normals[i] / this._length * this._diameter;\r\n            }\r\n            for (let i: number = 3 * this._sectionPolygonPointsCount; i < normals.length; i++) {\r\n                normals[i - 3 * this._sectionPolygonPointsCount] = normals[i];\r\n            }\r\n            let l: number = positions.length - 3 * this._sectionPolygonPointsCount;\r\n            let alpha: number = 2 * Math.PI / this._sectionPolygonPointsCount;\r\n            for (let i: number = 0; i < this._sectionPolygonPointsCount; i++) {\r\n                this._sectionVectors[i].copyFromFloats(\r\n                    Math.cos(i * alpha) * this._diameter,\r\n                    Math.sin(i * alpha) * this._diameter,\r\n                    0\r\n                );\r\n                this._sectionNormalVectors[i].copyFromFloats(\r\n                    Math.cos(i * alpha),\r\n                    Math.sin(i * alpha),\r\n                    0\r\n                );\r\n                Vector3.TransformCoordinatesToRef(this._sectionVectors[i], wm, this._sectionVectors[i]);\r\n                Vector3.TransformNormalToRef(this._sectionNormalVectors[i], wm, this._sectionNormalVectors[i]);\r\n            }\r\n            for (let i: number = 0; i < this._sectionPolygonPointsCount; i++) {\r\n                positions[l + 3 * i] = this._sectionVectors[i].x;\r\n                positions[l + 3 * i + 1] = this._sectionVectors[i].y;\r\n                positions[l + 3 * i + 2] = this._sectionVectors[i].z;\r\n                normals[l + 3 * i] = this._sectionNormalVectors[i].x;\r\n                normals[l + 3 * i + 1] = this._sectionNormalVectors[i].y;\r\n                normals[l + 3 * i + 2] = this._sectionNormalVectors[i].z;\r\n            }\r\n            this.updateVerticesData(VertexBuffer.PositionKind, positions, true, false);\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normals, true, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a new TrailMesh object.\r\n     * @param name is a string, the name given to the new mesh\r\n     * @param newGenerator use new generator object for cloned trail mesh\r\n     * @returns a new mesh\r\n     */\r\n    public clone(name: string = \"\", newGenerator: TransformNode): TrailMesh {\r\n        return new TrailMesh(name, (newGenerator === undefined ? this._generator : newGenerator), this.getScene(), this._diameter, this._length, this._autoStart);\r\n    }\r\n\r\n    /**\r\n     * Serializes this trail mesh\r\n     * @param serializationObject object to write serialization to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized trail mesh\r\n     * @param parsedMesh the serialized mesh\r\n     * @param scene the scene to create the trail mesh in\r\n     * @returns the created trail mesh\r\n     */\r\n    public static Parse(parsedMesh: any, scene: Scene): TrailMesh {\r\n        return new TrailMesh(parsedMesh.name, parsedMesh._generator, scene, parsedMesh._diameter, parsedMesh._length, parsedMesh._autoStart);\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}