{"ast":null,"code":"import { Effect } from \"../Materials/effect\";\nvar name = 'screenSpaceCurvaturePixelShader';\nvar shader = \"\\n\\nprecision highp float;\\n\\nvarying vec2 vUV;\\nuniform sampler2D textureSampler;\\nuniform sampler2D normalSampler;\\nuniform float curvature_ridge;\\nuniform float curvature_valley;\\n#ifndef CURVATURE_OFFSET\\n#define CURVATURE_OFFSET 1\\n#endif\\nfloat curvature_soft_clamp(float curvature,float control)\\n{\\nif (curvature<0.5/control)\\nreturn curvature*(1.0-curvature*control);\\nreturn 0.25/control;\\n}\\nfloat calculate_curvature(ivec2 texel,float ridge,float valley)\\n{\\nvec2 normal_up=texelFetchOffset(normalSampler,texel,0,ivec2(0,CURVATURE_OFFSET)).rb;\\nvec2 normal_down=texelFetchOffset(normalSampler,texel,0,ivec2(0,-CURVATURE_OFFSET)).rb;\\nvec2 normal_left=texelFetchOffset(normalSampler,texel,0,ivec2(-CURVATURE_OFFSET,0)).rb;\\nvec2 normal_right=texelFetchOffset(normalSampler,texel,0,ivec2( CURVATURE_OFFSET,0)).rb;\\nfloat normal_diff=((normal_up.g-normal_down.g)+(normal_right.r-normal_left.r));\\nif (normal_diff<0.0)\\nreturn -2.0*curvature_soft_clamp(-normal_diff,valley);\\nreturn 2.0*curvature_soft_clamp(normal_diff,ridge);\\n}\\nvoid main(void)\\n{\\nivec2 texel=ivec2(gl_FragCoord.xy);\\nvec4 baseColor=texture2D(textureSampler,vUV);\\nfloat curvature=calculate_curvature(texel,curvature_ridge,curvature_valley);\\nbaseColor.rgb*=curvature+1.0;\\ngl_FragColor=baseColor;\\n}\";\nEffect.ShadersStore[name] = shader;\n/** @hidden */\n\nexport var screenSpaceCurvaturePixelShader = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"sources":["../../../sourceES6/core/Shaders/screenSpaceCurvature.fragment.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,qBAAvB;AAEA,IAAI,IAAI,GAAG,iCAAX;AACA,IAAI,MAAM,GAAG,iwCAAb;AAsCA,MAAM,CAAC,YAAP,CAAoB,IAApB,IAA4B,MAA5B;AACA;;AACA,OAAO,IAAI,+BAA+B,GAAG;AAAE,EAAA,IAAI,EAAA,IAAN;AAAQ,EAAA,MAAM,EAAA;AAAd,CAAtC","sourcesContent":["import { Effect } from \"../Materials/effect\";\n\nlet name = 'screenSpaceCurvaturePixelShader';\nlet shader = `\n\nprecision highp float;\n\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\nuniform sampler2D normalSampler;\nuniform float curvature_ridge;\nuniform float curvature_valley;\n#ifndef CURVATURE_OFFSET\n#define CURVATURE_OFFSET 1\n#endif\nfloat curvature_soft_clamp(float curvature,float control)\n{\nif (curvature<0.5/control)\nreturn curvature*(1.0-curvature*control);\nreturn 0.25/control;\n}\nfloat calculate_curvature(ivec2 texel,float ridge,float valley)\n{\nvec2 normal_up=texelFetchOffset(normalSampler,texel,0,ivec2(0,CURVATURE_OFFSET)).rb;\nvec2 normal_down=texelFetchOffset(normalSampler,texel,0,ivec2(0,-CURVATURE_OFFSET)).rb;\nvec2 normal_left=texelFetchOffset(normalSampler,texel,0,ivec2(-CURVATURE_OFFSET,0)).rb;\nvec2 normal_right=texelFetchOffset(normalSampler,texel,0,ivec2( CURVATURE_OFFSET,0)).rb;\nfloat normal_diff=((normal_up.g-normal_down.g)+(normal_right.r-normal_left.r));\nif (normal_diff<0.0)\nreturn -2.0*curvature_soft_clamp(-normal_diff,valley);\nreturn 2.0*curvature_soft_clamp(normal_diff,ridge);\n}\nvoid main(void)\n{\nivec2 texel=ivec2(gl_FragCoord.xy);\nvec4 baseColor=texture2D(textureSampler,vUV);\nfloat curvature=calculate_curvature(texel,curvature_ridge,curvature_valley);\nbaseColor.rgb*=curvature+1.0;\ngl_FragColor=baseColor;\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var screenSpaceCurvaturePixelShader = { name, shader };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}