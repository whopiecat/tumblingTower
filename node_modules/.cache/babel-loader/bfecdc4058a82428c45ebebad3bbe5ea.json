{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { WebVRController } from \"./webVRController\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\n/**\r\n * Vive Controller\r\n */\n\nvar ViveController =\n/** @class */\nfunction (_super) {\n  __extends(ViveController, _super);\n  /**\r\n   * Creates a new ViveController from a gamepad\r\n   * @param vrGamepad the gamepad that the controller should be created from\r\n   */\n\n\n  function ViveController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this;\n\n    _this.controllerType = PoseEnabledControllerType.VIVE;\n    _this._invertLeftStickY = true;\n    return _this;\n  }\n  /**\r\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n   * @param scene scene in which to add meshes\r\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n   */\n\n\n  ViveController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    SceneLoader.ImportMesh(\"\", ViveController.MODEL_BASE_URL, ViveController.MODEL_FILENAME, scene, function (newMeshes) {\n      /*\r\n      Parent Mesh name: ViveWand\r\n      - body\r\n      - r_gripper\r\n      - l_gripper\r\n      - menu_button\r\n      - system_button\r\n      - trackpad\r\n      - trigger\r\n      - LED\r\n      */\n      _this._defaultModel = newMeshes[1];\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n\n  Object.defineProperty(ViveController.prototype, \"onLeftButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the left button on this controller is modified\r\n     */\n    get: function () {\n      return this.onMainButtonStateChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ViveController.prototype, \"onRightButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the right button on this controller is modified\r\n     */\n    get: function () {\n      return this.onMainButtonStateChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ViveController.prototype, \"onMenuButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the menu button on this controller is modified\r\n     */\n    get: function () {\n      return this.onSecondaryButtonStateChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Called once for each button that changed state since the last frame\r\n   * Vive mapping:\r\n   * 0: touchpad\r\n   * 1: trigger\r\n   * 2: left AND right buttons\r\n   * 3: menu button\r\n   * @param buttonIdx Which button index changed\r\n   * @param state New state of the button\r\n   * @param changes Which properties on the state changed since last frame\r\n   */\n\n  ViveController.prototype._handleButtonChange = function (buttonIdx, state, changes) {\n    var notifyObject = state; //{ state: state, changes: changes };\n\n    switch (buttonIdx) {\n      case 0:\n        this.onPadStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 1:\n        // index trigger\n        if (this._defaultModel) {\n          this._defaultModel.getChildren()[6].rotation.x = -notifyObject.value * 0.15;\n        }\n\n        this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 2:\n        // left AND right button\n        this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 3:\n        if (this._defaultModel) {\n          if (notifyObject.pressed) {\n            this._defaultModel.getChildren()[2].position.y = -0.001;\n          } else {\n            this._defaultModel.getChildren()[2].position.y = 0;\n          }\n        }\n\n        this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n    }\n  };\n  /**\r\n   * Base Url for the controller model.\r\n   */\n\n\n  ViveController.MODEL_BASE_URL = 'https://controllers.babylonjs.com/vive/';\n  /**\r\n   * File name for the controller model.\r\n   */\n\n  ViveController.MODEL_FILENAME = 'wand.babylon';\n  return ViveController;\n}(WebVRController);\n\nexport { ViveController };\n\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: function (gamepadInfo) {\n    return gamepadInfo.id.toLowerCase().indexOf('openvr') !== -1;\n  },\n  create: function (gamepadInfo) {\n    return new ViveController(gamepadInfo);\n  }\n});","map":{"version":3,"sources":["../../../../sourceES6/core/Gamepads/Controllers/viveController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene } from \"../../scene\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { WebVRController } from \"./webVRController\";\r\nimport { PoseEnabledControllerType, ExtendedGamepadButton, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\nimport { GamepadButtonChanges } from \"../../Gamepads/gamepad\";\r\nimport { Observable } from '../../Misc/observable';\r\n\r\n/**\r\n * Vive Controller\r\n */\r\nexport class ViveController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = 'https://controllers.babylonjs.com/vive/';\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static MODEL_FILENAME: string = 'wand.babylon';\r\n\r\n    /**\r\n     * Creates a new ViveController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.VIVE;\r\n        this._invertLeftStickY = true;\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", ViveController.MODEL_BASE_URL, ViveController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            /*\r\n            Parent Mesh name: ViveWand\r\n            - body\r\n            - r_gripper\r\n            - l_gripper\r\n            - menu_button\r\n            - system_button\r\n            - trackpad\r\n            - trigger\r\n            - LED\r\n            */\r\n            this._defaultModel = newMeshes[1];\r\n            this.attachToMesh(this._defaultModel);\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fired when the left button on this controller is modified\r\n     */\r\n    public get onLeftButtonStateChangedObservable(): Observable<ExtendedGamepadButton> {\r\n        return this.onMainButtonStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Fired when the right button on this controller is modified\r\n     */\r\n    public get onRightButtonStateChangedObservable(): Observable<ExtendedGamepadButton> {\r\n        return this.onMainButtonStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Fired when the menu button on this controller is modified\r\n     */\r\n    public get onMenuButtonStateChangedObservable(): Observable<ExtendedGamepadButton> {\r\n        return this.onSecondaryButtonStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * Vive mapping:\r\n     * 0: touchpad\r\n     * 1: trigger\r\n     * 2: left AND right buttons\r\n     * 3: menu button\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     * @param changes Which properties on the state changed since last frame\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton, changes: GamepadButtonChanges) {\r\n        let notifyObject = state; //{ state: state, changes: changes };\r\n        switch (buttonIdx) {\r\n            case 0:\r\n                this.onPadStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 1: // index trigger\r\n                if (this._defaultModel) {\r\n                    (<AbstractMesh>(this._defaultModel.getChildren()[6])).rotation.x = -notifyObject.value * 0.15;\r\n                }\r\n                this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 2:  // left AND right button\r\n                this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 3:\r\n                if (this._defaultModel) {\r\n                    if (notifyObject.pressed) {\r\n                        (<AbstractMesh>(this._defaultModel.getChildren()[2])).position.y = -0.001;\r\n                    }\r\n                    else {\r\n                        (<AbstractMesh>(this._defaultModel.getChildren()[2])).position.y = 0;\r\n                    }\r\n                }\r\n                this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        return gamepadInfo.id.toLowerCase().indexOf('openvr') !== -1;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new ViveController(gamepadInfo);\r\n    }\r\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}