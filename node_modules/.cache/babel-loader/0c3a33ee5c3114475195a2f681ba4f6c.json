{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../Misc/typeStore';\n/**\r\n * Operations supported by the Trigonometry block\r\n */\n\nexport var TrigonometryBlockOperations;\n\n(function (TrigonometryBlockOperations) {\n  /** Cos */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Cos\"] = 0] = \"Cos\";\n  /** Sin */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sin\"] = 1] = \"Sin\";\n  /** Abs */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Abs\"] = 2] = \"Abs\";\n  /** Exp */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Exp\"] = 3] = \"Exp\";\n  /** Exp2 */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Exp2\"] = 4] = \"Exp2\";\n  /** Round */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Round\"] = 5] = \"Round\";\n  /** Floor */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Floor\"] = 6] = \"Floor\";\n  /** Ceiling */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Ceiling\"] = 7] = \"Ceiling\";\n  /** Square root */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sqrt\"] = 8] = \"Sqrt\";\n  /** Log */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Log\"] = 9] = \"Log\";\n  /** Tangent */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Tan\"] = 10] = \"Tan\";\n  /** Arc tangent */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcTan\"] = 11] = \"ArcTan\";\n  /** Arc cosinus */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcCos\"] = 12] = \"ArcCos\";\n  /** Arc sinus */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcSin\"] = 13] = \"ArcSin\";\n  /** Fraction */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Fract\"] = 14] = \"Fract\";\n  /** Sign */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sign\"] = 15] = \"Sign\";\n  /** To radians (from degrees) */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Radians\"] = 16] = \"Radians\";\n  /** To degrees (from radians) */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Degrees\"] = 17] = \"Degrees\";\n})(TrigonometryBlockOperations || (TrigonometryBlockOperations = {}));\n/**\r\n * Block used to apply trigonometry operation to floats\r\n */\n\n\nvar TrigonometryBlock =\n/** @class */\nfunction (_super) {\n  __extends(TrigonometryBlock, _super);\n  /**\r\n   * Creates a new TrigonometryBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function TrigonometryBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n    /**\r\n     * Gets or sets the operation applied by the block\r\n     */\n\n\n    _this.operation = TrigonometryBlockOperations.Cos;\n\n    _this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n\n    _this._outputs[0]._typeConnectionSource = _this._inputs[0];\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  TrigonometryBlock.prototype.getClassName = function () {\n    return \"TrigonometryBlock\";\n  };\n\n  Object.defineProperty(TrigonometryBlock.prototype, \"input\", {\n    /**\r\n     * Gets the input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TrigonometryBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TrigonometryBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var output = this._outputs[0];\n    var operation = \"\";\n\n    switch (this.operation) {\n      case TrigonometryBlockOperations.Cos:\n        {\n          operation = \"cos\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Sin:\n        {\n          operation = \"sin\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Abs:\n        {\n          operation = \"abs\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Exp:\n        {\n          operation = \"exp\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Exp2:\n        {\n          operation = \"exp2\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Round:\n        {\n          operation = \"round\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Floor:\n        {\n          operation = \"floor\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Ceiling:\n        {\n          operation = \"ceil\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Sqrt:\n        {\n          operation = \"sqrt\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Log:\n        {\n          operation = \"log\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Tan:\n        {\n          operation = \"tan\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.ArcTan:\n        {\n          operation = \"atan\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.ArcCos:\n        {\n          operation = \"acos\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.ArcSin:\n        {\n          operation = \"asin\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Fract:\n        {\n          operation = \"fract\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Sign:\n        {\n          operation = \"sign\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Radians:\n        {\n          operation = \"radians\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Degrees:\n        {\n          operation = \"degrees\";\n          break;\n        }\n    }\n\n    state.compilationString += this._declareOutput(output, state) + (\" = \" + operation + \"(\" + this.input.associatedVariableName + \");\\r\\n\");\n    return this;\n  };\n\n  TrigonometryBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.operation = this.operation;\n    return serializationObject;\n  };\n\n  TrigonometryBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.operation = serializationObject.operation;\n  };\n\n  TrigonometryBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = this._codeVariableName + \".operation = BABYLON.TrigonometryBlockOperations.\" + TrigonometryBlockOperations[this.operation] + \";\\r\\n\";\n    return codeString;\n  };\n\n  return TrigonometryBlock;\n}(NodeMaterialBlock);\n\nexport { TrigonometryBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.TrigonometryBlock\"] = TrigonometryBlock;","map":{"version":3,"sources":["../../../../../sourceES6/core/Materials/Node/Blocks/trigonometryBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../nodeMaterialBuildState';\r\nimport { NodeMaterialConnectionPoint } from '../nodeMaterialBlockConnectionPoint';\r\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\r\nimport { _TypeStore } from '../../../Misc/typeStore';\r\nimport { Scene } from '../../../scene';\r\n\r\n/**\r\n * Operations supported by the Trigonometry block\r\n */\r\nexport enum TrigonometryBlockOperations {\r\n    /** Cos */\r\n    Cos,\r\n    /** Sin */\r\n    Sin,\r\n    /** Abs */\r\n    Abs,\r\n    /** Exp */\r\n    Exp,\r\n    /** Exp2 */\r\n    Exp2,\r\n    /** Round */\r\n    Round,\r\n    /** Floor */\r\n    Floor,\r\n    /** Ceiling */\r\n    Ceiling,\r\n    /** Square root */\r\n    Sqrt,\r\n    /** Log */\r\n    Log,\r\n    /** Tangent */\r\n    Tan,\r\n    /** Arc tangent */\r\n    ArcTan,\r\n    /** Arc cosinus */\r\n    ArcCos,\r\n    /** Arc sinus */\r\n    ArcSin,\r\n    /** Fraction */\r\n    Fract,\r\n    /** Sign */\r\n    Sign,\r\n    /** To radians (from degrees) */\r\n    Radians,\r\n    /** To degrees (from radians) */\r\n    Degrees\r\n}\r\n\r\n/**\r\n * Block used to apply trigonometry operation to floats\r\n */\r\nexport class TrigonometryBlock extends NodeMaterialBlock {\r\n\r\n    /**\r\n     * Gets or sets the operation applied by the block\r\n     */\r\n    public operation = TrigonometryBlockOperations.Cos;\r\n\r\n    /**\r\n     * Creates a new TrigonometryBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TrigonometryBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        let output = this._outputs[0];\r\n        let operation = \"\";\r\n\r\n        switch (this.operation) {\r\n            case TrigonometryBlockOperations.Cos: {\r\n                operation = \"cos\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Sin: {\r\n                operation = \"sin\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Abs: {\r\n                operation = \"abs\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Exp: {\r\n                operation = \"exp\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Exp2: {\r\n                operation = \"exp2\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Round: {\r\n                operation = \"round\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Floor: {\r\n                operation = \"floor\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Ceiling: {\r\n                operation = \"ceil\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Sqrt: {\r\n                operation = \"sqrt\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Log: {\r\n                operation = \"log\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Tan: {\r\n                operation = \"tan\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.ArcTan: {\r\n                operation = \"atan\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.ArcCos: {\r\n                operation = \"acos\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.ArcSin: {\r\n                operation = \"asin\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Fract: {\r\n                operation = \"fract\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Sign: {\r\n                operation = \"sign\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Radians: {\r\n                operation = \"radians\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Degrees: {\r\n                operation = \"degrees\";\r\n                break;\r\n            }\r\n        }\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${operation}(${this.input.associatedVariableName});\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        let serializationObject = super.serialize();\r\n\r\n        serializationObject.operation = this.operation;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.operation = serializationObject.operation;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        var codeString = `${this._codeVariableName}.operation = BABYLON.TrigonometryBlockOperations.${TrigonometryBlockOperations[this.operation]};\\r\\n`;\r\n        return codeString;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.TrigonometryBlock\"] = TrigonometryBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}