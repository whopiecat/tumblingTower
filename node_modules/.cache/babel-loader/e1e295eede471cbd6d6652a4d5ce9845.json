{"ast":null,"code":"import { WebXRGenericTriggerMotionController } from \"./webXRGenericMotionController\";\nimport { Tools } from \"../../Misc/tools\";\nimport { WebXRProfiledMotionController } from \"./webXRProfiledMotionController\";\n/**\r\n * The MotionController Manager manages all registered motion controllers and loads the right one when needed.\r\n *\r\n * When this repository is complete: https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets\r\n * it should be replaced with auto-loaded controllers.\r\n *\r\n * When using a model try to stay as generic as possible. Eventually there will be no need in any of the controller classes\r\n */\n\nvar WebXRMotionControllerManager =\n/** @class */\nfunction () {\n  function WebXRMotionControllerManager() {}\n  /**\r\n   * Clear the cache used for profile loading and reload when requested again\r\n   */\n\n\n  WebXRMotionControllerManager.ClearProfilesCache = function () {\n    this._ProfilesList = null;\n    this._ProfileLoadingPromises = {};\n  };\n  /**\r\n   * Register the default fallbacks.\r\n   * This function is called automatically when this file is imported.\r\n   */\n\n\n  WebXRMotionControllerManager.DefaultFallbacks = function () {\n    this.RegisterFallbacksForProfileId(\"google-daydream\", [\"generic-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"htc-vive-focus\", [\"generic-trigger-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"htc-vive\", [\"generic-trigger-squeeze-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"magicleap-one\", [\"generic-trigger-squeeze-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"windows-mixed-reality\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"microsoft-mixed-reality\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"oculus-go\", [\"generic-trigger-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"oculus-touch-v2\", [\"oculus-touch\", \"generic-trigger-squeeze-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"oculus-touch\", [\"generic-trigger-squeeze-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"samsung-gearvr\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"samsung-odyssey\", [\"generic-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"valve-index\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\n  };\n  /**\r\n   * Find a fallback profile if the profile was not found. There are a few predefined generic profiles.\r\n   * @param profileId the profile to which a fallback needs to be found\r\n   * @return an array with corresponding fallback profiles\r\n   */\n\n\n  WebXRMotionControllerManager.FindFallbackWithProfileId = function (profileId) {\n    var returnArray = this._Fallbacks[profileId] || [];\n    returnArray.unshift(profileId);\n    return returnArray;\n  };\n  /**\r\n   * When acquiring a new xrInput object (usually by the WebXRInput class), match it with the correct profile.\r\n   * The order of search:\r\n   *\r\n   * 1) Iterate the profiles array of the xr input and try finding a corresponding motion controller\r\n   * 2) (If not found) search in the gamepad id and try using it (legacy versions only)\r\n   * 3) search for registered fallbacks (should be redundant, nonetheless it makes sense to check)\r\n   * 4) return the generic trigger controller if none were found\r\n   *\r\n   * @param xrInput the xrInput to which a new controller is initialized\r\n   * @param scene the scene to which the model will be added\r\n   * @param forceProfile force a certain profile for this controller\r\n   * @return A promise that fulfils with the motion controller class for this profile id or the generic standard class if none was found\r\n   */\n\n\n  WebXRMotionControllerManager.GetMotionControllerWithXRInput = function (xrInput, scene, forceProfile) {\n    var _this = this;\n\n    var profileArray = [];\n\n    if (forceProfile) {\n      profileArray.push(forceProfile);\n    }\n\n    profileArray.push.apply(profileArray, xrInput.profiles || []); // emulator support\n\n    if (profileArray.length && !profileArray[0]) {\n      // remove the first \"undefined\" that the emulator is adding\n      profileArray.pop();\n    } // legacy support - try using the gamepad id\n\n\n    if (xrInput.gamepad && xrInput.gamepad.id) {\n      switch (xrInput.gamepad.id) {\n        case xrInput.gamepad.id.match(/oculus touch/gi) ? xrInput.gamepad.id : undefined:\n          // oculus in gamepad id\n          profileArray.push(\"oculus-touch-v2\");\n          break;\n      }\n    } // make sure microsoft/windows mixed reality works correctly\n\n\n    var windowsMRIdx = profileArray.indexOf(\"windows-mixed-reality\");\n\n    if (windowsMRIdx !== -1) {\n      profileArray.splice(windowsMRIdx, 0, \"microsoft-mixed-reality\");\n    }\n\n    if (!profileArray.length) {\n      profileArray.push(\"generic-trigger\");\n    }\n\n    if (this.UseOnlineRepository) {\n      var firstFunction = this.PrioritizeOnlineRepository ? this._LoadProfileFromRepository : this._LoadProfilesFromAvailableControllers;\n      var secondFunction_1 = this.PrioritizeOnlineRepository ? this._LoadProfilesFromAvailableControllers : this._LoadProfileFromRepository;\n      return firstFunction.call(this, profileArray, xrInput, scene).catch(function () {\n        return secondFunction_1.call(_this, profileArray, xrInput, scene);\n      });\n    } else {\n      // use only available functions\n      return this._LoadProfilesFromAvailableControllers(profileArray, xrInput, scene);\n    }\n  };\n  /**\r\n   * Register a new controller based on its profile. This function will be called by the controller classes themselves.\r\n   *\r\n   * If you are missing a profile, make sure it is imported in your source, otherwise it will not register.\r\n   *\r\n   * @param type the profile type to register\r\n   * @param constructFunction the function to be called when loading this profile\r\n   */\n\n\n  WebXRMotionControllerManager.RegisterController = function (type, constructFunction) {\n    this._AvailableControllers[type] = constructFunction;\n  };\n  /**\r\n   * Register a fallback to a specific profile.\r\n   * @param profileId the profileId that will receive the fallbacks\r\n   * @param fallbacks A list of fallback profiles\r\n   */\n\n\n  WebXRMotionControllerManager.RegisterFallbacksForProfileId = function (profileId, fallbacks) {\n    var _a;\n\n    if (this._Fallbacks[profileId]) {\n      (_a = this._Fallbacks[profileId]).push.apply(_a, fallbacks);\n    } else {\n      this._Fallbacks[profileId] = fallbacks;\n    }\n  };\n  /**\r\n   * Will update the list of profiles available in the repository\r\n   * @return a promise that resolves to a map of profiles available online\r\n   */\n\n\n  WebXRMotionControllerManager.UpdateProfilesList = function () {\n    this._ProfilesList = Tools.LoadFileAsync(this.BaseRepositoryUrl + \"/profiles/profilesList.json\", false).then(function (data) {\n      return JSON.parse(data.toString());\n    });\n    return this._ProfilesList;\n  };\n\n  WebXRMotionControllerManager._LoadProfileFromRepository = function (profileArray, xrInput, scene) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      if (!_this._ProfilesList) {\n        return _this.UpdateProfilesList();\n      } else {\n        return _this._ProfilesList;\n      }\n    }).then(function (profilesList) {\n      // load the right profile\n      for (var i = 0; i < profileArray.length; ++i) {\n        // defensive\n        if (!profileArray[i]) {\n          continue;\n        }\n\n        if (profilesList[profileArray[i]]) {\n          return profileArray[i];\n        }\n      }\n\n      throw new Error(\"neither controller \" + profileArray[0] + \" nor all fallbacks were found in the repository,\");\n    }).then(function (profileToLoad) {\n      // load the profile\n      if (!_this._ProfileLoadingPromises[profileToLoad]) {\n        _this._ProfileLoadingPromises[profileToLoad] = Tools.LoadFileAsync(_this.BaseRepositoryUrl + \"/profiles/\" + profileToLoad + \"/profile.json\", false).then(function (data) {\n          return JSON.parse(data);\n        });\n      }\n\n      return _this._ProfileLoadingPromises[profileToLoad];\n    }).then(function (profile) {\n      return new WebXRProfiledMotionController(scene, xrInput, profile, _this.BaseRepositoryUrl);\n    });\n  };\n\n  WebXRMotionControllerManager._LoadProfilesFromAvailableControllers = function (profileArray, xrInput, scene) {\n    // check fallbacks\n    for (var i = 0; i < profileArray.length; ++i) {\n      // defensive\n      if (!profileArray[i]) {\n        continue;\n      }\n\n      var fallbacks = this.FindFallbackWithProfileId(profileArray[i]);\n\n      for (var j = 0; j < fallbacks.length; ++j) {\n        var constructionFunction = this._AvailableControllers[fallbacks[j]];\n\n        if (constructionFunction) {\n          return Promise.resolve(constructionFunction(xrInput, scene));\n        }\n      }\n    }\n\n    throw new Error(\"no controller requested was found in the available controllers list\");\n  };\n\n  WebXRMotionControllerManager._AvailableControllers = {};\n  WebXRMotionControllerManager._Fallbacks = {}; // cache for loading\n\n  WebXRMotionControllerManager._ProfileLoadingPromises = {};\n  /**\r\n   * The base URL of the online controller repository. Can be changed at any time.\r\n   */\n\n  WebXRMotionControllerManager.BaseRepositoryUrl = \"https://immersive-web.github.io/webxr-input-profiles/packages/viewer/dist\";\n  /**\r\n   * Which repository gets priority - local or online\r\n   */\n\n  WebXRMotionControllerManager.PrioritizeOnlineRepository = true;\n  /**\r\n   * Use the online repository, or use only locally-defined controllers\r\n   */\n\n  WebXRMotionControllerManager.UseOnlineRepository = true;\n  return WebXRMotionControllerManager;\n}();\n\nexport { WebXRMotionControllerManager }; // register the generic profile(s) here so we will at least have them\n\nWebXRMotionControllerManager.RegisterController(WebXRGenericTriggerMotionController.ProfileId, function (xrInput, scene) {\n  return new WebXRGenericTriggerMotionController(scene, xrInput.gamepad, xrInput.handedness);\n}); // register fallbacks\n\nWebXRMotionControllerManager.DefaultFallbacks();","map":{"version":3,"sources":["../../../../sourceES6/core/XR/motionController/webXRMotionControllerManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebXRAbstractMotionController, IMotionControllerProfile } from \"./webXRAbstractMotionController\";\r\nimport { WebXRGenericTriggerMotionController } from \"./webXRGenericMotionController\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport { WebXRProfiledMotionController } from \"./webXRProfiledMotionController\";\r\nimport { Nullable } from \"../../types\";\r\n\r\n/**\r\n * A construction function type to create a new controller based on an xrInput object\r\n */\r\nexport type MotionControllerConstructor = (xrInput: XRInputSource, scene: Scene) => WebXRAbstractMotionController;\r\n\r\n/**\r\n * The MotionController Manager manages all registered motion controllers and loads the right one when needed.\r\n *\r\n * When this repository is complete: https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets\r\n * it should be replaced with auto-loaded controllers.\r\n *\r\n * When using a model try to stay as generic as possible. Eventually there will be no need in any of the controller classes\r\n */\r\nexport class WebXRMotionControllerManager {\r\n    private static _AvailableControllers: { [type: string]: MotionControllerConstructor } = {};\r\n    private static _Fallbacks: { [profileId: string]: string[] } = {};\r\n    // cache for loading\r\n    private static _ProfileLoadingPromises: { [profileName: string]: Promise<IMotionControllerProfile> } = {};\r\n    private static _ProfilesList: Nullable<Promise<{ [profile: string]: string }>>;\r\n\r\n    /**\r\n     * The base URL of the online controller repository. Can be changed at any time.\r\n     */\r\n    public static BaseRepositoryUrl = \"https://immersive-web.github.io/webxr-input-profiles/packages/viewer/dist\";\r\n    /**\r\n     * Which repository gets priority - local or online\r\n     */\r\n    public static PrioritizeOnlineRepository: boolean = true;\r\n    /**\r\n     * Use the online repository, or use only locally-defined controllers\r\n     */\r\n    public static UseOnlineRepository: boolean = true;\r\n\r\n    /**\r\n     * Clear the cache used for profile loading and reload when requested again\r\n     */\r\n    public static ClearProfilesCache() {\r\n        this._ProfilesList = null;\r\n        this._ProfileLoadingPromises = {};\r\n    }\r\n\r\n    /**\r\n     * Register the default fallbacks.\r\n     * This function is called automatically when this file is imported.\r\n     */\r\n    public static DefaultFallbacks() {\r\n        this.RegisterFallbacksForProfileId(\"google-daydream\", [\"generic-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"htc-vive-focus\", [\"generic-trigger-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"htc-vive\", [\"generic-trigger-squeeze-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"magicleap-one\", [\"generic-trigger-squeeze-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"windows-mixed-reality\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"microsoft-mixed-reality\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"oculus-go\", [\"generic-trigger-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"oculus-touch-v2\", [\"oculus-touch\", \"generic-trigger-squeeze-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"oculus-touch\", [\"generic-trigger-squeeze-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"samsung-gearvr\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"samsung-odyssey\", [\"generic-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"valve-index\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\r\n    }\r\n\r\n    /**\r\n     * Find a fallback profile if the profile was not found. There are a few predefined generic profiles.\r\n     * @param profileId the profile to which a fallback needs to be found\r\n     * @return an array with corresponding fallback profiles\r\n     */\r\n    public static FindFallbackWithProfileId(profileId: string): string[] {\r\n        const returnArray = this._Fallbacks[profileId] || [];\r\n\r\n        returnArray.unshift(profileId);\r\n        return returnArray;\r\n    }\r\n\r\n    /**\r\n     * When acquiring a new xrInput object (usually by the WebXRInput class), match it with the correct profile.\r\n     * The order of search:\r\n     *\r\n     * 1) Iterate the profiles array of the xr input and try finding a corresponding motion controller\r\n     * 2) (If not found) search in the gamepad id and try using it (legacy versions only)\r\n     * 3) search for registered fallbacks (should be redundant, nonetheless it makes sense to check)\r\n     * 4) return the generic trigger controller if none were found\r\n     *\r\n     * @param xrInput the xrInput to which a new controller is initialized\r\n     * @param scene the scene to which the model will be added\r\n     * @param forceProfile force a certain profile for this controller\r\n     * @return A promise that fulfils with the motion controller class for this profile id or the generic standard class if none was found\r\n     */\r\n    public static GetMotionControllerWithXRInput(xrInput: XRInputSource, scene: Scene, forceProfile?: string): Promise<WebXRAbstractMotionController> {\r\n        const profileArray: string[] = [];\r\n        if (forceProfile) {\r\n            profileArray.push(forceProfile);\r\n        }\r\n        profileArray.push(...(xrInput.profiles || []));\r\n\r\n        // emulator support\r\n        if (profileArray.length && !profileArray[0]) {\r\n            // remove the first \"undefined\" that the emulator is adding\r\n            profileArray.pop();\r\n        }\r\n\r\n        // legacy support - try using the gamepad id\r\n        if (xrInput.gamepad && xrInput.gamepad.id) {\r\n            switch (xrInput.gamepad.id) {\r\n                case xrInput.gamepad.id.match(/oculus touch/gi) ? xrInput.gamepad.id : undefined:\r\n                    // oculus in gamepad id\r\n                    profileArray.push(\"oculus-touch-v2\");\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // make sure microsoft/windows mixed reality works correctly\r\n        const windowsMRIdx = profileArray.indexOf(\"windows-mixed-reality\");\r\n        if (windowsMRIdx !== -1) {\r\n            profileArray.splice(windowsMRIdx, 0, \"microsoft-mixed-reality\");\r\n        }\r\n\r\n        if (!profileArray.length) {\r\n            profileArray.push(\"generic-trigger\");\r\n        }\r\n\r\n        if (this.UseOnlineRepository) {\r\n            const firstFunction = this.PrioritizeOnlineRepository ? this._LoadProfileFromRepository : this._LoadProfilesFromAvailableControllers;\r\n            const secondFunction = this.PrioritizeOnlineRepository ? this._LoadProfilesFromAvailableControllers : this._LoadProfileFromRepository;\r\n\r\n            return firstFunction.call(this, profileArray, xrInput, scene).catch(() => {\r\n                return secondFunction.call(this, profileArray, xrInput, scene);\r\n            });\r\n        } else {\r\n            // use only available functions\r\n            return this._LoadProfilesFromAvailableControllers(profileArray, xrInput, scene);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a new controller based on its profile. This function will be called by the controller classes themselves.\r\n     *\r\n     * If you are missing a profile, make sure it is imported in your source, otherwise it will not register.\r\n     *\r\n     * @param type the profile type to register\r\n     * @param constructFunction the function to be called when loading this profile\r\n     */\r\n    public static RegisterController(type: string, constructFunction: MotionControllerConstructor) {\r\n        this._AvailableControllers[type] = constructFunction;\r\n    }\r\n\r\n    /**\r\n     * Register a fallback to a specific profile.\r\n     * @param profileId the profileId that will receive the fallbacks\r\n     * @param fallbacks A list of fallback profiles\r\n     */\r\n    public static RegisterFallbacksForProfileId(profileId: string, fallbacks: string[]): void {\r\n        if (this._Fallbacks[profileId]) {\r\n            this._Fallbacks[profileId].push(...fallbacks);\r\n        } else {\r\n            this._Fallbacks[profileId] = fallbacks;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will update the list of profiles available in the repository\r\n     * @return a promise that resolves to a map of profiles available online\r\n     */\r\n    public static UpdateProfilesList() {\r\n        this._ProfilesList = Tools.LoadFileAsync(this.BaseRepositoryUrl + \"/profiles/profilesList.json\", false).then((data) => {\r\n            return JSON.parse(data.toString());\r\n        });\r\n        return this._ProfilesList;\r\n    }\r\n\r\n    private static _LoadProfileFromRepository(profileArray: string[], xrInput: XRInputSource, scene: Scene): Promise<WebXRAbstractMotionController> {\r\n        return Promise.resolve()\r\n            .then(() => {\r\n                if (!this._ProfilesList) {\r\n                    return this.UpdateProfilesList();\r\n                } else {\r\n                    return this._ProfilesList;\r\n                }\r\n            })\r\n            .then((profilesList: { [profile: string]: string }) => {\r\n                // load the right profile\r\n                for (let i = 0; i < profileArray.length; ++i) {\r\n                    // defensive\r\n                    if (!profileArray[i]) {\r\n                        continue;\r\n                    }\r\n                    if (profilesList[profileArray[i]]) {\r\n                        return profileArray[i];\r\n                    }\r\n                }\r\n\r\n                throw new Error(`neither controller ${profileArray[0]} nor all fallbacks were found in the repository,`);\r\n            })\r\n            .then((profileToLoad: string) => {\r\n                // load the profile\r\n                if (!this._ProfileLoadingPromises[profileToLoad]) {\r\n                    this._ProfileLoadingPromises[profileToLoad] = Tools.LoadFileAsync(`${this.BaseRepositoryUrl}/profiles/${profileToLoad}/profile.json`, false).then((data) => <IMotionControllerProfile>JSON.parse(data as string));\r\n                }\r\n                return this._ProfileLoadingPromises[profileToLoad];\r\n            })\r\n            .then((profile: IMotionControllerProfile) => {\r\n                return new WebXRProfiledMotionController(scene, xrInput, profile, this.BaseRepositoryUrl);\r\n            });\r\n    }\r\n\r\n    private static _LoadProfilesFromAvailableControllers(profileArray: string[], xrInput: XRInputSource, scene: Scene) {\r\n        // check fallbacks\r\n        for (let i = 0; i < profileArray.length; ++i) {\r\n            // defensive\r\n            if (!profileArray[i]) {\r\n                continue;\r\n            }\r\n            const fallbacks = this.FindFallbackWithProfileId(profileArray[i]);\r\n            for (let j = 0; j < fallbacks.length; ++j) {\r\n                const constructionFunction = this._AvailableControllers[fallbacks[j]];\r\n                if (constructionFunction) {\r\n                    return Promise.resolve(constructionFunction(xrInput, scene));\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new Error(`no controller requested was found in the available controllers list`);\r\n    }\r\n}\r\n\r\n// register the generic profile(s) here so we will at least have them\r\nWebXRMotionControllerManager.RegisterController(WebXRGenericTriggerMotionController.ProfileId, (xrInput: XRInputSource, scene: Scene) => {\r\n    return new WebXRGenericTriggerMotionController(scene, <any>xrInput.gamepad, xrInput.handedness);\r\n});\r\n\r\n// register fallbacks\r\nWebXRMotionControllerManager.DefaultFallbacks();\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}