{"ast":null,"code":"/**\r\n * Class used to define a retry strategy when error happens while loading assets\r\n */\nvar RetryStrategy =\n/** @class */\nfunction () {\n  function RetryStrategy() {}\n  /**\r\n   * Function used to defines an exponential back off strategy\r\n   * @param maxRetries defines the maximum number of retries (3 by default)\r\n   * @param baseInterval defines the interval between retries\r\n   * @returns the strategy function to use\r\n   */\n\n\n  RetryStrategy.ExponentialBackoff = function (maxRetries, baseInterval) {\n    if (maxRetries === void 0) {\n      maxRetries = 3;\n    }\n\n    if (baseInterval === void 0) {\n      baseInterval = 500;\n    }\n\n    return function (url, request, retryIndex) {\n      if (request.status !== 0 || retryIndex >= maxRetries || url.indexOf(\"file:\") !== -1) {\n        return -1;\n      }\n\n      return Math.pow(2, retryIndex) * baseInterval;\n    };\n  };\n\n  return RetryStrategy;\n}();\n\nexport { RetryStrategy };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/retryStrategy.ts"],"names":[],"mappings":"AAEA;;;AAGA,IAAA,aAAA;AAAA;AAAA,YAAA;AAAA,WAAA,aAAA,GAAA,CAgBC;AAfG;;;;;;;;AAMc,EAAA,aAAA,CAAA,kBAAA,GAAd,UAAiC,UAAjC,EAAiD,YAAjD,EAAmE;AAAlC,QAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,UAAA,GAAA,CAAA;AAAc;;AAAE,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,GAAA;AAAkB;;AAC/D,WAAO,UAAC,GAAD,EAAc,OAAd,EAAmC,UAAnC,EAAqD;AACxD,UAAI,OAAO,CAAC,MAAR,KAAmB,CAAnB,IAAwB,UAAU,IAAI,UAAtC,IAAoD,GAAG,CAAC,OAAJ,CAAY,OAAZ,MAAyB,CAAC,CAAlF,EAAqF;AACjF,eAAO,CAAC,CAAR;AACH;;AAED,aAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,UAAZ,IAA0B,YAAjC;AACH,KAND;AAOH,GARa;;AASlB,SAAA,aAAA;AAAC,CAhBD,EAAA","sourcesContent":["import { WebRequest } from './webRequest';\r\n\r\n/**\r\n * Class used to define a retry strategy when error happens while loading assets\r\n */\r\nexport class RetryStrategy {\r\n    /**\r\n     * Function used to defines an exponential back off strategy\r\n     * @param maxRetries defines the maximum number of retries (3 by default)\r\n     * @param baseInterval defines the interval between retries\r\n     * @returns the strategy function to use\r\n     */\r\n    public static ExponentialBackoff(maxRetries = 3, baseInterval = 500) {\r\n        return (url: string, request: WebRequest, retryIndex: number): number => {\r\n            if (request.status !== 0 || retryIndex >= maxRetries || url.indexOf(\"file:\") !== -1) {\r\n                return -1;\r\n            }\r\n\r\n            return Math.pow(2, retryIndex) * baseInterval;\r\n        };\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}