{"ast":null,"code":"import { Effect } from \"../Materials/effect\";\nvar name = 'vrDistortionCorrectionPixelShader';\nvar shader = \"\\nvarying vec2 vUV;\\nuniform sampler2D textureSampler;\\nuniform vec2 LensCenter;\\nuniform vec2 Scale;\\nuniform vec2 ScaleIn;\\nuniform vec4 HmdWarpParam;\\nvec2 HmdWarp(vec2 in01) {\\nvec2 theta=(in01-LensCenter)*ScaleIn;\\nfloat rSq=theta.x*theta.x+theta.y*theta.y;\\nvec2 rvector=theta*(HmdWarpParam.x+HmdWarpParam.y*rSq+HmdWarpParam.z*rSq*rSq+HmdWarpParam.w*rSq*rSq*rSq);\\nreturn LensCenter+Scale*rvector;\\n}\\nvoid main(void)\\n{\\nvec2 tc=HmdWarp(vUV);\\nif (tc.x <0.0 || tc.x>1.0 || tc.y<0.0 || tc.y>1.0)\\ngl_FragColor=vec4(0.0,0.0,0.0,0.0);\\nelse{\\ngl_FragColor=texture2D(textureSampler,tc);\\n}\\n}\";\nEffect.ShadersStore[name] = shader;\n/** @hidden */\n\nexport var vrDistortionCorrectionPixelShader = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"sources":["../../../sourceES6/core/Shaders/vrDistortionCorrection.fragment.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,qBAAvB;AAEA,IAAI,IAAI,GAAG,mCAAX;AACA,IAAI,MAAM,GAAG,qlBAAb;AAuBA,MAAM,CAAC,YAAP,CAAoB,IAApB,IAA4B,MAA5B;AACA;;AACA,OAAO,IAAI,iCAAiC,GAAG;AAAE,EAAA,IAAI,EAAA,IAAN;AAAQ,EAAA,MAAM,EAAA;AAAd,CAAxC","sourcesContent":["import { Effect } from \"../Materials/effect\";\n\nlet name = 'vrDistortionCorrectionPixelShader';\nlet shader = `\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\nuniform vec2 LensCenter;\nuniform vec2 Scale;\nuniform vec2 ScaleIn;\nuniform vec4 HmdWarpParam;\nvec2 HmdWarp(vec2 in01) {\nvec2 theta=(in01-LensCenter)*ScaleIn;\nfloat rSq=theta.x*theta.x+theta.y*theta.y;\nvec2 rvector=theta*(HmdWarpParam.x+HmdWarpParam.y*rSq+HmdWarpParam.z*rSq*rSq+HmdWarpParam.w*rSq*rSq*rSq);\nreturn LensCenter+Scale*rvector;\n}\nvoid main(void)\n{\nvec2 tc=HmdWarp(vUV);\nif (tc.x <0.0 || tc.x>1.0 || tc.y<0.0 || tc.y>1.0)\ngl_FragColor=vec4(0.0,0.0,0.0,0.0);\nelse{\ngl_FragColor=texture2D(textureSampler,tc);\n}\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var vrDistortionCorrectionPixelShader = { name, shader };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}