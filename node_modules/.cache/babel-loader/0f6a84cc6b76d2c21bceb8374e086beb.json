{"ast":null,"code":"/**\r\n * Manages the defines for the Material\r\n */\nvar MaterialDefines =\n/** @class */\nfunction () {\n  function MaterialDefines() {\n    this._isDirty = true;\n    /** @hidden */\n\n    this._areLightsDirty = true;\n    /** @hidden */\n\n    this._areLightsDisposed = false;\n    /** @hidden */\n\n    this._areAttributesDirty = true;\n    /** @hidden */\n\n    this._areTexturesDirty = true;\n    /** @hidden */\n\n    this._areFresnelDirty = true;\n    /** @hidden */\n\n    this._areMiscDirty = true;\n    /** @hidden */\n\n    this._arePrePassDirty = true;\n    /** @hidden */\n\n    this._areImageProcessingDirty = true;\n    /** @hidden */\n\n    this._normals = false;\n    /** @hidden */\n\n    this._uvs = false;\n    /** @hidden */\n\n    this._needNormals = false;\n    /** @hidden */\n\n    this._needUVs = false;\n  }\n\n  Object.defineProperty(MaterialDefines.prototype, \"isDirty\", {\n    /**\r\n     * Specifies if the material needs to be re-calculated\r\n     */\n    get: function () {\n      return this._isDirty;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Marks the material to indicate that it has been re-calculated\r\n   */\n\n  MaterialDefines.prototype.markAsProcessed = function () {\n    this._isDirty = false;\n    this._areAttributesDirty = false;\n    this._areTexturesDirty = false;\n    this._areFresnelDirty = false;\n    this._areLightsDirty = false;\n    this._areLightsDisposed = false;\n    this._areMiscDirty = false;\n    this._arePrePassDirty = false;\n    this._areImageProcessingDirty = false;\n  };\n  /**\r\n   * Marks the material to indicate that it needs to be re-calculated\r\n   */\n\n\n  MaterialDefines.prototype.markAsUnprocessed = function () {\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the material to indicate all of its defines need to be re-calculated\r\n   */\n\n\n  MaterialDefines.prototype.markAllAsDirty = function () {\n    this._areTexturesDirty = true;\n    this._areAttributesDirty = true;\n    this._areLightsDirty = true;\n    this._areFresnelDirty = true;\n    this._areMiscDirty = true;\n    this._areImageProcessingDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the material to indicate that image processing needs to be re-calculated\r\n   */\n\n\n  MaterialDefines.prototype.markAsImageProcessingDirty = function () {\n    this._areImageProcessingDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the material to indicate the lights need to be re-calculated\r\n   * @param disposed Defines whether the light is dirty due to dispose or not\r\n   */\n\n\n  MaterialDefines.prototype.markAsLightDirty = function (disposed) {\n    if (disposed === void 0) {\n      disposed = false;\n    }\n\n    this._areLightsDirty = true;\n    this._areLightsDisposed = this._areLightsDisposed || disposed;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the attribute state as changed\r\n   */\n\n\n  MaterialDefines.prototype.markAsAttributesDirty = function () {\n    this._areAttributesDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the texture state as changed\r\n   */\n\n\n  MaterialDefines.prototype.markAsTexturesDirty = function () {\n    this._areTexturesDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the fresnel state as changed\r\n   */\n\n\n  MaterialDefines.prototype.markAsFresnelDirty = function () {\n    this._areFresnelDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the misc state as changed\r\n   */\n\n\n  MaterialDefines.prototype.markAsMiscDirty = function () {\n    this._areMiscDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the prepass state as changed\r\n   */\n\n\n  MaterialDefines.prototype.markAsPrePassDirty = function () {\n    this._arePrePassDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Rebuilds the material defines\r\n   */\n\n\n  MaterialDefines.prototype.rebuild = function () {\n    this._keys = [];\n\n    for (var _i = 0, _a = Object.keys(this); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      if (key[0] === \"_\") {\n        continue;\n      }\n\n      this._keys.push(key);\n    }\n  };\n  /**\r\n   * Specifies if two material defines are equal\r\n   * @param other - A material define instance to compare to\r\n   * @returns - Boolean indicating if the material defines are equal (true) or not (false)\r\n   */\n\n\n  MaterialDefines.prototype.isEqual = function (other) {\n    if (this._keys.length !== other._keys.length) {\n      return false;\n    }\n\n    for (var index = 0; index < this._keys.length; index++) {\n      var prop = this._keys[index];\n\n      if (this[prop] !== other[prop]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Clones this instance's defines to another instance\r\n   * @param other - material defines to clone values to\r\n   */\n\n\n  MaterialDefines.prototype.cloneTo = function (other) {\n    if (this._keys.length !== other._keys.length) {\n      other._keys = this._keys.slice(0);\n    }\n\n    for (var index = 0; index < this._keys.length; index++) {\n      var prop = this._keys[index];\n      other[prop] = this[prop];\n    }\n  };\n  /**\r\n   * Resets the material define values\r\n   */\n\n\n  MaterialDefines.prototype.reset = function () {\n    for (var index = 0; index < this._keys.length; index++) {\n      var prop = this._keys[index];\n      var type = typeof this[prop];\n\n      switch (type) {\n        case \"number\":\n          this[prop] = 0;\n          break;\n\n        case \"string\":\n          this[prop] = \"\";\n          break;\n\n        default:\n          this[prop] = false;\n          break;\n      }\n    }\n  };\n  /**\r\n   * Converts the material define values to a string\r\n   * @returns - String of material define information\r\n   */\n\n\n  MaterialDefines.prototype.toString = function () {\n    var result = \"\";\n\n    for (var index = 0; index < this._keys.length; index++) {\n      var prop = this._keys[index];\n      var value = this[prop];\n      var type = typeof value;\n\n      switch (type) {\n        case \"number\":\n        case \"string\":\n          result += \"#define \" + prop + \" \" + value + \"\\n\";\n          break;\n\n        default:\n          if (value) {\n            result += \"#define \" + prop + \"\\n\";\n          }\n\n          break;\n      }\n    }\n\n    return result;\n  };\n\n  return MaterialDefines;\n}();\n\nexport { MaterialDefines };","map":{"version":3,"sources":["../../../sourceES6/core/Materials/materialDefines.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Manages the defines for the Material\r\n */\r\nexport class MaterialDefines {\r\n    /** @hidden */\r\n    protected _keys: string[];\r\n    private _isDirty = true;\r\n    /** @hidden */\r\n    public _renderId: number;\r\n\r\n    /** @hidden */\r\n    public _areLightsDirty = true;\r\n    /** @hidden */\r\n    public _areLightsDisposed = false;\r\n    /** @hidden */\r\n    public _areAttributesDirty = true;\r\n    /** @hidden */\r\n    public _areTexturesDirty = true;\r\n    /** @hidden */\r\n    public _areFresnelDirty = true;\r\n    /** @hidden */\r\n    public _areMiscDirty = true;\r\n    /** @hidden */\r\n    public _arePrePassDirty = true;\r\n    /** @hidden */\r\n    public _areImageProcessingDirty = true;\r\n\r\n    /** @hidden */\r\n    public _normals = false;\r\n    /** @hidden */\r\n    public _uvs = false;\r\n\r\n    /** @hidden */\r\n    public _needNormals = false;\r\n    /** @hidden */\r\n    public _needUVs = false;\r\n\r\n    [id: string]: any;\r\n\r\n    /**\r\n     * Specifies if the material needs to be re-calculated\r\n     */\r\n    public get isDirty(): boolean {\r\n        return this._isDirty;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it has been re-calculated\r\n     */\r\n    public markAsProcessed() {\r\n        this._isDirty = false;\r\n        this._areAttributesDirty = false;\r\n        this._areTexturesDirty = false;\r\n        this._areFresnelDirty = false;\r\n        this._areLightsDirty = false;\r\n        this._areLightsDisposed = false;\r\n        this._areMiscDirty = false;\r\n        this._arePrePassDirty = false;\r\n        this._areImageProcessingDirty = false;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that it needs to be re-calculated\r\n     */\r\n    public markAsUnprocessed() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate all of its defines need to be re-calculated\r\n     */\r\n    public markAllAsDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._areAttributesDirty = true;\r\n        this._areLightsDirty = true;\r\n        this._areFresnelDirty = true;\r\n        this._areMiscDirty = true;\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate that image processing needs to be re-calculated\r\n     */\r\n    public markAsImageProcessingDirty() {\r\n        this._areImageProcessingDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the material to indicate the lights need to be re-calculated\r\n     * @param disposed Defines whether the light is dirty due to dispose or not\r\n     */\r\n    public markAsLightDirty(disposed = false) {\r\n        this._areLightsDirty = true;\r\n        this._areLightsDisposed = this._areLightsDisposed || disposed;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the attribute state as changed\r\n     */\r\n    public markAsAttributesDirty() {\r\n        this._areAttributesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the texture state as changed\r\n     */\r\n    public markAsTexturesDirty() {\r\n        this._areTexturesDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the fresnel state as changed\r\n     */\r\n    public markAsFresnelDirty() {\r\n        this._areFresnelDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the misc state as changed\r\n     */\r\n    public markAsMiscDirty() {\r\n        this._areMiscDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Marks the prepass state as changed\r\n     */\r\n    public markAsPrePassDirty() {\r\n        this._arePrePassDirty = true;\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the material defines\r\n     */\r\n    public rebuild() {\r\n        this._keys = [];\r\n\r\n        for (var key of Object.keys(this)) {\r\n            if (key[0] === \"_\") {\r\n                continue;\r\n            }\r\n\r\n            this._keys.push(key);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies if two material defines are equal\r\n     * @param other - A material define instance to compare to\r\n     * @returns - Boolean indicating if the material defines are equal (true) or not (false)\r\n     */\r\n    public isEqual(other: MaterialDefines): boolean {\r\n        if (this._keys.length !== other._keys.length) {\r\n            return false;\r\n        }\r\n\r\n        for (var index = 0; index < this._keys.length; index++) {\r\n            var prop = this._keys[index];\r\n\r\n            if ((<any>this)[prop] !== (<any>other)[prop]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clones this instance's defines to another instance\r\n     * @param other - material defines to clone values to\r\n     */\r\n    public cloneTo(other: MaterialDefines): void {\r\n        if (this._keys.length !== other._keys.length) {\r\n            other._keys = this._keys.slice(0);\r\n        }\r\n\r\n        for (var index = 0; index < this._keys.length; index++) {\r\n            var prop = this._keys[index];\r\n\r\n            (<any>other)[prop] = (<any>this)[prop];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the material define values\r\n     */\r\n    public reset(): void {\r\n        for (var index = 0; index < this._keys.length; index++) {\r\n            var prop = this._keys[index];\r\n            var type = typeof (<any>this)[prop];\r\n\r\n            switch (type) {\r\n                case \"number\":\r\n                    (<any>this)[prop] = 0;\r\n                    break;\r\n                case \"string\":\r\n                    (<any>this)[prop] = \"\";\r\n                    break;\r\n                default:\r\n                    (<any>this)[prop] = false;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts the material define values to a string\r\n     * @returns - String of material define information\r\n     */\r\n    public toString(): string {\r\n        var result = \"\";\r\n        for (var index = 0; index < this._keys.length; index++) {\r\n            var prop = this._keys[index];\r\n            var value = (<any>this)[prop];\r\n            var type = typeof value;\r\n\r\n            switch (type) {\r\n                case \"number\":\r\n                case \"string\":\r\n                    result += \"#define \" + prop + \" \" + value + \"\\n\";\r\n                    break;\r\n                default:\r\n                    if (value) {\r\n                        result += \"#define \" + prop + \"\\n\";\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}