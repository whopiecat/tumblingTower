{"ast":null,"code":"import { Tags } from \"../Misc/tags\";\nimport { Quaternion, Vector2, Vector3, Matrix } from \"../Maths/math.vector\";\nimport { _DevTools } from './devTools';\nimport { Color4, Color3 } from '../Maths/math.color';\nvar __decoratorInitialStore = {};\nvar __mergedStore = {};\n\nvar _copySource = function (creationFunction, source, instanciate) {\n  var destination = creationFunction(); // Tags\n\n  if (Tags) {\n    Tags.AddTagsTo(destination, source.tags);\n  }\n\n  var classStore = getMergedStore(destination); // Properties\n\n  for (var property in classStore) {\n    var propertyDescriptor = classStore[property];\n    var sourceProperty = source[property];\n    var propertyType = propertyDescriptor.type;\n\n    if (sourceProperty !== undefined && sourceProperty !== null && property !== \"uniqueId\") {\n      switch (propertyType) {\n        case 0: // Value\n\n        case 6: // Mesh reference\n\n        case 11:\n          // Camera reference\n          destination[property] = sourceProperty;\n          break;\n\n        case 1:\n          // Texture\n          destination[property] = instanciate || sourceProperty.isRenderTarget ? sourceProperty : sourceProperty.clone();\n          break;\n\n        case 2: // Color3\n\n        case 3: // FresnelParameters\n\n        case 4: // Vector2\n\n        case 5: // Vector3\n\n        case 7: // Color Curves\n\n        case 10: // Quaternion\n\n        case 12:\n          // Matrix\n          destination[property] = instanciate ? sourceProperty : sourceProperty.clone();\n          break;\n      }\n    }\n  }\n\n  return destination;\n};\n\nfunction getDirectStore(target) {\n  var classKey = target.getClassName();\n\n  if (!__decoratorInitialStore[classKey]) {\n    __decoratorInitialStore[classKey] = {};\n  }\n\n  return __decoratorInitialStore[classKey];\n}\n/**\r\n * Return the list of properties flagged as serializable\r\n * @param target: host object\r\n */\n\n\nfunction getMergedStore(target) {\n  var classKey = target.getClassName();\n\n  if (__mergedStore[classKey]) {\n    return __mergedStore[classKey];\n  }\n\n  __mergedStore[classKey] = {};\n  var store = __mergedStore[classKey];\n  var currentTarget = target;\n  var currentKey = classKey;\n\n  while (currentKey) {\n    var initialStore = __decoratorInitialStore[currentKey];\n\n    for (var property in initialStore) {\n      store[property] = initialStore[property];\n    }\n\n    var parent_1 = void 0;\n    var done = false;\n\n    do {\n      parent_1 = Object.getPrototypeOf(currentTarget);\n\n      if (!parent_1.getClassName) {\n        done = true;\n        break;\n      }\n\n      if (parent_1.getClassName() !== currentKey) {\n        break;\n      }\n\n      currentTarget = parent_1;\n    } while (parent_1);\n\n    if (done) {\n      break;\n    }\n\n    currentKey = parent_1.getClassName();\n    currentTarget = parent_1;\n  }\n\n  return store;\n}\n\nfunction generateSerializableMember(type, sourceName) {\n  return function (target, propertyKey) {\n    var classStore = getDirectStore(target);\n\n    if (!classStore[propertyKey]) {\n      classStore[propertyKey] = {\n        type: type,\n        sourceName: sourceName\n      };\n    }\n  };\n}\n\nfunction generateExpandMember(setCallback, targetKey) {\n  if (targetKey === void 0) {\n    targetKey = null;\n  }\n\n  return function (target, propertyKey) {\n    var key = targetKey || \"_\" + propertyKey;\n    Object.defineProperty(target, propertyKey, {\n      get: function () {\n        return this[key];\n      },\n      set: function (value) {\n        if (this[key] === value) {\n          return;\n        }\n\n        this[key] = value;\n        target[setCallback].apply(this);\n      },\n      enumerable: true,\n      configurable: true\n    });\n  };\n}\n\nexport function expandToProperty(callback, targetKey) {\n  if (targetKey === void 0) {\n    targetKey = null;\n  }\n\n  return generateExpandMember(callback, targetKey);\n}\nexport function serialize(sourceName) {\n  return generateSerializableMember(0, sourceName); // value member\n}\nexport function serializeAsTexture(sourceName) {\n  return generateSerializableMember(1, sourceName); // texture member\n}\nexport function serializeAsColor3(sourceName) {\n  return generateSerializableMember(2, sourceName); // color3 member\n}\nexport function serializeAsFresnelParameters(sourceName) {\n  return generateSerializableMember(3, sourceName); // fresnel parameters member\n}\nexport function serializeAsVector2(sourceName) {\n  return generateSerializableMember(4, sourceName); // vector2 member\n}\nexport function serializeAsVector3(sourceName) {\n  return generateSerializableMember(5, sourceName); // vector3 member\n}\nexport function serializeAsMeshReference(sourceName) {\n  return generateSerializableMember(6, sourceName); // mesh reference member\n}\nexport function serializeAsColorCurves(sourceName) {\n  return generateSerializableMember(7, sourceName); // color curves\n}\nexport function serializeAsColor4(sourceName) {\n  return generateSerializableMember(8, sourceName); // color 4\n}\nexport function serializeAsImageProcessingConfiguration(sourceName) {\n  return generateSerializableMember(9, sourceName); // image processing\n}\nexport function serializeAsQuaternion(sourceName) {\n  return generateSerializableMember(10, sourceName); // quaternion member\n}\nexport function serializeAsMatrix(sourceName) {\n  return generateSerializableMember(12, sourceName); // matrix member\n}\n/**\r\n * Decorator used to define property that can be serialized as reference to a camera\r\n * @param sourceName defines the name of the property to decorate\r\n */\n\nexport function serializeAsCameraReference(sourceName) {\n  return generateSerializableMember(11, sourceName); // camera reference member\n}\n/**\r\n * Class used to help serialization objects\r\n */\n\nvar SerializationHelper =\n/** @class */\nfunction () {\n  function SerializationHelper() {}\n  /**\r\n   * Appends the serialized animations from the source animations\r\n   * @param source Source containing the animations\r\n   * @param destination Target to store the animations\r\n   */\n\n\n  SerializationHelper.AppendSerializedAnimations = function (source, destination) {\n    if (source.animations) {\n      destination.animations = [];\n\n      for (var animationIndex = 0; animationIndex < source.animations.length; animationIndex++) {\n        var animation = source.animations[animationIndex];\n        destination.animations.push(animation.serialize());\n      }\n    }\n  };\n  /**\r\n   * Static function used to serialized a specific entity\r\n   * @param entity defines the entity to serialize\r\n   * @param serializationObject defines the optional target obecjt where serialization data will be stored\r\n   * @returns a JSON compatible object representing the serialization of the entity\r\n   */\n\n\n  SerializationHelper.Serialize = function (entity, serializationObject) {\n    if (!serializationObject) {\n      serializationObject = {};\n    } // Tags\n\n\n    if (Tags) {\n      serializationObject.tags = Tags.GetTags(entity);\n    }\n\n    var serializedProperties = getMergedStore(entity); // Properties\n\n    for (var property in serializedProperties) {\n      var propertyDescriptor = serializedProperties[property];\n      var targetPropertyName = propertyDescriptor.sourceName || property;\n      var propertyType = propertyDescriptor.type;\n      var sourceProperty = entity[property];\n\n      if (sourceProperty !== undefined && sourceProperty !== null && property !== \"uniqueId\") {\n        switch (propertyType) {\n          case 0:\n            // Value\n            serializationObject[targetPropertyName] = sourceProperty;\n            break;\n\n          case 1:\n            // Texture\n            serializationObject[targetPropertyName] = sourceProperty.serialize();\n            break;\n\n          case 2:\n            // Color3\n            serializationObject[targetPropertyName] = sourceProperty.asArray();\n            break;\n\n          case 3:\n            // FresnelParameters\n            serializationObject[targetPropertyName] = sourceProperty.serialize();\n            break;\n\n          case 4:\n            // Vector2\n            serializationObject[targetPropertyName] = sourceProperty.asArray();\n            break;\n\n          case 5:\n            // Vector3\n            serializationObject[targetPropertyName] = sourceProperty.asArray();\n            break;\n\n          case 6:\n            // Mesh reference\n            serializationObject[targetPropertyName] = sourceProperty.id;\n            break;\n\n          case 7:\n            // Color Curves\n            serializationObject[targetPropertyName] = sourceProperty.serialize();\n            break;\n\n          case 8:\n            // Color 4\n            serializationObject[targetPropertyName] = sourceProperty.asArray();\n            break;\n\n          case 9:\n            // Image Processing\n            serializationObject[targetPropertyName] = sourceProperty.serialize();\n            break;\n\n          case 10:\n            // Quaternion\n            serializationObject[targetPropertyName] = sourceProperty.asArray();\n            break;\n\n          case 11:\n            // Camera reference\n            serializationObject[targetPropertyName] = sourceProperty.id;\n\n          case 12:\n            // Matrix\n            serializationObject[targetPropertyName] = sourceProperty.asArray();\n            break;\n        }\n      }\n    }\n\n    return serializationObject;\n  };\n  /**\r\n   * Creates a new entity from a serialization data object\r\n   * @param creationFunction defines a function used to instanciated the new entity\r\n   * @param source defines the source serialization data\r\n   * @param scene defines the hosting scene\r\n   * @param rootUrl defines the root url for resources\r\n   * @returns a new entity\r\n   */\n\n\n  SerializationHelper.Parse = function (creationFunction, source, scene, rootUrl) {\n    if (rootUrl === void 0) {\n      rootUrl = null;\n    }\n\n    var destination = creationFunction();\n\n    if (!rootUrl) {\n      rootUrl = \"\";\n    } // Tags\n\n\n    if (Tags) {\n      Tags.AddTagsTo(destination, source.tags);\n    }\n\n    var classStore = getMergedStore(destination); // Properties\n\n    for (var property in classStore) {\n      var propertyDescriptor = classStore[property];\n      var sourceProperty = source[propertyDescriptor.sourceName || property];\n      var propertyType = propertyDescriptor.type;\n\n      if (sourceProperty !== undefined && sourceProperty !== null && property !== \"uniqueId\") {\n        var dest = destination;\n\n        switch (propertyType) {\n          case 0:\n            // Value\n            dest[property] = sourceProperty;\n            break;\n\n          case 1:\n            // Texture\n            if (scene) {\n              dest[property] = SerializationHelper._TextureParser(sourceProperty, scene, rootUrl);\n            }\n\n            break;\n\n          case 2:\n            // Color3\n            dest[property] = Color3.FromArray(sourceProperty);\n            break;\n\n          case 3:\n            // FresnelParameters\n            dest[property] = SerializationHelper._FresnelParametersParser(sourceProperty);\n            break;\n\n          case 4:\n            // Vector2\n            dest[property] = Vector2.FromArray(sourceProperty);\n            break;\n\n          case 5:\n            // Vector3\n            dest[property] = Vector3.FromArray(sourceProperty);\n            break;\n\n          case 6:\n            // Mesh reference\n            if (scene) {\n              dest[property] = scene.getLastMeshByID(sourceProperty);\n            }\n\n            break;\n\n          case 7:\n            // Color Curves\n            dest[property] = SerializationHelper._ColorCurvesParser(sourceProperty);\n            break;\n\n          case 8:\n            // Color 4\n            dest[property] = Color4.FromArray(sourceProperty);\n            break;\n\n          case 9:\n            // Image Processing\n            dest[property] = SerializationHelper._ImageProcessingConfigurationParser(sourceProperty);\n            break;\n\n          case 10:\n            // Quaternion\n            dest[property] = Quaternion.FromArray(sourceProperty);\n            break;\n\n          case 11:\n            // Camera reference\n            if (scene) {\n              dest[property] = scene.getCameraByID(sourceProperty);\n            }\n\n          case 12:\n            // Matrix\n            dest[property] = Matrix.FromArray(sourceProperty);\n            break;\n        }\n      }\n    }\n\n    return destination;\n  };\n  /**\r\n   * Clones an object\r\n   * @param creationFunction defines the function used to instanciate the new object\r\n   * @param source defines the source object\r\n   * @returns the cloned object\r\n   */\n\n\n  SerializationHelper.Clone = function (creationFunction, source) {\n    return _copySource(creationFunction, source, false);\n  };\n  /**\r\n   * Instanciates a new object based on a source one (some data will be shared between both object)\r\n   * @param creationFunction defines the function used to instanciate the new object\r\n   * @param source defines the source object\r\n   * @returns the new object\r\n   */\n\n\n  SerializationHelper.Instanciate = function (creationFunction, source) {\n    return _copySource(creationFunction, source, true);\n  };\n  /** @hidden */\n\n\n  SerializationHelper._ImageProcessingConfigurationParser = function (sourceProperty) {\n    throw _DevTools.WarnImport(\"ImageProcessingConfiguration\");\n  };\n  /** @hidden */\n\n\n  SerializationHelper._FresnelParametersParser = function (sourceProperty) {\n    throw _DevTools.WarnImport(\"FresnelParameters\");\n  };\n  /** @hidden */\n\n\n  SerializationHelper._ColorCurvesParser = function (sourceProperty) {\n    throw _DevTools.WarnImport(\"ColorCurves\");\n  };\n  /** @hidden */\n\n\n  SerializationHelper._TextureParser = function (sourceProperty, scene, rootUrl) {\n    throw _DevTools.WarnImport(\"Texture\");\n  };\n\n  return SerializationHelper;\n}();\n\nexport { SerializationHelper };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/decorators.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tags } from \"../Misc/tags\";\r\nimport { Nullable } from \"../types\";\r\nimport { Quaternion, Vector2, Vector3, Matrix } from \"../Maths/math.vector\";\r\nimport { _DevTools } from './devTools';\r\nimport { IAnimatable } from '../Animations/animatable.interface';\r\nimport { Color4, Color3 } from '../Maths/math.color';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\ndeclare type Camera = import(\"../Cameras/camera\").Camera;\r\n\r\ndeclare type ImageProcessingConfiguration = import(\"../Materials/imageProcessingConfiguration\").ImageProcessingConfiguration;\r\ndeclare type FresnelParameters = import(\"../Materials/fresnelParameters\").FresnelParameters;\r\ndeclare type ColorCurves = import(\"../Materials/colorCurves\").ColorCurves;\r\ndeclare type BaseTexture = import(\"../Materials/Textures/baseTexture\").BaseTexture;\r\n\r\nvar __decoratorInitialStore = {};\r\nvar __mergedStore = {};\r\n\r\nvar _copySource = function <T>(creationFunction: () => T, source: T, instanciate: boolean): T {\r\n    var destination = creationFunction();\r\n\r\n    // Tags\r\n    if (Tags) {\r\n        Tags.AddTagsTo(destination, (<any>source).tags);\r\n    }\r\n\r\n    var classStore = getMergedStore(destination);\r\n\r\n    // Properties\r\n    for (var property in classStore) {\r\n        var propertyDescriptor = classStore[property];\r\n        var sourceProperty = (<any>source)[property];\r\n        var propertyType = propertyDescriptor.type;\r\n\r\n        if (sourceProperty !== undefined && sourceProperty !== null && property !== \"uniqueId\") {\r\n            switch (propertyType) {\r\n                case 0:     // Value\r\n                case 6:     // Mesh reference\r\n                case 11:    // Camera reference\r\n                    (<any>destination)[property] = sourceProperty;\r\n                    break;\r\n                case 1:     // Texture\r\n                    (<any>destination)[property] = (instanciate || sourceProperty.isRenderTarget) ? sourceProperty : sourceProperty.clone();\r\n                    break;\r\n                case 2:     // Color3\r\n                case 3:     // FresnelParameters\r\n                case 4:     // Vector2\r\n                case 5:     // Vector3\r\n                case 7:     // Color Curves\r\n                case 10:    // Quaternion\r\n                case 12:    // Matrix\r\n                    (<any>destination)[property] = instanciate ? sourceProperty : sourceProperty.clone();\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return destination;\r\n};\r\n\r\nfunction getDirectStore(target: any): any {\r\n    var classKey = target.getClassName();\r\n\r\n    if (!(<any>__decoratorInitialStore)[classKey]) {\r\n        (<any>__decoratorInitialStore)[classKey] = {};\r\n    }\r\n\r\n    return (<any>__decoratorInitialStore)[classKey];\r\n}\r\n\r\n/**\r\n * Return the list of properties flagged as serializable\r\n * @param target: host object\r\n */\r\nfunction getMergedStore(target: any): any {\r\n    let classKey = target.getClassName();\r\n\r\n    if ((<any>__mergedStore)[classKey]) {\r\n        return (<any>__mergedStore)[classKey];\r\n    }\r\n\r\n    (<any>__mergedStore)[classKey] = {};\r\n\r\n    let store = (<any>__mergedStore)[classKey];\r\n    let currentTarget = target;\r\n    let currentKey = classKey;\r\n    while (currentKey) {\r\n        let initialStore = (<any>__decoratorInitialStore)[currentKey];\r\n        for (var property in initialStore) {\r\n            store[property] = initialStore[property];\r\n        }\r\n\r\n        let parent: any;\r\n        let done = false;\r\n\r\n        do {\r\n            parent = Object.getPrototypeOf(currentTarget);\r\n            if (!parent.getClassName) {\r\n                done = true;\r\n                break;\r\n            }\r\n\r\n            if (parent.getClassName() !== currentKey) {\r\n                break;\r\n            }\r\n\r\n            currentTarget = parent;\r\n        }\r\n        while (parent);\r\n\r\n        if (done) {\r\n            break;\r\n        }\r\n\r\n        currentKey = parent.getClassName();\r\n        currentTarget = parent;\r\n    }\r\n\r\n    return store;\r\n}\r\n\r\nfunction generateSerializableMember(type: number, sourceName?: string) {\r\n    return (target: any, propertyKey: string | symbol) => {\r\n        var classStore = getDirectStore(target);\r\n\r\n        if (!classStore[propertyKey]) {\r\n            classStore[propertyKey] = { type: type, sourceName: sourceName };\r\n        }\r\n    };\r\n}\r\n\r\nfunction generateExpandMember(setCallback: string, targetKey: Nullable<string> = null) {\r\n    return (target: any, propertyKey: string) => {\r\n        var key = targetKey || (\"_\" + propertyKey);\r\n        Object.defineProperty(target, propertyKey, {\r\n            get: function(this: any) {\r\n                return this[key];\r\n            },\r\n            set: function(this: any, value) {\r\n                if (this[key] === value) {\r\n                    return;\r\n                }\r\n                this[key] = value;\r\n\r\n                target[setCallback].apply(this);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n    };\r\n}\r\n\r\nexport function expandToProperty(callback: string, targetKey: Nullable<string> = null) {\r\n    return generateExpandMember(callback, targetKey);\r\n}\r\n\r\nexport function serialize(sourceName?: string) {\r\n    return generateSerializableMember(0, sourceName); // value member\r\n}\r\n\r\nexport function serializeAsTexture(sourceName?: string) {\r\n    return generateSerializableMember(1, sourceName); // texture member\r\n}\r\n\r\nexport function serializeAsColor3(sourceName?: string) {\r\n    return generateSerializableMember(2, sourceName); // color3 member\r\n}\r\n\r\nexport function serializeAsFresnelParameters(sourceName?: string) {\r\n    return generateSerializableMember(3, sourceName); // fresnel parameters member\r\n}\r\n\r\nexport function serializeAsVector2(sourceName?: string) {\r\n    return generateSerializableMember(4, sourceName); // vector2 member\r\n}\r\n\r\nexport function serializeAsVector3(sourceName?: string) {\r\n    return generateSerializableMember(5, sourceName); // vector3 member\r\n}\r\n\r\nexport function serializeAsMeshReference(sourceName?: string) {\r\n    return generateSerializableMember(6, sourceName); // mesh reference member\r\n}\r\n\r\nexport function serializeAsColorCurves(sourceName?: string) {\r\n    return generateSerializableMember(7, sourceName); // color curves\r\n}\r\n\r\nexport function serializeAsColor4(sourceName?: string) {\r\n    return generateSerializableMember(8, sourceName); // color 4\r\n}\r\n\r\nexport function serializeAsImageProcessingConfiguration(sourceName?: string) {\r\n    return generateSerializableMember(9, sourceName); // image processing\r\n}\r\n\r\nexport function serializeAsQuaternion(sourceName?: string) {\r\n    return generateSerializableMember(10, sourceName); // quaternion member\r\n}\r\n\r\nexport function serializeAsMatrix(sourceName?: string) {\r\n    return generateSerializableMember(12, sourceName); // matrix member\r\n}\r\n\r\n/**\r\n * Decorator used to define property that can be serialized as reference to a camera\r\n * @param sourceName defines the name of the property to decorate\r\n */\r\nexport function serializeAsCameraReference(sourceName?: string) {\r\n    return generateSerializableMember(11, sourceName); // camera reference member\r\n}\r\n\r\n/**\r\n * Class used to help serialization objects\r\n */\r\nexport class SerializationHelper {\r\n    /** @hidden */\r\n    public static _ImageProcessingConfigurationParser = (sourceProperty: any): ImageProcessingConfiguration => {\r\n        throw _DevTools.WarnImport(\"ImageProcessingConfiguration\");\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _FresnelParametersParser = (sourceProperty: any): FresnelParameters => {\r\n        throw _DevTools.WarnImport(\"FresnelParameters\");\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _ColorCurvesParser = (sourceProperty: any): ColorCurves => {\r\n        throw _DevTools.WarnImport(\"ColorCurves\");\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _TextureParser = (sourceProperty: any, scene: Scene, rootUrl: string): Nullable<BaseTexture> => {\r\n        throw _DevTools.WarnImport(\"Texture\");\r\n    }\r\n\r\n    /**\r\n     * Appends the serialized animations from the source animations\r\n     * @param source Source containing the animations\r\n     * @param destination Target to store the animations\r\n     */\r\n    public static AppendSerializedAnimations(source: IAnimatable, destination: any): void {\r\n        if (source.animations) {\r\n            destination.animations = [];\r\n            for (var animationIndex = 0; animationIndex < source.animations.length; animationIndex++) {\r\n                var animation = source.animations[animationIndex];\r\n\r\n                destination.animations.push(animation.serialize());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Static function used to serialized a specific entity\r\n     * @param entity defines the entity to serialize\r\n     * @param serializationObject defines the optional target obecjt where serialization data will be stored\r\n     * @returns a JSON compatible object representing the serialization of the entity\r\n     */\r\n    public static Serialize<T>(entity: T, serializationObject?: any): any {\r\n        if (!serializationObject) {\r\n            serializationObject = {};\r\n        }\r\n\r\n        // Tags\r\n        if (Tags) {\r\n            serializationObject.tags = Tags.GetTags(entity);\r\n        }\r\n\r\n        var serializedProperties = getMergedStore(entity);\r\n\r\n        // Properties\r\n        for (var property in serializedProperties) {\r\n            var propertyDescriptor = serializedProperties[property];\r\n            var targetPropertyName = propertyDescriptor.sourceName || property;\r\n            var propertyType = propertyDescriptor.type;\r\n            var sourceProperty = (<any>entity)[property];\r\n\r\n            if (sourceProperty !== undefined && sourceProperty !== null && property !== \"uniqueId\") {\r\n                switch (propertyType) {\r\n                    case 0:     // Value\r\n                        serializationObject[targetPropertyName] = sourceProperty;\r\n                        break;\r\n                    case 1:     // Texture\r\n                        serializationObject[targetPropertyName] = sourceProperty.serialize();\r\n                        break;\r\n                    case 2:     // Color3\r\n                        serializationObject[targetPropertyName] = sourceProperty.asArray();\r\n                        break;\r\n                    case 3:     // FresnelParameters\r\n                        serializationObject[targetPropertyName] = sourceProperty.serialize();\r\n                        break;\r\n                    case 4:     // Vector2\r\n                        serializationObject[targetPropertyName] = sourceProperty.asArray();\r\n                        break;\r\n                    case 5:     // Vector3\r\n                        serializationObject[targetPropertyName] = sourceProperty.asArray();\r\n                        break;\r\n                    case 6:     // Mesh reference\r\n                        serializationObject[targetPropertyName] = sourceProperty.id;\r\n                        break;\r\n                    case 7:     // Color Curves\r\n                        serializationObject[targetPropertyName] = sourceProperty.serialize();\r\n                        break;\r\n                    case 8:     // Color 4\r\n                        serializationObject[targetPropertyName] = (<Color4>sourceProperty).asArray();\r\n                        break;\r\n                    case 9:     // Image Processing\r\n                        serializationObject[targetPropertyName] = (<ImageProcessingConfiguration>sourceProperty).serialize();\r\n                        break;\r\n                    case 10:    // Quaternion\r\n                        serializationObject[targetPropertyName] = (<Quaternion>sourceProperty).asArray();\r\n                        break;\r\n                    case 11:    // Camera reference\r\n                        serializationObject[targetPropertyName] = (<Camera>sourceProperty).id;\r\n                    case 12:    // Matrix\r\n                        serializationObject[targetPropertyName] = (<Matrix>sourceProperty).asArray();\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from a serialization data object\r\n     * @param creationFunction defines a function used to instanciated the new entity\r\n     * @param source defines the source serialization data\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root url for resources\r\n     * @returns a new entity\r\n     */\r\n    public static Parse<T>(creationFunction: () => T, source: any, scene: Nullable<Scene>, rootUrl: Nullable<string> = null): T {\r\n        var destination = creationFunction();\r\n\r\n        if (!rootUrl) {\r\n            rootUrl = \"\";\r\n        }\r\n\r\n        // Tags\r\n        if (Tags) {\r\n            Tags.AddTagsTo(destination, source.tags);\r\n        }\r\n\r\n        var classStore = getMergedStore(destination);\r\n\r\n        // Properties\r\n        for (var property in classStore) {\r\n            var propertyDescriptor = classStore[property];\r\n            var sourceProperty = source[propertyDescriptor.sourceName || property];\r\n            var propertyType = propertyDescriptor.type;\r\n\r\n            if (sourceProperty !== undefined && sourceProperty !== null && property !== \"uniqueId\") {\r\n                var dest = <any>destination;\r\n                switch (propertyType) {\r\n                    case 0:     // Value\r\n                        dest[property] = sourceProperty;\r\n                        break;\r\n                    case 1:     // Texture\r\n                        if (scene) {\r\n                            dest[property] = SerializationHelper._TextureParser(sourceProperty, scene, rootUrl);\r\n                        }\r\n                        break;\r\n                    case 2:     // Color3\r\n                        dest[property] = Color3.FromArray(sourceProperty);\r\n                        break;\r\n                    case 3:     // FresnelParameters\r\n                        dest[property] = SerializationHelper._FresnelParametersParser(sourceProperty);\r\n                        break;\r\n                    case 4:     // Vector2\r\n                        dest[property] = Vector2.FromArray(sourceProperty);\r\n                        break;\r\n                    case 5:     // Vector3\r\n                        dest[property] = Vector3.FromArray(sourceProperty);\r\n                        break;\r\n                    case 6:     // Mesh reference\r\n                        if (scene) {\r\n                            dest[property] = scene.getLastMeshByID(sourceProperty);\r\n                        }\r\n                        break;\r\n                    case 7:     // Color Curves\r\n                        dest[property] = SerializationHelper._ColorCurvesParser(sourceProperty);\r\n                        break;\r\n                    case 8:     // Color 4\r\n                        dest[property] = Color4.FromArray(sourceProperty);\r\n                        break;\r\n                    case 9:     // Image Processing\r\n                        dest[property] = SerializationHelper._ImageProcessingConfigurationParser(sourceProperty);\r\n                        break;\r\n                    case 10:    // Quaternion\r\n                        dest[property] = Quaternion.FromArray(sourceProperty);\r\n                        break;\r\n                    case 11:    // Camera reference\r\n                        if (scene) {\r\n                            dest[property] = scene.getCameraByID(sourceProperty);\r\n                        }\r\n                    case 12:    // Matrix\r\n                        dest[property] = Matrix.FromArray(sourceProperty);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return destination;\r\n    }\r\n\r\n    /**\r\n     * Clones an object\r\n     * @param creationFunction defines the function used to instanciate the new object\r\n     * @param source defines the source object\r\n     * @returns the cloned object\r\n     */\r\n    public static Clone<T>(creationFunction: () => T, source: T): T {\r\n        return _copySource(creationFunction, source, false);\r\n    }\r\n\r\n    /**\r\n     * Instanciates a new object based on a source one (some data will be shared between both object)\r\n     * @param creationFunction defines the function used to instanciate the new object\r\n     * @param source defines the source object\r\n     * @returns the new object\r\n     */\r\n    public static Instanciate<T>(creationFunction: () => T, source: T): T {\r\n        return _copySource(creationFunction, source, true);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}