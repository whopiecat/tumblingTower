{"ast":null,"code":"import { VirtualJoystick, JoystickAxis } from \"../../Misc/virtualJoystick\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager\";\n/**\r\n* Add virtual joystick input support to the input manager.\r\n* @returns the current input manager\r\n*/\n\nFreeCameraInputsManager.prototype.addVirtualJoystick = function () {\n  this.add(new FreeCameraVirtualJoystickInput());\n  return this;\n};\n/**\r\n * Manage the Virtual Joystick inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\n\nvar FreeCameraVirtualJoystickInput =\n/** @class */\nfunction () {\n  function FreeCameraVirtualJoystickInput() {}\n  /**\r\n   * Gets the left stick of the virtual joystick.\r\n   * @returns The virtual Joystick\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.getLeftJoystick = function () {\n    return this._leftjoystick;\n  };\n  /**\r\n   * Gets the right stick of the virtual joystick.\r\n   * @returns The virtual Joystick\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.getRightJoystick = function () {\n    return this._rightjoystick;\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.checkInputs = function () {\n    if (this._leftjoystick) {\n      var camera = this.camera;\n      var speed = camera._computeLocalCameraSpeed() * 50;\n      var cameraTransform = Matrix.RotationYawPitchRoll(camera.rotation.y, camera.rotation.x, 0);\n      var deltaTransform = Vector3.TransformCoordinates(new Vector3(this._leftjoystick.deltaPosition.x * speed, this._leftjoystick.deltaPosition.y * speed, this._leftjoystick.deltaPosition.z * speed), cameraTransform);\n      camera.cameraDirection = camera.cameraDirection.add(deltaTransform);\n      camera.cameraRotation = camera.cameraRotation.addVector3(this._rightjoystick.deltaPosition);\n\n      if (!this._leftjoystick.pressed) {\n        this._leftjoystick.deltaPosition = this._leftjoystick.deltaPosition.scale(0.9);\n      }\n\n      if (!this._rightjoystick.pressed) {\n        this._rightjoystick.deltaPosition = this._rightjoystick.deltaPosition.scale(0.9);\n      }\n    }\n  };\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.attachControl = function () {\n    this._leftjoystick = new VirtualJoystick(true);\n\n    this._leftjoystick.setAxisForUpDown(JoystickAxis.Z);\n\n    this._leftjoystick.setAxisForLeftRight(JoystickAxis.X);\n\n    this._leftjoystick.setJoystickSensibility(0.15);\n\n    this._rightjoystick = new VirtualJoystick(false);\n\n    this._rightjoystick.setAxisForUpDown(JoystickAxis.X);\n\n    this._rightjoystick.setAxisForLeftRight(JoystickAxis.Y);\n\n    this._rightjoystick.reverseUpDown = true;\n\n    this._rightjoystick.setJoystickSensibility(0.05);\n\n    this._rightjoystick.setJoystickColor(\"yellow\");\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.detachControl = function (ignored) {\n    this._leftjoystick.releaseCanvas();\n\n    this._rightjoystick.releaseCanvas();\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.getClassName = function () {\n    return \"FreeCameraVirtualJoystickInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.getSimpleName = function () {\n    return \"virtualJoystick\";\n  };\n\n  return FreeCameraVirtualJoystickInput;\n}();\n\nexport { FreeCameraVirtualJoystickInput };\nCameraInputTypes[\"FreeCameraVirtualJoystickInput\"] = FreeCameraVirtualJoystickInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/freeCameraVirtualJoystickInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { VirtualJoystick, JoystickAxis } from \"../../Misc/virtualJoystick\";\r\nimport { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager\";\r\n\r\n// Module augmentation to abstract virtual joystick from camera.\r\ndeclare module \"../../Cameras/freeCameraInputsManager\" {\r\n    export interface FreeCameraInputsManager {\r\n        /**\r\n         * Add virtual joystick input support to the input manager.\r\n         * @returns the current input manager\r\n         */\r\n        addVirtualJoystick(): FreeCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n* Add virtual joystick input support to the input manager.\r\n* @returns the current input manager\r\n*/\r\nFreeCameraInputsManager.prototype.addVirtualJoystick = function(): FreeCameraInputsManager {\r\n    this.add(new FreeCameraVirtualJoystickInput());\r\n    return this;\r\n};\r\n\r\n/**\r\n * Manage the Virtual Joystick inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FreeCameraVirtualJoystickInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    private _leftjoystick: VirtualJoystick;\r\n    private _rightjoystick: VirtualJoystick;\r\n\r\n    /**\r\n     * Gets the left stick of the virtual joystick.\r\n     * @returns The virtual Joystick\r\n     */\r\n    public getLeftJoystick(): VirtualJoystick {\r\n        return this._leftjoystick;\r\n    }\r\n\r\n    /**\r\n     * Gets the right stick of the virtual joystick.\r\n     * @returns The virtual Joystick\r\n     */\r\n    public getRightJoystick(): VirtualJoystick {\r\n        return this._rightjoystick;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs() {\r\n        if (this._leftjoystick) {\r\n            var camera = this.camera;\r\n            var speed = camera._computeLocalCameraSpeed() * 50;\r\n            var cameraTransform = Matrix.RotationYawPitchRoll(camera.rotation.y, camera.rotation.x, 0);\r\n            var deltaTransform = Vector3.TransformCoordinates(new Vector3(this._leftjoystick.deltaPosition.x * speed, this._leftjoystick.deltaPosition.y * speed, this._leftjoystick.deltaPosition.z * speed), cameraTransform);\r\n            camera.cameraDirection = camera.cameraDirection.add(deltaTransform);\r\n            camera.cameraRotation = camera.cameraRotation.addVector3(this._rightjoystick.deltaPosition);\r\n\r\n            if (!this._leftjoystick.pressed) {\r\n                this._leftjoystick.deltaPosition = this._leftjoystick.deltaPosition.scale(0.9);\r\n            }\r\n            if (!this._rightjoystick.pressed) {\r\n                this._rightjoystick.deltaPosition = this._rightjoystick.deltaPosition.scale(0.9);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     */\r\n    public attachControl(): void {\r\n        this._leftjoystick = new VirtualJoystick(true);\r\n        this._leftjoystick.setAxisForUpDown(JoystickAxis.Z);\r\n        this._leftjoystick.setAxisForLeftRight(JoystickAxis.X);\r\n        this._leftjoystick.setJoystickSensibility(0.15);\r\n        this._rightjoystick = new VirtualJoystick(false);\r\n        this._rightjoystick.setAxisForUpDown(JoystickAxis.X);\r\n        this._rightjoystick.setAxisForLeftRight(JoystickAxis.Y);\r\n        this._rightjoystick.reverseUpDown = true;\r\n        this._rightjoystick.setJoystickSensibility(0.05);\r\n        this._rightjoystick.setJoystickColor(\"yellow\");\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        this._leftjoystick.releaseCanvas();\r\n        this._rightjoystick.releaseCanvas();\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraVirtualJoystickInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"virtualJoystick\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraVirtualJoystickInput\"] = FreeCameraVirtualJoystickInput;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}