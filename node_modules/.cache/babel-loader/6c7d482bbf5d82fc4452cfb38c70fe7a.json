{"ast":null,"code":"import { AndOrNotEvaluator } from \"./andOrNotEvaluator\";\n/**\r\n * Class used to store custom tags\r\n */\n\nvar Tags =\n/** @class */\nfunction () {\n  function Tags() {}\n  /**\r\n   * Adds support for tags on the given object\r\n   * @param obj defines the object to use\r\n   */\n\n\n  Tags.EnableFor = function (obj) {\n    obj._tags = obj._tags || {};\n\n    obj.hasTags = function () {\n      return Tags.HasTags(obj);\n    };\n\n    obj.addTags = function (tagsString) {\n      return Tags.AddTagsTo(obj, tagsString);\n    };\n\n    obj.removeTags = function (tagsString) {\n      return Tags.RemoveTagsFrom(obj, tagsString);\n    };\n\n    obj.matchesTagsQuery = function (tagsQuery) {\n      return Tags.MatchesQuery(obj, tagsQuery);\n    };\n  };\n  /**\r\n   * Removes tags support\r\n   * @param obj defines the object to use\r\n   */\n\n\n  Tags.DisableFor = function (obj) {\n    delete obj._tags;\n    delete obj.hasTags;\n    delete obj.addTags;\n    delete obj.removeTags;\n    delete obj.matchesTagsQuery;\n  };\n  /**\r\n   * Gets a boolean indicating if the given object has tags\r\n   * @param obj defines the object to use\r\n   * @returns a boolean\r\n   */\n\n\n  Tags.HasTags = function (obj) {\n    if (!obj._tags) {\n      return false;\n    }\n\n    var tags = obj._tags;\n\n    for (var i in tags) {\n      if (tags.hasOwnProperty(i)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Gets the tags available on a given object\r\n   * @param obj defines the object to use\r\n   * @param asString defines if the tags must be returned as a string instead of an array of strings\r\n   * @returns the tags\r\n   */\n\n\n  Tags.GetTags = function (obj, asString) {\n    if (asString === void 0) {\n      asString = true;\n    }\n\n    if (!obj._tags) {\n      return null;\n    }\n\n    if (asString) {\n      var tagsArray = [];\n\n      for (var tag in obj._tags) {\n        if (obj._tags.hasOwnProperty(tag) && obj._tags[tag] === true) {\n          tagsArray.push(tag);\n        }\n      }\n\n      return tagsArray.join(\" \");\n    } else {\n      return obj._tags;\n    }\n  };\n  /**\r\n   * Adds tags to an object\r\n   * @param obj defines the object to use\r\n   * @param tagsString defines the tag string. The tags 'true' and 'false' are reserved and cannot be used as tags.\r\n   * A tag cannot start with '||', '&&', and '!'. It cannot contain whitespaces\r\n   */\n\n\n  Tags.AddTagsTo = function (obj, tagsString) {\n    if (!tagsString) {\n      return;\n    }\n\n    if (typeof tagsString !== \"string\") {\n      return;\n    }\n\n    var tags = tagsString.split(\" \");\n    tags.forEach(function (tag, index, array) {\n      Tags._AddTagTo(obj, tag);\n    });\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Tags._AddTagTo = function (obj, tag) {\n    tag = tag.trim();\n\n    if (tag === \"\" || tag === \"true\" || tag === \"false\") {\n      return;\n    }\n\n    if (tag.match(/[\\s]/) || tag.match(/^([!]|([|]|[&]){2})/)) {\n      return;\n    }\n\n    Tags.EnableFor(obj);\n    obj._tags[tag] = true;\n  };\n  /**\r\n   * Removes specific tags from a specific object\r\n   * @param obj defines the object to use\r\n   * @param tagsString defines the tags to remove\r\n   */\n\n\n  Tags.RemoveTagsFrom = function (obj, tagsString) {\n    if (!Tags.HasTags(obj)) {\n      return;\n    }\n\n    var tags = tagsString.split(\" \");\n\n    for (var t in tags) {\n      Tags._RemoveTagFrom(obj, tags[t]);\n    }\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Tags._RemoveTagFrom = function (obj, tag) {\n    delete obj._tags[tag];\n  };\n  /**\r\n   * Defines if tags hosted on an object match a given query\r\n   * @param obj defines the object to use\r\n   * @param tagsQuery defines the tag query\r\n   * @returns a boolean\r\n   */\n\n\n  Tags.MatchesQuery = function (obj, tagsQuery) {\n    if (tagsQuery === undefined) {\n      return true;\n    }\n\n    if (tagsQuery === \"\") {\n      return Tags.HasTags(obj);\n    }\n\n    return AndOrNotEvaluator.Eval(tagsQuery, function (r) {\n      return Tags.HasTags(obj) && obj._tags[r];\n    });\n  };\n\n  return Tags;\n}();\n\nexport { Tags };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/tags.ts"],"names":[],"mappings":"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","sourcesContent":["import { AndOrNotEvaluator } from \"./andOrNotEvaluator\";\r\n\r\n/**\r\n * Class used to store custom tags\r\n */\r\nexport class Tags {\r\n    /**\r\n     * Adds support for tags on the given object\r\n     * @param obj defines the object to use\r\n     */\r\n    public static EnableFor(obj: any): void {\r\n        obj._tags = obj._tags || {};\r\n\r\n        obj.hasTags = () => {\r\n            return Tags.HasTags(obj);\r\n        };\r\n\r\n        obj.addTags = (tagsString: string) => {\r\n            return Tags.AddTagsTo(obj, tagsString);\r\n        };\r\n\r\n        obj.removeTags = (tagsString: string) => {\r\n            return Tags.RemoveTagsFrom(obj, tagsString);\r\n        };\r\n\r\n        obj.matchesTagsQuery = (tagsQuery: string) => {\r\n            return Tags.MatchesQuery(obj, tagsQuery);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Removes tags support\r\n     * @param obj defines the object to use\r\n     */\r\n    public static DisableFor(obj: any): void {\r\n        delete obj._tags;\r\n        delete obj.hasTags;\r\n        delete obj.addTags;\r\n        delete obj.removeTags;\r\n        delete obj.matchesTagsQuery;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given object has tags\r\n     * @param obj defines the object to use\r\n     * @returns a boolean\r\n     */\r\n    public static HasTags(obj: any): boolean {\r\n        if (!obj._tags) {\r\n            return false;\r\n        }\r\n\r\n        let tags = obj._tags;\r\n        for (var i in tags) {\r\n            if (tags.hasOwnProperty(i)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the tags available on a given object\r\n     * @param obj defines the object to use\r\n     * @param asString defines if the tags must be returned as a string instead of an array of strings\r\n     * @returns the tags\r\n     */\r\n    public static GetTags(obj: any, asString: boolean = true): any {\r\n        if (!obj._tags) {\r\n            return null;\r\n        }\r\n        if (asString) {\r\n            var tagsArray = [];\r\n            for (var tag in obj._tags) {\r\n                if (obj._tags.hasOwnProperty(tag) && obj._tags[tag] === true) {\r\n                    tagsArray.push(tag);\r\n                }\r\n            }\r\n            return tagsArray.join(\" \");\r\n        } else {\r\n            return obj._tags;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Adds tags to an object\r\n     * @param obj defines the object to use\r\n     * @param tagsString defines the tag string. The tags 'true' and 'false' are reserved and cannot be used as tags.\r\n     * A tag cannot start with '||', '&&', and '!'. It cannot contain whitespaces\r\n     */\r\n    public static AddTagsTo(obj: any, tagsString: string): void {\r\n        if (!tagsString) {\r\n            return;\r\n        }\r\n\r\n        if (typeof tagsString !== \"string\") {\r\n            return;\r\n        }\r\n\r\n        var tags = tagsString.split(\" \");\r\n        tags.forEach(function(tag, index, array) {\r\n            Tags._AddTagTo(obj, tag);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public static _AddTagTo(obj: any, tag: string): void {\r\n        tag = tag.trim();\r\n\r\n        if (tag === \"\" || tag === \"true\" || tag === \"false\") {\r\n            return;\r\n        }\r\n\r\n        if (tag.match(/[\\s]/) || tag.match(/^([!]|([|]|[&]){2})/)) {\r\n            return;\r\n        }\r\n\r\n        Tags.EnableFor(obj);\r\n        obj._tags[tag] = true;\r\n    }\r\n\r\n    /**\r\n     * Removes specific tags from a specific object\r\n     * @param obj defines the object to use\r\n     * @param tagsString defines the tags to remove\r\n     */\r\n    public static RemoveTagsFrom(obj: any, tagsString: string) {\r\n        if (!Tags.HasTags(obj)) {\r\n            return;\r\n        }\r\n        var tags = tagsString.split(\" \");\r\n        for (var t in tags) {\r\n            Tags._RemoveTagFrom(obj, tags[t]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public static _RemoveTagFrom(obj: any, tag: string): void {\r\n        delete obj._tags[tag];\r\n    }\r\n\r\n    /**\r\n     * Defines if tags hosted on an object match a given query\r\n     * @param obj defines the object to use\r\n     * @param tagsQuery defines the tag query\r\n     * @returns a boolean\r\n     */\r\n    public static MatchesQuery(obj: any, tagsQuery: string): boolean {\r\n        if (tagsQuery === undefined) {\r\n            return true;\r\n        }\r\n\r\n        if (tagsQuery === \"\") {\r\n            return Tags.HasTags(obj);\r\n        }\r\n\r\n        return AndOrNotEvaluator.Eval(tagsQuery, (r) => Tags.HasTags(obj) && obj._tags[r]);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}