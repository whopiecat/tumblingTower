{"ast":null,"code":"import { Effect } from \"../Materials/effect\";\nimport \"./ShadersInclude/fogVertexDeclaration\";\nvar name = 'spritesVertexShader';\nvar shader = \"\\nattribute vec4 position;\\nattribute vec2 options;\\nattribute vec2 offsets;\\nattribute vec2 inverts;\\nattribute vec4 cellInfo;\\nattribute vec4 color;\\n\\nuniform mat4 view;\\nuniform mat4 projection;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n#include<fogVertexDeclaration>\\nvoid main(void) {\\nvec3 viewPos=(view*vec4(position.xyz,1.0)).xyz;\\nvec2 cornerPos;\\nfloat angle=position.w;\\nvec2 size=vec2(options.x,options.y);\\nvec2 offset=offsets.xy;\\ncornerPos=vec2(offset.x-0.5,offset.y-0.5)*size;\\n\\nvec3 rotatedCorner;\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.z=0.;\\n\\nviewPos+=rotatedCorner;\\ngl_Position=projection*vec4(viewPos,1.0);\\n\\nvColor=color;\\n\\nvec2 uvOffset=vec2(abs(offset.x-inverts.x),abs(1.0-offset.y-inverts.y));\\nvec2 uvPlace=cellInfo.xy;\\nvec2 uvSize=cellInfo.zw;\\nvUV.x=uvPlace.x+uvSize.x*uvOffset.x;\\nvUV.y=uvPlace.y+uvSize.y*uvOffset.y;\\n\\n#ifdef FOG\\nvFogDistance=viewPos;\\n#endif\\n}\";\nEffect.ShadersStore[name] = shader;\n/** @hidden */\n\nexport var spritesVertexShader = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"sources":["../../../sourceES6/core/Shaders/sprites.vertex.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,qBAAvB;AACA,OAAO,uCAAP;AAEA,IAAI,IAAI,GAAG,qBAAX;AACA,IAAI,MAAM,GAAG,i/BAAb;AA2CA,MAAM,CAAC,YAAP,CAAoB,IAApB,IAA4B,MAA5B;AACA;;AACA,OAAO,IAAI,mBAAmB,GAAG;AAAE,EAAA,IAAI,EAAA,IAAN;AAAQ,EAAA,MAAM,EAAA;AAAd,CAA1B","sourcesContent":["import { Effect } from \"../Materials/effect\";\nimport \"./ShadersInclude/fogVertexDeclaration\";\n\nlet name = 'spritesVertexShader';\nlet shader = `\nattribute vec4 position;\nattribute vec2 options;\nattribute vec2 offsets;\nattribute vec2 inverts;\nattribute vec4 cellInfo;\nattribute vec4 color;\n\nuniform mat4 view;\nuniform mat4 projection;\n\nvarying vec2 vUV;\nvarying vec4 vColor;\n#include<fogVertexDeclaration>\nvoid main(void) {\nvec3 viewPos=(view*vec4(position.xyz,1.0)).xyz;\nvec2 cornerPos;\nfloat angle=position.w;\nvec2 size=vec2(options.x,options.y);\nvec2 offset=offsets.xy;\ncornerPos=vec2(offset.x-0.5,offset.y-0.5)*size;\n\nvec3 rotatedCorner;\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.z=0.;\n\nviewPos+=rotatedCorner;\ngl_Position=projection*vec4(viewPos,1.0);\n\nvColor=color;\n\nvec2 uvOffset=vec2(abs(offset.x-inverts.x),abs(1.0-offset.y-inverts.y));\nvec2 uvPlace=cellInfo.xy;\nvec2 uvSize=cellInfo.zw;\nvUV.x=uvPlace.x+uvSize.x*uvOffset.x;\nvUV.y=uvPlace.y+uvSize.y*uvOffset.y;\n\n#ifdef FOG\nvFogDistance=viewPos;\n#endif\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var spritesVertexShader = { name, shader };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}