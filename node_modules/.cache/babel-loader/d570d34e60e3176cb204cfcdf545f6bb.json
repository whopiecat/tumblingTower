{"ast":null,"code":"/**\r\n * Helper class to push actions to a pool of workers.\r\n */\nvar WorkerPool =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   * @param workers Array of workers to use for actions\r\n   */\n  function WorkerPool(workers) {\n    this._pendingActions = new Array();\n    this._workerInfos = workers.map(function (worker) {\n      return {\n        worker: worker,\n        active: false\n      };\n    });\n  }\n  /**\r\n   * Terminates all workers and clears any pending actions.\r\n   */\n\n\n  WorkerPool.prototype.dispose = function () {\n    for (var _i = 0, _a = this._workerInfos; _i < _a.length; _i++) {\n      var workerInfo = _a[_i];\n      workerInfo.worker.terminate();\n    }\n\n    this._workerInfos = [];\n    this._pendingActions = [];\n  };\n  /**\r\n   * Pushes an action to the worker pool. If all the workers are active, the action will be\r\n   * pended until a worker has completed its action.\r\n   * @param action The action to perform. Call onComplete when the action is complete.\r\n   */\n\n\n  WorkerPool.prototype.push = function (action) {\n    for (var _i = 0, _a = this._workerInfos; _i < _a.length; _i++) {\n      var workerInfo = _a[_i];\n\n      if (!workerInfo.active) {\n        this._execute(workerInfo, action);\n\n        return;\n      }\n    }\n\n    this._pendingActions.push(action);\n  };\n\n  WorkerPool.prototype._execute = function (workerInfo, action) {\n    var _this = this;\n\n    workerInfo.active = true;\n    action(workerInfo.worker, function () {\n      workerInfo.active = false;\n\n      var nextAction = _this._pendingActions.shift();\n\n      if (nextAction) {\n        _this._execute(workerInfo, nextAction);\n      }\n    });\n  };\n\n  return WorkerPool;\n}();\n\nexport { WorkerPool };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/workerPool.ts"],"names":[],"mappings":"AAOA;;;AAGA,IAAA,UAAA;AAAA;AAAA,YAAA;AAII;;;;AAIA,WAAA,UAAA,CAAY,OAAZ,EAAkC;AAN1B,SAAA,eAAA,GAAkB,IAAI,KAAJ,EAAlB;AAOJ,SAAK,YAAL,GAAoB,OAAO,CAAC,GAAR,CAAY,UAAC,MAAD,EAAO;AAAK,aAAC;AACzC,QAAA,MAAM,EAAE,MADiC;AAEzC,QAAA,MAAM,EAAE;AAFiC,OAAD;AAG1C,KAHkB,CAApB;AAIH;AAED;;;;;AAGO,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,SAAyB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,YAA9B,EAAyB,EAAA,GAAA,EAAA,CAAA,MAAzB,EAAyB,EAAA,EAAzB,EAA4C;AAAvC,UAAM,UAAU,GAAA,EAAA,CAAA,EAAA,CAAhB;AACD,MAAA,UAAU,CAAC,MAAX,CAAkB,SAAlB;AACH;;AAED,SAAK,YAAL,GAAoB,EAApB;AACA,SAAK,eAAL,GAAuB,EAAvB;AACH,GAPM;AASP;;;;;;;AAKO,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,MAAZ,EAAoE;AAChE,SAAyB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,YAA9B,EAAyB,EAAA,GAAA,EAAA,CAAA,MAAzB,EAAyB,EAAA,EAAzB,EAA4C;AAAvC,UAAM,UAAU,GAAA,EAAA,CAAA,EAAA,CAAhB;;AACD,UAAI,CAAC,UAAU,CAAC,MAAhB,EAAwB;AACpB,aAAK,QAAL,CAAc,UAAd,EAA0B,MAA1B;;AACA;AACH;AACJ;;AAED,SAAK,eAAL,CAAqB,IAArB,CAA0B,MAA1B;AACH,GATM;;AAWC,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAR,UAAiB,UAAjB,EAAyC,MAAzC,EAAiG;AAAjG,QAAA,KAAA,GAAA,IAAA;;AACI,IAAA,UAAU,CAAC,MAAX,GAAoB,IAApB;AACA,IAAA,MAAM,CAAC,UAAU,CAAC,MAAZ,EAAoB,YAAA;AACtB,MAAA,UAAU,CAAC,MAAX,GAAoB,KAApB;;AACA,UAAM,UAAU,GAAG,KAAI,CAAC,eAAL,CAAqB,KAArB,EAAnB;;AACA,UAAI,UAAJ,EAAgB;AACZ,QAAA,KAAI,CAAC,QAAL,CAAc,UAAd,EAA0B,UAA1B;AACH;AACJ,KANK,CAAN;AAOH,GATO;;AAUZ,SAAA,UAAA;AAAC,CArDD,EAAA","sourcesContent":["import { IDisposable } from \"../scene\";\r\n\r\ninterface WorkerInfo {\r\n    worker: Worker;\r\n    active: boolean;\r\n}\r\n\r\n/**\r\n * Helper class to push actions to a pool of workers.\r\n */\r\nexport class WorkerPool implements IDisposable {\r\n    private _workerInfos: Array<WorkerInfo>;\r\n    private _pendingActions = new Array<(worker: Worker, onComplete: () => void) => void>();\r\n\r\n    /**\r\n     * Constructor\r\n     * @param workers Array of workers to use for actions\r\n     */\r\n    constructor(workers: Array<Worker>) {\r\n        this._workerInfos = workers.map((worker) => ({\r\n            worker: worker,\r\n            active: false\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Terminates all workers and clears any pending actions.\r\n     */\r\n    public dispose(): void {\r\n        for (const workerInfo of this._workerInfos) {\r\n            workerInfo.worker.terminate();\r\n        }\r\n\r\n        this._workerInfos = [];\r\n        this._pendingActions = [];\r\n    }\r\n\r\n    /**\r\n     * Pushes an action to the worker pool. If all the workers are active, the action will be\r\n     * pended until a worker has completed its action.\r\n     * @param action The action to perform. Call onComplete when the action is complete.\r\n     */\r\n    public push(action: (worker: Worker, onComplete: () => void) => void): void {\r\n        for (const workerInfo of this._workerInfos) {\r\n            if (!workerInfo.active) {\r\n                this._execute(workerInfo, action);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._pendingActions.push(action);\r\n    }\r\n\r\n    private _execute(workerInfo: WorkerInfo, action: (worker: Worker, onComplete: () => void) => void): void {\r\n        workerInfo.active = true;\r\n        action(workerInfo.worker, () => {\r\n            workerInfo.active = false;\r\n            const nextAction = this._pendingActions.shift();\r\n            if (nextAction) {\r\n                this._execute(workerInfo, nextAction);\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}