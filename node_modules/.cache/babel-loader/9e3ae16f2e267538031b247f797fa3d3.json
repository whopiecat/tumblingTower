{"ast":null,"code":"import { Camera } from \"../camera\";\nimport { Matrix } from \"../../Maths/math.vector\";\nimport { Viewport } from '../../Maths/math.viewport';\n\nCamera._setWebVRRigMode = function (camera, rigParams) {\n  if (rigParams.vrDisplay) {\n    var leftEye = rigParams.vrDisplay.getEyeParameters('left');\n    var rightEye = rigParams.vrDisplay.getEyeParameters('right'); //Left eye\n\n    camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\n\n    camera._rigCameras[0].setCameraRigParameter(\"left\", true); //leaving this for future reference\n\n\n    camera._rigCameras[0].setCameraRigParameter(\"specs\", rigParams.specs);\n\n    camera._rigCameras[0].setCameraRigParameter(\"eyeParameters\", leftEye);\n\n    camera._rigCameras[0].setCameraRigParameter(\"frameData\", rigParams.frameData);\n\n    camera._rigCameras[0].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\n\n    camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\n    camera._rigCameras[0].getProjectionMatrix = camera._getWebVRProjectionMatrix;\n    camera._rigCameras[0].parent = camera;\n    camera._rigCameras[0]._getViewMatrix = camera._getWebVRViewMatrix; //Right eye\n\n    camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\n\n    camera._rigCameras[1].setCameraRigParameter('eyeParameters', rightEye);\n\n    camera._rigCameras[1].setCameraRigParameter(\"specs\", rigParams.specs);\n\n    camera._rigCameras[1].setCameraRigParameter(\"frameData\", rigParams.frameData);\n\n    camera._rigCameras[1].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\n\n    camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\n    camera._rigCameras[1].getProjectionMatrix = camera._getWebVRProjectionMatrix;\n    camera._rigCameras[1].parent = camera;\n    camera._rigCameras[1]._getViewMatrix = camera._getWebVRViewMatrix;\n  }\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/RigModes/webVRRigMode.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,WAAvB;AACA,SAAS,MAAT,QAAuB,yBAAvB;AACA,SAAS,QAAT,QAAyB,2BAAzB;;AAEA,MAAM,CAAC,gBAAP,GAA0B,UAAS,MAAT,EAAyB,SAAzB,EAAuC;AAC7D,MAAI,SAAS,CAAC,SAAd,EAAyB;AACrB,QAAI,OAAO,GAAG,SAAS,CAAC,SAAV,CAAoB,gBAApB,CAAqC,MAArC,CAAd;AACA,QAAI,QAAQ,GAAG,SAAS,CAAC,SAAV,CAAoB,gBAApB,CAAqC,OAArC,CAAf,CAFqB,CAIrB;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,QAAtB,GAAiC,IAAI,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmB,GAAnB,EAAwB,GAAxB,CAAjC;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,qBAAtB,CAA4C,MAA5C,EAAoD,IAApD,EANqB,CAOrB;;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,qBAAtB,CAA4C,OAA5C,EAAqD,SAAS,CAAC,KAA/D;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,qBAAtB,CAA4C,eAA5C,EAA6D,OAA7D;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,qBAAtB,CAA4C,WAA5C,EAAyD,SAAS,CAAC,SAAnE;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,qBAAtB,CAA4C,cAA5C,EAA4D,SAAS,CAAC,YAAtE;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,gBAAtB,CAAuC,YAAvC,GAAsD,IAAI,MAAJ,EAAtD;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,mBAAtB,GAA4C,MAAM,CAAC,yBAAnD;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,MAAtB,GAA+B,MAA/B;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,cAAtB,GAAuC,MAAM,CAAC,mBAA9C,CAfqB,CAiBrB;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,QAAtB,GAAiC,IAAI,QAAJ,CAAa,GAAb,EAAkB,CAAlB,EAAqB,GAArB,EAA0B,GAA1B,CAAjC;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,qBAAtB,CAA4C,eAA5C,EAA6D,QAA7D;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,qBAAtB,CAA4C,OAA5C,EAAqD,SAAS,CAAC,KAA/D;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,qBAAtB,CAA4C,WAA5C,EAAyD,SAAS,CAAC,SAAnE;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,qBAAtB,CAA4C,cAA5C,EAA4D,SAAS,CAAC,YAAtE;;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,gBAAtB,CAAuC,YAAvC,GAAsD,IAAI,MAAJ,EAAtD;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,mBAAtB,GAA4C,MAAM,CAAC,yBAAnD;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,MAAtB,GAA+B,MAA/B;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,CAAnB,EAAsB,cAAtB,GAAuC,MAAM,CAAC,mBAA9C;AACH;AACJ,CA7BD","sourcesContent":["import { Camera } from \"../camera\";\r\nimport { Matrix } from \"../../Maths/math.vector\";\r\nimport { Viewport } from '../../Maths/math.viewport';\r\n\r\nCamera._setWebVRRigMode = function(camera: Camera, rigParams: any) {\r\n    if (rigParams.vrDisplay) {\r\n        var leftEye = rigParams.vrDisplay.getEyeParameters('left');\r\n        var rightEye = rigParams.vrDisplay.getEyeParameters('right');\r\n\r\n        //Left eye\r\n        camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\r\n        camera._rigCameras[0].setCameraRigParameter(\"left\", true);\r\n        //leaving this for future reference\r\n        camera._rigCameras[0].setCameraRigParameter(\"specs\", rigParams.specs);\r\n        camera._rigCameras[0].setCameraRigParameter(\"eyeParameters\", leftEye);\r\n        camera._rigCameras[0].setCameraRigParameter(\"frameData\", rigParams.frameData);\r\n        camera._rigCameras[0].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\r\n        camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\r\n        camera._rigCameras[0].getProjectionMatrix = camera._getWebVRProjectionMatrix;\r\n        camera._rigCameras[0].parent = camera;\r\n        camera._rigCameras[0]._getViewMatrix = camera._getWebVRViewMatrix;\r\n\r\n        //Right eye\r\n        camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\r\n        camera._rigCameras[1].setCameraRigParameter('eyeParameters', rightEye);\r\n        camera._rigCameras[1].setCameraRigParameter(\"specs\", rigParams.specs);\r\n        camera._rigCameras[1].setCameraRigParameter(\"frameData\", rigParams.frameData);\r\n        camera._rigCameras[1].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\r\n        camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\r\n        camera._rigCameras[1].getProjectionMatrix = camera._getWebVRProjectionMatrix;\r\n        camera._rigCameras[1].parent = camera;\r\n        camera._rigCameras[1]._getViewMatrix = camera._getWebVRViewMatrix;\r\n    }\r\n};"],"sourceRoot":""},"metadata":{},"sourceType":"module"}