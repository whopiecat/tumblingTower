{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { PostProcess } from \"./postProcess\";\nimport { Logger } from \"../Misc/logger\";\nimport \"../Shaders/imageProcessing.fragment\";\nimport \"../Shaders/subSurfaceScattering.fragment\";\nimport \"../Shaders/postprocess.vertex\";\n/**\r\n * Sub surface scattering post process\r\n */\n\nvar SubSurfaceScatteringPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(SubSurfaceScatteringPostProcess, _super);\n\n  function SubSurfaceScatteringPostProcess(name, scene, options, camera, samplingMode, engine, reusable, textureType) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, name, \"subSurfaceScattering\", [\"texelSize\", \"viewportSize\", \"metersPerUnit\"], [\"diffusionS\", \"diffusionD\", \"filterRadii\", \"irradianceSampler\", \"depthSampler\", \"albedoSampler\"], options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"postprocess\", undefined, true) || this;\n\n    _this._scene = scene;\n\n    _this.updateEffect();\n\n    _this.onApplyObservable.add(function (effect) {\n      if (!scene.prePassRenderer || !scene.subSurfaceConfiguration) {\n        Logger.Error(\"PrePass and subsurface configuration needs to be enabled for subsurface scattering.\");\n        return;\n      }\n\n      var texelSize = _this.texelSize;\n      effect.setFloat(\"metersPerUnit\", scene.subSurfaceConfiguration.metersPerUnit);\n      effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\n      effect.setTexture(\"irradianceSampler\", scene.prePassRenderer.prePassRT.textures[scene.prePassRenderer.getIndex(0)]);\n      effect.setTexture(\"depthSampler\", scene.prePassRenderer.prePassRT.textures[scene.prePassRenderer.getIndex(5)]);\n      effect.setTexture(\"albedoSampler\", scene.prePassRenderer.prePassRT.textures[scene.prePassRenderer.getIndex(6)]);\n      effect.setFloat2(\"viewportSize\", Math.tan(scene.activeCamera.fov / 2) * scene.getEngine().getAspectRatio(scene.activeCamera, true), Math.tan(scene.activeCamera.fov / 2));\n      effect.setArray3(\"diffusionS\", scene.subSurfaceConfiguration.ssDiffusionS);\n      effect.setArray(\"diffusionD\", scene.subSurfaceConfiguration.ssDiffusionD);\n      effect.setArray(\"filterRadii\", scene.subSurfaceConfiguration.ssFilterRadii);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"SubSurfaceScatteringPostProcess\" string\r\n   */\n\n\n  SubSurfaceScatteringPostProcess.prototype.getClassName = function () {\n    return \"SubSurfaceScatteringPostProcess\";\n  };\n\n  return SubSurfaceScatteringPostProcess;\n}(PostProcess);\n\nexport { SubSurfaceScatteringPostProcess };","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/subSurfaceScatteringPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { Scene } from \"../scene\";\r\n\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\nimport \"../Shaders/imageProcessing.fragment\";\r\nimport \"../Shaders/subSurfaceScattering.fragment\";\r\nimport \"../Shaders/postprocess.vertex\";\r\n\r\n/**\r\n * Sub surface scattering post process\r\n */\r\nexport class SubSurfaceScatteringPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"SubSurfaceScatteringPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"SubSurfaceScatteringPostProcess\";\r\n    }\r\n\r\n    constructor(name: string, scene: Scene, options: number | PostProcessOptions, camera: Nullable<Camera> = null, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0) {\r\n        super(name, \"subSurfaceScattering\", [\"texelSize\", \"viewportSize\", \"metersPerUnit\"], [\"diffusionS\", \"diffusionD\", \"filterRadii\", \"irradianceSampler\", \"depthSampler\", \"albedoSampler\"], options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"postprocess\", undefined, true);\r\n        this._scene = scene;\r\n\r\n        this.updateEffect();\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (!scene.prePassRenderer || !scene.subSurfaceConfiguration) {\r\n                Logger.Error(\"PrePass and subsurface configuration needs to be enabled for subsurface scattering.\");\r\n                return;\r\n            }\r\n            var texelSize = this.texelSize;\r\n            effect.setFloat(\"metersPerUnit\", scene.subSurfaceConfiguration.metersPerUnit);\r\n            effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\r\n            effect.setTexture(\"irradianceSampler\", scene.prePassRenderer.prePassRT.textures[scene.prePassRenderer.getIndex(0)]);\r\n            effect.setTexture(\"depthSampler\", scene.prePassRenderer.prePassRT.textures[scene.prePassRenderer.getIndex(5)]);\r\n            effect.setTexture(\"albedoSampler\", scene.prePassRenderer.prePassRT.textures[scene.prePassRenderer.getIndex(6)]);\r\n            effect.setFloat2(\"viewportSize\",\r\n                Math.tan(scene.activeCamera!.fov / 2) * scene.getEngine().getAspectRatio(scene.activeCamera!, true),\r\n                Math.tan(scene.activeCamera!.fov / 2));\r\n            effect.setArray3(\"diffusionS\", scene.subSurfaceConfiguration.ssDiffusionS);\r\n            effect.setArray(\"diffusionD\", scene.subSurfaceConfiguration.ssDiffusionD);\r\n            effect.setArray(\"filterRadii\", scene.subSurfaceConfiguration.ssFilterRadii);\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}