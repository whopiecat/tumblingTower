{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Tools } from \"../Misc/tools\";\nimport { Observable } from \"../Misc/observable\";\nimport { Scene } from \"../scene\";\nimport { Engine } from \"../Engines/engine\";\nObject.defineProperty(Scene.prototype, \"debugLayer\", {\n  get: function () {\n    if (!this._debugLayer) {\n      this._debugLayer = new DebugLayer(this);\n    }\n\n    return this._debugLayer;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\r\n * Enum of inspector action tab\r\n */\n\nexport var DebugLayerTab;\n\n(function (DebugLayerTab) {\n  /**\r\n   * Properties tag (default)\r\n   */\n  DebugLayerTab[DebugLayerTab[\"Properties\"] = 0] = \"Properties\";\n  /**\r\n   * Debug tab\r\n   */\n\n  DebugLayerTab[DebugLayerTab[\"Debug\"] = 1] = \"Debug\";\n  /**\r\n   * Statistics tab\r\n   */\n\n  DebugLayerTab[DebugLayerTab[\"Statistics\"] = 2] = \"Statistics\";\n  /**\r\n   * Tools tab\r\n   */\n\n  DebugLayerTab[DebugLayerTab[\"Tools\"] = 3] = \"Tools\";\n  /**\r\n   * Settings tab\r\n   */\n\n  DebugLayerTab[DebugLayerTab[\"Settings\"] = 4] = \"Settings\";\n})(DebugLayerTab || (DebugLayerTab = {}));\n/**\r\n * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n * what is happening in your scene\r\n * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n */\n\n\nvar DebugLayer =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new debug layer.\r\n   * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n   * what is happening in your scene\r\n   * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n   * @param scene Defines the scene to inspect\r\n   */\n  function DebugLayer(scene) {\n    var _this = this;\n\n    this.BJSINSPECTOR = this._getGlobalInspector();\n    this._scene = scene;\n\n    this._scene.onDisposeObservable.add(function () {\n      // Debug layer\n      if (_this._scene._debugLayer) {\n        _this._scene._debugLayer.hide();\n      }\n    });\n  }\n\n  Object.defineProperty(DebugLayer.prototype, \"onPropertyChangedObservable\", {\n    /**\r\n     * Observable triggered when a property is changed through the inspector.\r\n     */\n    get: function () {\n      if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\n        return this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable;\n      }\n\n      if (!this._onPropertyChangedObservable) {\n        this._onPropertyChangedObservable = new Observable();\n      }\n\n      return this._onPropertyChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Creates the inspector window. */\n\n  DebugLayer.prototype._createInspector = function (config) {\n    if (this.isVisible()) {\n      return;\n    }\n\n    if (this._onPropertyChangedObservable) {\n      for (var _i = 0, _a = this._onPropertyChangedObservable.observers; _i < _a.length; _i++) {\n        var observer = _a[_i];\n        this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable.add(observer);\n      }\n\n      this._onPropertyChangedObservable.clear();\n\n      this._onPropertyChangedObservable = undefined;\n    }\n\n    var userOptions = __assign({\n      overlay: false,\n      showExplorer: true,\n      showInspector: true,\n      embedMode: false,\n      handleResize: true,\n      enablePopup: true\n    }, config);\n\n    this.BJSINSPECTOR = this.BJSINSPECTOR || this._getGlobalInspector();\n    this.BJSINSPECTOR.Inspector.Show(this._scene, userOptions);\n  };\n  /**\r\n   * Select a specific entity in the scene explorer and highlight a specific block in that entity property grid\r\n   * @param entity defines the entity to select\r\n   * @param lineContainerTitles defines the specific blocks to highlight (could be a string or an array of strings)\r\n   */\n\n\n  DebugLayer.prototype.select = function (entity, lineContainerTitles) {\n    if (this.BJSINSPECTOR) {\n      if (lineContainerTitles) {\n        if (Object.prototype.toString.call(lineContainerTitles) == '[object String]') {\n          this.BJSINSPECTOR.Inspector.MarkLineContainerTitleForHighlighting(lineContainerTitles);\n        } else {\n          this.BJSINSPECTOR.Inspector.MarkMultipleLineContainerTitlesForHighlighting(lineContainerTitles);\n        }\n      }\n\n      this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable.notifyObservers(entity);\n    }\n  };\n  /** Get the inspector from bundle or global */\n\n\n  DebugLayer.prototype._getGlobalInspector = function () {\n    // UMD Global name detection from Webpack Bundle UMD Name.\n    if (typeof INSPECTOR !== 'undefined') {\n      return INSPECTOR;\n    } // In case of module let s check the global emitted from the Inspector entry point.\n\n\n    if (typeof BABYLON !== 'undefined' && typeof BABYLON.Inspector !== 'undefined') {\n      return BABYLON;\n    }\n\n    return undefined;\n  };\n  /**\r\n   * Get if the inspector is visible or not.\r\n   * @returns true if visible otherwise, false\r\n   */\n\n\n  DebugLayer.prototype.isVisible = function () {\n    return this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector.IsVisible;\n  };\n  /**\r\n   * Hide the inspector and close its window.\r\n   */\n\n\n  DebugLayer.prototype.hide = function () {\n    if (this.BJSINSPECTOR) {\n      this.BJSINSPECTOR.Inspector.Hide();\n    }\n  };\n  /**\r\n   * Update the scene in the inspector\r\n   */\n\n\n  DebugLayer.prototype.setAsActiveScene = function () {\n    if (this.BJSINSPECTOR) {\n      this.BJSINSPECTOR.Inspector._SetNewScene(this._scene);\n    }\n  };\n  /**\r\n    * Launch the debugLayer.\r\n    * @param config Define the configuration of the inspector\r\n    * @return a promise fulfilled when the debug layer is visible\r\n    */\n\n\n  DebugLayer.prototype.show = function (config) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (typeof _this.BJSINSPECTOR == 'undefined') {\n        var inspectorUrl = config && config.inspectorURL ? config.inspectorURL : DebugLayer.InspectorURL; // Load inspector and add it to the DOM\n\n        Tools.LoadScript(inspectorUrl, function () {\n          _this._createInspector(config);\n\n          resolve(_this);\n        });\n      } else {\n        // Otherwise creates the inspector\n        _this._createInspector(config);\n\n        resolve(_this);\n      }\n    });\n  };\n  /**\r\n   * Define the url to get the inspector script from.\r\n   * By default it uses the babylonjs CDN.\r\n   * @ignoreNaming\r\n   */\n\n\n  DebugLayer.InspectorURL = \"https://unpkg.com/babylonjs-inspector@\" + Engine.Version + \"/babylon.inspector.bundle.js\";\n  return DebugLayer;\n}();\n\nexport { DebugLayer };","map":{"version":3,"sources":["../../../sourceES6/core/Debug/debugLayer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\n// declare INSPECTOR namespace for compilation issue\r\ndeclare var INSPECTOR: any;\r\ndeclare var BABYLON: any;\r\n// load the inspector using require, if not present in the global namespace.\r\n\r\n/**\r\n * Interface used to define scene explorer extensibility option\r\n */\r\nexport interface IExplorerExtensibilityOption {\r\n    /**\r\n     * Define the option label\r\n     */\r\n    label: string;\r\n    /**\r\n     * Defines the action to execute on click\r\n     */\r\n    action: (entity: any) => void;\r\n}\r\n\r\n/**\r\n * Defines a group of actions associated with a predicate to use when extending the Inspector scene explorer\r\n */\r\nexport interface IExplorerExtensibilityGroup {\r\n    /**\r\n     * Defines a predicate to test if a given type mut be extended\r\n     */\r\n    predicate: (entity: any) => boolean;\r\n    /**\r\n     * Gets the list of options added to a type\r\n     */\r\n    entries: IExplorerExtensibilityOption[];\r\n}\r\n\r\n/**\r\n * Interface used to define the options to use to create the Inspector\r\n */\r\nexport interface IInspectorOptions {\r\n    /**\r\n     * Display in overlay mode (default: false)\r\n     */\r\n    overlay?: boolean;\r\n    /**\r\n     * HTML element to use as root (the parent of the rendering canvas will be used as default value)\r\n     */\r\n    globalRoot?: HTMLElement;\r\n    /**\r\n     * Display the Scene explorer\r\n     */\r\n    showExplorer?: boolean;\r\n    /**\r\n     * Display the property inspector\r\n     */\r\n    showInspector?: boolean;\r\n    /**\r\n     * Display in embed mode (both panes on the right)\r\n     */\r\n    embedMode?: boolean;\r\n    /**\r\n     * let the Inspector handles resize of the canvas when panes are resized (default to true)\r\n     */\r\n    handleResize?: boolean;\r\n    /**\r\n     * Allow the panes to popup (default: true)\r\n     */\r\n    enablePopup?: boolean;\r\n    /**\r\n     * Allow the panes to be closed by users (default: true)\r\n     */\r\n    enableClose?: boolean;\r\n    /**\r\n     * Optional list of extensibility entries\r\n     */\r\n    explorerExtensibility?: IExplorerExtensibilityGroup[];\r\n    /**\r\n     * Optional URL to get the inspector script from (by default it uses the babylonjs CDN).\r\n     */\r\n    inspectorURL?: string;\r\n    /**\r\n     * Optional initial tab (default to DebugLayerTab.Properties)\r\n     */\r\n    initialTab?: DebugLayerTab;\r\n}\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * @hidden\r\n         * Backing field\r\n         */\r\n        _debugLayer: DebugLayer;\r\n\r\n        /**\r\n         * Gets the debug layer (aka Inspector) associated with the scene\r\n         * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n         */\r\n        debugLayer: DebugLayer;\r\n    }\r\n}\r\nObject.defineProperty(Scene.prototype, \"debugLayer\", {\r\n    get: function(this: Scene) {\r\n        if (!this._debugLayer) {\r\n            this._debugLayer = new DebugLayer(this);\r\n        }\r\n        return this._debugLayer;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\n/**\r\n * Enum of inspector action tab\r\n */\r\nexport enum DebugLayerTab {\r\n    /**\r\n     * Properties tag (default)\r\n     */\r\n    Properties = 0,\r\n    /**\r\n     * Debug tab\r\n     */\r\n    Debug = 1,\r\n    /**\r\n     * Statistics tab\r\n     */\r\n    Statistics = 2,\r\n    /**\r\n     * Tools tab\r\n     */\r\n    Tools = 3,\r\n    /**\r\n     * Settings tab\r\n     */\r\n    Settings = 4\r\n}\r\n\r\n/**\r\n * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n * what is happening in your scene\r\n * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n */\r\nexport class DebugLayer {\r\n    /**\r\n     * Define the url to get the inspector script from.\r\n     * By default it uses the babylonjs CDN.\r\n     * @ignoreNaming\r\n     */\r\n    public static InspectorURL = `https://unpkg.com/babylonjs-inspector@${Engine.Version}/babylon.inspector.bundle.js`;\r\n\r\n    private _scene: Scene;\r\n\r\n    private BJSINSPECTOR = this._getGlobalInspector();\r\n\r\n    private _onPropertyChangedObservable?: Observable<{ object: any, property: string, value: any, initialValue: any }>;\r\n    /**\r\n     * Observable triggered when a property is changed through the inspector.\r\n     */\r\n    public get onPropertyChangedObservable() {\r\n        if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\r\n            return this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable;\r\n        }\r\n\r\n        if (!this._onPropertyChangedObservable) {\r\n            this._onPropertyChangedObservable = new Observable<{ object: any, property: string, value: any, initialValue: any }>();\r\n        }\r\n\r\n        return this._onPropertyChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new debug layer.\r\n     * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n     * what is happening in your scene\r\n     * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n     * @param scene Defines the scene to inspect\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n        this._scene.onDisposeObservable.add(() => {\r\n            // Debug layer\r\n            if (this._scene._debugLayer) {\r\n                this._scene._debugLayer.hide();\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Creates the inspector window. */\r\n    private _createInspector(config?: Partial<IInspectorOptions>) {\r\n        if (this.isVisible()) {\r\n            return;\r\n        }\r\n\r\n        if (this._onPropertyChangedObservable) {\r\n            for (var observer of this._onPropertyChangedObservable!.observers) {\r\n                this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable.add(observer);\r\n            }\r\n            this._onPropertyChangedObservable.clear();\r\n            this._onPropertyChangedObservable = undefined;\r\n        }\r\n\r\n        const userOptions: IInspectorOptions = {\r\n            overlay: false,\r\n            showExplorer: true,\r\n            showInspector: true,\r\n            embedMode: false,\r\n            handleResize: true,\r\n            enablePopup: true,\r\n            ...config\r\n        };\r\n\r\n        this.BJSINSPECTOR = this.BJSINSPECTOR || this._getGlobalInspector();\r\n\r\n        this.BJSINSPECTOR.Inspector.Show(this._scene, userOptions);\r\n    }\r\n\r\n    /**\r\n     * Select a specific entity in the scene explorer and highlight a specific block in that entity property grid\r\n     * @param entity defines the entity to select\r\n     * @param lineContainerTitles defines the specific blocks to highlight (could be a string or an array of strings)\r\n     */\r\n    public select(entity: any, lineContainerTitles?: string | string[]) {\r\n        if (this.BJSINSPECTOR) {\r\n\r\n            if (lineContainerTitles) {\r\n                if (Object.prototype.toString.call(lineContainerTitles) == '[object String]') {\r\n                    this.BJSINSPECTOR.Inspector.MarkLineContainerTitleForHighlighting(lineContainerTitles);\r\n                } else {\r\n                    this.BJSINSPECTOR.Inspector.MarkMultipleLineContainerTitlesForHighlighting(lineContainerTitles);\r\n                }\r\n            }\r\n            this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable.notifyObservers(entity);\r\n        }\r\n    }\r\n\r\n    /** Get the inspector from bundle or global */\r\n    private _getGlobalInspector(): any {\r\n        // UMD Global name detection from Webpack Bundle UMD Name.\r\n        if (typeof INSPECTOR !== 'undefined') {\r\n            return INSPECTOR;\r\n        }\r\n\r\n        // In case of module let s check the global emitted from the Inspector entry point.\r\n        if (typeof BABYLON !== 'undefined' && typeof BABYLON.Inspector !== 'undefined') {\r\n            return BABYLON;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get if the inspector is visible or not.\r\n     * @returns true if visible otherwise, false\r\n     */\r\n    public isVisible(): boolean {\r\n        return this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector.IsVisible;\r\n    }\r\n\r\n    /**\r\n     * Hide the inspector and close its window.\r\n     */\r\n    public hide() {\r\n        if (this.BJSINSPECTOR) {\r\n            this.BJSINSPECTOR.Inspector.Hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the scene in the inspector\r\n     */\r\n    public setAsActiveScene() {\r\n        if (this.BJSINSPECTOR) {\r\n            this.BJSINSPECTOR.Inspector._SetNewScene(this._scene);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * Launch the debugLayer.\r\n      * @param config Define the configuration of the inspector\r\n      * @return a promise fulfilled when the debug layer is visible\r\n      */\r\n    public show(config?: IInspectorOptions): Promise<DebugLayer> {\r\n        return new Promise((resolve, reject) => {\r\n            if (typeof this.BJSINSPECTOR == 'undefined') {\r\n                const inspectorUrl = config && config.inspectorURL ? config.inspectorURL : DebugLayer.InspectorURL;\r\n\r\n                // Load inspector and add it to the DOM\r\n                Tools.LoadScript(inspectorUrl, () => {\r\n                    this._createInspector(config);\r\n                    resolve(this);\r\n                });\r\n            } else {\r\n                // Otherwise creates the inspector\r\n                this._createInspector(config);\r\n                resolve(this);\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}