{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { BlurPostProcess } from \"./blurPostProcess\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize } from '../Misc/decorators';\n/**\r\n * The DepthOfFieldBlurPostProcess applied a blur in a give direction.\r\n * This blur differs from the standard BlurPostProcess as it attempts to avoid blurring pixels\r\n * based on samples that have a large difference in distance than the center pixel.\r\n * See section 2.6.2 http://fileadmin.cs.lth.se/cs/education/edan35/lectures/12dof.pdf\r\n */\n\nvar DepthOfFieldBlurPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(DepthOfFieldBlurPostProcess, _super);\n  /**\r\n   * Creates a new instance CircleOfConfusionPostProcess\r\n   * @param name The name of the effect.\r\n   * @param scene The scene the effect belongs to.\r\n   * @param direction The direction the blur should be applied.\r\n   * @param kernel The size of the kernel used to blur.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param circleOfConfusion The circle of confusion + depth map to be used to avoid blurring accross edges\r\n   * @param imageToBlur The image to apply the blur to (default: Current rendered frame)\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function DepthOfFieldBlurPostProcess(name, scene, direction, kernel, options, camera, circleOfConfusion, imageToBlur, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (imageToBlur === void 0) {\n      imageToBlur = null;\n    }\n\n    if (samplingMode === void 0) {\n      samplingMode = Texture.BILINEAR_SAMPLINGMODE;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, direction, kernel, options, camera, samplingMode = 2, engine, reusable, textureType = 0, \"#define DOF 1\\r\\n\", blockCompilation) || this;\n\n    _this.direction = direction;\n\n    _this.onApplyObservable.add(function (effect) {\n      if (imageToBlur != null) {\n        effect.setTextureFromPostProcess(\"textureSampler\", imageToBlur);\n      }\n\n      effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\n\n      if (scene.activeCamera) {\n        effect.setFloat2('cameraMinMaxZ', scene.activeCamera.minZ, scene.activeCamera.maxZ);\n      }\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"DepthOfFieldBlurPostProcess\" string\r\n   */\n\n\n  DepthOfFieldBlurPostProcess.prototype.getClassName = function () {\n    return \"DepthOfFieldBlurPostProcess\";\n  };\n\n  __decorate([serialize()], DepthOfFieldBlurPostProcess.prototype, \"direction\", void 0);\n\n  return DepthOfFieldBlurPostProcess;\n}(BlurPostProcess);\n\nexport { DepthOfFieldBlurPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.DepthOfFieldBlurPostProcess\"] = DepthOfFieldBlurPostProcess;","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/depthOfFieldBlurPostProcess.ts"],"names":[],"mappings":";AAIA,SAAS,OAAT,QAAwB,+BAAxB;AAEA,SAAS,eAAT,QAAgC,mBAAhC;AAIA,SAAS,UAAT,QAA2B,mBAA3B;AACA,SAAS,SAAT,QAA0B,oBAA1B;AAEA;;;;;;;AAMA,IAAA,2BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiD,EAAA,SAAA,CAAA,2BAAA,EAAA,MAAA,CAAA;AAe7C;;;;;;;;;;;;;;;;;;AAgBA,WAAA,2BAAA,CAAY,IAAZ,EAA0B,KAA1B,EAAwC,SAAxC,EAA4D,MAA5D,EAA4E,OAA5E,EAAkH,MAAlH,EAA4I,iBAA5I,EAA4K,WAA5K,EAAuN,YAAvN,EAA6Q,MAA7Q,EAA8R,QAA9R,EAAkT,WAAlT,EAA2U,gBAA3U,EAAmW;AAAvL,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,IAAA;AAAyC;;AAAE,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAuB,OAAO,CAAC,qBAA/B;AAAoD;;AAAuC,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,CAAA;AAAuB;;AAAE,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,KAAA;AAAwB;;AAAnW,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,SAAZ,EAAuB,MAAvB,EAA+B,OAA/B,EAAwC,MAAxC,EAAgD,YAAY,GAAG,CAA/D,EAAkE,MAAlE,EAA0E,QAA1E,EAAoF,WAAW,GAAG,CAAlG,EAAqG,mBAArG,EAA0H,gBAA1H,KAA2I,IAD/I;;AAGI,IAAA,KAAI,CAAC,SAAL,GAAiB,SAAjB;;AAEA,IAAA,KAAI,CAAC,iBAAL,CAAuB,GAAvB,CAA2B,UAAC,MAAD,EAAe;AACtC,UAAI,WAAW,IAAI,IAAnB,EAAyB;AACrB,QAAA,MAAM,CAAC,yBAAP,CAAiC,gBAAjC,EAAmD,WAAnD;AACH;;AACD,MAAA,MAAM,CAAC,+BAAP,CAAuC,0BAAvC,EAAmE,iBAAnE;;AACA,UAAI,KAAK,CAAC,YAAV,EAAwB;AACpB,QAAA,MAAM,CAAC,SAAP,CAAiB,eAAjB,EAAkC,KAAK,CAAC,YAAN,CAAmB,IAArD,EAA2D,KAAK,CAAC,YAAN,CAAmB,IAA9E;AACH;AACJ,KARD;;;AASH;AAtCD;;;;;;AAIO,EAAA,2BAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,6BAAP;AACH,GAFM;;AANP,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,qCAAA,E,WAAA,E,KAA0B,CAA1B,CAAA;;AAyCJ,SAAA,2BAAA;AAAC,CA9CD,CAAiD,eAAjD,CAAA;;SAAa,2B;AAgDb,UAAU,CAAC,eAAX,CAA2B,qCAA3B,IAAoE,2BAApE","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { BlurPostProcess } from \"./blurPostProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { Scene } from \"../scene\";\r\n\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { serialize } from '../Misc/decorators';\r\n\r\n/**\r\n * The DepthOfFieldBlurPostProcess applied a blur in a give direction.\r\n * This blur differs from the standard BlurPostProcess as it attempts to avoid blurring pixels\r\n * based on samples that have a large difference in distance than the center pixel.\r\n * See section 2.6.2 http://fileadmin.cs.lth.se/cs/education/edan35/lectures/12dof.pdf\r\n */\r\nexport class DepthOfFieldBlurPostProcess extends BlurPostProcess {\r\n    /**\r\n     * The direction the blur should be applied\r\n     */\r\n    @serialize()\r\n    public direction: Vector2;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"DepthOfFieldBlurPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"DepthOfFieldBlurPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance CircleOfConfusionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param scene The scene the effect belongs to.\r\n     * @param direction The direction the blur should be applied.\r\n     * @param kernel The size of the kernel used to blur.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param circleOfConfusion The circle of confusion + depth map to be used to avoid blurring accross edges\r\n     * @param imageToBlur The image to apply the blur to (default: Current rendered frame)\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string, scene: Scene, direction: Vector2, kernel: number, options: number | PostProcessOptions, camera: Nullable<Camera>, circleOfConfusion: PostProcess, imageToBlur: Nullable<PostProcess> = null, samplingMode: number = Texture.BILINEAR_SAMPLINGMODE, engine?: Engine, reusable?: boolean, textureType: number = 0, blockCompilation = false) {\r\n        super(name, direction, kernel, options, camera, samplingMode = 2, engine, reusable, textureType = 0, `#define DOF 1\\r\\n`, blockCompilation);\r\n\r\n        this.direction = direction;\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (imageToBlur != null) {\r\n                effect.setTextureFromPostProcess(\"textureSampler\", imageToBlur);\r\n            }\r\n            effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\r\n            if (scene.activeCamera) {\r\n                effect.setFloat2('cameraMinMaxZ', scene.activeCamera.minZ, scene.activeCamera.maxZ);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.DepthOfFieldBlurPostProcess\"] = DepthOfFieldBlurPostProcess;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}