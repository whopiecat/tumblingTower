{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/displayPass.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { SerializationHelper } from '../Misc/decorators';\n/**\r\n * DisplayPassPostProcess which produces an output the same as it's input\r\n */\n\nvar DisplayPassPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(DisplayPassPostProcess, _super);\n  /**\r\n   * Creates the DisplayPassPostProcess\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   */\n\n\n  function DisplayPassPostProcess(name, options, camera, samplingMode, engine, reusable) {\n    return _super.call(this, name, \"displayPass\", [\"passSampler\"], [\"passSampler\"], options, camera, samplingMode, engine, reusable) || this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"DisplayPassPostProcess\" string\r\n   */\n\n\n  DisplayPassPostProcess.prototype.getClassName = function () {\n    return \"DisplayPassPostProcess\";\n  };\n  /** @hidden */\n\n\n  DisplayPassPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new DisplayPassPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  return DisplayPassPostProcess;\n}(PostProcess);\n\nexport { DisplayPassPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.DisplayPassPostProcess\"] = DisplayPassPostProcess;","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/displayPassPostProcess.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAAgD,eAAhD;AAGA,OAAO,iCAAP;AACA,SAAS,UAAT,QAA2B,mBAA3B;AACA,SAAS,mBAAT,QAAoC,oBAApC;AAIA;;;;AAGA,IAAA,sBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4C,EAAA,SAAA,CAAA,sBAAA,EAAA,MAAA,CAAA;AASxC;;;;;;;;;;;AASA,WAAA,sBAAA,CAAY,IAAZ,EAA0B,OAA1B,EAAgE,MAAhE,EAA0F,YAA1F,EAAiH,MAAjH,EAAkI,QAAlI,EAAoJ;WAChJ,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,aAAZ,EAA2B,CAAC,aAAD,CAA3B,EAA4C,CAAC,aAAD,CAA5C,EAA6D,OAA7D,EAAsE,MAAtE,EAA8E,YAA9E,EAA4F,MAA5F,EAAoG,QAApG,KAA6G,I;AAChH;AAnBD;;;;;;AAIO,EAAA,sBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,wBAAP;AACH,GAFM;AAiBP;;;AACc,EAAA,sBAAA,CAAA,MAAA,GAAd,UAAqB,iBAArB,EAA6C,YAA7C,EAAmE,KAAnE,EAAiF,OAAjF,EAAgG;AAC5F,WAAO,mBAAmB,CAAC,KAApB,CAA0B,YAAA;AAC7B,aAAO,IAAI,sBAAJ,CACH,iBAAiB,CAAC,IADf,EAEH,iBAAiB,CAAC,OAFf,EAEwB,YAFxB,EAGH,iBAAiB,CAAC,wBAHf,EAIH,KAAK,CAAC,SAAN,EAJG,EAIgB,iBAAiB,CAAC,QAJlC,CAAP;AAKH,KANM,EAMJ,iBANI,EAMe,KANf,EAMsB,OANtB,CAAP;AAOH,GARa;;AASlB,SAAA,sBAAA;AAAC,CAhCD,CAA4C,WAA5C,CAAA;;;AAkCA,UAAU,CAAC,eAAX,CAA2B,gCAA3B,IAA+D,sBAA/D","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/displayPass.fragment\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { SerializationHelper } from '../Misc/decorators';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * DisplayPassPostProcess which produces an output the same as it's input\r\n */\r\nexport class DisplayPassPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"DisplayPassPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"DisplayPassPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates the DisplayPassPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"displayPass\", [\"passSampler\"], [\"passSampler\"], options, camera, samplingMode, engine, reusable);\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<DisplayPassPostProcess> {\r\n        return SerializationHelper.Parse(() => {\r\n            return new DisplayPassPostProcess(\r\n                parsedPostProcess.name,\r\n                parsedPostProcess.options, targetCamera,\r\n                parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.reusable);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.DisplayPassPostProcess\"] = DisplayPassPostProcess;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}