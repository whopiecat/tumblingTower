{"ast":null,"code":"import { Effect } from \"../../Materials/effect\";\nvar name = 'pbrBlockAnisotropic';\nvar shader = \"#ifdef ANISOTROPIC\\nstruct anisotropicOutParams\\n{\\nfloat anisotropy;\\nvec3 anisotropicTangent;\\nvec3 anisotropicBitangent;\\nvec3 anisotropicNormal;\\n#if DEBUGMODE>0\\nvec3 anisotropyMapData;\\n#endif\\n};\\n#define pbr_inline\\nvoid anisotropicBlock(\\nconst in vec3 vAnisotropy,\\n#ifdef ANISOTROPIC_TEXTURE\\nconst in vec3 anisotropyMapData,\\n#endif\\nconst in mat3 TBN,\\nconst in vec3 normalW,\\nconst in vec3 viewDirectionW,\\nout anisotropicOutParams outParams\\n)\\n{\\nfloat anisotropy=vAnisotropy.b;\\nvec3 anisotropyDirection=vec3(vAnisotropy.xy,0.);\\n#ifdef ANISOTROPIC_TEXTURE\\nanisotropy*=anisotropyMapData.b;\\nanisotropyDirection.rg*=anisotropyMapData.rg*2.0-1.0;\\n#if DEBUGMODE>0\\noutParams.anisotropyMapData=anisotropyMapData;\\n#endif\\n#endif\\nmat3 anisoTBN=mat3(normalize(TBN[0]),normalize(TBN[1]),normalize(TBN[2]));\\nvec3 anisotropicTangent=normalize(anisoTBN*anisotropyDirection);\\nvec3 anisotropicBitangent=normalize(cross(anisoTBN[2],anisotropicTangent));\\noutParams.anisotropy=anisotropy;\\noutParams.anisotropicTangent=anisotropicTangent;\\noutParams.anisotropicBitangent=anisotropicBitangent;\\noutParams.anisotropicNormal=getAnisotropicBentNormals(anisotropicTangent,anisotropicBitangent,normalW,viewDirectionW,anisotropy);\\n}\\n#endif\\n\";\nEffect.IncludesShadersStore[name] = shader;\n/** @hidden */\n\nexport var pbrBlockAnisotropic = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Shaders/ShadersInclude/pbrBlockAnisotropic.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,wBAAvB;AAEA,IAAI,IAAI,GAAG,qBAAX;AACA,IAAI,MAAM,GAAG,8tCAAb;AA2CA,MAAM,CAAC,oBAAP,CAA4B,IAA5B,IAAoC,MAApC;AACA;;AACA,OAAO,IAAI,mBAAmB,GAAG;AAAE,EAAA,IAAI,EAAA,IAAN;AAAQ,EAAA,MAAM,EAAA;AAAd,CAA1B","sourcesContent":["import { Effect } from \"../../Materials/effect\";\n\nlet name = 'pbrBlockAnisotropic';\nlet shader = `#ifdef ANISOTROPIC\nstruct anisotropicOutParams\n{\nfloat anisotropy;\nvec3 anisotropicTangent;\nvec3 anisotropicBitangent;\nvec3 anisotropicNormal;\n#if DEBUGMODE>0\nvec3 anisotropyMapData;\n#endif\n};\n#define pbr_inline\nvoid anisotropicBlock(\nconst in vec3 vAnisotropy,\n#ifdef ANISOTROPIC_TEXTURE\nconst in vec3 anisotropyMapData,\n#endif\nconst in mat3 TBN,\nconst in vec3 normalW,\nconst in vec3 viewDirectionW,\nout anisotropicOutParams outParams\n)\n{\nfloat anisotropy=vAnisotropy.b;\nvec3 anisotropyDirection=vec3(vAnisotropy.xy,0.);\n#ifdef ANISOTROPIC_TEXTURE\nanisotropy*=anisotropyMapData.b;\nanisotropyDirection.rg*=anisotropyMapData.rg*2.0-1.0;\n#if DEBUGMODE>0\noutParams.anisotropyMapData=anisotropyMapData;\n#endif\n#endif\nmat3 anisoTBN=mat3(normalize(TBN[0]),normalize(TBN[1]),normalize(TBN[2]));\nvec3 anisotropicTangent=normalize(anisoTBN*anisotropyDirection);\nvec3 anisotropicBitangent=normalize(cross(anisoTBN[2],anisotropicTangent));\noutParams.anisotropy=anisotropy;\noutParams.anisotropicTangent=anisotropicTangent;\noutParams.anisotropicBitangent=anisotropicBitangent;\noutParams.anisotropicNormal=getAnisotropicBentNormals(anisotropicTangent,anisotropicBitangent,normalW,viewDirectionW,anisotropy);\n}\n#endif\n`;\n\nEffect.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport var pbrBlockAnisotropic = { name, shader };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}