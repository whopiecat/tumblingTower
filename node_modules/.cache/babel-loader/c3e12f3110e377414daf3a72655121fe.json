{"ast":null,"code":"import { Tools } from \"../Misc/tools\";\nimport { Logger } from \"../Misc/logger\";\nimport { TGATools } from '../Misc/tga';\nimport { Engine } from \"../Engines/engine\";\nimport { WebRequest } from '../Misc/webRequest'; // Sets the default offline provider to Babylon.js\n\nEngine.OfflineProviderFactory = function (urlToScene, callbackManifestChecked, disableManifestCheck) {\n  if (disableManifestCheck === void 0) {\n    disableManifestCheck = false;\n  }\n\n  return new Database(urlToScene, callbackManifestChecked, disableManifestCheck);\n};\n/**\r\n * Class used to enable access to IndexedDB\r\n * @see https://doc.babylonjs.com/how_to/caching_resources_in_indexeddb\r\n */\n\n\nvar Database =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Database\r\n   * @param urlToScene defines the url to load the scene\r\n   * @param callbackManifestChecked defines the callback to use when manifest is checked\r\n   * @param disableManifestCheck defines a boolean indicating that we want to skip the manifest validation (it will be considered validated and up to date)\r\n   */\n  function Database(urlToScene, callbackManifestChecked, disableManifestCheck) {\n    var _this = this;\n\n    if (disableManifestCheck === void 0) {\n      disableManifestCheck = false;\n    } // Handling various flavors of prefixed version of IndexedDB\n\n\n    this._idbFactory = typeof window !== \"undefined\" ? window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB : indexedDB;\n    this._callbackManifestChecked = callbackManifestChecked;\n    this._currentSceneUrl = Database._ReturnFullUrlLocation(urlToScene);\n    this._db = null;\n    this._enableSceneOffline = false;\n    this._enableTexturesOffline = false;\n    this._manifestVersionFound = 0;\n    this._mustUpdateRessources = false;\n    this._hasReachedQuota = false;\n\n    if (!Database.IDBStorageEnabled) {\n      this._callbackManifestChecked(true);\n    } else {\n      if (disableManifestCheck) {\n        this._enableSceneOffline = true;\n        this._enableTexturesOffline = true;\n        this._manifestVersionFound = 1;\n        Tools.SetImmediate(function () {\n          _this._callbackManifestChecked(true);\n        });\n      } else {\n        this._checkManifestFile();\n      }\n    }\n  }\n\n  Object.defineProperty(Database.prototype, \"enableSceneOffline\", {\n    /**\r\n     * Gets a boolean indicating if scene must be saved in the database\r\n     */\n    get: function () {\n      return this._enableSceneOffline;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Database.prototype, \"enableTexturesOffline\", {\n    /**\r\n     * Gets a boolean indicating if textures must be saved in the database\r\n     */\n    get: function () {\n      return this._enableTexturesOffline;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Database.prototype._checkManifestFile = function () {\n    var _this = this;\n\n    var noManifestFile = function () {\n      _this._enableSceneOffline = false;\n      _this._enableTexturesOffline = false;\n\n      _this._callbackManifestChecked(false);\n    };\n\n    var timeStampUsed = false;\n    var manifestURL = this._currentSceneUrl + \".manifest\";\n    var xhr = new WebRequest();\n\n    if (navigator.onLine) {\n      // Adding a timestamp to by-pass browsers' cache\n      timeStampUsed = true;\n      manifestURL = manifestURL + (manifestURL.match(/\\?/) == null ? \"?\" : \"&\") + Date.now();\n    }\n\n    xhr.open(\"GET\", manifestURL);\n    xhr.addEventListener(\"load\", function () {\n      if (xhr.status === 200 || Database._ValidateXHRData(xhr, 1)) {\n        try {\n          var manifestFile = JSON.parse(xhr.response);\n          _this._enableSceneOffline = manifestFile.enableSceneOffline;\n          _this._enableTexturesOffline = manifestFile.enableTexturesOffline && Database.IsUASupportingBlobStorage;\n\n          if (manifestFile.version && !isNaN(parseInt(manifestFile.version))) {\n            _this._manifestVersionFound = manifestFile.version;\n          }\n\n          if (_this._callbackManifestChecked) {\n            _this._callbackManifestChecked(true);\n          }\n        } catch (ex) {\n          noManifestFile();\n        }\n      } else {\n        noManifestFile();\n      }\n    }, false);\n    xhr.addEventListener(\"error\", function () {\n      if (timeStampUsed) {\n        timeStampUsed = false; // Let's retry without the timeStamp\n        // It could fail when coupled with HTML5 Offline API\n\n        var retryManifestURL = _this._currentSceneUrl + \".manifest\";\n        xhr.open(\"GET\", retryManifestURL);\n        xhr.send();\n      } else {\n        noManifestFile();\n      }\n    }, false);\n\n    try {\n      xhr.send();\n    } catch (ex) {\n      Logger.Error(\"Error on XHR send request.\");\n\n      this._callbackManifestChecked(false);\n    }\n  };\n  /**\r\n   * Open the database and make it available\r\n   * @param successCallback defines the callback to call on success\r\n   * @param errorCallback defines the callback to call on error\r\n   */\n\n\n  Database.prototype.open = function (successCallback, errorCallback) {\n    var _this = this;\n\n    var handleError = function () {\n      _this._isSupported = false;\n\n      if (errorCallback) {\n        errorCallback();\n      }\n    };\n\n    if (!this._idbFactory || !(this._enableSceneOffline || this._enableTexturesOffline)) {\n      // Your browser doesn't support IndexedDB\n      this._isSupported = false;\n\n      if (errorCallback) {\n        errorCallback();\n      }\n    } else {\n      // If the DB hasn't been opened or created yet\n      if (!this._db) {\n        this._hasReachedQuota = false;\n        this._isSupported = true;\n\n        var request = this._idbFactory.open(\"babylonjs\", 1); // Could occur if user is blocking the quota for the DB and/or doesn't grant access to IndexedDB\n\n\n        request.onerror = function () {\n          handleError();\n        }; // executes when a version change transaction cannot complete due to other active transactions\n\n\n        request.onblocked = function () {\n          Logger.Error(\"IDB request blocked. Please reload the page.\");\n          handleError();\n        }; // DB has been opened successfully\n\n\n        request.onsuccess = function () {\n          _this._db = request.result;\n          successCallback();\n        }; // Initialization of the DB. Creating Scenes & Textures stores\n\n\n        request.onupgradeneeded = function (event) {\n          _this._db = event.target.result;\n\n          if (_this._db) {\n            try {\n              _this._db.createObjectStore(\"scenes\", {\n                keyPath: \"sceneUrl\"\n              });\n\n              _this._db.createObjectStore(\"versions\", {\n                keyPath: \"sceneUrl\"\n              });\n\n              _this._db.createObjectStore(\"textures\", {\n                keyPath: \"textureUrl\"\n              });\n            } catch (ex) {\n              Logger.Error(\"Error while creating object stores. Exception: \" + ex.message);\n              handleError();\n            }\n          }\n        };\n      } // DB has already been created and opened\n      else {\n          if (successCallback) {\n            successCallback();\n          }\n        }\n    }\n  };\n  /**\r\n   * Loads an image from the database\r\n   * @param url defines the url to load from\r\n   * @param image defines the target DOM image\r\n   */\n\n\n  Database.prototype.loadImage = function (url, image) {\n    var _this = this;\n\n    var completeURL = Database._ReturnFullUrlLocation(url);\n\n    var saveAndLoadImage = function () {\n      if (!_this._hasReachedQuota && _this._db !== null) {\n        // the texture is not yet in the DB, let's try to save it\n        _this._saveImageIntoDBAsync(completeURL, image);\n      } // If the texture is not in the DB and we've reached the DB quota limit\n      // let's load it directly from the web\n      else {\n          image.src = url;\n        }\n    };\n\n    if (!this._mustUpdateRessources) {\n      this._loadImageFromDBAsync(completeURL, image, saveAndLoadImage);\n    } // First time we're download the images or update requested in the manifest file by a version change\n    else {\n        saveAndLoadImage();\n      }\n  };\n\n  Database.prototype._loadImageFromDBAsync = function (url, image, notInDBCallback) {\n    if (this._isSupported && this._db !== null) {\n      var texture;\n\n      var transaction = this._db.transaction([\"textures\"]);\n\n      transaction.onabort = function () {\n        image.src = url;\n      };\n\n      transaction.oncomplete = function () {\n        var blobTextureURL;\n\n        if (texture) {\n          var URL = window.URL || window.webkitURL;\n          blobTextureURL = URL.createObjectURL(texture.data);\n\n          image.onerror = function () {\n            Logger.Error(\"Error loading image from blob URL: \" + blobTextureURL + \" switching back to web url: \" + url);\n            image.src = url;\n          };\n\n          image.src = blobTextureURL;\n        } else {\n          notInDBCallback();\n        }\n      };\n\n      var getRequest = transaction.objectStore(\"textures\").get(url);\n\n      getRequest.onsuccess = function (event) {\n        texture = event.target.result;\n      };\n\n      getRequest.onerror = function () {\n        Logger.Error(\"Error loading texture \" + url + \" from DB.\");\n        image.src = url;\n      };\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\n      image.src = url;\n    }\n  };\n\n  Database.prototype._saveImageIntoDBAsync = function (url, image) {\n    var _this = this;\n\n    if (this._isSupported) {\n      // In case of error (type not supported or quota exceeded), we're at least sending back XHR data to allow texture loading later on\n      var generateBlobUrl = function () {\n        var blobTextureURL;\n\n        if (blob) {\n          var URL = window.URL || window.webkitURL;\n\n          try {\n            blobTextureURL = URL.createObjectURL(blob);\n          } // Chrome is raising a type error if we're setting the oneTimeOnly parameter\n          catch (ex) {\n            blobTextureURL = URL.createObjectURL(blob);\n          }\n        }\n\n        if (blobTextureURL) {\n          image.src = blobTextureURL;\n        }\n      };\n\n      if (Database.IsUASupportingBlobStorage) {\n        // Create XHR\n        var xhr = new WebRequest(),\n            blob;\n        xhr.open(\"GET\", url);\n        xhr.responseType = \"blob\";\n        xhr.addEventListener(\"load\", function () {\n          if (xhr.status === 200 && _this._db) {\n            // Blob as response (XHR2)\n            blob = xhr.response;\n\n            var transaction = _this._db.transaction([\"textures\"], \"readwrite\"); // the transaction could abort because of a QuotaExceededError error\n\n\n            transaction.onabort = function (event) {\n              try {\n                //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\n                var srcElement = event.srcElement || event.target;\n                var error = srcElement.error;\n\n                if (error && error.name === \"QuotaExceededError\") {\n                  _this._hasReachedQuota = true;\n                }\n              } catch (ex) {}\n\n              generateBlobUrl();\n            };\n\n            transaction.oncomplete = function () {\n              generateBlobUrl();\n            };\n\n            var newTexture = {\n              textureUrl: url,\n              data: blob\n            };\n\n            try {\n              // Put the blob into the dabase\n              var addRequest = transaction.objectStore(\"textures\").put(newTexture);\n\n              addRequest.onsuccess = function () {};\n\n              addRequest.onerror = function () {\n                generateBlobUrl();\n              };\n            } catch (ex) {\n              // \"DataCloneError\" generated by Chrome when you try to inject blob into IndexedDB\n              if (ex.code === 25) {\n                Database.IsUASupportingBlobStorage = false;\n                _this._enableTexturesOffline = false;\n              }\n\n              image.src = url;\n            }\n          } else {\n            image.src = url;\n          }\n        }, false);\n        xhr.addEventListener(\"error\", function () {\n          Logger.Error(\"Error in XHR request in BABYLON.Database.\");\n          image.src = url;\n        }, false);\n        xhr.send();\n      } else {\n        image.src = url;\n      }\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\n      image.src = url;\n    }\n  };\n\n  Database.prototype._checkVersionFromDB = function (url, versionLoaded) {\n    var _this = this;\n\n    var updateVersion = function () {\n      // the version is not yet in the DB or we need to update it\n      _this._saveVersionIntoDBAsync(url, versionLoaded);\n    };\n\n    this._loadVersionFromDBAsync(url, versionLoaded, updateVersion);\n  };\n\n  Database.prototype._loadVersionFromDBAsync = function (url, callback, updateInDBCallback) {\n    var _this = this;\n\n    if (this._isSupported && this._db) {\n      var version;\n\n      try {\n        var transaction = this._db.transaction([\"versions\"]);\n\n        transaction.oncomplete = function () {\n          if (version) {\n            // If the version in the JSON file is different from the version in DB\n            if (_this._manifestVersionFound !== version.data) {\n              _this._mustUpdateRessources = true;\n              updateInDBCallback();\n            } else {\n              callback(version.data);\n            }\n          } // version was not found in DB\n          else {\n              _this._mustUpdateRessources = true;\n              updateInDBCallback();\n            }\n        };\n\n        transaction.onabort = function () {\n          callback(-1);\n        };\n\n        var getRequest = transaction.objectStore(\"versions\").get(url);\n\n        getRequest.onsuccess = function (event) {\n          version = event.target.result;\n        };\n\n        getRequest.onerror = function () {\n          Logger.Error(\"Error loading version for scene \" + url + \" from DB.\");\n          callback(-1);\n        };\n      } catch (ex) {\n        Logger.Error(\"Error while accessing 'versions' object store (READ OP). Exception: \" + ex.message);\n        callback(-1);\n      }\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\n      callback(-1);\n    }\n  };\n\n  Database.prototype._saveVersionIntoDBAsync = function (url, callback) {\n    var _this = this;\n\n    if (this._isSupported && !this._hasReachedQuota && this._db) {\n      try {\n        // Open a transaction to the database\n        var transaction = this._db.transaction([\"versions\"], \"readwrite\"); // the transaction could abort because of a QuotaExceededError error\n\n\n        transaction.onabort = function (event) {\n          try {\n            //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\n            var error = event.srcElement['error'];\n\n            if (error && error.name === \"QuotaExceededError\") {\n              _this._hasReachedQuota = true;\n            }\n          } catch (ex) {}\n\n          callback(-1);\n        };\n\n        transaction.oncomplete = function () {\n          callback(_this._manifestVersionFound);\n        };\n\n        var newVersion = {\n          sceneUrl: url,\n          data: this._manifestVersionFound\n        }; // Put the scene into the database\n\n        var addRequest = transaction.objectStore(\"versions\").put(newVersion);\n\n        addRequest.onsuccess = function () {};\n\n        addRequest.onerror = function () {\n          Logger.Error(\"Error in DB add version request in BABYLON.Database.\");\n        };\n      } catch (ex) {\n        Logger.Error(\"Error while accessing 'versions' object store (WRITE OP). Exception: \" + ex.message);\n        callback(-1);\n      }\n    } else {\n      callback(-1);\n    }\n  };\n  /**\r\n   * Loads a file from database\r\n   * @param url defines the URL to load from\r\n   * @param sceneLoaded defines a callback to call on success\r\n   * @param progressCallBack defines a callback to call when progress changed\r\n   * @param errorCallback defines a callback to call on error\r\n   * @param useArrayBuffer defines a boolean to use array buffer instead of text string\r\n   */\n\n\n  Database.prototype.loadFile = function (url, sceneLoaded, progressCallBack, errorCallback, useArrayBuffer) {\n    var _this = this;\n\n    var completeUrl = Database._ReturnFullUrlLocation(url);\n\n    var saveAndLoadFile = function () {\n      // the scene is not yet in the DB, let's try to save it\n      _this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\n    };\n\n    this._checkVersionFromDB(completeUrl, function (version) {\n      if (version !== -1) {\n        if (!_this._mustUpdateRessources) {\n          _this._loadFileAsync(completeUrl, sceneLoaded, saveAndLoadFile);\n        } else {\n          _this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\n        }\n      } else {\n        if (errorCallback) {\n          errorCallback();\n        }\n      }\n    });\n  };\n\n  Database.prototype._loadFileAsync = function (url, callback, notInDBCallback) {\n    if (this._isSupported && this._db) {\n      var targetStore;\n\n      if (url.indexOf(\".babylon\") !== -1) {\n        targetStore = \"scenes\";\n      } else {\n        targetStore = \"textures\";\n      }\n\n      var file;\n\n      var transaction = this._db.transaction([targetStore]);\n\n      transaction.oncomplete = function () {\n        if (file) {\n          callback(file.data);\n        } // file was not found in DB\n        else {\n            notInDBCallback();\n          }\n      };\n\n      transaction.onabort = function () {\n        notInDBCallback();\n      };\n\n      var getRequest = transaction.objectStore(targetStore).get(url);\n\n      getRequest.onsuccess = function (event) {\n        file = event.target.result;\n      };\n\n      getRequest.onerror = function () {\n        Logger.Error(\"Error loading file \" + url + \" from DB.\");\n        notInDBCallback();\n      };\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\n      callback();\n    }\n  };\n\n  Database.prototype._saveFileAsync = function (url, callback, progressCallback, useArrayBuffer, errorCallback) {\n    var _this = this;\n\n    if (this._isSupported) {\n      var targetStore;\n\n      if (url.indexOf(\".babylon\") !== -1) {\n        targetStore = \"scenes\";\n      } else {\n        targetStore = \"textures\";\n      } // Create XHR\n\n\n      var xhr = new WebRequest();\n      var fileData;\n      xhr.open(\"GET\", url + \"?\" + Date.now());\n\n      if (useArrayBuffer) {\n        xhr.responseType = \"arraybuffer\";\n      }\n\n      if (progressCallback) {\n        xhr.onprogress = progressCallback;\n      }\n\n      xhr.addEventListener(\"load\", function () {\n        if (xhr.status === 200 || xhr.status < 400 && Database._ValidateXHRData(xhr, !useArrayBuffer ? 1 : 6)) {\n          // Blob as response (XHR2)\n          fileData = !useArrayBuffer ? xhr.responseText : xhr.response;\n\n          if (!_this._hasReachedQuota && _this._db) {\n            // Open a transaction to the database\n            var transaction = _this._db.transaction([targetStore], \"readwrite\"); // the transaction could abort because of a QuotaExceededError error\n\n\n            transaction.onabort = function (event) {\n              try {\n                //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\n                var error = event.srcElement['error'];\n\n                if (error && error.name === \"QuotaExceededError\") {\n                  _this._hasReachedQuota = true;\n                }\n              } catch (ex) {}\n\n              callback(fileData);\n            };\n\n            transaction.oncomplete = function () {\n              callback(fileData);\n            };\n\n            var newFile;\n\n            if (targetStore === \"scenes\") {\n              newFile = {\n                sceneUrl: url,\n                data: fileData,\n                version: _this._manifestVersionFound\n              };\n            } else {\n              newFile = {\n                textureUrl: url,\n                data: fileData\n              };\n            }\n\n            try {\n              // Put the scene into the database\n              var addRequest = transaction.objectStore(targetStore).put(newFile);\n\n              addRequest.onsuccess = function () {};\n\n              addRequest.onerror = function () {\n                Logger.Error(\"Error in DB add file request in BABYLON.Database.\");\n              };\n            } catch (ex) {\n              callback(fileData);\n            }\n          } else {\n            callback(fileData);\n          }\n        } else {\n          if (xhr.status >= 400 && errorCallback) {\n            errorCallback(xhr);\n          } else {\n            callback();\n          }\n        }\n      }, false);\n      xhr.addEventListener(\"error\", function () {\n        Logger.Error(\"error on XHR request.\");\n        callback();\n      }, false);\n      xhr.send();\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\n      callback();\n    }\n  };\n  /**\r\n   * Validates if xhr data is correct\r\n   * @param xhr defines the request to validate\r\n   * @param dataType defines the expected data type\r\n   * @returns true if data is correct\r\n   */\n\n\n  Database._ValidateXHRData = function (xhr, dataType) {\n    // 1 for text (.babylon, manifest and shaders), 2 for TGA, 4 for DDS, 7 for all\n    if (dataType === void 0) {\n      dataType = 7;\n    }\n\n    try {\n      if (dataType & 1) {\n        if (xhr.responseText && xhr.responseText.length > 0) {\n          return true;\n        } else if (dataType === 1) {\n          return false;\n        }\n      }\n\n      if (dataType & 2) {\n        // Check header width and height since there is no \"TGA\" magic number\n        var tgaHeader = TGATools.GetTGAHeader(xhr.response);\n\n        if (tgaHeader.width && tgaHeader.height && tgaHeader.width > 0 && tgaHeader.height > 0) {\n          return true;\n        } else if (dataType === 2) {\n          return false;\n        }\n      }\n\n      if (dataType & 4) {\n        // Check for the \"DDS\" magic number\n        var ddsHeader = new Uint8Array(xhr.response, 0, 3);\n\n        if (ddsHeader[0] === 68 && ddsHeader[1] === 68 && ddsHeader[2] === 83) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    } catch (e) {// Global protection\n    }\n\n    return false;\n  };\n  /** Gets a boolean indicating if the user agent supports blob storage (this value will be updated after creating the first Database object) */\n\n\n  Database.IsUASupportingBlobStorage = true;\n  /**\r\n   * Gets a boolean indicating if Database storate is enabled (off by default)\r\n   */\n\n  Database.IDBStorageEnabled = false;\n\n  Database._ParseURL = function (url) {\n    var a = document.createElement('a');\n    a.href = url;\n    var urlWithoutHash = url.substring(0, url.lastIndexOf(\"#\"));\n    var fileName = url.substring(urlWithoutHash.lastIndexOf(\"/\") + 1, url.length);\n    var absLocation = url.substring(0, url.indexOf(fileName, 0));\n    return absLocation;\n  };\n\n  Database._ReturnFullUrlLocation = function (url) {\n    if (url.indexOf(\"http:/\") === -1 && url.indexOf(\"https:/\") === -1 && typeof window !== \"undefined\") {\n      return Database._ParseURL(window.location.href) + url;\n    } else {\n      return url;\n    }\n  };\n\n  return Database;\n}();\n\nexport { Database };","map":{"version":3,"sources":["../../../sourceES6/core/Offline/database.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { TGATools } from '../Misc/tga';\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { IOfflineProvider } from \"./IOfflineProvider\";\r\nimport { WebRequest } from '../Misc/webRequest';\r\n\r\n// Sets the default offline provider to Babylon.js\r\nEngine.OfflineProviderFactory = (urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck = false) => { return new Database(urlToScene, callbackManifestChecked, disableManifestCheck); };\r\n\r\n/**\r\n * Class used to enable access to IndexedDB\r\n * @see https://doc.babylonjs.com/how_to/caching_resources_in_indexeddb\r\n */\r\nexport class Database implements IOfflineProvider {\r\n    private _callbackManifestChecked: (check: boolean) => any;\r\n    private _currentSceneUrl: string;\r\n    private _db: Nullable<IDBDatabase>;\r\n    private _enableSceneOffline: boolean;\r\n    private _enableTexturesOffline: boolean;\r\n    private _manifestVersionFound: number;\r\n    private _mustUpdateRessources: boolean;\r\n    private _hasReachedQuota: boolean;\r\n    private _isSupported: boolean;\r\n\r\n    // Handling various flavors of prefixed version of IndexedDB\r\n    private _idbFactory = <IDBFactory>(typeof window !== \"undefined\" ? window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB : indexedDB);\r\n\r\n    /** Gets a boolean indicating if the user agent supports blob storage (this value will be updated after creating the first Database object) */\r\n    private static IsUASupportingBlobStorage = true;\r\n\r\n    /**\r\n     * Gets a boolean indicating if Database storate is enabled (off by default)\r\n     */\r\n    static IDBStorageEnabled = false;\r\n\r\n    /**\r\n     * Gets a boolean indicating if scene must be saved in the database\r\n     */\r\n    public get enableSceneOffline(): boolean {\r\n        return this._enableSceneOffline;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if textures must be saved in the database\r\n     */\r\n    public get enableTexturesOffline(): boolean {\r\n        return this._enableTexturesOffline;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Database\r\n     * @param urlToScene defines the url to load the scene\r\n     * @param callbackManifestChecked defines the callback to use when manifest is checked\r\n     * @param disableManifestCheck defines a boolean indicating that we want to skip the manifest validation (it will be considered validated and up to date)\r\n     */\r\n    constructor(urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck = false) {\r\n        this._callbackManifestChecked = callbackManifestChecked;\r\n        this._currentSceneUrl = Database._ReturnFullUrlLocation(urlToScene);\r\n        this._db = null;\r\n        this._enableSceneOffline = false;\r\n        this._enableTexturesOffline = false;\r\n        this._manifestVersionFound = 0;\r\n        this._mustUpdateRessources = false;\r\n        this._hasReachedQuota = false;\r\n\r\n        if (!Database.IDBStorageEnabled) {\r\n            this._callbackManifestChecked(true);\r\n        } else {\r\n            if (disableManifestCheck) {\r\n                this._enableSceneOffline = true;\r\n                this._enableTexturesOffline = true;\r\n                this._manifestVersionFound = 1;\r\n                Tools.SetImmediate(() => {\r\n                    this._callbackManifestChecked(true);\r\n                });\r\n            }\r\n            else {\r\n                this._checkManifestFile();\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _ParseURL = (url: string) => {\r\n        var a = document.createElement('a');\r\n        a.href = url;\r\n        var urlWithoutHash = url.substring(0, url.lastIndexOf(\"#\"));\r\n        var fileName = url.substring(urlWithoutHash.lastIndexOf(\"/\") + 1, url.length);\r\n        var absLocation = url.substring(0, url.indexOf(fileName, 0));\r\n        return absLocation;\r\n    }\r\n\r\n    private static _ReturnFullUrlLocation = (url: string): string => {\r\n        if (url.indexOf(\"http:/\") === -1 && url.indexOf(\"https:/\") === -1 && typeof window !== \"undefined\") {\r\n            return (Database._ParseURL(window.location.href) + url);\r\n        }\r\n        else {\r\n            return url;\r\n        }\r\n    }\r\n\r\n    private _checkManifestFile() {\r\n        var noManifestFile = () => {\r\n            this._enableSceneOffline = false;\r\n            this._enableTexturesOffline = false;\r\n            this._callbackManifestChecked(false);\r\n        };\r\n\r\n        var timeStampUsed = false;\r\n        var manifestURL = this._currentSceneUrl + \".manifest\";\r\n\r\n        var xhr = new WebRequest();\r\n\r\n        if (navigator.onLine) {\r\n            // Adding a timestamp to by-pass browsers' cache\r\n            timeStampUsed = true;\r\n            manifestURL = manifestURL + (manifestURL.match(/\\?/) == null ? \"?\" : \"&\") + Date.now();\r\n        }\r\n        xhr.open(\"GET\", manifestURL);\r\n\r\n        xhr.addEventListener(\"load\", () => {\r\n            if (xhr.status === 200 || Database._ValidateXHRData(xhr, 1)) {\r\n                try {\r\n                    var manifestFile = JSON.parse(xhr.response);\r\n                    this._enableSceneOffline = manifestFile.enableSceneOffline;\r\n                    this._enableTexturesOffline = manifestFile.enableTexturesOffline && Database.IsUASupportingBlobStorage;\r\n                    if (manifestFile.version && !isNaN(parseInt(manifestFile.version))) {\r\n                        this._manifestVersionFound = manifestFile.version;\r\n                    }\r\n                    if (this._callbackManifestChecked) {\r\n                        this._callbackManifestChecked(true);\r\n                    }\r\n                }\r\n                catch (ex) {\r\n                    noManifestFile();\r\n                }\r\n            }\r\n            else {\r\n                noManifestFile();\r\n            }\r\n        }, false);\r\n\r\n        xhr.addEventListener(\"error\", () => {\r\n            if (timeStampUsed) {\r\n                timeStampUsed = false;\r\n                // Let's retry without the timeStamp\r\n                // It could fail when coupled with HTML5 Offline API\r\n                var retryManifestURL = this._currentSceneUrl + \".manifest\";\r\n                xhr.open(\"GET\", retryManifestURL);\r\n                xhr.send();\r\n            }\r\n            else {\r\n                noManifestFile();\r\n            }\r\n        }, false);\r\n\r\n        try {\r\n            xhr.send();\r\n        }\r\n        catch (ex) {\r\n            Logger.Error(\"Error on XHR send request.\");\r\n            this._callbackManifestChecked(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open the database and make it available\r\n     * @param successCallback defines the callback to call on success\r\n     * @param errorCallback defines the callback to call on error\r\n     */\r\n    public open(successCallback: () => void, errorCallback: () => void): void {\r\n        let handleError = () => {\r\n            this._isSupported = false;\r\n            if (errorCallback) { errorCallback(); }\r\n        };\r\n\r\n        if (!this._idbFactory || !(this._enableSceneOffline || this._enableTexturesOffline)) {\r\n            // Your browser doesn't support IndexedDB\r\n            this._isSupported = false;\r\n            if (errorCallback) { errorCallback(); }\r\n        }\r\n        else {\r\n            // If the DB hasn't been opened or created yet\r\n            if (!this._db) {\r\n                this._hasReachedQuota = false;\r\n                this._isSupported = true;\r\n\r\n                var request: IDBOpenDBRequest = this._idbFactory.open(\"babylonjs\", 1);\r\n\r\n                // Could occur if user is blocking the quota for the DB and/or doesn't grant access to IndexedDB\r\n                request.onerror = () => {\r\n                    handleError();\r\n                };\r\n\r\n                // executes when a version change transaction cannot complete due to other active transactions\r\n                request.onblocked = () => {\r\n                    Logger.Error(\"IDB request blocked. Please reload the page.\");\r\n                    handleError();\r\n                };\r\n\r\n                // DB has been opened successfully\r\n                request.onsuccess = () => {\r\n                    this._db = request.result;\r\n                    successCallback();\r\n                };\r\n\r\n                // Initialization of the DB. Creating Scenes & Textures stores\r\n                request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\r\n                    this._db = (<any>(event.target)).result;\r\n                    if (this._db) {\r\n                        try {\r\n                            this._db.createObjectStore(\"scenes\", { keyPath: \"sceneUrl\" });\r\n                            this._db.createObjectStore(\"versions\", { keyPath: \"sceneUrl\" });\r\n                            this._db.createObjectStore(\"textures\", { keyPath: \"textureUrl\" });\r\n                        }\r\n                        catch (ex) {\r\n                            Logger.Error(\"Error while creating object stores. Exception: \" + ex.message);\r\n                            handleError();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            // DB has already been created and opened\r\n            else {\r\n                if (successCallback) { successCallback(); }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads an image from the database\r\n     * @param url defines the url to load from\r\n     * @param image defines the target DOM image\r\n     */\r\n    public loadImage(url: string, image: HTMLImageElement) {\r\n        var completeURL = Database._ReturnFullUrlLocation(url);\r\n\r\n        var saveAndLoadImage = () => {\r\n            if (!this._hasReachedQuota && this._db !== null) {\r\n                // the texture is not yet in the DB, let's try to save it\r\n                this._saveImageIntoDBAsync(completeURL, image);\r\n            }\r\n            // If the texture is not in the DB and we've reached the DB quota limit\r\n            // let's load it directly from the web\r\n            else {\r\n                image.src = url;\r\n            }\r\n        };\r\n\r\n        if (!this._mustUpdateRessources) {\r\n            this._loadImageFromDBAsync(completeURL, image, saveAndLoadImage);\r\n        }\r\n        // First time we're download the images or update requested in the manifest file by a version change\r\n        else {\r\n            saveAndLoadImage();\r\n        }\r\n    }\r\n\r\n    private _loadImageFromDBAsync(url: string, image: HTMLImageElement, notInDBCallback: () => any) {\r\n        if (this._isSupported && this._db !== null) {\r\n            var texture: any;\r\n            var transaction: IDBTransaction = this._db.transaction([\"textures\"]);\r\n\r\n            transaction.onabort = () => {\r\n                image.src = url;\r\n            };\r\n\r\n            transaction.oncomplete = () => {\r\n                var blobTextureURL: string;\r\n                if (texture) {\r\n                    var URL = window.URL || window.webkitURL;\r\n                    blobTextureURL = URL.createObjectURL(texture.data);\r\n                    image.onerror = () => {\r\n                        Logger.Error(\"Error loading image from blob URL: \" + blobTextureURL + \" switching back to web url: \" + url);\r\n                        image.src = url;\r\n                    };\r\n                    image.src = blobTextureURL;\r\n                }\r\n                else {\r\n                    notInDBCallback();\r\n                }\r\n            };\r\n\r\n            var getRequest: IDBRequest = transaction.objectStore(\"textures\").get(url);\r\n\r\n            getRequest.onsuccess = (event) => {\r\n                texture = (<any>(event.target)).result;\r\n            };\r\n            getRequest.onerror = () => {\r\n                Logger.Error(\"Error loading texture \" + url + \" from DB.\");\r\n                image.src = url;\r\n            };\r\n        }\r\n        else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\r\n            image.src = url;\r\n        }\r\n    }\r\n\r\n    private _saveImageIntoDBAsync(url: string, image: HTMLImageElement) {\r\n        if (this._isSupported) {\r\n            // In case of error (type not supported or quota exceeded), we're at least sending back XHR data to allow texture loading later on\r\n            var generateBlobUrl = () => {\r\n                var blobTextureURL;\r\n\r\n                if (blob) {\r\n                    var URL = window.URL || window.webkitURL;\r\n                    try {\r\n                        blobTextureURL = URL.createObjectURL(blob);\r\n                    }\r\n                    // Chrome is raising a type error if we're setting the oneTimeOnly parameter\r\n                    catch (ex) {\r\n                        blobTextureURL = URL.createObjectURL(blob);\r\n                    }\r\n                }\r\n\r\n                if (blobTextureURL) {\r\n                    image.src = blobTextureURL;\r\n                }\r\n            };\r\n\r\n            if (Database.IsUASupportingBlobStorage) { // Create XHR\r\n                var xhr = new WebRequest(),\r\n                    blob: Blob;\r\n\r\n                xhr.open(\"GET\", url);\r\n                xhr.responseType = \"blob\";\r\n\r\n                xhr.addEventListener(\"load\", () => {\r\n                    if (xhr.status === 200 && this._db) {\r\n                        // Blob as response (XHR2)\r\n                        blob = xhr.response;\r\n\r\n                        var transaction = this._db.transaction([\"textures\"], \"readwrite\");\r\n\r\n                        // the transaction could abort because of a QuotaExceededError error\r\n                        transaction.onabort = (event) => {\r\n                            try {\r\n                                //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                                let srcElement = <any>(event.srcElement || event.target);\r\n                                var error = srcElement.error;\r\n                                if (error && error.name === \"QuotaExceededError\") {\r\n                                    this._hasReachedQuota = true;\r\n                                }\r\n                            }\r\n                            catch (ex) { }\r\n                            generateBlobUrl();\r\n                        };\r\n\r\n                        transaction.oncomplete = () => {\r\n                            generateBlobUrl();\r\n                        };\r\n\r\n                        var newTexture = { textureUrl: url, data: blob };\r\n\r\n                        try {\r\n                            // Put the blob into the dabase\r\n                            var addRequest = transaction.objectStore(\"textures\").put(newTexture);\r\n                            addRequest.onsuccess = () => {\r\n                            };\r\n                            addRequest.onerror = () => {\r\n                                generateBlobUrl();\r\n                            };\r\n                        }\r\n                        catch (ex) {\r\n                            // \"DataCloneError\" generated by Chrome when you try to inject blob into IndexedDB\r\n                            if (ex.code === 25) {\r\n                                Database.IsUASupportingBlobStorage = false;\r\n                                this._enableTexturesOffline = false;\r\n                            }\r\n                            image.src = url;\r\n                        }\r\n                    }\r\n                    else {\r\n                        image.src = url;\r\n                    }\r\n                }, false);\r\n\r\n                xhr.addEventListener(\"error\", () => {\r\n                    Logger.Error(\"Error in XHR request in BABYLON.Database.\");\r\n                    image.src = url;\r\n                }, false);\r\n\r\n                xhr.send();\r\n            }\r\n            else {\r\n                image.src = url;\r\n            }\r\n        }\r\n        else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            image.src = url;\r\n        }\r\n    }\r\n\r\n    private _checkVersionFromDB(url: string, versionLoaded: (version: number) => void) {\r\n        var updateVersion = () => {\r\n            // the version is not yet in the DB or we need to update it\r\n            this._saveVersionIntoDBAsync(url, versionLoaded);\r\n        };\r\n        this._loadVersionFromDBAsync(url, versionLoaded, updateVersion);\r\n    }\r\n\r\n    private _loadVersionFromDBAsync(url: string, callback: (version: number) => void, updateInDBCallback: () => void) {\r\n        if (this._isSupported && this._db) {\r\n            var version: any;\r\n            try {\r\n                var transaction = this._db.transaction([\"versions\"]);\r\n\r\n                transaction.oncomplete = () => {\r\n                    if (version) {\r\n                        // If the version in the JSON file is different from the version in DB\r\n                        if (this._manifestVersionFound !== version.data) {\r\n                            this._mustUpdateRessources = true;\r\n                            updateInDBCallback();\r\n                        }\r\n                        else {\r\n                            callback(version.data);\r\n                        }\r\n                    }\r\n                    // version was not found in DB\r\n                    else {\r\n                        this._mustUpdateRessources = true;\r\n                        updateInDBCallback();\r\n                    }\r\n                };\r\n\r\n                transaction.onabort = () => {\r\n                    callback(-1);\r\n                };\r\n\r\n                var getRequest = transaction.objectStore(\"versions\").get(url);\r\n\r\n                getRequest.onsuccess = (event) => {\r\n                    version = (<any>(event.target)).result;\r\n                };\r\n                getRequest.onerror = () => {\r\n                    Logger.Error(\"Error loading version for scene \" + url + \" from DB.\");\r\n                    callback(-1);\r\n                };\r\n            }\r\n            catch (ex) {\r\n                Logger.Error(\"Error while accessing 'versions' object store (READ OP). Exception: \" + ex.message);\r\n                callback(-1);\r\n            }\r\n        }\r\n        else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            callback(-1);\r\n        }\r\n    }\r\n\r\n    private _saveVersionIntoDBAsync(url: string, callback: (version: number) => void) {\r\n        if (this._isSupported && !this._hasReachedQuota && this._db) {\r\n            try {\r\n                // Open a transaction to the database\r\n                var transaction = this._db.transaction([\"versions\"], \"readwrite\");\r\n\r\n                // the transaction could abort because of a QuotaExceededError error\r\n                transaction.onabort = (event) => {\r\n                    try {//backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                        var error = (<any>event.srcElement)['error'];\r\n                        if (error && error.name === \"QuotaExceededError\") {\r\n                            this._hasReachedQuota = true;\r\n                        }\r\n                    }\r\n                    catch (ex) { }\r\n                    callback(-1);\r\n                };\r\n\r\n                transaction.oncomplete = () => {\r\n                    callback(this._manifestVersionFound);\r\n                };\r\n\r\n                var newVersion = { sceneUrl: url, data: this._manifestVersionFound };\r\n\r\n                // Put the scene into the database\r\n                var addRequest = transaction.objectStore(\"versions\").put(newVersion);\r\n                addRequest.onsuccess = () => {\r\n                };\r\n                addRequest.onerror = () => {\r\n                    Logger.Error(\"Error in DB add version request in BABYLON.Database.\");\r\n                };\r\n            }\r\n            catch (ex) {\r\n                Logger.Error(\"Error while accessing 'versions' object store (WRITE OP). Exception: \" + ex.message);\r\n                callback(-1);\r\n            }\r\n        }\r\n        else {\r\n            callback(-1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a file from database\r\n     * @param url defines the URL to load from\r\n     * @param sceneLoaded defines a callback to call on success\r\n     * @param progressCallBack defines a callback to call when progress changed\r\n     * @param errorCallback defines a callback to call on error\r\n     * @param useArrayBuffer defines a boolean to use array buffer instead of text string\r\n     */\r\n    public loadFile(url: string, sceneLoaded: (data: any) => void, progressCallBack?: (data: any) => void, errorCallback?: () => void, useArrayBuffer?: boolean): void {\r\n        var completeUrl = Database._ReturnFullUrlLocation(url);\r\n\r\n        var saveAndLoadFile = () => {\r\n            // the scene is not yet in the DB, let's try to save it\r\n            this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\r\n        };\r\n\r\n        this._checkVersionFromDB(completeUrl, (version) => {\r\n            if (version !== -1) {\r\n                if (!this._mustUpdateRessources) {\r\n                    this._loadFileAsync(completeUrl, sceneLoaded, saveAndLoadFile);\r\n                }\r\n                else {\r\n                    this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\r\n                }\r\n            }\r\n            else {\r\n                if (errorCallback) {\r\n                    errorCallback();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _loadFileAsync(url: string, callback: (data?: any) => void, notInDBCallback: () => void) {\r\n        if (this._isSupported && this._db) {\r\n            var targetStore: string;\r\n            if (url.indexOf(\".babylon\") !== -1) {\r\n                targetStore = \"scenes\";\r\n            }\r\n            else {\r\n                targetStore = \"textures\";\r\n            }\r\n\r\n            var file: any;\r\n            var transaction = this._db.transaction([targetStore]);\r\n\r\n            transaction.oncomplete = () => {\r\n                if (file) {\r\n                    callback(file.data);\r\n                }\r\n                // file was not found in DB\r\n                else {\r\n                    notInDBCallback();\r\n                }\r\n            };\r\n\r\n            transaction.onabort = () => {\r\n                notInDBCallback();\r\n            };\r\n\r\n            var getRequest = transaction.objectStore(targetStore).get(url);\r\n\r\n            getRequest.onsuccess = (event) => {\r\n                file = (<any>(event.target)).result;\r\n            };\r\n            getRequest.onerror = () => {\r\n                Logger.Error(\"Error loading file \" + url + \" from DB.\");\r\n                notInDBCallback();\r\n            };\r\n        }\r\n        else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\r\n            callback();\r\n        }\r\n    }\r\n\r\n    private _saveFileAsync(url: string, callback: (data?: any) => void, progressCallback?: (this: XMLHttpRequestEventTarget, ev: ProgressEvent) => any, useArrayBuffer?: boolean, errorCallback?: (data?: any) => void) {\r\n        if (this._isSupported) {\r\n            var targetStore: string;\r\n            if (url.indexOf(\".babylon\") !== -1) {\r\n                targetStore = \"scenes\";\r\n            }\r\n            else {\r\n                targetStore = \"textures\";\r\n            }\r\n\r\n            // Create XHR\r\n            var xhr = new WebRequest();\r\n            var fileData: any;\r\n            xhr.open(\"GET\", url + \"?\" + Date.now());\r\n\r\n            if (useArrayBuffer) {\r\n                xhr.responseType = \"arraybuffer\";\r\n            }\r\n\r\n            if (progressCallback) {\r\n                xhr.onprogress = progressCallback;\r\n            }\r\n\r\n            xhr.addEventListener(\"load\", () => {\r\n                if (xhr.status === 200 || (xhr.status < 400 && Database._ValidateXHRData(xhr, !useArrayBuffer ? 1 : 6))) {\r\n                    // Blob as response (XHR2)\r\n                    fileData = !useArrayBuffer ? xhr.responseText : xhr.response;\r\n\r\n                    if (!this._hasReachedQuota && this._db) {\r\n                        // Open a transaction to the database\r\n                        var transaction = this._db.transaction([targetStore], \"readwrite\");\r\n\r\n                        // the transaction could abort because of a QuotaExceededError error\r\n                        transaction.onabort = (event) => {\r\n                            try {\r\n                                //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                                var error = (<any>event.srcElement)['error'];\r\n                                if (error && error.name === \"QuotaExceededError\") {\r\n                                    this._hasReachedQuota = true;\r\n                                }\r\n                            }\r\n                            catch (ex) { }\r\n                            callback(fileData);\r\n                        };\r\n\r\n                        transaction.oncomplete = () => {\r\n                            callback(fileData);\r\n                        };\r\n\r\n                        var newFile;\r\n                        if (targetStore === \"scenes\") {\r\n                            newFile = { sceneUrl: url, data: fileData, version: this._manifestVersionFound };\r\n                        }\r\n                        else {\r\n                            newFile = { textureUrl: url, data: fileData };\r\n                        }\r\n\r\n                        try {\r\n                            // Put the scene into the database\r\n                            var addRequest = transaction.objectStore(targetStore).put(newFile);\r\n                            addRequest.onsuccess = () => {\r\n                            };\r\n                            addRequest.onerror = () => {\r\n                                Logger.Error(\"Error in DB add file request in BABYLON.Database.\");\r\n                            };\r\n                        }\r\n                        catch (ex) {\r\n                            callback(fileData);\r\n                        }\r\n                    }\r\n                    else {\r\n                        callback(fileData);\r\n                    }\r\n                }\r\n                else {\r\n                    if (xhr.status >= 400 && errorCallback) {\r\n                        errorCallback(xhr);\r\n                    } else {\r\n                        callback();\r\n                    }\r\n                }\r\n            }, false);\r\n\r\n            xhr.addEventListener(\"error\", () => {\r\n                Logger.Error(\"error on XHR request.\");\r\n                callback();\r\n            }, false);\r\n\r\n            xhr.send();\r\n        }\r\n        else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates if xhr data is correct\r\n     * @param xhr defines the request to validate\r\n     * @param dataType defines the expected data type\r\n     * @returns true if data is correct\r\n     */\r\n    private static _ValidateXHRData(xhr: WebRequest, dataType = 7): boolean {\r\n        // 1 for text (.babylon, manifest and shaders), 2 for TGA, 4 for DDS, 7 for all\r\n\r\n        try {\r\n            if (dataType & 1) {\r\n                if (xhr.responseText && xhr.responseText.length > 0) {\r\n                    return true;\r\n                } else if (dataType === 1) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (dataType & 2) {\r\n                // Check header width and height since there is no \"TGA\" magic number\r\n                var tgaHeader = TGATools.GetTGAHeader(xhr.response);\r\n\r\n                if (tgaHeader.width && tgaHeader.height && tgaHeader.width > 0 && tgaHeader.height > 0) {\r\n                    return true;\r\n                } else if (dataType === 2) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (dataType & 4) {\r\n                // Check for the \"DDS\" magic number\r\n                var ddsHeader = new Uint8Array(xhr.response, 0, 3);\r\n\r\n                if (ddsHeader[0] === 68 && ddsHeader[1] === 68 && ddsHeader[2] === 83) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n        } catch (e) {\r\n            // Global protection\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}