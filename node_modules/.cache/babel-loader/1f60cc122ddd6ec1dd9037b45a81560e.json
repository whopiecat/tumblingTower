{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\nimport { Matrix } from '../../Maths/math.vector';\nimport \"../../Engines/Extensions/engine.dynamicTexture\";\nimport \"../../Engines/Extensions/engine.videoTexture\";\n/**\r\n * This represents the smallest workload to use an already existing element (Canvas or Video) as a texture.\r\n * To be as efficient as possible depending on your constraints nothing aside the first upload\r\n * is automatically managed.\r\n * It is a cheap VideoTexture or DynamicTexture if you prefer to keep full control of the elements\r\n * in your application.\r\n *\r\n * As the update is not automatic, you need to call them manually.\r\n */\n\nvar HtmlElementTexture =\n/** @class */\nfunction (_super) {\n  __extends(HtmlElementTexture, _super);\n  /**\r\n   * Instantiates a HtmlElementTexture from the following parameters.\r\n   *\r\n   * @param name Defines the name of the texture\r\n   * @param element Defines the video or canvas the texture is filled with\r\n   * @param options Defines the other none mandatory texture creation options\r\n   */\n\n\n  function HtmlElementTexture(name, element, options) {\n    var _this = _super.call(this, options.scene || options.engine) || this;\n\n    if (!element || !options.engine && !options.scene) {\n      return _this;\n    }\n\n    options = __assign(__assign({}, HtmlElementTexture.DefaultOptions), options);\n    _this._generateMipMaps = options.generateMipMaps;\n    _this._samplingMode = options.samplingMode;\n    _this._textureMatrix = Matrix.Identity();\n    _this.name = name;\n    _this.element = element;\n    _this._isVideo = element instanceof HTMLVideoElement;\n    _this.anisotropicFilteringLevel = 1;\n\n    _this._createInternalTexture();\n\n    return _this;\n  }\n\n  HtmlElementTexture.prototype._createInternalTexture = function () {\n    var width = 0;\n    var height = 0;\n\n    if (this._isVideo) {\n      width = this.element.videoWidth;\n      height = this.element.videoHeight;\n    } else {\n      width = this.element.width;\n      height = this.element.height;\n    }\n\n    var engine = this._getEngine();\n\n    if (engine) {\n      this._texture = engine.createDynamicTexture(width, height, this._generateMipMaps, this._samplingMode);\n    }\n\n    this.update();\n  };\n  /**\r\n   * Returns the texture matrix used in most of the material.\r\n   */\n\n\n  HtmlElementTexture.prototype.getTextureMatrix = function () {\n    return this._textureMatrix;\n  };\n  /**\r\n   * Updates the content of the texture.\r\n   * @param invertY Defines wether the texture should be inverted on Y (false by default on video and true on canvas)\r\n   */\n\n\n  HtmlElementTexture.prototype.update = function (invertY) {\n    if (invertY === void 0) {\n      invertY = null;\n    }\n\n    var engine = this._getEngine();\n\n    if (this._texture == null || engine == null) {\n      return;\n    }\n\n    if (this._isVideo) {\n      var videoElement = this.element;\n\n      if (videoElement.readyState < videoElement.HAVE_CURRENT_DATA) {\n        return;\n      }\n\n      engine.updateVideoTexture(this._texture, videoElement, invertY === null ? true : invertY);\n    } else {\n      var canvasElement = this.element;\n      engine.updateDynamicTexture(this._texture, canvasElement, invertY === null ? true : invertY, false);\n    }\n  };\n\n  HtmlElementTexture.DefaultOptions = {\n    generateMipMaps: false,\n    samplingMode: 2,\n    engine: null,\n    scene: null\n  };\n  return HtmlElementTexture;\n}(BaseTexture);\n\nexport { HtmlElementTexture };","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/Textures/htmlElementTexture.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\n\r\nimport { Matrix } from '../../Maths/math.vector';\r\n\r\nimport \"../../Engines/Extensions/engine.dynamicTexture\";\r\nimport \"../../Engines/Extensions/engine.videoTexture\";\r\n\r\ndeclare type ThinEngine = import(\"../../Engines/thinEngine\").ThinEngine;\r\ndeclare type Scene = import(\"../../scene\").Scene;\r\n\r\n/**\r\n * Defines the options related to the creation of an HtmlElementTexture\r\n */\r\nexport interface IHtmlElementTextureOptions {\r\n    /**\r\n     * Defines wether mip maps should be created or not.\r\n     */\r\n    generateMipMaps?: boolean;\r\n    /**\r\n     * Defines the sampling mode of the texture.\r\n     */\r\n    samplingMode?: number;\r\n    /**\r\n     * Defines the engine instance to use the texture with. It is not mandatory if you define a scene.\r\n     */\r\n    engine: Nullable<ThinEngine>;\r\n    /**\r\n     * Defines the scene the texture belongs to. It is not mandatory if you define an engine.\r\n     */\r\n    scene: Nullable<Scene>;\r\n}\r\n\r\n/**\r\n * This represents the smallest workload to use an already existing element (Canvas or Video) as a texture.\r\n * To be as efficient as possible depending on your constraints nothing aside the first upload\r\n * is automatically managed.\r\n * It is a cheap VideoTexture or DynamicTexture if you prefer to keep full control of the elements\r\n * in your application.\r\n *\r\n * As the update is not automatic, you need to call them manually.\r\n */\r\nexport class HtmlElementTexture extends BaseTexture {\r\n    /**\r\n     * The texture URL.\r\n     */\r\n    public element: HTMLVideoElement | HTMLCanvasElement;\r\n\r\n    private static readonly DefaultOptions: IHtmlElementTextureOptions = {\r\n        generateMipMaps: false,\r\n        samplingMode: 2,\r\n        engine: null,\r\n        scene: null\r\n    };\r\n\r\n    private _textureMatrix: Matrix;\r\n    private _isVideo: boolean;\r\n    private _generateMipMaps: boolean;\r\n    private _samplingMode: number;\r\n\r\n    /**\r\n     * Instantiates a HtmlElementTexture from the following parameters.\r\n     *\r\n     * @param name Defines the name of the texture\r\n     * @param element Defines the video or canvas the texture is filled with\r\n     * @param options Defines the other none mandatory texture creation options\r\n     */\r\n    constructor(name: string, element: HTMLVideoElement | HTMLCanvasElement, options: IHtmlElementTextureOptions) {\r\n        super(options.scene || options.engine);\r\n\r\n        if (!element || (!options.engine && !options.scene)) {\r\n            return;\r\n        }\r\n\r\n        options = {\r\n            ...HtmlElementTexture.DefaultOptions,\r\n            ...options\r\n        };\r\n\r\n        this._generateMipMaps = options.generateMipMaps!;\r\n        this._samplingMode = options.samplingMode!;\r\n        this._textureMatrix = Matrix.Identity();\r\n\r\n        this.name = name;\r\n        this.element = element;\r\n        this._isVideo = (element instanceof HTMLVideoElement);\r\n\r\n        this.anisotropicFilteringLevel = 1;\r\n\r\n        this._createInternalTexture();\r\n    }\r\n\r\n    private _createInternalTexture(): void {\r\n        let width = 0;\r\n        let height = 0;\r\n        if (this._isVideo) {\r\n            width = (this.element as HTMLVideoElement).videoWidth;\r\n            height = (this.element as HTMLVideoElement).videoHeight;\r\n        }\r\n        else {\r\n            width = this.element.width;\r\n            height = this.element.height;\r\n        }\r\n\r\n        const engine = this._getEngine();\r\n        if (engine) {\r\n            this._texture = engine.createDynamicTexture(\r\n                width,\r\n                height,\r\n                this._generateMipMaps,\r\n                this._samplingMode\r\n            );\r\n        }\r\n\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Returns the texture matrix used in most of the material.\r\n     */\r\n    public getTextureMatrix(): Matrix {\r\n        return this._textureMatrix;\r\n    }\r\n\r\n    /**\r\n     * Updates the content of the texture.\r\n     * @param invertY Defines wether the texture should be inverted on Y (false by default on video and true on canvas)\r\n     */\r\n    public update(invertY: Nullable<boolean> = null): void {\r\n        const engine = this._getEngine();\r\n        if (this._texture == null || engine == null) {\r\n            return;\r\n        }\r\n\r\n        if (this._isVideo) {\r\n            const videoElement = this.element as HTMLVideoElement;\r\n            if (videoElement.readyState < videoElement.HAVE_CURRENT_DATA) {\r\n                return;\r\n            }\r\n\r\n            engine.updateVideoTexture(this._texture,\r\n                videoElement,\r\n                invertY === null ? true : invertY);\r\n        }\r\n        else {\r\n            const canvasElement = this.element as HTMLCanvasElement;\r\n            engine.updateDynamicTexture(this._texture,\r\n                canvasElement,\r\n                invertY === null ? true : invertY,\r\n                false);\r\n        }\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}