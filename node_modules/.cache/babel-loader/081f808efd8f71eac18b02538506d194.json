{"ast":null,"code":"/**\r\n * Logger used througouht the application to allow configuration of\r\n * the log level required for the messages.\r\n */\nvar Logger =\n/** @class */\nfunction () {\n  function Logger() {}\n\n  Logger._AddLogEntry = function (entry) {\n    Logger._LogCache = entry + Logger._LogCache;\n\n    if (Logger.OnNewCacheEntry) {\n      Logger.OnNewCacheEntry(entry);\n    }\n  };\n\n  Logger._FormatMessage = function (message) {\n    var padStr = function (i) {\n      return i < 10 ? \"0\" + i : \"\" + i;\n    };\n\n    var date = new Date();\n    return \"[\" + padStr(date.getHours()) + \":\" + padStr(date.getMinutes()) + \":\" + padStr(date.getSeconds()) + \"]: \" + message;\n  };\n\n  Logger._LogDisabled = function (message) {// nothing to do\n  };\n\n  Logger._LogEnabled = function (message) {\n    var formattedMessage = Logger._FormatMessage(message);\n\n    console.log(\"BJS - \" + formattedMessage);\n    var entry = \"<div style='color:white'>\" + formattedMessage + \"</div><br>\";\n\n    Logger._AddLogEntry(entry);\n  };\n\n  Logger._WarnDisabled = function (message) {// nothing to do\n  };\n\n  Logger._WarnEnabled = function (message) {\n    var formattedMessage = Logger._FormatMessage(message);\n\n    console.warn(\"BJS - \" + formattedMessage);\n    var entry = \"<div style='color:orange'>\" + formattedMessage + \"</div><br>\";\n\n    Logger._AddLogEntry(entry);\n  };\n\n  Logger._ErrorDisabled = function (message) {// nothing to do\n  };\n\n  Logger._ErrorEnabled = function (message) {\n    Logger.errorsCount++;\n\n    var formattedMessage = Logger._FormatMessage(message);\n\n    console.error(\"BJS - \" + formattedMessage);\n    var entry = \"<div style='color:red'>\" + formattedMessage + \"</div><br>\";\n\n    Logger._AddLogEntry(entry);\n  };\n\n  Object.defineProperty(Logger, \"LogCache\", {\n    /**\r\n     * Gets current log cache (list of logs)\r\n     */\n    get: function () {\n      return Logger._LogCache;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Clears the log cache\r\n   */\n\n  Logger.ClearLogCache = function () {\n    Logger._LogCache = \"\";\n    Logger.errorsCount = 0;\n  };\n\n  Object.defineProperty(Logger, \"LogLevels\", {\n    /**\r\n     * Sets the current log level (MessageLogLevel / WarningLogLevel / ErrorLogLevel)\r\n     */\n    set: function (level) {\n      if ((level & Logger.MessageLogLevel) === Logger.MessageLogLevel) {\n        Logger.Log = Logger._LogEnabled;\n      } else {\n        Logger.Log = Logger._LogDisabled;\n      }\n\n      if ((level & Logger.WarningLogLevel) === Logger.WarningLogLevel) {\n        Logger.Warn = Logger._WarnEnabled;\n      } else {\n        Logger.Warn = Logger._WarnDisabled;\n      }\n\n      if ((level & Logger.ErrorLogLevel) === Logger.ErrorLogLevel) {\n        Logger.Error = Logger._ErrorEnabled;\n      } else {\n        Logger.Error = Logger._ErrorDisabled;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * No log\r\n   */\n\n  Logger.NoneLogLevel = 0;\n  /**\r\n   * Only message logs\r\n   */\n\n  Logger.MessageLogLevel = 1;\n  /**\r\n   * Only warning logs\r\n   */\n\n  Logger.WarningLogLevel = 2;\n  /**\r\n   * Only error logs\r\n   */\n\n  Logger.ErrorLogLevel = 4;\n  /**\r\n   * All logs\r\n   */\n\n  Logger.AllLogLevel = 7;\n  Logger._LogCache = \"\";\n  /**\r\n   * Gets a value indicating the number of loading errors\r\n   * @ignorenaming\r\n   */\n\n  Logger.errorsCount = 0;\n  /**\r\n   * Log a message to the console\r\n   */\n\n  Logger.Log = Logger._LogEnabled;\n  /**\r\n   * Write a warning message to the console\r\n   */\n\n  Logger.Warn = Logger._WarnEnabled;\n  /**\r\n   * Write an error message to the console\r\n   */\n\n  Logger.Error = Logger._ErrorEnabled;\n  return Logger;\n}();\n\nexport { Logger };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/logger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Logger used througouht the application to allow configuration of\r\n * the log level required for the messages.\r\n */\r\nexport class Logger {\r\n    /**\r\n     * No log\r\n     */\r\n    public static readonly NoneLogLevel = 0;\r\n    /**\r\n     * Only message logs\r\n     */\r\n    public static readonly MessageLogLevel = 1;\r\n    /**\r\n     * Only warning logs\r\n     */\r\n    public static readonly WarningLogLevel = 2;\r\n    /**\r\n     * Only error logs\r\n     */\r\n    public static readonly ErrorLogLevel = 4;\r\n    /**\r\n     * All logs\r\n     */\r\n    public static readonly AllLogLevel = 7;\r\n\r\n    private static _LogCache = \"\";\r\n\r\n    /**\r\n     * Gets a value indicating the number of loading errors\r\n     * @ignorenaming\r\n     */\r\n    public static errorsCount = 0;\r\n\r\n    /**\r\n     * Callback called when a new log is added\r\n     */\r\n    public static OnNewCacheEntry: (entry: string) => void;\r\n\r\n    private static _AddLogEntry(entry: string) {\r\n        Logger._LogCache = entry + Logger._LogCache;\r\n\r\n        if (Logger.OnNewCacheEntry) {\r\n            Logger.OnNewCacheEntry(entry);\r\n        }\r\n    }\r\n\r\n    private static _FormatMessage(message: string): string {\r\n        var padStr = (i: number) => (i < 10) ? \"0\" + i : \"\" + i;\r\n\r\n        var date = new Date();\r\n        return \"[\" + padStr(date.getHours()) + \":\" + padStr(date.getMinutes()) + \":\" + padStr(date.getSeconds()) + \"]: \" + message;\r\n    }\r\n\r\n    private static _LogDisabled(message: string): void {\r\n        // nothing to do\r\n    }\r\n    private static _LogEnabled(message: string): void {\r\n        var formattedMessage = Logger._FormatMessage(message);\r\n        console.log(\"BJS - \" + formattedMessage);\r\n\r\n        var entry = \"<div style='color:white'>\" + formattedMessage + \"</div><br>\";\r\n        Logger._AddLogEntry(entry);\r\n    }\r\n\r\n    private static _WarnDisabled(message: string): void {\r\n        // nothing to do\r\n    }\r\n    private static _WarnEnabled(message: string): void {\r\n        var formattedMessage = Logger._FormatMessage(message);\r\n        console.warn(\"BJS - \" + formattedMessage);\r\n\r\n        var entry = \"<div style='color:orange'>\" + formattedMessage + \"</div><br>\";\r\n        Logger._AddLogEntry(entry);\r\n    }\r\n\r\n    private static _ErrorDisabled(message: string): void {\r\n        // nothing to do\r\n    }\r\n    private static _ErrorEnabled(message: string): void {\r\n        Logger.errorsCount++;\r\n        var formattedMessage = Logger._FormatMessage(message);\r\n        console.error(\"BJS - \" + formattedMessage);\r\n\r\n        var entry = \"<div style='color:red'>\" + formattedMessage + \"</div><br>\";\r\n        Logger._AddLogEntry(entry);\r\n    }\r\n\r\n    /**\r\n     * Log a message to the console\r\n     */\r\n    public static Log: (message: string) => void = Logger._LogEnabled;\r\n\r\n    /**\r\n     * Write a warning message to the console\r\n     */\r\n    public static Warn: (message: string) => void = Logger._WarnEnabled;\r\n\r\n    /**\r\n     * Write an error message to the console\r\n     */\r\n    public static Error: (message: string) => void = Logger._ErrorEnabled;\r\n\r\n    /**\r\n     * Gets current log cache (list of logs)\r\n     */\r\n    public static get LogCache(): string {\r\n        return Logger._LogCache;\r\n    }\r\n\r\n    /**\r\n     * Clears the log cache\r\n     */\r\n    public static ClearLogCache(): void {\r\n        Logger._LogCache = \"\";\r\n        Logger.errorsCount = 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the current log level (MessageLogLevel / WarningLogLevel / ErrorLogLevel)\r\n     */\r\n    public static set LogLevels(level: number) {\r\n        if ((level & Logger.MessageLogLevel) === Logger.MessageLogLevel) {\r\n            Logger.Log = Logger._LogEnabled;\r\n        }\r\n        else {\r\n            Logger.Log = Logger._LogDisabled;\r\n        }\r\n\r\n        if ((level & Logger.WarningLogLevel) === Logger.WarningLogLevel) {\r\n            Logger.Warn = Logger._WarnEnabled;\r\n        }\r\n        else {\r\n            Logger.Warn = Logger._WarnDisabled;\r\n        }\r\n\r\n        if ((level & Logger.ErrorLogLevel) === Logger.ErrorLogLevel) {\r\n            Logger.Error = Logger._ErrorEnabled;\r\n        }\r\n        else {\r\n            Logger.Error = Logger._ErrorDisabled;\r\n        }\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}