{"ast":null,"code":"import { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\nimport { Mesh } from \"../mesh\";\nimport { VertexData } from \"../mesh.vertexData\";\n\nVertexData.CreateTorus = function (options) {\n  var indices = [];\n  var positions = [];\n  var normals = [];\n  var uvs = [];\n  var diameter = options.diameter || 1;\n  var thickness = options.thickness || 0.5;\n  var tessellation = options.tessellation || 16;\n  var sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n  var stride = tessellation + 1;\n\n  for (var i = 0; i <= tessellation; i++) {\n    var u = i / tessellation;\n    var outerAngle = i * Math.PI * 2.0 / tessellation - Math.PI / 2.0;\n    var transform = Matrix.Translation(diameter / 2.0, 0, 0).multiply(Matrix.RotationY(outerAngle));\n\n    for (var j = 0; j <= tessellation; j++) {\n      var v = 1 - j / tessellation;\n      var innerAngle = j * Math.PI * 2.0 / tessellation + Math.PI;\n      var dx = Math.cos(innerAngle);\n      var dy = Math.sin(innerAngle); // Create a vertex.\n\n      var normal = new Vector3(dx, dy, 0);\n      var position = normal.scale(thickness / 2);\n      var textureCoordinate = new Vector2(u, v);\n      position = Vector3.TransformCoordinates(position, transform);\n      normal = Vector3.TransformNormal(normal, transform);\n      positions.push(position.x, position.y, position.z);\n      normals.push(normal.x, normal.y, normal.z);\n      uvs.push(textureCoordinate.x, textureCoordinate.y); // And create indices for two triangles.\n\n      var nextI = (i + 1) % stride;\n      var nextJ = (j + 1) % stride;\n      indices.push(i * stride + j);\n      indices.push(i * stride + nextJ);\n      indices.push(nextI * stride + j);\n      indices.push(i * stride + nextJ);\n      indices.push(nextI * stride + nextJ);\n      indices.push(nextI * stride + j);\n    }\n  } // Sides\n\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs); // Result\n\n\n  var vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  return vertexData;\n};\n\nMesh.CreateTorus = function (name, diameter, thickness, tessellation, scene, updatable, sideOrientation) {\n  var options = {\n    diameter: diameter,\n    thickness: thickness,\n    tessellation: tessellation,\n    sideOrientation: sideOrientation,\n    updatable: updatable\n  };\n  return TorusBuilder.CreateTorus(name, options, scene);\n};\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\n\n\nvar TorusBuilder =\n/** @class */\nfunction () {\n  function TorusBuilder() {}\n  /**\r\n   * Creates a torus mesh\r\n   * * The parameter `diameter` sets the diameter size (float) of the torus (default 1)\r\n   * * The parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5)\r\n   * * The parameter `tessellation` sets the number of torus sides (postive integer, default 16)\r\n   * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n   * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n   * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n   * @param name defines the name of the mesh\r\n   * @param options defines the options used to create the mesh\r\n   * @param scene defines the hosting scene\r\n   * @returns the torus mesh\r\n   * @see https://doc.babylonjs.com/how_to/set_shapes#torus\r\n   */\n\n\n  TorusBuilder.CreateTorus = function (name, options, scene) {\n    var torus = new Mesh(name, scene);\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n    torus._originalBuilderSideOrientation = options.sideOrientation;\n    var vertexData = VertexData.CreateTorus(options);\n    vertexData.applyToMesh(torus, options.updatable);\n    return torus;\n  };\n\n  return TorusBuilder;\n}();\n\nexport { TorusBuilder };","map":{"version":3,"sources":["../../../../sourceES6/core/Meshes/Builders/torusBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector4, Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Mesh, _CreationDataStorage } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { Scene } from \"../../scene\";\r\n\r\nVertexData.CreateTorus = function(options: { diameter?: number, thickness?: number, tessellation?: number, sideOrientation?: number, frontUVs?: Vector4, backUVs?: Vector4 }) {\r\n    var indices = [];\r\n    var positions = [];\r\n    var normals = [];\r\n    var uvs = [];\r\n\r\n    var diameter = options.diameter || 1;\r\n    var thickness = options.thickness || 0.5;\r\n    var tessellation = options.tessellation || 16;\r\n    var sideOrientation = (options.sideOrientation === 0) ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    var stride = tessellation + 1;\r\n\r\n    for (var i = 0; i <= tessellation; i++) {\r\n        var u = i / tessellation;\r\n\r\n        var outerAngle = i * Math.PI * 2.0 / tessellation - Math.PI / 2.0;\r\n\r\n        var transform = Matrix.Translation(diameter / 2.0, 0, 0).multiply(Matrix.RotationY(outerAngle));\r\n\r\n        for (var j = 0; j <= tessellation; j++) {\r\n            var v = 1 - j / tessellation;\r\n\r\n            var innerAngle = j * Math.PI * 2.0 / tessellation + Math.PI;\r\n            var dx = Math.cos(innerAngle);\r\n            var dy = Math.sin(innerAngle);\r\n\r\n            // Create a vertex.\r\n            var normal = new Vector3(dx, dy, 0);\r\n            var position = normal.scale(thickness / 2);\r\n            var textureCoordinate = new Vector2(u, v);\r\n\r\n            position = Vector3.TransformCoordinates(position, transform);\r\n            normal = Vector3.TransformNormal(normal, transform);\r\n\r\n            positions.push(position.x, position.y, position.z);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            uvs.push(textureCoordinate.x, textureCoordinate.y);\r\n\r\n            // And create indices for two triangles.\r\n            var nextI = (i + 1) % stride;\r\n            var nextJ = (j + 1) % stride;\r\n\r\n            indices.push(i * stride + j);\r\n            indices.push(i * stride + nextJ);\r\n            indices.push(nextI * stride + j);\r\n\r\n            indices.push(i * stride + nextJ);\r\n            indices.push(nextI * stride + nextJ);\r\n            indices.push(nextI * stride + j);\r\n        }\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    var vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n};\r\n\r\nMesh.CreateTorus = (name: string, diameter: number, thickness: number, tessellation: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    var options = {\r\n        diameter: diameter,\r\n        thickness: thickness,\r\n        tessellation: tessellation,\r\n        sideOrientation: sideOrientation,\r\n        updatable: updatable\r\n    };\r\n\r\n    return TorusBuilder.CreateTorus(name, options, scene);\r\n};\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\r\nexport class TorusBuilder {\r\n    /**\r\n     * Creates a torus mesh\r\n     * * The parameter `diameter` sets the diameter size (float) of the torus (default 1)\r\n     * * The parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5)\r\n     * * The parameter `tessellation` sets the number of torus sides (postive integer, default 16)\r\n     * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n     * @param name defines the name of the mesh\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns the torus mesh\r\n     * @see https://doc.babylonjs.com/how_to/set_shapes#torus\r\n     */\r\n    public static CreateTorus(name: string, options: { diameter?: number, thickness?: number, tessellation?: number, updatable?: boolean, sideOrientation?: number, frontUVs?: Vector4, backUVs?: Vector4 }, scene: any): Mesh {\r\n        var torus = new Mesh(name, scene);\r\n\r\n        options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n        torus._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n        var vertexData = VertexData.CreateTorus(options);\r\n\r\n        vertexData.applyToMesh(torus, options.updatable);\r\n\r\n        return torus;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}