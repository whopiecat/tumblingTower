{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\nimport { Observable } from \"../../Misc/observable\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\n/**\r\n * A module that will automatically disable background meshes when entering AR and will enable them when leaving AR.\r\n */\n\nvar WebXRBackgroundRemover =\n/** @class */\nfunction (_super) {\n  __extends(WebXRBackgroundRemover, _super);\n  /**\r\n   * constructs a new background remover module\r\n   * @param _xrSessionManager the session manager for this module\r\n   * @param options read-only options to be used in this module\r\n   */\n\n\n  function WebXRBackgroundRemover(_xrSessionManager,\n  /**\r\n   * read-only options to be used in this module\r\n   */\n  options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, _xrSessionManager) || this;\n\n    _this.options = options;\n    /**\r\n     * registered observers will be triggered when the background state changes\r\n     */\n\n    _this.onBackgroundStateChangedObservable = new Observable();\n    return _this;\n  }\n  /**\r\n   * attach this feature\r\n   * Will usually be called by the features manager\r\n   *\r\n   * @returns true if successful.\r\n   */\n\n\n  WebXRBackgroundRemover.prototype.attach = function () {\n    this._setBackgroundState(false);\n\n    return _super.prototype.attach.call(this);\n  };\n  /**\r\n   * detach this feature.\r\n   * Will usually be called by the features manager\r\n   *\r\n   * @returns true if successful.\r\n   */\n\n\n  WebXRBackgroundRemover.prototype.detach = function () {\n    this._setBackgroundState(true);\n\n    return _super.prototype.detach.call(this);\n  };\n  /**\r\n   * Dispose this feature and all of the resources attached\r\n   */\n\n\n  WebXRBackgroundRemover.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onBackgroundStateChangedObservable.clear();\n  };\n\n  WebXRBackgroundRemover.prototype._onXRFrame = function (_xrFrame) {// no-op\n  };\n\n  WebXRBackgroundRemover.prototype._setBackgroundState = function (newState) {\n    var scene = this._xrSessionManager.scene;\n\n    if (!this.options.ignoreEnvironmentHelper) {\n      if (this.options.environmentHelperRemovalFlags) {\n        if (this.options.environmentHelperRemovalFlags.skyBox) {\n          var backgroundSkybox = scene.getMeshByName(\"BackgroundSkybox\");\n\n          if (backgroundSkybox) {\n            backgroundSkybox.setEnabled(newState);\n          }\n        }\n\n        if (this.options.environmentHelperRemovalFlags.ground) {\n          var backgroundPlane = scene.getMeshByName(\"BackgroundPlane\");\n\n          if (backgroundPlane) {\n            backgroundPlane.setEnabled(newState);\n          }\n        }\n      } else {\n        var backgroundHelper = scene.getMeshByName(\"BackgroundHelper\");\n\n        if (backgroundHelper) {\n          backgroundHelper.setEnabled(newState);\n        }\n      }\n    }\n\n    if (this.options.backgroundMeshes) {\n      this.options.backgroundMeshes.forEach(function (mesh) {\n        return mesh.setEnabled(newState);\n      });\n    }\n\n    this.onBackgroundStateChangedObservable.notifyObservers(newState);\n  };\n  /**\r\n   * The module's name\r\n   */\n\n\n  WebXRBackgroundRemover.Name = WebXRFeatureName.BACKGROUND_REMOVER;\n  /**\r\n   * The (Babylon) version of this module.\r\n   * This is an integer representing the implementation version.\r\n   * This number does not correspond to the WebXR specs version\r\n   */\n\n  WebXRBackgroundRemover.Version = 1;\n  return WebXRBackgroundRemover;\n}(WebXRAbstractFeature);\n\nexport { WebXRBackgroundRemover }; //register the plugin\n\nWebXRFeaturesManager.AddWebXRFeature(WebXRBackgroundRemover.Name, function (xrSessionManager, options) {\n  return function () {\n    return new WebXRBackgroundRemover(xrSessionManager, options);\n  };\n}, WebXRBackgroundRemover.Version, true);","map":{"version":3,"sources":["../../../../sourceES6/core/XR/features/WebXRBackgroundRemover.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\n\r\n/**\r\n * Options interface for the background remover plugin\r\n */\r\nexport interface IWebXRBackgroundRemoverOptions {\r\n    /**\r\n     * Further background meshes to disable when entering AR\r\n     */\r\n    backgroundMeshes?: AbstractMesh[];\r\n    /**\r\n     * flags to configure the removal of the environment helper.\r\n     * If not set, the entire background will be removed. If set, flags should be set as well.\r\n     */\r\n    environmentHelperRemovalFlags?: {\r\n        /**\r\n         * Should the skybox be removed (default false)\r\n         */\r\n        skyBox?: boolean;\r\n        /**\r\n         * Should the ground be removed (default false)\r\n         */\r\n        ground?: boolean;\r\n    };\r\n    /**\r\n     * don't disable the environment helper\r\n     */\r\n    ignoreEnvironmentHelper?: boolean;\r\n}\r\n\r\n/**\r\n * A module that will automatically disable background meshes when entering AR and will enable them when leaving AR.\r\n */\r\nexport class WebXRBackgroundRemover extends WebXRAbstractFeature {\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.BACKGROUND_REMOVER;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /**\r\n     * registered observers will be triggered when the background state changes\r\n     */\r\n    public onBackgroundStateChangedObservable: Observable<boolean> = new Observable();\r\n\r\n    /**\r\n     * constructs a new background remover module\r\n     * @param _xrSessionManager the session manager for this module\r\n     * @param options read-only options to be used in this module\r\n     */\r\n    constructor(\r\n        _xrSessionManager: WebXRSessionManager,\r\n        /**\r\n         * read-only options to be used in this module\r\n         */\r\n        public readonly options: IWebXRBackgroundRemoverOptions = {}\r\n    ) {\r\n        super(_xrSessionManager);\r\n    }\r\n\r\n    /**\r\n     * attach this feature\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public attach(): boolean {\r\n        this._setBackgroundState(false);\r\n        return super.attach();\r\n    }\r\n\r\n    /**\r\n     * detach this feature.\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public detach(): boolean {\r\n        this._setBackgroundState(true);\r\n        return super.detach();\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n        this.onBackgroundStateChangedObservable.clear();\r\n    }\r\n\r\n    protected _onXRFrame(_xrFrame: XRFrame) {\r\n        // no-op\r\n    }\r\n\r\n    private _setBackgroundState(newState: boolean) {\r\n        const scene = this._xrSessionManager.scene;\r\n        if (!this.options.ignoreEnvironmentHelper) {\r\n            if (this.options.environmentHelperRemovalFlags) {\r\n                if (this.options.environmentHelperRemovalFlags.skyBox) {\r\n                    const backgroundSkybox = scene.getMeshByName(\"BackgroundSkybox\");\r\n                    if (backgroundSkybox) {\r\n                        backgroundSkybox.setEnabled(newState);\r\n                    }\r\n                }\r\n                if (this.options.environmentHelperRemovalFlags.ground) {\r\n                    const backgroundPlane = scene.getMeshByName(\"BackgroundPlane\");\r\n                    if (backgroundPlane) {\r\n                        backgroundPlane.setEnabled(newState);\r\n                    }\r\n                }\r\n            } else {\r\n                const backgroundHelper = scene.getMeshByName(\"BackgroundHelper\");\r\n                if (backgroundHelper) {\r\n                    backgroundHelper.setEnabled(newState);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.options.backgroundMeshes) {\r\n            this.options.backgroundMeshes.forEach((mesh) => mesh.setEnabled(newState));\r\n        }\r\n\r\n        this.onBackgroundStateChangedObservable.notifyObservers(newState);\r\n    }\r\n}\r\n\r\n//register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRBackgroundRemover.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRBackgroundRemover(xrSessionManager, options);\r\n    },\r\n    WebXRBackgroundRemover.Version,\r\n    true\r\n);\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}