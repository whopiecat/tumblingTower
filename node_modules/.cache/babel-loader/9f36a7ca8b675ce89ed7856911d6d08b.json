{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger\";\nimport { PostProcess } from \"./postProcess\";\nimport '../Rendering/geometryBufferRendererSceneComponent';\nimport \"../Shaders/screenSpaceCurvature.fragment\";\nimport { EngineStore } from '../Engines/engineStore';\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, SerializationHelper } from '../Misc/decorators';\n/**\r\n * The Screen Space curvature effect can help highlighting ridge and valley of a model.\r\n */\n\nvar ScreenSpaceCurvaturePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ScreenSpaceCurvaturePostProcess, _super);\n  /**\r\n   * Creates a new instance ScreenSpaceCurvaturePostProcess\r\n   * @param name The name of the effect.\r\n   * @param scene The scene containing the objects to blur according to their velocity.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function ScreenSpaceCurvaturePostProcess(name, scene, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"screenSpaceCurvature\", [\"curvature_ridge\", \"curvature_valley\"], [\"textureSampler\", \"normalSampler\"], options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation) || this;\n    /**\r\n     * Defines how much ridge the curvature effect displays.\r\n     */\n\n\n    _this.ridge = 1;\n    /**\r\n     * Defines how much valley the curvature effect displays.\r\n     */\n\n    _this.valley = 1;\n    _this._geometryBufferRenderer = scene.enableGeometryBufferRenderer();\n\n    if (!_this._geometryBufferRenderer) {\n      // Geometry buffer renderer is not supported. So, work as a passthrough.\n      Logger.Error(\"Multiple Render Target support needed for screen space curvature post process. Please use IsSupported test first.\");\n    } else {\n      // Geometry buffer renderer is supported.\n      _this.onApply = function (effect) {\n        effect.setFloat(\"curvature_ridge\", 0.5 / Math.max(_this.ridge * _this.ridge, 1e-4));\n        effect.setFloat(\"curvature_valley\", 0.7 / Math.max(_this.valley * _this.valley, 1e-4));\n\n        var normalTexture = _this._geometryBufferRenderer.getGBuffer().textures[1];\n\n        effect.setTexture(\"normalSampler\", normalTexture);\n      };\n    }\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"ScreenSpaceCurvaturePostProcess\" string\r\n   */\n\n\n  ScreenSpaceCurvaturePostProcess.prototype.getClassName = function () {\n    return \"ScreenSpaceCurvaturePostProcess\";\n  };\n\n  Object.defineProperty(ScreenSpaceCurvaturePostProcess, \"IsSupported\", {\n    /**\r\n     * Support test.\r\n     */\n    get: function () {\n      var engine = EngineStore.LastCreatedEngine;\n\n      if (!engine) {\n        return false;\n      }\n\n      return engine.webGLVersion > 1 || engine.getCaps().drawBuffersExtension;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @hidden */\n\n  ScreenSpaceCurvaturePostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new ScreenSpaceCurvaturePostProcess(parsedPostProcess.name, scene, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], ScreenSpaceCurvaturePostProcess.prototype, \"ridge\", void 0);\n\n  __decorate([serialize()], ScreenSpaceCurvaturePostProcess.prototype, \"valley\", void 0);\n\n  return ScreenSpaceCurvaturePostProcess;\n}(PostProcess);\n\nexport { ScreenSpaceCurvaturePostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.ScreenSpaceCurvaturePostProcess\"] = ScreenSpaceCurvaturePostProcess;","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/screenSpaceCurvaturePostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\n\r\nimport { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer\";\r\n\r\nimport '../Rendering/geometryBufferRendererSceneComponent';\r\nimport \"../Shaders/screenSpaceCurvature.fragment\";\r\nimport { EngineStore } from '../Engines/engineStore';\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { serialize, SerializationHelper } from '../Misc/decorators';\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The Screen Space curvature effect can help highlighting ridge and valley of a model.\r\n */\r\nexport class ScreenSpaceCurvaturePostProcess extends PostProcess {\r\n    /**\r\n     * Defines how much ridge the curvature effect displays.\r\n     */\r\n    @serialize()\r\n    public ridge: number = 1;\r\n\r\n    /**\r\n     * Defines how much valley the curvature effect displays.\r\n     */\r\n    @serialize()\r\n    public valley: number = 1;\r\n\r\n    private _geometryBufferRenderer: Nullable<GeometryBufferRenderer>;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ScreenSpaceCurvaturePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ScreenSpaceCurvaturePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ScreenSpaceCurvaturePostProcess\r\n     * @param name The name of the effect.\r\n     * @param scene The scene containing the objects to blur according to their velocity.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string, scene: Scene, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0, blockCompilation = false) {\r\n        super(name, \"screenSpaceCurvature\", [\"curvature_ridge\", \"curvature_valley\"], [\"textureSampler\", \"normalSampler\"], options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation);\r\n\r\n        this._geometryBufferRenderer = scene.enableGeometryBufferRenderer();\r\n\r\n        if (!this._geometryBufferRenderer) {\r\n            // Geometry buffer renderer is not supported. So, work as a passthrough.\r\n            Logger.Error(\"Multiple Render Target support needed for screen space curvature post process. Please use IsSupported test first.\");\r\n        } else {\r\n            // Geometry buffer renderer is supported.\r\n            this.onApply = (effect: Effect) => {\r\n                effect.setFloat(\"curvature_ridge\", 0.5 / Math.max(this.ridge * this.ridge, 1e-4));\r\n                effect.setFloat(\"curvature_valley\", 0.7 / Math.max(this.valley * this.valley, 1e-4));\r\n\r\n                const normalTexture = this._geometryBufferRenderer!.getGBuffer().textures[1];\r\n                effect.setTexture(\"normalSampler\", normalTexture);\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Support test.\r\n     */\r\n    public static get IsSupported(): boolean {\r\n        var engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            return false;\r\n        }\r\n\r\n        return engine.webGLVersion > 1 || engine.getCaps().drawBuffersExtension;\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(() => {\r\n            return new ScreenSpaceCurvaturePostProcess(\r\n                parsedPostProcess.name, scene,\r\n                parsedPostProcess.options, targetCamera,\r\n                parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ScreenSpaceCurvaturePostProcess\"] = ScreenSpaceCurvaturePostProcess;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}