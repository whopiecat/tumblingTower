{"ast":null,"code":"import { WorkerPool } from './workerPool';\n/**\r\n * Class for loading KTX2 files\r\n */\n\nvar KhronosTextureContainer2 =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   * @param engine The engine to use\r\n   * @param numWorkers The number of workers for async operations. Specify `0` to disable web workers and run synchronously in the current context.\r\n   */\n  function KhronosTextureContainer2(engine, numWorkers) {\n    if (numWorkers === void 0) {\n      numWorkers = KhronosTextureContainer2.DefaultNumWorkers;\n    }\n\n    this._engine = engine;\n\n    if (!KhronosTextureContainer2._Initialized) {\n      KhronosTextureContainer2._CreateWorkerPool(numWorkers);\n    }\n  }\n\n  KhronosTextureContainer2.GetDefaultNumWorkers = function () {\n    if (typeof navigator !== \"object\" || !navigator.hardwareConcurrency) {\n      return 1;\n    } // Use 50% of the available logical processors but capped at 4.\n\n\n    return Math.min(Math.floor(navigator.hardwareConcurrency * 0.5), 4);\n  };\n\n  KhronosTextureContainer2._CreateWorkerPool = function (numWorkers) {\n    this._Initialized = true;\n\n    if (numWorkers && typeof Worker === \"function\") {\n      KhronosTextureContainer2._WorkerPoolPromise = new Promise(function (resolve) {\n        var workerContent = \"(\" + workerFunc + \")()\";\n        var workerBlobUrl = URL.createObjectURL(new Blob([workerContent], {\n          type: \"application/javascript\"\n        }));\n        var workerPromises = new Array(numWorkers);\n\n        for (var i = 0; i < workerPromises.length; i++) {\n          workerPromises[i] = new Promise(function (resolve, reject) {\n            var worker = new Worker(workerBlobUrl);\n\n            var onError = function (error) {\n              worker.removeEventListener(\"error\", onError);\n              worker.removeEventListener(\"message\", onMessage);\n              reject(error);\n            };\n\n            var onMessage = function (message) {\n              if (message.data.action === \"init\") {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n                resolve(worker);\n              }\n            };\n\n            worker.addEventListener(\"error\", onError);\n            worker.addEventListener(\"message\", onMessage);\n            worker.postMessage({\n              action: \"init\",\n              urls: KhronosTextureContainer2.URLConfig\n            });\n          });\n        }\n\n        Promise.all(workerPromises).then(function (workers) {\n          resolve(new WorkerPool(workers));\n        });\n      });\n    } else {\n      KTX2DECODER.MSCTranscoder.UseFromWorkerThread = false;\n      KTX2DECODER.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\n    }\n  };\n  /** @hidden */\n\n\n  KhronosTextureContainer2.prototype.uploadAsync = function (data, internalTexture, options) {\n    var _this = this;\n\n    var caps = this._engine.getCaps();\n\n    var compressedTexturesCaps = {\n      astc: !!caps.astc,\n      bptc: !!caps.bptc,\n      s3tc: !!caps.s3tc,\n      pvrtc: !!caps.pvrtc,\n      etc2: !!caps.etc2,\n      etc1: !!caps.etc1\n    };\n\n    if (KhronosTextureContainer2._WorkerPoolPromise) {\n      return KhronosTextureContainer2._WorkerPoolPromise.then(function (workerPool) {\n        return new Promise(function (resolve, reject) {\n          workerPool.push(function (worker, onComplete) {\n            var onError = function (error) {\n              worker.removeEventListener(\"error\", onError);\n              worker.removeEventListener(\"message\", onMessage);\n              reject(error);\n              onComplete();\n            };\n\n            var onMessage = function (message) {\n              if (message.data.action === \"decoded\") {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n\n                if (!message.data.success) {\n                  reject({\n                    message: message.data.msg\n                  });\n                } else {\n                  try {\n                    _this._createTexture(message.data.decodedData, internalTexture, options);\n\n                    resolve();\n                  } catch (err) {\n                    reject({\n                      message: err\n                    });\n                  }\n                }\n\n                onComplete();\n              }\n            };\n\n            worker.addEventListener(\"error\", onError);\n            worker.addEventListener(\"message\", onMessage); // note: we can't transfer the ownership of data.buffer because if using a fallback texture the data.buffer buffer will be used by the current thread\n\n            worker.postMessage({\n              action: \"decode\",\n              data: data,\n              caps: compressedTexturesCaps,\n              options: options\n            }\n            /*, [data.buffer]*/\n            );\n          });\n        });\n      });\n    }\n\n    return new Promise(function (resolve, reject) {\n      if (!KhronosTextureContainer2._Ktx2Decoder) {\n        KhronosTextureContainer2._Ktx2Decoder = new KTX2DECODER.KTX2Decoder();\n      }\n\n      KhronosTextureContainer2._Ktx2Decoder.decode(data, caps).then(function (data) {\n        _this._createTexture(data, internalTexture);\n\n        resolve();\n      }).catch(function (reason) {\n        reject({\n          message: reason\n        });\n      });\n    });\n  };\n  /**\r\n   * Stop all async operations and release resources.\r\n   */\n\n\n  KhronosTextureContainer2.prototype.dispose = function () {\n    if (KhronosTextureContainer2._WorkerPoolPromise) {\n      KhronosTextureContainer2._WorkerPoolPromise.then(function (workerPool) {\n        workerPool.dispose();\n      });\n    }\n\n    delete KhronosTextureContainer2._WorkerPoolPromise;\n  };\n\n  KhronosTextureContainer2.prototype._createTexture = function (data\n  /* IDecodedData */\n  , internalTexture, options) {\n    this._engine._bindTextureDirectly(this._engine._gl.TEXTURE_2D, internalTexture);\n\n    if (options) {\n      // return back some information about the decoded data\n      options.transcodedFormat = data.transcodedFormat;\n      options.isInGammaSpace = data.isInGammaSpace;\n      options.transcoderName = data.transcoderName;\n    }\n\n    if (data.transcodedFormat === 0x8058\n    /* RGBA8 */\n    ) {\n        internalTexture.type = 0;\n        internalTexture.format = 5;\n      } else {\n      internalTexture.format = data.transcodedFormat;\n    }\n\n    internalTexture._gammaSpace = data.isInGammaSpace;\n\n    if (data.errors) {\n      throw new Error(\"KTX2 container - could not transcode the data. \" + data.errors);\n    }\n\n    for (var t = 0; t < data.mipmaps.length; ++t) {\n      var mipmap = data.mipmaps[t];\n\n      if (!mipmap || !mipmap.data) {\n        throw new Error(\"KTX2 container - could not transcode one of the image\");\n      }\n\n      if (data.transcodedFormat === 0x8058\n      /* RGBA8 */\n      ) {\n          // uncompressed RGBA\n          internalTexture.width = mipmap.width; // need to set width/height so that the call to _uploadDataToTextureDirectly uses the right dimensions\n\n          internalTexture.height = mipmap.height;\n\n          this._engine._uploadDataToTextureDirectly(internalTexture, mipmap.data, 0, t, undefined, true);\n        } else {\n        this._engine._uploadCompressedDataToTextureDirectly(internalTexture, data.transcodedFormat, mipmap.width, mipmap.height, mipmap.data, 0, t);\n      }\n    }\n\n    internalTexture.width = data.mipmaps[0].width;\n    internalTexture.height = data.mipmaps[0].height;\n    internalTexture.generateMipMaps = data.mipmaps.length > 1;\n    internalTexture.isReady = true;\n\n    this._engine._bindTextureDirectly(this._engine._gl.TEXTURE_2D, null);\n  };\n  /**\r\n   * Checks if the given data starts with a KTX2 file identifier.\r\n   * @param data the data to check\r\n   * @returns true if the data is a KTX2 file or false otherwise\r\n   */\n\n\n  KhronosTextureContainer2.IsValid = function (data) {\n    if (data.byteLength >= 12) {\n      // '«', 'K', 'T', 'X', ' ', '2', '0', '»', '\\r', '\\n', '\\x1A', '\\n'\n      var identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\n\n      if (identifier[0] === 0xAB && identifier[1] === 0x4B && identifier[2] === 0x54 && identifier[3] === 0x58 && identifier[4] === 0x20 && identifier[5] === 0x32 && identifier[6] === 0x30 && identifier[7] === 0xBB && identifier[8] === 0x0D && identifier[9] === 0x0A && identifier[10] === 0x1A && identifier[11] === 0x0A) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * URLs to use when loading the KTX2 decoder module as well as its dependencies\r\n   * If a url is null, the default url is used (pointing to https://preview.babylonjs.com)\r\n   * Note that jsDecoderModule can't be null and that the other dependencies will only be loaded if necessary\r\n   * Urls you can change:\r\n   *     URLConfig.jsDecoderModule\r\n   *     URLConfig.wasmUASTCToASTC\r\n   *     URLConfig.wasmUASTCToBC7\r\n   *     URLConfig.wasmUASTCToRGBA_UNORM\r\n   *     URLConfig.wasmUASTCToRGBA_SRGB\r\n   *     URLConfig.jsMSCTranscoder\r\n   *     URLConfig.wasmMSCTranscoder\r\n   * You can see their default values in this PG: https://playground.babylonjs.com/#EIJH8L#9\r\n   */\n\n\n  KhronosTextureContainer2.URLConfig = {\n    jsDecoderModule: \"https://preview.babylonjs.com/babylon.ktx2Decoder.js\",\n    wasmUASTCToASTC: null,\n    wasmUASTCToBC7: null,\n    wasmUASTCToRGBA_UNORM: null,\n    wasmUASTCToRGBA_SRGB: null,\n    jsMSCTranscoder: null,\n    wasmMSCTranscoder: null\n  };\n  /**\r\n   * Default number of workers used to handle data decoding\r\n   */\n\n  KhronosTextureContainer2.DefaultNumWorkers = KhronosTextureContainer2.GetDefaultNumWorkers();\n  return KhronosTextureContainer2;\n}();\n\nexport { KhronosTextureContainer2 };\n\nfunction workerFunc() {\n  var ktx2Decoder;\n\n  onmessage = function (event) {\n    switch (event.data.action) {\n      case \"init\":\n        var urls = event.data.urls;\n        importScripts(urls.jsDecoderModule);\n\n        if (urls.wasmUASTCToASTC !== null) {\n          KTX2DECODER.LiteTranscoder_UASTC_ASTC.WasmModuleURL = urls.wasmUASTCToASTC;\n        }\n\n        if (urls.wasmUASTCToBC7 !== null) {\n          KTX2DECODER.LiteTranscoder_UASTC_BC7.WasmModuleURL = urls.wasmUASTCToBC7;\n        }\n\n        if (urls.wasmUASTCToRGBA_UNORM !== null) {\n          KTX2DECODER.LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL = urls.wasmUASTCToRGBA_UNORM;\n        }\n\n        if (urls.wasmUASTCToRGBA_SRGB !== null) {\n          KTX2DECODER.LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL = urls.wasmUASTCToRGBA_SRGB;\n        }\n\n        if (urls.jsMSCTranscoder !== null) {\n          KTX2DECODER.MSCTranscoder.JSModuleURL = urls.jsMSCTranscoder;\n        }\n\n        if (urls.wasmMSCTranscoder !== null) {\n          KTX2DECODER.MSCTranscoder.WasmModuleURL = urls.wasmMSCTranscoder;\n        }\n\n        ktx2Decoder = new KTX2DECODER.KTX2Decoder();\n        postMessage({\n          action: \"init\"\n        });\n        break;\n\n      case \"decode\":\n        ktx2Decoder.decode(event.data.data, event.data.caps, event.data.options).then(function (data) {\n          var buffers = [];\n\n          for (var mip = 0; mip < data.mipmaps.length; ++mip) {\n            var mipmap = data.mipmaps[mip];\n\n            if (mipmap && mipmap.data) {\n              buffers.push(mipmap.data.buffer);\n            }\n          }\n\n          postMessage({\n            action: \"decoded\",\n            success: true,\n            decodedData: data\n          }, buffers);\n        }).catch(function (reason) {\n          postMessage({\n            action: \"decoded\",\n            success: false,\n            msg: reason\n          });\n        });\n        break;\n    }\n  };\n}","map":{"version":3,"sources":["../../../sourceES6/core/Misc/khronosTextureContainer2.ts"],"names":[],"mappings":"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","sourcesContent":["import { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { ThinEngine } from \"../Engines/thinEngine\";\r\n\r\nimport { WorkerPool } from './workerPool';\r\n\r\ndeclare var KTX2DECODER: any;\r\n\r\n/**\r\n * Class for loading KTX2 files\r\n */\r\nexport class KhronosTextureContainer2 {\r\n    private static _WorkerPoolPromise?: Promise<WorkerPool>;\r\n    private static _Initialized: boolean;\r\n    private static _Ktx2Decoder: any; // used when no worker pool is used\r\n\r\n    /**\r\n     * URLs to use when loading the KTX2 decoder module as well as its dependencies\r\n     * If a url is null, the default url is used (pointing to https://preview.babylonjs.com)\r\n     * Note that jsDecoderModule can't be null and that the other dependencies will only be loaded if necessary\r\n     * Urls you can change:\r\n     *     URLConfig.jsDecoderModule\r\n     *     URLConfig.wasmUASTCToASTC\r\n     *     URLConfig.wasmUASTCToBC7\r\n     *     URLConfig.wasmUASTCToRGBA_UNORM\r\n     *     URLConfig.wasmUASTCToRGBA_SRGB\r\n     *     URLConfig.jsMSCTranscoder\r\n     *     URLConfig.wasmMSCTranscoder\r\n     * You can see their default values in this PG: https://playground.babylonjs.com/#EIJH8L#9\r\n     */\r\n    public static URLConfig = {\r\n        jsDecoderModule: \"https://preview.babylonjs.com/babylon.ktx2Decoder.js\",\r\n        wasmUASTCToASTC: null,\r\n        wasmUASTCToBC7: null,\r\n        wasmUASTCToRGBA_UNORM: null,\r\n        wasmUASTCToRGBA_SRGB: null,\r\n        jsMSCTranscoder: null,\r\n        wasmMSCTranscoder: null,\r\n    };\r\n\r\n    /**\r\n     * Default number of workers used to handle data decoding\r\n     */\r\n    public static DefaultNumWorkers = KhronosTextureContainer2.GetDefaultNumWorkers();\r\n\r\n    private static GetDefaultNumWorkers(): number {\r\n        if (typeof navigator !== \"object\" || !navigator.hardwareConcurrency) {\r\n            return 1;\r\n        }\r\n\r\n        // Use 50% of the available logical processors but capped at 4.\r\n        return Math.min(Math.floor(navigator.hardwareConcurrency * 0.5), 4);\r\n    }\r\n\r\n    private _engine: ThinEngine;\r\n\r\n    private static _CreateWorkerPool(numWorkers: number) {\r\n        this._Initialized = true;\r\n\r\n        if (numWorkers && typeof Worker === \"function\") {\r\n            KhronosTextureContainer2._WorkerPoolPromise = new Promise((resolve) => {\r\n                const workerContent = `(${workerFunc})()`;\r\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n                const workerPromises = new Array<Promise<Worker>>(numWorkers);\r\n                for (let i = 0; i < workerPromises.length; i++) {\r\n                    workerPromises[i] = new Promise((resolve, reject) => {\r\n                        const worker = new Worker(workerBlobUrl);\r\n\r\n                        const onError = (error: ErrorEvent) => {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            reject(error);\r\n                        };\r\n\r\n                        const onMessage = (message: MessageEvent) => {\r\n                            if (message.data.action === \"init\") {\r\n                                worker.removeEventListener(\"error\", onError);\r\n                                worker.removeEventListener(\"message\", onMessage);\r\n                                resolve(worker);\r\n                            }\r\n                        };\r\n\r\n                        worker.addEventListener(\"error\", onError);\r\n                        worker.addEventListener(\"message\", onMessage);\r\n\r\n                        worker.postMessage({\r\n                            action: \"init\",\r\n                            urls: KhronosTextureContainer2.URLConfig\r\n                        });\r\n                    });\r\n                }\r\n\r\n                Promise.all(workerPromises).then((workers) => {\r\n                    resolve(new WorkerPool(workers));\r\n                });\r\n            });\r\n        } else {\r\n            KTX2DECODER.MSCTranscoder.UseFromWorkerThread = false;\r\n            KTX2DECODER.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * @param engine The engine to use\r\n     * @param numWorkers The number of workers for async operations. Specify `0` to disable web workers and run synchronously in the current context.\r\n     */\r\n    public constructor(engine: ThinEngine, numWorkers = KhronosTextureContainer2.DefaultNumWorkers) {\r\n        this._engine = engine;\r\n\r\n        if (!KhronosTextureContainer2._Initialized) {\r\n            KhronosTextureContainer2._CreateWorkerPool(numWorkers);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public uploadAsync(data: ArrayBufferView, internalTexture: InternalTexture, options?: any): Promise<void> {\r\n        const caps = this._engine.getCaps();\r\n\r\n        const compressedTexturesCaps = {\r\n            astc: !!caps.astc,\r\n            bptc: !!caps.bptc,\r\n            s3tc: !!caps.s3tc,\r\n            pvrtc: !!caps.pvrtc,\r\n            etc2: !!caps.etc2,\r\n            etc1: !!caps.etc1,\r\n        };\r\n\r\n        if (KhronosTextureContainer2._WorkerPoolPromise) {\r\n            return KhronosTextureContainer2._WorkerPoolPromise.then((workerPool) => {\r\n                return new Promise((resolve, reject) => {\r\n                    workerPool.push((worker, onComplete) => {\r\n                        const onError = (error: ErrorEvent) => {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            reject(error);\r\n                            onComplete();\r\n                        };\r\n\r\n                        const onMessage = (message: MessageEvent) => {\r\n                            if (message.data.action === \"decoded\") {\r\n                                worker.removeEventListener(\"error\", onError);\r\n                                worker.removeEventListener(\"message\", onMessage);\r\n                                if (!message.data.success) {\r\n                                    reject({ message: message.data.msg });\r\n                                } else {\r\n                                    try {\r\n                                        this._createTexture(message.data.decodedData, internalTexture, options);\r\n                                        resolve();\r\n                                    } catch (err) {\r\n                                        reject({ message: err });\r\n                                    }\r\n                                }\r\n                                onComplete();\r\n                            }\r\n                        };\r\n\r\n                        worker.addEventListener(\"error\", onError);\r\n                        worker.addEventListener(\"message\", onMessage);\r\n\r\n                        // note: we can't transfer the ownership of data.buffer because if using a fallback texture the data.buffer buffer will be used by the current thread\r\n                        worker.postMessage({ action: \"decode\", data, caps: compressedTexturesCaps, options }/*, [data.buffer]*/);\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (!KhronosTextureContainer2._Ktx2Decoder) {\r\n                KhronosTextureContainer2._Ktx2Decoder = new KTX2DECODER.KTX2Decoder();\r\n            }\r\n\r\n            KhronosTextureContainer2._Ktx2Decoder.decode(data, caps).then((data: any) => {\r\n                this._createTexture(data, internalTexture);\r\n                resolve();\r\n            }).catch((reason: any) => {\r\n                reject({ message: reason });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stop all async operations and release resources.\r\n     */\r\n    public dispose(): void {\r\n        if (KhronosTextureContainer2._WorkerPoolPromise) {\r\n            KhronosTextureContainer2._WorkerPoolPromise.then((workerPool) => {\r\n                workerPool.dispose();\r\n            });\r\n        }\r\n\r\n        delete KhronosTextureContainer2._WorkerPoolPromise;\r\n    }\r\n\r\n    protected _createTexture(data: any /* IDecodedData */, internalTexture: InternalTexture, options?: any) {\r\n        this._engine._bindTextureDirectly(this._engine._gl.TEXTURE_2D, internalTexture);\r\n\r\n        if (options) {\r\n            // return back some information about the decoded data\r\n            options.transcodedFormat = data.transcodedFormat;\r\n            options.isInGammaSpace = data.isInGammaSpace;\r\n            options.transcoderName = data.transcoderName;\r\n        }\r\n\r\n        if (data.transcodedFormat === 0x8058 /* RGBA8 */) {\r\n            internalTexture.type = 0;\r\n            internalTexture.format = 5;\r\n        } else {\r\n            internalTexture.format = data.transcodedFormat;\r\n        }\r\n\r\n        internalTexture._gammaSpace = data.isInGammaSpace;\r\n\r\n        if (data.errors) {\r\n            throw new Error(\"KTX2 container - could not transcode the data. \" + data.errors);\r\n        }\r\n\r\n        for (let t = 0; t < data.mipmaps.length; ++t) {\r\n            let mipmap = data.mipmaps[t];\r\n\r\n            if (!mipmap || !mipmap.data) {\r\n                throw new Error(\"KTX2 container - could not transcode one of the image\");\r\n            }\r\n\r\n            if (data.transcodedFormat === 0x8058 /* RGBA8 */) {\r\n                // uncompressed RGBA\r\n                internalTexture.width = mipmap.width; // need to set width/height so that the call to _uploadDataToTextureDirectly uses the right dimensions\r\n                internalTexture.height = mipmap.height;\r\n\r\n                this._engine._uploadDataToTextureDirectly(internalTexture, mipmap.data, 0, t, undefined, true);\r\n            } else {\r\n                this._engine._uploadCompressedDataToTextureDirectly(internalTexture, data.transcodedFormat, mipmap.width, mipmap.height, mipmap.data, 0, t);\r\n            }\r\n        }\r\n\r\n        internalTexture.width = data.mipmaps[0].width;\r\n        internalTexture.height = data.mipmaps[0].height;\r\n        internalTexture.generateMipMaps = data.mipmaps.length > 1;\r\n        internalTexture.isReady = true;\r\n\r\n        this._engine._bindTextureDirectly(this._engine._gl.TEXTURE_2D, null);\r\n    }\r\n\r\n    /**\r\n     * Checks if the given data starts with a KTX2 file identifier.\r\n     * @param data the data to check\r\n     * @returns true if the data is a KTX2 file or false otherwise\r\n     */\r\n    public static IsValid(data: ArrayBufferView): boolean {\r\n        if (data.byteLength >= 12) {\r\n            // '«', 'K', 'T', 'X', ' ', '2', '0', '»', '\\r', '\\n', '\\x1A', '\\n'\r\n            const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\r\n            if (identifier[0] === 0xAB && identifier[1] === 0x4B && identifier[2] === 0x54 && identifier[3] === 0x58 && identifier[4] === 0x20 && identifier[5] === 0x32 &&\r\n                identifier[6] === 0x30 && identifier[7] === 0xBB && identifier[8] === 0x0D && identifier[9] === 0x0A && identifier[10] === 0x1A && identifier[11] === 0x0A) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\ndeclare function importScripts(...urls: string[]): void;\r\ndeclare function postMessage(message: any, transfer?: any[]): void;\r\n\r\ndeclare var KTX2DECODER: any;\r\n\r\nfunction workerFunc(): void {\r\n    let ktx2Decoder: any;\r\n\r\n    onmessage = (event) => {\r\n        switch (event.data.action) {\r\n            case \"init\":\r\n                const urls = event.data.urls;\r\n                importScripts(urls.jsDecoderModule);\r\n                if (urls.wasmUASTCToASTC !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_ASTC.WasmModuleURL = urls.wasmUASTCToASTC;\r\n                }\r\n                if (urls.wasmUASTCToBC7 !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_BC7.WasmModuleURL = urls.wasmUASTCToBC7;\r\n                }\r\n                if (urls.wasmUASTCToRGBA_UNORM !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL = urls.wasmUASTCToRGBA_UNORM;\r\n                }\r\n                if (urls.wasmUASTCToRGBA_SRGB !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL = urls.wasmUASTCToRGBA_SRGB;\r\n                }\r\n                if (urls.jsMSCTranscoder !== null) {\r\n                    KTX2DECODER.MSCTranscoder.JSModuleURL = urls.jsMSCTranscoder;\r\n                }\r\n                if (urls.wasmMSCTranscoder !== null) {\r\n                    KTX2DECODER.MSCTranscoder.WasmModuleURL = urls.wasmMSCTranscoder;\r\n                }\r\n                ktx2Decoder = new KTX2DECODER.KTX2Decoder();\r\n                postMessage({ action: \"init\" });\r\n                break;\r\n            case \"decode\":\r\n                ktx2Decoder.decode(event.data.data, event.data.caps, event.data.options).then((data: any) => {\r\n                    const buffers = [];\r\n                    for (let mip = 0; mip < data.mipmaps.length; ++mip) {\r\n                        const mipmap = data.mipmaps[mip];\r\n                        if (mipmap && mipmap.data) {\r\n                            buffers.push(mipmap.data.buffer);\r\n                        }\r\n                    }\r\n                    postMessage({ action: \"decoded\", success: true, decodedData: data }, buffers);\r\n                }).catch((reason: any) => {\r\n                    postMessage({ action: \"decoded\", success: false, msg: reason });\r\n                });\r\n                break;\r\n        }\r\n    };\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}