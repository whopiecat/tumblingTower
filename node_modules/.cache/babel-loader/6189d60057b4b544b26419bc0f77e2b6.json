{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { Gamepad } from \"../../Gamepads/gamepad\";\n/**\r\n * Manage the gamepad inputs to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar ArcRotateCameraGamepadInput =\n/** @class */\nfunction () {\n  function ArcRotateCameraGamepadInput() {\n    /**\r\n     * Defines the gamepad rotation sensiblity.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\n    this.gamepadRotationSensibility = 80;\n    /**\r\n     * Defines the gamepad move sensiblity.\r\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\r\n     */\n\n    this.gamepadMoveSensibility = 40;\n    this._yAxisScale = 1.0;\n  }\n\n  Object.defineProperty(ArcRotateCameraGamepadInput.prototype, \"invertYAxis\", {\n    /**\r\n     * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\r\n     */\n    get: function () {\n      return this._yAxisScale !== 1.0;\n    },\n    set: function (value) {\n      this._yAxisScale = value ? -1.0 : 1.0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   */\n\n  ArcRotateCameraGamepadInput.prototype.attachControl = function () {\n    var _this = this;\n\n    var manager = this.camera.getScene().gamepadManager;\n    this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add(function (gamepad) {\n      if (gamepad.type !== Gamepad.POSE_ENABLED) {\n        // prioritize XBOX gamepads.\n        if (!_this.gamepad || gamepad.type === Gamepad.XBOX) {\n          _this.gamepad = gamepad;\n        }\n      }\n    });\n    this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add(function (gamepad) {\n      if (_this.gamepad === gamepad) {\n        _this.gamepad = null;\n      }\n    });\n    this.gamepad = manager.getGamepadByType(Gamepad.XBOX);\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  ArcRotateCameraGamepadInput.prototype.detachControl = function (ignored) {\n    this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\n    this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\n    this.gamepad = null;\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  ArcRotateCameraGamepadInput.prototype.checkInputs = function () {\n    if (this.gamepad) {\n      var camera = this.camera;\n      var RSValues = this.gamepad.rightStick;\n\n      if (RSValues) {\n        if (RSValues.x != 0) {\n          var normalizedRX = RSValues.x / this.gamepadRotationSensibility;\n\n          if (normalizedRX != 0 && Math.abs(normalizedRX) > 0.005) {\n            camera.inertialAlphaOffset += normalizedRX;\n          }\n        }\n\n        if (RSValues.y != 0) {\n          var normalizedRY = RSValues.y / this.gamepadRotationSensibility * this._yAxisScale;\n\n          if (normalizedRY != 0 && Math.abs(normalizedRY) > 0.005) {\n            camera.inertialBetaOffset += normalizedRY;\n          }\n        }\n      }\n\n      var LSValues = this.gamepad.leftStick;\n\n      if (LSValues && LSValues.y != 0) {\n        var normalizedLY = LSValues.y / this.gamepadMoveSensibility;\n\n        if (normalizedLY != 0 && Math.abs(normalizedLY) > 0.005) {\n          this.camera.inertialRadiusOffset -= normalizedLY;\n        }\n      }\n    }\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  ArcRotateCameraGamepadInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraGamepadInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  ArcRotateCameraGamepadInput.prototype.getSimpleName = function () {\n    return \"gamepad\";\n  };\n\n  __decorate([serialize()], ArcRotateCameraGamepadInput.prototype, \"gamepadRotationSensibility\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraGamepadInput.prototype, \"gamepadMoveSensibility\", void 0);\n\n  return ArcRotateCameraGamepadInput;\n}();\n\nexport { ArcRotateCameraGamepadInput };\nCameraInputTypes[\"ArcRotateCameraGamepadInput\"] = ArcRotateCameraGamepadInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/arcRotateCameraGamepadInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { Observer } from \"../../Misc/observable\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\n/**\r\n * Manage the gamepad inputs to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class ArcRotateCameraGamepadInput implements ICameraInput<ArcRotateCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: ArcRotateCamera;\r\n\r\n    /**\r\n     * Defines the gamepad the input is gathering event from.\r\n     */\r\n    public gamepad: Nullable<Gamepad>;\r\n\r\n    /**\r\n     * Defines the gamepad rotation sensiblity.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\r\n    @serialize()\r\n    public gamepadRotationSensibility = 80;\r\n\r\n    /**\r\n     * Defines the gamepad move sensiblity.\r\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\r\n     */\r\n    @serialize()\r\n    public gamepadMoveSensibility = 40;\r\n\r\n    private _yAxisScale = 1.0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\r\n     */\r\n    public get invertYAxis() {\r\n        return this._yAxisScale !== 1.0;\r\n    }\r\n\r\n    public set invertYAxis(value: boolean) {\r\n        this._yAxisScale = value ? -1.0 : 1.0;\r\n    }\r\n\r\n    private _onGamepadConnectedObserver: Nullable<Observer<Gamepad>>;\r\n    private _onGamepadDisconnectedObserver: Nullable<Observer<Gamepad>>;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     */\r\n    public attachControl(): void {\r\n        let manager = this.camera.getScene().gamepadManager;\r\n        this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add((gamepad) => {\r\n            if (gamepad.type !== Gamepad.POSE_ENABLED) {\r\n                // prioritize XBOX gamepads.\r\n                if (!this.gamepad || gamepad.type === Gamepad.XBOX) {\r\n                    this.gamepad = gamepad;\r\n                }\r\n            }\r\n        });\r\n\r\n        this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add((gamepad) => {\r\n            if (this.gamepad === gamepad) {\r\n                this.gamepad = null;\r\n            }\r\n        });\r\n\r\n        this.gamepad = manager.getGamepadByType(Gamepad.XBOX);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\r\n        this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\r\n        this.gamepad = null;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this.gamepad) {\r\n            var camera = this.camera;\r\n            var RSValues = this.gamepad.rightStick;\r\n\r\n            if (RSValues) {\r\n                if (RSValues.x != 0) {\r\n                    var normalizedRX = RSValues.x / this.gamepadRotationSensibility;\r\n                    if (normalizedRX != 0 && Math.abs(normalizedRX) > 0.005) {\r\n                        camera.inertialAlphaOffset += normalizedRX;\r\n                    }\r\n                }\r\n\r\n                if (RSValues.y != 0) {\r\n                    var normalizedRY = (RSValues.y / this.gamepadRotationSensibility) * this._yAxisScale;\r\n                    if (normalizedRY != 0 && Math.abs(normalizedRY) > 0.005) {\r\n                        camera.inertialBetaOffset += normalizedRY;\r\n                    }\r\n                }\r\n            }\r\n\r\n            var LSValues = this.gamepad.leftStick;\r\n            if (LSValues && LSValues.y != 0) {\r\n                var normalizedLY = LSValues.y / this.gamepadMoveSensibility;\r\n                if (normalizedLY != 0 && Math.abs(normalizedLY) > 0.005) {\r\n                    this.camera.inertialRadiusOffset -= normalizedLY;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraGamepadInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"gamepad\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"ArcRotateCameraGamepadInput\"] = ArcRotateCameraGamepadInput;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}