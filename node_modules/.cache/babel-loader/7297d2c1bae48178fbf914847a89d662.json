{"ast":null,"code":"import { Observable } from \"../../Misc/observable\";\n/**\r\n * This class represents a single component (for example button or thumbstick) of a motion controller\r\n */\n\nvar WebXRControllerComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new component for a motion controller.\r\n   * It is created by the motion controller itself\r\n   *\r\n   * @param id the id of this component\r\n   * @param type the type of the component\r\n   * @param _buttonIndex index in the buttons array of the gamepad\r\n   * @param _axesIndices indices of the values in the axes array of the gamepad\r\n   */\n  function WebXRControllerComponent(\n  /**\r\n   * the id of this component\r\n   */\n  id,\n  /**\r\n   * the type of the component\r\n   */\n  type, _buttonIndex, _axesIndices) {\n    if (_buttonIndex === void 0) {\n      _buttonIndex = -1;\n    }\n\n    if (_axesIndices === void 0) {\n      _axesIndices = [];\n    }\n\n    this.id = id;\n    this.type = type;\n    this._buttonIndex = _buttonIndex;\n    this._axesIndices = _axesIndices;\n    this._axes = {\n      x: 0,\n      y: 0\n    };\n    this._changes = {};\n    this._currentValue = 0;\n    this._hasChanges = false;\n    this._pressed = false;\n    this._touched = false;\n    /**\r\n     * If axes are available for this component (like a touchpad or thumbstick) the observers will be notified when\r\n     * the axes data changes\r\n     */\n\n    this.onAxisValueChangedObservable = new Observable();\n    /**\r\n     * Observers registered here will be triggered when the state of a button changes\r\n     * State change is either pressed / touched / value\r\n     */\n\n    this.onButtonStateChangedObservable = new Observable();\n  }\n\n  Object.defineProperty(WebXRControllerComponent.prototype, \"axes\", {\n    /**\r\n     * The current axes data. If this component has no axes it will still return an object { x: 0, y: 0 }\r\n     */\n    get: function () {\n      return this._axes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebXRControllerComponent.prototype, \"changes\", {\n    /**\r\n     * Get the changes. Elements will be populated only if they changed with their previous and current value\r\n     */\n    get: function () {\n      return this._changes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebXRControllerComponent.prototype, \"hasChanges\", {\n    /**\r\n     * Return whether or not the component changed the last frame\r\n     */\n    get: function () {\n      return this._hasChanges;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebXRControllerComponent.prototype, \"pressed\", {\n    /**\r\n     * is the button currently pressed\r\n     */\n    get: function () {\n      return this._pressed;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebXRControllerComponent.prototype, \"touched\", {\n    /**\r\n     * is the button currently touched\r\n     */\n    get: function () {\n      return this._touched;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebXRControllerComponent.prototype, \"value\", {\n    /**\r\n     * Get the current value of this component\r\n     */\n    get: function () {\n      return this._currentValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Dispose this component\r\n   */\n\n  WebXRControllerComponent.prototype.dispose = function () {\n    this.onAxisValueChangedObservable.clear();\n    this.onButtonStateChangedObservable.clear();\n  };\n  /**\r\n   * Are there axes correlating to this component\r\n   * @return true is axes data is available\r\n   */\n\n\n  WebXRControllerComponent.prototype.isAxes = function () {\n    return this._axesIndices.length !== 0;\n  };\n  /**\r\n   * Is this component a button (hence - pressable)\r\n   * @returns true if can be pressed\r\n   */\n\n\n  WebXRControllerComponent.prototype.isButton = function () {\n    return this._buttonIndex !== -1;\n  };\n  /**\r\n   * update this component using the gamepad object it is in. Called on every frame\r\n   * @param nativeController the native gamepad controller object\r\n   */\n\n\n  WebXRControllerComponent.prototype.update = function (nativeController) {\n    var buttonUpdated = false;\n    var axesUpdate = false;\n    this._hasChanges = false;\n    this._changes = {};\n\n    if (this.isButton()) {\n      var button = nativeController.buttons[this._buttonIndex]; // defensive, in case a profile was forced\n\n      if (!button) {\n        return;\n      }\n\n      if (this._currentValue !== button.value) {\n        this.changes.value = {\n          current: button.value,\n          previous: this._currentValue\n        };\n        buttonUpdated = true;\n        this._currentValue = button.value;\n      }\n\n      if (this._touched !== button.touched) {\n        this.changes.touched = {\n          current: button.touched,\n          previous: this._touched\n        };\n        buttonUpdated = true;\n        this._touched = button.touched;\n      }\n\n      if (this._pressed !== button.pressed) {\n        this.changes.pressed = {\n          current: button.pressed,\n          previous: this._pressed\n        };\n        buttonUpdated = true;\n        this._pressed = button.pressed;\n      }\n    }\n\n    if (this.isAxes()) {\n      if (this._axes.x !== nativeController.axes[this._axesIndices[0]]) {\n        this.changes.axes = {\n          current: {\n            x: nativeController.axes[this._axesIndices[0]],\n            y: this._axes.y\n          },\n          previous: {\n            x: this._axes.x,\n            y: this._axes.y\n          }\n        };\n        this._axes.x = nativeController.axes[this._axesIndices[0]];\n        axesUpdate = true;\n      }\n\n      if (this._axes.y !== nativeController.axes[this._axesIndices[1]]) {\n        if (this.changes.axes) {\n          this.changes.axes.current.y = nativeController.axes[this._axesIndices[1]];\n        } else {\n          this.changes.axes = {\n            current: {\n              x: this._axes.x,\n              y: nativeController.axes[this._axesIndices[1]]\n            },\n            previous: {\n              x: this._axes.x,\n              y: this._axes.y\n            }\n          };\n        }\n\n        this._axes.y = nativeController.axes[this._axesIndices[1]];\n        axesUpdate = true;\n      }\n    }\n\n    if (buttonUpdated) {\n      this._hasChanges = true;\n      this.onButtonStateChangedObservable.notifyObservers(this);\n    }\n\n    if (axesUpdate) {\n      this._hasChanges = true;\n      this.onAxisValueChangedObservable.notifyObservers(this._axes);\n    }\n  };\n  /**\r\n   * button component type\r\n   */\n\n\n  WebXRControllerComponent.BUTTON_TYPE = \"button\";\n  /**\r\n   * squeeze component type\r\n   */\n\n  WebXRControllerComponent.SQUEEZE_TYPE = \"squeeze\";\n  /**\r\n   * Thumbstick component type\r\n   */\n\n  WebXRControllerComponent.THUMBSTICK_TYPE = \"thumbstick\";\n  /**\r\n   * Touchpad component type\r\n   */\n\n  WebXRControllerComponent.TOUCHPAD_TYPE = \"touchpad\";\n  /**\r\n   * trigger component type\r\n   */\n\n  WebXRControllerComponent.TRIGGER_TYPE = \"trigger\";\n  return WebXRControllerComponent;\n}();\n\nexport { WebXRControllerComponent };","map":{"version":3,"sources":["../../../../sourceES6/core/XR/motionController/webXRControllerComponent.ts"],"names":[],"mappings":"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","sourcesContent":["import { IMinimalMotionControllerObject, MotionControllerComponentType } from \"./webXRAbstractMotionController\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { IDisposable } from \"../../scene\";\r\n\r\n/**\r\n * X-Y values for axes in WebXR\r\n */\r\nexport interface IWebXRMotionControllerAxesValue {\r\n    /**\r\n     * The value of the x axis\r\n     */\r\n    x: number;\r\n    /**\r\n     * The value of the y-axis\r\n     */\r\n    y: number;\r\n}\r\n\r\n/**\r\n * changed / previous values for the values of this component\r\n */\r\nexport interface IWebXRMotionControllerComponentChangesValues<T> {\r\n    /**\r\n     * current (this frame) value\r\n     */\r\n    current: T;\r\n    /**\r\n     * previous (last change) value\r\n     */\r\n    previous: T;\r\n}\r\n\r\n/**\r\n * Represents changes in the component between current frame and last values recorded\r\n */\r\nexport interface IWebXRMotionControllerComponentChanges {\r\n    /**\r\n     * will be populated with previous and current values if axes changed\r\n     */\r\n    axes?: IWebXRMotionControllerComponentChangesValues<IWebXRMotionControllerAxesValue>;\r\n    /**\r\n     * will be populated with previous and current values if pressed changed\r\n     */\r\n    pressed?: IWebXRMotionControllerComponentChangesValues<boolean>;\r\n    /**\r\n     * will be populated with previous and current values if touched changed\r\n     */\r\n    touched?: IWebXRMotionControllerComponentChangesValues<boolean>;\r\n    /**\r\n     * will be populated with previous and current values if value changed\r\n     */\r\n    value?: IWebXRMotionControllerComponentChangesValues<number>;\r\n}\r\n/**\r\n * This class represents a single component (for example button or thumbstick) of a motion controller\r\n */\r\nexport class WebXRControllerComponent implements IDisposable {\r\n    private _axes: IWebXRMotionControllerAxesValue = {\r\n        x: 0,\r\n        y: 0,\r\n    };\r\n    private _changes: IWebXRMotionControllerComponentChanges = {};\r\n    private _currentValue: number = 0;\r\n    private _hasChanges: boolean = false;\r\n    private _pressed: boolean = false;\r\n    private _touched: boolean = false;\r\n\r\n    /**\r\n     * button component type\r\n     */\r\n    public static BUTTON_TYPE: MotionControllerComponentType = \"button\";\r\n    /**\r\n     * squeeze component type\r\n     */\r\n    public static SQUEEZE_TYPE: MotionControllerComponentType = \"squeeze\";\r\n    /**\r\n     * Thumbstick component type\r\n     */\r\n    public static THUMBSTICK_TYPE: MotionControllerComponentType = \"thumbstick\";\r\n    /**\r\n     * Touchpad component type\r\n     */\r\n    public static TOUCHPAD_TYPE: MotionControllerComponentType = \"touchpad\";\r\n    /**\r\n     * trigger component type\r\n     */\r\n    public static TRIGGER_TYPE: MotionControllerComponentType = \"trigger\";\r\n\r\n    /**\r\n     * If axes are available for this component (like a touchpad or thumbstick) the observers will be notified when\r\n     * the axes data changes\r\n     */\r\n    public onAxisValueChangedObservable: Observable<{ x: number; y: number }> = new Observable();\r\n    /**\r\n     * Observers registered here will be triggered when the state of a button changes\r\n     * State change is either pressed / touched / value\r\n     */\r\n    public onButtonStateChangedObservable: Observable<WebXRControllerComponent> = new Observable();\r\n\r\n    /**\r\n     * Creates a new component for a motion controller.\r\n     * It is created by the motion controller itself\r\n     *\r\n     * @param id the id of this component\r\n     * @param type the type of the component\r\n     * @param _buttonIndex index in the buttons array of the gamepad\r\n     * @param _axesIndices indices of the values in the axes array of the gamepad\r\n     */\r\n    constructor(\r\n        /**\r\n         * the id of this component\r\n         */\r\n        public id: string,\r\n        /**\r\n         * the type of the component\r\n         */\r\n        public type: MotionControllerComponentType,\r\n        private _buttonIndex: number = -1,\r\n        private _axesIndices: number[] = []\r\n    ) {}\r\n\r\n    /**\r\n     * The current axes data. If this component has no axes it will still return an object { x: 0, y: 0 }\r\n     */\r\n    public get axes(): IWebXRMotionControllerAxesValue {\r\n        return this._axes;\r\n    }\r\n\r\n    /**\r\n     * Get the changes. Elements will be populated only if they changed with their previous and current value\r\n     */\r\n    public get changes(): IWebXRMotionControllerComponentChanges {\r\n        return this._changes;\r\n    }\r\n\r\n    /**\r\n     * Return whether or not the component changed the last frame\r\n     */\r\n    public get hasChanges(): boolean {\r\n        return this._hasChanges;\r\n    }\r\n\r\n    /**\r\n     * is the button currently pressed\r\n     */\r\n    public get pressed(): boolean {\r\n        return this._pressed;\r\n    }\r\n\r\n    /**\r\n     * is the button currently touched\r\n     */\r\n    public get touched(): boolean {\r\n        return this._touched;\r\n    }\r\n\r\n    /**\r\n     * Get the current value of this component\r\n     */\r\n    public get value(): number {\r\n        return this._currentValue;\r\n    }\r\n\r\n    /**\r\n     * Dispose this component\r\n     */\r\n    public dispose(): void {\r\n        this.onAxisValueChangedObservable.clear();\r\n        this.onButtonStateChangedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Are there axes correlating to this component\r\n     * @return true is axes data is available\r\n     */\r\n    public isAxes(): boolean {\r\n        return this._axesIndices.length !== 0;\r\n    }\r\n\r\n    /**\r\n     * Is this component a button (hence - pressable)\r\n     * @returns true if can be pressed\r\n     */\r\n    public isButton(): boolean {\r\n        return this._buttonIndex !== -1;\r\n    }\r\n\r\n    /**\r\n     * update this component using the gamepad object it is in. Called on every frame\r\n     * @param nativeController the native gamepad controller object\r\n     */\r\n    public update(nativeController: IMinimalMotionControllerObject) {\r\n        let buttonUpdated = false;\r\n        let axesUpdate = false;\r\n        this._hasChanges = false;\r\n        this._changes = {};\r\n\r\n        if (this.isButton()) {\r\n            const button = nativeController.buttons[this._buttonIndex];\r\n            // defensive, in case a profile was forced\r\n            if (!button) {\r\n                return;\r\n            }\r\n            if (this._currentValue !== button.value) {\r\n                this.changes.value = {\r\n                    current: button.value,\r\n                    previous: this._currentValue,\r\n                };\r\n                buttonUpdated = true;\r\n                this._currentValue = button.value;\r\n            }\r\n            if (this._touched !== button.touched) {\r\n                this.changes.touched = {\r\n                    current: button.touched,\r\n                    previous: this._touched,\r\n                };\r\n                buttonUpdated = true;\r\n                this._touched = button.touched;\r\n            }\r\n            if (this._pressed !== button.pressed) {\r\n                this.changes.pressed = {\r\n                    current: button.pressed,\r\n                    previous: this._pressed,\r\n                };\r\n                buttonUpdated = true;\r\n                this._pressed = button.pressed;\r\n            }\r\n        }\r\n\r\n        if (this.isAxes()) {\r\n            if (this._axes.x !== nativeController.axes[this._axesIndices[0]]) {\r\n                this.changes.axes = {\r\n                    current: {\r\n                        x: nativeController.axes[this._axesIndices[0]],\r\n                        y: this._axes.y,\r\n                    },\r\n                    previous: {\r\n                        x: this._axes.x,\r\n                        y: this._axes.y,\r\n                    },\r\n                };\r\n                this._axes.x = nativeController.axes[this._axesIndices[0]];\r\n                axesUpdate = true;\r\n            }\r\n\r\n            if (this._axes.y !== nativeController.axes[this._axesIndices[1]]) {\r\n                if (this.changes.axes) {\r\n                    this.changes.axes.current.y = nativeController.axes[this._axesIndices[1]];\r\n                } else {\r\n                    this.changes.axes = {\r\n                        current: {\r\n                            x: this._axes.x,\r\n                            y: nativeController.axes[this._axesIndices[1]],\r\n                        },\r\n                        previous: {\r\n                            x: this._axes.x,\r\n                            y: this._axes.y,\r\n                        },\r\n                    };\r\n                }\r\n                this._axes.y = nativeController.axes[this._axesIndices[1]];\r\n                axesUpdate = true;\r\n            }\r\n        }\r\n\r\n        if (buttonUpdated) {\r\n            this._hasChanges = true;\r\n            this.onButtonStateChangedObservable.notifyObservers(this);\r\n        }\r\n        if (axesUpdate) {\r\n            this._hasChanges = true;\r\n            this.onAxisValueChangedObservable.notifyObservers(this._axes);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}