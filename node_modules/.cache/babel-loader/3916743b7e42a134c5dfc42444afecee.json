{"ast":null,"code":"import { Engine } from \"../engine\";\n/**\r\n * Class used to define an additional view for the engine\r\n * @see https://doc.babylonjs.com/how_to/multi_canvases\r\n */\n\nvar EngineView =\n/** @class */\nfunction () {\n  function EngineView() {}\n\n  return EngineView;\n}();\n\nexport { EngineView };\n\nEngine.prototype.getInputElement = function () {\n  return this.inputElement || this.getRenderingCanvas();\n};\n\nEngine.prototype.registerView = function (canvas, camera) {\n  var _this = this;\n\n  if (!this.views) {\n    this.views = [];\n  }\n\n  for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n    var view = _a[_i];\n\n    if (view.target === canvas) {\n      return view;\n    }\n  }\n\n  var masterCanvas = this.getRenderingCanvas();\n\n  if (masterCanvas) {\n    canvas.width = masterCanvas.width;\n    canvas.height = masterCanvas.height;\n  }\n\n  var newView = {\n    target: canvas,\n    camera: camera\n  };\n  this.views.push(newView);\n\n  if (camera) {\n    camera.onDisposeObservable.add(function () {\n      _this.unRegisterView(canvas);\n    });\n  }\n\n  return newView;\n};\n\nEngine.prototype.unRegisterView = function (canvas) {\n  if (!this.views) {\n    return this;\n  }\n\n  for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n    var view = _a[_i];\n\n    if (view.target === canvas) {\n      var index = this.views.indexOf(view);\n\n      if (index !== -1) {\n        this.views.splice(index, 1);\n      }\n\n      break;\n    }\n  }\n\n  return this;\n};\n\nEngine.prototype._renderViews = function () {\n  if (!this.views) {\n    return false;\n  }\n\n  var parent = this.getRenderingCanvas();\n\n  if (!parent) {\n    return false;\n  }\n\n  for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n    var view = _a[_i];\n    var canvas = view.target;\n    var context = canvas.getContext(\"2d\");\n\n    if (!context) {\n      continue;\n    }\n\n    var camera = view.camera;\n    var previewCamera = null;\n    var scene = null;\n\n    if (camera) {\n      scene = camera.getScene();\n\n      if (scene.activeCameras && scene.activeCameras.length) {\n        continue;\n      }\n\n      this.activeView = view;\n      previewCamera = scene.activeCamera;\n      scene.activeCamera = camera;\n    } // Set sizes\n\n\n    var dimsChanged = canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight;\n\n    if (canvas.clientWidth && canvas.clientHeight && dimsChanged) {\n      canvas.width = canvas.clientWidth;\n      canvas.height = canvas.clientHeight;\n      parent.width = canvas.clientWidth;\n      parent.height = canvas.clientHeight;\n      this.resize();\n    }\n\n    if (!parent.width || !parent.height) {\n      return false;\n    } // Render the frame\n\n\n    this._renderFrame(); // Copy to target\n\n\n    context.drawImage(parent, 0, 0); // Restore\n\n    if (previewCamera && scene) {\n      scene.activeCamera = previewCamera;\n    }\n  }\n\n  this.activeView = null;\n  return true;\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/Extensions/engine.views.ts"],"names":[],"mappings":"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","sourcesContent":["import { Engine } from \"../engine\";\r\nimport { Camera } from '../../Cameras/camera';\r\nimport { Nullable } from '../../types';\r\nimport { Scene } from '../../scene';\r\n\r\n/**\r\n * Class used to define an additional view for the engine\r\n * @see https://doc.babylonjs.com/how_to/multi_canvases\r\n */\r\nexport class EngineView {\r\n    /** Defines the canvas where to render the view */\r\n    target: HTMLCanvasElement;\r\n    /** Defines an optional camera used to render the view (will use active camera else) */\r\n    camera?: Camera;\r\n}\r\n\r\ndeclare module \"../../Engines/engine\" {\r\n    export interface Engine {\r\n\r\n        /**\r\n         * Gets or sets the  HTML element to use for attaching events\r\n         */\r\n        inputElement: Nullable<HTMLElement>;\r\n\r\n        /**\r\n         * Gets the current engine view\r\n         * @see https://doc.babylonjs.com/how_to/multi_canvases\r\n         */\r\n        activeView: Nullable<EngineView>;\r\n\r\n        /** Gets or sets the list of views */\r\n        views: EngineView[];\r\n\r\n        /**\r\n         * Register a new child canvas\r\n         * @param canvas defines the canvas to register\r\n         * @param camera defines an optional camera to use with this canvas (it will overwrite the scene.camera for this view)\r\n         * @returns the associated view\r\n         */\r\n        registerView(canvas: HTMLCanvasElement, camera?: Camera): EngineView;\r\n\r\n        /**\r\n         * Remove a registered child canvas\r\n         * @param canvas defines the canvas to remove\r\n         * @returns the current engine\r\n         */\r\n        unRegisterView(canvas: HTMLCanvasElement): Engine;\r\n    }\r\n}\r\n\r\nEngine.prototype.getInputElement = function(): Nullable<HTMLElement> {\r\n    return this.inputElement || this.getRenderingCanvas();\r\n};\r\n\r\nEngine.prototype.registerView = function(canvas: HTMLCanvasElement, camera?: Camera): EngineView {\r\n    if (!this.views) {\r\n        this.views = [];\r\n    }\r\n\r\n    for (var view of this.views) {\r\n        if (view.target === canvas) {\r\n            return view;\r\n        }\r\n    }\r\n\r\n    let masterCanvas = this.getRenderingCanvas();\r\n    if (masterCanvas) {\r\n        canvas.width = masterCanvas.width;\r\n        canvas.height = masterCanvas.height;\r\n    }\r\n\r\n    let newView = {target: canvas, camera: camera};\r\n    this.views.push(newView);\r\n\r\n    if (camera) {\r\n        camera.onDisposeObservable.add(() => {\r\n            this.unRegisterView(canvas);\r\n        });\r\n    }\r\n\r\n    return newView;\r\n};\r\n\r\nEngine.prototype.unRegisterView = function(canvas: HTMLCanvasElement): Engine {\r\n    if (!this.views) {\r\n        return this;\r\n    }\r\n\r\n    for (var view of this.views) {\r\n        if (view.target === canvas) {\r\n            let index = this.views.indexOf(view);\r\n\r\n            if (index !== -1) {\r\n                this.views.splice(index, 1);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nEngine.prototype._renderViews = function() {\r\n    if (!this.views) {\r\n        return false;\r\n    }\r\n\r\n    let parent = this.getRenderingCanvas();\r\n\r\n    if (!parent) {\r\n        return false;\r\n    }\r\n\r\n    for (var view of this.views) {\r\n        let canvas = view.target;\r\n        let context = canvas.getContext(\"2d\");\r\n        if (!context) {\r\n            continue;\r\n        }\r\n        let camera = view.camera;\r\n        let previewCamera: Nullable<Camera> = null;\r\n        let scene: Nullable<Scene> = null;\r\n        if (camera) {\r\n            scene = camera.getScene();\r\n\r\n            if (scene.activeCameras && scene.activeCameras.length) {\r\n                continue;\r\n            }\r\n\r\n            this.activeView = view;\r\n\r\n            previewCamera = scene.activeCamera;\r\n            scene.activeCamera = camera;\r\n        }\r\n\r\n        // Set sizes\r\n        const dimsChanged =\r\n            canvas.width !== canvas.clientWidth ||\r\n            canvas.height !== canvas.clientHeight;\r\n        if (canvas.clientWidth && canvas.clientHeight && dimsChanged) {\r\n            canvas.width = canvas.clientWidth;\r\n            canvas.height = canvas.clientHeight;\r\n            parent.width = canvas.clientWidth;\r\n            parent.height = canvas.clientHeight;\r\n            this.resize();\r\n        }\r\n\r\n        if (!parent.width || !parent.height) {\r\n            return false;\r\n        }\r\n\r\n        // Render the frame\r\n        this._renderFrame();\r\n\r\n        // Copy to target\r\n        context.drawImage(parent, 0, 0);\r\n\r\n        // Restore\r\n        if (previewCamera && scene) {\r\n            scene.activeCamera = previewCamera;\r\n        }\r\n    }\r\n\r\n    this.activeView = null;\r\n\r\n    return true;\r\n};\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}