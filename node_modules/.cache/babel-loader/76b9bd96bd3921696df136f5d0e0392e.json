{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\nimport { Scalar } from '../../Maths/math.scalar';\nimport { Tools } from '../../Misc/tools';\n/**\r\n * Manage the mouse wheel inputs to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar ArcRotateCameraMouseWheelInput =\n/** @class */\nfunction () {\n  function ArcRotateCameraMouseWheelInput() {\n    /**\r\n     * Gets or Set the mouse wheel precision or how fast is the camera zooming.\r\n     */\n    this.wheelPrecision = 3.0;\n    /**\r\n     * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when wheel is used.\r\n     */\n\n    this.wheelDeltaPercentage = 0;\n  }\n\n  ArcRotateCameraMouseWheelInput.prototype.computeDeltaFromMouseWheelLegacyEvent = function (mouseWheelDelta, radius) {\n    var delta = 0;\n    var wheelDelta = mouseWheelDelta * 0.01 * this.wheelDeltaPercentage * radius;\n\n    if (mouseWheelDelta > 0) {\n      delta = wheelDelta / (1.0 + this.wheelDeltaPercentage);\n    } else {\n      delta = wheelDelta * (1.0 + this.wheelDeltaPercentage);\n    }\n\n    return delta;\n  };\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  ArcRotateCameraMouseWheelInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this; // was there a second variable defined?\n\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    this._wheel = function (p, s) {\n      //sanity check - this should be a PointerWheel event.\n      if (p.type !== PointerEventTypes.POINTERWHEEL) {\n        return;\n      }\n\n      var event = p.event;\n      var delta = 0;\n      var mouseWheelLegacyEvent = event;\n      var wheelDelta = 0;\n\n      if (mouseWheelLegacyEvent.wheelDelta) {\n        wheelDelta = mouseWheelLegacyEvent.wheelDelta;\n      } else {\n        wheelDelta = -(event.deltaY || event.detail) * 60;\n      }\n\n      if (_this.wheelDeltaPercentage) {\n        delta = _this.computeDeltaFromMouseWheelLegacyEvent(wheelDelta, _this.camera.radius); // If zooming in, estimate the target radius and use that to compute the delta for inertia\n        // this will stop multiple scroll events zooming in from adding too much inertia\n\n        if (delta > 0) {\n          var estimatedTargetRadius = _this.camera.radius;\n          var targetInertia = _this.camera.inertialRadiusOffset + delta;\n\n          for (var i = 0; i < 20 && Math.abs(targetInertia) > 0.001; i++) {\n            estimatedTargetRadius -= targetInertia;\n            targetInertia *= _this.camera.inertia;\n          }\n\n          estimatedTargetRadius = Scalar.Clamp(estimatedTargetRadius, 0, Number.MAX_VALUE);\n          delta = _this.computeDeltaFromMouseWheelLegacyEvent(wheelDelta, estimatedTargetRadius);\n        }\n      } else {\n        delta = wheelDelta / (_this.wheelPrecision * 40);\n      }\n\n      if (delta) {\n        _this.camera.inertialRadiusOffset += delta;\n      }\n\n      if (event.preventDefault) {\n        if (!noPreventDefault) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  ArcRotateCameraMouseWheelInput.prototype.detachControl = function (ignored) {\n    if (this._observer) {\n      this.camera.getScene().onPointerObservable.remove(this._observer);\n      this._observer = null;\n      this._wheel = null;\n    }\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  ArcRotateCameraMouseWheelInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraMouseWheelInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  ArcRotateCameraMouseWheelInput.prototype.getSimpleName = function () {\n    return \"mousewheel\";\n  };\n\n  __decorate([serialize()], ArcRotateCameraMouseWheelInput.prototype, \"wheelPrecision\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraMouseWheelInput.prototype, \"wheelDeltaPercentage\", void 0);\n\n  return ArcRotateCameraMouseWheelInput;\n}();\n\nexport { ArcRotateCameraMouseWheelInput };\nCameraInputTypes[\"ArcRotateCameraMouseWheelInput\"] = ArcRotateCameraMouseWheelInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/arcRotateCameraMouseWheelInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { EventState, Observer } from \"../../Misc/observable\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { PointerInfo, PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Scalar } from '../../Maths/math.scalar';\r\nimport { Tools } from '../../Misc/tools';\r\n\r\n/**\r\n * Manage the mouse wheel inputs to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class ArcRotateCameraMouseWheelInput implements ICameraInput<ArcRotateCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: ArcRotateCamera;\r\n\r\n    /**\r\n     * Gets or Set the mouse wheel precision or how fast is the camera zooming.\r\n     */\r\n    @serialize()\r\n    public wheelPrecision = 3.0;\r\n\r\n    /**\r\n     * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when wheel is used.\r\n     */\r\n    @serialize()\r\n    public wheelDeltaPercentage = 0;\r\n\r\n    private _wheel: Nullable<(p: PointerInfo, s: EventState) => void>;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n\r\n    private computeDeltaFromMouseWheelLegacyEvent(mouseWheelDelta: number, radius: number) {\r\n        var delta = 0;\r\n        var wheelDelta = (mouseWheelDelta * 0.01 * this.wheelDeltaPercentage) * radius;\r\n        if (mouseWheelDelta > 0) {\r\n            delta = wheelDelta / (1.0 + this.wheelDeltaPercentage);\r\n        } else {\r\n            delta = wheelDelta * (1.0 + this.wheelDeltaPercentage);\r\n        }\r\n        return delta;\r\n    }\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // was there a second variable defined?\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        this._wheel = (p, s) => {\r\n            //sanity check - this should be a PointerWheel event.\r\n            if (p.type !== PointerEventTypes.POINTERWHEEL) { return; }\r\n            var event = <MouseWheelEvent>p.event;\r\n            var delta = 0;\r\n\r\n            let mouseWheelLegacyEvent = event as any;\r\n            let wheelDelta = 0;\r\n\r\n            if (mouseWheelLegacyEvent.wheelDelta) {\r\n                wheelDelta = mouseWheelLegacyEvent.wheelDelta;\r\n            } else {\r\n                wheelDelta = -(event.deltaY || event.detail) * 60;\r\n            }\r\n\r\n            if (this.wheelDeltaPercentage) {\r\n                delta = this.computeDeltaFromMouseWheelLegacyEvent(wheelDelta, this.camera.radius);\r\n\r\n                // If zooming in, estimate the target radius and use that to compute the delta for inertia\r\n                // this will stop multiple scroll events zooming in from adding too much inertia\r\n                if (delta > 0) {\r\n                    var estimatedTargetRadius = this.camera.radius;\r\n                    var targetInertia = this.camera.inertialRadiusOffset + delta;\r\n                    for (var i = 0; i < 20 && Math.abs(targetInertia) > 0.001; i++) {\r\n                        estimatedTargetRadius -= targetInertia;\r\n                        targetInertia *= this.camera.inertia;\r\n                    }\r\n                    estimatedTargetRadius = Scalar.Clamp(estimatedTargetRadius, 0, Number.MAX_VALUE);\r\n                    delta = this.computeDeltaFromMouseWheelLegacyEvent(wheelDelta, estimatedTargetRadius);\r\n                }\r\n            } else {\r\n                delta = wheelDelta / (this.wheelPrecision * 40);\r\n            }\r\n\r\n            if (delta) {\r\n                this.camera.inertialRadiusOffset += delta;\r\n            }\r\n\r\n            if (event.preventDefault) {\r\n                if (!noPreventDefault) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        if (this._observer) {\r\n            this.camera.getScene().onPointerObservable.remove(this._observer);\r\n            this._observer = null;\r\n            this._wheel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mousewheel\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"ArcRotateCameraMouseWheelInput\"] = ArcRotateCameraMouseWheelInput;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}