{"ast":null,"code":"/** @hidden */\nvar ShaderDefineExpression =\n/** @class */\nfunction () {\n  function ShaderDefineExpression() {}\n\n  ShaderDefineExpression.prototype.isTrue = function (preprocessors) {\n    return true;\n  };\n\n  ShaderDefineExpression.postfixToInfix = function (postfix) {\n    var stack = [];\n\n    for (var _i = 0, postfix_1 = postfix; _i < postfix_1.length; _i++) {\n      var c = postfix_1[_i];\n\n      if (ShaderDefineExpression._OperatorPriority[c] === undefined) {\n        stack.push(c);\n      } else {\n        var v1 = stack[stack.length - 1],\n            v2 = stack[stack.length - 2];\n        stack.length -= 2;\n        stack.push(\"(\" + v2 + c + v1 + \")\");\n      }\n    }\n\n    return stack[stack.length - 1];\n  };\n\n  ShaderDefineExpression.infixToPostfix = function (infix) {\n    var result = [];\n    var stackIdx = -1;\n\n    var pushOperand = function () {\n      operand = operand.trim();\n\n      if (operand !== '') {\n        result.push(operand);\n        operand = '';\n      }\n    };\n\n    var push = function (s) {\n      if (stackIdx < ShaderDefineExpression._Stack.length - 1) {\n        ShaderDefineExpression._Stack[++stackIdx] = s;\n      }\n    };\n\n    var peek = function () {\n      return ShaderDefineExpression._Stack[stackIdx];\n    };\n\n    var pop = function () {\n      return stackIdx === -1 ? '!!INVALID EXPRESSION!!' : ShaderDefineExpression._Stack[stackIdx--];\n    };\n\n    var idx = 0,\n        operand = '';\n\n    while (idx < infix.length) {\n      var c = infix.charAt(idx),\n          token = idx < infix.length - 1 ? infix.substr(idx, 2) : '';\n\n      if (c === '(') {\n        operand = '';\n        push(c);\n      } else if (c === ')') {\n        pushOperand();\n\n        while (stackIdx !== -1 && peek() !== '(') {\n          result.push(pop());\n        }\n\n        pop();\n      } else if (ShaderDefineExpression._OperatorPriority[token] > 1) {\n        pushOperand();\n\n        while (stackIdx !== -1 && ShaderDefineExpression._OperatorPriority[peek()] >= ShaderDefineExpression._OperatorPriority[token]) {\n          result.push(pop());\n        }\n\n        push(token);\n        idx++;\n      } else {\n        operand += c;\n      }\n\n      idx++;\n    }\n\n    pushOperand();\n\n    while (stackIdx !== -1) {\n      if (peek() === '(') {\n        pop();\n      } else {\n        result.push(pop());\n      }\n    }\n\n    return result;\n  };\n\n  ShaderDefineExpression._OperatorPriority = {\n    \")\": 0,\n    \"(\": 1,\n    \"||\": 2,\n    \"&&\": 3\n  };\n  ShaderDefineExpression._Stack = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''];\n  return ShaderDefineExpression;\n}();\n\nexport { ShaderDefineExpression };","map":{"version":3,"sources":["../../../../../sourceES6/core/Engines/Processors/Expressions/shaderDefineExpression.ts"],"names":[],"mappings":"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","sourcesContent":["/** @hidden */\r\nexport class ShaderDefineExpression {\r\n    public isTrue(preprocessors: { [key: string]: string }): boolean {\r\n        return true;\r\n    }\r\n\r\n    private static _OperatorPriority: { [name: string]: number } = {\r\n        \")\": 0,\r\n        \"(\": 1,\r\n        \"||\": 2,\r\n        \"&&\": 3,\r\n    };\r\n\r\n    private static _Stack = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''];\r\n\r\n    public static postfixToInfix(postfix: string[]): string {\r\n        const stack: string[] = [];\r\n\r\n        for (let c of postfix) {\r\n            if (ShaderDefineExpression._OperatorPriority[c] === undefined) {\r\n                stack.push(c);\r\n            } else {\r\n                const v1 = stack[stack.length - 1],\r\n                      v2 = stack[stack.length - 2];\r\n\r\n                stack.length -= 2;\r\n                stack.push(`(${v2}${c}${v1})`);\r\n            }\r\n        }\r\n\r\n        return stack[stack.length - 1];\r\n    }\r\n\r\n    public static infixToPostfix(infix: string): string[] {\r\n        const result: string[] = [];\r\n\r\n        let stackIdx = -1;\r\n\r\n        const pushOperand = () => {\r\n            operand = operand.trim();\r\n            if (operand !== '') {\r\n                result.push(operand);\r\n                operand = '';\r\n            }\r\n        };\r\n\r\n        const push = (s: string) => {\r\n            if (stackIdx < ShaderDefineExpression._Stack.length - 1) {\r\n                ShaderDefineExpression._Stack[++stackIdx] = s;\r\n            }\r\n        };\r\n\r\n        const peek = () => ShaderDefineExpression._Stack[stackIdx];\r\n\r\n        const pop = () => stackIdx === -1 ? '!!INVALID EXPRESSION!!' : ShaderDefineExpression._Stack[stackIdx--];\r\n\r\n        let idx = 0,\r\n            operand = '';\r\n\r\n        while (idx < infix.length) {\r\n            const c = infix.charAt(idx),\r\n                  token = idx < infix.length - 1 ? infix.substr(idx, 2) : '';\r\n\r\n            if (c === '(') {\r\n                operand = '';\r\n                push(c);\r\n            } else if (c === ')') {\r\n                pushOperand();\r\n                while (stackIdx !== -1 && peek() !== '(') {\r\n                    result.push(pop());\r\n                }\r\n                pop();\r\n            } else if (ShaderDefineExpression._OperatorPriority[token] > 1) {\r\n                pushOperand();\r\n                while (stackIdx !== -1 && ShaderDefineExpression._OperatorPriority[peek()] >= ShaderDefineExpression._OperatorPriority[token]) {\r\n                    result.push(pop());\r\n                }\r\n                push(token);\r\n                idx++;\r\n            } else {\r\n                operand += c;\r\n            }\r\n            idx++;\r\n        }\r\n\r\n        pushOperand();\r\n\r\n        while (stackIdx !== -1) {\r\n            if (peek() === '(') {\r\n                pop();\r\n            } else {\r\n                result.push(pop());\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}