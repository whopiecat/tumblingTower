{"ast":null,"code":"/**\r\n * Class used to host copy specific utilities\r\n */\nvar CopyTools =\n/** @class */\nfunction () {\n  function CopyTools() {}\n  /**\r\n   * Reads the pixels stored in the webgl texture and returns them as a base64 string\r\n   * @param texture defines the texture to read pixels from\r\n   * @param faceIndex defines the face of the texture to read (in case of cube texture)\r\n   * @param level defines the LOD level of the texture to read (in case of Mip Maps)\r\n   * @returns The base64 encoded string or null\r\n   */\n\n\n  CopyTools.GenerateBase64StringFromTexture = function (texture, faceIndex, level) {\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    if (level === void 0) {\n      level = 0;\n    }\n\n    var internalTexture = texture.getInternalTexture();\n\n    if (!internalTexture) {\n      return null;\n    }\n\n    var pixels = texture.readPixels(faceIndex, level);\n\n    if (!pixels) {\n      return null;\n    }\n\n    var size = texture.getSize();\n    var width = size.width;\n    var height = size.height;\n\n    if (pixels instanceof Float32Array) {\n      var len = pixels.byteLength / pixels.BYTES_PER_ELEMENT;\n      var npixels = new Uint8Array(len);\n\n      while (--len >= 0) {\n        var val = pixels[len];\n\n        if (val < 0) {\n          val = 0;\n        } else if (val > 1) {\n          val = 1;\n        }\n\n        npixels[len] = val * 255;\n      }\n\n      pixels = npixels;\n    }\n\n    var canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    var ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n      return null;\n    }\n\n    var imageData = ctx.createImageData(width, height);\n    var castData = imageData.data;\n    castData.set(pixels);\n    ctx.putImageData(imageData, 0, 0);\n\n    if (internalTexture.invertY) {\n      var canvas2 = document.createElement('canvas');\n      canvas2.width = width;\n      canvas2.height = height;\n      var ctx2 = canvas2.getContext('2d');\n\n      if (!ctx2) {\n        return null;\n      }\n\n      ctx2.translate(0, height);\n      ctx2.scale(1, -1);\n      ctx2.drawImage(canvas, 0, 0);\n      return canvas2.toDataURL('image/png');\n    }\n\n    return canvas.toDataURL('image/png');\n  };\n\n  return CopyTools;\n}();\n\nexport { CopyTools };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/copyTools.ts"],"names":[],"mappings":"AAIA;;;AAGA,IAAA,SAAA;AAAA;AAAA,YAAA;AAAA,WAAA,SAAA,GAAA,CA0EC;AAzEG;;;;;;;;;AAOc,EAAA,SAAA,CAAA,+BAAA,GAAd,UAA8C,OAA9C,EAAoE,SAApE,EAAmF,KAAnF,EAA4F;AAAxB,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAAA,CAAA;AAAa;;AAAE,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,CAAA;AAAS;;AAExF,QAAI,eAAe,GAAG,OAAO,CAAC,kBAAR,EAAtB;;AACA,QAAI,CAAC,eAAL,EAAsB;AAClB,aAAO,IAAP;AACH;;AAED,QAAI,MAAM,GAAG,OAAO,CAAC,UAAR,CAAmB,SAAnB,EAA8B,KAA9B,CAAb;;AACA,QAAI,CAAC,MAAL,EAAa;AACT,aAAO,IAAP;AACH;;AAED,QAAI,IAAI,GAAG,OAAO,CAAC,OAAR,EAAX;AACA,QAAI,KAAK,GAAG,IAAI,CAAC,KAAjB;AACA,QAAI,MAAM,GAAG,IAAI,CAAC,MAAlB;;AAEA,QAAI,MAAM,YAAY,YAAtB,EAAoC;AAChC,UAAI,GAAG,GAAG,MAAM,CAAC,UAAP,GAAoB,MAAM,CAAC,iBAArC;AACA,UAAI,OAAO,GAAG,IAAI,UAAJ,CAAe,GAAf,CAAd;;AAEA,aAAO,EAAE,GAAF,IAAS,CAAhB,EAAmB;AACf,YAAI,GAAG,GAAG,MAAM,CAAC,GAAD,CAAhB;;AACA,YAAI,GAAG,GAAG,CAAV,EAAa;AACT,UAAA,GAAG,GAAG,CAAN;AACH,SAFD,MAEO,IAAI,GAAG,GAAG,CAAV,EAAa;AAChB,UAAA,GAAG,GAAG,CAAN;AACH;;AACD,QAAA,OAAO,CAAC,GAAD,CAAP,GAAe,GAAG,GAAG,GAArB;AACH;;AAED,MAAA,MAAM,GAAG,OAAT;AACH;;AAED,QAAI,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAb;AACA,IAAA,MAAM,CAAC,KAAP,GAAe,KAAf;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,MAAhB;AAEA,QAAI,GAAG,GAAG,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAV;;AACA,QAAI,CAAC,GAAL,EAAU;AACN,aAAO,IAAP;AACH;;AAED,QAAI,SAAS,GAAG,GAAG,CAAC,eAAJ,CAAoB,KAApB,EAA2B,MAA3B,CAAhB;AACA,QAAI,QAAQ,GAAQ,SAAS,CAAC,IAA9B;AACA,IAAA,QAAQ,CAAC,GAAT,CAAa,MAAb;AACA,IAAA,GAAG,CAAC,YAAJ,CAAiB,SAAjB,EAA4B,CAA5B,EAA+B,CAA/B;;AAEA,QAAI,eAAe,CAAC,OAApB,EAA6B;AACzB,UAAI,OAAO,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAd;AACA,MAAA,OAAO,CAAC,KAAR,GAAgB,KAAhB;AACA,MAAA,OAAO,CAAC,MAAR,GAAiB,MAAjB;AAEA,UAAI,IAAI,GAAG,OAAO,CAAC,UAAR,CAAmB,IAAnB,CAAX;;AACA,UAAI,CAAC,IAAL,EAAW;AACP,eAAO,IAAP;AACH;;AAED,MAAA,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,MAAlB;AACA,MAAA,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf;AACA,MAAA,IAAI,CAAC,SAAL,CAAe,MAAf,EAAuB,CAAvB,EAA0B,CAA1B;AAEA,aAAO,OAAO,CAAC,SAAR,CAAkB,WAAlB,CAAP;AACH;;AAED,WAAO,MAAM,CAAC,SAAP,CAAiB,WAAjB,CAAP;AACH,GAjEa;;AAkElB,SAAA,SAAA;AAAC,CA1ED,EAAA","sourcesContent":["import { Nullable } from \"../types\";\n\ndeclare type BaseTexture = import(\"../Materials/Textures/baseTexture\").BaseTexture;\n\n/**\n * Class used to host copy specific utilities\n */\nexport class CopyTools {\n    /**\n     * Reads the pixels stored in the webgl texture and returns them as a base64 string\n     * @param texture defines the texture to read pixels from\n     * @param faceIndex defines the face of the texture to read (in case of cube texture)\n     * @param level defines the LOD level of the texture to read (in case of Mip Maps)\n     * @returns The base64 encoded string or null\n     */\n    public static GenerateBase64StringFromTexture(texture: BaseTexture, faceIndex = 0, level = 0): Nullable<string> {\n\n        var internalTexture = texture.getInternalTexture();\n        if (!internalTexture) {\n            return null;\n        }\n\n        var pixels = texture.readPixels(faceIndex, level);\n        if (!pixels) {\n            return null;\n        }\n\n        var size = texture.getSize();\n        var width = size.width;\n        var height = size.height;\n\n        if (pixels instanceof Float32Array) {\n            var len = pixels.byteLength / pixels.BYTES_PER_ELEMENT;\n            var npixels = new Uint8Array(len);\n\n            while (--len >= 0) {\n                var val = pixels[len];\n                if (val < 0) {\n                    val = 0;\n                } else if (val > 1) {\n                    val = 1;\n                }\n                npixels[len] = val * 255;\n            }\n\n            pixels = npixels;\n        }\n\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n\n        var ctx = canvas.getContext('2d');\n        if (!ctx) {\n            return null;\n        }\n\n        var imageData = ctx.createImageData(width, height);\n        var castData = <any>imageData.data;\n        castData.set(pixels);\n        ctx.putImageData(imageData, 0, 0);\n\n        if (internalTexture.invertY) {\n            var canvas2 = document.createElement('canvas');\n            canvas2.width = width;\n            canvas2.height = height;\n\n            var ctx2 = canvas2.getContext('2d');\n            if (!ctx2) {\n                return null;\n            }\n\n            ctx2.translate(0, height);\n            ctx2.scale(1, -1);\n            ctx2.drawImage(canvas, 0, 0);\n\n            return canvas2.toDataURL('image/png');\n        }\n\n        return canvas.toDataURL('image/png');\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}