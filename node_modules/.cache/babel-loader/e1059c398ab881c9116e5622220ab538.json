{"ast":null,"code":"import { Engine } from \"../../../Engines/engine\";\nimport { BasisTools } from \"../../../Misc/basis\";\nimport { Tools } from '../../../Misc/tools';\nimport { StringTools } from '../../../Misc/stringTools';\n/**\r\n * Loader for .basis file format\r\n */\n\nvar _BasisTextureLoader =\n/** @class */\nfunction () {\n  function _BasisTextureLoader() {\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\n    this.supportCascades = false;\n  }\n  /**\r\n   * This returns if the loader support the current file information.\r\n   * @param extension defines the file extension of the file being loaded\r\n   * @returns true if the loader can load the specified file\r\n   */\n\n\n  _BasisTextureLoader.prototype.canLoad = function (extension) {\n    return StringTools.EndsWith(extension, \".basis\");\n  };\n  /**\r\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param createPolynomials will be true if polynomials have been requested\r\n   * @param onLoad defines the callback to trigger once the texture is ready\r\n   * @param onError defines the callback to trigger in case of error\r\n   */\n\n\n  _BasisTextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {\n    if (Array.isArray(data)) {\n      return;\n    }\n\n    var caps = texture.getEngine().getCaps();\n    var transcodeConfig = {\n      supportedCompressionFormats: {\n        etc1: caps.etc1 ? true : false,\n        s3tc: caps.s3tc ? true : false,\n        pvrtc: caps.pvrtc ? true : false,\n        etc2: caps.etc2 ? true : false\n      }\n    };\n    BasisTools.TranscodeAsync(data, transcodeConfig).then(function (result) {\n      var hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n      BasisTools.LoadTextureFromTranscodeResult(texture, result);\n\n      texture.getEngine()._setCubeMapTextureParams(texture, hasMipmap);\n\n      texture.isReady = true;\n      texture.onLoadedObservable.notifyObservers(texture);\n      texture.onLoadedObservable.clear();\n\n      if (onLoad) {\n        onLoad();\n      }\n    }).catch(function (err) {\n      Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\n      texture.isReady = true;\n    });\n  };\n  /**\r\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param callback defines the method to call once ready to upload\r\n   */\n\n\n  _BasisTextureLoader.prototype.loadData = function (data, texture, callback) {\n    var caps = texture.getEngine().getCaps();\n    var transcodeConfig = {\n      supportedCompressionFormats: {\n        etc1: caps.etc1 ? true : false,\n        s3tc: caps.s3tc ? true : false,\n        pvrtc: caps.pvrtc ? true : false,\n        etc2: caps.etc2 ? true : false\n      }\n    };\n    BasisTools.TranscodeAsync(data, transcodeConfig).then(function (result) {\n      var rootImage = result.fileInfo.images[0].levels[0];\n      var hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n      callback(rootImage.width, rootImage.height, hasMipmap, result.format !== -1, function () {\n        BasisTools.LoadTextureFromTranscodeResult(texture, result);\n      });\n    }).catch(function (err) {\n      Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\n      callback(0, 0, false, false, function () {});\n    });\n  };\n\n  return _BasisTextureLoader;\n}();\n\nexport { _BasisTextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.push(new _BasisTextureLoader());","map":{"version":3,"sources":["../../../../../sourceES6/core/Materials/Textures/Loaders/basisTextureLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../../types\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { BasisTools } from \"../../../Misc/basis\";\r\nimport { Tools } from '../../../Misc/tools';\r\nimport { StringTools } from '../../../Misc/stringTools';\r\n\r\n/**\r\n * Loader for .basis file format\r\n */\r\nexport class _BasisTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string): boolean {\r\n        return StringTools.EndsWith(extension, \".basis\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    public loadCubeData(data: ArrayBufferView | ArrayBufferView[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>, onError: Nullable<(message?: string, exception?: any) => void>): void {\r\n        if (Array.isArray(data)) {\r\n            return;\r\n        }\r\n        var caps = texture.getEngine().getCaps();\r\n        var transcodeConfig = {\r\n            supportedCompressionFormats: {\r\n                etc1: caps.etc1 ? true : false,\r\n                s3tc: caps.s3tc ? true : false,\r\n                pvrtc: caps.pvrtc ? true : false,\r\n                etc2: caps.etc2 ? true : false\r\n            }\r\n        };\r\n        BasisTools.TranscodeAsync(data, transcodeConfig).then((result) => {\r\n            var hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\r\n            BasisTools.LoadTextureFromTranscodeResult(texture, result);\r\n            (texture.getEngine() as Engine)._setCubeMapTextureParams(texture, hasMipmap);\r\n            texture.isReady = true;\r\n            texture.onLoadedObservable.notifyObservers(texture);\r\n            texture.onLoadedObservable.clear();\r\n            if (onLoad) {\r\n              onLoad();\r\n            }\r\n        }).catch((err) => {\r\n            Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\r\n            texture.isReady = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(data: ArrayBufferView, texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void): void {\r\n        var caps = texture.getEngine().getCaps();\r\n        var transcodeConfig = {\r\n            supportedCompressionFormats: {\r\n                etc1: caps.etc1 ? true : false,\r\n                s3tc: caps.s3tc ? true : false,\r\n                pvrtc: caps.pvrtc ? true : false,\r\n                etc2: caps.etc2 ? true : false\r\n            }\r\n        };\r\n        BasisTools.TranscodeAsync(data, transcodeConfig).then((result) => {\r\n            var rootImage = result.fileInfo.images[0].levels[0];\r\n            var hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\r\n            callback(rootImage.width, rootImage.height, hasMipmap, result.format !== -1, () => {\r\n                BasisTools.LoadTextureFromTranscodeResult(texture, result);\r\n            });\r\n        }).catch((err) => {\r\n            Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\r\n            callback(0, 0, false, false, () => {\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _BasisTextureLoader());\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}