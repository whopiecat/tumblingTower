{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"../../../Materials/Textures/texture\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\nimport \"../../../Shaders/chromaticAberration.fragment\";\nimport \"../../../Shaders/lensHighlights.fragment\";\nimport \"../../../Shaders/depthOfField.fragment\";\n/**\r\n * BABYLON.JS Chromatic Aberration GLSL Shader\r\n * Author: Olivier Guyot\r\n * Separates very slightly R, G and B colors on the edges of the screen\r\n * Inspired by Francois Tarlier & Martins Upitis\r\n */\n\nvar LensRenderingPipeline =\n/** @class */\nfunction (_super) {\n  __extends(LensRenderingPipeline, _super);\n  /**\r\n   * @constructor\r\n   *\r\n   * Effect parameters are as follow:\r\n   * {\r\n   *      chromatic_aberration: number;       // from 0 to x (1 for realism)\r\n   *      edge_blur: number;                  // from 0 to x (1 for realism)\r\n   *      distortion: number;                 // from 0 to x (1 for realism)\r\n   *      grain_amount: number;               // from 0 to 1\r\n   *      grain_texture: BABYLON.Texture;     // texture to use for grain effect; if unset, use random B&W noise\r\n   *      dof_focus_distance: number;         // depth-of-field: focus distance; unset to disable (disabled by default)\r\n   *      dof_aperture: number;               // depth-of-field: focus blur bias (default: 1)\r\n   *      dof_darken: number;                 // depth-of-field: darken that which is out of focus (from 0 to 1, disabled by default)\r\n   *      dof_pentagon: boolean;              // depth-of-field: makes a pentagon-like \"bokeh\" effect\r\n   *      dof_gain: number;                   // depth-of-field: highlights gain; unset to disable (disabled by default)\r\n   *      dof_threshold: number;              // depth-of-field: highlights threshold (default: 1)\r\n   *      blur_noise: boolean;                // add a little bit of noise to the blur (default: true)\r\n   * }\r\n   * Note: if an effect parameter is unset, effect is disabled\r\n   *\r\n   * @param name The rendering pipeline name\r\n   * @param parameters - An object containing all parameters (see above)\r\n   * @param scene The scene linked to this pipeline\r\n   * @param ratio The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\r\n   * @param cameras The array of cameras that the rendering pipeline will be attached to\r\n   */\n\n\n  function LensRenderingPipeline(name, parameters, scene, ratio, cameras) {\n    if (ratio === void 0) {\n      ratio = 1.0;\n    }\n\n    var _this = _super.call(this, scene.getEngine(), name) || this; // Lens effects can be of the following:\n    // - chromatic aberration (slight shift of RGB colors)\n    // - blur on the edge of the lens\n    // - lens distortion\n    // - depth-of-field blur & highlights enhancing\n    // - depth-of-field 'bokeh' effect (shapes appearing in blurred areas)\n    // - grain effect (noise or custom texture)\n    // Two additional texture samplers are needed:\n    // - depth map (for depth-of-field)\n    // - grain texture\n\n    /**\r\n     * @ignore\r\n     * The chromatic aberration PostProcess id in the pipeline\r\n     */\n\n\n    _this.LensChromaticAberrationEffect = \"LensChromaticAberrationEffect\";\n    /**\r\n     * @ignore\r\n     * The highlights enhancing PostProcess id in the pipeline\r\n     */\n\n    _this.HighlightsEnhancingEffect = \"HighlightsEnhancingEffect\";\n    /**\r\n     * @ignore\r\n    * The depth-of-field PostProcess id in the pipeline\r\n    */\n\n    _this.LensDepthOfFieldEffect = \"LensDepthOfFieldEffect\";\n    _this._pentagonBokehIsEnabled = false;\n    _this._scene = scene; // Fetch texture samplers\n\n    _this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\n\n    if (parameters.grain_texture) {\n      _this._grainTexture = parameters.grain_texture;\n    } else {\n      _this._createGrainTexture();\n    } // save parameters\n\n\n    _this._edgeBlur = parameters.edge_blur ? parameters.edge_blur : 0;\n    _this._grainAmount = parameters.grain_amount ? parameters.grain_amount : 0;\n    _this._chromaticAberration = parameters.chromatic_aberration ? parameters.chromatic_aberration : 0;\n    _this._distortion = parameters.distortion ? parameters.distortion : 0;\n    _this._highlightsGain = parameters.dof_gain !== undefined ? parameters.dof_gain : -1;\n    _this._highlightsThreshold = parameters.dof_threshold ? parameters.dof_threshold : 1;\n    _this._dofDistance = parameters.dof_focus_distance !== undefined ? parameters.dof_focus_distance : -1;\n    _this._dofAperture = parameters.dof_aperture ? parameters.dof_aperture : 1;\n    _this._dofDarken = parameters.dof_darken ? parameters.dof_darken : 0;\n    _this._dofPentagon = parameters.dof_pentagon !== undefined ? parameters.dof_pentagon : true;\n    _this._blurNoise = parameters.blur_noise !== undefined ? parameters.blur_noise : true; // Create effects\n\n    _this._createChromaticAberrationPostProcess(ratio);\n\n    _this._createHighlightsPostProcess(ratio);\n\n    _this._createDepthOfFieldPostProcess(ratio / 4); // Set up pipeline\n\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.LensChromaticAberrationEffect, function () {\n      return _this._chromaticAberrationPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.HighlightsEnhancingEffect, function () {\n      return _this._highlightsPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.LensDepthOfFieldEffect, function () {\n      return _this._depthOfFieldPostProcess;\n    }, true));\n\n    if (_this._highlightsGain === -1) {\n      _this._disableEffect(_this.HighlightsEnhancingEffect, null);\n    } // Finish\n\n\n    scene.postProcessRenderPipelineManager.addPipeline(_this);\n\n    if (cameras) {\n      scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n    }\n\n    return _this;\n  }\n  /**\r\n   * Get the class name\r\n   * @returns \"LensRenderingPipeline\"\r\n   */\n\n\n  LensRenderingPipeline.prototype.getClassName = function () {\n    return \"LensRenderingPipeline\";\n  };\n\n  Object.defineProperty(LensRenderingPipeline.prototype, \"scene\", {\n    // Properties\n\n    /**\r\n     * Gets associated scene\r\n     */\n    get: function () {\n      return this._scene;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"edgeBlur\", {\n    /**\r\n     * Gets or sets the edge blur\r\n     */\n    get: function () {\n      return this._edgeBlur;\n    },\n    set: function (value) {\n      this.setEdgeBlur(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"grainAmount\", {\n    /**\r\n     * Gets or sets the grain amount\r\n     */\n    get: function () {\n      return this._grainAmount;\n    },\n    set: function (value) {\n      this.setGrainAmount(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"chromaticAberration\", {\n    /**\r\n     * Gets or sets the chromatic aberration amount\r\n     */\n    get: function () {\n      return this._chromaticAberration;\n    },\n    set: function (value) {\n      this.setChromaticAberration(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"dofAperture\", {\n    /**\r\n     * Gets or sets the depth of field aperture\r\n     */\n    get: function () {\n      return this._dofAperture;\n    },\n    set: function (value) {\n      this.setAperture(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"edgeDistortion\", {\n    /**\r\n     * Gets or sets the edge distortion\r\n     */\n    get: function () {\n      return this._distortion;\n    },\n    set: function (value) {\n      this.setEdgeDistortion(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"dofDistortion\", {\n    /**\r\n     * Gets or sets the depth of field distortion\r\n     */\n    get: function () {\n      return this._dofDistance;\n    },\n    set: function (value) {\n      this.setFocusDistance(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"darkenOutOfFocus\", {\n    /**\r\n     * Gets or sets the darken out of focus amount\r\n     */\n    get: function () {\n      return this._dofDarken;\n    },\n    set: function (value) {\n      this.setDarkenOutOfFocus(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"blurNoise\", {\n    /**\r\n     * Gets or sets a boolean indicating if blur noise is enabled\r\n     */\n    get: function () {\n      return this._blurNoise;\n    },\n    set: function (value) {\n      this._blurNoise = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"pentagonBokeh\", {\n    /**\r\n     * Gets or sets a boolean indicating if pentagon bokeh is enabled\r\n     */\n    get: function () {\n      return this._pentagonBokehIsEnabled;\n    },\n    set: function (value) {\n      if (value) {\n        this.enablePentagonBokeh();\n      } else {\n        this.disablePentagonBokeh();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"highlightsGain\", {\n    /**\r\n     * Gets or sets the highlight grain amount\r\n     */\n    get: function () {\n      return this._highlightsGain;\n    },\n    set: function (value) {\n      this.setHighlightsGain(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"highlightsThreshold\", {\n    /**\r\n     * Gets or sets the highlight threshold\r\n     */\n    get: function () {\n      return this._highlightsThreshold;\n    },\n    set: function (value) {\n      this.setHighlightsThreshold(value);\n    },\n    enumerable: false,\n    configurable: true\n  }); // public methods (self explanatory)\n\n  /**\r\n   * Sets the amount of blur at the edges\r\n   * @param amount blur amount\r\n   */\n\n  LensRenderingPipeline.prototype.setEdgeBlur = function (amount) {\n    this._edgeBlur = amount;\n  };\n  /**\r\n   * Sets edge blur to 0\r\n   */\n\n\n  LensRenderingPipeline.prototype.disableEdgeBlur = function () {\n    this._edgeBlur = 0;\n  };\n  /**\r\n   * Sets the amout of grain\r\n   * @param amount Amount of grain\r\n   */\n\n\n  LensRenderingPipeline.prototype.setGrainAmount = function (amount) {\n    this._grainAmount = amount;\n  };\n  /**\r\n   * Set grain amount to 0\r\n   */\n\n\n  LensRenderingPipeline.prototype.disableGrain = function () {\n    this._grainAmount = 0;\n  };\n  /**\r\n   * Sets the chromatic aberration amount\r\n   * @param amount amount of chromatic aberration\r\n   */\n\n\n  LensRenderingPipeline.prototype.setChromaticAberration = function (amount) {\n    this._chromaticAberration = amount;\n  };\n  /**\r\n   * Sets chromatic aberration amount to 0\r\n   */\n\n\n  LensRenderingPipeline.prototype.disableChromaticAberration = function () {\n    this._chromaticAberration = 0;\n  };\n  /**\r\n   * Sets the EdgeDistortion amount\r\n   * @param amount amount of EdgeDistortion\r\n   */\n\n\n  LensRenderingPipeline.prototype.setEdgeDistortion = function (amount) {\n    this._distortion = amount;\n  };\n  /**\r\n   * Sets edge distortion to 0\r\n   */\n\n\n  LensRenderingPipeline.prototype.disableEdgeDistortion = function () {\n    this._distortion = 0;\n  };\n  /**\r\n   * Sets the FocusDistance amount\r\n   * @param amount amount of FocusDistance\r\n   */\n\n\n  LensRenderingPipeline.prototype.setFocusDistance = function (amount) {\n    this._dofDistance = amount;\n  };\n  /**\r\n  * Disables depth of field\r\n  */\n\n\n  LensRenderingPipeline.prototype.disableDepthOfField = function () {\n    this._dofDistance = -1;\n  };\n  /**\r\n   * Sets the Aperture amount\r\n   * @param amount amount of Aperture\r\n   */\n\n\n  LensRenderingPipeline.prototype.setAperture = function (amount) {\n    this._dofAperture = amount;\n  };\n  /**\r\n   * Sets the DarkenOutOfFocus amount\r\n   * @param amount amount of DarkenOutOfFocus\r\n   */\n\n\n  LensRenderingPipeline.prototype.setDarkenOutOfFocus = function (amount) {\n    this._dofDarken = amount;\n  };\n  /**\r\n   * Creates a pentagon bokeh effect\r\n   */\n\n\n  LensRenderingPipeline.prototype.enablePentagonBokeh = function () {\n    this._highlightsPostProcess.updateEffect(\"#define PENTAGON\\n\");\n\n    this._pentagonBokehIsEnabled = true;\n  };\n  /**\r\n   * Disables the pentagon bokeh effect\r\n   */\n\n\n  LensRenderingPipeline.prototype.disablePentagonBokeh = function () {\n    this._pentagonBokehIsEnabled = false;\n\n    this._highlightsPostProcess.updateEffect();\n  };\n  /**\r\n   * Enables noise blur\r\n   */\n\n\n  LensRenderingPipeline.prototype.enableNoiseBlur = function () {\n    this._blurNoise = true;\n  };\n  /**\r\n   * Disables noise blur\r\n   */\n\n\n  LensRenderingPipeline.prototype.disableNoiseBlur = function () {\n    this._blurNoise = false;\n  };\n  /**\r\n   * Sets the HighlightsGain amount\r\n   * @param amount amount of HighlightsGain\r\n   */\n\n\n  LensRenderingPipeline.prototype.setHighlightsGain = function (amount) {\n    this._highlightsGain = amount;\n  };\n  /**\r\n   * Sets the HighlightsThreshold amount\r\n   * @param amount amount of HighlightsThreshold\r\n   */\n\n\n  LensRenderingPipeline.prototype.setHighlightsThreshold = function (amount) {\n    if (this._highlightsGain === -1) {\n      this._highlightsGain = 1.0;\n    }\n\n    this._highlightsThreshold = amount;\n  };\n  /**\r\n   * Disables highlights\r\n   */\n\n\n  LensRenderingPipeline.prototype.disableHighlights = function () {\n    this._highlightsGain = -1;\n  };\n  /**\r\n   * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n   * @param disableDepthRender If the scens depth rendering should be disabled (default: false)\r\n   */\n\n\n  LensRenderingPipeline.prototype.dispose = function (disableDepthRender) {\n    if (disableDepthRender === void 0) {\n      disableDepthRender = false;\n    }\n\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n\n    this._chromaticAberrationPostProcess = null;\n    this._highlightsPostProcess = null;\n    this._depthOfFieldPostProcess = null;\n\n    this._grainTexture.dispose();\n\n    if (disableDepthRender) {\n      this._scene.disableDepthRenderer();\n    }\n  }; // colors shifting and distortion\n\n\n  LensRenderingPipeline.prototype._createChromaticAberrationPostProcess = function (ratio) {\n    var _this = this;\n\n    this._chromaticAberrationPostProcess = new PostProcess(\"LensChromaticAberration\", \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], // uniforms\n    [], // samplers\n    ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n\n    this._chromaticAberrationPostProcess.onApply = function (effect) {\n      effect.setFloat('chromatic_aberration', _this._chromaticAberration);\n      effect.setFloat('screen_width', _this._scene.getEngine().getRenderWidth());\n      effect.setFloat('screen_height', _this._scene.getEngine().getRenderHeight());\n      effect.setFloat('radialIntensity', 1);\n      effect.setFloat2('direction', 17, 17);\n      effect.setFloat2('centerPosition', 0.5, 0.5);\n    };\n  }; // highlights enhancing\n\n\n  LensRenderingPipeline.prototype._createHighlightsPostProcess = function (ratio) {\n    var _this = this;\n\n    this._highlightsPostProcess = new PostProcess(\"LensHighlights\", \"lensHighlights\", [\"gain\", \"threshold\", \"screen_width\", \"screen_height\"], // uniforms\n    [], // samplers\n    ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, this._dofPentagon ? \"#define PENTAGON\\n\" : \"\");\n\n    this._highlightsPostProcess.onApply = function (effect) {\n      effect.setFloat('gain', _this._highlightsGain);\n      effect.setFloat('threshold', _this._highlightsThreshold);\n      effect.setTextureFromPostProcess(\"textureSampler\", _this._chromaticAberrationPostProcess);\n      effect.setFloat('screen_width', _this._scene.getEngine().getRenderWidth());\n      effect.setFloat('screen_height', _this._scene.getEngine().getRenderHeight());\n    };\n  }; // colors shifting and distortion\n\n\n  LensRenderingPipeline.prototype._createDepthOfFieldPostProcess = function (ratio) {\n    var _this = this;\n\n    this._depthOfFieldPostProcess = new PostProcess(\"LensDepthOfField\", \"depthOfField\", [\"grain_amount\", \"blur_noise\", \"screen_width\", \"screen_height\", \"distortion\", \"dof_enabled\", \"screen_distance\", \"aperture\", \"darken\", \"edge_blur\", \"highlights\", \"near\", \"far\"], [\"depthSampler\", \"grainSampler\", \"highlightsSampler\"], ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n\n    this._depthOfFieldPostProcess.onApply = function (effect) {\n      effect.setTexture(\"depthSampler\", _this._depthTexture);\n      effect.setTexture(\"grainSampler\", _this._grainTexture);\n      effect.setTextureFromPostProcess(\"textureSampler\", _this._highlightsPostProcess);\n      effect.setTextureFromPostProcess(\"highlightsSampler\", _this._depthOfFieldPostProcess);\n      effect.setFloat('grain_amount', _this._grainAmount);\n      effect.setBool('blur_noise', _this._blurNoise);\n      effect.setFloat('screen_width', _this._scene.getEngine().getRenderWidth());\n      effect.setFloat('screen_height', _this._scene.getEngine().getRenderHeight());\n      effect.setFloat('distortion', _this._distortion);\n      effect.setBool('dof_enabled', _this._dofDistance !== -1);\n      effect.setFloat('screen_distance', 1.0 / (0.1 - 1.0 / _this._dofDistance));\n      effect.setFloat('aperture', _this._dofAperture);\n      effect.setFloat('darken', _this._dofDarken);\n      effect.setFloat('edge_blur', _this._edgeBlur);\n      effect.setBool('highlights', _this._highlightsGain !== -1);\n\n      if (_this._scene.activeCamera) {\n        effect.setFloat('near', _this._scene.activeCamera.minZ);\n        effect.setFloat('far', _this._scene.activeCamera.maxZ);\n      }\n    };\n  }; // creates a black and white random noise texture, 512x512\n\n\n  LensRenderingPipeline.prototype._createGrainTexture = function () {\n    var size = 512;\n    this._grainTexture = new DynamicTexture(\"LensNoiseTexture\", size, this._scene, false, Texture.BILINEAR_SAMPLINGMODE);\n    this._grainTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n    this._grainTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n\n    var context = this._grainTexture.getContext();\n\n    var rand = function (min, max) {\n      return Math.random() * (max - min) + min;\n    };\n\n    var value;\n\n    for (var x = 0; x < size; x++) {\n      for (var y = 0; y < size; y++) {\n        value = Math.floor(rand(0.42, 0.58) * 255);\n        context.fillStyle = 'rgb(' + value + ', ' + value + ', ' + value + ')';\n        context.fillRect(x, y, 1, 1);\n      }\n    }\n\n    this._grainTexture.update(false);\n  };\n\n  return LensRenderingPipeline;\n}(PostProcessRenderPipeline);\n\nexport { LensRenderingPipeline };","map":{"version":3,"sources":["../../../../../sourceES6/core/PostProcesses/RenderPipeline/Pipelines/lensRenderingPipeline.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { Camera } from \"../../../Cameras/camera\";\r\nimport { Effect } from \"../../../Materials/effect\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\r\nimport { RenderTargetTexture } from \"../../../Materials/Textures/renderTargetTexture\";\r\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport { Scene } from \"../../../scene\";\r\n\r\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\r\n\r\nimport \"../../../Shaders/chromaticAberration.fragment\";\r\nimport \"../../../Shaders/lensHighlights.fragment\";\r\nimport \"../../../Shaders/depthOfField.fragment\";\r\n\r\n/**\r\n * BABYLON.JS Chromatic Aberration GLSL Shader\r\n * Author: Olivier Guyot\r\n * Separates very slightly R, G and B colors on the edges of the screen\r\n * Inspired by Francois Tarlier & Martins Upitis\r\n */\r\nexport class LensRenderingPipeline extends PostProcessRenderPipeline {\r\n\r\n    // Lens effects can be of the following:\r\n    // - chromatic aberration (slight shift of RGB colors)\r\n    // - blur on the edge of the lens\r\n    // - lens distortion\r\n    // - depth-of-field blur & highlights enhancing\r\n    // - depth-of-field 'bokeh' effect (shapes appearing in blurred areas)\r\n    // - grain effect (noise or custom texture)\r\n\r\n    // Two additional texture samplers are needed:\r\n    // - depth map (for depth-of-field)\r\n    // - grain texture\r\n\r\n    /**\r\n     * @ignore\r\n     * The chromatic aberration PostProcess id in the pipeline\r\n     */\r\n    public LensChromaticAberrationEffect: string = \"LensChromaticAberrationEffect\";\r\n    /**\r\n     * @ignore\r\n     * The highlights enhancing PostProcess id in the pipeline\r\n     */\r\n    public HighlightsEnhancingEffect: string = \"HighlightsEnhancingEffect\";\r\n    /**\r\n     * @ignore\r\n    * The depth-of-field PostProcess id in the pipeline\r\n    */\r\n    public LensDepthOfFieldEffect: string = \"LensDepthOfFieldEffect\";\r\n\r\n    private _scene: Scene;\r\n    private _depthTexture: RenderTargetTexture;\r\n    private _grainTexture: Texture;\r\n\r\n    private _chromaticAberrationPostProcess: PostProcess;\r\n    private _highlightsPostProcess: PostProcess;\r\n    private _depthOfFieldPostProcess: PostProcess;\r\n\r\n    private _edgeBlur: number;\r\n    private _grainAmount: number;\r\n    private _chromaticAberration: number;\r\n    private _distortion: number;\r\n    private _highlightsGain: number;\r\n    private _highlightsThreshold: number;\r\n    private _dofDistance: number;\r\n    private _dofAperture: number;\r\n    private _dofDarken: number;\r\n    private _dofPentagon: boolean;\r\n    private _blurNoise: boolean;\r\n\r\n    /**\r\n     * @constructor\r\n     *\r\n     * Effect parameters are as follow:\r\n     * {\r\n     *      chromatic_aberration: number;       // from 0 to x (1 for realism)\r\n     *      edge_blur: number;                  // from 0 to x (1 for realism)\r\n     *      distortion: number;                 // from 0 to x (1 for realism)\r\n     *      grain_amount: number;               // from 0 to 1\r\n     *      grain_texture: BABYLON.Texture;     // texture to use for grain effect; if unset, use random B&W noise\r\n     *      dof_focus_distance: number;         // depth-of-field: focus distance; unset to disable (disabled by default)\r\n     *      dof_aperture: number;               // depth-of-field: focus blur bias (default: 1)\r\n     *      dof_darken: number;                 // depth-of-field: darken that which is out of focus (from 0 to 1, disabled by default)\r\n     *      dof_pentagon: boolean;              // depth-of-field: makes a pentagon-like \"bokeh\" effect\r\n     *      dof_gain: number;                   // depth-of-field: highlights gain; unset to disable (disabled by default)\r\n     *      dof_threshold: number;              // depth-of-field: highlights threshold (default: 1)\r\n     *      blur_noise: boolean;                // add a little bit of noise to the blur (default: true)\r\n     * }\r\n     * Note: if an effect parameter is unset, effect is disabled\r\n     *\r\n     * @param name The rendering pipeline name\r\n     * @param parameters - An object containing all parameters (see above)\r\n     * @param scene The scene linked to this pipeline\r\n     * @param ratio The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\r\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\r\n     */\r\n    constructor(name: string, parameters: any, scene: Scene, ratio: number = 1.0, cameras?: Camera[]) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._scene = scene;\r\n\r\n        // Fetch texture samplers\r\n        this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\r\n        if (parameters.grain_texture) { this._grainTexture = parameters.grain_texture; }\r\n        else { this._createGrainTexture(); }\r\n\r\n        // save parameters\r\n        this._edgeBlur = parameters.edge_blur ? parameters.edge_blur : 0;\r\n        this._grainAmount = parameters.grain_amount ? parameters.grain_amount : 0;\r\n        this._chromaticAberration = parameters.chromatic_aberration ? parameters.chromatic_aberration : 0;\r\n        this._distortion = parameters.distortion ? parameters.distortion : 0;\r\n        this._highlightsGain = parameters.dof_gain !== undefined ? parameters.dof_gain : -1;\r\n        this._highlightsThreshold = parameters.dof_threshold ? parameters.dof_threshold : 1;\r\n        this._dofDistance = parameters.dof_focus_distance !== undefined ? parameters.dof_focus_distance : -1;\r\n        this._dofAperture = parameters.dof_aperture ? parameters.dof_aperture : 1;\r\n        this._dofDarken = parameters.dof_darken ? parameters.dof_darken : 0;\r\n        this._dofPentagon = parameters.dof_pentagon !== undefined ? parameters.dof_pentagon : true;\r\n        this._blurNoise = parameters.blur_noise !== undefined ? parameters.blur_noise : true;\r\n\r\n        // Create effects\r\n        this._createChromaticAberrationPostProcess(ratio);\r\n        this._createHighlightsPostProcess(ratio);\r\n        this._createDepthOfFieldPostProcess(ratio / 4);\r\n\r\n        // Set up pipeline\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.LensChromaticAberrationEffect, () => { return this._chromaticAberrationPostProcess; }, true));\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.HighlightsEnhancingEffect, () => { return this._highlightsPostProcess; }, true));\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.LensDepthOfFieldEffect, () => { return this._depthOfFieldPostProcess; }, true));\r\n\r\n        if (this._highlightsGain === -1) {\r\n            this._disableEffect(this.HighlightsEnhancingEffect, null);\r\n        }\r\n\r\n        // Finish\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n        if (cameras) {\r\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"LensRenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"LensRenderingPipeline\";\r\n    }\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets associated scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the edge blur\r\n     */\r\n    public get edgeBlur(): number {\r\n        return this._edgeBlur;\r\n    }\r\n\r\n    public set edgeBlur(value: number) {\r\n        this.setEdgeBlur(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the grain amount\r\n     */\r\n    public get grainAmount(): number {\r\n        return this._grainAmount;\r\n    }\r\n\r\n    public set grainAmount(value: number) {\r\n        this.setGrainAmount(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the chromatic aberration amount\r\n     */\r\n    public get chromaticAberration(): number {\r\n        return this._chromaticAberration;\r\n    }\r\n\r\n    public set chromaticAberration(value: number) {\r\n        this.setChromaticAberration(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the depth of field aperture\r\n     */\r\n    public get dofAperture(): number {\r\n        return this._dofAperture;\r\n    }\r\n\r\n    public set dofAperture(value: number) {\r\n        this.setAperture(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the edge distortion\r\n     */\r\n    public get edgeDistortion(): number {\r\n        return this._distortion;\r\n    }\r\n\r\n    public set edgeDistortion(value: number) {\r\n        this.setEdgeDistortion(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the depth of field distortion\r\n     */\r\n    public get dofDistortion(): number {\r\n        return this._dofDistance;\r\n    }\r\n\r\n    public set dofDistortion(value: number) {\r\n        this.setFocusDistance(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the darken out of focus amount\r\n     */\r\n    public get darkenOutOfFocus(): number {\r\n        return this._dofDarken;\r\n    }\r\n\r\n    public set darkenOutOfFocus(value: number) {\r\n        this.setDarkenOutOfFocus(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if blur noise is enabled\r\n     */\r\n    public get blurNoise(): boolean {\r\n        return this._blurNoise;\r\n    }\r\n\r\n    public set blurNoise(value: boolean) {\r\n        this._blurNoise = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if pentagon bokeh is enabled\r\n     */\r\n    public get pentagonBokeh(): boolean {\r\n        return this._pentagonBokehIsEnabled;\r\n    }\r\n\r\n    public set pentagonBokeh(value: boolean) {\r\n        if (value) {\r\n            this.enablePentagonBokeh();\r\n        } else {\r\n            this.disablePentagonBokeh();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the highlight grain amount\r\n     */\r\n    public get highlightsGain(): number {\r\n        return this._highlightsGain;\r\n    }\r\n\r\n    public set highlightsGain(value: number) {\r\n        this.setHighlightsGain(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the highlight threshold\r\n     */\r\n    public get highlightsThreshold(): number {\r\n        return this._highlightsThreshold;\r\n    }\r\n\r\n    public set highlightsThreshold(value: number) {\r\n        this.setHighlightsThreshold(value);\r\n    }\r\n\r\n    // public methods (self explanatory)\r\n    /**\r\n     * Sets the amount of blur at the edges\r\n     * @param amount blur amount\r\n     */\r\n    public setEdgeBlur(amount: number) { this._edgeBlur = amount; }\r\n    /**\r\n     * Sets edge blur to 0\r\n     */\r\n    public disableEdgeBlur() { this._edgeBlur = 0; }\r\n    /**\r\n     * Sets the amout of grain\r\n     * @param amount Amount of grain\r\n     */\r\n    public setGrainAmount(amount: number) { this._grainAmount = amount; }\r\n    /**\r\n     * Set grain amount to 0\r\n     */\r\n    public disableGrain() { this._grainAmount = 0; }\r\n    /**\r\n     * Sets the chromatic aberration amount\r\n     * @param amount amount of chromatic aberration\r\n     */\r\n    public setChromaticAberration(amount: number) { this._chromaticAberration = amount; }\r\n    /**\r\n     * Sets chromatic aberration amount to 0\r\n     */\r\n    public disableChromaticAberration() { this._chromaticAberration = 0; }\r\n    /**\r\n     * Sets the EdgeDistortion amount\r\n     * @param amount amount of EdgeDistortion\r\n     */\r\n    public setEdgeDistortion(amount: number) { this._distortion = amount; }\r\n    /**\r\n     * Sets edge distortion to 0\r\n     */\r\n    public disableEdgeDistortion() { this._distortion = 0; }\r\n    /**\r\n     * Sets the FocusDistance amount\r\n     * @param amount amount of FocusDistance\r\n     */\r\n    public setFocusDistance(amount: number) { this._dofDistance = amount; }\r\n    /**\r\n    * Disables depth of field\r\n    */\r\n    public disableDepthOfField() { this._dofDistance = -1; }\r\n    /**\r\n     * Sets the Aperture amount\r\n     * @param amount amount of Aperture\r\n     */\r\n    public setAperture(amount: number) { this._dofAperture = amount; }\r\n    /**\r\n     * Sets the DarkenOutOfFocus amount\r\n     * @param amount amount of DarkenOutOfFocus\r\n     */\r\n    public setDarkenOutOfFocus(amount: number) { this._dofDarken = amount; }\r\n\r\n    private _pentagonBokehIsEnabled = false;\r\n    /**\r\n     * Creates a pentagon bokeh effect\r\n     */\r\n    public enablePentagonBokeh() {\r\n        this._highlightsPostProcess.updateEffect(\"#define PENTAGON\\n\");\r\n        this._pentagonBokehIsEnabled = true;\r\n    }\r\n    /**\r\n     * Disables the pentagon bokeh effect\r\n     */\r\n    public disablePentagonBokeh() {\r\n        this._pentagonBokehIsEnabled = false;\r\n        this._highlightsPostProcess.updateEffect();\r\n    }\r\n    /**\r\n     * Enables noise blur\r\n     */\r\n    public enableNoiseBlur() { this._blurNoise = true; }\r\n    /**\r\n     * Disables noise blur\r\n     */\r\n    public disableNoiseBlur() { this._blurNoise = false; }\r\n    /**\r\n     * Sets the HighlightsGain amount\r\n     * @param amount amount of HighlightsGain\r\n     */\r\n    public setHighlightsGain(amount: number) {\r\n        this._highlightsGain = amount;\r\n    }\r\n    /**\r\n     * Sets the HighlightsThreshold amount\r\n     * @param amount amount of HighlightsThreshold\r\n     */\r\n    public setHighlightsThreshold(amount: number) {\r\n        if (this._highlightsGain === -1) {\r\n            this._highlightsGain = 1.0;\r\n        }\r\n        this._highlightsThreshold = amount;\r\n    }\r\n    /**\r\n     * Disables highlights\r\n     */\r\n    public disableHighlights() {\r\n        this._highlightsGain = -1;\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n     * @param disableDepthRender If the scens depth rendering should be disabled (default: false)\r\n     */\r\n    public dispose(disableDepthRender: boolean = false): void {\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\r\n\r\n        (<any>this._chromaticAberrationPostProcess) = null;\r\n        (<any>this._highlightsPostProcess) = null;\r\n        (<any>this._depthOfFieldPostProcess) = null;\r\n\r\n        this._grainTexture.dispose();\r\n\r\n        if (disableDepthRender) {\r\n            this._scene.disableDepthRenderer();\r\n        }\r\n    }\r\n\r\n    // colors shifting and distortion\r\n    private _createChromaticAberrationPostProcess(ratio: number): void {\r\n        this._chromaticAberrationPostProcess = new PostProcess(\"LensChromaticAberration\", \"chromaticAberration\",\r\n            [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"],      // uniforms\r\n            [],                                         // samplers\r\n            ratio, null, Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(), false);\r\n\r\n        this._chromaticAberrationPostProcess.onApply = (effect: Effect) => {\r\n            effect.setFloat('chromatic_aberration', this._chromaticAberration);\r\n            effect.setFloat('screen_width', this._scene.getEngine().getRenderWidth());\r\n            effect.setFloat('screen_height', this._scene.getEngine().getRenderHeight());\r\n            effect.setFloat('radialIntensity', 1);\r\n            effect.setFloat2('direction', 17, 17);\r\n            effect.setFloat2('centerPosition', 0.5, 0.5);\r\n        };\r\n    }\r\n\r\n    // highlights enhancing\r\n    private _createHighlightsPostProcess(ratio: number): void {\r\n        this._highlightsPostProcess = new PostProcess(\"LensHighlights\", \"lensHighlights\",\r\n            [\"gain\", \"threshold\", \"screen_width\", \"screen_height\"],      // uniforms\r\n            [],     // samplers\r\n            ratio,\r\n            null, Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(), false, this._dofPentagon ? \"#define PENTAGON\\n\" : \"\");\r\n\r\n        this._highlightsPostProcess.onApply = (effect: Effect) => {\r\n            effect.setFloat('gain', this._highlightsGain);\r\n            effect.setFloat('threshold', this._highlightsThreshold);\r\n            effect.setTextureFromPostProcess(\"textureSampler\", this._chromaticAberrationPostProcess);\r\n            effect.setFloat('screen_width', this._scene.getEngine().getRenderWidth());\r\n            effect.setFloat('screen_height', this._scene.getEngine().getRenderHeight());\r\n        };\r\n    }\r\n\r\n    // colors shifting and distortion\r\n    private _createDepthOfFieldPostProcess(ratio: number): void {\r\n        this._depthOfFieldPostProcess = new PostProcess(\"LensDepthOfField\", \"depthOfField\",\r\n            [\r\n                \"grain_amount\", \"blur_noise\", \"screen_width\", \"screen_height\", \"distortion\", \"dof_enabled\",\r\n                \"screen_distance\", \"aperture\", \"darken\", \"edge_blur\", \"highlights\", \"near\", \"far\"\r\n            ],\r\n            [\"depthSampler\", \"grainSampler\", \"highlightsSampler\"],\r\n            ratio, null, Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(), false);\r\n\r\n        this._depthOfFieldPostProcess.onApply = (effect: Effect) => {\r\n\r\n            effect.setTexture(\"depthSampler\", this._depthTexture);\r\n            effect.setTexture(\"grainSampler\", this._grainTexture);\r\n            effect.setTextureFromPostProcess(\"textureSampler\", this._highlightsPostProcess);\r\n            effect.setTextureFromPostProcess(\"highlightsSampler\", this._depthOfFieldPostProcess);\r\n\r\n            effect.setFloat('grain_amount', this._grainAmount);\r\n            effect.setBool('blur_noise', this._blurNoise);\r\n\r\n            effect.setFloat('screen_width', this._scene.getEngine().getRenderWidth());\r\n            effect.setFloat('screen_height', this._scene.getEngine().getRenderHeight());\r\n\r\n            effect.setFloat('distortion', this._distortion);\r\n\r\n            effect.setBool('dof_enabled', (this._dofDistance !== -1));\r\n            effect.setFloat('screen_distance', 1.0 / (0.1 - 1.0 / this._dofDistance));\r\n            effect.setFloat('aperture', this._dofAperture);\r\n            effect.setFloat('darken', this._dofDarken);\r\n\r\n            effect.setFloat('edge_blur', this._edgeBlur);\r\n\r\n            effect.setBool('highlights', (this._highlightsGain !== -1));\r\n\r\n            if (this._scene.activeCamera) {\r\n                effect.setFloat('near', this._scene.activeCamera.minZ);\r\n                effect.setFloat('far', this._scene.activeCamera.maxZ);\r\n            }\r\n        };\r\n    }\r\n\r\n    // creates a black and white random noise texture, 512x512\r\n    private _createGrainTexture(): void {\r\n        var size = 512;\r\n\r\n        this._grainTexture = new DynamicTexture(\"LensNoiseTexture\", size, this._scene, false, Texture.BILINEAR_SAMPLINGMODE);\r\n        this._grainTexture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        this._grainTexture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        var context = (<DynamicTexture>this._grainTexture).getContext();\r\n\r\n        var rand = (min: number, max: number) => {\r\n            return Math.random() * (max - min) + min;\r\n        };\r\n\r\n        var value;\r\n        for (var x = 0; x < size; x++) {\r\n            for (var y = 0; y < size; y++) {\r\n                value = Math.floor(rand(0.42, 0.58) * 255);\r\n                context.fillStyle = 'rgb(' + value + ', ' + value + ', ' + value + ')';\r\n                context.fillRect(x, y, 1, 1);\r\n            }\r\n        }\r\n        (<DynamicTexture>this._grainTexture).update(false);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}