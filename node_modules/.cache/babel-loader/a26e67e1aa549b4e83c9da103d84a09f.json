{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\n/**\r\n * Block used to get the derivative value on x and y of a given input\r\n */\n\nvar DerivativeBlock =\n/** @class */\nfunction (_super) {\n  __extends(DerivativeBlock, _super);\n  /**\r\n   * Create a new DerivativeBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function DerivativeBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false);\n\n    _this.registerOutput(\"dx\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n\n    _this.registerOutput(\"dy\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n\n    _this._outputs[0]._typeConnectionSource = _this._inputs[0];\n    _this._outputs[1]._typeConnectionSource = _this._inputs[0];\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  DerivativeBlock.prototype.getClassName = function () {\n    return \"DerivativeBlock\";\n  };\n\n  Object.defineProperty(DerivativeBlock.prototype, \"input\", {\n    /**\r\n     * Gets the input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DerivativeBlock.prototype, \"dx\", {\n    /**\r\n     * Gets the derivative output on x\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DerivativeBlock.prototype, \"dy\", {\n    /**\r\n     * Gets the derivative output on y\r\n     */\n    get: function () {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DerivativeBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var dx = this._outputs[0];\n    var dy = this._outputs[1];\n\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\n\n    if (dx.hasEndpoints) {\n      state.compilationString += this._declareOutput(dx, state) + (\" = dFdx(\" + this.input.associatedVariableName + \");\\r\\n\");\n    }\n\n    if (dy.hasEndpoints) {\n      state.compilationString += this._declareOutput(dy, state) + (\" = dFdy(\" + this.input.associatedVariableName + \");\\r\\n\");\n    }\n\n    return this;\n  };\n\n  return DerivativeBlock;\n}(NodeMaterialBlock);\n\nexport { DerivativeBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.DerivativeBlock\"] = DerivativeBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Fragment/derivativeBlock.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAT,QAAkC,yBAAlC;AACA,SAAS,qCAAT,QAAsD,mDAAtD;AAEA,SAAS,wBAAT,QAAyC,sCAAzC;AAEA,SAAS,UAAT,QAA2B,4BAA3B;AAEA;;;;AAGA,IAAA,eAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqC,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;AACjC;;;;;;AAIA,WAAA,eAAA,CAAmB,IAAnB,EAA+B;AAA/B,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,wBAAwB,CAAC,QAArC,KAA8C,IADlD;;AAGI,IAAA,KAAI,CAAC,aAAL,CAAmB,OAAnB,EAA4B,qCAAqC,CAAC,UAAlE,EAA8E,KAA9E;;AACA,IAAA,KAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,qCAAqC,CAAC,YAAhE;;AACA,IAAA,KAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,qCAAqC,CAAC,YAAhE;;AAEA,IAAA,KAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,qBAAjB,GAAyC,KAAI,CAAC,OAAL,CAAa,CAAb,CAAzC;AACA,IAAA,KAAI,CAAC,QAAL,CAAc,CAAd,EAAiB,qBAAjB,GAAyC,KAAI,CAAC,OAAL,CAAa,CAAb,CAAzC;;AACH;AAED;;;;;;AAIO,EAAA,eAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,iBAAP;AACH,GAFM;;AAOP,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFe;qBAAA;;AAAA,GAAhB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,IAAX,EAAa;AAHb;;;SAGA,YAAA;AACI,aAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACH,KAFY;qBAAA;;AAAA,GAAb;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,IAAX,EAAa;AAHb;;;SAGA,YAAA;AACI,aAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACH,KAFY;qBAAA;;AAAA,GAAb;;AAIU,EAAA,eAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,KAAtB,EAAmD;AAC/C,IAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,KAAlB;;AAEA,QAAI,EAAE,GAAG,KAAK,QAAL,CAAc,CAAd,CAAT;AACA,QAAI,EAAE,GAAG,KAAK,QAAL,CAAc,CAAd,CAAT;;AAEA,IAAA,KAAK,CAAC,cAAN,CAAqB,aAArB,EAAoC,iDAApC;;AAEA,QAAI,EAAE,CAAC,YAAP,EAAqB;AACjB,MAAA,KAAK,CAAC,iBAAN,IAA2B,KAAK,cAAL,CAAoB,EAApB,EAAwB,KAAxB,KAAiC,aAAW,KAAK,KAAL,CAAW,sBAAtB,GAA4C,QAA7E,CAA3B;AACH;;AAED,QAAI,EAAE,CAAC,YAAP,EAAqB;AACjB,MAAA,KAAK,CAAC,iBAAN,IAA2B,KAAK,cAAL,CAAoB,EAApB,EAAwB,KAAxB,KAAiC,aAAW,KAAK,KAAL,CAAW,sBAAtB,GAA4C,QAA7E,CAA3B;AACH;;AAED,WAAO,IAAP;AACH,GAjBS;;AAkBd,SAAA,eAAA;AAAC,CA/DD,CAAqC,iBAArC,CAAA;;;AAiEA,UAAU,CAAC,eAAX,CAA2B,yBAA3B,IAAwD,eAAxD","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\n\r\n/**\r\n * Block used to get the derivative value on x and y of a given input\r\n */\r\nexport class DerivativeBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new DerivativeBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect, false);\r\n        this.registerOutput(\"dx\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n        this.registerOutput(\"dy\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n        this._outputs[1]._typeConnectionSource = this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"DerivativeBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the derivative output on x\r\n     */\r\n    public get dx(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the derivative output on y\r\n     */\r\n    public get dy(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        let dx = this._outputs[0];\r\n        let dy = this._outputs[1];\r\n\r\n        state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\r\n\r\n        if (dx.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(dx, state) + ` = dFdx(${this.input.associatedVariableName});\\r\\n`;\r\n        }\r\n\r\n        if (dy.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(dy, state) + ` = dFdy(${this.input.associatedVariableName});\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.DerivativeBlock\"] = DerivativeBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}