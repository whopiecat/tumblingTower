{"ast":null,"code":"import { Vector3, Matrix } from '../Maths/math.vector';\n/**\r\n * Class containing a set of static utilities functions for managing Pivots\r\n * @hidden\r\n */\n\nvar PivotTools =\n/** @class */\nfunction () {\n  function PivotTools() {}\n  /** @hidden */\n\n\n  PivotTools._RemoveAndStorePivotPoint = function (mesh) {\n    if (mesh && PivotTools._PivotCached === 0) {\n      // Save old pivot and set pivot to 0,0,0\n      mesh.getPivotPointToRef(PivotTools._OldPivotPoint);\n      PivotTools._PivotPostMultiplyPivotMatrix = mesh._postMultiplyPivotMatrix;\n\n      if (!PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0)) {\n        mesh.setPivotMatrix(Matrix.IdentityReadOnly);\n\n        PivotTools._OldPivotPoint.subtractToRef(mesh.getPivotPoint(), PivotTools._PivotTranslation);\n\n        PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\n\n        PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\n\n        PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\n\n        mesh.position.addInPlace(PivotTools._PivotTmpVector);\n      }\n    }\n\n    PivotTools._PivotCached++;\n  };\n  /** @hidden */\n\n\n  PivotTools._RestorePivotPoint = function (mesh) {\n    if (mesh && !PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0) && PivotTools._PivotCached === 1) {\n      mesh.setPivotPoint(PivotTools._OldPivotPoint);\n      mesh._postMultiplyPivotMatrix = PivotTools._PivotPostMultiplyPivotMatrix;\n\n      PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\n\n      PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\n\n      PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\n\n      mesh.position.subtractInPlace(PivotTools._PivotTmpVector);\n    }\n\n    this._PivotCached--;\n  }; // Stores the state of the pivot cache (_oldPivotPoint, _pivotTranslation)\n  // store/remove pivot point should only be applied during their outermost calls\n\n\n  PivotTools._PivotCached = 0;\n  PivotTools._OldPivotPoint = new Vector3();\n  PivotTools._PivotTranslation = new Vector3();\n  PivotTools._PivotTmpVector = new Vector3();\n  PivotTools._PivotPostMultiplyPivotMatrix = false;\n  return PivotTools;\n}();\n\nexport { PivotTools };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/pivotTools.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,EAAkB,MAAlB,QAAgC,sBAAhC;AAGA;;;;;AAIA,IAAA,UAAA;AAAA;AAAA,YAAA;AAAA,WAAA,UAAA,GAAA,CAqCC;AA7BG;;;AACc,EAAA,UAAA,CAAA,yBAAA,GAAd,UAAwC,IAAxC,EAA0D;AACtD,QAAI,IAAI,IAAI,UAAU,CAAC,YAAX,KAA4B,CAAxC,EAA2C;AACvC;AACA,MAAA,IAAI,CAAC,kBAAL,CAAwB,UAAU,CAAC,cAAnC;AACA,MAAA,UAAU,CAAC,6BAAX,GAA2C,IAAI,CAAC,wBAAhD;;AACA,UAAI,CAAC,UAAU,CAAC,cAAX,CAA0B,cAA1B,CAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,CAAL,EAAwD;AACpD,QAAA,IAAI,CAAC,cAAL,CAAoB,MAAM,CAAC,gBAA3B;;AACA,QAAA,UAAU,CAAC,cAAX,CAA0B,aAA1B,CAAwC,IAAI,CAAC,aAAL,EAAxC,EAA8D,UAAU,CAAC,iBAAzE;;AACA,QAAA,UAAU,CAAC,eAAX,CAA2B,cAA3B,CAA0C,CAA1C,EAA6C,CAA7C,EAAgD,CAAhD;;AACA,QAAA,UAAU,CAAC,eAAX,CAA2B,eAA3B,CAA2C,IAAI,CAAC,OAAhD;;AACA,QAAA,UAAU,CAAC,eAAX,CAA2B,eAA3B,CAA2C,UAAU,CAAC,iBAAtD;;AACA,QAAA,IAAI,CAAC,QAAL,CAAc,UAAd,CAAyB,UAAU,CAAC,eAApC;AACH;AACJ;;AACD,IAAA,UAAU,CAAC,YAAX;AACH,GAfa;AAgBd;;;AACc,EAAA,UAAA,CAAA,kBAAA,GAAd,UAAiC,IAAjC,EAAmD;AAC/C,QAAI,IAAI,IAAI,CAAC,UAAU,CAAC,cAAX,CAA0B,cAA1B,CAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,CAAT,IAA8D,UAAU,CAAC,YAAX,KAA4B,CAA9F,EAAiG;AAC7F,MAAA,IAAI,CAAC,aAAL,CAAmB,UAAU,CAAC,cAA9B;AACA,MAAA,IAAI,CAAC,wBAAL,GAAgC,UAAU,CAAC,6BAA3C;;AACA,MAAA,UAAU,CAAC,eAAX,CAA2B,cAA3B,CAA0C,CAA1C,EAA6C,CAA7C,EAAgD,CAAhD;;AACA,MAAA,UAAU,CAAC,eAAX,CAA2B,eAA3B,CAA2C,IAAI,CAAC,OAAhD;;AACA,MAAA,UAAU,CAAC,eAAX,CAA2B,eAA3B,CAA2C,UAAU,CAAC,iBAAtD;;AACA,MAAA,IAAI,CAAC,QAAL,CAAc,eAAd,CAA8B,UAAU,CAAC,eAAzC;AACH;;AACD,SAAK,YAAL;AACH,GAVa,CA1BlB,CACI;AACA;;;AACe,EAAA,UAAA,CAAA,YAAA,GAAe,CAAf;AACA,EAAA,UAAA,CAAA,cAAA,GAAiB,IAAI,OAAJ,EAAjB;AACA,EAAA,UAAA,CAAA,iBAAA,GAAoB,IAAI,OAAJ,EAApB;AACA,EAAA,UAAA,CAAA,eAAA,GAAkB,IAAI,OAAJ,EAAlB;AACA,EAAA,UAAA,CAAA,6BAAA,GAAgC,KAAhC;AA8BnB,SAAA,UAAA;AAAC,CArCD,EAAA;;SAAa,U","sourcesContent":["import { Vector3, Matrix } from '../Maths/math.vector';\r\nimport { AbstractMesh } from '../Meshes/abstractMesh';\r\n\r\n/**\r\n * Class containing a set of static utilities functions for managing Pivots\r\n * @hidden\r\n */\r\nexport class PivotTools {\r\n    // Stores the state of the pivot cache (_oldPivotPoint, _pivotTranslation)\r\n    // store/remove pivot point should only be applied during their outermost calls\r\n    private static _PivotCached = 0;\r\n    private static _OldPivotPoint = new Vector3();\r\n    private static _PivotTranslation = new Vector3();\r\n    private static _PivotTmpVector = new Vector3();\r\n    private static _PivotPostMultiplyPivotMatrix = false;\r\n    /** @hidden */\r\n    public static _RemoveAndStorePivotPoint(mesh: AbstractMesh) {\r\n        if (mesh && PivotTools._PivotCached === 0) {\r\n            // Save old pivot and set pivot to 0,0,0\r\n            mesh.getPivotPointToRef(PivotTools._OldPivotPoint);\r\n            PivotTools._PivotPostMultiplyPivotMatrix = mesh._postMultiplyPivotMatrix;\r\n            if (!PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0)) {\r\n                mesh.setPivotMatrix(Matrix.IdentityReadOnly);\r\n                PivotTools._OldPivotPoint.subtractToRef(mesh.getPivotPoint(), PivotTools._PivotTranslation);\r\n                PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\r\n                PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\r\n                PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\r\n                mesh.position.addInPlace(PivotTools._PivotTmpVector);\r\n            }\r\n        }\r\n        PivotTools._PivotCached++;\r\n    }\r\n    /** @hidden */\r\n    public static _RestorePivotPoint(mesh: AbstractMesh) {\r\n        if (mesh && !PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0) && PivotTools._PivotCached === 1) {\r\n            mesh.setPivotPoint(PivotTools._OldPivotPoint);\r\n            mesh._postMultiplyPivotMatrix = PivotTools._PivotPostMultiplyPivotMatrix;\r\n            PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\r\n            PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\r\n            PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\r\n            mesh.position.subtractInPlace(PivotTools._PivotTmpVector);\r\n        }\r\n        this._PivotCached--;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}