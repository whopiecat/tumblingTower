{"ast":null,"code":"import { Logger } from \"../Misc/logger\";\nimport { Scene } from \"../scene\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Mesh } from \"../Meshes/mesh\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\nimport { PBRMaterial } from \"../Materials/PBR/pbrMaterial\";\nimport { HemisphericLight } from \"../Lights/hemisphericLight\";\nimport { EnvironmentHelper } from \"./environmentHelper\";\nimport { FreeCamera } from \"../Cameras/freeCamera\";\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera\";\nimport { VRExperienceHelper } from \"../Cameras/VR/vrExperienceHelper\";\nimport \"../Materials/Textures/Loaders/ddsTextureLoader\";\nimport \"../Materials/Textures/Loaders/envTextureLoader\";\nimport \"../Materials/Textures/Loaders/ktxTextureLoader\";\nimport \"../Meshes/Builders/boxBuilder\";\nimport { WebXRDefaultExperience } from '../XR/webXRDefaultExperience';\n/** @hidden */\n\nexport var _forceSceneHelpersToBundle = true;\n\nScene.prototype.createDefaultLight = function (replace) {\n  if (replace === void 0) {\n    replace = false;\n  } // Dispose existing light in replace mode.\n\n\n  if (replace) {\n    if (this.lights) {\n      for (var i = 0; i < this.lights.length; i++) {\n        this.lights[i].dispose();\n      }\n    }\n  } // Light\n\n\n  if (this.lights.length === 0) {\n    new HemisphericLight(\"default light\", Vector3.Up(), this);\n  }\n};\n\nScene.prototype.createDefaultCamera = function (createArcRotateCamera, replace, attachCameraControls) {\n  if (createArcRotateCamera === void 0) {\n    createArcRotateCamera = false;\n  }\n\n  if (replace === void 0) {\n    replace = false;\n  }\n\n  if (attachCameraControls === void 0) {\n    attachCameraControls = false;\n  } // Dispose existing camera in replace mode.\n\n\n  if (replace) {\n    if (this.activeCamera) {\n      this.activeCamera.dispose();\n      this.activeCamera = null;\n    }\n  } // Camera\n\n\n  if (!this.activeCamera) {\n    var worldExtends = this.getWorldExtends(function (mesh) {\n      return mesh.isVisible && mesh.isEnabled();\n    });\n    var worldSize = worldExtends.max.subtract(worldExtends.min);\n    var worldCenter = worldExtends.min.add(worldSize.scale(0.5));\n    var camera;\n    var radius = worldSize.length() * 1.5; // empty scene scenario!\n\n    if (!isFinite(radius)) {\n      radius = 1;\n      worldCenter.copyFromFloats(0, 0, 0);\n    }\n\n    if (createArcRotateCamera) {\n      var arcRotateCamera = new ArcRotateCamera(\"default camera\", -(Math.PI / 2), Math.PI / 2, radius, worldCenter, this);\n      arcRotateCamera.lowerRadiusLimit = radius * 0.01;\n      arcRotateCamera.wheelPrecision = 100 / radius;\n      camera = arcRotateCamera;\n    } else {\n      var freeCamera = new FreeCamera(\"default camera\", new Vector3(worldCenter.x, worldCenter.y, -radius), this);\n      freeCamera.setTarget(worldCenter);\n      camera = freeCamera;\n    }\n\n    camera.minZ = radius * 0.01;\n    camera.maxZ = radius * 1000;\n    camera.speed = radius * 0.2;\n    this.activeCamera = camera;\n    var canvas = this.getEngine().getInputElement();\n\n    if (attachCameraControls && canvas) {\n      camera.attachControl();\n    }\n  }\n};\n\nScene.prototype.createDefaultCameraOrLight = function (createArcRotateCamera, replace, attachCameraControls) {\n  if (createArcRotateCamera === void 0) {\n    createArcRotateCamera = false;\n  }\n\n  if (replace === void 0) {\n    replace = false;\n  }\n\n  if (attachCameraControls === void 0) {\n    attachCameraControls = false;\n  }\n\n  this.createDefaultLight(replace);\n  this.createDefaultCamera(createArcRotateCamera, replace, attachCameraControls);\n};\n\nScene.prototype.createDefaultSkybox = function (environmentTexture, pbr, scale, blur, setGlobalEnvTexture) {\n  if (pbr === void 0) {\n    pbr = false;\n  }\n\n  if (scale === void 0) {\n    scale = 1000;\n  }\n\n  if (blur === void 0) {\n    blur = 0;\n  }\n\n  if (setGlobalEnvTexture === void 0) {\n    setGlobalEnvTexture = true;\n  }\n\n  if (!environmentTexture) {\n    Logger.Warn(\"Can not create default skybox without environment texture.\");\n    return null;\n  }\n\n  if (setGlobalEnvTexture) {\n    if (environmentTexture) {\n      this.environmentTexture = environmentTexture;\n    }\n  } // Skybox\n\n\n  var hdrSkybox = Mesh.CreateBox(\"hdrSkyBox\", scale, this);\n\n  if (pbr) {\n    var hdrSkyboxMaterial = new PBRMaterial(\"skyBox\", this);\n    hdrSkyboxMaterial.backFaceCulling = false;\n    hdrSkyboxMaterial.reflectionTexture = environmentTexture.clone();\n\n    if (hdrSkyboxMaterial.reflectionTexture) {\n      hdrSkyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    }\n\n    hdrSkyboxMaterial.microSurface = 1.0 - blur;\n    hdrSkyboxMaterial.disableLighting = true;\n    hdrSkyboxMaterial.twoSidedLighting = true;\n    hdrSkybox.infiniteDistance = true;\n    hdrSkybox.material = hdrSkyboxMaterial;\n  } else {\n    var skyboxMaterial = new StandardMaterial(\"skyBox\", this);\n    skyboxMaterial.backFaceCulling = false;\n    skyboxMaterial.reflectionTexture = environmentTexture.clone();\n\n    if (skyboxMaterial.reflectionTexture) {\n      skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    }\n\n    skyboxMaterial.disableLighting = true;\n    hdrSkybox.infiniteDistance = true;\n    hdrSkybox.material = skyboxMaterial;\n  }\n\n  hdrSkybox.isPickable = false;\n  return hdrSkybox;\n};\n\nScene.prototype.createDefaultEnvironment = function (options) {\n  if (EnvironmentHelper) {\n    return new EnvironmentHelper(options, this);\n  }\n\n  return null;\n};\n\nScene.prototype.createDefaultVRExperience = function (webVROptions) {\n  if (webVROptions === void 0) {\n    webVROptions = {};\n  }\n\n  return new VRExperienceHelper(this, webVROptions);\n};\n\nScene.prototype.createDefaultXRExperienceAsync = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return WebXRDefaultExperience.CreateAsync(this, options).then(function (helper) {\n    return helper;\n  });\n};","map":{"version":3,"sources":["../../../sourceES6/core/Helpers/sceneHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { PBRMaterial } from \"../Materials/PBR/pbrMaterial\";\r\nimport { HemisphericLight } from \"../Lights/hemisphericLight\";\r\nimport { IEnvironmentHelperOptions, EnvironmentHelper } from \"./environmentHelper\";\r\nimport { FreeCamera } from \"../Cameras/freeCamera\";\r\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera\";\r\nimport { TargetCamera } from \"../Cameras/targetCamera\";\r\nimport { VRExperienceHelperOptions, VRExperienceHelper } from \"../Cameras/VR/vrExperienceHelper\";\r\n\r\nimport \"../Materials/Textures/Loaders/ddsTextureLoader\";\r\nimport \"../Materials/Textures/Loaders/envTextureLoader\";\r\nimport \"../Materials/Textures/Loaders/ktxTextureLoader\";\r\nimport \"../Meshes/Builders/boxBuilder\";\r\nimport { WebXRDefaultExperience, WebXRDefaultExperienceOptions } from '../XR/webXRDefaultExperience';\r\n\r\n/** @hidden */\r\nexport var _forceSceneHelpersToBundle = true;\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * Creates a default light for the scene.\r\n         * @see https://doc.babylonjs.com/How_To/Fast_Build#create-default-light\r\n         * @param replace has the default false, when true replaces the existing lights in the scene with a hemispheric light\r\n         */\r\n        createDefaultLight(replace?: boolean): void;\r\n\r\n        /**\r\n         * Creates a default camera for the scene.\r\n         * @see https://doc.babylonjs.com/How_To/Fast_Build#create-default-camera\r\n         * @param createArcRotateCamera has the default false which creates a free camera, when true creates an arc rotate camera\r\n         * @param replace has default false, when true replaces the active camera in the scene\r\n         * @param attachCameraControls has default false, when true attaches camera controls to the canvas.\r\n         */\r\n        createDefaultCamera(createArcRotateCamera?: boolean, replace?: boolean, attachCameraControls?: boolean): void;\r\n\r\n        /**\r\n         * Creates a default camera and a default light.\r\n         * @see https://doc.babylonjs.com/how_to/Fast_Build#create-default-camera-or-light\r\n         * @param createArcRotateCamera has the default false which creates a free camera, when true creates an arc rotate camera\r\n         * @param replace has the default false, when true replaces the active camera/light in the scene\r\n         * @param attachCameraControls has the default false, when true attaches camera controls to the canvas.\r\n         */\r\n        createDefaultCameraOrLight(createArcRotateCamera?: boolean, replace?: boolean, attachCameraControls?: boolean): void;\r\n\r\n        /**\r\n         * Creates a new sky box\r\n         * @see https://doc.babylonjs.com/how_to/Fast_Build#create-default-skybox\r\n         * @param environmentTexture defines the texture to use as environment texture\r\n         * @param pbr has default false which requires the StandardMaterial to be used, when true PBRMaterial must be used\r\n         * @param scale defines the overall scale of the skybox\r\n         * @param blur is only available when pbr is true, default is 0, no blur, maximum value is 1\r\n         * @param setGlobalEnvTexture has default true indicating that scene.environmentTexture must match the current skybox texture\r\n         * @returns a new mesh holding the sky box\r\n         */\r\n        createDefaultSkybox(environmentTexture?: BaseTexture, pbr?: boolean, scale?: number, blur?: number, setGlobalEnvTexture?: boolean): Nullable<Mesh>;\r\n\r\n        /**\r\n         * Creates a new environment\r\n         * @see https://doc.babylonjs.com/How_To/Fast_Build#create-default-environment\r\n         * @param options defines the options you can use to configure the environment\r\n         * @returns the new EnvironmentHelper\r\n         */\r\n        createDefaultEnvironment(options?: Partial<IEnvironmentHelperOptions>): Nullable<EnvironmentHelper>;\r\n\r\n        /**\r\n         * Creates a new VREXperienceHelper\r\n         * @see https://doc.babylonjs.com/how_to/webvr_helper\r\n         * @param webVROptions defines the options used to create the new VREXperienceHelper\r\n         * @returns a new VREXperienceHelper\r\n         */\r\n        createDefaultVRExperience(webVROptions?: VRExperienceHelperOptions): VRExperienceHelper;\r\n\r\n        /**\r\n         * Creates a new WebXRDefaultExperience\r\n         * @see https://doc.babylonjs.com/how_to/introduction_to_webxr\r\n         * @param options experience options\r\n         * @returns a promise for a new WebXRDefaultExperience\r\n         */\r\n        createDefaultXRExperienceAsync(options: WebXRDefaultExperienceOptions): Promise<WebXRDefaultExperience>;\r\n    }\r\n}\r\n\r\nScene.prototype.createDefaultLight = function(replace = false): void {\r\n    // Dispose existing light in replace mode.\r\n    if (replace) {\r\n        if (this.lights) {\r\n            for (var i = 0; i < this.lights.length; i++) {\r\n                this.lights[i].dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Light\r\n    if (this.lights.length === 0) {\r\n        new HemisphericLight(\"default light\", Vector3.Up(), this);\r\n    }\r\n};\r\n\r\nScene.prototype.createDefaultCamera = function(createArcRotateCamera = false, replace = false, attachCameraControls = false): void {\r\n    // Dispose existing camera in replace mode.\r\n    if (replace) {\r\n        if (this.activeCamera) {\r\n            this.activeCamera.dispose();\r\n            this.activeCamera = null;\r\n        }\r\n    }\r\n\r\n    // Camera\r\n    if (!this.activeCamera) {\r\n        var worldExtends = this.getWorldExtends((mesh) => mesh.isVisible && mesh.isEnabled());\r\n        var worldSize = worldExtends.max.subtract(worldExtends.min);\r\n        var worldCenter = worldExtends.min.add(worldSize.scale(0.5));\r\n\r\n        var camera: TargetCamera;\r\n        var radius = worldSize.length() * 1.5;\r\n        // empty scene scenario!\r\n        if (!isFinite(radius)) {\r\n            radius = 1;\r\n            worldCenter.copyFromFloats(0, 0, 0);\r\n        }\r\n        if (createArcRotateCamera) {\r\n            var arcRotateCamera = new ArcRotateCamera(\"default camera\", -(Math.PI / 2), Math.PI / 2, radius, worldCenter, this);\r\n            arcRotateCamera.lowerRadiusLimit = radius * 0.01;\r\n            arcRotateCamera.wheelPrecision = 100 / radius;\r\n            camera = arcRotateCamera;\r\n        }\r\n        else {\r\n            var freeCamera = new FreeCamera(\"default camera\", new Vector3(worldCenter.x, worldCenter.y, -radius), this);\r\n            freeCamera.setTarget(worldCenter);\r\n            camera = freeCamera;\r\n        }\r\n        camera.minZ = radius * 0.01;\r\n        camera.maxZ = radius * 1000;\r\n        camera.speed = radius * 0.2;\r\n        this.activeCamera = camera;\r\n\r\n        const canvas = this.getEngine().getInputElement();\r\n        if (attachCameraControls && canvas) {\r\n            camera.attachControl();\r\n        }\r\n    }\r\n};\r\n\r\nScene.prototype.createDefaultCameraOrLight = function(createArcRotateCamera = false, replace = false, attachCameraControls = false): void {\r\n    this.createDefaultLight(replace);\r\n    this.createDefaultCamera(createArcRotateCamera, replace, attachCameraControls);\r\n};\r\n\r\nScene.prototype.createDefaultSkybox = function(environmentTexture?: BaseTexture, pbr = false, scale = 1000, blur = 0, setGlobalEnvTexture = true): Nullable<Mesh> {\r\n\r\n    if (!environmentTexture) {\r\n        Logger.Warn(\"Can not create default skybox without environment texture.\");\r\n        return null;\r\n    }\r\n\r\n    if (setGlobalEnvTexture) {\r\n        if (environmentTexture) {\r\n            this.environmentTexture = environmentTexture;\r\n        }\r\n    }\r\n\r\n    // Skybox\r\n    var hdrSkybox = Mesh.CreateBox(\"hdrSkyBox\", scale, this);\r\n    if (pbr) {\r\n        let hdrSkyboxMaterial = new PBRMaterial(\"skyBox\", this);\r\n        hdrSkyboxMaterial.backFaceCulling = false;\r\n        hdrSkyboxMaterial.reflectionTexture = environmentTexture.clone();\r\n        if (hdrSkyboxMaterial.reflectionTexture) {\r\n            hdrSkyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\r\n        }\r\n        hdrSkyboxMaterial.microSurface = 1.0 - blur;\r\n        hdrSkyboxMaterial.disableLighting = true;\r\n        hdrSkyboxMaterial.twoSidedLighting = true;\r\n        hdrSkybox.infiniteDistance = true;\r\n        hdrSkybox.material = hdrSkyboxMaterial;\r\n    }\r\n    else {\r\n        let skyboxMaterial = new StandardMaterial(\"skyBox\", this);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.reflectionTexture = environmentTexture.clone();\r\n        if (skyboxMaterial.reflectionTexture) {\r\n            skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\r\n        }\r\n        skyboxMaterial.disableLighting = true;\r\n        hdrSkybox.infiniteDistance = true;\r\n        hdrSkybox.material = skyboxMaterial;\r\n    }\r\n    hdrSkybox.isPickable = false;\r\n    return hdrSkybox;\r\n};\r\n\r\nScene.prototype.createDefaultEnvironment = function(options: Partial<IEnvironmentHelperOptions>): Nullable<EnvironmentHelper> {\r\n    if (EnvironmentHelper) {\r\n        return new EnvironmentHelper(options, this);\r\n    }\r\n    return null;\r\n};\r\n\r\nScene.prototype.createDefaultVRExperience = function(webVROptions: VRExperienceHelperOptions = {}): VRExperienceHelper {\r\n    return new VRExperienceHelper(this, webVROptions);\r\n};\r\n\r\nScene.prototype.createDefaultXRExperienceAsync = function(options: WebXRDefaultExperienceOptions = {}): Promise<WebXRDefaultExperience> {\r\n    return WebXRDefaultExperience.CreateAsync(this, options).then((helper) => {\r\n        return helper;\r\n    });\r\n};\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}