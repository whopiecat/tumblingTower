{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsImageProcessingConfiguration, expandToProperty } from \"../../Misc/decorators\";\nimport { Logger } from \"../../Misc/logger\";\nimport { SmartArray } from \"../../Misc/smartArray\";\nimport { BRDFTextureTools } from \"../../Misc/brdfTextureTools\";\nimport { Scene } from \"../../scene\";\nimport { Vector4 } from \"../../Maths/math.vector\";\nimport { VertexBuffer } from \"../../Meshes/buffer\";\nimport { PBRClearCoatConfiguration } from \"./pbrClearCoatConfiguration\";\nimport { PBRAnisotropicConfiguration } from \"./pbrAnisotropicConfiguration\";\nimport { PBRBRDFConfiguration } from \"./pbrBRDFConfiguration\";\nimport { PBRSheenConfiguration } from \"./pbrSheenConfiguration\";\nimport { PBRSubSurfaceConfiguration } from \"./pbrSubSurfaceConfiguration\";\nimport { PrePassConfiguration } from \"../prePassConfiguration\";\nimport { Color3, TmpColors } from '../../Maths/math.color';\nimport { Scalar } from \"../../Maths/math.scalar\";\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration\";\nimport { Material } from \"../../Materials/material\";\nimport { MaterialDefines } from \"../../Materials/materialDefines\";\nimport { PushMaterial } from \"../../Materials/pushMaterial\";\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\nimport { Texture } from \"../../Materials/Textures/texture\";\nimport { MaterialFlags } from \"../materialFlags\";\nimport \"../../Materials/Textures/baseTexture.polynomial\";\nimport \"../../Shaders/pbr.fragment\";\nimport \"../../Shaders/pbr.vertex\";\nimport { EffectFallbacks } from '../effectFallbacks';\nimport { DetailMapConfiguration } from '../material.detailMapConfiguration';\nvar onCreatedEffectParameters = {\n  effect: null,\n  subMesh: null\n};\n/**\r\n * Manages the defines for the PBR Material.\r\n * @hidden\r\n */\n\nvar PBRMaterialDefines =\n/** @class */\nfunction (_super) {\n  __extends(PBRMaterialDefines, _super);\n  /**\r\n   * Initializes the PBR Material defines.\r\n   */\n\n\n  function PBRMaterialDefines() {\n    var _this = _super.call(this) || this;\n\n    _this.PBR = true;\n    _this.NUM_SAMPLES = \"0\";\n    _this.REALTIME_FILTERING = false;\n    _this.MAINUV1 = false;\n    _this.MAINUV2 = false;\n    _this.UV1 = false;\n    _this.UV2 = false;\n    _this.ALBEDO = false;\n    _this.GAMMAALBEDO = false;\n    _this.ALBEDODIRECTUV = 0;\n    _this.VERTEXCOLOR = false;\n    _this.DETAIL = false;\n    _this.DETAILDIRECTUV = 0;\n    _this.DETAIL_NORMALBLENDMETHOD = 0;\n    _this.AMBIENT = false;\n    _this.AMBIENTDIRECTUV = 0;\n    _this.AMBIENTINGRAYSCALE = false;\n    _this.OPACITY = false;\n    _this.VERTEXALPHA = false;\n    _this.OPACITYDIRECTUV = 0;\n    _this.OPACITYRGB = false;\n    _this.ALPHATEST = false;\n    _this.DEPTHPREPASS = false;\n    _this.ALPHABLEND = false;\n    _this.ALPHAFROMALBEDO = false;\n    _this.ALPHATESTVALUE = \"0.5\";\n    _this.SPECULAROVERALPHA = false;\n    _this.RADIANCEOVERALPHA = false;\n    _this.ALPHAFRESNEL = false;\n    _this.LINEARALPHAFRESNEL = false;\n    _this.PREMULTIPLYALPHA = false;\n    _this.EMISSIVE = false;\n    _this.EMISSIVEDIRECTUV = 0;\n    _this.REFLECTIVITY = false;\n    _this.REFLECTIVITYDIRECTUV = 0;\n    _this.SPECULARTERM = false;\n    _this.MICROSURFACEFROMREFLECTIVITYMAP = false;\n    _this.MICROSURFACEAUTOMATIC = false;\n    _this.LODBASEDMICROSFURACE = false;\n    _this.MICROSURFACEMAP = false;\n    _this.MICROSURFACEMAPDIRECTUV = 0;\n    _this.METALLICWORKFLOW = false;\n    _this.ROUGHNESSSTOREINMETALMAPALPHA = false;\n    _this.ROUGHNESSSTOREINMETALMAPGREEN = false;\n    _this.METALLNESSSTOREINMETALMAPBLUE = false;\n    _this.AOSTOREINMETALMAPRED = false;\n    _this.METALLIC_REFLECTANCE = false;\n    _this.METALLIC_REFLECTANCEDIRECTUV = 0;\n    _this.ENVIRONMENTBRDF = false;\n    _this.ENVIRONMENTBRDF_RGBD = false;\n    _this.NORMAL = false;\n    _this.TANGENT = false;\n    _this.BUMP = false;\n    _this.BUMPDIRECTUV = 0;\n    _this.OBJECTSPACE_NORMALMAP = false;\n    _this.PARALLAX = false;\n    _this.PARALLAXOCCLUSION = false;\n    _this.NORMALXYSCALE = true;\n    _this.LIGHTMAP = false;\n    _this.LIGHTMAPDIRECTUV = 0;\n    _this.USELIGHTMAPASSHADOWMAP = false;\n    _this.GAMMALIGHTMAP = false;\n    _this.RGBDLIGHTMAP = false;\n    _this.REFLECTION = false;\n    _this.REFLECTIONMAP_3D = false;\n    _this.REFLECTIONMAP_SPHERICAL = false;\n    _this.REFLECTIONMAP_PLANAR = false;\n    _this.REFLECTIONMAP_CUBIC = false;\n    _this.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n    _this.REFLECTIONMAP_PROJECTION = false;\n    _this.REFLECTIONMAP_SKYBOX = false;\n    _this.REFLECTIONMAP_EXPLICIT = false;\n    _this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n    _this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n    _this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n    _this.INVERTCUBICMAP = false;\n    _this.USESPHERICALFROMREFLECTIONMAP = false;\n    _this.USEIRRADIANCEMAP = false;\n    _this.SPHERICAL_HARMONICS = false;\n    _this.USESPHERICALINVERTEX = false;\n    _this.REFLECTIONMAP_OPPOSITEZ = false;\n    _this.LODINREFLECTIONALPHA = false;\n    _this.GAMMAREFLECTION = false;\n    _this.RGBDREFLECTION = false;\n    _this.LINEARSPECULARREFLECTION = false;\n    _this.RADIANCEOCCLUSION = false;\n    _this.HORIZONOCCLUSION = false;\n    _this.INSTANCES = false;\n    _this.THIN_INSTANCES = false;\n    _this.PREPASS = false;\n    _this.PREPASS_IRRADIANCE = false;\n    _this.PREPASS_IRRADIANCE_INDEX = -1;\n    _this.PREPASS_ALBEDO = false;\n    _this.PREPASS_ALBEDO_INDEX = -1;\n    _this.PREPASS_DEPTHNORMAL = false;\n    _this.PREPASS_DEPTHNORMAL_INDEX = -1;\n    _this.PREPASS_POSITION = false;\n    _this.PREPASS_POSITION_INDEX = -1;\n    _this.PREPASS_VELOCITY = false;\n    _this.PREPASS_VELOCITY_INDEX = -1;\n    _this.PREPASS_REFLECTIVITY = false;\n    _this.PREPASS_REFLECTIVITY_INDEX = -1;\n    _this.SCENE_MRT_COUNT = 0;\n    _this.NUM_BONE_INFLUENCERS = 0;\n    _this.BonesPerMesh = 0;\n    _this.BONETEXTURE = false;\n    _this.BONES_VELOCITY_ENABLED = false;\n    _this.NONUNIFORMSCALING = false;\n    _this.MORPHTARGETS = false;\n    _this.MORPHTARGETS_NORMAL = false;\n    _this.MORPHTARGETS_TANGENT = false;\n    _this.MORPHTARGETS_UV = false;\n    _this.NUM_MORPH_INFLUENCERS = 0;\n    _this.IMAGEPROCESSING = false;\n    _this.VIGNETTE = false;\n    _this.VIGNETTEBLENDMODEMULTIPLY = false;\n    _this.VIGNETTEBLENDMODEOPAQUE = false;\n    _this.TONEMAPPING = false;\n    _this.TONEMAPPING_ACES = false;\n    _this.CONTRAST = false;\n    _this.COLORCURVES = false;\n    _this.COLORGRADING = false;\n    _this.COLORGRADING3D = false;\n    _this.SAMPLER3DGREENDEPTH = false;\n    _this.SAMPLER3DBGRMAP = false;\n    _this.IMAGEPROCESSINGPOSTPROCESS = false;\n    _this.EXPOSURE = false;\n    _this.MULTIVIEW = false;\n    _this.USEPHYSICALLIGHTFALLOFF = false;\n    _this.USEGLTFLIGHTFALLOFF = false;\n    _this.TWOSIDEDLIGHTING = false;\n    _this.SHADOWFLOAT = false;\n    _this.CLIPPLANE = false;\n    _this.CLIPPLANE2 = false;\n    _this.CLIPPLANE3 = false;\n    _this.CLIPPLANE4 = false;\n    _this.CLIPPLANE5 = false;\n    _this.CLIPPLANE6 = false;\n    _this.POINTSIZE = false;\n    _this.FOG = false;\n    _this.LOGARITHMICDEPTH = false;\n    _this.FORCENORMALFORWARD = false;\n    _this.SPECULARAA = false;\n    _this.CLEARCOAT = false;\n    _this.CLEARCOAT_DEFAULTIOR = false;\n    _this.CLEARCOAT_TEXTURE = false;\n    _this.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n    _this.CLEARCOAT_TEXTUREDIRECTUV = 0;\n    _this.CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\n    _this.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n    _this.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n    _this.CLEARCOAT_BUMP = false;\n    _this.CLEARCOAT_BUMPDIRECTUV = 0;\n    _this.CLEARCOAT_REMAP_F0 = true;\n    _this.CLEARCOAT_TINT = false;\n    _this.CLEARCOAT_TINT_TEXTURE = false;\n    _this.CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\n    _this.ANISOTROPIC = false;\n    _this.ANISOTROPIC_TEXTURE = false;\n    _this.ANISOTROPIC_TEXTUREDIRECTUV = 0;\n    _this.BRDF_V_HEIGHT_CORRELATED = false;\n    _this.MS_BRDF_ENERGY_CONSERVATION = false;\n    _this.SPECULAR_GLOSSINESS_ENERGY_CONSERVATION = false;\n    _this.SHEEN = false;\n    _this.SHEEN_TEXTURE = false;\n    _this.SHEEN_TEXTURE_ROUGHNESS = false;\n    _this.SHEEN_TEXTUREDIRECTUV = 0;\n    _this.SHEEN_TEXTURE_ROUGHNESSDIRECTUV = 0;\n    _this.SHEEN_LINKWITHALBEDO = false;\n    _this.SHEEN_ROUGHNESS = false;\n    _this.SHEEN_ALBEDOSCALING = false;\n    _this.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n    _this.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = false;\n    _this.SUBSURFACE = false;\n    _this.SS_REFRACTION = false;\n    _this.SS_TRANSLUCENCY = false;\n    _this.SS_SCATTERING = false;\n    _this.SS_THICKNESSANDMASK_TEXTURE = false;\n    _this.SS_THICKNESSANDMASK_TEXTUREDIRECTUV = 0;\n    _this.SS_REFRACTIONMAP_3D = false;\n    _this.SS_REFRACTIONMAP_OPPOSITEZ = false;\n    _this.SS_LODINREFRACTIONALPHA = false;\n    _this.SS_GAMMAREFRACTION = false;\n    _this.SS_RGBDREFRACTION = false;\n    _this.SS_LINEARSPECULARREFRACTION = false;\n    _this.SS_LINKREFRACTIONTOTRANSPARENCY = false;\n    _this.SS_ALBEDOFORREFRACTIONTINT = false;\n    _this.SS_MASK_FROM_THICKNESS_TEXTURE = false;\n    _this.SS_MASK_FROM_THICKNESS_TEXTURE_GLTF = false;\n    _this.UNLIT = false;\n    _this.DEBUGMODE = 0;\n\n    _this.rebuild();\n\n    return _this;\n  }\n  /**\r\n   * Resets the PBR Material defines.\r\n   */\n\n\n  PBRMaterialDefines.prototype.reset = function () {\n    _super.prototype.reset.call(this);\n\n    this.ALPHATESTVALUE = \"0.5\";\n    this.PBR = true;\n  };\n\n  return PBRMaterialDefines;\n}(MaterialDefines);\n\nexport { PBRMaterialDefines };\n/**\r\n * The Physically based material base class of BJS.\r\n *\r\n * This offers the main features of a standard PBR material.\r\n * For more information, please refer to the documentation :\r\n * https://doc.babylonjs.com/how_to/physically_based_rendering\r\n */\n\nvar PBRBaseMaterial =\n/** @class */\nfunction (_super) {\n  __extends(PBRBaseMaterial, _super);\n  /**\r\n   * Instantiates a new PBRMaterial instance.\r\n   *\r\n   * @param name The material name\r\n   * @param scene The scene the material will be use in.\r\n   */\n\n\n  function PBRBaseMaterial(name, scene) {\n    var _this = _super.call(this, name, scene) || this;\n    /**\r\n     * Intensity of the direct lights e.g. the four lights available in your scene.\r\n     * This impacts both the direct diffuse and specular highlights.\r\n     */\n\n\n    _this._directIntensity = 1.0;\n    /**\r\n     * Intensity of the emissive part of the material.\r\n     * This helps controlling the emissive effect without modifying the emissive color.\r\n     */\n\n    _this._emissiveIntensity = 1.0;\n    /**\r\n     * Intensity of the environment e.g. how much the environment will light the object\r\n     * either through harmonics for rough material or through the refelction for shiny ones.\r\n     */\n\n    _this._environmentIntensity = 1.0;\n    /**\r\n     * This is a special control allowing the reduction of the specular highlights coming from the\r\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\r\n     */\n\n    _this._specularIntensity = 1.0;\n    /**\r\n     * This stores the direct, emissive, environment, and specular light intensities into a Vector4.\r\n     */\n\n    _this._lightingInfos = new Vector4(_this._directIntensity, _this._emissiveIntensity, _this._environmentIntensity, _this._specularIntensity);\n    /**\r\n     * Debug Control allowing disabling the bump map on this material.\r\n     */\n\n    _this._disableBumpMap = false;\n    /**\r\n     * AKA Diffuse Texture in standard nomenclature.\r\n     */\n\n    _this._albedoTexture = null;\n    /**\r\n     * AKA Occlusion Texture in other nomenclature.\r\n     */\n\n    _this._ambientTexture = null;\n    /**\r\n     * AKA Occlusion Texture Intensity in other nomenclature.\r\n     */\n\n    _this._ambientTextureStrength = 1.0;\n    /**\r\n     * Defines how much the AO map is occluding the analytical lights (point spot...).\r\n     * 1 means it completely occludes it\r\n     * 0 mean it has no impact\r\n     */\n\n    _this._ambientTextureImpactOnAnalyticalLights = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\n    /**\r\n     * Stores the alpha values in a texture.\r\n     */\n\n    _this._opacityTexture = null;\n    /**\r\n     * Stores the reflection values in a texture.\r\n     */\n\n    _this._reflectionTexture = null;\n    /**\r\n     * Stores the emissive values in a texture.\r\n     */\n\n    _this._emissiveTexture = null;\n    /**\r\n     * AKA Specular texture in other nomenclature.\r\n     */\n\n    _this._reflectivityTexture = null;\n    /**\r\n     * Used to switch from specular/glossiness to metallic/roughness workflow.\r\n     */\n\n    _this._metallicTexture = null;\n    /**\r\n     * Specifies the metallic scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the metalness values of the metallic texture.\r\n     */\n\n    _this._metallic = null;\n    /**\r\n     * Specifies the roughness scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the roughness values of the metallic texture.\r\n     */\n\n    _this._roughness = null;\n    /**\r\n     * In metallic workflow, specifies an F0 factor to help configuring the material F0.\r\n     * By default the indexOfrefraction is used to compute F0;\r\n     *\r\n     * This is used as a factor against the default reflectance at normal incidence to tweak it.\r\n     *\r\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor;\r\n     * F90 = metallicReflectanceColor;\r\n     */\n\n    _this._metallicF0Factor = 1;\n    /**\r\n     * In metallic workflow, specifies an F90 color to help configuring the material F90.\r\n     * By default the F90 is always 1;\r\n     *\r\n     * Please note that this factor is also used as a factor against the default reflectance at normal incidence.\r\n     *\r\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor\r\n     * F90 = metallicReflectanceColor;\r\n     */\n\n    _this._metallicReflectanceColor = Color3.White();\n    /**\r\n     * Defines to store metallicReflectanceColor in RGB and metallicF0Factor in A\r\n     * This is multiply against the scalar values defined in the material.\r\n     */\n\n    _this._metallicReflectanceTexture = null;\n    /**\r\n     * Used to enable roughness/glossiness fetch from a separate channel depending on the current mode.\r\n     * Gray Scale represents roughness in metallic mode and glossiness in specular mode.\r\n     */\n\n    _this._microSurfaceTexture = null;\n    /**\r\n     * Stores surface normal data used to displace a mesh in a texture.\r\n     */\n\n    _this._bumpTexture = null;\n    /**\r\n     * Stores the pre-calculated light information of a mesh in a texture.\r\n     */\n\n    _this._lightmapTexture = null;\n    /**\r\n     * The color of a material in ambient lighting.\r\n     */\n\n    _this._ambientColor = new Color3(0, 0, 0);\n    /**\r\n     * AKA Diffuse Color in other nomenclature.\r\n     */\n\n    _this._albedoColor = new Color3(1, 1, 1);\n    /**\r\n     * AKA Specular Color in other nomenclature.\r\n     */\n\n    _this._reflectivityColor = new Color3(1, 1, 1);\n    /**\r\n     * The color applied when light is reflected from a material.\r\n     */\n\n    _this._reflectionColor = new Color3(1, 1, 1);\n    /**\r\n     * The color applied when light is emitted from a material.\r\n     */\n\n    _this._emissiveColor = new Color3(0, 0, 0);\n    /**\r\n     * AKA Glossiness in other nomenclature.\r\n     */\n\n    _this._microSurface = 0.9;\n    /**\r\n     * Specifies that the material will use the light map as a show map.\r\n     */\n\n    _this._useLightmapAsShadowmap = false;\n    /**\r\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\r\n     * makes the reflect vector face the model (under horizon).\r\n     */\n\n    _this._useHorizonOcclusion = true;\n    /**\r\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\r\n     * too much the area relying on ambient texture to define their ambient occlusion.\r\n     */\n\n    _this._useRadianceOcclusion = true;\n    /**\r\n     * Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.\r\n     */\n\n    _this._useAlphaFromAlbedoTexture = false;\n    /**\r\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most limunous ones).\r\n     * A car glass is a good exemple of that. When sun reflects on it you can not see what is behind.\r\n     */\n\n    _this._useSpecularOverAlpha = true;\n    /**\r\n     * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\r\n     */\n\n    _this._useMicroSurfaceFromReflectivityMapAlpha = false;\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its alpha channel.\r\n     */\n\n    _this._useRoughnessFromMetallicTextureAlpha = true;\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its green channel.\r\n     */\n\n    _this._useRoughnessFromMetallicTextureGreen = false;\n    /**\r\n     * Specifies if the metallic texture contains the metallness information in its blue channel.\r\n     */\n\n    _this._useMetallnessFromMetallicTextureBlue = false;\n    /**\r\n     * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\r\n     */\n\n    _this._useAmbientOcclusionFromMetallicTextureRed = false;\n    /**\r\n     * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\r\n     */\n\n    _this._useAmbientInGrayScale = false;\n    /**\r\n     * In case the reflectivity map does not contain the microsurface information in its alpha channel,\r\n     * The material will try to infer what glossiness each pixel should be.\r\n     */\n\n    _this._useAutoMicroSurfaceFromReflectivityMap = false;\n    /**\r\n     * Defines the  falloff type used in this material.\r\n     * It by default is Physical.\r\n     */\n\n    _this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most limunous ones).\r\n     * A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.\r\n     */\n\n    _this._useRadianceOverAlpha = true;\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     */\n\n    _this._useObjectSpaceNormalMap = false;\n    /**\r\n     * Allows using the bump map in parallax mode.\r\n     */\n\n    _this._useParallax = false;\n    /**\r\n     * Allows using the bump map in parallax occlusion mode.\r\n     */\n\n    _this._useParallaxOcclusion = false;\n    /**\r\n     * Controls the scale bias of the parallax mode.\r\n     */\n\n    _this._parallaxScaleBias = 0.05;\n    /**\r\n     * If sets to true, disables all the lights affecting the material.\r\n     */\n\n    _this._disableLighting = false;\n    /**\r\n     * Number of Simultaneous lights allowed on the material.\r\n     */\n\n    _this._maxSimultaneousLights = 4;\n    /**\r\n     * If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\r\n     */\n\n    _this._invertNormalMapX = false;\n    /**\r\n     * If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\r\n     */\n\n    _this._invertNormalMapY = false;\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\n\n    _this._twoSidedLighting = false;\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\n\n    _this._alphaCutOff = 0.4;\n    /**\r\n     * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\r\n     */\n\n    _this._forceAlphaTest = false;\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\r\n     */\n\n    _this._useAlphaFresnel = false;\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\r\n     */\n\n    _this._useLinearAlphaFresnel = false;\n    /**\r\n     * Specifies the environment BRDF texture used to comput the scale and offset roughness values\r\n     * from cos thetav and roughness:\r\n     * http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\r\n     */\n\n    _this._environmentBRDFTexture = null;\n    /**\r\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\r\n     */\n\n    _this._forceIrradianceInFragment = false;\n    _this._realTimeFiltering = false;\n    _this._realTimeFilteringQuality = 8;\n    /**\r\n     * Force normal to face away from face.\r\n     */\n\n    _this._forceNormalForward = false;\n    /**\r\n     * Enables specular anti aliasing in the PBR shader.\r\n     * It will both interacts on the Geometry for analytical and IBL lighting.\r\n     * It also prefilter the roughness map based on the bump values.\r\n     */\n\n    _this._enableSpecularAntiAliasing = false;\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\n\n    _this._imageProcessingObserver = null;\n    /**\r\n     * Stores the available render targets.\r\n     */\n\n    _this._renderTargets = new SmartArray(16);\n    /**\r\n     * Sets the global ambient color for the material used in lighting calculations.\r\n     */\n\n    _this._globalAmbientColor = new Color3(0, 0, 0);\n    /**\r\n     * Enables the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\n\n    _this._useLogarithmicDepth = false;\n    /**\r\n     * If set to true, no lighting calculations will be applied.\r\n     */\n\n    _this._unlit = false;\n    _this._debugMode = 0;\n    /**\r\n     * @hidden\r\n     * This is reserved for the inspector.\r\n     * Defines the material debug mode.\r\n     * It helps seeing only some components of the material while troubleshooting.\r\n     */\n\n    _this.debugMode = 0;\n    /**\r\n     * @hidden\r\n     * This is reserved for the inspector.\r\n     * Specify from where on screen the debug mode should start.\r\n     * The value goes from -1 (full screen) to 1 (not visible)\r\n     * It helps with side by side comparison against the final render\r\n     * This defaults to -1\r\n     */\n\n    _this.debugLimit = -1;\n    /**\r\n     * @hidden\r\n     * This is reserved for the inspector.\r\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\r\n     * You can use the factor to better multiply the final value.\r\n     */\n\n    _this.debugFactor = 1;\n    /**\r\n     * Defines the clear coat layer parameters for the material.\r\n     */\n\n    _this.clearCoat = new PBRClearCoatConfiguration(_this._markAllSubMeshesAsTexturesDirty.bind(_this));\n    /**\r\n     * Defines the anisotropic parameters for the material.\r\n     */\n\n    _this.anisotropy = new PBRAnisotropicConfiguration(_this._markAllSubMeshesAsTexturesDirty.bind(_this));\n    /**\r\n     * Defines the BRDF parameters for the material.\r\n     */\n\n    _this.brdf = new PBRBRDFConfiguration(_this._markAllSubMeshesAsMiscDirty.bind(_this));\n    /**\r\n     * Defines the Sheen parameters for the material.\r\n     */\n\n    _this.sheen = new PBRSheenConfiguration(_this._markAllSubMeshesAsTexturesDirty.bind(_this));\n    /**\r\n     * Defines the detail map parameters for the material.\r\n     */\n\n    _this.detailMap = new DetailMapConfiguration(_this._markAllSubMeshesAsTexturesDirty.bind(_this));\n    _this._rebuildInParallel = false; // Setup the default processing configuration to the scene.\n\n    _this._attachImageProcessingConfiguration(null);\n\n    _this.getRenderTargetTextures = function () {\n      _this._renderTargets.reset();\n\n      if (MaterialFlags.ReflectionTextureEnabled && _this._reflectionTexture && _this._reflectionTexture.isRenderTarget) {\n        _this._renderTargets.push(_this._reflectionTexture);\n      }\n\n      _this.subSurface.fillRenderTargetTextures(_this._renderTargets);\n\n      return _this._renderTargets;\n    };\n\n    _this._environmentBRDFTexture = BRDFTextureTools.GetEnvironmentBRDFTexture(scene);\n    _this.subSurface = new PBRSubSurfaceConfiguration(_this._markAllSubMeshesAsTexturesDirty.bind(_this), _this._markScenePrePassDirty.bind(_this), scene);\n    _this.prePassConfiguration = new PrePassConfiguration();\n    return _this;\n  }\n\n  Object.defineProperty(PBRBaseMaterial.prototype, \"realTimeFiltering\", {\n    /**\r\n     * Enables realtime filtering on the texture.\r\n     */\n    get: function () {\n      return this._realTimeFiltering;\n    },\n    set: function (b) {\n      this._realTimeFiltering = b;\n      this.markAsDirty(1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRBaseMaterial.prototype, \"realTimeFilteringQuality\", {\n    /**\r\n     * Quality switch for realtime filtering\r\n     */\n    get: function () {\n      return this._realTimeFilteringQuality;\n    },\n    set: function (n) {\n      this._realTimeFilteringQuality = n;\n      this.markAsDirty(1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRBaseMaterial.prototype, \"canRenderToMRT\", {\n    /**\r\n     * Can this material render to several textures at once\r\n     */\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Attaches a new image processing configuration to the PBR Material.\r\n   * @param configuration\r\n   */\n\n  PBRBaseMaterial.prototype._attachImageProcessingConfiguration = function (configuration) {\n    var _this = this;\n\n    if (configuration === this._imageProcessingConfiguration) {\n      return;\n    } // Detaches observer.\n\n\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    } // Pick the scene configuration if needed.\n\n\n    if (!configuration) {\n      this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\n    } else {\n      this._imageProcessingConfiguration = configuration;\n    } // Attaches observer.\n\n\n    if (this._imageProcessingConfiguration) {\n      this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(function () {\n        _this._markAllSubMeshesAsImageProcessingDirty();\n      });\n    }\n  };\n\n  Object.defineProperty(PBRBaseMaterial.prototype, \"hasRenderTargetTextures\", {\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\n    get: function () {\n      if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n        return true;\n      }\n\n      return this.subSurface.hasRenderTargetTextures();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets the name of the material class.\r\n   */\n\n  PBRBaseMaterial.prototype.getClassName = function () {\n    return \"PBRBaseMaterial\";\n  };\n\n  Object.defineProperty(PBRBaseMaterial.prototype, \"useLogarithmicDepth\", {\n    /**\r\n     * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\n    get: function () {\n      return this._useLogarithmicDepth;\n    },\n\n    /**\r\n     * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\n    set: function (value) {\n      this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRBaseMaterial.prototype, \"_disableAlphaBlending\", {\n    /**\r\n     * Returns true if alpha blending should be disabled.\r\n     */\n    get: function () {\n      return this.subSurface.disableAlphaBlending || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_OPAQUE || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Specifies whether or not this material should be rendered in alpha blend mode.\r\n   */\n\n  PBRBaseMaterial.prototype.needAlphaBlending = function () {\n    if (this._disableAlphaBlending) {\n      return false;\n    }\n\n    return this.alpha < 1.0 || this._opacityTexture != null || this._shouldUseAlphaFromAlbedoTexture();\n  };\n  /**\r\n   * Specifies whether or not this material should be rendered in alpha test mode.\r\n   */\n\n\n  PBRBaseMaterial.prototype.needAlphaTesting = function () {\n    if (this._forceAlphaTest) {\n      return true;\n    }\n\n    if (this.subSurface.disableAlphaBlending) {\n      return false;\n    }\n\n    return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST);\n  };\n  /**\r\n   * Specifies whether or not the alpha value of the albedo texture should be used for alpha blending.\r\n   */\n\n\n  PBRBaseMaterial.prototype._shouldUseAlphaFromAlbedoTexture = function () {\n    return this._albedoTexture != null && this._albedoTexture.hasAlpha && this._useAlphaFromAlbedoTexture && this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE;\n  };\n  /**\r\n   * Specifies whether or not there is a usable alpha channel for transparency.\r\n   */\n\n\n  PBRBaseMaterial.prototype._hasAlphaChannel = function () {\n    return this._albedoTexture != null && this._albedoTexture.hasAlpha || this._opacityTexture != null;\n  };\n  /**\r\n   * Gets the texture used for the alpha test.\r\n   */\n\n\n  PBRBaseMaterial.prototype.getAlphaTestTexture = function () {\n    return this._albedoTexture;\n  };\n  /**\r\n   * Specifies that the submesh is ready to be used.\r\n   * @param mesh - BJS mesh.\r\n   * @param subMesh - A submesh of the BJS mesh.  Used to check if it is ready.\r\n   * @param useInstances - Specifies that instances should be used.\r\n   * @returns - boolean indicating that the submesh is ready or not.\r\n   */\n\n\n  PBRBaseMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh, useInstances) {\n    if (subMesh.effect && this.isFrozen) {\n      if (subMesh.effect._wasPreviouslyReady) {\n        return true;\n      }\n    }\n\n    if (!subMesh._materialDefines) {\n      subMesh._materialDefines = new PBRMaterialDefines();\n    }\n\n    var defines = subMesh._materialDefines;\n\n    if (this._isReadyForSubMesh(subMesh)) {\n      return true;\n    }\n\n    var scene = this.getScene();\n    var engine = scene.getEngine();\n\n    if (defines._areTexturesDirty) {\n      if (scene.texturesEnabled) {\n        if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n          if (!this._albedoTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n          if (!this._ambientTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n          if (!this._opacityTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        var reflectionTexture = this._getReflectionTexture();\n\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          if (!reflectionTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n\n          if (reflectionTexture.irradianceTexture && !reflectionTexture.irradianceTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n          if (!this._lightmapTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n          if (!this._emissiveTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (MaterialFlags.SpecularTextureEnabled) {\n          if (this._metallicTexture) {\n            if (!this._metallicTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          } else if (this._reflectivityTexture) {\n            if (!this._reflectivityTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n\n          if (this._metallicReflectanceTexture) {\n            if (!this._metallicReflectanceTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n\n          if (this._microSurfaceTexture) {\n            if (!this._microSurfaceTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n        }\n\n        if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n          // Bump texture cannot be not blocking.\n          if (!this._bumpTexture.isReady()) {\n            return false;\n          }\n        }\n\n        if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n          // This is blocking.\n          if (!this._environmentBRDFTexture.isReady()) {\n            return false;\n          }\n        }\n      }\n    }\n\n    if (!this.subSurface.isReadyForSubMesh(defines, scene) || !this.clearCoat.isReadyForSubMesh(defines, scene, engine, this._disableBumpMap) || !this.sheen.isReadyForSubMesh(defines, scene) || !this.anisotropy.isReadyForSubMesh(defines, scene) || !this.detailMap.isReadyForSubMesh(defines, scene)) {\n      return false;\n    }\n\n    if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n      if (!this._imageProcessingConfiguration.isReady()) {\n        return false;\n      }\n    }\n\n    if (!engine.getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n      mesh.createNormals(true);\n      Logger.Warn(\"PBRMaterial: Normals have been created for the mesh: \" + mesh.name);\n    }\n\n    var previousEffect = subMesh.effect;\n    var lightDisposed = defines._areLightsDisposed;\n\n    var effect = this._prepareEffect(mesh, defines, this.onCompiled, this.onError, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\n\n    if (effect) {\n      if (this._onEffectCreatedObservable) {\n        onCreatedEffectParameters.effect = effect;\n        onCreatedEffectParameters.subMesh = subMesh;\n\n        this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n      } // Use previous effect while new one is compiling\n\n\n      if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n        effect = previousEffect;\n        this._rebuildInParallel = true;\n        defines.markAsUnprocessed();\n\n        if (lightDisposed) {\n          // re register in case it takes more than one frame.\n          defines._areLightsDisposed = true;\n          return false;\n        }\n      } else {\n        this._rebuildInParallel = false;\n        scene.resetCachedMaterial();\n        subMesh.setEffect(effect, defines);\n        this.buildUniformLayout();\n      }\n    }\n\n    if (!subMesh.effect || !subMesh.effect.isReady()) {\n      return false;\n    }\n\n    defines._renderId = scene.getRenderId();\n    subMesh.effect._wasPreviouslyReady = true;\n    return true;\n  };\n  /**\r\n   * Specifies if the material uses metallic roughness workflow.\r\n   * @returns boolean specifiying if the material uses metallic roughness workflow.\r\n  */\n\n\n  PBRBaseMaterial.prototype.isMetallicWorkflow = function () {\n    if (this._metallic != null || this._roughness != null || this._metallicTexture) {\n      return true;\n    }\n\n    return false;\n  };\n\n  PBRBaseMaterial.prototype._prepareEffect = function (mesh, defines, onCompiled, onError, useInstances, useClipPlane, useThinInstances) {\n    if (onCompiled === void 0) {\n      onCompiled = null;\n    }\n\n    if (onError === void 0) {\n      onError = null;\n    }\n\n    if (useInstances === void 0) {\n      useInstances = null;\n    }\n\n    if (useClipPlane === void 0) {\n      useClipPlane = null;\n    }\n\n    this._prepareDefines(mesh, defines, useInstances, useClipPlane, useThinInstances);\n\n    if (!defines.isDirty) {\n      return null;\n    }\n\n    defines.markAsProcessed();\n    var scene = this.getScene();\n    var engine = scene.getEngine(); // Fallbacks\n\n    var fallbacks = new EffectFallbacks();\n    var fallbackRank = 0;\n\n    if (defines.USESPHERICALINVERTEX) {\n      fallbacks.addFallback(fallbackRank++, \"USESPHERICALINVERTEX\");\n    }\n\n    if (defines.FOG) {\n      fallbacks.addFallback(fallbackRank, \"FOG\");\n    }\n\n    if (defines.SPECULARAA) {\n      fallbacks.addFallback(fallbackRank, \"SPECULARAA\");\n    }\n\n    if (defines.POINTSIZE) {\n      fallbacks.addFallback(fallbackRank, \"POINTSIZE\");\n    }\n\n    if (defines.LOGARITHMICDEPTH) {\n      fallbacks.addFallback(fallbackRank, \"LOGARITHMICDEPTH\");\n    }\n\n    if (defines.PARALLAX) {\n      fallbacks.addFallback(fallbackRank, \"PARALLAX\");\n    }\n\n    if (defines.PARALLAXOCCLUSION) {\n      fallbacks.addFallback(fallbackRank++, \"PARALLAXOCCLUSION\");\n    }\n\n    fallbackRank = PBRAnisotropicConfiguration.AddFallbacks(defines, fallbacks, fallbackRank);\n    fallbackRank = PBRAnisotropicConfiguration.AddFallbacks(defines, fallbacks, fallbackRank);\n    fallbackRank = PBRSubSurfaceConfiguration.AddFallbacks(defines, fallbacks, fallbackRank);\n    fallbackRank = PBRSheenConfiguration.AddFallbacks(defines, fallbacks, fallbackRank);\n\n    if (defines.ENVIRONMENTBRDF) {\n      fallbacks.addFallback(fallbackRank++, \"ENVIRONMENTBRDF\");\n    }\n\n    if (defines.TANGENT) {\n      fallbacks.addFallback(fallbackRank++, \"TANGENT\");\n    }\n\n    if (defines.BUMP) {\n      fallbacks.addFallback(fallbackRank++, \"BUMP\");\n    }\n\n    fallbackRank = MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights, fallbackRank++);\n\n    if (defines.SPECULARTERM) {\n      fallbacks.addFallback(fallbackRank++, \"SPECULARTERM\");\n    }\n\n    if (defines.USESPHERICALFROMREFLECTIONMAP) {\n      fallbacks.addFallback(fallbackRank++, \"USESPHERICALFROMREFLECTIONMAP\");\n    }\n\n    if (defines.USEIRRADIANCEMAP) {\n      fallbacks.addFallback(fallbackRank++, \"USEIRRADIANCEMAP\");\n    }\n\n    if (defines.LIGHTMAP) {\n      fallbacks.addFallback(fallbackRank++, \"LIGHTMAP\");\n    }\n\n    if (defines.NORMAL) {\n      fallbacks.addFallback(fallbackRank++, \"NORMAL\");\n    }\n\n    if (defines.AMBIENT) {\n      fallbacks.addFallback(fallbackRank++, \"AMBIENT\");\n    }\n\n    if (defines.EMISSIVE) {\n      fallbacks.addFallback(fallbackRank++, \"EMISSIVE\");\n    }\n\n    if (defines.VERTEXCOLOR) {\n      fallbacks.addFallback(fallbackRank++, \"VERTEXCOLOR\");\n    }\n\n    if (defines.MORPHTARGETS) {\n      fallbacks.addFallback(fallbackRank++, \"MORPHTARGETS\");\n    }\n\n    if (defines.MULTIVIEW) {\n      fallbacks.addFallback(0, \"MULTIVIEW\");\n    } //Attributes\n\n\n    var attribs = [VertexBuffer.PositionKind];\n\n    if (defines.NORMAL) {\n      attribs.push(VertexBuffer.NormalKind);\n    }\n\n    if (defines.TANGENT) {\n      attribs.push(VertexBuffer.TangentKind);\n    }\n\n    if (defines.UV1) {\n      attribs.push(VertexBuffer.UVKind);\n    }\n\n    if (defines.UV2) {\n      attribs.push(VertexBuffer.UV2Kind);\n    }\n\n    if (defines.VERTEXCOLOR) {\n      attribs.push(VertexBuffer.ColorKind);\n    }\n\n    MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n    MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n    MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\n    var shaderName = \"pbr\";\n    var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vAmbientColor\", \"vAlbedoColor\", \"vReflectivityColor\", \"vMetallicReflectanceFactors\", \"vEmissiveColor\", \"visibility\", \"vReflectionColor\", \"vFogInfos\", \"vFogColor\", \"pointSize\", \"vAlbedoInfos\", \"vAmbientInfos\", \"vOpacityInfos\", \"vReflectionInfos\", \"vReflectionPosition\", \"vReflectionSize\", \"vEmissiveInfos\", \"vReflectivityInfos\", \"vReflectionFilteringInfo\", \"vMetallicReflectanceInfos\", \"vMicroSurfaceSamplerInfos\", \"vBumpInfos\", \"vLightmapInfos\", \"mBones\", \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"albedoMatrix\", \"ambientMatrix\", \"opacityMatrix\", \"reflectionMatrix\", \"emissiveMatrix\", \"reflectivityMatrix\", \"normalMatrix\", \"microSurfaceSamplerMatrix\", \"bumpMatrix\", \"lightmapMatrix\", \"metallicReflectanceMatrix\", \"vLightingIntensity\", \"logarithmicDepthConstant\", \"vSphericalX\", \"vSphericalY\", \"vSphericalZ\", \"vSphericalXX_ZZ\", \"vSphericalYY_ZZ\", \"vSphericalZZ\", \"vSphericalXY\", \"vSphericalYZ\", \"vSphericalZX\", \"vSphericalL00\", \"vSphericalL1_1\", \"vSphericalL10\", \"vSphericalL11\", \"vSphericalL2_2\", \"vSphericalL2_1\", \"vSphericalL20\", \"vSphericalL21\", \"vSphericalL22\", \"vReflectionMicrosurfaceInfos\", \"vTangentSpaceParams\", \"boneTextureWidth\", \"vDebugMode\"];\n    var samplers = [\"albedoSampler\", \"reflectivitySampler\", \"ambientSampler\", \"emissiveSampler\", \"bumpSampler\", \"lightmapSampler\", \"opacitySampler\", \"reflectionSampler\", \"reflectionSamplerLow\", \"reflectionSamplerHigh\", \"irradianceSampler\", \"microSurfaceSampler\", \"environmentBrdfSampler\", \"boneSampler\", \"metallicReflectanceSampler\"];\n    var uniformBuffers = [\"Material\", \"Scene\"];\n    DetailMapConfiguration.AddUniforms(uniforms);\n    DetailMapConfiguration.AddSamplers(samplers);\n    PBRSubSurfaceConfiguration.AddUniforms(uniforms);\n    PBRSubSurfaceConfiguration.AddSamplers(samplers);\n    PBRClearCoatConfiguration.AddUniforms(uniforms);\n    PBRClearCoatConfiguration.AddSamplers(samplers);\n    PBRAnisotropicConfiguration.AddUniforms(uniforms);\n    PBRAnisotropicConfiguration.AddSamplers(samplers);\n    PBRSheenConfiguration.AddUniforms(uniforms);\n    PBRSheenConfiguration.AddSamplers(samplers);\n    PrePassConfiguration.AddUniforms(uniforms);\n    PrePassConfiguration.AddSamplers(uniforms);\n\n    if (ImageProcessingConfiguration) {\n      ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n      ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n    }\n\n    MaterialHelper.PrepareUniformsAndSamplersList({\n      uniformsNames: uniforms,\n      uniformBuffersNames: uniformBuffers,\n      samplers: samplers,\n      defines: defines,\n      maxSimultaneousLights: this._maxSimultaneousLights\n    });\n    var csnrOptions = {};\n\n    if (this.customShaderNameResolve) {\n      shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\n    }\n\n    var join = defines.toString();\n    return engine.createEffect(shaderName, {\n      attributes: attribs,\n      uniformsNames: uniforms,\n      uniformBuffersNames: uniformBuffers,\n      samplers: samplers,\n      defines: join,\n      fallbacks: fallbacks,\n      onCompiled: onCompiled,\n      onError: onError,\n      indexParameters: {\n        maxSimultaneousLights: this._maxSimultaneousLights,\n        maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS\n      },\n      processFinalCode: csnrOptions.processFinalCode,\n      multiTarget: defines.PREPASS\n    }, engine);\n  };\n\n  PBRBaseMaterial.prototype._prepareDefines = function (mesh, defines, useInstances, useClipPlane, useThinInstances) {\n    if (useInstances === void 0) {\n      useInstances = null;\n    }\n\n    if (useClipPlane === void 0) {\n      useClipPlane = null;\n    }\n\n    if (useThinInstances === void 0) {\n      useThinInstances = false;\n    }\n\n    var scene = this.getScene();\n    var engine = scene.getEngine(); // Lights\n\n    MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n    defines._needNormals = true; // Multiview\n\n    MaterialHelper.PrepareDefinesForMultiview(scene, defines); // PrePass\n\n    MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT); // Textures\n\n    defines.METALLICWORKFLOW = this.isMetallicWorkflow();\n\n    if (defines._areTexturesDirty) {\n      defines._needUVs = false;\n\n      if (scene.texturesEnabled) {\n        if (scene.getEngine().getCaps().textureLOD) {\n          defines.LODBASEDMICROSFURACE = true;\n        }\n\n        if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._albedoTexture, defines, \"ALBEDO\");\n          defines.GAMMAALBEDO = this._albedoTexture.gammaSpace;\n        } else {\n          defines.ALBEDO = false;\n        }\n\n        if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\n          defines.AMBIENTINGRAYSCALE = this._useAmbientInGrayScale;\n        } else {\n          defines.AMBIENT = false;\n        }\n\n        if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\n          defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\n        } else {\n          defines.OPACITY = false;\n        }\n\n        var reflectionTexture = this._getReflectionTexture();\n\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          defines.REFLECTION = true;\n          defines.GAMMAREFLECTION = reflectionTexture.gammaSpace;\n          defines.RGBDREFLECTION = reflectionTexture.isRGBD;\n          defines.REFLECTIONMAP_OPPOSITEZ = this.getScene().useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ;\n          defines.LODINREFLECTIONALPHA = reflectionTexture.lodLevelInAlpha;\n          defines.LINEARSPECULARREFLECTION = reflectionTexture.linearSpecularLOD;\n\n          if (this.realTimeFiltering && this.realTimeFilteringQuality > 0) {\n            defines.NUM_SAMPLES = \"\" + this.realTimeFilteringQuality;\n\n            if (engine.webGLVersion > 1) {\n              defines.NUM_SAMPLES = defines.NUM_SAMPLES + \"u\";\n            }\n\n            defines.REALTIME_FILTERING = true;\n          } else {\n            defines.REALTIME_FILTERING = false;\n          }\n\n          if (reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE) {\n            defines.INVERTCUBICMAP = true;\n          }\n\n          defines.REFLECTIONMAP_3D = reflectionTexture.isCube;\n          defines.REFLECTIONMAP_CUBIC = false;\n          defines.REFLECTIONMAP_EXPLICIT = false;\n          defines.REFLECTIONMAP_PLANAR = false;\n          defines.REFLECTIONMAP_PROJECTION = false;\n          defines.REFLECTIONMAP_SKYBOX = false;\n          defines.REFLECTIONMAP_SPHERICAL = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n          defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n\n          switch (reflectionTexture.coordinatesMode) {\n            case Texture.EXPLICIT_MODE:\n              defines.REFLECTIONMAP_EXPLICIT = true;\n              break;\n\n            case Texture.PLANAR_MODE:\n              defines.REFLECTIONMAP_PLANAR = true;\n              break;\n\n            case Texture.PROJECTION_MODE:\n              defines.REFLECTIONMAP_PROJECTION = true;\n              break;\n\n            case Texture.SKYBOX_MODE:\n              defines.REFLECTIONMAP_SKYBOX = true;\n              break;\n\n            case Texture.SPHERICAL_MODE:\n              defines.REFLECTIONMAP_SPHERICAL = true;\n              break;\n\n            case Texture.EQUIRECTANGULAR_MODE:\n              defines.REFLECTIONMAP_EQUIRECTANGULAR = true;\n              break;\n\n            case Texture.FIXED_EQUIRECTANGULAR_MODE:\n              defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = true;\n              break;\n\n            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\n              defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = true;\n              break;\n\n            case Texture.CUBIC_MODE:\n            case Texture.INVCUBIC_MODE:\n            default:\n              defines.REFLECTIONMAP_CUBIC = true;\n              defines.USE_LOCAL_REFLECTIONMAP_CUBIC = reflectionTexture.boundingBoxSize ? true : false;\n              break;\n          }\n\n          if (reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\n            if (reflectionTexture.irradianceTexture) {\n              defines.USEIRRADIANCEMAP = true;\n              defines.USESPHERICALFROMREFLECTIONMAP = false;\n            } // Assume using spherical polynomial if the reflection texture is a cube map\n            else if (reflectionTexture.isCube) {\n                defines.USESPHERICALFROMREFLECTIONMAP = true;\n                defines.USEIRRADIANCEMAP = false;\n\n                if (this._forceIrradianceInFragment || this.realTimeFiltering || scene.getEngine().getCaps().maxVaryingVectors <= 8) {\n                  defines.USESPHERICALINVERTEX = false;\n                } else {\n                  defines.USESPHERICALINVERTEX = true;\n                }\n              }\n          }\n        } else {\n          defines.REFLECTION = false;\n          defines.REFLECTIONMAP_3D = false;\n          defines.REFLECTIONMAP_SPHERICAL = false;\n          defines.REFLECTIONMAP_PLANAR = false;\n          defines.REFLECTIONMAP_CUBIC = false;\n          defines.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n          defines.REFLECTIONMAP_PROJECTION = false;\n          defines.REFLECTIONMAP_SKYBOX = false;\n          defines.REFLECTIONMAP_EXPLICIT = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n          defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n          defines.INVERTCUBICMAP = false;\n          defines.USESPHERICALFROMREFLECTIONMAP = false;\n          defines.USEIRRADIANCEMAP = false;\n          defines.USESPHERICALINVERTEX = false;\n          defines.REFLECTIONMAP_OPPOSITEZ = false;\n          defines.LODINREFLECTIONALPHA = false;\n          defines.GAMMAREFLECTION = false;\n          defines.RGBDREFLECTION = false;\n          defines.LINEARSPECULARREFLECTION = false;\n        }\n\n        if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\n          defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\n          defines.GAMMALIGHTMAP = this._lightmapTexture.gammaSpace;\n          defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\n        } else {\n          defines.LIGHTMAP = false;\n        }\n\n        if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\n        } else {\n          defines.EMISSIVE = false;\n        }\n\n        if (MaterialFlags.SpecularTextureEnabled) {\n          if (this._metallicTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._metallicTexture, defines, \"REFLECTIVITY\");\n            defines.ROUGHNESSSTOREINMETALMAPALPHA = this._useRoughnessFromMetallicTextureAlpha;\n            defines.ROUGHNESSSTOREINMETALMAPGREEN = !this._useRoughnessFromMetallicTextureAlpha && this._useRoughnessFromMetallicTextureGreen;\n            defines.METALLNESSSTOREINMETALMAPBLUE = this._useMetallnessFromMetallicTextureBlue;\n            defines.AOSTOREINMETALMAPRED = this._useAmbientOcclusionFromMetallicTextureRed;\n          } else if (this._reflectivityTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._reflectivityTexture, defines, \"REFLECTIVITY\");\n            defines.MICROSURFACEFROMREFLECTIVITYMAP = this._useMicroSurfaceFromReflectivityMapAlpha;\n            defines.MICROSURFACEAUTOMATIC = this._useAutoMicroSurfaceFromReflectivityMap;\n          } else {\n            defines.REFLECTIVITY = false;\n          }\n\n          if (this._metallicReflectanceTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._metallicReflectanceTexture, defines, \"METALLIC_REFLECTANCE\");\n          } else {\n            defines.METALLIC_REFLECTANCE = false;\n          }\n\n          if (this._microSurfaceTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._microSurfaceTexture, defines, \"MICROSURFACEMAP\");\n          } else {\n            defines.MICROSURFACEMAP = false;\n          }\n        } else {\n          defines.REFLECTIVITY = false;\n          defines.MICROSURFACEMAP = false;\n        }\n\n        if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\n\n          if (this._useParallax && this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n            defines.PARALLAX = true;\n            defines.PARALLAXOCCLUSION = !!this._useParallaxOcclusion;\n          } else {\n            defines.PARALLAX = false;\n          }\n\n          defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\n        } else {\n          defines.BUMP = false;\n        }\n\n        if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n          defines.ENVIRONMENTBRDF = true; // Not actual true RGBD, only the B chanel is encoded as RGBD for sheen.\n\n          defines.ENVIRONMENTBRDF_RGBD = this._environmentBRDFTexture.isRGBD;\n        } else {\n          defines.ENVIRONMENTBRDF = false;\n          defines.ENVIRONMENTBRDF_RGBD = false;\n        }\n\n        if (this._shouldUseAlphaFromAlbedoTexture()) {\n          defines.ALPHAFROMALBEDO = true;\n        } else {\n          defines.ALPHAFROMALBEDO = false;\n        }\n      }\n\n      defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\n\n      if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\n        defines.USEPHYSICALLIGHTFALLOFF = false;\n        defines.USEGLTFLIGHTFALLOFF = false;\n      } else if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\n        defines.USEPHYSICALLIGHTFALLOFF = false;\n        defines.USEGLTFLIGHTFALLOFF = true;\n      } else {\n        defines.USEPHYSICALLIGHTFALLOFF = true;\n        defines.USEGLTFLIGHTFALLOFF = false;\n      }\n\n      defines.RADIANCEOVERALPHA = this._useRadianceOverAlpha;\n\n      if (!this.backFaceCulling && this._twoSidedLighting) {\n        defines.TWOSIDEDLIGHTING = true;\n      } else {\n        defines.TWOSIDEDLIGHTING = false;\n      }\n\n      defines.SPECULARAA = scene.getEngine().getCaps().standardDerivatives && this._enableSpecularAntiAliasing;\n    }\n\n    if (defines._areTexturesDirty || defines._areMiscDirty) {\n      defines.ALPHATESTVALUE = \"\" + this._alphaCutOff + (this._alphaCutOff % 1 === 0 ? \".\" : \"\");\n      defines.PREMULTIPLYALPHA = this.alphaMode === 7 || this.alphaMode === 8;\n      defines.ALPHABLEND = this.needAlphaBlendingForMesh(mesh);\n      defines.ALPHAFRESNEL = this._useAlphaFresnel || this._useLinearAlphaFresnel;\n      defines.LINEARALPHAFRESNEL = this._useLinearAlphaFresnel;\n    }\n\n    if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n      this._imageProcessingConfiguration.prepareDefines(defines);\n    }\n\n    defines.FORCENORMALFORWARD = this._forceNormalForward;\n    defines.RADIANCEOCCLUSION = this._useRadianceOcclusion;\n    defines.HORIZONOCCLUSION = this._useHorizonOcclusion; // Misc.\n\n    if (defines._areMiscDirty) {\n      MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest, defines);\n      defines.UNLIT = this._unlit || (this.pointsCloud || this.wireframe) && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind);\n      defines.DEBUGMODE = this._debugMode;\n    } // External config\n\n\n    this.detailMap.prepareDefines(defines, scene);\n    this.subSurface.prepareDefines(defines, scene);\n    this.clearCoat.prepareDefines(defines, scene);\n    this.anisotropy.prepareDefines(defines, mesh, scene);\n    this.brdf.prepareDefines(defines);\n    this.sheen.prepareDefines(defines, scene); // Values that need to be evaluated on every frame\n\n    MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false, useClipPlane, useThinInstances); // Attribs\n\n    MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true, this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE);\n  };\n  /**\r\n   * Force shader compilation\r\n   */\n\n\n  PBRBaseMaterial.prototype.forceCompilation = function (mesh, onCompiled, options) {\n    var _this = this;\n\n    var localOptions = __assign({\n      clipPlane: false,\n      useInstances: false\n    }, options);\n\n    var defines = new PBRMaterialDefines();\n\n    var effect = this._prepareEffect(mesh, defines, undefined, undefined, localOptions.useInstances, localOptions.clipPlane, mesh.hasThinInstances);\n\n    if (this._onEffectCreatedObservable) {\n      onCreatedEffectParameters.effect = effect;\n      onCreatedEffectParameters.subMesh = null;\n\n      this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n    }\n\n    if (effect.isReady()) {\n      if (onCompiled) {\n        onCompiled(this);\n      }\n    } else {\n      effect.onCompileObservable.add(function () {\n        if (onCompiled) {\n          onCompiled(_this);\n        }\n      });\n    }\n  };\n  /**\r\n   * Initializes the uniform buffer layout for the shader.\r\n   */\n\n\n  PBRBaseMaterial.prototype.buildUniformLayout = function () {\n    // Order is important !\n    var ubo = this._uniformBuffer;\n    ubo.addUniform(\"vAlbedoInfos\", 2);\n    ubo.addUniform(\"vAmbientInfos\", 4);\n    ubo.addUniform(\"vOpacityInfos\", 2);\n    ubo.addUniform(\"vEmissiveInfos\", 2);\n    ubo.addUniform(\"vLightmapInfos\", 2);\n    ubo.addUniform(\"vReflectivityInfos\", 3);\n    ubo.addUniform(\"vMicroSurfaceSamplerInfos\", 2);\n    ubo.addUniform(\"vReflectionInfos\", 2);\n    ubo.addUniform(\"vReflectionFilteringInfo\", 2);\n    ubo.addUniform(\"vReflectionPosition\", 3);\n    ubo.addUniform(\"vReflectionSize\", 3);\n    ubo.addUniform(\"vBumpInfos\", 3);\n    ubo.addUniform(\"albedoMatrix\", 16);\n    ubo.addUniform(\"ambientMatrix\", 16);\n    ubo.addUniform(\"opacityMatrix\", 16);\n    ubo.addUniform(\"emissiveMatrix\", 16);\n    ubo.addUniform(\"lightmapMatrix\", 16);\n    ubo.addUniform(\"reflectivityMatrix\", 16);\n    ubo.addUniform(\"microSurfaceSamplerMatrix\", 16);\n    ubo.addUniform(\"bumpMatrix\", 16);\n    ubo.addUniform(\"vTangentSpaceParams\", 2);\n    ubo.addUniform(\"reflectionMatrix\", 16);\n    ubo.addUniform(\"vReflectionColor\", 3);\n    ubo.addUniform(\"vAlbedoColor\", 4);\n    ubo.addUniform(\"vLightingIntensity\", 4);\n    ubo.addUniform(\"vReflectionMicrosurfaceInfos\", 3);\n    ubo.addUniform(\"pointSize\", 1);\n    ubo.addUniform(\"vReflectivityColor\", 4);\n    ubo.addUniform(\"vEmissiveColor\", 3);\n    ubo.addUniform(\"visibility\", 1);\n    ubo.addUniform(\"vMetallicReflectanceFactors\", 4);\n    ubo.addUniform(\"vMetallicReflectanceInfos\", 2);\n    ubo.addUniform(\"metallicReflectanceMatrix\", 16);\n    PBRClearCoatConfiguration.PrepareUniformBuffer(ubo);\n    PBRAnisotropicConfiguration.PrepareUniformBuffer(ubo);\n    PBRSheenConfiguration.PrepareUniformBuffer(ubo);\n    PBRSubSurfaceConfiguration.PrepareUniformBuffer(ubo);\n    DetailMapConfiguration.PrepareUniformBuffer(ubo);\n    ubo.create();\n  };\n  /**\r\n   * Unbinds the material from the mesh\r\n   */\n\n\n  PBRBaseMaterial.prototype.unbind = function () {\n    if (this._activeEffect) {\n      var needFlag = false;\n\n      if (this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n        this._activeEffect.setTexture(\"reflection2DSampler\", null);\n\n        needFlag = true;\n      }\n\n      if (this.subSurface.unbind(this._activeEffect)) {\n        needFlag = true;\n      }\n\n      if (needFlag) {\n        this._markAllSubMeshesAsTexturesDirty();\n      }\n    }\n\n    _super.prototype.unbind.call(this);\n  };\n  /**\r\n   * Binds the submesh data.\r\n   * @param world - The world matrix.\r\n   * @param mesh - The BJS mesh.\r\n   * @param subMesh - A submesh of the BJS mesh.\r\n   */\n\n\n  PBRBaseMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {\n    var scene = this.getScene();\n    var defines = subMesh._materialDefines;\n\n    if (!defines) {\n      return;\n    }\n\n    var effect = subMesh.effect;\n\n    if (!effect) {\n      return;\n    }\n\n    this._activeEffect = effect; // Matrices\n\n    if (!defines.INSTANCES || defines.THIN_INSTANCES) {\n      this.bindOnlyWorldMatrix(world);\n    } // PrePass\n\n\n    this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen); // Normal Matrix\n\n    if (defines.OBJECTSPACE_NORMALMAP) {\n      world.toNormalMatrix(this._normalMatrix);\n      this.bindOnlyNormalMatrix(this._normalMatrix);\n    }\n\n    var mustRebind = this._mustRebind(scene, effect, mesh.visibility); // Bones\n\n\n    MaterialHelper.BindBonesParameters(mesh, this._activeEffect, this.prePassConfiguration);\n    var reflectionTexture = null;\n    var ubo = this._uniformBuffer;\n\n    if (mustRebind) {\n      var engine = scene.getEngine();\n      ubo.bindToEffect(effect, \"Material\");\n      this.bindViewProjection(effect);\n      reflectionTexture = this._getReflectionTexture();\n\n      if (!ubo.useUbo || !this.isFrozen || !ubo.isSync) {\n        // Texture uniforms\n        if (scene.texturesEnabled) {\n          if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n            ubo.updateFloat2(\"vAlbedoInfos\", this._albedoTexture.coordinatesIndex, this._albedoTexture.level);\n            MaterialHelper.BindTextureMatrix(this._albedoTexture, ubo, \"albedo\");\n          }\n\n          if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n            ubo.updateFloat4(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level, this._ambientTextureStrength, this._ambientTextureImpactOnAnalyticalLights);\n            MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\n          }\n\n          if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n            ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\n            MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\n          }\n\n          if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n            ubo.updateMatrix(\"reflectionMatrix\", reflectionTexture.getReflectionTextureMatrix());\n            ubo.updateFloat2(\"vReflectionInfos\", reflectionTexture.level, 0);\n\n            if (reflectionTexture.boundingBoxSize) {\n              var cubeTexture = reflectionTexture;\n              ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\n              ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\n            }\n\n            if (this.realTimeFiltering) {\n              var width = reflectionTexture.getSize().width;\n              ubo.updateFloat2(\"vReflectionFilteringInfo\", width, Scalar.Log2(width));\n            }\n\n            if (!defines.USEIRRADIANCEMAP) {\n              var polynomials = reflectionTexture.sphericalPolynomial;\n\n              if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\n                if (defines.SPHERICAL_HARMONICS) {\n                  var preScaledHarmonics = polynomials.preScaledHarmonics;\n\n                  this._activeEffect.setVector3(\"vSphericalL00\", preScaledHarmonics.l00);\n\n                  this._activeEffect.setVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\n\n                  this._activeEffect.setVector3(\"vSphericalL10\", preScaledHarmonics.l10);\n\n                  this._activeEffect.setVector3(\"vSphericalL11\", preScaledHarmonics.l11);\n\n                  this._activeEffect.setVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\n\n                  this._activeEffect.setVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\n\n                  this._activeEffect.setVector3(\"vSphericalL20\", preScaledHarmonics.l20);\n\n                  this._activeEffect.setVector3(\"vSphericalL21\", preScaledHarmonics.l21);\n\n                  this._activeEffect.setVector3(\"vSphericalL22\", preScaledHarmonics.l22);\n                } else {\n                  this._activeEffect.setFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\n\n                  this._activeEffect.setFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\n\n                  this._activeEffect.setFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\n\n                  this._activeEffect.setFloat3(\"vSphericalXX_ZZ\", polynomials.xx.x - polynomials.zz.x, polynomials.xx.y - polynomials.zz.y, polynomials.xx.z - polynomials.zz.z);\n\n                  this._activeEffect.setFloat3(\"vSphericalYY_ZZ\", polynomials.yy.x - polynomials.zz.x, polynomials.yy.y - polynomials.zz.y, polynomials.yy.z - polynomials.zz.z);\n\n                  this._activeEffect.setFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\n\n                  this._activeEffect.setFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\n\n                  this._activeEffect.setFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\n\n                  this._activeEffect.setFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\n                }\n              }\n            }\n\n            ubo.updateFloat3(\"vReflectionMicrosurfaceInfos\", reflectionTexture.getSize().width, reflectionTexture.lodGenerationScale, reflectionTexture.lodGenerationOffset);\n          }\n\n          if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n            ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\n            MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\n          }\n\n          if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n            ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\n            MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\n          }\n\n          if (MaterialFlags.SpecularTextureEnabled) {\n            if (this._metallicTexture) {\n              ubo.updateFloat3(\"vReflectivityInfos\", this._metallicTexture.coordinatesIndex, this._metallicTexture.level, this._ambientTextureStrength);\n              MaterialHelper.BindTextureMatrix(this._metallicTexture, ubo, \"reflectivity\");\n            } else if (this._reflectivityTexture) {\n              ubo.updateFloat3(\"vReflectivityInfos\", this._reflectivityTexture.coordinatesIndex, this._reflectivityTexture.level, 1.0);\n              MaterialHelper.BindTextureMatrix(this._reflectivityTexture, ubo, \"reflectivity\");\n            }\n\n            if (this._metallicReflectanceTexture) {\n              ubo.updateFloat2(\"vMetallicReflectanceInfos\", this._metallicReflectanceTexture.coordinatesIndex, this._metallicReflectanceTexture.level);\n              MaterialHelper.BindTextureMatrix(this._metallicReflectanceTexture, ubo, \"metallicReflectance\");\n            }\n\n            if (this._microSurfaceTexture) {\n              ubo.updateFloat2(\"vMicroSurfaceSamplerInfos\", this._microSurfaceTexture.coordinatesIndex, this._microSurfaceTexture.level);\n              MaterialHelper.BindTextureMatrix(this._microSurfaceTexture, ubo, \"microSurfaceSampler\");\n            }\n          }\n\n          if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n            ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level, this._parallaxScaleBias);\n            MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\n\n            if (scene._mirroredCameraPosition) {\n              ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\n            } else {\n              ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\n            }\n          }\n        } // Point size\n\n\n        if (this.pointsCloud) {\n          ubo.updateFloat(\"pointSize\", this.pointSize);\n        } // Colors\n\n\n        if (defines.METALLICWORKFLOW) {\n          TmpColors.Color3[0].r = this._metallic === undefined || this._metallic === null ? 1 : this._metallic;\n          TmpColors.Color3[0].g = this._roughness === undefined || this._roughness === null ? 1 : this._roughness;\n          ubo.updateColor4(\"vReflectivityColor\", TmpColors.Color3[0], 1);\n          var ior = this.subSurface.indexOfRefraction;\n          var outside_ior = 1; // consider air as clear coat and other layaers would remap in the shader.\n          // We are here deriving our default reflectance from a common value for none metallic surface.\n          // Based of the schlick fresnel approximation model\n          // for dielectrics.\n\n          var f0 = Math.pow((ior - outside_ior) / (ior + outside_ior), 2); // Tweak the default F0 and F90 based on our given setup\n\n          this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\n\n          var metallicF90 = this._metallicF0Factor;\n          ubo.updateColor4(\"vMetallicReflectanceFactors\", TmpColors.Color3[0], metallicF90);\n        } else {\n          ubo.updateColor4(\"vReflectivityColor\", this._reflectivityColor, this._microSurface);\n        }\n\n        ubo.updateColor3(\"vEmissiveColor\", MaterialFlags.EmissiveTextureEnabled ? this._emissiveColor : Color3.BlackReadOnly);\n        ubo.updateColor3(\"vReflectionColor\", this._reflectionColor);\n\n        if (!defines.SS_REFRACTION && this.subSurface.linkRefractionWithTransparency) {\n          ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, 1);\n        } else {\n          ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, this.alpha);\n        } // Misc\n\n\n        this._lightingInfos.x = this._directIntensity;\n        this._lightingInfos.y = this._emissiveIntensity;\n        this._lightingInfos.z = this._environmentIntensity * scene.environmentIntensity;\n        this._lightingInfos.w = this._specularIntensity;\n        ubo.updateVector4(\"vLightingIntensity\", this._lightingInfos);\n      } // Visibility\n\n\n      ubo.updateFloat(\"visibility\", mesh.visibility); // Textures\n\n      if (scene.texturesEnabled) {\n        if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n          ubo.setTexture(\"albedoSampler\", this._albedoTexture);\n        }\n\n        if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n          ubo.setTexture(\"ambientSampler\", this._ambientTexture);\n        }\n\n        if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n          ubo.setTexture(\"opacitySampler\", this._opacityTexture);\n        }\n\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          if (defines.LODBASEDMICROSFURACE) {\n            ubo.setTexture(\"reflectionSampler\", reflectionTexture);\n          } else {\n            ubo.setTexture(\"reflectionSampler\", reflectionTexture._lodTextureMid || reflectionTexture);\n            ubo.setTexture(\"reflectionSamplerLow\", reflectionTexture._lodTextureLow || reflectionTexture);\n            ubo.setTexture(\"reflectionSamplerHigh\", reflectionTexture._lodTextureHigh || reflectionTexture);\n          }\n\n          if (defines.USEIRRADIANCEMAP) {\n            ubo.setTexture(\"irradianceSampler\", reflectionTexture.irradianceTexture);\n          }\n        }\n\n        if (defines.ENVIRONMENTBRDF) {\n          ubo.setTexture(\"environmentBrdfSampler\", this._environmentBRDFTexture);\n        }\n\n        if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n          ubo.setTexture(\"emissiveSampler\", this._emissiveTexture);\n        }\n\n        if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n          ubo.setTexture(\"lightmapSampler\", this._lightmapTexture);\n        }\n\n        if (MaterialFlags.SpecularTextureEnabled) {\n          if (this._metallicTexture) {\n            ubo.setTexture(\"reflectivitySampler\", this._metallicTexture);\n          } else if (this._reflectivityTexture) {\n            ubo.setTexture(\"reflectivitySampler\", this._reflectivityTexture);\n          }\n\n          if (this._metallicReflectanceTexture) {\n            ubo.setTexture(\"metallicReflectanceSampler\", this._metallicReflectanceTexture);\n          }\n\n          if (this._microSurfaceTexture) {\n            ubo.setTexture(\"microSurfaceSampler\", this._microSurfaceTexture);\n          }\n        }\n\n        if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n          ubo.setTexture(\"bumpSampler\", this._bumpTexture);\n        }\n      }\n\n      this.detailMap.bindForSubMesh(ubo, scene, this.isFrozen);\n      this.subSurface.bindForSubMesh(ubo, scene, engine, this.isFrozen, defines.LODBASEDMICROSFURACE, this.realTimeFiltering);\n      this.clearCoat.bindForSubMesh(ubo, scene, engine, this._disableBumpMap, this.isFrozen, this._invertNormalMapX, this._invertNormalMapY, subMesh);\n      this.anisotropy.bindForSubMesh(ubo, scene, this.isFrozen);\n      this.sheen.bindForSubMesh(ubo, scene, this.isFrozen, subMesh); // Clip plane\n\n      MaterialHelper.BindClipPlane(this._activeEffect, scene); // Colors\n\n      scene.ambientColor.multiplyToRef(this._ambientColor, this._globalAmbientColor);\n      var eyePosition = scene._forcedViewPosition ? scene._forcedViewPosition : scene._mirroredCameraPosition ? scene._mirroredCameraPosition : scene.activeCamera.globalPosition;\n      var invertNormal = scene.useRightHandedSystem === (scene._mirroredCameraPosition != null);\n      effect.setFloat4(\"vEyePosition\", eyePosition.x, eyePosition.y, eyePosition.z, invertNormal ? -1 : 1);\n      effect.setColor3(\"vAmbientColor\", this._globalAmbientColor);\n      effect.setFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\n    }\n\n    if (mustRebind || !this.isFrozen) {\n      // Lights\n      if (scene.lightsEnabled && !this._disableLighting) {\n        MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights, this._rebuildInParallel);\n      } // View\n\n\n      if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE || reflectionTexture) {\n        this.bindView(effect);\n      } // Fog\n\n\n      MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect, true); // Morph targets\n\n      if (defines.NUM_MORPH_INFLUENCERS) {\n        MaterialHelper.BindMorphTargetParameters(mesh, this._activeEffect);\n      } // image processing\n\n\n      this._imageProcessingConfiguration.bind(this._activeEffect); // Log. depth\n\n\n      MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\n    }\n\n    ubo.update();\n\n    this._afterBind(mesh, this._activeEffect);\n  };\n  /**\r\n   * Returns the animatable textures.\r\n   * @returns - Array of animatable textures.\r\n   */\n\n\n  PBRBaseMaterial.prototype.getAnimatables = function () {\n    var results = [];\n\n    if (this._albedoTexture && this._albedoTexture.animations && this._albedoTexture.animations.length > 0) {\n      results.push(this._albedoTexture);\n    }\n\n    if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\n      results.push(this._ambientTexture);\n    }\n\n    if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\n      results.push(this._opacityTexture);\n    }\n\n    if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\n      results.push(this._reflectionTexture);\n    }\n\n    if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\n      results.push(this._emissiveTexture);\n    }\n\n    if (this._metallicTexture && this._metallicTexture.animations && this._metallicTexture.animations.length > 0) {\n      results.push(this._metallicTexture);\n    } else if (this._reflectivityTexture && this._reflectivityTexture.animations && this._reflectivityTexture.animations.length > 0) {\n      results.push(this._reflectivityTexture);\n    }\n\n    if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n      results.push(this._bumpTexture);\n    }\n\n    if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\n      results.push(this._lightmapTexture);\n    }\n\n    this.detailMap.getAnimatables(results);\n    this.subSurface.getAnimatables(results);\n    this.clearCoat.getAnimatables(results);\n    this.sheen.getAnimatables(results);\n    this.anisotropy.getAnimatables(results);\n    return results;\n  };\n  /**\r\n   * Returns the texture used for reflections.\r\n   * @returns - Reflection texture if present.  Otherwise, returns the environment texture.\r\n   */\n\n\n  PBRBaseMaterial.prototype._getReflectionTexture = function () {\n    if (this._reflectionTexture) {\n      return this._reflectionTexture;\n    }\n\n    return this.getScene().environmentTexture;\n  };\n  /**\r\n   * Returns an array of the actively used textures.\r\n   * @returns - Array of BaseTextures\r\n   */\n\n\n  PBRBaseMaterial.prototype.getActiveTextures = function () {\n    var activeTextures = _super.prototype.getActiveTextures.call(this);\n\n    if (this._albedoTexture) {\n      activeTextures.push(this._albedoTexture);\n    }\n\n    if (this._ambientTexture) {\n      activeTextures.push(this._ambientTexture);\n    }\n\n    if (this._opacityTexture) {\n      activeTextures.push(this._opacityTexture);\n    }\n\n    if (this._reflectionTexture) {\n      activeTextures.push(this._reflectionTexture);\n    }\n\n    if (this._emissiveTexture) {\n      activeTextures.push(this._emissiveTexture);\n    }\n\n    if (this._reflectivityTexture) {\n      activeTextures.push(this._reflectivityTexture);\n    }\n\n    if (this._metallicTexture) {\n      activeTextures.push(this._metallicTexture);\n    }\n\n    if (this._metallicReflectanceTexture) {\n      activeTextures.push(this._metallicReflectanceTexture);\n    }\n\n    if (this._microSurfaceTexture) {\n      activeTextures.push(this._microSurfaceTexture);\n    }\n\n    if (this._bumpTexture) {\n      activeTextures.push(this._bumpTexture);\n    }\n\n    if (this._lightmapTexture) {\n      activeTextures.push(this._lightmapTexture);\n    }\n\n    this.detailMap.getActiveTextures(activeTextures);\n    this.subSurface.getActiveTextures(activeTextures);\n    this.clearCoat.getActiveTextures(activeTextures);\n    this.sheen.getActiveTextures(activeTextures);\n    this.anisotropy.getActiveTextures(activeTextures);\n    return activeTextures;\n  };\n  /**\r\n   * Checks to see if a texture is used in the material.\r\n   * @param texture - Base texture to use.\r\n   * @returns - Boolean specifying if a texture is used in the material.\r\n   */\n\n\n  PBRBaseMaterial.prototype.hasTexture = function (texture) {\n    if (_super.prototype.hasTexture.call(this, texture)) {\n      return true;\n    }\n\n    if (this._albedoTexture === texture) {\n      return true;\n    }\n\n    if (this._ambientTexture === texture) {\n      return true;\n    }\n\n    if (this._opacityTexture === texture) {\n      return true;\n    }\n\n    if (this._reflectionTexture === texture) {\n      return true;\n    }\n\n    if (this._reflectivityTexture === texture) {\n      return true;\n    }\n\n    if (this._metallicTexture === texture) {\n      return true;\n    }\n\n    if (this._metallicReflectanceTexture === texture) {\n      return true;\n    }\n\n    if (this._microSurfaceTexture === texture) {\n      return true;\n    }\n\n    if (this._bumpTexture === texture) {\n      return true;\n    }\n\n    if (this._lightmapTexture === texture) {\n      return true;\n    }\n\n    return this.detailMap.hasTexture(texture) || this.subSurface.hasTexture(texture) || this.clearCoat.hasTexture(texture) || this.sheen.hasTexture(texture) || this.anisotropy.hasTexture(texture);\n  };\n  /**\r\n   * Sets the required values to the prepass renderer.\r\n   * @param prePassRenderer defines the prepass renderer to setup\r\n   */\n\n\n  PBRBaseMaterial.prototype.setPrePassRenderer = function (prePassRenderer) {\n    if (this.subSurface.isScatteringEnabled) {\n      var subSurfaceConfiguration = this.getScene().enableSubSurfaceForPrePass();\n\n      if (subSurfaceConfiguration) {\n        subSurfaceConfiguration.enabled = true;\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Disposes the resources of the material.\r\n   * @param forceDisposeEffect - Forces the disposal of effects.\r\n   * @param forceDisposeTextures - Forces the disposal of all textures.\r\n   */\n\n\n  PBRBaseMaterial.prototype.dispose = function (forceDisposeEffect, forceDisposeTextures) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n    if (forceDisposeTextures) {\n      if (this._environmentBRDFTexture && this.getScene().environmentBRDFTexture !== this._environmentBRDFTexture) {\n        this._environmentBRDFTexture.dispose();\n      }\n\n      (_a = this._albedoTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._ambientTexture) === null || _b === void 0 ? void 0 : _b.dispose();\n      (_c = this._opacityTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n      (_d = this._reflectionTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n      (_e = this._emissiveTexture) === null || _e === void 0 ? void 0 : _e.dispose();\n      (_f = this._metallicTexture) === null || _f === void 0 ? void 0 : _f.dispose();\n      (_g = this._reflectivityTexture) === null || _g === void 0 ? void 0 : _g.dispose();\n      (_h = this._bumpTexture) === null || _h === void 0 ? void 0 : _h.dispose();\n      (_j = this._lightmapTexture) === null || _j === void 0 ? void 0 : _j.dispose();\n      (_k = this._metallicReflectanceTexture) === null || _k === void 0 ? void 0 : _k.dispose();\n      (_l = this._microSurfaceTexture) === null || _l === void 0 ? void 0 : _l.dispose();\n    }\n\n    this.detailMap.dispose(forceDisposeTextures);\n    this.subSurface.dispose(forceDisposeTextures);\n    this.clearCoat.dispose(forceDisposeTextures);\n    this.sheen.dispose(forceDisposeTextures);\n    this.anisotropy.dispose(forceDisposeTextures);\n\n    this._renderTargets.dispose();\n\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    }\n\n    _super.prototype.dispose.call(this, forceDisposeEffect, forceDisposeTextures);\n  };\n  /**\r\n   * PBRMaterialTransparencyMode: No transparency mode, Alpha channel is not use.\r\n   */\n\n\n  PBRBaseMaterial.PBRMATERIAL_OPAQUE = Material.MATERIAL_OPAQUE;\n  /**\r\n   * PBRMaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\r\n   */\n\n  PBRBaseMaterial.PBRMATERIAL_ALPHATEST = Material.MATERIAL_ALPHATEST;\n  /**\r\n   * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n   */\n\n  PBRBaseMaterial.PBRMATERIAL_ALPHABLEND = Material.MATERIAL_ALPHABLEND;\n  /**\r\n   * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n   * They are also discarded below the alpha cutoff threshold to improve performances.\r\n   */\n\n  PBRBaseMaterial.PBRMATERIAL_ALPHATESTANDBLEND = Material.MATERIAL_ALPHATESTANDBLEND;\n  /**\r\n   * Defines the default value of how much AO map is occluding the analytical lights\r\n   * (point spot...).\r\n   */\n\n  PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS = 0;\n  /**\r\n   * PBRMaterialLightFalloff Physical: light is falling off following the inverse squared distance law.\r\n   */\n\n  PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL = 0;\n  /**\r\n   * PBRMaterialLightFalloff gltf: light is falling off as described in the gltf moving to PBR document\r\n   * to enhance interoperability with other engines.\r\n   */\n\n  PBRBaseMaterial.LIGHTFALLOFF_GLTF = 1;\n  /**\r\n   * PBRMaterialLightFalloff Standard: light is falling off like in the standard material\r\n   * to enhance interoperability with other materials.\r\n   */\n\n  PBRBaseMaterial.LIGHTFALLOFF_STANDARD = 2;\n\n  __decorate([serializeAsImageProcessingConfiguration()], PBRBaseMaterial.prototype, \"_imageProcessingConfiguration\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsMiscDirty\")], PBRBaseMaterial.prototype, \"debugMode\", void 0);\n\n  __decorate([serialize()], PBRBaseMaterial.prototype, \"useLogarithmicDepth\", null);\n\n  return PBRBaseMaterial;\n}(PushMaterial);\n\nexport { PBRBaseMaterial };","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/PBR/pbrBaseMaterial.ts"],"names":[],"mappings":"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","sourcesContent":["import { serialize, serializeAsImageProcessingConfiguration, expandToProperty } from \"../../Misc/decorators\";\r\nimport { Observer } from \"../../Misc/observable\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { SmartArray } from \"../../Misc/smartArray\";\r\nimport { BRDFTextureTools } from \"../../Misc/brdfTextureTools\";\r\nimport { Nullable } from \"../../types\";\r\nimport { Camera } from \"../../Cameras/camera\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Matrix, Vector4 } from \"../../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../../Meshes/buffer\";\r\nimport { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { IMaterialClearCoatDefines, PBRClearCoatConfiguration } from \"./pbrClearCoatConfiguration\";\r\nimport { IMaterialAnisotropicDefines, PBRAnisotropicConfiguration } from \"./pbrAnisotropicConfiguration\";\r\nimport { IMaterialBRDFDefines, PBRBRDFConfiguration } from \"./pbrBRDFConfiguration\";\r\nimport { IMaterialSheenDefines, PBRSheenConfiguration } from \"./pbrSheenConfiguration\";\r\nimport { IMaterialSubSurfaceDefines, PBRSubSurfaceConfiguration } from \"./pbrSubSurfaceConfiguration\";\r\nimport { PrePassConfiguration } from \"../prePassConfiguration\";\r\nimport { Color3, TmpColors } from '../../Maths/math.color';\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\n\r\nimport { ImageProcessingConfiguration, IImageProcessingConfigurationDefines } from \"../../Materials/imageProcessingConfiguration\";\r\nimport { Effect, IEffectCreationOptions } from \"../../Materials/effect\";\r\nimport { Material, IMaterialCompilationOptions, ICustomShaderNameResolveOptions } from \"../../Materials/material\";\r\nimport { MaterialDefines } from \"../../Materials/materialDefines\";\r\nimport { PushMaterial } from \"../../Materials/pushMaterial\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\n\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport { CubeTexture } from \"../../Materials/Textures/cubeTexture\";\r\n\r\nimport { MaterialFlags } from \"../materialFlags\";\r\n\r\nimport { IAnimatable } from '../../Animations/animatable.interface';\r\n\r\nimport \"../../Materials/Textures/baseTexture.polynomial\";\r\nimport \"../../Shaders/pbr.fragment\";\r\nimport \"../../Shaders/pbr.vertex\";\r\n\r\nimport { EffectFallbacks } from '../effectFallbacks';\r\nimport { IMaterialDetailMapDefines, DetailMapConfiguration } from '../material.detailMapConfiguration';\r\n\r\ndeclare type PrePassRenderer = import(\"../../Rendering/prePassRenderer\").PrePassRenderer;\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/**\r\n * Manages the defines for the PBR Material.\r\n * @hidden\r\n */\r\nexport class PBRMaterialDefines extends MaterialDefines\r\n    implements IImageProcessingConfigurationDefines,\r\n    IMaterialClearCoatDefines,\r\n    IMaterialAnisotropicDefines,\r\n    IMaterialBRDFDefines,\r\n    IMaterialSheenDefines,\r\n    IMaterialSubSurfaceDefines,\r\n    IMaterialDetailMapDefines {\r\n    public PBR = true;\r\n\r\n    public NUM_SAMPLES = \"0\";\r\n    public REALTIME_FILTERING = false;\r\n\r\n    public MAINUV1 = false;\r\n    public MAINUV2 = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n\r\n    public ALBEDO = false;\r\n    public GAMMAALBEDO = false;\r\n    public ALBEDODIRECTUV = 0;\r\n    public VERTEXCOLOR = false;\r\n\r\n    public DETAIL = false;\r\n    public DETAILDIRECTUV = 0;\r\n    public DETAIL_NORMALBLENDMETHOD = 0;\r\n\r\n    public AMBIENT = false;\r\n    public AMBIENTDIRECTUV = 0;\r\n    public AMBIENTINGRAYSCALE = false;\r\n\r\n    public OPACITY = false;\r\n    public VERTEXALPHA = false;\r\n    public OPACITYDIRECTUV = 0;\r\n    public OPACITYRGB = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public ALPHABLEND = false;\r\n    public ALPHAFROMALBEDO = false;\r\n    public ALPHATESTVALUE = \"0.5\";\r\n    public SPECULAROVERALPHA = false;\r\n    public RADIANCEOVERALPHA = false;\r\n    public ALPHAFRESNEL = false;\r\n    public LINEARALPHAFRESNEL = false;\r\n    public PREMULTIPLYALPHA = false;\r\n\r\n    public EMISSIVE = false;\r\n    public EMISSIVEDIRECTUV = 0;\r\n\r\n    public REFLECTIVITY = false;\r\n    public REFLECTIVITYDIRECTUV = 0;\r\n    public SPECULARTERM = false;\r\n\r\n    public MICROSURFACEFROMREFLECTIVITYMAP = false;\r\n    public MICROSURFACEAUTOMATIC = false;\r\n    public LODBASEDMICROSFURACE = false;\r\n    public MICROSURFACEMAP = false;\r\n    public MICROSURFACEMAPDIRECTUV = 0;\r\n\r\n    public METALLICWORKFLOW = false;\r\n    public ROUGHNESSSTOREINMETALMAPALPHA = false;\r\n    public ROUGHNESSSTOREINMETALMAPGREEN = false;\r\n    public METALLNESSSTOREINMETALMAPBLUE = false;\r\n    public AOSTOREINMETALMAPRED = false;\r\n    public METALLIC_REFLECTANCE = false;\r\n    public METALLIC_REFLECTANCEDIRECTUV = 0;\r\n\r\n    public ENVIRONMENTBRDF = false;\r\n    public ENVIRONMENTBRDF_RGBD = false;\r\n\r\n    public NORMAL = false;\r\n    public TANGENT = false;\r\n    public BUMP = false;\r\n    public BUMPDIRECTUV = 0;\r\n    public OBJECTSPACE_NORMALMAP = false;\r\n    public PARALLAX = false;\r\n    public PARALLAXOCCLUSION = false;\r\n    public NORMALXYSCALE = true;\r\n\r\n    public LIGHTMAP = false;\r\n    public LIGHTMAPDIRECTUV = 0;\r\n    public USELIGHTMAPASSHADOWMAP = false;\r\n    public GAMMALIGHTMAP = false;\r\n    public RGBDLIGHTMAP = false;\r\n\r\n    public REFLECTION = false;\r\n    public REFLECTIONMAP_3D = false;\r\n    public REFLECTIONMAP_SPHERICAL = false;\r\n    public REFLECTIONMAP_PLANAR = false;\r\n    public REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n    public REFLECTIONMAP_PROJECTION = false;\r\n    public REFLECTIONMAP_SKYBOX = false;\r\n    public REFLECTIONMAP_EXPLICIT = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n    public INVERTCUBICMAP = false;\r\n    public USESPHERICALFROMREFLECTIONMAP = false;\r\n    public USEIRRADIANCEMAP = false;\r\n    public SPHERICAL_HARMONICS = false;\r\n    public USESPHERICALINVERTEX = false;\r\n    public REFLECTIONMAP_OPPOSITEZ = false;\r\n    public LODINREFLECTIONALPHA = false;\r\n    public GAMMAREFLECTION = false;\r\n    public RGBDREFLECTION = false;\r\n    public LINEARSPECULARREFLECTION = false;\r\n    public RADIANCEOCCLUSION = false;\r\n    public HORIZONOCCLUSION = false;\r\n\r\n    public INSTANCES = false;\r\n    public THIN_INSTANCES = false;\r\n\r\n    public PREPASS = false;\r\n    public PREPASS_IRRADIANCE = false;\r\n    public PREPASS_IRRADIANCE_INDEX = -1;\r\n    public PREPASS_ALBEDO = false;\r\n    public PREPASS_ALBEDO_INDEX = -1;\r\n    public PREPASS_DEPTHNORMAL = false;\r\n    public PREPASS_DEPTHNORMAL_INDEX = -1;\r\n    public PREPASS_POSITION = false;\r\n    public PREPASS_POSITION_INDEX = -1;\r\n    public PREPASS_VELOCITY = false;\r\n    public PREPASS_VELOCITY_INDEX = -1;\r\n    public PREPASS_REFLECTIVITY = false;\r\n    public PREPASS_REFLECTIVITY_INDEX = -1;\r\n    public SCENE_MRT_COUNT = 0;\r\n\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public BONETEXTURE = false;\r\n    public BONES_VELOCITY_ENABLED = false;\r\n\r\n    public NONUNIFORMSCALING = false;\r\n\r\n    public MORPHTARGETS = false;\r\n    public MORPHTARGETS_NORMAL = false;\r\n    public MORPHTARGETS_TANGENT = false;\r\n    public MORPHTARGETS_UV = false;\r\n    public NUM_MORPH_INFLUENCERS = 0;\r\n\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public EXPOSURE = false;\r\n    public MULTIVIEW = false;\r\n\r\n    public USEPHYSICALLIGHTFALLOFF = false;\r\n    public USEGLTFLIGHTFALLOFF = false;\r\n    public TWOSIDEDLIGHTING = false;\r\n    public SHADOWFLOAT = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LOGARITHMICDEPTH = false;\r\n\r\n    public FORCENORMALFORWARD = false;\r\n\r\n    public SPECULARAA = false;\r\n\r\n    public CLEARCOAT = false;\r\n    public CLEARCOAT_DEFAULTIOR = false;\r\n    public CLEARCOAT_TEXTURE = false;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n    public CLEARCOAT_TEXTUREDIRECTUV = 0;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n    public CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\r\n    public CLEARCOAT_BUMP = false;\r\n    public CLEARCOAT_BUMPDIRECTUV = 0;\r\n    public CLEARCOAT_REMAP_F0 = true;\r\n    public CLEARCOAT_TINT = false;\r\n    public CLEARCOAT_TINT_TEXTURE = false;\r\n    public CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\r\n\r\n    public ANISOTROPIC = false;\r\n    public ANISOTROPIC_TEXTURE = false;\r\n    public ANISOTROPIC_TEXTUREDIRECTUV = 0;\r\n\r\n    public BRDF_V_HEIGHT_CORRELATED = false;\r\n    public MS_BRDF_ENERGY_CONSERVATION = false;\r\n    public SPECULAR_GLOSSINESS_ENERGY_CONSERVATION = false;\r\n\r\n    public SHEEN = false;\r\n    public SHEEN_TEXTURE = false;\r\n    public SHEEN_TEXTURE_ROUGHNESS = false;\r\n    public SHEEN_TEXTUREDIRECTUV = 0;\r\n    public SHEEN_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n    public SHEEN_LINKWITHALBEDO = false;\r\n    public SHEEN_ROUGHNESS = false;\r\n    public SHEEN_ALBEDOSCALING = false;\r\n    public SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n    public SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = false;\r\n\r\n    public SUBSURFACE = false;\r\n\r\n    public SS_REFRACTION = false;\r\n    public SS_TRANSLUCENCY = false;\r\n    public SS_SCATTERING = false;\r\n\r\n    public SS_THICKNESSANDMASK_TEXTURE = false;\r\n    public SS_THICKNESSANDMASK_TEXTUREDIRECTUV = 0;\r\n\r\n    public SS_REFRACTIONMAP_3D = false;\r\n    public SS_REFRACTIONMAP_OPPOSITEZ = false;\r\n    public SS_LODINREFRACTIONALPHA = false;\r\n    public SS_GAMMAREFRACTION = false;\r\n    public SS_RGBDREFRACTION = false;\r\n    public SS_LINEARSPECULARREFRACTION = false;\r\n    public SS_LINKREFRACTIONTOTRANSPARENCY = false;\r\n    public SS_ALBEDOFORREFRACTIONTINT = false;\r\n\r\n    public SS_MASK_FROM_THICKNESS_TEXTURE = false;\r\n    public SS_MASK_FROM_THICKNESS_TEXTURE_GLTF = false;\r\n\r\n    public UNLIT = false;\r\n\r\n    public DEBUGMODE = 0;\r\n\r\n    /**\r\n     * Initializes the PBR Material defines.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n\r\n    /**\r\n     * Resets the PBR Material defines.\r\n     */\r\n    public reset(): void {\r\n        super.reset();\r\n        this.ALPHATESTVALUE = \"0.5\";\r\n        this.PBR = true;\r\n    }\r\n}\r\n\r\n/**\r\n * The Physically based material base class of BJS.\r\n *\r\n * This offers the main features of a standard PBR material.\r\n * For more information, please refer to the documentation :\r\n * https://doc.babylonjs.com/how_to/physically_based_rendering\r\n */\r\nexport abstract class PBRBaseMaterial extends PushMaterial {\r\n    /**\r\n     * PBRMaterialTransparencyMode: No transparency mode, Alpha channel is not use.\r\n     */\r\n    public static readonly PBRMATERIAL_OPAQUE = Material.MATERIAL_OPAQUE;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHATEST = Material.MATERIAL_ALPHATEST;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHABLEND = Material.MATERIAL_ALPHABLEND;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     * They are also discarded below the alpha cutoff threshold to improve performances.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHATESTANDBLEND = Material.MATERIAL_ALPHATESTANDBLEND;\r\n\r\n    /**\r\n     * Defines the default value of how much AO map is occluding the analytical lights\r\n     * (point spot...).\r\n     */\r\n    public static DEFAULT_AO_ON_ANALYTICAL_LIGHTS = 0;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff Physical: light is falling off following the inverse squared distance law.\r\n     */\r\n    public static readonly LIGHTFALLOFF_PHYSICAL = 0;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff gltf: light is falling off as described in the gltf moving to PBR document\r\n     * to enhance interoperability with other engines.\r\n     */\r\n    public static readonly LIGHTFALLOFF_GLTF = 1;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff Standard: light is falling off like in the standard material\r\n     * to enhance interoperability with other materials.\r\n     */\r\n    public static readonly LIGHTFALLOFF_STANDARD = 2;\r\n\r\n    /**\r\n     * Intensity of the direct lights e.g. the four lights available in your scene.\r\n     * This impacts both the direct diffuse and specular highlights.\r\n     */\r\n    protected _directIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the emissive part of the material.\r\n     * This helps controlling the emissive effect without modifying the emissive color.\r\n     */\r\n    protected _emissiveIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the environment e.g. how much the environment will light the object\r\n     * either through harmonics for rough material or through the refelction for shiny ones.\r\n     */\r\n    protected _environmentIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This is a special control allowing the reduction of the specular highlights coming from the\r\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\r\n     */\r\n    protected _specularIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This stores the direct, emissive, environment, and specular light intensities into a Vector4.\r\n     */\r\n    private _lightingInfos: Vector4 = new Vector4(this._directIntensity, this._emissiveIntensity, this._environmentIntensity, this._specularIntensity);\r\n\r\n    /**\r\n     * Debug Control allowing disabling the bump map on this material.\r\n     */\r\n    protected _disableBumpMap: boolean = false;\r\n\r\n    /**\r\n     * AKA Diffuse Texture in standard nomenclature.\r\n     */\r\n    protected _albedoTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Occlusion Texture in other nomenclature.\r\n     */\r\n    protected _ambientTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Occlusion Texture Intensity in other nomenclature.\r\n     */\r\n    protected _ambientTextureStrength: number = 1.0;\r\n\r\n    /**\r\n     * Defines how much the AO map is occluding the analytical lights (point spot...).\r\n     * 1 means it completely occludes it\r\n     * 0 mean it has no impact\r\n     */\r\n    protected _ambientTextureImpactOnAnalyticalLights: number = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\r\n\r\n    /**\r\n     * Stores the alpha values in a texture.\r\n     */\r\n    protected _opacityTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the reflection values in a texture.\r\n     */\r\n    protected _reflectionTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the emissive values in a texture.\r\n     */\r\n    protected _emissiveTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Specular texture in other nomenclature.\r\n     */\r\n    protected _reflectivityTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Used to switch from specular/glossiness to metallic/roughness workflow.\r\n     */\r\n    protected _metallicTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Specifies the metallic scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the metalness values of the metallic texture.\r\n     */\r\n    protected _metallic: Nullable<number> = null;\r\n\r\n    /**\r\n     * Specifies the roughness scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the roughness values of the metallic texture.\r\n     */\r\n    protected _roughness: Nullable<number> = null;\r\n\r\n    /**\r\n     * In metallic workflow, specifies an F0 factor to help configuring the material F0.\r\n     * By default the indexOfrefraction is used to compute F0;\r\n     *\r\n     * This is used as a factor against the default reflectance at normal incidence to tweak it.\r\n     *\r\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor;\r\n     * F90 = metallicReflectanceColor;\r\n     */\r\n    protected _metallicF0Factor = 1;\r\n\r\n    /**\r\n     * In metallic workflow, specifies an F90 color to help configuring the material F90.\r\n     * By default the F90 is always 1;\r\n     *\r\n     * Please note that this factor is also used as a factor against the default reflectance at normal incidence.\r\n     *\r\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor\r\n     * F90 = metallicReflectanceColor;\r\n     */\r\n    protected _metallicReflectanceColor = Color3.White();\r\n\r\n    /**\r\n     * Defines to store metallicReflectanceColor in RGB and metallicF0Factor in A\r\n     * This is multiply against the scalar values defined in the material.\r\n     */\r\n    protected _metallicReflectanceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Used to enable roughness/glossiness fetch from a separate channel depending on the current mode.\r\n     * Gray Scale represents roughness in metallic mode and glossiness in specular mode.\r\n     */\r\n    protected _microSurfaceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores surface normal data used to displace a mesh in a texture.\r\n     */\r\n    protected _bumpTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the pre-calculated light information of a mesh in a texture.\r\n     */\r\n    protected _lightmapTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * The color of a material in ambient lighting.\r\n     */\r\n    protected _ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * AKA Diffuse Color in other nomenclature.\r\n     */\r\n    protected _albedoColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * AKA Specular Color in other nomenclature.\r\n     */\r\n    protected _reflectivityColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * The color applied when light is reflected from a material.\r\n     */\r\n    protected _reflectionColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * The color applied when light is emitted from a material.\r\n     */\r\n    protected _emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * AKA Glossiness in other nomenclature.\r\n     */\r\n    protected _microSurface = 0.9;\r\n\r\n    /**\r\n     * Specifies that the material will use the light map as a show map.\r\n     */\r\n    protected _useLightmapAsShadowmap = false;\r\n\r\n    /**\r\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\r\n     * makes the reflect vector face the model (under horizon).\r\n     */\r\n    protected _useHorizonOcclusion = true;\r\n\r\n    /**\r\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\r\n     * too much the area relying on ambient texture to define their ambient occlusion.\r\n     */\r\n    protected _useRadianceOcclusion = true;\r\n\r\n    /**\r\n     * Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.\r\n     */\r\n    protected _useAlphaFromAlbedoTexture = false;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most limunous ones).\r\n     * A car glass is a good exemple of that. When sun reflects on it you can not see what is behind.\r\n     */\r\n    protected _useSpecularOverAlpha = true;\r\n\r\n    /**\r\n     * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\r\n     */\r\n    protected _useMicroSurfaceFromReflectivityMapAlpha = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its alpha channel.\r\n     */\r\n    protected _useRoughnessFromMetallicTextureAlpha = true;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its green channel.\r\n     */\r\n    protected _useRoughnessFromMetallicTextureGreen = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the metallness information in its blue channel.\r\n     */\r\n    protected _useMetallnessFromMetallicTextureBlue = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\r\n     */\r\n    protected _useAmbientOcclusionFromMetallicTextureRed = false;\r\n\r\n    /**\r\n     * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\r\n     */\r\n    protected _useAmbientInGrayScale = false;\r\n\r\n    /**\r\n     * In case the reflectivity map does not contain the microsurface information in its alpha channel,\r\n     * The material will try to infer what glossiness each pixel should be.\r\n     */\r\n    protected _useAutoMicroSurfaceFromReflectivityMap = false;\r\n\r\n    /**\r\n     * Defines the  falloff type used in this material.\r\n     * It by default is Physical.\r\n     */\r\n    protected _lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most limunous ones).\r\n     * A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.\r\n     */\r\n    protected _useRadianceOverAlpha = true;\r\n\r\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     */\r\n    protected _useObjectSpaceNormalMap = false;\r\n\r\n    /**\r\n     * Allows using the bump map in parallax mode.\r\n     */\r\n    protected _useParallax = false;\r\n\r\n    /**\r\n     * Allows using the bump map in parallax occlusion mode.\r\n     */\r\n    protected _useParallaxOcclusion = false;\r\n\r\n    /**\r\n     * Controls the scale bias of the parallax mode.\r\n     */\r\n    protected _parallaxScaleBias = 0.05;\r\n\r\n    /**\r\n     * If sets to true, disables all the lights affecting the material.\r\n     */\r\n    protected _disableLighting = false;\r\n\r\n    /**\r\n     * Number of Simultaneous lights allowed on the material.\r\n     */\r\n    protected _maxSimultaneousLights = 4;\r\n\r\n    /**\r\n     * If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\r\n     */\r\n    protected _invertNormalMapX = false;\r\n\r\n    /**\r\n     * If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\r\n     */\r\n    protected _invertNormalMapY = false;\r\n\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\r\n    protected _twoSidedLighting = false;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    protected _alphaCutOff = 0.4;\r\n\r\n    /**\r\n     * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\r\n     */\r\n    protected _forceAlphaTest = false;\r\n\r\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\r\n     */\r\n    protected _useAlphaFresnel = false;\r\n\r\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\r\n     */\r\n    protected _useLinearAlphaFresnel = false;\r\n\r\n    /**\r\n     * Specifies the environment BRDF texture used to comput the scale and offset roughness values\r\n     * from cos thetav and roughness:\r\n     * http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\r\n     */\r\n    protected _environmentBRDFTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\r\n     */\r\n    protected _forceIrradianceInFragment = false;\r\n\r\n    private _realTimeFiltering: boolean = false;\r\n    /**\r\n     * Enables realtime filtering on the texture.\r\n     */\r\n    public get realTimeFiltering() {\r\n        return this._realTimeFiltering;\r\n    }\r\n    public set realTimeFiltering(b: boolean) {\r\n        this._realTimeFiltering = b;\r\n        this.markAsDirty(1);\r\n    }\r\n\r\n    private _realTimeFilteringQuality: number = 8;\r\n    /**\r\n     * Quality switch for realtime filtering\r\n     */\r\n    public get realTimeFilteringQuality() : number {\r\n        return this._realTimeFilteringQuality;\r\n    }\r\n    public set realTimeFilteringQuality(n: number) {\r\n        this._realTimeFilteringQuality = n;\r\n        this.markAsDirty(1);\r\n    }\r\n\r\n    /**\r\n     * Can this material render to several textures at once\r\n     */\r\n    public get canRenderToMRT() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Force normal to face away from face.\r\n     */\r\n    protected _forceNormalForward = false;\r\n\r\n    /**\r\n     * Enables specular anti aliasing in the PBR shader.\r\n     * It will both interacts on the Geometry for analytical and IBL lighting.\r\n     * It also prefilter the roughness map based on the bump values.\r\n     */\r\n    protected _enableSpecularAntiAliasing = false;\r\n\r\n    /**\r\n     * Default configuration related to image processing available in the PBR Material.\r\n     */\r\n    @serializeAsImageProcessingConfiguration()\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>> = null;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the PBR Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer.\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed.\r\n        if (!configuration) {\r\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\r\n        }\r\n        else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer.\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._markAllSubMeshesAsImageProcessingDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores the available render targets.\r\n     */\r\n    private _renderTargets = new SmartArray<RenderTargetTexture>(16);\r\n\r\n    /**\r\n     * Sets the global ambient color for the material used in lighting calculations.\r\n     */\r\n    private _globalAmbientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * Enables the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    private _useLogarithmicDepth: boolean = false;\r\n\r\n    /**\r\n     * If set to true, no lighting calculations will be applied.\r\n     */\r\n    private _unlit = false;\r\n\r\n    private _debugMode = 0;\r\n    /**\r\n     * @hidden\r\n     * This is reserved for the inspector.\r\n     * Defines the material debug mode.\r\n     * It helps seeing only some components of the material while troubleshooting.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public debugMode = 0;\r\n\r\n    /**\r\n     * @hidden\r\n     * This is reserved for the inspector.\r\n     * Specify from where on screen the debug mode should start.\r\n     * The value goes from -1 (full screen) to 1 (not visible)\r\n     * It helps with side by side comparison against the final render\r\n     * This defaults to -1\r\n     */\r\n    private debugLimit = -1;\r\n\r\n    /**\r\n     * @hidden\r\n     * This is reserved for the inspector.\r\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\r\n     * You can use the factor to better multiply the final value.\r\n     */\r\n    private debugFactor = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer parameters for the material.\r\n     */\r\n    public readonly clearCoat = new PBRClearCoatConfiguration(this._markAllSubMeshesAsTexturesDirty.bind(this));\r\n\r\n    /**\r\n     * Defines the anisotropic parameters for the material.\r\n     */\r\n    public readonly anisotropy = new PBRAnisotropicConfiguration(this._markAllSubMeshesAsTexturesDirty.bind(this));\r\n\r\n    /**\r\n     * Defines the BRDF parameters for the material.\r\n     */\r\n    public readonly brdf = new PBRBRDFConfiguration(this._markAllSubMeshesAsMiscDirty.bind(this));\r\n\r\n    /**\r\n     * Defines the Sheen parameters for the material.\r\n     */\r\n    public readonly sheen = new PBRSheenConfiguration(this._markAllSubMeshesAsTexturesDirty.bind(this));\r\n\r\n    /**\r\n     * Defines the SubSurface parameters for the material.\r\n     */\r\n    public readonly subSurface: PBRSubSurfaceConfiguration;\r\n\r\n    /**\r\n     * Defines additionnal PrePass parameters for the material.\r\n     */\r\n    public readonly prePassConfiguration: PrePassConfiguration;\r\n\r\n    /**\r\n     * Defines the detail map parameters for the material.\r\n     */\r\n    public readonly detailMap = new DetailMapConfiguration(this._markAllSubMeshesAsTexturesDirty.bind(this));\r\n\r\n    protected _rebuildInParallel = false;\r\n\r\n    /**\r\n     * Instantiates a new PBRMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n\r\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\r\n            this._renderTargets.reset();\r\n\r\n            if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._reflectionTexture);\r\n            }\r\n\r\n            this.subSurface.fillRenderTargetTextures(this._renderTargets);\r\n\r\n            return this._renderTargets;\r\n        };\r\n\r\n        this._environmentBRDFTexture = BRDFTextureTools.GetEnvironmentBRDFTexture(scene);\r\n        this.subSurface = new PBRSubSurfaceConfiguration(this._markAllSubMeshesAsTexturesDirty.bind(this), this._markScenePrePassDirty.bind(this), scene);\r\n        this.prePassConfiguration = new PrePassConfiguration();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public get hasRenderTargetTextures(): boolean {\r\n        if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        return this.subSurface.hasRenderTargetTextures();\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the material class.\r\n     */\r\n    public getClassName(): string {\r\n        return \"PBRBaseMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    @serialize()\r\n    public get useLogarithmicDepth(): boolean {\r\n        return this._useLogarithmicDepth;\r\n    }\r\n\r\n    /**\r\n     * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    public set useLogarithmicDepth(value: boolean) {\r\n        this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\r\n    }\r\n\r\n    /**\r\n     * Returns true if alpha blending should be disabled.\r\n     */\r\n    protected get _disableAlphaBlending(): boolean {\r\n        return (this.subSurface.disableAlphaBlending ||\r\n            this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_OPAQUE ||\r\n            this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha blend mode.\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return (this.alpha < 1.0) || (this._opacityTexture != null) || this._shouldUseAlphaFromAlbedoTexture();\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha test mode.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        if (this._forceAlphaTest) {\r\n            return true;\r\n        }\r\n\r\n        if (this.subSurface.disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the alpha value of the albedo texture should be used for alpha blending.\r\n     */\r\n    protected _shouldUseAlphaFromAlbedoTexture(): boolean {\r\n        return this._albedoTexture != null && this._albedoTexture.hasAlpha && this._useAlphaFromAlbedoTexture && this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not there is a usable alpha channel for transparency.\r\n     */\r\n    protected _hasAlphaChannel(): boolean {\r\n        return (this._albedoTexture != null && this._albedoTexture.hasAlpha) || this._opacityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * Gets the texture used for the alpha test.\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return this._albedoTexture;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used.\r\n     * @param mesh - BJS mesh.\r\n     * @param subMesh - A submesh of the BJS mesh.  Used to check if it is ready.\r\n     * @param useInstances - Specifies that instances should be used.\r\n     * @returns - boolean indicating that the submesh is ready or not.\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (subMesh.effect && this.isFrozen) {\r\n            if (subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh._materialDefines) {\r\n            subMesh._materialDefines = new PBRMaterialDefines();\r\n        }\r\n\r\n        const defines = <PBRMaterialDefines>subMesh._materialDefines;\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                var reflectionTexture = this._getReflectionTexture();\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    if (!reflectionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                    if (reflectionTexture.irradianceTexture && !reflectionTexture.irradianceTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        if (!this._metallicTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (this._reflectivityTexture) {\r\n                        if (!this._reflectivityTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture) {\r\n                        if (!this._metallicReflectanceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        if (!this._microSurfaceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    // Bump texture cannot be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    // This is blocking.\r\n                    if (!this._environmentBRDFTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this.subSurface.isReadyForSubMesh(defines, scene) ||\r\n            !this.clearCoat.isReadyForSubMesh(defines, scene, engine, this._disableBumpMap) ||\r\n            !this.sheen.isReadyForSubMesh(defines, scene) ||\r\n            !this.anisotropy.isReadyForSubMesh(defines, scene) ||\r\n            !this.detailMap.isReadyForSubMesh(defines, scene)) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            if (!this._imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (!engine.getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            mesh.createNormals(true);\r\n            Logger.Warn(\"PBRMaterial: Normals have been created for the mesh: \" + mesh.name);\r\n        }\r\n\r\n        const previousEffect = subMesh.effect;\r\n        const lightDisposed = defines._areLightsDisposed;\r\n        let effect = this._prepareEffect(mesh, defines, this.onCompiled, this.onError, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\r\n\r\n        if (effect) {\r\n            if (this._onEffectCreatedObservable) {\r\n                onCreatedEffectParameters.effect = effect;\r\n                onCreatedEffectParameters.subMesh = subMesh;\r\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n            }\r\n\r\n            // Use previous effect while new one is compiling\r\n            if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\r\n                effect = previousEffect;\r\n                this._rebuildInParallel = true;\r\n                defines.markAsUnprocessed();\r\n\r\n                if (lightDisposed) {\r\n                    // re register in case it takes more than one frame.\r\n                    defines._areLightsDisposed = true;\r\n                    return false;\r\n                }\r\n            } else {\r\n                this._rebuildInParallel = false;\r\n                scene.resetCachedMaterial();\r\n                subMesh.setEffect(effect, defines);\r\n                this.buildUniformLayout();\r\n            }\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses metallic roughness workflow.\r\n     * @returns boolean specifiying if the material uses metallic roughness workflow.\r\n    */\r\n    public isMetallicWorkflow(): boolean {\r\n        if (this._metallic != null || this._roughness != null || this._metallicTexture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareEffect(mesh: AbstractMesh, defines: PBRMaterialDefines, onCompiled: Nullable<(effect: Effect) => void> = null, onError: Nullable<(effect: Effect, errors: string) => void> = null,\r\n                useInstances: Nullable<boolean> = null, useClipPlane: Nullable<boolean> = null, useThinInstances: boolean): Nullable<Effect> {\r\n        this._prepareDefines(mesh, defines, useInstances, useClipPlane, useThinInstances);\r\n\r\n        if (!defines.isDirty) {\r\n            return null;\r\n        }\r\n\r\n        defines.markAsProcessed();\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Fallbacks\r\n        var fallbacks = new EffectFallbacks();\r\n        var fallbackRank = 0;\r\n        if (defines.USESPHERICALINVERTEX) {\r\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALINVERTEX\");\r\n        }\r\n\r\n        if (defines.FOG) {\r\n            fallbacks.addFallback(fallbackRank, \"FOG\");\r\n        }\r\n        if (defines.SPECULARAA) {\r\n            fallbacks.addFallback(fallbackRank, \"SPECULARAA\");\r\n        }\r\n        if (defines.POINTSIZE) {\r\n            fallbacks.addFallback(fallbackRank, \"POINTSIZE\");\r\n        }\r\n        if (defines.LOGARITHMICDEPTH) {\r\n            fallbacks.addFallback(fallbackRank, \"LOGARITHMICDEPTH\");\r\n        }\r\n        if (defines.PARALLAX) {\r\n            fallbacks.addFallback(fallbackRank, \"PARALLAX\");\r\n        }\r\n        if (defines.PARALLAXOCCLUSION) {\r\n            fallbacks.addFallback(fallbackRank++, \"PARALLAXOCCLUSION\");\r\n        }\r\n\r\n        fallbackRank = PBRAnisotropicConfiguration.AddFallbacks(defines, fallbacks, fallbackRank);\r\n        fallbackRank = PBRAnisotropicConfiguration.AddFallbacks(defines, fallbacks, fallbackRank);\r\n        fallbackRank = PBRSubSurfaceConfiguration.AddFallbacks(defines, fallbacks, fallbackRank);\r\n        fallbackRank = PBRSheenConfiguration.AddFallbacks(defines, fallbacks, fallbackRank);\r\n\r\n        if (defines.ENVIRONMENTBRDF) {\r\n            fallbacks.addFallback(fallbackRank++, \"ENVIRONMENTBRDF\");\r\n        }\r\n\r\n        if (defines.TANGENT) {\r\n            fallbacks.addFallback(fallbackRank++, \"TANGENT\");\r\n        }\r\n\r\n        if (defines.BUMP) {\r\n            fallbacks.addFallback(fallbackRank++, \"BUMP\");\r\n        }\r\n\r\n        fallbackRank = MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights, fallbackRank++);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            fallbacks.addFallback(fallbackRank++, \"SPECULARTERM\");\r\n        }\r\n\r\n        if (defines.USESPHERICALFROMREFLECTIONMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALFROMREFLECTIONMAP\");\r\n        }\r\n\r\n        if (defines.USEIRRADIANCEMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"USEIRRADIANCEMAP\");\r\n        }\r\n\r\n        if (defines.LIGHTMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"LIGHTMAP\");\r\n        }\r\n\r\n        if (defines.NORMAL) {\r\n            fallbacks.addFallback(fallbackRank++, \"NORMAL\");\r\n        }\r\n\r\n        if (defines.AMBIENT) {\r\n            fallbacks.addFallback(fallbackRank++, \"AMBIENT\");\r\n        }\r\n\r\n        if (defines.EMISSIVE) {\r\n            fallbacks.addFallback(fallbackRank++, \"EMISSIVE\");\r\n        }\r\n\r\n        if (defines.VERTEXCOLOR) {\r\n            fallbacks.addFallback(fallbackRank++, \"VERTEXCOLOR\");\r\n        }\r\n\r\n        if (defines.MORPHTARGETS) {\r\n            fallbacks.addFallback(fallbackRank++, \"MORPHTARGETS\");\r\n        }\r\n\r\n        if (defines.MULTIVIEW) {\r\n            fallbacks.addFallback(0, \"MULTIVIEW\");\r\n        }\r\n\r\n        //Attributes\r\n        var attribs = [VertexBuffer.PositionKind];\r\n\r\n        if (defines.NORMAL) {\r\n            attribs.push(VertexBuffer.NormalKind);\r\n        }\r\n\r\n        if (defines.TANGENT) {\r\n            attribs.push(VertexBuffer.TangentKind);\r\n        }\r\n\r\n        if (defines.UV1) {\r\n            attribs.push(VertexBuffer.UVKind);\r\n        }\r\n\r\n        if (defines.UV2) {\r\n            attribs.push(VertexBuffer.UV2Kind);\r\n        }\r\n\r\n        if (defines.VERTEXCOLOR) {\r\n            attribs.push(VertexBuffer.ColorKind);\r\n        }\r\n\r\n        MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n        MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n        MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\r\n\r\n        var shaderName = \"pbr\";\r\n\r\n        var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vAmbientColor\", \"vAlbedoColor\", \"vReflectivityColor\", \"vMetallicReflectanceFactors\", \"vEmissiveColor\", \"visibility\", \"vReflectionColor\",\r\n            \"vFogInfos\", \"vFogColor\", \"pointSize\",\r\n            \"vAlbedoInfos\", \"vAmbientInfos\", \"vOpacityInfos\", \"vReflectionInfos\", \"vReflectionPosition\", \"vReflectionSize\", \"vEmissiveInfos\", \"vReflectivityInfos\", \"vReflectionFilteringInfo\", \"vMetallicReflectanceInfos\",\r\n            \"vMicroSurfaceSamplerInfos\", \"vBumpInfos\", \"vLightmapInfos\",\r\n            \"mBones\",\r\n            \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"albedoMatrix\", \"ambientMatrix\", \"opacityMatrix\", \"reflectionMatrix\", \"emissiveMatrix\", \"reflectivityMatrix\", \"normalMatrix\", \"microSurfaceSamplerMatrix\", \"bumpMatrix\", \"lightmapMatrix\", \"metallicReflectanceMatrix\",\r\n            \"vLightingIntensity\",\r\n            \"logarithmicDepthConstant\",\r\n            \"vSphericalX\", \"vSphericalY\", \"vSphericalZ\",\r\n            \"vSphericalXX_ZZ\", \"vSphericalYY_ZZ\", \"vSphericalZZ\",\r\n            \"vSphericalXY\", \"vSphericalYZ\", \"vSphericalZX\",\r\n            \"vSphericalL00\",\r\n            \"vSphericalL1_1\", \"vSphericalL10\", \"vSphericalL11\",\r\n            \"vSphericalL2_2\", \"vSphericalL2_1\", \"vSphericalL20\", \"vSphericalL21\", \"vSphericalL22\",\r\n            \"vReflectionMicrosurfaceInfos\",\r\n            \"vTangentSpaceParams\", \"boneTextureWidth\",\r\n            \"vDebugMode\"\r\n        ];\r\n\r\n        var samplers = [\"albedoSampler\", \"reflectivitySampler\", \"ambientSampler\", \"emissiveSampler\",\r\n            \"bumpSampler\", \"lightmapSampler\", \"opacitySampler\",\r\n            \"reflectionSampler\", \"reflectionSamplerLow\", \"reflectionSamplerHigh\", \"irradianceSampler\",\r\n            \"microSurfaceSampler\", \"environmentBrdfSampler\", \"boneSampler\", \"metallicReflectanceSampler\"];\r\n\r\n        var uniformBuffers = [\"Material\", \"Scene\"];\r\n\r\n        DetailMapConfiguration.AddUniforms(uniforms);\r\n        DetailMapConfiguration.AddSamplers(samplers);\r\n\r\n        PBRSubSurfaceConfiguration.AddUniforms(uniforms);\r\n        PBRSubSurfaceConfiguration.AddSamplers(samplers);\r\n\r\n        PBRClearCoatConfiguration.AddUniforms(uniforms);\r\n        PBRClearCoatConfiguration.AddSamplers(samplers);\r\n\r\n        PBRAnisotropicConfiguration.AddUniforms(uniforms);\r\n        PBRAnisotropicConfiguration.AddSamplers(samplers);\r\n\r\n        PBRSheenConfiguration.AddUniforms(uniforms);\r\n        PBRSheenConfiguration.AddSamplers(samplers);\r\n\r\n        PrePassConfiguration.AddUniforms(uniforms);\r\n        PrePassConfiguration.AddSamplers(uniforms);\r\n\r\n        if (ImageProcessingConfiguration) {\r\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\r\n            ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\r\n        }\r\n\r\n        MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n            uniformsNames: uniforms,\r\n            uniformBuffersNames: uniformBuffers,\r\n            samplers: samplers,\r\n            defines: defines,\r\n            maxSimultaneousLights: this._maxSimultaneousLights\r\n        });\r\n\r\n        const csnrOptions: ICustomShaderNameResolveOptions = {};\r\n\r\n        if (this.customShaderNameResolve) {\r\n            shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\r\n        }\r\n\r\n        var join = defines.toString();\r\n        return engine.createEffect(shaderName, <IEffectCreationOptions>{\r\n            attributes: attribs,\r\n            uniformsNames: uniforms,\r\n            uniformBuffersNames: uniformBuffers,\r\n            samplers: samplers,\r\n            defines: join,\r\n            fallbacks: fallbacks,\r\n            onCompiled: onCompiled,\r\n            onError: onError,\r\n            indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS },\r\n            processFinalCode: csnrOptions.processFinalCode,\r\n            multiTarget: defines.PREPASS\r\n        }, engine);\r\n    }\r\n\r\n    private _prepareDefines(mesh: AbstractMesh, defines: PBRMaterialDefines, useInstances: Nullable<boolean> = null, useClipPlane: Nullable<boolean> = null, useThinInstances: boolean = false): void {\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Lights\r\n        MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\r\n        defines._needNormals = true;\r\n\r\n        // Multiview\r\n        MaterialHelper.PrepareDefinesForMultiview(scene, defines);\r\n\r\n        // PrePass\r\n        MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT);\r\n\r\n        // Textures\r\n        defines.METALLICWORKFLOW = this.isMetallicWorkflow();\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (scene.getEngine().getCaps().textureLOD) {\r\n                    defines.LODBASEDMICROSFURACE = true;\r\n                }\r\n\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._albedoTexture, defines, \"ALBEDO\");\r\n                    defines.GAMMAALBEDO = this._albedoTexture.gammaSpace;\r\n                } else {\r\n                    defines.ALBEDO = false;\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\r\n                    defines.AMBIENTINGRAYSCALE = this._useAmbientInGrayScale;\r\n                } else {\r\n                    defines.AMBIENT = false;\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\r\n                    defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\r\n                } else {\r\n                    defines.OPACITY = false;\r\n                }\r\n\r\n                var reflectionTexture = this._getReflectionTexture();\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    defines.REFLECTION = true;\r\n                    defines.GAMMAREFLECTION = reflectionTexture.gammaSpace;\r\n                    defines.RGBDREFLECTION = reflectionTexture.isRGBD;\r\n                    defines.REFLECTIONMAP_OPPOSITEZ = this.getScene().useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ;\r\n                    defines.LODINREFLECTIONALPHA = reflectionTexture.lodLevelInAlpha;\r\n                    defines.LINEARSPECULARREFLECTION = reflectionTexture.linearSpecularLOD;\r\n\r\n                    if (this.realTimeFiltering && this.realTimeFilteringQuality > 0) {\r\n                        defines.NUM_SAMPLES = \"\" + this.realTimeFilteringQuality;\r\n                        if (engine.webGLVersion > 1) {\r\n                            defines.NUM_SAMPLES = defines.NUM_SAMPLES + \"u\";\r\n                        }\r\n\r\n                        defines.REALTIME_FILTERING = true;\r\n                    } else {\r\n                        defines.REALTIME_FILTERING = false;\r\n                    }\r\n\r\n                    if (reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE) {\r\n                        defines.INVERTCUBICMAP = true;\r\n                    }\r\n\r\n                    defines.REFLECTIONMAP_3D = reflectionTexture.isCube;\r\n\r\n                    defines.REFLECTIONMAP_CUBIC = false;\r\n                    defines.REFLECTIONMAP_EXPLICIT = false;\r\n                    defines.REFLECTIONMAP_PLANAR = false;\r\n                    defines.REFLECTIONMAP_PROJECTION = false;\r\n                    defines.REFLECTIONMAP_SKYBOX = false;\r\n                    defines.REFLECTIONMAP_SPHERICAL = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n                    defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n\r\n                    switch (reflectionTexture.coordinatesMode) {\r\n                        case Texture.EXPLICIT_MODE:\r\n                            defines.REFLECTIONMAP_EXPLICIT = true;\r\n                            break;\r\n                        case Texture.PLANAR_MODE:\r\n                            defines.REFLECTIONMAP_PLANAR = true;\r\n                            break;\r\n                        case Texture.PROJECTION_MODE:\r\n                            defines.REFLECTIONMAP_PROJECTION = true;\r\n                            break;\r\n                        case Texture.SKYBOX_MODE:\r\n                            defines.REFLECTIONMAP_SKYBOX = true;\r\n                            break;\r\n                        case Texture.SPHERICAL_MODE:\r\n                            defines.REFLECTIONMAP_SPHERICAL = true;\r\n                            break;\r\n                        case Texture.EQUIRECTANGULAR_MODE:\r\n                            defines.REFLECTIONMAP_EQUIRECTANGULAR = true;\r\n                            break;\r\n                        case Texture.FIXED_EQUIRECTANGULAR_MODE:\r\n                            defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = true;\r\n                            break;\r\n                        case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\r\n                            defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = true;\r\n                            break;\r\n                        case Texture.CUBIC_MODE:\r\n                        case Texture.INVCUBIC_MODE:\r\n                        default:\r\n                            defines.REFLECTIONMAP_CUBIC = true;\r\n                            defines.USE_LOCAL_REFLECTIONMAP_CUBIC = (<any>reflectionTexture).boundingBoxSize ? true : false;\r\n                            break;\r\n                    }\r\n\r\n                    if (reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\r\n                        if (reflectionTexture.irradianceTexture) {\r\n                            defines.USEIRRADIANCEMAP = true;\r\n                            defines.USESPHERICALFROMREFLECTIONMAP = false;\r\n                        }\r\n                        // Assume using spherical polynomial if the reflection texture is a cube map\r\n                        else if (reflectionTexture.isCube) {\r\n                            defines.USESPHERICALFROMREFLECTIONMAP = true;\r\n                            defines.USEIRRADIANCEMAP = false;\r\n                            if (this._forceIrradianceInFragment || this.realTimeFiltering || scene.getEngine().getCaps().maxVaryingVectors <= 8) {\r\n                                defines.USESPHERICALINVERTEX = false;\r\n                            }\r\n                            else {\r\n                                defines.USESPHERICALINVERTEX = true;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    defines.REFLECTION = false;\r\n                    defines.REFLECTIONMAP_3D = false;\r\n                    defines.REFLECTIONMAP_SPHERICAL = false;\r\n                    defines.REFLECTIONMAP_PLANAR = false;\r\n                    defines.REFLECTIONMAP_CUBIC = false;\r\n                    defines.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n                    defines.REFLECTIONMAP_PROJECTION = false;\r\n                    defines.REFLECTIONMAP_SKYBOX = false;\r\n                    defines.REFLECTIONMAP_EXPLICIT = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n                    defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n                    defines.INVERTCUBICMAP = false;\r\n                    defines.USESPHERICALFROMREFLECTIONMAP = false;\r\n                    defines.USEIRRADIANCEMAP = false;\r\n                    defines.USESPHERICALINVERTEX = false;\r\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\r\n                    defines.LODINREFLECTIONALPHA = false;\r\n                    defines.GAMMAREFLECTION = false;\r\n                    defines.RGBDREFLECTION = false;\r\n                    defines.LINEARSPECULARREFLECTION = false;\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\r\n                    defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\r\n                    defines.GAMMALIGHTMAP = this._lightmapTexture.gammaSpace;\r\n                    defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\r\n                } else {\r\n                    defines.LIGHTMAP = false;\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\r\n                } else {\r\n                    defines.EMISSIVE = false;\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._metallicTexture, defines, \"REFLECTIVITY\");\r\n                        defines.ROUGHNESSSTOREINMETALMAPALPHA = this._useRoughnessFromMetallicTextureAlpha;\r\n                        defines.ROUGHNESSSTOREINMETALMAPGREEN = !this._useRoughnessFromMetallicTextureAlpha && this._useRoughnessFromMetallicTextureGreen;\r\n                        defines.METALLNESSSTOREINMETALMAPBLUE = this._useMetallnessFromMetallicTextureBlue;\r\n                        defines.AOSTOREINMETALMAPRED = this._useAmbientOcclusionFromMetallicTextureRed;\r\n                    }\r\n                    else if (this._reflectivityTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._reflectivityTexture, defines, \"REFLECTIVITY\");\r\n                        defines.MICROSURFACEFROMREFLECTIVITYMAP = this._useMicroSurfaceFromReflectivityMapAlpha;\r\n                        defines.MICROSURFACEAUTOMATIC = this._useAutoMicroSurfaceFromReflectivityMap;\r\n                    } else {\r\n                        defines.REFLECTIVITY = false;\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._metallicReflectanceTexture, defines, \"METALLIC_REFLECTANCE\");\r\n                    } else {\r\n                        defines.METALLIC_REFLECTANCE = false;\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._microSurfaceTexture, defines, \"MICROSURFACEMAP\");\r\n                    } else {\r\n                        defines.MICROSURFACEMAP = false;\r\n                    }\r\n                } else {\r\n                    defines.REFLECTIVITY = false;\r\n                    defines.MICROSURFACEMAP = false;\r\n                }\r\n\r\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\r\n\r\n                    if (this._useParallax && this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                        defines.PARALLAX = true;\r\n                        defines.PARALLAXOCCLUSION = !!this._useParallaxOcclusion;\r\n                    }\r\n                    else {\r\n                        defines.PARALLAX = false;\r\n                    }\r\n\r\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\r\n                } else {\r\n                    defines.BUMP = false;\r\n                }\r\n\r\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    defines.ENVIRONMENTBRDF = true;\r\n                    // Not actual true RGBD, only the B chanel is encoded as RGBD for sheen.\r\n                    defines.ENVIRONMENTBRDF_RGBD = this._environmentBRDFTexture.isRGBD;\r\n                } else {\r\n                    defines.ENVIRONMENTBRDF = false;\r\n                    defines.ENVIRONMENTBRDF_RGBD = false;\r\n                }\r\n\r\n                if (this._shouldUseAlphaFromAlbedoTexture()) {\r\n                    defines.ALPHAFROMALBEDO = true;\r\n                } else {\r\n                    defines.ALPHAFROMALBEDO = false;\r\n                }\r\n            }\r\n\r\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\r\n\r\n            if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\r\n                defines.USEPHYSICALLIGHTFALLOFF = false;\r\n                defines.USEGLTFLIGHTFALLOFF = false;\r\n            }\r\n            else if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\r\n                defines.USEPHYSICALLIGHTFALLOFF = false;\r\n                defines.USEGLTFLIGHTFALLOFF = true;\r\n            }\r\n            else {\r\n                defines.USEPHYSICALLIGHTFALLOFF = true;\r\n                defines.USEGLTFLIGHTFALLOFF = false;\r\n            }\r\n\r\n            defines.RADIANCEOVERALPHA = this._useRadianceOverAlpha;\r\n\r\n            if (!this.backFaceCulling && this._twoSidedLighting) {\r\n                defines.TWOSIDEDLIGHTING = true;\r\n            } else {\r\n                defines.TWOSIDEDLIGHTING = false;\r\n            }\r\n\r\n            defines.SPECULARAA = scene.getEngine().getCaps().standardDerivatives && this._enableSpecularAntiAliasing;\r\n        }\r\n\r\n        if (defines._areTexturesDirty || defines._areMiscDirty) {\r\n            defines.ALPHATESTVALUE = `${this._alphaCutOff}${this._alphaCutOff % 1 === 0 ? \".\" : \"\"}`;\r\n            defines.PREMULTIPLYALPHA = (this.alphaMode === 7 || this.alphaMode === 8);\r\n            defines.ALPHABLEND = this.needAlphaBlendingForMesh(mesh);\r\n            defines.ALPHAFRESNEL = this._useAlphaFresnel || this._useLinearAlphaFresnel;\r\n            defines.LINEARALPHAFRESNEL = this._useLinearAlphaFresnel;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            this._imageProcessingConfiguration.prepareDefines(defines);\r\n        }\r\n\r\n        defines.FORCENORMALFORWARD = this._forceNormalForward;\r\n\r\n        defines.RADIANCEOCCLUSION = this._useRadianceOcclusion;\r\n\r\n        defines.HORIZONOCCLUSION = this._useHorizonOcclusion;\r\n\r\n        // Misc.\r\n        if (defines._areMiscDirty) {\r\n            MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest, defines);\r\n            defines.UNLIT = this._unlit || ((this.pointsCloud || this.wireframe) && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind));\r\n            defines.DEBUGMODE = this._debugMode;\r\n        }\r\n\r\n        // External config\r\n        this.detailMap.prepareDefines(defines, scene);\r\n        this.subSurface.prepareDefines(defines, scene);\r\n        this.clearCoat.prepareDefines(defines, scene);\r\n        this.anisotropy.prepareDefines(defines, mesh, scene);\r\n        this.brdf.prepareDefines(defines);\r\n        this.sheen.prepareDefines(defines, scene);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false, useClipPlane, useThinInstances);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true, this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE);\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     */\r\n    public forceCompilation(mesh: AbstractMesh, onCompiled?: (material: Material) => void, options?: Partial<IMaterialCompilationOptions>): void {\r\n        const localOptions = {\r\n            clipPlane: false,\r\n            useInstances: false,\r\n            ...options\r\n        };\r\n\r\n        const defines = new PBRMaterialDefines();\r\n        const effect = this._prepareEffect(mesh, defines, undefined, undefined, localOptions.useInstances, localOptions.clipPlane, mesh.hasThinInstances)!;\r\n        if (this._onEffectCreatedObservable) {\r\n            onCreatedEffectParameters.effect = effect;\r\n            onCreatedEffectParameters.subMesh = null;\r\n            this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n        }\r\n        if (effect.isReady()) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n        }\r\n        else {\r\n            effect.onCompileObservable.add(() => {\r\n                if (onCompiled) {\r\n                    onCompiled(this);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the uniform buffer layout for the shader.\r\n     */\r\n    public buildUniformLayout(): void {\r\n        // Order is important !\r\n        let ubo = this._uniformBuffer;\r\n        ubo.addUniform(\"vAlbedoInfos\", 2);\r\n        ubo.addUniform(\"vAmbientInfos\", 4);\r\n        ubo.addUniform(\"vOpacityInfos\", 2);\r\n        ubo.addUniform(\"vEmissiveInfos\", 2);\r\n        ubo.addUniform(\"vLightmapInfos\", 2);\r\n        ubo.addUniform(\"vReflectivityInfos\", 3);\r\n        ubo.addUniform(\"vMicroSurfaceSamplerInfos\", 2);\r\n        ubo.addUniform(\"vReflectionInfos\", 2);\r\n        ubo.addUniform(\"vReflectionFilteringInfo\", 2);\r\n        ubo.addUniform(\"vReflectionPosition\", 3);\r\n        ubo.addUniform(\"vReflectionSize\", 3);\r\n        ubo.addUniform(\"vBumpInfos\", 3);\r\n        ubo.addUniform(\"albedoMatrix\", 16);\r\n        ubo.addUniform(\"ambientMatrix\", 16);\r\n        ubo.addUniform(\"opacityMatrix\", 16);\r\n        ubo.addUniform(\"emissiveMatrix\", 16);\r\n        ubo.addUniform(\"lightmapMatrix\", 16);\r\n        ubo.addUniform(\"reflectivityMatrix\", 16);\r\n        ubo.addUniform(\"microSurfaceSamplerMatrix\", 16);\r\n        ubo.addUniform(\"bumpMatrix\", 16);\r\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\r\n        ubo.addUniform(\"reflectionMatrix\", 16);\r\n\r\n        ubo.addUniform(\"vReflectionColor\", 3);\r\n        ubo.addUniform(\"vAlbedoColor\", 4);\r\n        ubo.addUniform(\"vLightingIntensity\", 4);\r\n\r\n        ubo.addUniform(\"vReflectionMicrosurfaceInfos\", 3);\r\n        ubo.addUniform(\"pointSize\", 1);\r\n        ubo.addUniform(\"vReflectivityColor\", 4);\r\n        ubo.addUniform(\"vEmissiveColor\", 3);\r\n        ubo.addUniform(\"visibility\", 1);\r\n        ubo.addUniform(\"vMetallicReflectanceFactors\", 4);\r\n        ubo.addUniform(\"vMetallicReflectanceInfos\", 2);\r\n        ubo.addUniform(\"metallicReflectanceMatrix\", 16);\r\n\r\n        PBRClearCoatConfiguration.PrepareUniformBuffer(ubo);\r\n        PBRAnisotropicConfiguration.PrepareUniformBuffer(ubo);\r\n        PBRSheenConfiguration.PrepareUniformBuffer(ubo);\r\n        PBRSubSurfaceConfiguration.PrepareUniformBuffer(ubo);\r\n        DetailMapConfiguration.PrepareUniformBuffer(ubo);\r\n\r\n        ubo.create();\r\n    }\r\n\r\n    /**\r\n     * Unbinds the material from the mesh\r\n     */\r\n    public unbind(): void {\r\n        if (this._activeEffect) {\r\n            let needFlag = false;\r\n            if (this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n                this._activeEffect.setTexture(\"reflection2DSampler\", null);\r\n                needFlag = true;\r\n            }\r\n\r\n            if (this.subSurface.unbind(this._activeEffect)) {\r\n                needFlag = true;\r\n            }\r\n\r\n            if (needFlag) {\r\n                this._markAllSubMeshesAsTexturesDirty();\r\n            }\r\n        }\r\n\r\n        super.unbind();\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh data.\r\n     * @param world - The world matrix.\r\n     * @param mesh - The BJS mesh.\r\n     * @param subMesh - A submesh of the BJS mesh.\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        var scene = this.getScene();\r\n\r\n        var defines = <PBRMaterialDefines>subMesh._materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        var effect = subMesh.effect;\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices\r\n        if (!defines.INSTANCES || defines.THIN_INSTANCES) {\r\n            this.bindOnlyWorldMatrix(world);\r\n        }\r\n\r\n        // PrePass\r\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\r\n\r\n        // Normal Matrix\r\n        if (defines.OBJECTSPACE_NORMALMAP) {\r\n            world.toNormalMatrix(this._normalMatrix);\r\n            this.bindOnlyNormalMatrix(this._normalMatrix);\r\n        }\r\n\r\n        let mustRebind = this._mustRebind(scene, effect, mesh.visibility);\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect, this.prePassConfiguration);\r\n\r\n        let reflectionTexture: Nullable<BaseTexture> = null;\r\n        let ubo = this._uniformBuffer;\r\n        if (mustRebind) {\r\n            var engine = scene.getEngine();\r\n            ubo.bindToEffect(effect, \"Material\");\r\n\r\n            this.bindViewProjection(effect);\r\n            reflectionTexture = this._getReflectionTexture();\r\n\r\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync) {\r\n\r\n                // Texture uniforms\r\n                if (scene.texturesEnabled) {\r\n                    if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                        ubo.updateFloat2(\"vAlbedoInfos\", this._albedoTexture.coordinatesIndex, this._albedoTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._albedoTexture, ubo, \"albedo\");\r\n                    }\r\n\r\n                    if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                        ubo.updateFloat4(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level, this._ambientTextureStrength, this._ambientTextureImpactOnAnalyticalLights);\r\n                        MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\r\n                    }\r\n\r\n                    if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\r\n                    }\r\n\r\n                    if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                        ubo.updateMatrix(\"reflectionMatrix\", reflectionTexture.getReflectionTextureMatrix());\r\n                        ubo.updateFloat2(\"vReflectionInfos\", reflectionTexture.level, 0);\r\n\r\n                        if ((<any>reflectionTexture).boundingBoxSize) {\r\n                            let cubeTexture = <CubeTexture>reflectionTexture;\r\n\r\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n\r\n                        if (this.realTimeFiltering) {\r\n                            const width = reflectionTexture.getSize().width;\r\n                            ubo.updateFloat2(\"vReflectionFilteringInfo\", width, Scalar.Log2(width));\r\n                        }\r\n\r\n                        if (!defines.USEIRRADIANCEMAP) {\r\n                            var polynomials = reflectionTexture.sphericalPolynomial;\r\n                            if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\r\n                                if (defines.SPHERICAL_HARMONICS) {\r\n                                    const preScaledHarmonics = polynomials.preScaledHarmonics;\r\n                                    this._activeEffect.setVector3(\"vSphericalL00\", preScaledHarmonics.l00);\r\n                                    this._activeEffect.setVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\r\n                                    this._activeEffect.setVector3(\"vSphericalL10\", preScaledHarmonics.l10);\r\n                                    this._activeEffect.setVector3(\"vSphericalL11\", preScaledHarmonics.l11);\r\n                                    this._activeEffect.setVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\r\n                                    this._activeEffect.setVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\r\n                                    this._activeEffect.setVector3(\"vSphericalL20\", preScaledHarmonics.l20);\r\n                                    this._activeEffect.setVector3(\"vSphericalL21\", preScaledHarmonics.l21);\r\n                                    this._activeEffect.setVector3(\"vSphericalL22\", preScaledHarmonics.l22);\r\n                                }\r\n                                else {\r\n                                    this._activeEffect.setFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\r\n                                    this._activeEffect.setFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\r\n                                    this._activeEffect.setFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\r\n                                    this._activeEffect.setFloat3(\"vSphericalXX_ZZ\", polynomials.xx.x - polynomials.zz.x,\r\n                                        polynomials.xx.y - polynomials.zz.y,\r\n                                        polynomials.xx.z - polynomials.zz.z);\r\n                                    this._activeEffect.setFloat3(\"vSphericalYY_ZZ\", polynomials.yy.x - polynomials.zz.x,\r\n                                        polynomials.yy.y - polynomials.zz.y,\r\n                                        polynomials.yy.z - polynomials.zz.z);\r\n                                    this._activeEffect.setFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\r\n                                    this._activeEffect.setFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\r\n                                    this._activeEffect.setFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\r\n                                    this._activeEffect.setFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        ubo.updateFloat3(\"vReflectionMicrosurfaceInfos\",\r\n                            reflectionTexture.getSize().width,\r\n                            reflectionTexture.lodGenerationScale,\r\n                            reflectionTexture.lodGenerationOffset);\r\n                    }\r\n\r\n                    if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\r\n                    }\r\n\r\n                    if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\r\n                    }\r\n\r\n                    if (MaterialFlags.SpecularTextureEnabled) {\r\n                        if (this._metallicTexture) {\r\n                            ubo.updateFloat3(\"vReflectivityInfos\", this._metallicTexture.coordinatesIndex, this._metallicTexture.level, this._ambientTextureStrength);\r\n                            MaterialHelper.BindTextureMatrix(this._metallicTexture, ubo, \"reflectivity\");\r\n                        }\r\n                        else if (this._reflectivityTexture) {\r\n                            ubo.updateFloat3(\"vReflectivityInfos\", this._reflectivityTexture.coordinatesIndex, this._reflectivityTexture.level, 1.0);\r\n                            MaterialHelper.BindTextureMatrix(this._reflectivityTexture, ubo, \"reflectivity\");\r\n                        }\r\n\r\n                        if (this._metallicReflectanceTexture) {\r\n                            ubo.updateFloat2(\"vMetallicReflectanceInfos\", this._metallicReflectanceTexture.coordinatesIndex, this._metallicReflectanceTexture.level);\r\n                            MaterialHelper.BindTextureMatrix(this._metallicReflectanceTexture, ubo, \"metallicReflectance\");\r\n                        }\r\n\r\n                        if (this._microSurfaceTexture) {\r\n                            ubo.updateFloat2(\"vMicroSurfaceSamplerInfos\", this._microSurfaceTexture.coordinatesIndex, this._microSurfaceTexture.level);\r\n                            MaterialHelper.BindTextureMatrix(this._microSurfaceTexture, ubo, \"microSurfaceSampler\");\r\n                        }\r\n                    }\r\n\r\n                    if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level, this._parallaxScaleBias);\r\n                        MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\r\n\r\n                        if (scene._mirroredCameraPosition) {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\r\n                        } else {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Point size\r\n                if (this.pointsCloud) {\r\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\r\n                }\r\n\r\n                // Colors\r\n                if (defines.METALLICWORKFLOW) {\r\n                    TmpColors.Color3[0].r = (this._metallic === undefined || this._metallic === null) ? 1 : this._metallic;\r\n                    TmpColors.Color3[0].g = (this._roughness === undefined || this._roughness === null) ? 1 : this._roughness;\r\n                    ubo.updateColor4(\"vReflectivityColor\", TmpColors.Color3[0], 1);\r\n\r\n                    const ior = this.subSurface.indexOfRefraction;\r\n                    const outside_ior = 1; // consider air as clear coat and other layaers would remap in the shader.\r\n\r\n                    // We are here deriving our default reflectance from a common value for none metallic surface.\r\n                    // Based of the schlick fresnel approximation model\r\n                    // for dielectrics.\r\n                    const f0 = Math.pow((ior - outside_ior) / (ior + outside_ior), 2);\r\n\r\n                    // Tweak the default F0 and F90 based on our given setup\r\n                    this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\r\n                    const metallicF90 = this._metallicF0Factor;\r\n\r\n                    ubo.updateColor4(\"vMetallicReflectanceFactors\", TmpColors.Color3[0], metallicF90);\r\n                }\r\n                else {\r\n                    ubo.updateColor4(\"vReflectivityColor\", this._reflectivityColor, this._microSurface);\r\n                }\r\n\r\n                ubo.updateColor3(\"vEmissiveColor\", MaterialFlags.EmissiveTextureEnabled ? this._emissiveColor : Color3.BlackReadOnly);\r\n                ubo.updateColor3(\"vReflectionColor\", this._reflectionColor);\r\n                if (!defines.SS_REFRACTION && this.subSurface.linkRefractionWithTransparency) {\r\n                    ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, 1);\r\n                }\r\n                else {\r\n                    ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, this.alpha);\r\n                }\r\n\r\n                // Misc\r\n                this._lightingInfos.x = this._directIntensity;\r\n                this._lightingInfos.y = this._emissiveIntensity;\r\n                this._lightingInfos.z = this._environmentIntensity * scene.environmentIntensity;\r\n                this._lightingInfos.w = this._specularIntensity;\r\n\r\n                ubo.updateVector4(\"vLightingIntensity\", this._lightingInfos);\r\n            }\r\n\r\n            // Visibility\r\n            ubo.updateFloat(\"visibility\", mesh.visibility);\r\n\r\n            // Textures\r\n            if (scene.texturesEnabled) {\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    ubo.setTexture(\"albedoSampler\", this._albedoTexture);\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    ubo.setTexture(\"ambientSampler\", this._ambientTexture);\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    ubo.setTexture(\"opacitySampler\", this._opacityTexture);\r\n                }\r\n\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    if (defines.LODBASEDMICROSFURACE) {\r\n                        ubo.setTexture(\"reflectionSampler\", reflectionTexture);\r\n                    }\r\n                    else {\r\n                        ubo.setTexture(\"reflectionSampler\", reflectionTexture._lodTextureMid || reflectionTexture);\r\n                        ubo.setTexture(\"reflectionSamplerLow\", reflectionTexture._lodTextureLow || reflectionTexture);\r\n                        ubo.setTexture(\"reflectionSamplerHigh\", reflectionTexture._lodTextureHigh || reflectionTexture);\r\n                    }\r\n\r\n                    if (defines.USEIRRADIANCEMAP) {\r\n                        ubo.setTexture(\"irradianceSampler\", reflectionTexture.irradianceTexture);\r\n                    }\r\n                }\r\n\r\n                if (defines.ENVIRONMENTBRDF) {\r\n                    ubo.setTexture(\"environmentBrdfSampler\", this._environmentBRDFTexture);\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    ubo.setTexture(\"emissiveSampler\", this._emissiveTexture);\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    ubo.setTexture(\"lightmapSampler\", this._lightmapTexture);\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        ubo.setTexture(\"reflectivitySampler\", this._metallicTexture);\r\n                    }\r\n                    else if (this._reflectivityTexture) {\r\n                        ubo.setTexture(\"reflectivitySampler\", this._reflectivityTexture);\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture) {\r\n                        ubo.setTexture(\"metallicReflectanceSampler\", this._metallicReflectanceTexture);\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        ubo.setTexture(\"microSurfaceSampler\", this._microSurfaceTexture);\r\n                    }\r\n                }\r\n\r\n                if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    ubo.setTexture(\"bumpSampler\", this._bumpTexture);\r\n                }\r\n            }\r\n\r\n            this.detailMap.bindForSubMesh(ubo, scene, this.isFrozen);\r\n            this.subSurface.bindForSubMesh(ubo, scene, engine, this.isFrozen, defines.LODBASEDMICROSFURACE, this.realTimeFiltering);\r\n            this.clearCoat.bindForSubMesh(ubo, scene, engine, this._disableBumpMap, this.isFrozen, this._invertNormalMapX, this._invertNormalMapY, subMesh);\r\n            this.anisotropy.bindForSubMesh(ubo, scene, this.isFrozen);\r\n            this.sheen.bindForSubMesh(ubo, scene, this.isFrozen, subMesh);\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            // Colors\r\n            scene.ambientColor.multiplyToRef(this._ambientColor, this._globalAmbientColor);\r\n\r\n            var eyePosition = scene._forcedViewPosition ? scene._forcedViewPosition : (scene._mirroredCameraPosition ? scene._mirroredCameraPosition : (<Camera>scene.activeCamera).globalPosition);\r\n            var invertNormal = (scene.useRightHandedSystem === (scene._mirroredCameraPosition != null));\r\n            effect.setFloat4(\"vEyePosition\",\r\n                eyePosition.x,\r\n                eyePosition.y,\r\n                eyePosition.z,\r\n                invertNormal ? -1 : 1);\r\n            effect.setColor3(\"vAmbientColor\", this._globalAmbientColor);\r\n\r\n            effect.setFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\r\n        }\r\n\r\n        if (mustRebind || !this.isFrozen) {\r\n            // Lights\r\n            if (scene.lightsEnabled && !this._disableLighting) {\r\n                MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights, this._rebuildInParallel);\r\n            }\r\n\r\n            // View\r\n            if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE || reflectionTexture) {\r\n                this.bindView(effect);\r\n            }\r\n\r\n            // Fog\r\n            MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect, true);\r\n\r\n            // Morph targets\r\n            if (defines.NUM_MORPH_INFLUENCERS) {\r\n                MaterialHelper.BindMorphTargetParameters(mesh, this._activeEffect);\r\n            }\r\n\r\n            // image processing\r\n            this._imageProcessingConfiguration!.bind(this._activeEffect);\r\n\r\n            // Log. depth\r\n            MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\r\n        }\r\n\r\n        ubo.update();\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n    }\r\n\r\n    /**\r\n     * Returns the animatable textures.\r\n     * @returns - Array of animatable textures.\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        var results = [];\r\n\r\n        if (this._albedoTexture && this._albedoTexture.animations && this._albedoTexture.animations.length > 0) {\r\n            results.push(this._albedoTexture);\r\n        }\r\n\r\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\r\n            results.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\r\n            results.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\r\n            results.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._metallicTexture && this._metallicTexture.animations && this._metallicTexture.animations.length > 0) {\r\n            results.push(this._metallicTexture);\r\n        }\r\n        else if (this._reflectivityTexture && this._reflectivityTexture.animations && this._reflectivityTexture.animations.length > 0) {\r\n            results.push(this._reflectivityTexture);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            results.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\r\n            results.push(this._lightmapTexture);\r\n        }\r\n\r\n        this.detailMap.getAnimatables(results);\r\n        this.subSurface.getAnimatables(results);\r\n        this.clearCoat.getAnimatables(results);\r\n        this.sheen.getAnimatables(results);\r\n        this.anisotropy.getAnimatables(results);\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Returns the texture used for reflections.\r\n     * @returns - Reflection texture if present.  Otherwise, returns the environment texture.\r\n     */\r\n    private _getReflectionTexture(): Nullable<BaseTexture> {\r\n        if (this._reflectionTexture) {\r\n            return this._reflectionTexture;\r\n        }\r\n\r\n        return this.getScene().environmentTexture;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of the actively used textures.\r\n     * @returns - Array of BaseTextures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        var activeTextures = super.getActiveTextures();\r\n\r\n        if (this._albedoTexture) {\r\n            activeTextures.push(this._albedoTexture);\r\n        }\r\n\r\n        if (this._ambientTexture) {\r\n            activeTextures.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture) {\r\n            activeTextures.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture) {\r\n            activeTextures.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._reflectivityTexture) {\r\n            activeTextures.push(this._reflectivityTexture);\r\n        }\r\n\r\n        if (this._metallicTexture) {\r\n            activeTextures.push(this._metallicTexture);\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture) {\r\n            activeTextures.push(this._metallicReflectanceTexture);\r\n        }\r\n\r\n        if (this._microSurfaceTexture) {\r\n            activeTextures.push(this._microSurfaceTexture);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture) {\r\n            activeTextures.push(this._lightmapTexture);\r\n        }\r\n\r\n        this.detailMap.getActiveTextures(activeTextures);\r\n        this.subSurface.getActiveTextures(activeTextures);\r\n        this.clearCoat.getActiveTextures(activeTextures);\r\n        this.sheen.getActiveTextures(activeTextures);\r\n        this.anisotropy.getActiveTextures(activeTextures);\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if a texture is used in the material.\r\n     * @param texture - Base texture to use.\r\n     * @returns - Boolean specifying if a texture is used in the material.\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._albedoTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._ambientTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectivityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._metallicTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._microSurfaceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._lightmapTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return this.detailMap.hasTexture(texture) ||\r\n            this.subSurface.hasTexture(texture) ||\r\n            this.clearCoat.hasTexture(texture) ||\r\n            this.sheen.hasTexture(texture) ||\r\n            this.anisotropy.hasTexture(texture);\r\n    }\r\n\r\n    /**\r\n     * Sets the required values to the prepass renderer.\r\n     * @param prePassRenderer defines the prepass renderer to setup\r\n     */\r\n    public setPrePassRenderer(prePassRenderer: PrePassRenderer): boolean {\r\n        if (this.subSurface.isScatteringEnabled) {\r\n            let subSurfaceConfiguration = this.getScene().enableSubSurfaceForPrePass();\r\n            if (subSurfaceConfiguration) {\r\n                subSurfaceConfiguration.enabled = true;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources of the material.\r\n     * @param forceDisposeEffect - Forces the disposal of effects.\r\n     * @param forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            if (this._environmentBRDFTexture && this.getScene().environmentBRDFTexture !== this._environmentBRDFTexture) {\r\n                this._environmentBRDFTexture.dispose();\r\n            }\r\n\r\n            this._albedoTexture?.dispose();\r\n            this._ambientTexture?.dispose();\r\n            this._opacityTexture?.dispose();\r\n            this._reflectionTexture?.dispose();\r\n            this._emissiveTexture?.dispose();\r\n            this._metallicTexture?.dispose();\r\n            this._reflectivityTexture?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._lightmapTexture?.dispose();\r\n            this._metallicReflectanceTexture?.dispose();\r\n            this._microSurfaceTexture?.dispose();\r\n        }\r\n\r\n        this.detailMap.dispose(forceDisposeTextures);\r\n        this.subSurface.dispose(forceDisposeTextures);\r\n        this.clearCoat.dispose(forceDisposeTextures);\r\n        this.sheen.dispose(forceDisposeTextures);\r\n        this.anisotropy.dispose(forceDisposeTextures);\r\n\r\n        this._renderTargets.dispose();\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}