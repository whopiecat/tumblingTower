{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { WebXRExperienceHelper } from \"./webXRExperienceHelper\";\nimport { WebXRInput } from \"./webXRInput\";\nimport { WebXRControllerPointerSelection } from \"./features/WebXRControllerPointerSelection\";\nimport { WebXREnterExitUI } from \"./webXREnterExitUI\";\nimport { WebXRMotionControllerTeleportation } from \"./features/WebXRControllerTeleportation\";\nimport { Logger } from \"../Misc/logger\";\n/**\r\n * Options for the default xr helper\r\n */\n\nvar WebXRDefaultExperienceOptions =\n/** @class */\nfunction () {\n  function WebXRDefaultExperienceOptions() {}\n\n  return WebXRDefaultExperienceOptions;\n}();\n\nexport { WebXRDefaultExperienceOptions };\n/**\r\n * Default experience which provides a similar setup to the previous webVRExperience\r\n */\n\nvar WebXRDefaultExperience =\n/** @class */\nfunction () {\n  function WebXRDefaultExperience() {}\n  /**\r\n   * Creates the default xr experience\r\n   * @param scene scene\r\n   * @param options options for basic configuration\r\n   * @returns resulting WebXRDefaultExperience\r\n   */\n\n\n  WebXRDefaultExperience.CreateAsync = function (scene, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var result = new WebXRDefaultExperience(); // Create base experience\n\n    return WebXRExperienceHelper.CreateAsync(scene).then(function (xrHelper) {\n      result.baseExperience = xrHelper;\n\n      if (options.ignoreNativeCameraTransformation) {\n        result.baseExperience.camera.compensateOnFirstFrame = false;\n      } // Add controller support\n\n\n      result.input = new WebXRInput(xrHelper.sessionManager, xrHelper.camera, __assign({\n        controllerOptions: {\n          renderingGroupId: options.renderingGroupId\n        }\n      }, options.inputOptions || {}));\n      result.pointerSelection = result.baseExperience.featuresManager.enableFeature(WebXRControllerPointerSelection.Name, options.useStablePlugins ? \"stable\" : \"latest\", {\n        xrInput: result.input,\n        renderingGroupId: options.renderingGroupId\n      }); // Add default teleportation, including rotation\n\n      if (!options.disableTeleportation) {\n        result.teleportation = result.baseExperience.featuresManager.enableFeature(WebXRMotionControllerTeleportation.Name, options.useStablePlugins ? \"stable\" : \"latest\", {\n          floorMeshes: options.floorMeshes,\n          xrInput: result.input,\n          renderingGroupId: options.renderingGroupId\n        });\n        result.teleportation.setSelectionFeature(result.pointerSelection);\n      } // Create the WebXR output target\n\n\n      result.renderTarget = result.baseExperience.sessionManager.getWebXRRenderTarget(options.outputCanvasOptions);\n\n      if (!options.disableDefaultUI) {\n        var uiOptions = __assign({\n          renderTarget: result.renderTarget\n        }, options.uiOptions || {});\n\n        if (options.optionalFeatures) {\n          if (typeof options.optionalFeatures === \"boolean\") {\n            uiOptions.optionalFeatures = [\"hit-test\", \"anchors\", \"plane-detection\", \"hand-tracking\"];\n          } else {\n            uiOptions.optionalFeatures = options.optionalFeatures;\n          }\n        } // Create ui for entering/exiting xr\n\n\n        return WebXREnterExitUI.CreateAsync(scene, result.baseExperience, uiOptions).then(function (ui) {\n          result.enterExitUI = ui;\n        });\n      } else {\n        return;\n      }\n    }).then(function () {\n      return result;\n    }).catch(function (error) {\n      Logger.Error(\"Error initializing XR\");\n      Logger.Error(error);\n      return result;\n    });\n  };\n  /**\r\n   * DIsposes of the experience helper\r\n   */\n\n\n  WebXRDefaultExperience.prototype.dispose = function () {\n    if (this.baseExperience) {\n      this.baseExperience.dispose();\n    }\n\n    if (this.input) {\n      this.input.dispose();\n    }\n\n    if (this.enterExitUI) {\n      this.enterExitUI.dispose();\n    }\n\n    if (this.renderTarget) {\n      this.renderTarget.dispose();\n    }\n  };\n\n  return WebXRDefaultExperience;\n}();\n\nexport { WebXRDefaultExperience };","map":{"version":3,"sources":["../../../sourceES6/core/XR/webXRDefaultExperience.ts"],"names":[],"mappings":";AAAA,SAAS,qBAAT,QAAsC,yBAAtC;AAEA,SAAS,UAAT,QAA+C,cAA/C;AACA,SAAS,+BAAT,QAAyF,4CAAzF;AAEA,SAAS,gBAAT,QAA0D,oBAA1D;AAGA,SAAS,kCAAT,QAA+E,yCAA/E;AACA,SAAS,MAAT,QAAuB,gBAAvB;AAEA;;;;AAGA,IAAA,6BAAA;AAAA;AAAA,YAAA;AAAA,WAAA,6BAAA,GAAA,CA8CC;;AAAD,SAAA,6BAAA;AAAC,CA9CD,EAAA;;;AAgDA;;;;AAGA,IAAA,sBAAA;AAAA;AAAA,YAAA;AA0BI,WAAA,sBAAA,GAAA,CAAwB;AAExB;;;;;;;;AAMc,EAAA,sBAAA,CAAA,WAAA,GAAd,UAA0B,KAA1B,EAAwC,OAAxC,EAAmF;AAA3C,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA2C;;AAC/E,QAAI,MAAM,GAAG,IAAI,sBAAJ,EAAb,CAD+E,CAG/E;;AACA,WAAO,qBAAqB,CAAC,WAAtB,CAAkC,KAAlC,EACF,IADE,CACG,UAAC,QAAD,EAAS;AACX,MAAA,MAAM,CAAC,cAAP,GAAwB,QAAxB;;AAEA,UAAI,OAAO,CAAC,gCAAZ,EAA8C;AAC1C,QAAA,MAAM,CAAC,cAAP,CAAsB,MAAtB,CAA6B,sBAA7B,GAAsD,KAAtD;AACH,OALU,CAOX;;;AACA,MAAA,MAAM,CAAC,KAAP,GAAe,IAAI,UAAJ,CAAe,QAAQ,CAAC,cAAxB,EAAwC,QAAQ,CAAC,MAAjD,EAAuD,QAAA,CAAA;AAClE,QAAA,iBAAiB,EAAE;AACf,UAAA,gBAAgB,EAAE,OAAO,CAAC;AADX;AAD+C,OAAA,EAI9D,OAAO,CAAC,YAAR,IAAwB,EAJsC,CAAvD,CAAf;AAMA,MAAA,MAAM,CAAC,gBAAP,GAA2D,MAAM,CAAC,cAAP,CAAsB,eAAtB,CAAsC,aAAtC,CAAoD,+BAA+B,CAAC,IAApF,EAA0F,OAAO,CAAC,gBAAR,GAA2B,QAA3B,GAAsC,QAAhI,EAAmL;AAC1O,QAAA,OAAO,EAAE,MAAM,CAAC,KAD0N;AAE1O,QAAA,gBAAgB,EAAE,OAAO,CAAC;AAFgN,OAAnL,CAA3D,CAdW,CAmBX;;AACA,UAAI,CAAC,OAAO,CAAC,oBAAb,EAAmC;AAC/B,QAAA,MAAM,CAAC,aAAP,GAA2D,MAAM,CAAC,cAAP,CAAsB,eAAtB,CAAsC,aAAtC,CAAoD,kCAAkC,CAAC,IAAvF,EAA6F,OAAO,CAAC,gBAAR,GAA2B,QAA3B,GAAsC,QAAnI,EAAyK;AAChO,UAAA,WAAW,EAAE,OAAO,CAAC,WAD2M;AAEhO,UAAA,OAAO,EAAE,MAAM,CAAC,KAFgN;AAGhO,UAAA,gBAAgB,EAAE,OAAO,CAAC;AAHsM,SAAzK,CAA3D;AAKA,QAAA,MAAM,CAAC,aAAP,CAAqB,mBAArB,CAAyC,MAAM,CAAC,gBAAhD;AACH,OA3BU,CA6BX;;;AACA,MAAA,MAAM,CAAC,YAAP,GAAsB,MAAM,CAAC,cAAP,CAAsB,cAAtB,CAAqC,oBAArC,CAA0D,OAAO,CAAC,mBAAlE,CAAtB;;AAEA,UAAI,CAAC,OAAO,CAAC,gBAAb,EAA+B;AAC3B,YAAM,SAAS,GAAA,QAAA,CAAA;AACX,UAAA,YAAY,EAAE,MAAM,CAAC;AADV,SAAA,EAEP,OAAO,CAAC,SAAR,IAAqB,EAFd,CAAf;;AAIA,YAAI,OAAO,CAAC,gBAAZ,EAA8B;AAC1B,cAAI,OAAO,OAAO,CAAC,gBAAf,KAAoC,SAAxC,EAAmD;AAC/C,YAAA,SAAS,CAAC,gBAAV,GAA6B,CAAC,UAAD,EAAa,SAAb,EAAwB,iBAAxB,EAA2C,eAA3C,CAA7B;AACH,WAFD,MAEO;AACH,YAAA,SAAS,CAAC,gBAAV,GAA6B,OAAO,CAAC,gBAArC;AACH;AACJ,SAX0B,CAY3B;;;AACA,eAAO,gBAAgB,CAAC,WAAjB,CAA6B,KAA7B,EAAoC,MAAM,CAAC,cAA3C,EAA2D,SAA3D,EAAsE,IAAtE,CAA2E,UAAC,EAAD,EAAG;AACjF,UAAA,MAAM,CAAC,WAAP,GAAqB,EAArB;AACH,SAFM,CAAP;AAGH,OAhBD,MAgBO;AACH;AACH;AACJ,KApDE,EAqDF,IArDE,CAqDG,YAAA;AACF,aAAO,MAAP;AACH,KAvDE,EAwDF,KAxDE,CAwDI,UAAC,KAAD,EAAM;AACT,MAAA,MAAM,CAAC,KAAP,CAAa,uBAAb;AACA,MAAA,MAAM,CAAC,KAAP,CAAa,KAAb;AACA,aAAO,MAAP;AACH,KA5DE,CAAP;AA6DH,GAjEa;AAmEd;;;;;AAGO,EAAA,sBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,QAAI,KAAK,cAAT,EAAyB;AACrB,WAAK,cAAL,CAAoB,OAApB;AACH;;AACD,QAAI,KAAK,KAAT,EAAgB;AACZ,WAAK,KAAL,CAAW,OAAX;AACH;;AACD,QAAI,KAAK,WAAT,EAAsB;AAClB,WAAK,WAAL,CAAiB,OAAjB;AACH;;AACD,QAAI,KAAK,YAAT,EAAuB;AACnB,WAAK,YAAL,CAAkB,OAAlB;AACH;AACJ,GAbM;;AAcX,SAAA,sBAAA;AAAC,CAtHD,EAAA","sourcesContent":["import { WebXRExperienceHelper } from \"./webXRExperienceHelper\";\r\nimport { Scene } from \"../scene\";\r\nimport { WebXRInput, IWebXRInputOptions } from \"./webXRInput\";\r\nimport { WebXRControllerPointerSelection, IWebXRControllerPointerSelectionOptions } from \"./features/WebXRControllerPointerSelection\";\r\nimport { WebXRRenderTarget } from \"./webXRTypes\";\r\nimport { WebXREnterExitUI, WebXREnterExitUIOptions } from \"./webXREnterExitUI\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { WebXRManagedOutputCanvasOptions } from \"./webXRManagedOutputCanvas\";\r\nimport { WebXRMotionControllerTeleportation, IWebXRTeleportationOptions } from \"./features/WebXRControllerTeleportation\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\n/**\r\n * Options for the default xr helper\r\n */\r\nexport class WebXRDefaultExperienceOptions {\r\n    /**\r\n     * Enable or disable default UI to enter XR\r\n     */\r\n    public disableDefaultUI?: boolean;\r\n    /**\r\n     * Should teleportation not initialize. defaults to false.\r\n     */\r\n    public disableTeleportation?: boolean;\r\n    /**\r\n     * Floor meshes that will be used for teleport\r\n     */\r\n    public floorMeshes?: Array<AbstractMesh>;\r\n    /**\r\n     * If set to true, the first frame will not be used to reset position\r\n     * The first frame is mainly used when copying transformation from the old camera\r\n     * Mainly used in AR\r\n     */\r\n    public ignoreNativeCameraTransformation?: boolean;\r\n    /**\r\n     * Disable the controller mesh-loading. Can be used if you want to load your own meshes\r\n     */\r\n    public inputOptions?: IWebXRInputOptions;\r\n    /**\r\n     * optional configuration for the output canvas\r\n     */\r\n    public outputCanvasOptions?: WebXRManagedOutputCanvasOptions;\r\n    /**\r\n     * optional UI options. This can be used among other to change session mode and reference space type\r\n     */\r\n    public uiOptions?: WebXREnterExitUIOptions;\r\n    /**\r\n     * When loading teleportation and pointer select, use stable versions instead of latest.\r\n     */\r\n    public useStablePlugins?: boolean;\r\n\r\n    /**\r\n     * An optional rendering group id that will be set globally for teleportation, pointer selection and default controller meshes\r\n     */\r\n    public renderingGroupId?: number;\r\n\r\n    /**\r\n     * A list of optional features to init the session with\r\n     * If set to true, all features we support will be added\r\n     */\r\n    optionalFeatures?: boolean | string[];\r\n}\r\n\r\n/**\r\n * Default experience which provides a similar setup to the previous webVRExperience\r\n */\r\nexport class WebXRDefaultExperience {\r\n    /**\r\n     * Base experience\r\n     */\r\n    public baseExperience: WebXRExperienceHelper;\r\n    /**\r\n     * Enables ui for entering/exiting xr\r\n     */\r\n    public enterExitUI: WebXREnterExitUI;\r\n    /**\r\n     * Input experience extension\r\n     */\r\n    public input: WebXRInput;\r\n    /**\r\n     * Enables laser pointer and selection\r\n     */\r\n    public pointerSelection: WebXRControllerPointerSelection;\r\n    /**\r\n     * Default target xr should render to\r\n     */\r\n    public renderTarget: WebXRRenderTarget;\r\n    /**\r\n     * Enables teleportation\r\n     */\r\n    public teleportation: WebXRMotionControllerTeleportation;\r\n\r\n    private constructor() {}\r\n\r\n    /**\r\n     * Creates the default xr experience\r\n     * @param scene scene\r\n     * @param options options for basic configuration\r\n     * @returns resulting WebXRDefaultExperience\r\n     */\r\n    public static CreateAsync(scene: Scene, options: WebXRDefaultExperienceOptions = {}) {\r\n        var result = new WebXRDefaultExperience();\r\n\r\n        // Create base experience\r\n        return WebXRExperienceHelper.CreateAsync(scene)\r\n            .then((xrHelper) => {\r\n                result.baseExperience = xrHelper;\r\n\r\n                if (options.ignoreNativeCameraTransformation) {\r\n                    result.baseExperience.camera.compensateOnFirstFrame = false;\r\n                }\r\n\r\n                // Add controller support\r\n                result.input = new WebXRInput(xrHelper.sessionManager, xrHelper.camera, {\r\n                    controllerOptions: {\r\n                        renderingGroupId: options.renderingGroupId,\r\n                    },\r\n                    ...(options.inputOptions || {}),\r\n                });\r\n                result.pointerSelection = <WebXRControllerPointerSelection>result.baseExperience.featuresManager.enableFeature(WebXRControllerPointerSelection.Name, options.useStablePlugins ? \"stable\" : \"latest\", <IWebXRControllerPointerSelectionOptions>{\r\n                    xrInput: result.input,\r\n                    renderingGroupId: options.renderingGroupId,\r\n                });\r\n\r\n                // Add default teleportation, including rotation\r\n                if (!options.disableTeleportation) {\r\n                    result.teleportation = <WebXRMotionControllerTeleportation>result.baseExperience.featuresManager.enableFeature(WebXRMotionControllerTeleportation.Name, options.useStablePlugins ? \"stable\" : \"latest\", <IWebXRTeleportationOptions>{\r\n                        floorMeshes: options.floorMeshes,\r\n                        xrInput: result.input,\r\n                        renderingGroupId: options.renderingGroupId,\r\n                    });\r\n                    result.teleportation.setSelectionFeature(result.pointerSelection);\r\n                }\r\n\r\n                // Create the WebXR output target\r\n                result.renderTarget = result.baseExperience.sessionManager.getWebXRRenderTarget(options.outputCanvasOptions);\r\n\r\n                if (!options.disableDefaultUI) {\r\n                    const uiOptions: WebXREnterExitUIOptions = {\r\n                        renderTarget: result.renderTarget,\r\n                        ...(options.uiOptions || {}),\r\n                    };\r\n                    if (options.optionalFeatures) {\r\n                        if (typeof options.optionalFeatures === \"boolean\") {\r\n                            uiOptions.optionalFeatures = [\"hit-test\", \"anchors\", \"plane-detection\", \"hand-tracking\"];\r\n                        } else {\r\n                            uiOptions.optionalFeatures = options.optionalFeatures;\r\n                        }\r\n                    }\r\n                    // Create ui for entering/exiting xr\r\n                    return WebXREnterExitUI.CreateAsync(scene, result.baseExperience, uiOptions).then((ui) => {\r\n                        result.enterExitUI = ui;\r\n                    });\r\n                } else {\r\n                    return;\r\n                }\r\n            })\r\n            .then(() => {\r\n                return result;\r\n            })\r\n            .catch((error) => {\r\n                Logger.Error(\"Error initializing XR\");\r\n                Logger.Error(error);\r\n                return result;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * DIsposes of the experience helper\r\n     */\r\n    public dispose() {\r\n        if (this.baseExperience) {\r\n            this.baseExperience.dispose();\r\n        }\r\n        if (this.input) {\r\n            this.input.dispose();\r\n        }\r\n        if (this.enterExitUI) {\r\n            this.enterExitUI.dispose();\r\n        }\r\n        if (this.renderTarget) {\r\n            this.renderTarget.dispose();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}