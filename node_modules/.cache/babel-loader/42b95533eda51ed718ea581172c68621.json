{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\n/**\r\n * Block used to implement the sheen module of the PBR material\r\n */\n\nvar SheenBlock =\n/** @class */\nfunction (_super) {\n  __extends(SheenBlock, _super);\n  /**\r\n   * Create a new SheenBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function SheenBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n    /**\r\n     * If true, the sheen effect is layered above the base BRDF with the albedo-scaling technique.\r\n     * It allows the strength of the sheen effect to not depend on the base color of the material,\r\n     * making it easier to setup and tweak the effect\r\n     */\n\n\n    _this.albedoScaling = false;\n    /**\r\n     * Defines if the sheen is linked to the sheen color.\r\n     */\n\n    _this.linkSheenWithAlbedo = false;\n    _this._isUnique = true;\n\n    _this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"sheen\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"sheen\", _this, NodeMaterialConnectionPointDirection.Output, SheenBlock, \"SheenBlock\"));\n\n    return _this;\n  }\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n\n  SheenBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"sheenOut\");\n\n    state._excludeVariableName(\"sheenMapData\");\n\n    state._excludeVariableName(\"vSheenColor\");\n\n    state._excludeVariableName(\"vSheenRoughness\");\n  };\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  SheenBlock.prototype.getClassName = function () {\n    return \"SheenBlock\";\n  };\n\n  Object.defineProperty(SheenBlock.prototype, \"intensity\", {\n    /**\r\n     * Gets the intensity input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SheenBlock.prototype, \"color\", {\n    /**\r\n     * Gets the color input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SheenBlock.prototype, \"roughness\", {\n    /**\r\n     * Gets the roughness input component\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SheenBlock.prototype, \"sheen\", {\n    /**\r\n     * Gets the sheen object output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SheenBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    _super.prototype.prepareDefines.call(this, mesh, nodeMaterial, defines);\n\n    defines.setValue(\"SHEEN\", true);\n    defines.setValue(\"SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\n    defines.setValue(\"SHEEN_LINKWITHALBEDO\", this.linkSheenWithAlbedo, true);\n    defines.setValue(\"SHEEN_ROUGHNESS\", this.roughness.isConnected, true);\n    defines.setValue(\"SHEEN_ALBEDOSCALING\", this.albedoScaling, true);\n  };\n  /**\r\n   * Gets the main code of the block (fragment side)\r\n   * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n   * @returns the shader code\r\n   */\n\n\n  SheenBlock.prototype.getCode = function (reflectionBlock) {\n    var code = \"\";\n    var color = this.color.isConnected ? this.color.associatedVariableName : \"vec3(1.)\";\n    var intensity = this.intensity.isConnected ? this.intensity.associatedVariableName : \"1.\";\n    var roughness = this.roughness.isConnected ? this.roughness.associatedVariableName : \"0.\";\n    var texture = \"vec4(0.)\";\n    code = \"#ifdef SHEEN\\n            sheenOutParams sheenOut;\\n\\n            vec4 vSheenColor = vec4(\" + color + \", \" + intensity + \");\\n\\n            sheenBlock(\\n                vSheenColor,\\n            #ifdef SHEEN_ROUGHNESS\\n                \" + roughness + \",\\n            #endif\\n                roughness,\\n            #ifdef SHEEN_TEXTURE\\n                \" + texture + \",\\n            #endif\\n                reflectance,\\n            #ifdef SHEEN_LINKWITHALBEDO\\n                baseColor,\\n                surfaceAlbedo,\\n            #endif\\n            #ifdef ENVIRONMENTBRDF\\n                NdotV,\\n                environmentBrdf,\\n            #endif\\n            #if defined(REFLECTION) && defined(ENVIRONMENTBRDF)\\n                AARoughnessFactors,\\n                \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionMicrosurfaceInfosName) + \",\\n                \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionInfosName) + \",\\n                \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.reflectionColor) + \",\\n                vLightingIntensity,\\n                #ifdef \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) + \"\\n                    \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                #else\\n                    \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName) + \",\\n                #endif\\n                reflectionOut.reflectionCoords,\\n                NdotVUnclamped,\\n                #ifndef LODBASEDMICROSFURACE\\n                    #ifdef \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) + \"\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                    #else\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName) + \",\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName) + \",\\n                    #endif\\n                #endif\\n                #if !defined(\" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) + \") && defined(RADIANCEOCCLUSION)\\n                    seo,\\n                #endif\\n                #if !defined(\" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) + \") && defined(HORIZONOCCLUSION) && defined(BUMP) && defined(\" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) + \")\\n                    eho,\\n                #endif\\n            #endif\\n                sheenOut\\n            );\\n\\n            #ifdef SHEEN_LINKWITHALBEDO\\n                surfaceAlbedo = sheenOut.surfaceAlbedo;\\n            #endif\\n        #endif\\r\\n\";\n    return code;\n  };\n\n  SheenBlock.prototype._buildBlock = function (state) {\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.blocksWithDefines.push(this);\n    }\n\n    return this;\n  };\n\n  SheenBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this);\n\n    codeString += this._codeVariableName + \".albedoScaling = \" + this.albedoScaling + \";\\r\\n\";\n    codeString += this._codeVariableName + \".linkSheenWithAlbedo = \" + this.linkSheenWithAlbedo + \";\\r\\n\";\n    return codeString;\n  };\n\n  SheenBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.albedoScaling = this.albedoScaling;\n    serializationObject.linkSheenWithAlbedo = this.linkSheenWithAlbedo;\n    return serializationObject;\n  };\n\n  SheenBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.albedoScaling = serializationObject.albedoScaling;\n    this.linkSheenWithAlbedo = serializationObject.linkSheenWithAlbedo;\n  };\n\n  __decorate([editableInPropertyPage(\"Albedo scaling\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], SheenBlock.prototype, \"albedoScaling\", void 0);\n\n  __decorate([editableInPropertyPage(\"Link sheen with albedo\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], SheenBlock.prototype, \"linkSheenWithAlbedo\", void 0);\n\n  return SheenBlock;\n}(NodeMaterialBlock);\n\nexport { SheenBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.SheenBlock\"] = SheenBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/PBR/sheenBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';\r\nimport { AbstractMesh } from '../../../../Meshes/abstractMesh';\r\nimport { ReflectionBlock } from './reflectionBlock';\r\nimport { Scene } from '../../../../scene';\r\nimport { Nullable } from '../../../../types';\r\n\r\n/**\r\n * Block used to implement the sheen module of the PBR material\r\n */\r\nexport class SheenBlock extends NodeMaterialBlock {\r\n\r\n    /**\r\n     * Create a new SheenBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"sheen\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"sheen\", this, NodeMaterialConnectionPointDirection.Output, SheenBlock, \"SheenBlock\"));\r\n    }\r\n\r\n    /**\r\n     * If true, the sheen effect is layered above the base BRDF with the albedo-scaling technique.\r\n     * It allows the strength of the sheen effect to not depend on the base color of the material,\r\n     * making it easier to setup and tweak the effect\r\n     */\r\n    @editableInPropertyPage(\"Albedo scaling\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { \"notifiers\": { \"update\": true }})\r\n    public albedoScaling: boolean = false;\r\n\r\n    /**\r\n     * Defines if the sheen is linked to the sheen color.\r\n     */\r\n    @editableInPropertyPage(\"Link sheen with albedo\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { \"notifiers\": { \"update\": true }})\r\n    public linkSheenWithAlbedo: boolean = false;\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"sheenOut\");\r\n        state._excludeVariableName(\"sheenMapData\");\r\n        state._excludeVariableName(\"vSheenColor\");\r\n        state._excludeVariableName(\"vSheenRoughness\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"SheenBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the intensity input component\r\n     */\r\n    public get intensity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the roughness input component\r\n     */\r\n    public get roughness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the sheen object output component\r\n     */\r\n    public get sheen(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        super.prepareDefines(mesh, nodeMaterial, defines);\r\n\r\n        defines.setValue(\"SHEEN\", true);\r\n        defines.setValue(\"SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\r\n        defines.setValue(\"SHEEN_LINKWITHALBEDO\", this.linkSheenWithAlbedo, true);\r\n        defines.setValue(\"SHEEN_ROUGHNESS\", this.roughness.isConnected, true);\r\n        defines.setValue(\"SHEEN_ALBEDOSCALING\", this.albedoScaling, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the main code of the block (fragment side)\r\n     * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n     * @returns the shader code\r\n     */\r\n    public getCode(reflectionBlock: Nullable<ReflectionBlock>): string {\r\n        let code = \"\";\r\n\r\n        const color = this.color.isConnected ? this.color.associatedVariableName : \"vec3(1.)\";\r\n        const intensity = this.intensity.isConnected ? this.intensity.associatedVariableName : \"1.\";\r\n        const roughness = this.roughness.isConnected ? this.roughness.associatedVariableName : \"0.\";\r\n        const texture = \"vec4(0.)\";\r\n\r\n        code = `#ifdef SHEEN\r\n            sheenOutParams sheenOut;\r\n\r\n            vec4 vSheenColor = vec4(${color}, ${intensity});\r\n\r\n            sheenBlock(\r\n                vSheenColor,\r\n            #ifdef SHEEN_ROUGHNESS\r\n                ${roughness},\r\n            #endif\r\n                roughness,\r\n            #ifdef SHEEN_TEXTURE\r\n                ${texture},\r\n            #endif\r\n                reflectance,\r\n            #ifdef SHEEN_LINKWITHALBEDO\r\n                baseColor,\r\n                surfaceAlbedo,\r\n            #endif\r\n            #ifdef ENVIRONMENTBRDF\r\n                NdotV,\r\n                environmentBrdf,\r\n            #endif\r\n            #if defined(REFLECTION) && defined(ENVIRONMENTBRDF)\r\n                AARoughnessFactors,\r\n                ${reflectionBlock?._vReflectionMicrosurfaceInfosName},\r\n                ${reflectionBlock?._vReflectionInfosName},\r\n                ${reflectionBlock?.reflectionColor},\r\n                vLightingIntensity,\r\n                #ifdef ${reflectionBlock?._define3DName}\r\n                    ${reflectionBlock?._cubeSamplerName},\r\n                #else\r\n                    ${reflectionBlock?._2DSamplerName},\r\n                #endif\r\n                reflectionOut.reflectionCoords,\r\n                NdotVUnclamped,\r\n                #ifndef LODBASEDMICROSFURACE\r\n                    #ifdef ${reflectionBlock?._define3DName}\r\n                        ${reflectionBlock?._cubeSamplerName},\r\n                        ${reflectionBlock?._cubeSamplerName},\r\n                    #else\r\n                        ${reflectionBlock?._2DSamplerName},\r\n                        ${reflectionBlock?._2DSamplerName},\r\n                    #endif\r\n                #endif\r\n                #if !defined(${reflectionBlock?._defineSkyboxName}) && defined(RADIANCEOCCLUSION)\r\n                    seo,\r\n                #endif\r\n                #if !defined(${reflectionBlock?._defineSkyboxName}) && defined(HORIZONOCCLUSION) && defined(BUMP) && defined(${reflectionBlock?._define3DName})\r\n                    eho,\r\n                #endif\r\n            #endif\r\n                sheenOut\r\n            );\r\n\r\n            #ifdef SHEEN_LINKWITHALBEDO\r\n                surfaceAlbedo = sheenOut.surfaceAlbedo;\r\n            #endif\r\n        #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.blocksWithDefines.push(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString: string = super._dumpPropertiesCode();\r\n\r\n        codeString += `${this._codeVariableName}.albedoScaling = ${this.albedoScaling};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.linkSheenWithAlbedo = ${this.linkSheenWithAlbedo};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        let serializationObject = super.serialize();\r\n\r\n        serializationObject.albedoScaling = this.albedoScaling;\r\n        serializationObject.linkSheenWithAlbedo = this.linkSheenWithAlbedo;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.albedoScaling = serializationObject.albedoScaling;\r\n        this.linkSheenWithAlbedo = serializationObject.linkSheenWithAlbedo;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.SheenBlock\"] = SheenBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}