{"ast":null,"code":"import { Mesh } from \"../mesh\";\nimport { VertexData } from \"../mesh.vertexData\";\n\nVertexData.CreatePlane = function (options) {\n  var indices = [];\n  var positions = [];\n  var normals = [];\n  var uvs = [];\n  var width = options.width || options.size || 1;\n  var height = options.height || options.size || 1;\n  var sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE; // Vertices\n\n  var halfWidth = width / 2.0;\n  var halfHeight = height / 2.0;\n  positions.push(-halfWidth, -halfHeight, 0);\n  normals.push(0, 0, -1.0);\n  uvs.push(0.0, 0.0);\n  positions.push(halfWidth, -halfHeight, 0);\n  normals.push(0, 0, -1.0);\n  uvs.push(1.0, 0.0);\n  positions.push(halfWidth, halfHeight, 0);\n  normals.push(0, 0, -1.0);\n  uvs.push(1.0, 1.0);\n  positions.push(-halfWidth, halfHeight, 0);\n  normals.push(0, 0, -1.0);\n  uvs.push(0.0, 1.0); // Indices\n\n  indices.push(0);\n  indices.push(1);\n  indices.push(2);\n  indices.push(0);\n  indices.push(2);\n  indices.push(3); // Sides\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs); // Result\n\n\n  var vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  return vertexData;\n};\n\nMesh.CreatePlane = function (name, size, scene, updatable, sideOrientation) {\n  var options = {\n    size: size,\n    width: size,\n    height: size,\n    sideOrientation: sideOrientation,\n    updatable: updatable\n  };\n  return PlaneBuilder.CreatePlane(name, options, scene);\n};\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\n\n\nvar PlaneBuilder =\n/** @class */\nfunction () {\n  function PlaneBuilder() {}\n  /**\r\n   * Creates a plane mesh\r\n   * * The parameter `size` sets the size (float) of both sides of the plane at once (default 1)\r\n   * * You can set some different plane dimensions by using the parameters `width` and `height` (both by default have the same value of `size`)\r\n   * * The parameter `sourcePlane` is a Plane instance. It builds a mesh plane from a Math plane\r\n   * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n   * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n   * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n   * @param name defines the name of the mesh\r\n   * @param options defines the options used to create the mesh\r\n   * @param scene defines the hosting scene\r\n   * @returns the plane mesh\r\n   * @see https://doc.babylonjs.com/how_to/set_shapes#plane\r\n   */\n\n\n  PlaneBuilder.CreatePlane = function (name, options, scene) {\n    if (scene === void 0) {\n      scene = null;\n    }\n\n    var plane = new Mesh(name, scene);\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n    plane._originalBuilderSideOrientation = options.sideOrientation;\n    var vertexData = VertexData.CreatePlane(options);\n    vertexData.applyToMesh(plane, options.updatable);\n\n    if (options.sourcePlane) {\n      plane.translate(options.sourcePlane.normal, -options.sourcePlane.d);\n      plane.setDirection(options.sourcePlane.normal.scale(-1));\n    }\n\n    return plane;\n  };\n\n  return PlaneBuilder;\n}();\n\nexport { PlaneBuilder };","map":{"version":3,"sources":["../../../../sourceES6/core/Meshes/Builders/planeBuilder.ts"],"names":[],"mappings":"AAEA,SAAS,IAAT,QAA2C,SAA3C;AACA,SAAS,UAAT,QAA2B,oBAA3B;;AAIA,UAAU,CAAC,WAAX,GAAyB,UAAS,OAAT,EAAqI;AAC1J,MAAI,OAAO,GAAG,EAAd;AACA,MAAI,SAAS,GAAG,EAAhB;AACA,MAAI,OAAO,GAAG,EAAd;AACA,MAAI,GAAG,GAAG,EAAV;AAEA,MAAI,KAAK,GAAW,OAAO,CAAC,KAAR,IAAiB,OAAO,CAAC,IAAzB,IAAiC,CAArD;AACA,MAAI,MAAM,GAAW,OAAO,CAAC,MAAR,IAAkB,OAAO,CAAC,IAA1B,IAAkC,CAAvD;AACA,MAAI,eAAe,GAAI,OAAO,CAAC,eAAR,KAA4B,CAA7B,GAAkC,CAAlC,GAAsC,OAAO,CAAC,eAAR,IAA2B,UAAU,CAAC,WAAlG,CAR0J,CAU1J;;AACA,MAAI,SAAS,GAAG,KAAK,GAAG,GAAxB;AACA,MAAI,UAAU,GAAG,MAAM,GAAG,GAA1B;AAEA,EAAA,SAAS,CAAC,IAAV,CAAe,CAAC,SAAhB,EAA2B,CAAC,UAA5B,EAAwC,CAAxC;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAC,GAApB;AACA,EAAA,GAAG,CAAC,IAAJ,CAAS,GAAT,EAAc,GAAd;AAEA,EAAA,SAAS,CAAC,IAAV,CAAe,SAAf,EAA0B,CAAC,UAA3B,EAAuC,CAAvC;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAC,GAApB;AACA,EAAA,GAAG,CAAC,IAAJ,CAAS,GAAT,EAAc,GAAd;AAEA,EAAA,SAAS,CAAC,IAAV,CAAe,SAAf,EAA0B,UAA1B,EAAsC,CAAtC;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAC,GAApB;AACA,EAAA,GAAG,CAAC,IAAJ,CAAS,GAAT,EAAc,GAAd;AAEA,EAAA,SAAS,CAAC,IAAV,CAAe,CAAC,SAAhB,EAA2B,UAA3B,EAAuC,CAAvC;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAC,GAApB;AACA,EAAA,GAAG,CAAC,IAAJ,CAAS,GAAT,EAAc,GAAd,EA5B0J,CA8B1J;;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,CAAb;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,CAAb;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,CAAb;AAEA,EAAA,OAAO,CAAC,IAAR,CAAa,CAAb;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,CAAb;AACA,EAAA,OAAO,CAAC,IAAR,CAAa,CAAb,EArC0J,CAuC1J;;AACA,EAAA,UAAU,CAAC,aAAX,CAAyB,eAAzB,EAA0C,SAA1C,EAAqD,OAArD,EAA8D,OAA9D,EAAuE,GAAvE,EAA4E,OAAO,CAAC,QAApF,EAA8F,OAAO,CAAC,OAAtG,EAxC0J,CA0C1J;;;AACA,MAAI,UAAU,GAAG,IAAI,UAAJ,EAAjB;AAEA,EAAA,UAAU,CAAC,OAAX,GAAqB,OAArB;AACA,EAAA,UAAU,CAAC,SAAX,GAAuB,SAAvB;AACA,EAAA,UAAU,CAAC,OAAX,GAAqB,OAArB;AACA,EAAA,UAAU,CAAC,GAAX,GAAiB,GAAjB;AAEA,SAAO,UAAP;AACH,CAnDD;;AAqDA,IAAI,CAAC,WAAL,GAAmB,UAAC,IAAD,EAAe,IAAf,EAA6B,KAA7B,EAA2C,SAA3C,EAAgE,eAAhE,EAAwF;AACvG,MAAI,OAAO,GAAG;AACV,IAAA,IAAI,EAAE,IADI;AAEV,IAAA,KAAK,EAAE,IAFG;AAGV,IAAA,MAAM,EAAE,IAHE;AAIV,IAAA,eAAe,EAAE,eAJP;AAKV,IAAA,SAAS,EAAE;AALD,GAAd;AAQA,SAAO,YAAY,CAAC,WAAb,CAAyB,IAAzB,EAA+B,OAA/B,EAAwC,KAAxC,CAAP;AACH,CAVD;AAYA;;;;;AAGA,IAAA,YAAA;AAAA;AAAA,YAAA;AAAA,WAAA,YAAA,GAAA,CAgCC;AA/BG;;;;;;;;;;;;;;;;AAcc,EAAA,YAAA,CAAA,WAAA,GAAd,UAA0B,IAA1B,EAAwC,OAAxC,EAAgN,KAAhN,EAA6O;AAA7B,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,IAAA;AAA6B;;AACzO,QAAI,KAAK,GAAG,IAAI,IAAJ,CAAS,IAAT,EAAe,KAAf,CAAZ;AAEA,IAAA,OAAO,CAAC,eAAR,GAA0B,IAAI,CAAC,0BAAL,CAAgC,OAAO,CAAC,eAAxC,CAA1B;AACA,IAAA,KAAK,CAAC,+BAAN,GAAwC,OAAO,CAAC,eAAhD;AAEA,QAAI,UAAU,GAAG,UAAU,CAAC,WAAX,CAAuB,OAAvB,CAAjB;AAEA,IAAA,UAAU,CAAC,WAAX,CAAuB,KAAvB,EAA8B,OAAO,CAAC,SAAtC;;AAEA,QAAI,OAAO,CAAC,WAAZ,EAAyB;AACrB,MAAA,KAAK,CAAC,SAAN,CAAgB,OAAO,CAAC,WAAR,CAAoB,MAApC,EAA4C,CAAC,OAAO,CAAC,WAAR,CAAoB,CAAjE;AACA,MAAA,KAAK,CAAC,YAAN,CAAmB,OAAO,CAAC,WAAR,CAAoB,MAApB,CAA2B,KAA3B,CAAiC,CAAC,CAAlC,CAAnB;AACH;;AAED,WAAO,KAAP;AACH,GAhBa;;AAiBlB,SAAA,YAAA;AAAC,CAhCD,EAAA","sourcesContent":["import { Scene } from \"../../scene\";\r\nimport { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Mesh, _CreationDataStorage } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { Nullable } from '../../types';\r\nimport { Plane } from '../../Maths/math.plane';\r\n\r\nVertexData.CreatePlane = function(options: { size?: number, width?: number, height?: number, sideOrientation?: number, frontUVs?: Vector4, backUVs?: Vector4 }): VertexData {\r\n    var indices = [];\r\n    var positions = [];\r\n    var normals = [];\r\n    var uvs = [];\r\n\r\n    var width: number = options.width || options.size || 1;\r\n    var height: number = options.height || options.size || 1;\r\n    var sideOrientation = (options.sideOrientation === 0) ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // Vertices\r\n    var halfWidth = width / 2.0;\r\n    var halfHeight = height / 2.0;\r\n\r\n    positions.push(-halfWidth, -halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(0.0, 0.0);\r\n\r\n    positions.push(halfWidth, -halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(1.0, 0.0);\r\n\r\n    positions.push(halfWidth, halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(1.0, 1.0);\r\n\r\n    positions.push(-halfWidth, halfHeight, 0);\r\n    normals.push(0, 0, -1.0);\r\n    uvs.push(0.0, 1.0);\r\n\r\n    // Indices\r\n    indices.push(0);\r\n    indices.push(1);\r\n    indices.push(2);\r\n\r\n    indices.push(0);\r\n    indices.push(2);\r\n    indices.push(3);\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    var vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n};\r\n\r\nMesh.CreatePlane = (name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    var options = {\r\n        size: size,\r\n        width: size,\r\n        height: size,\r\n        sideOrientation: sideOrientation,\r\n        updatable: updatable\r\n    };\r\n\r\n    return PlaneBuilder.CreatePlane(name, options, scene);\r\n};\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\r\nexport class PlaneBuilder {\r\n    /**\r\n     * Creates a plane mesh\r\n     * * The parameter `size` sets the size (float) of both sides of the plane at once (default 1)\r\n     * * You can set some different plane dimensions by using the parameters `width` and `height` (both by default have the same value of `size`)\r\n     * * The parameter `sourcePlane` is a Plane instance. It builds a mesh plane from a Math plane\r\n     * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n     * @param name defines the name of the mesh\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns the plane mesh\r\n     * @see https://doc.babylonjs.com/how_to/set_shapes#plane\r\n     */\r\n    public static CreatePlane(name: string, options: { size?: number, width?: number, height?: number, sideOrientation?: number, frontUVs?: Vector4, backUVs?: Vector4, updatable?: boolean, sourcePlane?: Plane }, scene: Nullable<Scene> = null): Mesh {\r\n        var plane = new Mesh(name, scene);\r\n\r\n        options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n        plane._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n        var vertexData = VertexData.CreatePlane(options);\r\n\r\n        vertexData.applyToMesh(plane, options.updatable);\r\n\r\n        if (options.sourcePlane) {\r\n            plane.translate(options.sourcePlane.normal, -options.sourcePlane.d);\r\n            plane.setDirection(options.sourcePlane.normal.scale(-1));\r\n        }\r\n\r\n        return plane;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}