{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CameraInputsManager } from \"./cameraInputsManager\";\nimport { FreeCameraKeyboardMoveInput } from \"../Cameras/Inputs/freeCameraKeyboardMoveInput\";\nimport { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput\";\nimport { FreeCameraMouseWheelInput } from \"../Cameras/Inputs/freeCameraMouseWheelInput\";\nimport { FreeCameraTouchInput } from \"../Cameras/Inputs/freeCameraTouchInput\";\n/**\r\n * Default Inputs manager for the FreeCamera.\r\n * It groups all the default supported inputs for ease of use.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FreeCameraInputsManager =\n/** @class */\nfunction (_super) {\n  __extends(FreeCameraInputsManager, _super);\n  /**\r\n   * Instantiates a new FreeCameraInputsManager.\r\n   * @param camera Defines the camera the inputs belong to\r\n   */\n\n\n  function FreeCameraInputsManager(camera) {\n    var _this = _super.call(this, camera) || this;\n    /**\r\n     * @hidden\r\n     */\n\n\n    _this._mouseInput = null;\n    /**\r\n     * @hidden\r\n     */\n\n    _this._mouseWheelInput = null;\n    return _this;\n  }\n  /**\r\n   * Add keyboard input support to the input manager.\r\n   * @returns the current input manager\r\n   */\n\n\n  FreeCameraInputsManager.prototype.addKeyboard = function () {\n    this.add(new FreeCameraKeyboardMoveInput());\n    return this;\n  };\n  /**\r\n   * Add mouse input support to the input manager.\r\n   * @param touchEnabled if the FreeCameraMouseInput should support touch (default: true)\r\n   * @returns the current input manager\r\n   */\n\n\n  FreeCameraInputsManager.prototype.addMouse = function (touchEnabled) {\n    if (touchEnabled === void 0) {\n      touchEnabled = true;\n    }\n\n    if (!this._mouseInput) {\n      this._mouseInput = new FreeCameraMouseInput(touchEnabled);\n      this.add(this._mouseInput);\n    }\n\n    return this;\n  };\n  /**\r\n   * Removes the mouse input support from the manager\r\n   * @returns the current input manager\r\n   */\n\n\n  FreeCameraInputsManager.prototype.removeMouse = function () {\n    if (this._mouseInput) {\n      this.remove(this._mouseInput);\n    }\n\n    return this;\n  };\n  /**\r\n   * Add mouse wheel input support to the input manager.\r\n   * @returns the current input manager\r\n   */\n\n\n  FreeCameraInputsManager.prototype.addMouseWheel = function () {\n    if (!this._mouseWheelInput) {\n      this._mouseWheelInput = new FreeCameraMouseWheelInput();\n      this.add(this._mouseWheelInput);\n    }\n\n    return this;\n  };\n  /**\r\n   * Removes the mouse wheel input support from the manager\r\n   * @returns the current input manager\r\n   */\n\n\n  FreeCameraInputsManager.prototype.removeMouseWheel = function () {\n    if (this._mouseWheelInput) {\n      this.remove(this._mouseWheelInput);\n    }\n\n    return this;\n  };\n  /**\r\n   * Add touch input support to the input manager.\r\n   * @returns the current input manager\r\n   */\n\n\n  FreeCameraInputsManager.prototype.addTouch = function () {\n    this.add(new FreeCameraTouchInput());\n    return this;\n  };\n  /**\r\n   * Remove all attached input methods from a camera\r\n   */\n\n\n  FreeCameraInputsManager.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n\n    this._mouseInput = null;\n  };\n\n  return FreeCameraInputsManager;\n}(CameraInputsManager);\n\nexport { FreeCameraInputsManager };","map":{"version":3,"sources":["../../../sourceES6/core/Cameras/freeCameraInputsManager.ts"],"names":[],"mappings":";AACA,SAAS,mBAAT,QAAoC,uBAApC;AACA,SAAS,2BAAT,QAA4C,+CAA5C;AACA,SAAS,oBAAT,QAAqC,wCAArC;AACA,SAAS,yBAAT,QAA0C,6CAA1C;AACA,SAAS,oBAAT,QAAqC,wCAArC;AAGA;;;;;;AAKA,IAAA,uBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6C,EAAA,SAAA,CAAA,uBAAA,EAAA,MAAA,CAAA;AASzC;;;;;;AAIA,WAAA,uBAAA,CAAY,MAAZ,EAA8B;AAA9B,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,MAAN,KAAa,IADjB;AAZA;;;;;AAGO,IAAA,KAAA,CAAA,WAAA,GAA8C,IAA9C;AACP;;;;AAGO,IAAA,KAAA,CAAA,gBAAA,GAAwD,IAAxD;;AAON;AAED;;;;;;AAIA,EAAA,uBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACI,SAAK,GAAL,CAAS,IAAI,2BAAJ,EAAT;AACA,WAAO,IAAP;AACH,GAHD;AAKA;;;;;;;AAKA,EAAA,uBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,YAAT,EAA4B;AAAnB,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,IAAA;AAAmB;;AACxB,QAAI,CAAC,KAAK,WAAV,EAAuB;AACnB,WAAK,WAAL,GAAmB,IAAI,oBAAJ,CAAyB,YAAzB,CAAnB;AACA,WAAK,GAAL,CAAS,KAAK,WAAd;AACH;;AACD,WAAO,IAAP;AACH,GAND;AAQA;;;;;;AAIA,EAAA,uBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACI,QAAI,KAAK,WAAT,EAAsB;AAClB,WAAK,MAAL,CAAY,KAAK,WAAjB;AACH;;AACD,WAAO,IAAP;AACH,GALD;AAOA;;;;;;AAIA,EAAA,uBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACI,QAAI,CAAC,KAAK,gBAAV,EAA4B;AACxB,WAAK,gBAAL,GAAwB,IAAI,yBAAJ,EAAxB;AACA,WAAK,GAAL,CAAS,KAAK,gBAAd;AACH;;AACD,WAAO,IAAP;AACH,GAND;AAQA;;;;;;AAIA,EAAA,uBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;AACI,QAAI,KAAK,gBAAT,EAA2B;AACvB,WAAK,MAAL,CAAY,KAAK,gBAAjB;AACH;;AACD,WAAO,IAAP;AACH,GALD;AAOA;;;;;;AAIA,EAAA,uBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACI,SAAK,GAAL,CAAS,IAAI,oBAAJ,EAAT;AACA,WAAO,IAAP;AACH,GAHD;AAKA;;;;;AAGO,EAAA,uBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACI,IAAA,MAAA,CAAA,SAAA,CAAM,KAAN,CAAW,IAAX,CAAW,IAAX;;AACA,SAAK,WAAL,GAAmB,IAAnB;AACH,GAHM;;AAIX,SAAA,uBAAA;AAAC,CAzFD,CAA6C,mBAA7C,CAAA","sourcesContent":["import { FreeCamera } from \"./freeCamera\";\r\nimport { CameraInputsManager } from \"./cameraInputsManager\";\r\nimport { FreeCameraKeyboardMoveInput } from \"../Cameras/Inputs/freeCameraKeyboardMoveInput\";\r\nimport { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput\";\r\nimport { FreeCameraMouseWheelInput } from \"../Cameras/Inputs/freeCameraMouseWheelInput\";\r\nimport { FreeCameraTouchInput } from \"../Cameras/Inputs/freeCameraTouchInput\";\r\nimport { Nullable } from '../types';\r\n\r\n/**\r\n * Default Inputs manager for the FreeCamera.\r\n * It groups all the default supported inputs for ease of use.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FreeCameraInputsManager extends CameraInputsManager<FreeCamera> {\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _mouseInput: Nullable<FreeCameraMouseInput> = null;\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _mouseWheelInput: Nullable<FreeCameraMouseWheelInput> = null;\r\n    /**\r\n     * Instantiates a new FreeCameraInputsManager.\r\n     * @param camera Defines the camera the inputs belong to\r\n     */\r\n    constructor(camera: FreeCamera) {\r\n        super(camera);\r\n    }\r\n\r\n    /**\r\n     * Add keyboard input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addKeyboard(): FreeCameraInputsManager {\r\n        this.add(new FreeCameraKeyboardMoveInput());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add mouse input support to the input manager.\r\n     * @param touchEnabled if the FreeCameraMouseInput should support touch (default: true)\r\n     * @returns the current input manager\r\n     */\r\n    addMouse(touchEnabled = true): FreeCameraInputsManager {\r\n        if (!this._mouseInput) {\r\n            this._mouseInput = new FreeCameraMouseInput(touchEnabled);\r\n            this.add(this._mouseInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the mouse input support from the manager\r\n     * @returns the current input manager\r\n     */\r\n    removeMouse(): FreeCameraInputsManager {\r\n        if (this._mouseInput) {\r\n            this.remove(this._mouseInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add mouse wheel input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addMouseWheel(): FreeCameraInputsManager {\r\n        if (!this._mouseWheelInput) {\r\n            this._mouseWheelInput = new FreeCameraMouseWheelInput();\r\n            this.add(this._mouseWheelInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the mouse wheel input support from the manager\r\n     * @returns the current input manager\r\n     */\r\n    removeMouseWheel(): FreeCameraInputsManager {\r\n        if (this._mouseWheelInput) {\r\n            this.remove(this._mouseWheelInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add touch input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addTouch(): FreeCameraInputsManager {\r\n        this.add(new FreeCameraTouchInput());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove all attached input methods from a camera\r\n     */\r\n    public clear(): void {\r\n        super.clear();\r\n        this._mouseInput = null;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}