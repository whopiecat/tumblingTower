{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/bloomMerge.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize } from '../Misc/decorators';\n/**\r\n * The BloomMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\r\n */\n\nvar BloomMergePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(BloomMergePostProcess, _super);\n  /**\r\n   * Creates a new instance of @see BloomMergePostProcess\r\n   * @param name The name of the effect.\r\n   * @param originalFromInput Post process which's input will be used for the merge.\r\n   * @param blurred Blurred highlights post process which's output will be used.\r\n   * @param weight Weight of the bloom to be added to the original input.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function BloomMergePostProcess(name, originalFromInput, blurred,\n  /** Weight of the bloom to be added to the original input. */\n  weight, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"bloomMerge\", [\"bloomWeight\"], [\"circleOfConfusionSampler\", \"blurStep0\", \"blurStep1\", \"blurStep2\", \"bloomBlur\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true) || this;\n    /** Weight of the bloom to be added to the original input. */\n\n\n    _this.weight = 1;\n    _this.weight = weight;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\n      effect.setTextureFromPostProcessOutput(\"bloomBlur\", blurred);\n      effect.setFloat(\"bloomWeight\", _this.weight);\n    });\n\n    if (!blockCompilation) {\n      _this.updateEffect();\n    }\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"BloomMergePostProcess\" string\r\n   */\n\n\n  BloomMergePostProcess.prototype.getClassName = function () {\n    return \"BloomMergePostProcess\";\n  };\n\n  __decorate([serialize()], BloomMergePostProcess.prototype, \"weight\", void 0);\n\n  return BloomMergePostProcess;\n}(PostProcess);\n\nexport { BloomMergePostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.BloomMergePostProcess\"] = BloomMergePostProcess;","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/bloomMergePostProcess.ts"],"names":[],"mappings":";AAAA,SAAS,WAAT,QAAgD,eAAhD;AAOA,OAAO,gCAAP;AACA,SAAS,UAAT,QAA2B,mBAA3B;AACA,SAAS,SAAT,QAA0B,oBAA1B;AAEA;;;;AAGA,IAAA,qBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2C,EAAA,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;AAavC;;;;;;;;;;;;;;;;AAcA,WAAA,qBAAA,CAAY,IAAZ,EAA0B,iBAA1B,EAA0D,OAA1D;AACI;AACA,EAAA,MAFJ,EAGI,OAHJ,EAII,MAJJ,EAI8B,YAJ9B,EAIqD,MAJrD,EAIsE,QAJtE,EAI0F,WAJ1F,EAImH,gBAJnH,EAI2I;AAAjD,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,CAAA;AAAuB;;AAAE,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,KAAA;AAAwB;;AAJ3I,QAAA,KAAA,GAKI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,YAAZ,EAA0B,CAAC,aAAD,CAA1B,EAA2C,CAAC,0BAAD,EAA6B,WAA7B,EAA0C,WAA1C,EAAuD,WAAvD,EAAoE,WAApE,CAA3C,EAA6H,OAA7H,EAAsI,MAAtI,EAA8I,YAA9I,EAA4J,MAA5J,EAAoK,QAApK,EAA8K,IAA9K,EAAoL,WAApL,EAAiM,SAAjM,EAA4M,IAA5M,EAAkN,IAAlN,KAAuN,IAL3N;AA1BA;;;AAEO,IAAA,KAAA,CAAA,MAAA,GAAS,CAAT;AA8BH,IAAA,KAAI,CAAC,MAAL,GAAc,MAAd;;AACA,IAAA,KAAI,CAAC,iBAAL,CAAuB,GAAvB,CAA2B,UAAC,MAAD,EAAe;AACtC,MAAA,MAAM,CAAC,yBAAP,CAAiC,gBAAjC,EAAmD,iBAAnD;AACA,MAAA,MAAM,CAAC,+BAAP,CAAuC,WAAvC,EAAoD,OAApD;AACA,MAAA,MAAM,CAAC,QAAP,CAAgB,aAAhB,EAA+B,KAAI,CAAC,MAApC;AACH,KAJD;;AAMA,QAAI,CAAC,gBAAL,EAAuB;AACnB,MAAA,KAAI,CAAC,YAAL;AACH;;;AACJ;AAtCD;;;;;;AAIO,EAAA,qBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,uBAAP;AACH,GAFM;;AANP,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,+BAAA,E,QAAA,E,KAAkB,CAAlB,CAAA;;AAyCJ,SAAA,qBAAA;AAAC,CA5CD,CAA2C,WAA3C,CAAA;;SAAa,qB;AA8Cb,UAAU,CAAC,eAAX,CAA2B,+BAA3B,IAA8D,qBAA9D","sourcesContent":["import { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Nullable } from \"../types\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Camera } from \"../Cameras/camera\";\r\n\r\n\r\nimport \"../Shaders/bloomMerge.fragment\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { serialize } from '../Misc/decorators';\r\n\r\n/**\r\n * The BloomMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\r\n */\r\nexport class BloomMergePostProcess extends PostProcess {\r\n    /** Weight of the bloom to be added to the original input. */\r\n    @serialize()\r\n    public weight = 1;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"BloomMergePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"BloomMergePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of @see BloomMergePostProcess\r\n     * @param name The name of the effect.\r\n     * @param originalFromInput Post process which's input will be used for the merge.\r\n     * @param blurred Blurred highlights post process which's output will be used.\r\n     * @param weight Weight of the bloom to be added to the original input.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string, originalFromInput: PostProcess, blurred: PostProcess,\r\n        /** Weight of the bloom to be added to the original input. */\r\n        weight: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0, blockCompilation = false) {\r\n        super(name, \"bloomMerge\", [\"bloomWeight\"], [\"circleOfConfusionSampler\", \"blurStep0\", \"blurStep1\", \"blurStep2\", \"bloomBlur\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true);\r\n        this.weight = weight;\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\r\n            effect.setTextureFromPostProcessOutput(\"bloomBlur\", blurred);\r\n            effect.setFloat(\"bloomWeight\", this.weight);\r\n        });\r\n\r\n        if (!blockCompilation) {\r\n            this.updateEffect();\r\n        }\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.BloomMergePostProcess\"] = BloomMergePostProcess;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}