{"ast":null,"code":"/**\r\n * Helper to manipulate strings\r\n */\nvar StringTools =\n/** @class */\nfunction () {\n  function StringTools() {}\n  /**\r\n   * Checks for a matching suffix at the end of a string (for ES5 and lower)\r\n   * @param str Source string\r\n   * @param suffix Suffix to search for in the source string\r\n   * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n   */\n\n\n  StringTools.EndsWith = function (str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n  };\n  /**\r\n   * Checks for a matching suffix at the beginning of a string (for ES5 and lower)\r\n   * @param str Source string\r\n   * @param suffix Suffix to search for in the source string\r\n   * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n   */\n\n\n  StringTools.StartsWith = function (str, suffix) {\n    if (!str) {\n      return false;\n    }\n\n    return str.indexOf(suffix) === 0;\n  };\n  /**\r\n   * Decodes a buffer into a string\r\n   * @param buffer The buffer to decode\r\n   * @returns The decoded string\r\n   */\n\n\n  StringTools.Decode = function (buffer) {\n    if (typeof TextDecoder !== \"undefined\") {\n      return new TextDecoder().decode(buffer);\n    }\n\n    var result = \"\";\n\n    for (var i = 0; i < buffer.byteLength; i++) {\n      result += String.fromCharCode(buffer[i]);\n    }\n\n    return result;\n  };\n  /**\r\n   * Encode a buffer to a base64 string\r\n   * @param buffer defines the buffer to encode\r\n   * @returns the encoded string\r\n   */\n\n\n  StringTools.EncodeArrayBufferToBase64 = function (buffer) {\n    var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var output = \"\";\n    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    var i = 0;\n    var bytes = ArrayBuffer.isView(buffer) ? new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength) : new Uint8Array(buffer);\n\n    while (i < bytes.length) {\n      chr1 = bytes[i++];\n      chr2 = i < bytes.length ? bytes[i++] : Number.NaN;\n      chr3 = i < bytes.length ? bytes[i++] : Number.NaN;\n      enc1 = chr1 >> 2;\n      enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n      enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n      enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n    }\n\n    return output;\n  };\n  /**\r\n  * Converts a number to string and pads with preceeding zeroes until it is of specified length.\r\n  * @param num the number to convert and pad\r\n  * @param length the expected length of the string\r\n  * @returns the padded string\r\n  */\n\n\n  StringTools.PadNumber = function (num, length) {\n    var str = String(num);\n\n    while (str.length < length) {\n      str = \"0\" + str;\n    }\n\n    return str;\n  };\n\n  return StringTools;\n}();\n\nexport { StringTools };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/stringTools.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Helper to manipulate strings\r\n */\r\nexport class StringTools {\r\n    /**\r\n     * Checks for a matching suffix at the end of a string (for ES5 and lower)\r\n     * @param str Source string\r\n     * @param suffix Suffix to search for in the source string\r\n     * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n     */\r\n    public static EndsWith(str: string, suffix: string): boolean {\r\n        return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Checks for a matching suffix at the beginning of a string (for ES5 and lower)\r\n     * @param str Source string\r\n     * @param suffix Suffix to search for in the source string\r\n     * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n     */\r\n    public static StartsWith(str: string, suffix: string): boolean {\r\n        if (!str) {\r\n            return false;\r\n        }\r\n        return str.indexOf(suffix) === 0;\r\n    }\r\n\r\n    /**\r\n     * Decodes a buffer into a string\r\n     * @param buffer The buffer to decode\r\n     * @returns The decoded string\r\n     */\r\n    public static Decode(buffer: Uint8Array | Uint16Array): string {\r\n        if (typeof TextDecoder !== \"undefined\") {\r\n            return new TextDecoder().decode(buffer);\r\n        }\r\n\r\n        let result = \"\";\r\n        for (let i = 0; i < buffer.byteLength; i++) {\r\n            result += String.fromCharCode(buffer[i]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Encode a buffer to a base64 string\r\n     * @param buffer defines the buffer to encode\r\n     * @returns the encoded string\r\n     */\r\n    public static EncodeArrayBufferToBase64(buffer: ArrayBuffer | ArrayBufferView): string {\r\n        var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n        var output = \"\";\r\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n        var bytes = ArrayBuffer.isView(buffer) ? new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength) : new Uint8Array(buffer);\r\n\r\n        while (i < bytes.length) {\r\n            chr1 = bytes[i++];\r\n            chr2 = i < bytes.length ? bytes[i++] : Number.NaN;\r\n            chr3 = i < bytes.length ? bytes[i++] : Number.NaN;\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n            output += keyStr.charAt(enc1) + keyStr.charAt(enc2) +\r\n                keyStr.charAt(enc3) + keyStr.charAt(enc4);\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    /**\r\n    * Converts a number to string and pads with preceeding zeroes until it is of specified length.\r\n    * @param num the number to convert and pad\r\n    * @param length the expected length of the string\r\n    * @returns the padded string\r\n    */\r\n    public static PadNumber(num: number, length: number): string {\r\n        var str = String(num);\r\n        while (str.length < length) { str = \"0\" + str; }\r\n        return str;\r\n    }\r\n\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}