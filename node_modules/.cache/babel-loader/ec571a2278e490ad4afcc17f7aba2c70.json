{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable\";\nimport { Gamepad } from \"./gamepad\";\n/**\r\n * Defines supported buttons for DualShock compatible gamepads\r\n */\n\nexport var DualShockButton;\n\n(function (DualShockButton) {\n  /** Cross */\n  DualShockButton[DualShockButton[\"Cross\"] = 0] = \"Cross\";\n  /** Circle */\n\n  DualShockButton[DualShockButton[\"Circle\"] = 1] = \"Circle\";\n  /** Square */\n\n  DualShockButton[DualShockButton[\"Square\"] = 2] = \"Square\";\n  /** Triangle */\n\n  DualShockButton[DualShockButton[\"Triangle\"] = 3] = \"Triangle\";\n  /** L1 */\n\n  DualShockButton[DualShockButton[\"L1\"] = 4] = \"L1\";\n  /** R1 */\n\n  DualShockButton[DualShockButton[\"R1\"] = 5] = \"R1\";\n  /** Share */\n\n  DualShockButton[DualShockButton[\"Share\"] = 8] = \"Share\";\n  /** Options */\n\n  DualShockButton[DualShockButton[\"Options\"] = 9] = \"Options\";\n  /** Left stick */\n\n  DualShockButton[DualShockButton[\"LeftStick\"] = 10] = \"LeftStick\";\n  /** Right stick */\n\n  DualShockButton[DualShockButton[\"RightStick\"] = 11] = \"RightStick\";\n})(DualShockButton || (DualShockButton = {}));\n/** Defines values for DualShock DPad  */\n\n\nexport var DualShockDpad;\n\n(function (DualShockDpad) {\n  /** Up */\n  DualShockDpad[DualShockDpad[\"Up\"] = 12] = \"Up\";\n  /** Down */\n\n  DualShockDpad[DualShockDpad[\"Down\"] = 13] = \"Down\";\n  /** Left */\n\n  DualShockDpad[DualShockDpad[\"Left\"] = 14] = \"Left\";\n  /** Right */\n\n  DualShockDpad[DualShockDpad[\"Right\"] = 15] = \"Right\";\n})(DualShockDpad || (DualShockDpad = {}));\n/**\r\n * Defines a DualShock gamepad\r\n */\n\n\nvar DualShockPad =\n/** @class */\nfunction (_super) {\n  __extends(DualShockPad, _super);\n  /**\r\n   * Creates a new DualShock gamepad object\r\n   * @param id defines the id of this gamepad\r\n   * @param index defines its index\r\n   * @param gamepad defines the internal HTML gamepad object\r\n   */\n\n\n  function DualShockPad(id, index, gamepad) {\n    var _this = _super.call(this, id.replace(\"STANDARD GAMEPAD\", \"SONY PLAYSTATION DUALSHOCK\"), index, gamepad, 0, 1, 2, 3) || this;\n\n    _this._leftTrigger = 0;\n    _this._rightTrigger = 0;\n    /** Observable raised when a button is pressed */\n\n    _this.onButtonDownObservable = new Observable();\n    /** Observable raised when a button is released */\n\n    _this.onButtonUpObservable = new Observable();\n    /** Observable raised when a pad is pressed */\n\n    _this.onPadDownObservable = new Observable();\n    /** Observable raised when a pad is released */\n\n    _this.onPadUpObservable = new Observable();\n    _this._buttonCross = 0;\n    _this._buttonCircle = 0;\n    _this._buttonSquare = 0;\n    _this._buttonTriangle = 0;\n    _this._buttonShare = 0;\n    _this._buttonOptions = 0;\n    _this._buttonL1 = 0;\n    _this._buttonR1 = 0;\n    _this._buttonLeftStick = 0;\n    _this._buttonRightStick = 0;\n    _this._dPadUp = 0;\n    _this._dPadDown = 0;\n    _this._dPadLeft = 0;\n    _this._dPadRight = 0;\n    _this.type = Gamepad.DUALSHOCK;\n    return _this;\n  }\n  /**\r\n   * Defines the callback to call when left trigger is pressed\r\n   * @param callback defines the callback to use\r\n   */\n\n\n  DualShockPad.prototype.onlefttriggerchanged = function (callback) {\n    this._onlefttriggerchanged = callback;\n  };\n  /**\r\n   * Defines the callback to call when right trigger is pressed\r\n   * @param callback defines the callback to use\r\n   */\n\n\n  DualShockPad.prototype.onrighttriggerchanged = function (callback) {\n    this._onrighttriggerchanged = callback;\n  };\n\n  Object.defineProperty(DualShockPad.prototype, \"leftTrigger\", {\n    /**\r\n     * Gets the left trigger value\r\n     */\n    get: function () {\n      return this._leftTrigger;\n    },\n\n    /**\r\n     * Sets the left trigger value\r\n     */\n    set: function (newValue) {\n      if (this._onlefttriggerchanged && this._leftTrigger !== newValue) {\n        this._onlefttriggerchanged(newValue);\n      }\n\n      this._leftTrigger = newValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"rightTrigger\", {\n    /**\r\n     * Gets the right trigger value\r\n     */\n    get: function () {\n      return this._rightTrigger;\n    },\n\n    /**\r\n     * Sets the right trigger value\r\n     */\n    set: function (newValue) {\n      if (this._onrighttriggerchanged && this._rightTrigger !== newValue) {\n        this._onrighttriggerchanged(newValue);\n      }\n\n      this._rightTrigger = newValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Defines the callback to call when a button is pressed\r\n   * @param callback defines the callback to use\r\n   */\n\n  DualShockPad.prototype.onbuttondown = function (callback) {\n    this._onbuttondown = callback;\n  };\n  /**\r\n   * Defines the callback to call when a button is released\r\n   * @param callback defines the callback to use\r\n   */\n\n\n  DualShockPad.prototype.onbuttonup = function (callback) {\n    this._onbuttonup = callback;\n  };\n  /**\r\n   * Defines the callback to call when a pad is pressed\r\n   * @param callback defines the callback to use\r\n   */\n\n\n  DualShockPad.prototype.ondpaddown = function (callback) {\n    this._ondpaddown = callback;\n  };\n  /**\r\n   * Defines the callback to call when a pad is released\r\n   * @param callback defines the callback to use\r\n   */\n\n\n  DualShockPad.prototype.ondpadup = function (callback) {\n    this._ondpadup = callback;\n  };\n\n  DualShockPad.prototype._setButtonValue = function (newValue, currentValue, buttonType) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._onbuttondown) {\n          this._onbuttondown(buttonType);\n        }\n\n        this.onButtonDownObservable.notifyObservers(buttonType);\n      }\n\n      if (newValue === 0) {\n        if (this._onbuttonup) {\n          this._onbuttonup(buttonType);\n        }\n\n        this.onButtonUpObservable.notifyObservers(buttonType);\n      }\n    }\n\n    return newValue;\n  };\n\n  DualShockPad.prototype._setDPadValue = function (newValue, currentValue, buttonType) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._ondpaddown) {\n          this._ondpaddown(buttonType);\n        }\n\n        this.onPadDownObservable.notifyObservers(buttonType);\n      }\n\n      if (newValue === 0) {\n        if (this._ondpadup) {\n          this._ondpadup(buttonType);\n        }\n\n        this.onPadUpObservable.notifyObservers(buttonType);\n      }\n    }\n\n    return newValue;\n  };\n\n  Object.defineProperty(DualShockPad.prototype, \"buttonCross\", {\n    /**\r\n     * Gets the value of the `Cross` button\r\n     */\n    get: function () {\n      return this._buttonCross;\n    },\n\n    /**\r\n     * Sets the value of the `Cross` button\r\n     */\n    set: function (value) {\n      this._buttonCross = this._setButtonValue(value, this._buttonCross, DualShockButton.Cross);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonCircle\", {\n    /**\r\n     * Gets the value of the `Circle` button\r\n     */\n    get: function () {\n      return this._buttonCircle;\n    },\n\n    /**\r\n     * Sets the value of the `Circle` button\r\n     */\n    set: function (value) {\n      this._buttonCircle = this._setButtonValue(value, this._buttonCircle, DualShockButton.Circle);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonSquare\", {\n    /**\r\n     * Gets the value of the `Square` button\r\n     */\n    get: function () {\n      return this._buttonSquare;\n    },\n\n    /**\r\n     * Sets the value of the `Square` button\r\n     */\n    set: function (value) {\n      this._buttonSquare = this._setButtonValue(value, this._buttonSquare, DualShockButton.Square);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonTriangle\", {\n    /**\r\n     * Gets the value of the `Triangle` button\r\n     */\n    get: function () {\n      return this._buttonTriangle;\n    },\n\n    /**\r\n     * Sets the value of the `Triangle` button\r\n     */\n    set: function (value) {\n      this._buttonTriangle = this._setButtonValue(value, this._buttonTriangle, DualShockButton.Triangle);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonOptions\", {\n    /**\r\n     * Gets the value of the `Options` button\r\n     */\n    get: function () {\n      return this._buttonOptions;\n    },\n\n    /**\r\n     * Sets the value of the `Options` button\r\n     */\n    set: function (value) {\n      this._buttonOptions = this._setButtonValue(value, this._buttonOptions, DualShockButton.Options);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonShare\", {\n    /**\r\n     * Gets the value of the `Share` button\r\n     */\n    get: function () {\n      return this._buttonShare;\n    },\n\n    /**\r\n     * Sets the value of the `Share` button\r\n     */\n    set: function (value) {\n      this._buttonShare = this._setButtonValue(value, this._buttonShare, DualShockButton.Share);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonL1\", {\n    /**\r\n     * Gets the value of the `L1` button\r\n     */\n    get: function () {\n      return this._buttonL1;\n    },\n\n    /**\r\n     * Sets the value of the `L1` button\r\n     */\n    set: function (value) {\n      this._buttonL1 = this._setButtonValue(value, this._buttonL1, DualShockButton.L1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonR1\", {\n    /**\r\n     * Gets the value of the `R1` button\r\n     */\n    get: function () {\n      return this._buttonR1;\n    },\n\n    /**\r\n     * Sets the value of the `R1` button\r\n     */\n    set: function (value) {\n      this._buttonR1 = this._setButtonValue(value, this._buttonR1, DualShockButton.R1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonLeftStick\", {\n    /**\r\n     * Gets the value of the Left joystick\r\n     */\n    get: function () {\n      return this._buttonLeftStick;\n    },\n\n    /**\r\n     * Sets the value of the Left joystick\r\n     */\n    set: function (value) {\n      this._buttonLeftStick = this._setButtonValue(value, this._buttonLeftStick, DualShockButton.LeftStick);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonRightStick\", {\n    /**\r\n     * Gets the value of the Right joystick\r\n     */\n    get: function () {\n      return this._buttonRightStick;\n    },\n\n    /**\r\n     * Sets the value of the Right joystick\r\n     */\n    set: function (value) {\n      this._buttonRightStick = this._setButtonValue(value, this._buttonRightStick, DualShockButton.RightStick);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"dPadUp\", {\n    /**\r\n     * Gets the value of D-pad up\r\n     */\n    get: function () {\n      return this._dPadUp;\n    },\n\n    /**\r\n     * Sets the value of D-pad up\r\n     */\n    set: function (value) {\n      this._dPadUp = this._setDPadValue(value, this._dPadUp, DualShockDpad.Up);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"dPadDown\", {\n    /**\r\n     * Gets the value of D-pad down\r\n     */\n    get: function () {\n      return this._dPadDown;\n    },\n\n    /**\r\n     * Sets the value of D-pad down\r\n     */\n    set: function (value) {\n      this._dPadDown = this._setDPadValue(value, this._dPadDown, DualShockDpad.Down);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"dPadLeft\", {\n    /**\r\n     * Gets the value of D-pad left\r\n     */\n    get: function () {\n      return this._dPadLeft;\n    },\n\n    /**\r\n     * Sets the value of D-pad left\r\n     */\n    set: function (value) {\n      this._dPadLeft = this._setDPadValue(value, this._dPadLeft, DualShockDpad.Left);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"dPadRight\", {\n    /**\r\n     * Gets the value of D-pad right\r\n     */\n    get: function () {\n      return this._dPadRight;\n    },\n\n    /**\r\n     * Sets the value of D-pad right\r\n     */\n    set: function (value) {\n      this._dPadRight = this._setDPadValue(value, this._dPadRight, DualShockDpad.Right);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Force the gamepad to synchronize with device values\r\n   */\n\n  DualShockPad.prototype.update = function () {\n    _super.prototype.update.call(this);\n\n    this.buttonCross = this.browserGamepad.buttons[0].value;\n    this.buttonCircle = this.browserGamepad.buttons[1].value;\n    this.buttonSquare = this.browserGamepad.buttons[2].value;\n    this.buttonTriangle = this.browserGamepad.buttons[3].value;\n    this.buttonL1 = this.browserGamepad.buttons[4].value;\n    this.buttonR1 = this.browserGamepad.buttons[5].value;\n    this.leftTrigger = this.browserGamepad.buttons[6].value;\n    this.rightTrigger = this.browserGamepad.buttons[7].value;\n    this.buttonShare = this.browserGamepad.buttons[8].value;\n    this.buttonOptions = this.browserGamepad.buttons[9].value;\n    this.buttonLeftStick = this.browserGamepad.buttons[10].value;\n    this.buttonRightStick = this.browserGamepad.buttons[11].value;\n    this.dPadUp = this.browserGamepad.buttons[12].value;\n    this.dPadDown = this.browserGamepad.buttons[13].value;\n    this.dPadLeft = this.browserGamepad.buttons[14].value;\n    this.dPadRight = this.browserGamepad.buttons[15].value;\n  };\n  /**\r\n   * Disposes the gamepad\r\n   */\n\n\n  DualShockPad.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onButtonDownObservable.clear();\n    this.onButtonUpObservable.clear();\n    this.onPadDownObservable.clear();\n    this.onPadUpObservable.clear();\n  };\n\n  return DualShockPad;\n}(Gamepad);\n\nexport { DualShockPad };","map":{"version":3,"sources":["../../../sourceES6/core/Gamepads/dualShockGamepad.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport { Gamepad } from \"./gamepad\";\r\n\r\n/**\r\n * Defines supported buttons for DualShock compatible gamepads\r\n */\r\nexport enum DualShockButton {\r\n    /** Cross */\r\n    Cross = 0,\r\n    /** Circle */\r\n    Circle = 1,\r\n    /** Square */\r\n    Square = 2,\r\n    /** Triangle */\r\n    Triangle = 3,\r\n    /** L1 */\r\n    L1 = 4,\r\n    /** R1 */\r\n    R1 = 5,\r\n    /** Share */\r\n    Share = 8,\r\n    /** Options */\r\n    Options = 9,\r\n    /** Left stick */\r\n    LeftStick = 10,\r\n    /** Right stick */\r\n    RightStick = 11\r\n}\r\n\r\n/** Defines values for DualShock DPad  */\r\nexport enum DualShockDpad {\r\n    /** Up */\r\n    Up = 12,\r\n    /** Down */\r\n    Down = 13,\r\n    /** Left */\r\n    Left = 14,\r\n    /** Right */\r\n    Right = 15\r\n}\r\n\r\n/**\r\n * Defines a DualShock gamepad\r\n */\r\nexport class DualShockPad extends Gamepad {\r\n    private _leftTrigger: number = 0;\r\n    private _rightTrigger: number = 0;\r\n\r\n    private _onlefttriggerchanged: (value: number) => void;\r\n    private _onrighttriggerchanged: (value: number) => void;\r\n\r\n    private _onbuttondown: (buttonPressed: DualShockButton) => void;\r\n    private _onbuttonup: (buttonReleased: DualShockButton) => void;\r\n    private _ondpaddown: (dPadPressed: DualShockDpad) => void;\r\n    private _ondpadup: (dPadReleased: DualShockDpad) => void;\r\n\r\n    /** Observable raised when a button is pressed */\r\n    public onButtonDownObservable = new Observable<DualShockButton>();\r\n    /** Observable raised when a button is released */\r\n    public onButtonUpObservable = new Observable<DualShockButton>();\r\n    /** Observable raised when a pad is pressed */\r\n    public onPadDownObservable = new Observable<DualShockDpad>();\r\n    /** Observable raised when a pad is released */\r\n    public onPadUpObservable = new Observable<DualShockDpad>();\r\n\r\n    private _buttonCross: number = 0;\r\n    private _buttonCircle: number = 0;\r\n    private _buttonSquare: number = 0;\r\n    private _buttonTriangle: number = 0;\r\n    private _buttonShare: number = 0;\r\n    private _buttonOptions: number = 0;\r\n    private _buttonL1: number = 0;\r\n    private _buttonR1: number = 0;\r\n\r\n    private _buttonLeftStick: number = 0;\r\n    private _buttonRightStick: number = 0;\r\n    private _dPadUp: number = 0;\r\n    private _dPadDown: number = 0;\r\n    private _dPadLeft: number = 0;\r\n    private _dPadRight: number = 0;\r\n\r\n    /**\r\n     * Creates a new DualShock gamepad object\r\n     * @param id defines the id of this gamepad\r\n     * @param index defines its index\r\n     * @param gamepad defines the internal HTML gamepad object\r\n     */\r\n    constructor(id: string, index: number, gamepad: any) {\r\n        super(id.replace(\"STANDARD GAMEPAD\", \"SONY PLAYSTATION DUALSHOCK\"), index, gamepad, 0, 1, 2, 3);\r\n        this.type = Gamepad.DUALSHOCK;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when left trigger is pressed\r\n     * @param callback defines the callback to use\r\n     */\r\n    public onlefttriggerchanged(callback: (value: number) => void) {\r\n        this._onlefttriggerchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when right trigger is pressed\r\n     * @param callback defines the callback to use\r\n     */\r\n    public onrighttriggerchanged(callback: (value: number) => void) {\r\n        this._onrighttriggerchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Gets the left trigger value\r\n     */\r\n    public get leftTrigger(): number {\r\n        return this._leftTrigger;\r\n    }\r\n    /**\r\n     * Sets the left trigger value\r\n     */\r\n    public set leftTrigger(newValue: number) {\r\n        if (this._onlefttriggerchanged && this._leftTrigger !== newValue) {\r\n            this._onlefttriggerchanged(newValue);\r\n        }\r\n        this._leftTrigger = newValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the right trigger value\r\n     */\r\n    public get rightTrigger(): number {\r\n        return this._rightTrigger;\r\n    }\r\n    /**\r\n     * Sets the right trigger value\r\n     */\r\n    public set rightTrigger(newValue: number) {\r\n        if (this._onrighttriggerchanged && this._rightTrigger !== newValue) {\r\n            this._onrighttriggerchanged(newValue);\r\n        }\r\n        this._rightTrigger = newValue;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when a button is pressed\r\n     * @param callback defines the callback to use\r\n     */\r\n    public onbuttondown(callback: (buttonPressed: DualShockButton) => void) {\r\n        this._onbuttondown = callback;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when a button is released\r\n     * @param callback defines the callback to use\r\n     */\r\n    public onbuttonup(callback: (buttonReleased: DualShockButton) => void) {\r\n        this._onbuttonup = callback;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when a pad is pressed\r\n     * @param callback defines the callback to use\r\n     */\r\n    public ondpaddown(callback: (dPadPressed: DualShockDpad) => void) {\r\n        this._ondpaddown = callback;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when a pad is released\r\n     * @param callback defines the callback to use\r\n     */\r\n    public ondpadup(callback: (dPadReleased: DualShockDpad) => void) {\r\n        this._ondpadup = callback;\r\n    }\r\n\r\n    private _setButtonValue(newValue: number, currentValue: number, buttonType: DualShockButton): number {\r\n        if (newValue !== currentValue) {\r\n            if (newValue === 1) {\r\n                if (this._onbuttondown) {\r\n                    this._onbuttondown(buttonType);\r\n                }\r\n\r\n                this.onButtonDownObservable.notifyObservers(buttonType);\r\n            }\r\n            if (newValue === 0) {\r\n\r\n                if (this._onbuttonup) {\r\n                    this._onbuttonup(buttonType);\r\n                }\r\n\r\n                this.onButtonUpObservable.notifyObservers(buttonType);\r\n            }\r\n        }\r\n        return newValue;\r\n    }\r\n\r\n    private _setDPadValue(newValue: number, currentValue: number, buttonType: DualShockDpad): number {\r\n        if (newValue !== currentValue) {\r\n            if (newValue === 1) {\r\n                if (this._ondpaddown) {\r\n                    this._ondpaddown(buttonType);\r\n                }\r\n\r\n                this.onPadDownObservable.notifyObservers(buttonType);\r\n            }\r\n            if (newValue === 0) {\r\n                if (this._ondpadup) {\r\n                    this._ondpadup(buttonType);\r\n                }\r\n\r\n                this.onPadUpObservable.notifyObservers(buttonType);\r\n            }\r\n        }\r\n        return newValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Cross` button\r\n     */\r\n    public get buttonCross(): number {\r\n        return this._buttonCross;\r\n    }\r\n    /**\r\n     * Sets the value of the `Cross` button\r\n     */\r\n    public set buttonCross(value) {\r\n        this._buttonCross = this._setButtonValue(value, this._buttonCross, DualShockButton.Cross);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Circle` button\r\n     */\r\n    public get buttonCircle(): number {\r\n        return this._buttonCircle;\r\n    }\r\n    /**\r\n     * Sets the value of the `Circle` button\r\n     */\r\n    public set buttonCircle(value) {\r\n        this._buttonCircle = this._setButtonValue(value, this._buttonCircle, DualShockButton.Circle);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Square` button\r\n     */\r\n    public get buttonSquare(): number {\r\n        return this._buttonSquare;\r\n    }\r\n    /**\r\n     * Sets the value of the `Square` button\r\n     */\r\n    public set buttonSquare(value) {\r\n        this._buttonSquare = this._setButtonValue(value, this._buttonSquare, DualShockButton.Square);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Triangle` button\r\n     */\r\n    public get buttonTriangle(): number {\r\n        return this._buttonTriangle;\r\n    }\r\n    /**\r\n     * Sets the value of the `Triangle` button\r\n     */\r\n    public set buttonTriangle(value) {\r\n        this._buttonTriangle = this._setButtonValue(value, this._buttonTriangle, DualShockButton.Triangle);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Options` button\r\n     */\r\n    public get buttonOptions(): number {\r\n        return this._buttonOptions;\r\n    }\r\n    /**\r\n     * Sets the value of the `Options` button\r\n     */\r\n    public set buttonOptions(value) {\r\n        this._buttonOptions = this._setButtonValue(value, this._buttonOptions, DualShockButton.Options);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Share` button\r\n     */\r\n    public get buttonShare(): number {\r\n        return this._buttonShare;\r\n    }\r\n    /**\r\n     * Sets the value of the `Share` button\r\n     */\r\n    public set buttonShare(value) {\r\n        this._buttonShare = this._setButtonValue(value, this._buttonShare, DualShockButton.Share);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `L1` button\r\n     */\r\n    public get buttonL1(): number {\r\n        return this._buttonL1;\r\n    }\r\n    /**\r\n     * Sets the value of the `L1` button\r\n     */\r\n    public set buttonL1(value) {\r\n        this._buttonL1 = this._setButtonValue(value, this._buttonL1, DualShockButton.L1);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `R1` button\r\n     */\r\n    public get buttonR1(): number {\r\n        return this._buttonR1;\r\n    }\r\n    /**\r\n     * Sets the value of the `R1` button\r\n     */\r\n    public set buttonR1(value) {\r\n        this._buttonR1 = this._setButtonValue(value, this._buttonR1, DualShockButton.R1);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the Left joystick\r\n     */\r\n    public get buttonLeftStick(): number {\r\n        return this._buttonLeftStick;\r\n    }\r\n    /**\r\n     * Sets the value of the Left joystick\r\n     */\r\n    public set buttonLeftStick(value) {\r\n        this._buttonLeftStick = this._setButtonValue(value, this._buttonLeftStick, DualShockButton.LeftStick);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the Right joystick\r\n     */\r\n    public get buttonRightStick(): number {\r\n        return this._buttonRightStick;\r\n    }\r\n    /**\r\n     * Sets the value of the Right joystick\r\n     */\r\n    public set buttonRightStick(value) {\r\n        this._buttonRightStick = this._setButtonValue(value, this._buttonRightStick, DualShockButton.RightStick);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of D-pad up\r\n     */\r\n    public get dPadUp(): number {\r\n        return this._dPadUp;\r\n    }\r\n    /**\r\n     * Sets the value of D-pad up\r\n     */\r\n    public set dPadUp(value) {\r\n        this._dPadUp = this._setDPadValue(value, this._dPadUp, DualShockDpad.Up);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of D-pad down\r\n     */\r\n    public get dPadDown(): number {\r\n        return this._dPadDown;\r\n    }\r\n    /**\r\n     * Sets the value of D-pad down\r\n     */\r\n    public set dPadDown(value) {\r\n        this._dPadDown = this._setDPadValue(value, this._dPadDown, DualShockDpad.Down);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of D-pad left\r\n     */\r\n    public get dPadLeft(): number {\r\n        return this._dPadLeft;\r\n    }\r\n    /**\r\n     * Sets the value of D-pad left\r\n     */\r\n    public set dPadLeft(value) {\r\n        this._dPadLeft = this._setDPadValue(value, this._dPadLeft, DualShockDpad.Left);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of D-pad right\r\n     */\r\n    public get dPadRight(): number {\r\n        return this._dPadRight;\r\n    }\r\n    /**\r\n     * Sets the value of D-pad right\r\n     */\r\n    public set dPadRight(value) {\r\n        this._dPadRight = this._setDPadValue(value, this._dPadRight, DualShockDpad.Right);\r\n    }\r\n\r\n    /**\r\n     * Force the gamepad to synchronize with device values\r\n     */\r\n    public update() {\r\n        super.update();\r\n        this.buttonCross = this.browserGamepad.buttons[0].value;\r\n        this.buttonCircle = this.browserGamepad.buttons[1].value;\r\n        this.buttonSquare = this.browserGamepad.buttons[2].value;\r\n        this.buttonTriangle = this.browserGamepad.buttons[3].value;\r\n        this.buttonL1 = this.browserGamepad.buttons[4].value;\r\n        this.buttonR1 = this.browserGamepad.buttons[5].value;\r\n        this.leftTrigger = this.browserGamepad.buttons[6].value;\r\n        this.rightTrigger = this.browserGamepad.buttons[7].value;\r\n        this.buttonShare = this.browserGamepad.buttons[8].value;\r\n        this.buttonOptions = this.browserGamepad.buttons[9].value;\r\n        this.buttonLeftStick = this.browserGamepad.buttons[10].value;\r\n        this.buttonRightStick = this.browserGamepad.buttons[11].value;\r\n        this.dPadUp = this.browserGamepad.buttons[12].value;\r\n        this.dPadDown = this.browserGamepad.buttons[13].value;\r\n        this.dPadLeft = this.browserGamepad.buttons[14].value;\r\n        this.dPadRight = this.browserGamepad.buttons[15].value;\r\n    }\r\n\r\n    /**\r\n     * Disposes the gamepad\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onButtonDownObservable.clear();\r\n        this.onButtonUpObservable.clear();\r\n        this.onPadDownObservable.clear();\r\n        this.onPadUpObservable.clear();\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}