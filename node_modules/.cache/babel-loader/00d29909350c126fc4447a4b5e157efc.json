{"ast":null,"code":"import { Logger } from \"../Misc/logger\";\n/**\r\n * Wraps one or more Sound objects and selects one with random weight for playback.\r\n */\n\nvar WeightedSound =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new WeightedSound from the list of sounds given.\r\n   * @param loop When true a Sound will be selected and played when the current playing Sound completes.\r\n   * @param sounds Array of Sounds that will be selected from.\r\n   * @param weights Array of number values for selection weights; length must equal sounds, values will be normalized to 1\r\n   */\n  function WeightedSound(loop, sounds, weights) {\n    var _this = this;\n    /** When true a Sound will be selected and played when the current playing Sound completes. */\n\n\n    this.loop = false;\n    this._coneInnerAngle = 360;\n    this._coneOuterAngle = 360;\n    this._volume = 1;\n    /** A Sound is currently playing. */\n\n    this.isPlaying = false;\n    /** A Sound is currently paused. */\n\n    this.isPaused = false;\n    this._sounds = [];\n    this._weights = [];\n\n    if (sounds.length !== weights.length) {\n      throw new Error('Sounds length does not equal weights length');\n    }\n\n    this.loop = loop;\n    this._weights = weights; // Normalize the weights\n\n    var weightSum = 0;\n\n    for (var _i = 0, weights_1 = weights; _i < weights_1.length; _i++) {\n      var weight = weights_1[_i];\n      weightSum += weight;\n    }\n\n    var invWeightSum = weightSum > 0 ? 1 / weightSum : 0;\n\n    for (var i = 0; i < this._weights.length; i++) {\n      this._weights[i] *= invWeightSum;\n    }\n\n    this._sounds = sounds;\n\n    for (var _a = 0, _b = this._sounds; _a < _b.length; _a++) {\n      var sound = _b[_a];\n      sound.onEndedObservable.add(function () {\n        _this._onended();\n      });\n    }\n  }\n\n  Object.defineProperty(WeightedSound.prototype, \"directionalConeInnerAngle\", {\n    /**\r\n     * The size of cone in degrees for a directional sound in which there will be no attenuation.\r\n     */\n    get: function () {\n      return this._coneInnerAngle;\n    },\n\n    /**\r\n     * The size of cone in degress for a directional sound in which there will be no attenuation.\r\n     */\n    set: function (value) {\n      if (value !== this._coneInnerAngle) {\n        if (this._coneOuterAngle < value) {\n          Logger.Error(\"directionalConeInnerAngle: outer angle of the cone must be superior or equal to the inner angle.\");\n          return;\n        }\n\n        this._coneInnerAngle = value;\n\n        for (var _i = 0, _a = this._sounds; _i < _a.length; _i++) {\n          var sound = _a[_i];\n          sound.directionalConeInnerAngle = value;\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WeightedSound.prototype, \"directionalConeOuterAngle\", {\n    /**\r\n     * Size of cone in degrees for a directional sound outside of which there will be no sound.\r\n     * Listener angles between innerAngle and outerAngle will falloff linearly.\r\n     */\n    get: function () {\n      return this._coneOuterAngle;\n    },\n\n    /**\r\n     * Size of cone in degrees for a directional sound outside of which there will be no sound.\r\n     * Listener angles between innerAngle and outerAngle will falloff linearly.\r\n     */\n    set: function (value) {\n      if (value !== this._coneOuterAngle) {\n        if (value < this._coneInnerAngle) {\n          Logger.Error(\"directionalConeOuterAngle: outer angle of the cone must be superior or equal to the inner angle.\");\n          return;\n        }\n\n        this._coneOuterAngle = value;\n\n        for (var _i = 0, _a = this._sounds; _i < _a.length; _i++) {\n          var sound = _a[_i];\n          sound.directionalConeOuterAngle = value;\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WeightedSound.prototype, \"volume\", {\n    /**\r\n     * Playback volume.\r\n     */\n    get: function () {\n      return this._volume;\n    },\n\n    /**\r\n     * Playback volume.\r\n     */\n    set: function (value) {\n      if (value !== this._volume) {\n        for (var _i = 0, _a = this._sounds; _i < _a.length; _i++) {\n          var sound = _a[_i];\n          sound.setVolume(value);\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WeightedSound.prototype._onended = function () {\n    if (this._currentIndex !== undefined) {\n      this._sounds[this._currentIndex].autoplay = false;\n    }\n\n    if (this.loop && this.isPlaying) {\n      this.play();\n    } else {\n      this.isPlaying = false;\n    }\n  };\n  /**\r\n   * Suspend playback\r\n   */\n\n\n  WeightedSound.prototype.pause = function () {\n    this.isPaused = true;\n\n    if (this._currentIndex !== undefined) {\n      this._sounds[this._currentIndex].pause();\n    }\n  };\n  /**\r\n   * Stop playback\r\n   */\n\n\n  WeightedSound.prototype.stop = function () {\n    this.isPlaying = false;\n\n    if (this._currentIndex !== undefined) {\n      this._sounds[this._currentIndex].stop();\n    }\n  };\n  /**\r\n   * Start playback.\r\n   * @param startOffset Position the clip head at a specific time in seconds.\r\n   */\n\n\n  WeightedSound.prototype.play = function (startOffset) {\n    if (!this.isPaused) {\n      this.stop();\n      var randomValue = Math.random();\n      var total = 0;\n\n      for (var i = 0; i < this._weights.length; i++) {\n        total += this._weights[i];\n\n        if (randomValue <= total) {\n          this._currentIndex = i;\n          break;\n        }\n      }\n    }\n\n    var sound = this._sounds[this._currentIndex];\n\n    if (sound.isReady()) {\n      sound.play(0, this.isPaused ? undefined : startOffset);\n    } else {\n      sound.autoplay = true;\n    }\n\n    this.isPlaying = true;\n    this.isPaused = false;\n  };\n\n  return WeightedSound;\n}();\n\nexport { WeightedSound };","map":{"version":3,"sources":["../../../sourceES6/core/Audio/weightedsound.ts"],"names":[],"mappings":"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","sourcesContent":["import { Sound } from \"../Audio/sound\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\n/**\r\n * Wraps one or more Sound objects and selects one with random weight for playback.\r\n */\r\nexport class WeightedSound {\r\n    /** When true a Sound will be selected and played when the current playing Sound completes. */\r\n    public loop: boolean = false;\r\n    private _coneInnerAngle: number = 360;\r\n    private _coneOuterAngle: number = 360;\r\n    private _volume: number = 1;\r\n    /** A Sound is currently playing. */\r\n    public isPlaying: boolean = false;\r\n    /** A Sound is currently paused. */\r\n    public isPaused: boolean = false;\r\n\r\n    private _sounds: Sound[] = [];\r\n    private _weights: number[] = [];\r\n    private _currentIndex?: number;\r\n\r\n    /**\r\n     * Creates a new WeightedSound from the list of sounds given.\r\n     * @param loop When true a Sound will be selected and played when the current playing Sound completes.\r\n     * @param sounds Array of Sounds that will be selected from.\r\n     * @param weights Array of number values for selection weights; length must equal sounds, values will be normalized to 1\r\n     */\r\n    constructor(loop: boolean, sounds: Sound[], weights: number[]) {\r\n        if (sounds.length !== weights.length) {\r\n            throw new Error('Sounds length does not equal weights length');\r\n        }\r\n\r\n        this.loop = loop;\r\n        this._weights = weights;\r\n        // Normalize the weights\r\n        let weightSum = 0;\r\n        for (const weight of weights) {\r\n            weightSum += weight;\r\n        }\r\n        const invWeightSum = weightSum > 0 ? 1 / weightSum : 0;\r\n        for (let i = 0; i < this._weights.length; i++) {\r\n            this._weights[i] *= invWeightSum;\r\n        }\r\n        this._sounds = sounds;\r\n        for (let sound of this._sounds) {\r\n            sound.onEndedObservable.add(() => { this._onended(); });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The size of cone in degrees for a directional sound in which there will be no attenuation.\r\n     */\r\n    public get directionalConeInnerAngle(): number {\r\n        return this._coneInnerAngle;\r\n    }\r\n\r\n    /**\r\n     * The size of cone in degress for a directional sound in which there will be no attenuation.\r\n     */\r\n    public set directionalConeInnerAngle(value: number) {\r\n        if (value !== this._coneInnerAngle) {\r\n            if (this._coneOuterAngle < value) {\r\n                Logger.Error(\"directionalConeInnerAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneInnerAngle = value;\r\n            for (let sound of this._sounds) {\r\n                sound.directionalConeInnerAngle = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Size of cone in degrees for a directional sound outside of which there will be no sound.\r\n     * Listener angles between innerAngle and outerAngle will falloff linearly.\r\n     */\r\n    public get directionalConeOuterAngle(): number {\r\n        return this._coneOuterAngle;\r\n    }\r\n\r\n    /**\r\n     * Size of cone in degrees for a directional sound outside of which there will be no sound.\r\n     * Listener angles between innerAngle and outerAngle will falloff linearly.\r\n     */\r\n    public set directionalConeOuterAngle(value: number) {\r\n        if (value !== this._coneOuterAngle) {\r\n            if (value < this._coneInnerAngle) {\r\n                Logger.Error(\"directionalConeOuterAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneOuterAngle = value;\r\n            for (let sound of this._sounds) {\r\n                sound.directionalConeOuterAngle = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Playback volume.\r\n     */\r\n    public get volume(): number {\r\n        return this._volume;\r\n    }\r\n\r\n    /**\r\n     * Playback volume.\r\n     */\r\n    public set volume(value: number) {\r\n        if (value !== this._volume) {\r\n            for (let sound of this._sounds) {\r\n                sound.setVolume(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onended() {\r\n        if (this._currentIndex !== undefined) {\r\n            this._sounds[this._currentIndex].autoplay = false;\r\n        }\r\n        if (this.loop && this.isPlaying) {\r\n            this.play();\r\n        } else {\r\n            this.isPlaying = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Suspend playback\r\n     */\r\n    public pause() {\r\n        this.isPaused = true;\r\n        if (this._currentIndex !== undefined) {\r\n            this._sounds[this._currentIndex].pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop playback\r\n     */\r\n    public stop() {\r\n        this.isPlaying = false;\r\n        if (this._currentIndex !== undefined) {\r\n            this._sounds[this._currentIndex].stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start playback.\r\n     * @param startOffset Position the clip head at a specific time in seconds.\r\n     */\r\n    public play(startOffset?: number) {\r\n        if (!this.isPaused) {\r\n            this.stop();\r\n            let randomValue = Math.random();\r\n            let total = 0;\r\n            for (let i = 0; i < this._weights.length; i++) {\r\n                total += this._weights[i];\r\n                if (randomValue <= total) {\r\n                    this._currentIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const sound = this._sounds[this._currentIndex!];\r\n        if (sound.isReady()) {\r\n            sound.play(0, this.isPaused ? undefined : startOffset);\r\n        } else {\r\n            sound.autoplay = true;\r\n        }\r\n        this.isPlaying = true;\r\n        this.isPaused = false;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}