{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { Observable } from \"../Misc/observable\";\nimport { WebXRState } from \"./webXRTypes\";\nimport { Tools } from \"../Misc/tools\";\n/**\r\n * Button which can be used to enter a different mode of XR\r\n */\n\nvar WebXREnterExitUIButton =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a WebXREnterExitUIButton\r\n   * @param element button element\r\n   * @param sessionMode XR initialization session mode\r\n   * @param referenceSpaceType the type of reference space to be used\r\n   */\n  function WebXREnterExitUIButton(\n  /** button element */\n  element,\n  /** XR initialization options for the button */\n  sessionMode,\n  /** Reference space type */\n  referenceSpaceType) {\n    this.element = element;\n    this.sessionMode = sessionMode;\n    this.referenceSpaceType = referenceSpaceType;\n  }\n  /**\r\n   * Extendable function which can be used to update the button's visuals when the state changes\r\n   * @param activeButton the current active button in the UI\r\n   */\n\n\n  WebXREnterExitUIButton.prototype.update = function (activeButton) {};\n\n  return WebXREnterExitUIButton;\n}();\n\nexport { WebXREnterExitUIButton };\n/**\r\n * Options to create the webXR UI\r\n */\n\nvar WebXREnterExitUIOptions =\n/** @class */\nfunction () {\n  function WebXREnterExitUIOptions() {}\n\n  return WebXREnterExitUIOptions;\n}();\n\nexport { WebXREnterExitUIOptions };\n/**\r\n * UI to allow the user to enter/exit XR mode\r\n */\n\nvar WebXREnterExitUI =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param scene babylon scene object to use\r\n   * @param options (read-only) version of the options passed to this UI\r\n   */\n  function WebXREnterExitUI(scene,\n  /** version of the options passed to this UI */\n  options) {\n    var _this = this;\n\n    this.scene = scene;\n    this.options = options;\n    this._activeButton = null;\n    this._buttons = [];\n    /**\r\n     * Fired every time the active button is changed.\r\n     *\r\n     * When xr is entered via a button that launches xr that button will be the callback parameter\r\n     *\r\n     * When exiting xr the callback parameter will be null)\r\n     */\n\n    this.activeButtonChangedObservable = new Observable();\n    this.overlay = document.createElement(\"div\");\n    this.overlay.classList.add(\"xr-button-overlay\");\n    this.overlay.style.cssText = \"z-index:11;position: absolute; right: 20px;bottom: 50px;\"; // if served over HTTP, warn people.\n    // Hopefully the browsers will catch up\n\n    if (typeof window !== \"undefined\") {\n      if (window.location && window.location.protocol === \"http:\") {\n        Tools.Warn(\"WebXR can only be served over HTTPS\");\n      }\n    }\n\n    if (options.customButtons) {\n      this._buttons = options.customButtons;\n    } else {\n      var sessionMode = options.sessionMode || \"immersive-vr\";\n      var referenceSpaceType = options.referenceSpaceType || \"local-floor\";\n      var url = typeof SVGSVGElement === \"undefined\" ? \"https://cdn.babylonjs.com/Assets/vrButton.png\" : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\n      var css = \".babylonVRicon { color: #868686; border-color: #868686; border-style: solid; margin-left: 10px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" + url + \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\n      css += '.babylonVRicon.vrdisplaypresenting { background-image: none;} .vrdisplaypresenting::after { content: \"EXIT\"} .xr-error::after { content: \"ERROR\"}';\n      var style = document.createElement(\"style\");\n      style.appendChild(document.createTextNode(css));\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      var hmdBtn = document.createElement(\"button\");\n      hmdBtn.className = \"babylonVRicon\";\n      hmdBtn.title = sessionMode + \" - \" + referenceSpaceType;\n\n      this._buttons.push(new WebXREnterExitUIButton(hmdBtn, sessionMode, referenceSpaceType));\n\n      this._buttons[this._buttons.length - 1].update = function (activeButton) {\n        this.element.style.display = activeButton === null || activeButton === this ? \"\" : \"none\";\n        hmdBtn.className = \"babylonVRicon\" + (activeButton === this ? \" vrdisplaypresenting\" : \"\");\n      };\n\n      this._updateButtons(null);\n    }\n\n    var renderCanvas = scene.getEngine().getInputElement();\n\n    if (renderCanvas && renderCanvas.parentNode) {\n      renderCanvas.parentNode.appendChild(this.overlay);\n      scene.onDisposeObservable.addOnce(function () {\n        _this.dispose();\n      });\n    }\n  }\n  /**\r\n   * Creates UI to allow the user to enter/exit XR mode\r\n   * @param scene the scene to add the ui to\r\n   * @param helper the xr experience helper to enter/exit xr with\r\n   * @param options options to configure the UI\r\n   * @returns the created ui\r\n   */\n\n\n  WebXREnterExitUI.CreateAsync = function (scene, helper, options) {\n    var _this = this;\n\n    var ui = new WebXREnterExitUI(scene, options);\n\n    var supportedPromises = ui._buttons.map(function (btn) {\n      return helper.sessionManager.isSessionSupportedAsync(btn.sessionMode);\n    });\n\n    helper.onStateChangedObservable.add(function (state) {\n      if (state == WebXRState.NOT_IN_XR) {\n        ui._updateButtons(null);\n      }\n    });\n    return Promise.all(supportedPromises).then(function (results) {\n      results.forEach(function (supported, i) {\n        if (supported) {\n          ui.overlay.appendChild(ui._buttons[i].element);\n\n          ui._buttons[i].element.onclick = function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var e_1, element, prevTitle;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!(helper.state == WebXRState.IN_XR)) return [3\n                    /*break*/\n                    , 2];\n                    return [4\n                    /*yield*/\n                    , helper.exitXRAsync()];\n\n                  case 1:\n                    _a.sent();\n\n                    ui._updateButtons(null);\n\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case 2:\n                    if (!(helper.state == WebXRState.NOT_IN_XR)) return [3\n                    /*break*/\n                    , 6];\n                    if (!options.renderTarget) return [3\n                    /*break*/\n                    , 6];\n                    _a.label = 3;\n\n                  case 3:\n                    _a.trys.push([3, 5,, 6]);\n\n                    return [4\n                    /*yield*/\n                    , helper.enterXRAsync(ui._buttons[i].sessionMode, ui._buttons[i].referenceSpaceType, options.renderTarget, {\n                      optionalFeatures: options.optionalFeatures,\n                      requiredFeatures: options.requiredFeatures\n                    })];\n\n                  case 4:\n                    _a.sent();\n\n                    ui._updateButtons(ui._buttons[i]);\n\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case 5:\n                    e_1 = _a.sent(); // make sure button is visible\n\n                    ui._updateButtons(null);\n\n                    element = ui._buttons[i].element;\n                    prevTitle = element.title;\n                    element.title = \"Error entering XR session : \" + prevTitle;\n                    element.classList.add(\"xr-error\");\n\n                    if (options.onError) {\n                      options.onError(e_1);\n                    }\n\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case 6:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          };\n        } else {\n          Tools.Warn(\"Session mode \\\"\" + ui._buttons[i].sessionMode + \"\\\" not supported in browser\");\n        }\n      });\n      return ui;\n    });\n  };\n  /**\r\n   * Disposes of the XR UI component\r\n   */\n\n\n  WebXREnterExitUI.prototype.dispose = function () {\n    var renderCanvas = this.scene.getEngine().getInputElement();\n\n    if (renderCanvas && renderCanvas.parentNode && renderCanvas.parentNode.contains(this.overlay)) {\n      renderCanvas.parentNode.removeChild(this.overlay);\n    }\n\n    this.activeButtonChangedObservable.clear();\n  };\n\n  WebXREnterExitUI.prototype._updateButtons = function (activeButton) {\n    var _this = this;\n\n    this._activeButton = activeButton;\n\n    this._buttons.forEach(function (b) {\n      b.update(_this._activeButton);\n    });\n\n    this.activeButtonChangedObservable.notifyObservers(this._activeButton);\n  };\n\n  return WebXREnterExitUI;\n}();\n\nexport { WebXREnterExitUI };","map":{"version":3,"sources":["../../../sourceES6/core/XR/webXREnterExitUI.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { IDisposable, Scene } from \"../scene\";\r\nimport { WebXRExperienceHelper } from \"./webXRExperienceHelper\";\r\nimport { WebXRState, WebXRRenderTarget } from \"./webXRTypes\";\r\nimport { Tools } from \"../Misc/tools\";\r\n/**\r\n * Button which can be used to enter a different mode of XR\r\n */\r\nexport class WebXREnterExitUIButton {\r\n    /**\r\n     * Creates a WebXREnterExitUIButton\r\n     * @param element button element\r\n     * @param sessionMode XR initialization session mode\r\n     * @param referenceSpaceType the type of reference space to be used\r\n     */\r\n    constructor(\r\n        /** button element */\r\n        public element: HTMLElement,\r\n        /** XR initialization options for the button */\r\n        public sessionMode: XRSessionMode,\r\n        /** Reference space type */\r\n        public referenceSpaceType: XRReferenceSpaceType\r\n    ) {}\r\n\r\n    /**\r\n     * Extendable function which can be used to update the button's visuals when the state changes\r\n     * @param activeButton the current active button in the UI\r\n     */\r\n    public update(activeButton: Nullable<WebXREnterExitUIButton>) {}\r\n}\r\n\r\n/**\r\n * Options to create the webXR UI\r\n */\r\nexport class WebXREnterExitUIOptions {\r\n    /**\r\n     * User provided buttons to enable/disable WebXR. The system will provide default if not set\r\n     */\r\n    customButtons?: Array<WebXREnterExitUIButton>;\r\n    /**\r\n     * A reference space type to use when creating the default button.\r\n     * Default is local-floor\r\n     */\r\n    referenceSpaceType?: XRReferenceSpaceType;\r\n    /**\r\n     * Context to enter xr with\r\n     */\r\n    renderTarget?: Nullable<WebXRRenderTarget>;\r\n    /**\r\n     * A session mode to use when creating the default button.\r\n     * Default is immersive-vr\r\n     */\r\n    sessionMode?: XRSessionMode;\r\n\r\n    /**\r\n     * A list of optional features to init the session with\r\n     */\r\n    optionalFeatures?: string[];\r\n\r\n    /**\r\n     * A list of optional features to init the session with\r\n     */\r\n    requiredFeatures?: string[];\r\n\r\n    /**\r\n     * If defined, this function will be executed if the UI encounters an error when entering XR\r\n     */\r\n    onError?: (error: any) => void;\r\n}\r\n/**\r\n * UI to allow the user to enter/exit XR mode\r\n */\r\nexport class WebXREnterExitUI implements IDisposable {\r\n    private _activeButton: Nullable<WebXREnterExitUIButton> = null;\r\n    private _buttons: Array<WebXREnterExitUIButton> = [];\r\n    /**\r\n     * The HTML Div Element to which buttons are added.\r\n     */\r\n    public readonly overlay: HTMLDivElement;\r\n\r\n    /**\r\n     * Fired every time the active button is changed.\r\n     *\r\n     * When xr is entered via a button that launches xr that button will be the callback parameter\r\n     *\r\n     * When exiting xr the callback parameter will be null)\r\n     */\r\n    public activeButtonChangedObservable = new Observable<Nullable<WebXREnterExitUIButton>>();\r\n\r\n    /**\r\n     *\r\n     * @param scene babylon scene object to use\r\n     * @param options (read-only) version of the options passed to this UI\r\n     */\r\n    private constructor(\r\n        private scene: Scene,\r\n        /** version of the options passed to this UI */\r\n        public options: WebXREnterExitUIOptions\r\n    ) {\r\n        this.overlay = document.createElement(\"div\");\r\n        this.overlay.classList.add(\"xr-button-overlay\");\r\n        this.overlay.style.cssText = \"z-index:11;position: absolute; right: 20px;bottom: 50px;\";\r\n\r\n        // if served over HTTP, warn people.\r\n        // Hopefully the browsers will catch up\r\n        if (typeof window !== \"undefined\") {\r\n            if (window.location && window.location.protocol === \"http:\") {\r\n                Tools.Warn(\"WebXR can only be served over HTTPS\");\r\n            }\r\n        }\r\n\r\n        if (options.customButtons) {\r\n            this._buttons = options.customButtons;\r\n        } else {\r\n            const sessionMode = options.sessionMode || \"immersive-vr\";\r\n            const referenceSpaceType = options.referenceSpaceType || \"local-floor\";\r\n            const url =\r\n                typeof SVGSVGElement === \"undefined\"\r\n                    ? \"https://cdn.babylonjs.com/Assets/vrButton.png\"\r\n                    : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\r\n            var css =\r\n                \".babylonVRicon { color: #868686; border-color: #868686; border-style: solid; margin-left: 10px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" +\r\n                url +\r\n                \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\r\n            css += '.babylonVRicon.vrdisplaypresenting { background-image: none;} .vrdisplaypresenting::after { content: \"EXIT\"} .xr-error::after { content: \"ERROR\"}';\r\n\r\n            var style = document.createElement(\"style\");\r\n            style.appendChild(document.createTextNode(css));\r\n            document.getElementsByTagName(\"head\")[0].appendChild(style);\r\n            var hmdBtn = document.createElement(\"button\");\r\n            hmdBtn.className = \"babylonVRicon\";\r\n            hmdBtn.title = `${sessionMode} - ${referenceSpaceType}`;\r\n            this._buttons.push(new WebXREnterExitUIButton(hmdBtn, sessionMode, referenceSpaceType));\r\n            this._buttons[this._buttons.length - 1].update = function (activeButton: WebXREnterExitUIButton) {\r\n                this.element.style.display = activeButton === null || activeButton === this ? \"\" : \"none\";\r\n                hmdBtn.className = \"babylonVRicon\" + (activeButton === this ? \" vrdisplaypresenting\" : \"\");\r\n            };\r\n            this._updateButtons(null);\r\n        }\r\n\r\n        var renderCanvas = scene.getEngine().getInputElement();\r\n        if (renderCanvas && renderCanvas.parentNode) {\r\n            renderCanvas.parentNode.appendChild(this.overlay);\r\n            scene.onDisposeObservable.addOnce(() => {\r\n                this.dispose();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates UI to allow the user to enter/exit XR mode\r\n     * @param scene the scene to add the ui to\r\n     * @param helper the xr experience helper to enter/exit xr with\r\n     * @param options options to configure the UI\r\n     * @returns the created ui\r\n     */\r\n    public static CreateAsync(scene: Scene, helper: WebXRExperienceHelper, options: WebXREnterExitUIOptions): Promise<WebXREnterExitUI> {\r\n        var ui = new WebXREnterExitUI(scene, options);\r\n        var supportedPromises = ui._buttons.map((btn) => {\r\n            return helper.sessionManager.isSessionSupportedAsync(btn.sessionMode);\r\n        });\r\n        helper.onStateChangedObservable.add((state) => {\r\n            if (state == WebXRState.NOT_IN_XR) {\r\n                ui._updateButtons(null);\r\n            }\r\n        });\r\n        return Promise.all(supportedPromises).then((results) => {\r\n            results.forEach((supported, i) => {\r\n                if (supported) {\r\n                    ui.overlay.appendChild(ui._buttons[i].element);\r\n                    ui._buttons[i].element.onclick = async () => {\r\n                        if (helper.state == WebXRState.IN_XR) {\r\n                            await helper.exitXRAsync();\r\n                            ui._updateButtons(null);\r\n                        } else if (helper.state == WebXRState.NOT_IN_XR) {\r\n                            if (options.renderTarget) {\r\n                                try {\r\n                                    await helper.enterXRAsync(ui._buttons[i].sessionMode, ui._buttons[i].referenceSpaceType, options.renderTarget, { optionalFeatures: options.optionalFeatures, requiredFeatures: options.requiredFeatures });\r\n                                    ui._updateButtons(ui._buttons[i]);\r\n                                } catch (e) {\r\n                                    // make sure button is visible\r\n                                    ui._updateButtons(null);\r\n                                    const element = ui._buttons[i].element;\r\n                                    const prevTitle = element.title;\r\n                                    element.title = \"Error entering XR session : \" + prevTitle;\r\n                                    element.classList.add(\"xr-error\");\r\n                                    if (options.onError) {\r\n                                        options.onError(e);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n                } else {\r\n                    Tools.Warn(`Session mode \"${ui._buttons[i].sessionMode}\" not supported in browser`);\r\n                }\r\n            });\r\n            return ui;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disposes of the XR UI component\r\n     */\r\n    public dispose() {\r\n        var renderCanvas = this.scene.getEngine().getInputElement();\r\n        if (renderCanvas && renderCanvas.parentNode && renderCanvas.parentNode.contains(this.overlay)) {\r\n            renderCanvas.parentNode.removeChild(this.overlay);\r\n        }\r\n        this.activeButtonChangedObservable.clear();\r\n    }\r\n\r\n    private _updateButtons(activeButton: Nullable<WebXREnterExitUIButton>) {\r\n        this._activeButton = activeButton;\r\n        this._buttons.forEach((b) => {\r\n            b.update(this._activeButton);\r\n        });\r\n        this.activeButtonChangedObservable.notifyObservers(this._activeButton);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}