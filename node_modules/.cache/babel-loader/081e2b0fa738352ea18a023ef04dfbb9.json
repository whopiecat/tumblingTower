{"ast":null,"code":"import { Vector3, TmpVectors, Quaternion, Vector4, Vector2 } from \"../Maths/math.vector\";\nimport { Color4 } from '../Maths/math.color';\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\nimport { BoundingSphere } from \"../Culling/boundingSphere\";\nimport { AbstractMesh } from '../Meshes/abstractMesh';\n/**\r\n * Represents one particle of a solid particle system.\r\n */\n\nvar SolidParticle =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a Solid Particle object.\r\n   * Don't create particles manually, use instead the Solid Particle System internal tools like _addParticle()\r\n   * @param particleIndex (integer) is the particle index in the Solid Particle System pool.\r\n   * @param particleId (integer) is the particle identifier. Unless some particles are removed from the SPS, it's the same value than the particle idx.\r\n   * @param positionIndex (integer) is the starting index of the particle vertices in the SPS \"positions\" array.\r\n   * @param indiceIndex (integer) is the starting index of the particle indices in the SPS \"indices\" array.\r\n   * @param model (ModelShape) is a reference to the model shape on what the particle is designed.\r\n   * @param shapeId (integer) is the model shape identifier in the SPS.\r\n   * @param idxInShape (integer) is the index of the particle in the current model (ex: the 10th box of addShape(box, 30))\r\n   * @param sps defines the sps it is associated to\r\n   * @param modelBoundingInfo is the reference to the model BoundingInfo used for intersection computations.\r\n   * @param materialIndex is the particle material identifier (integer) when the MultiMaterials are enabled in the SPS.\r\n   */\n  function SolidParticle(particleIndex, particleId, positionIndex, indiceIndex, model, shapeId, idxInShape, sps, modelBoundingInfo, materialIndex) {\n    if (modelBoundingInfo === void 0) {\n      modelBoundingInfo = null;\n    }\n\n    if (materialIndex === void 0) {\n      materialIndex = null;\n    }\n    /**\r\n     * particle global index\r\n     */\n\n\n    this.idx = 0;\n    /**\r\n     * particle identifier\r\n     */\n\n    this.id = 0;\n    /**\r\n     * The color of the particle\r\n     */\n\n    this.color = new Color4(1.0, 1.0, 1.0, 1.0);\n    /**\r\n     * The world space position of the particle.\r\n     */\n\n    this.position = Vector3.Zero();\n    /**\r\n     * The world space rotation of the particle. (Not use if rotationQuaternion is set)\r\n     */\n\n    this.rotation = Vector3.Zero();\n    /**\r\n     * The scaling of the particle.\r\n     */\n\n    this.scaling = Vector3.One();\n    /**\r\n     * The uvs of the particle.\r\n     */\n\n    this.uvs = new Vector4(0.0, 0.0, 1.0, 1.0);\n    /**\r\n     * The current speed of the particle.\r\n     */\n\n    this.velocity = Vector3.Zero();\n    /**\r\n     * The pivot point in the particle local space.\r\n     */\n\n    this.pivot = Vector3.Zero();\n    /**\r\n     * Must the particle be translated from its pivot point in its local space ?\r\n     * In this case, the pivot point is set at the origin of the particle local space and the particle is translated.\r\n     * Default : false\r\n     */\n\n    this.translateFromPivot = false;\n    /**\r\n     * Is the particle active or not ?\r\n     */\n\n    this.alive = true;\n    /**\r\n     * Is the particle visible or not ?\r\n     */\n\n    this.isVisible = true;\n    /**\r\n     * Index of this particle in the global \"positions\" array (Internal use)\r\n     * @hidden\r\n     */\n\n    this._pos = 0;\n    /**\r\n     * @hidden Index of this particle in the global \"indices\" array (Internal use)\r\n     */\n\n    this._ind = 0;\n    /**\r\n     * ModelShape id of this particle\r\n     */\n\n    this.shapeId = 0;\n    /**\r\n     * Index of the particle in its shape id\r\n     */\n\n    this.idxInShape = 0;\n    /**\r\n     * @hidden Still set as invisible in order to skip useless computations (Internal use)\r\n     */\n\n    this._stillInvisible = false;\n    /**\r\n     * @hidden Last computed particle rotation matrix\r\n     */\n\n    this._rotationMatrix = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];\n    /**\r\n     * Parent particle Id, if any.\r\n     * Default null.\r\n     */\n\n    this.parentId = null;\n    /**\r\n     * The particle material identifier (integer) when MultiMaterials are enabled in the SPS.\r\n     */\n\n    this.materialIndex = null;\n    /**\r\n     * Custom object or properties.\r\n     */\n\n    this.props = null;\n    /**\r\n     * The culling strategy to use to check whether the solid particle must be culled or not when using isInFrustum().\r\n     * The possible values are :\r\n     * - AbstractMesh.CULLINGSTRATEGY_STANDARD\r\n     * - AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY\r\n     * The default value for solid particles is AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\r\n     * Please read each static variable documentation in the class AbstractMesh to get details about the culling process.\r\n     * */\n\n    this.cullingStrategy = AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\n    /**\r\n     * @hidden Internal global position in the SPS.\r\n     */\n\n    this._globalPosition = Vector3.Zero();\n    this.idx = particleIndex;\n    this.id = particleId;\n    this._pos = positionIndex;\n    this._ind = indiceIndex;\n    this._model = model;\n    this.shapeId = shapeId;\n    this.idxInShape = idxInShape;\n    this._sps = sps;\n\n    if (modelBoundingInfo) {\n      this._modelBoundingInfo = modelBoundingInfo;\n      this._boundingInfo = new BoundingInfo(modelBoundingInfo.minimum, modelBoundingInfo.maximum);\n    }\n\n    if (materialIndex !== null) {\n      this.materialIndex = materialIndex;\n    }\n  }\n  /**\r\n   * Copies the particle property values into the existing target : position, rotation, scaling, uvs, colors, pivot, parent, visibility, alive\r\n   * @param target the particle target\r\n   * @returns the current particle\r\n   */\n\n\n  SolidParticle.prototype.copyToRef = function (target) {\n    target.position.copyFrom(this.position);\n    target.rotation.copyFrom(this.rotation);\n\n    if (this.rotationQuaternion) {\n      if (target.rotationQuaternion) {\n        target.rotationQuaternion.copyFrom(this.rotationQuaternion);\n      } else {\n        target.rotationQuaternion = this.rotationQuaternion.clone();\n      }\n    }\n\n    target.scaling.copyFrom(this.scaling);\n\n    if (this.color) {\n      if (target.color) {\n        target.color.copyFrom(this.color);\n      } else {\n        target.color = this.color.clone();\n      }\n    }\n\n    target.uvs.copyFrom(this.uvs);\n    target.velocity.copyFrom(this.velocity);\n    target.pivot.copyFrom(this.pivot);\n    target.translateFromPivot = this.translateFromPivot;\n    target.alive = this.alive;\n    target.isVisible = this.isVisible;\n    target.parentId = this.parentId;\n    target.cullingStrategy = this.cullingStrategy;\n\n    if (this.materialIndex !== null) {\n      target.materialIndex = this.materialIndex;\n    }\n\n    return this;\n  };\n\n  Object.defineProperty(SolidParticle.prototype, \"scale\", {\n    /**\r\n     * Legacy support, changed scale to scaling\r\n     */\n    get: function () {\n      return this.scaling;\n    },\n\n    /**\r\n     * Legacy support, changed scale to scaling\r\n     */\n    set: function (scale) {\n      this.scaling = scale;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SolidParticle.prototype, \"quaternion\", {\n    /**\r\n     * Legacy support, changed quaternion to rotationQuaternion\r\n     */\n    get: function () {\n      return this.rotationQuaternion;\n    },\n\n    /**\r\n     * Legacy support, changed quaternion to rotationQuaternion\r\n     */\n    set: function (q) {\n      this.rotationQuaternion = q;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns a boolean. True if the particle intersects another particle or another mesh, else false.\r\n   * The intersection is computed on the particle bounding sphere and Axis Aligned Bounding Box (AABB)\r\n   * @param target is the object (solid particle or mesh) what the intersection is computed against.\r\n   * @returns true if it intersects\r\n   */\n\n  SolidParticle.prototype.intersectsMesh = function (target) {\n    if (!this._boundingInfo || !target._boundingInfo) {\n      return false;\n    }\n\n    if (this._sps._bSphereOnly) {\n      return BoundingSphere.Intersects(this._boundingInfo.boundingSphere, target._boundingInfo.boundingSphere);\n    }\n\n    return this._boundingInfo.intersects(target._boundingInfo, false);\n  };\n  /**\r\n   * Returns `true` if the solid particle is within the frustum defined by the passed array of planes.\r\n   * A particle is in the frustum if its bounding box intersects the frustum\r\n   * @param frustumPlanes defines the frustum to test\r\n   * @returns true if the particle is in the frustum planes\r\n   */\n\n\n  SolidParticle.prototype.isInFrustum = function (frustumPlanes) {\n    return this._boundingInfo !== null && this._boundingInfo.isInFrustum(frustumPlanes, this.cullingStrategy);\n  };\n  /**\r\n   * get the rotation matrix of the particle\r\n   * @hidden\r\n   */\n\n\n  SolidParticle.prototype.getRotationMatrix = function (m) {\n    var quaternion;\n\n    if (this.rotationQuaternion) {\n      quaternion = this.rotationQuaternion;\n    } else {\n      quaternion = TmpVectors.Quaternion[0];\n      var rotation = this.rotation;\n      Quaternion.RotationYawPitchRollToRef(rotation.y, rotation.x, rotation.z, quaternion);\n    }\n\n    quaternion.toRotationMatrix(m);\n  };\n\n  return SolidParticle;\n}();\n\nexport { SolidParticle };\n/**\r\n * Represents the shape of the model used by one particle of a solid particle system.\r\n * SPS internal tool, don't use it manually.\r\n */\n\nvar ModelShape =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a ModelShape object. This is an internal simplified reference to a mesh used as for a model to replicate particles from by the SPS.\r\n   * SPS internal tool, don't use it manually.\r\n   * @hidden\r\n   */\n  function ModelShape(id, shape, indices, normals, colors, shapeUV, posFunction, vtxFunction, material) {\n    /**\r\n     * length of the shape in the model indices array (internal use)\r\n     * @hidden\r\n     */\n    this._indicesLength = 0;\n    this.shapeID = id;\n    this._shape = shape;\n    this._indices = indices;\n    this._indicesLength = indices.length;\n    this._shapeUV = shapeUV;\n    this._shapeColors = colors;\n    this._normals = normals;\n    this._positionFunction = posFunction;\n    this._vertexFunction = vtxFunction;\n    this._material = material;\n  }\n\n  return ModelShape;\n}();\n\nexport { ModelShape };\n/**\r\n * Represents a Depth Sorted Particle in the solid particle system.\r\n * @hidden\r\n */\n\nvar DepthSortedParticle =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new sorted particle\r\n   * @param materialIndex\r\n   */\n  function DepthSortedParticle(idx, ind, indLength, materialIndex) {\n    /**\r\n     * Particle index\r\n     */\n    this.idx = 0;\n    /**\r\n     * Index of the particle in the \"indices\" array\r\n     */\n\n    this.ind = 0;\n    /**\r\n     * Length of the particle shape in the \"indices\" array\r\n     */\n\n    this.indicesLength = 0;\n    /**\r\n     * Squared distance from the particle to the camera\r\n     */\n\n    this.sqDistance = 0.0;\n    /**\r\n     * Material index when used with MultiMaterials\r\n     */\n\n    this.materialIndex = 0;\n    this.idx = idx;\n    this.ind = ind;\n    this.indicesLength = indLength;\n    this.materialIndex = materialIndex;\n  }\n\n  return DepthSortedParticle;\n}();\n\nexport { DepthSortedParticle };\n/**\r\n * Represents a solid particle vertex\r\n */\n\nvar SolidParticleVertex =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new solid particle vertex\r\n   */\n  function SolidParticleVertex() {\n    this.position = Vector3.Zero();\n    this.color = new Color4(1.0, 1.0, 1.0, 1.0);\n    this.uv = Vector2.Zero();\n  }\n\n  Object.defineProperty(SolidParticleVertex.prototype, \"x\", {\n    // Getters and Setters for back-compatibility\n\n    /** Vertex x coordinate */\n    get: function () {\n      return this.position.x;\n    },\n    set: function (val) {\n      this.position.x = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SolidParticleVertex.prototype, \"y\", {\n    /** Vertex y coordinate */\n    get: function () {\n      return this.position.y;\n    },\n    set: function (val) {\n      this.position.y = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SolidParticleVertex.prototype, \"z\", {\n    /** Vertex z coordinate */\n    get: function () {\n      return this.position.z;\n    },\n    set: function (val) {\n      this.position.z = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SolidParticleVertex;\n}();\n\nexport { SolidParticleVertex };","map":{"version":3,"sources":["../../../sourceES6/core/Particles/solidParticle.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Vector3, Matrix, TmpVectors, Quaternion, Vector4, Vector2 } from \"../Maths/math.vector\";\r\nimport { Color4 } from '../Maths/math.color';\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport { BoundingSphere } from \"../Culling/boundingSphere\";\r\nimport { SolidParticleSystem } from \"./solidParticleSystem\";\r\nimport { AbstractMesh } from '../Meshes/abstractMesh';\r\nimport { Plane } from '../Maths/math.plane';\r\nimport { Material } from '../Materials/material';\r\n/**\r\n * Represents one particle of a solid particle system.\r\n */\r\nexport class SolidParticle {\r\n    /**\r\n     * particle global index\r\n     */\r\n    public idx: number = 0;\r\n    /**\r\n     * particle identifier\r\n     */\r\n    public id: number = 0;\r\n    /**\r\n     * The color of the particle\r\n     */\r\n    public color: Nullable<Color4> = new Color4(1.0, 1.0, 1.0, 1.0);\r\n    /**\r\n     * The world space position of the particle.\r\n     */\r\n    public position: Vector3 = Vector3.Zero();\r\n    /**\r\n     * The world space rotation of the particle. (Not use if rotationQuaternion is set)\r\n     */\r\n    public rotation: Vector3 = Vector3.Zero();\r\n    /**\r\n     * The world space rotation quaternion of the particle.\r\n     */\r\n    public rotationQuaternion: Nullable<Quaternion>;\r\n    /**\r\n     * The scaling of the particle.\r\n     */\r\n    public scaling: Vector3 = Vector3.One();\r\n    /**\r\n     * The uvs of the particle.\r\n     */\r\n    public uvs: Vector4 = new Vector4(0.0, 0.0, 1.0, 1.0);\r\n    /**\r\n     * The current speed of the particle.\r\n     */\r\n    public velocity: Vector3 = Vector3.Zero();\r\n    /**\r\n     * The pivot point in the particle local space.\r\n     */\r\n    public pivot: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Must the particle be translated from its pivot point in its local space ?\r\n     * In this case, the pivot point is set at the origin of the particle local space and the particle is translated.\r\n     * Default : false\r\n     */\r\n    public translateFromPivot: boolean = false;\r\n    /**\r\n     * Is the particle active or not ?\r\n     */\r\n    public alive: boolean = true;\r\n    /**\r\n     * Is the particle visible or not ?\r\n     */\r\n    public isVisible: boolean = true;\r\n    /**\r\n     * Index of this particle in the global \"positions\" array (Internal use)\r\n     * @hidden\r\n     */\r\n    public _pos: number = 0;\r\n    /**\r\n     * @hidden Index of this particle in the global \"indices\" array (Internal use)\r\n     */\r\n    public _ind: number = 0;\r\n    /**\r\n     * @hidden ModelShape of this particle (Internal use)\r\n     */\r\n    public _model: ModelShape;\r\n    /**\r\n     * ModelShape id of this particle\r\n     */\r\n    public shapeId: number = 0;\r\n    /**\r\n     * Index of the particle in its shape id\r\n     */\r\n    public idxInShape: number = 0;\r\n    /**\r\n     * @hidden Reference to the shape model BoundingInfo object (Internal use)\r\n     */\r\n    public _modelBoundingInfo: BoundingInfo;\r\n    /**\r\n     * @hidden Particle BoundingInfo object (Internal use)\r\n     */\r\n    public _boundingInfo: BoundingInfo;\r\n    /**\r\n     * @hidden Reference to the SPS what the particle belongs to (Internal use)\r\n     */\r\n    public _sps: SolidParticleSystem;\r\n    /**\r\n     * @hidden Still set as invisible in order to skip useless computations (Internal use)\r\n     */\r\n    public _stillInvisible: boolean = false;\r\n    /**\r\n     * @hidden Last computed particle rotation matrix\r\n     */\r\n    public _rotationMatrix: number[] = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];\r\n    /**\r\n     * Parent particle Id, if any.\r\n     * Default null.\r\n     */\r\n    public parentId: Nullable<number> = null;\r\n    /**\r\n     * The particle material identifier (integer) when MultiMaterials are enabled in the SPS.\r\n     */\r\n    public materialIndex: Nullable<number> = null;\r\n    /**\r\n     * Custom object or properties.\r\n     */\r\n    public props: Nullable<any> = null;\r\n    /**\r\n     * The culling strategy to use to check whether the solid particle must be culled or not when using isInFrustum().\r\n     * The possible values are :\r\n     * - AbstractMesh.CULLINGSTRATEGY_STANDARD\r\n     * - AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY\r\n     * The default value for solid particles is AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\r\n     * Please read each static variable documentation in the class AbstractMesh to get details about the culling process.\r\n     * */\r\n    public cullingStrategy = AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\r\n\r\n    /**\r\n     * @hidden Internal global position in the SPS.\r\n     */\r\n    public _globalPosition: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a Solid Particle object.\r\n     * Don't create particles manually, use instead the Solid Particle System internal tools like _addParticle()\r\n     * @param particleIndex (integer) is the particle index in the Solid Particle System pool.\r\n     * @param particleId (integer) is the particle identifier. Unless some particles are removed from the SPS, it's the same value than the particle idx.\r\n     * @param positionIndex (integer) is the starting index of the particle vertices in the SPS \"positions\" array.\r\n     * @param indiceIndex (integer) is the starting index of the particle indices in the SPS \"indices\" array.\r\n     * @param model (ModelShape) is a reference to the model shape on what the particle is designed.\r\n     * @param shapeId (integer) is the model shape identifier in the SPS.\r\n     * @param idxInShape (integer) is the index of the particle in the current model (ex: the 10th box of addShape(box, 30))\r\n     * @param sps defines the sps it is associated to\r\n     * @param modelBoundingInfo is the reference to the model BoundingInfo used for intersection computations.\r\n     * @param materialIndex is the particle material identifier (integer) when the MultiMaterials are enabled in the SPS.\r\n     */\r\n    constructor(particleIndex: number, particleId: number, positionIndex: number, indiceIndex: number, model: Nullable<ModelShape>, shapeId: number, idxInShape: number, sps: SolidParticleSystem, modelBoundingInfo: Nullable<BoundingInfo> = null, materialIndex: Nullable<number> = null) {\r\n        this.idx = particleIndex;\r\n        this.id = particleId;\r\n        this._pos = positionIndex;\r\n        this._ind = indiceIndex;\r\n        this._model = <ModelShape>model;\r\n        this.shapeId = shapeId;\r\n        this.idxInShape = idxInShape;\r\n        this._sps = sps;\r\n        if (modelBoundingInfo) {\r\n            this._modelBoundingInfo = modelBoundingInfo;\r\n            this._boundingInfo = new BoundingInfo(modelBoundingInfo.minimum, modelBoundingInfo.maximum);\r\n        }\r\n        if (materialIndex !== null) {\r\n            this.materialIndex = materialIndex;\r\n        }\r\n    }\r\n    /**\r\n     * Copies the particle property values into the existing target : position, rotation, scaling, uvs, colors, pivot, parent, visibility, alive\r\n     * @param target the particle target\r\n     * @returns the current particle\r\n     */\r\n    public copyToRef(target: SolidParticle): SolidParticle {\r\n        target.position.copyFrom(this.position);\r\n        target.rotation.copyFrom(this.rotation);\r\n        if (this.rotationQuaternion) {\r\n            if (target.rotationQuaternion) {\r\n                target.rotationQuaternion!.copyFrom(this.rotationQuaternion!);\r\n            }\r\n            else {\r\n                target.rotationQuaternion = this.rotationQuaternion.clone();\r\n            }\r\n        }\r\n        target.scaling.copyFrom(this.scaling);\r\n        if (this.color) {\r\n            if (target.color) {\r\n                target.color!.copyFrom(this.color!);\r\n            }\r\n            else {\r\n                target.color = this.color.clone();\r\n            }\r\n        }\r\n        target.uvs.copyFrom(this.uvs);\r\n        target.velocity.copyFrom(this.velocity);\r\n        target.pivot.copyFrom(this.pivot);\r\n        target.translateFromPivot = this.translateFromPivot;\r\n        target.alive = this.alive;\r\n        target.isVisible = this.isVisible;\r\n        target.parentId = this.parentId;\r\n        target.cullingStrategy = this.cullingStrategy;\r\n        if (this.materialIndex !== null) {\r\n            target.materialIndex = this.materialIndex;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Legacy support, changed scale to scaling\r\n     */\r\n    public get scale(): Vector3 {\r\n        return this.scaling;\r\n    }\r\n\r\n    /**\r\n     * Legacy support, changed scale to scaling\r\n     */\r\n    public set scale(scale: Vector3) {\r\n        this.scaling = scale;\r\n    }\r\n\r\n    /**\r\n     * Legacy support, changed quaternion to rotationQuaternion\r\n     */\r\n    public get quaternion(): Nullable<Quaternion> {\r\n        return this.rotationQuaternion;\r\n    }\r\n\r\n    /**\r\n     * Legacy support, changed quaternion to rotationQuaternion\r\n     */\r\n    public set quaternion(q: Nullable<Quaternion>) {\r\n        this.rotationQuaternion = q;\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean. True if the particle intersects another particle or another mesh, else false.\r\n     * The intersection is computed on the particle bounding sphere and Axis Aligned Bounding Box (AABB)\r\n     * @param target is the object (solid particle or mesh) what the intersection is computed against.\r\n     * @returns true if it intersects\r\n     */\r\n    public intersectsMesh(target: Mesh | SolidParticle): boolean {\r\n        if (!this._boundingInfo || !target._boundingInfo) {\r\n            return false;\r\n        }\r\n        if (this._sps._bSphereOnly) {\r\n            return BoundingSphere.Intersects(this._boundingInfo.boundingSphere, target._boundingInfo.boundingSphere);\r\n        }\r\n        return this._boundingInfo.intersects(target._boundingInfo, false);\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the solid particle is within the frustum defined by the passed array of planes.\r\n     * A particle is in the frustum if its bounding box intersects the frustum\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the particle is in the frustum planes\r\n     */\r\n    public isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        return this._boundingInfo !== null && this._boundingInfo.isInFrustum(frustumPlanes, this.cullingStrategy);\r\n    }\r\n\r\n    /**\r\n     * get the rotation matrix of the particle\r\n     * @hidden\r\n     */\r\n    public getRotationMatrix(m: Matrix) {\r\n        let quaternion: Quaternion;\r\n        if (this.rotationQuaternion) {\r\n            quaternion = this.rotationQuaternion;\r\n        }\r\n        else {\r\n            quaternion = TmpVectors.Quaternion[0];\r\n            const rotation = this.rotation;\r\n            Quaternion.RotationYawPitchRollToRef(rotation.y, rotation.x, rotation.z, quaternion);\r\n        }\r\n\r\n        quaternion.toRotationMatrix(m);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the shape of the model used by one particle of a solid particle system.\r\n * SPS internal tool, don't use it manually.\r\n */\r\nexport class ModelShape {\r\n    /**\r\n     * The shape id\r\n     * @hidden\r\n     */\r\n    public shapeID: number;\r\n    /**\r\n     * flat array of model positions (internal use)\r\n     * @hidden\r\n     */\r\n    public _shape: Vector3[];\r\n    /**\r\n     * flat array of model UVs (internal use)\r\n     * @hidden\r\n     */\r\n    public _shapeUV: number[];\r\n    /**\r\n     * color array of the model\r\n     * @hidden\r\n     */\r\n    public _shapeColors: number[];\r\n    /**\r\n     * indices array of the model\r\n     * @hidden\r\n     */\r\n    public _indices: number[];\r\n    /**\r\n     * normals array of the model\r\n     * @hidden\r\n     */\r\n    public _normals: number[];\r\n    /**\r\n     * length of the shape in the model indices array (internal use)\r\n     * @hidden\r\n     */\r\n    public _indicesLength: number = 0;\r\n    /**\r\n     * Custom position function (internal use)\r\n     * @hidden\r\n     */\r\n    public _positionFunction: Nullable<(particle: SolidParticle, i: number, s: number) => void>;\r\n    /**\r\n     * Custom vertex function (internal use)\r\n     * @hidden\r\n     */\r\n    public _vertexFunction: Nullable<(particle: SolidParticle, vertex: Vector3, i: number) => void>;\r\n    /**\r\n     * Model material (internal use)\r\n     * @hidden\r\n     */\r\n    public _material: Nullable<Material>;\r\n\r\n    /**\r\n     * Creates a ModelShape object. This is an internal simplified reference to a mesh used as for a model to replicate particles from by the SPS.\r\n     * SPS internal tool, don't use it manually.\r\n     * @hidden\r\n     */\r\n    constructor(id: number, shape: Vector3[], indices: number[], normals: number[], colors: number[], shapeUV: number[],\r\n        posFunction: Nullable<(particle: SolidParticle, i: number, s: number) => void>, vtxFunction: Nullable<(particle: SolidParticle, vertex: Vector3, i: number) => void>,\r\n        material: Nullable<Material>) {\r\n        this.shapeID = id;\r\n        this._shape = shape;\r\n        this._indices = indices;\r\n        this._indicesLength = indices.length;\r\n        this._shapeUV = shapeUV;\r\n        this._shapeColors = colors;\r\n        this._normals = normals;\r\n        this._positionFunction = posFunction;\r\n        this._vertexFunction = vtxFunction;\r\n        this._material = material;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a Depth Sorted Particle in the solid particle system.\r\n * @hidden\r\n */\r\nexport class DepthSortedParticle {\r\n    /**\r\n     * Particle index\r\n     */\r\n    public idx: number = 0;\r\n    /**\r\n     * Index of the particle in the \"indices\" array\r\n     */\r\n    public ind: number = 0;\r\n    /**\r\n     * Length of the particle shape in the \"indices\" array\r\n     */\r\n    public indicesLength: number = 0;\r\n    /**\r\n     * Squared distance from the particle to the camera\r\n     */\r\n    public sqDistance: number = 0.0;\r\n    /**\r\n     * Material index when used with MultiMaterials\r\n     */\r\n    public materialIndex: number = 0;\r\n\r\n    /**\r\n     * Creates a new sorted particle\r\n     * @param materialIndex\r\n     */\r\n    constructor(idx: number, ind: number, indLength: number, materialIndex: number) {\r\n        this.idx = idx;\r\n        this.ind = ind;\r\n        this.indicesLength = indLength;\r\n        this.materialIndex = materialIndex;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a solid particle vertex\r\n */\r\nexport class SolidParticleVertex {\r\n    /**\r\n     * Vertex position\r\n     */\r\n    public position: Vector3;\r\n    /**\r\n     * Vertex color\r\n     */\r\n    public color: Color4;\r\n    /**\r\n     * Vertex UV\r\n     */\r\n    public uv: Vector2;\r\n    /**\r\n     * Creates a new solid particle vertex\r\n     */\r\n    constructor() {\r\n        this.position = Vector3.Zero();\r\n        this.color = new Color4(1.0, 1.0, 1.0, 1.0);\r\n        this.uv = Vector2.Zero();\r\n    }\r\n    // Getters and Setters for back-compatibility\r\n    /** Vertex x coordinate */\r\n    public get x(): number {\r\n        return this.position.x;\r\n    }\r\n    public set x(val: number) {\r\n        this.position.x = val;\r\n    }\r\n    /** Vertex y coordinate */\r\n    public get y(): number {\r\n        return this.position.y;\r\n    }\r\n    public set y(val: number) {\r\n        this.position.y = val;\r\n    }\r\n    /** Vertex z coordinate */\r\n    public get z(): number {\r\n        return this.position.z;\r\n    }\r\n    public set z(val: number) {\r\n        this.position.z = val;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}