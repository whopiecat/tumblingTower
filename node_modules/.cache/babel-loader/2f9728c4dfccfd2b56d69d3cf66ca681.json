{"ast":null,"code":"/**\r\n * @hidden\r\n **/\nvar StencilState =\n/** @class */\nfunction () {\n  function StencilState() {\n    this._isStencilTestDirty = false;\n    this._isStencilMaskDirty = false;\n    this._isStencilFuncDirty = false;\n    this._isStencilOpDirty = false;\n    this.reset();\n  }\n\n  Object.defineProperty(StencilState.prototype, \"isDirty\", {\n    get: function () {\n      return this._isStencilTestDirty || this._isStencilMaskDirty || this._isStencilFuncDirty || this._isStencilOpDirty;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilState.prototype, \"stencilFunc\", {\n    get: function () {\n      return this._stencilFunc;\n    },\n    set: function (value) {\n      if (this._stencilFunc === value) {\n        return;\n      }\n\n      this._stencilFunc = value;\n      this._isStencilFuncDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilState.prototype, \"stencilFuncRef\", {\n    get: function () {\n      return this._stencilFuncRef;\n    },\n    set: function (value) {\n      if (this._stencilFuncRef === value) {\n        return;\n      }\n\n      this._stencilFuncRef = value;\n      this._isStencilFuncDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilState.prototype, \"stencilFuncMask\", {\n    get: function () {\n      return this._stencilFuncMask;\n    },\n    set: function (value) {\n      if (this._stencilFuncMask === value) {\n        return;\n      }\n\n      this._stencilFuncMask = value;\n      this._isStencilFuncDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilState.prototype, \"stencilOpStencilFail\", {\n    get: function () {\n      return this._stencilOpStencilFail;\n    },\n    set: function (value) {\n      if (this._stencilOpStencilFail === value) {\n        return;\n      }\n\n      this._stencilOpStencilFail = value;\n      this._isStencilOpDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilState.prototype, \"stencilOpDepthFail\", {\n    get: function () {\n      return this._stencilOpDepthFail;\n    },\n    set: function (value) {\n      if (this._stencilOpDepthFail === value) {\n        return;\n      }\n\n      this._stencilOpDepthFail = value;\n      this._isStencilOpDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilState.prototype, \"stencilOpStencilDepthPass\", {\n    get: function () {\n      return this._stencilOpStencilDepthPass;\n    },\n    set: function (value) {\n      if (this._stencilOpStencilDepthPass === value) {\n        return;\n      }\n\n      this._stencilOpStencilDepthPass = value;\n      this._isStencilOpDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilState.prototype, \"stencilMask\", {\n    get: function () {\n      return this._stencilMask;\n    },\n    set: function (value) {\n      if (this._stencilMask === value) {\n        return;\n      }\n\n      this._stencilMask = value;\n      this._isStencilMaskDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilState.prototype, \"stencilTest\", {\n    get: function () {\n      return this._stencilTest;\n    },\n    set: function (value) {\n      if (this._stencilTest === value) {\n        return;\n      }\n\n      this._stencilTest = value;\n      this._isStencilTestDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StencilState.prototype.reset = function () {\n    this._stencilTest = false;\n    this._stencilMask = 0xFF;\n    this._stencilFunc = StencilState.ALWAYS;\n    this._stencilFuncRef = 1;\n    this._stencilFuncMask = 0xFF;\n    this._stencilOpStencilFail = StencilState.KEEP;\n    this._stencilOpDepthFail = StencilState.KEEP;\n    this._stencilOpStencilDepthPass = StencilState.REPLACE;\n    this._isStencilTestDirty = true;\n    this._isStencilMaskDirty = true;\n    this._isStencilFuncDirty = true;\n    this._isStencilOpDirty = true;\n  };\n\n  StencilState.prototype.apply = function (gl) {\n    if (!this.isDirty) {\n      return;\n    } // Stencil test\n\n\n    if (this._isStencilTestDirty) {\n      if (this.stencilTest) {\n        gl.enable(gl.STENCIL_TEST);\n      } else {\n        gl.disable(gl.STENCIL_TEST);\n      }\n\n      this._isStencilTestDirty = false;\n    } // Stencil mask\n\n\n    if (this._isStencilMaskDirty) {\n      gl.stencilMask(this.stencilMask);\n      this._isStencilMaskDirty = false;\n    } // Stencil func\n\n\n    if (this._isStencilFuncDirty) {\n      gl.stencilFunc(this.stencilFunc, this.stencilFuncRef, this.stencilFuncMask);\n      this._isStencilFuncDirty = false;\n    } // Stencil op\n\n\n    if (this._isStencilOpDirty) {\n      gl.stencilOp(this.stencilOpStencilFail, this.stencilOpDepthFail, this.stencilOpStencilDepthPass);\n      this._isStencilOpDirty = false;\n    }\n  };\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\n\n\n  StencilState.ALWAYS = 519;\n  /** Passed to stencilOperation to specify that stencil value must be kept */\n\n  StencilState.KEEP = 7680;\n  /** Passed to stencilOperation to specify that stencil value must be replaced */\n\n  StencilState.REPLACE = 7681;\n  return StencilState;\n}();\n\nexport { StencilState };","map":{"version":3,"sources":["../../../sourceES6/core/States/stencilState.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n/**\r\n * @hidden\r\n **/\r\nexport class StencilState {\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\r\n    public static readonly ALWAYS = 519;\r\n    /** Passed to stencilOperation to specify that stencil value must be kept */\r\n    public static readonly KEEP = 7680;\r\n    /** Passed to stencilOperation to specify that stencil value must be replaced */\r\n    public static readonly REPLACE = 7681;\r\n\r\n    private _isStencilTestDirty = false;\r\n    private _isStencilMaskDirty = false;\r\n    private _isStencilFuncDirty = false;\r\n    private _isStencilOpDirty = false;\r\n\r\n    private _stencilTest: boolean;\r\n\r\n    private _stencilMask: number;\r\n\r\n    private _stencilFunc: number;\r\n    private _stencilFuncRef: number;\r\n    private _stencilFuncMask: number;\r\n\r\n    private _stencilOpStencilFail: number;\r\n    private _stencilOpDepthFail: number;\r\n    private _stencilOpStencilDepthPass: number;\r\n\r\n    public get isDirty(): boolean {\r\n        return this._isStencilTestDirty || this._isStencilMaskDirty || this._isStencilFuncDirty || this._isStencilOpDirty;\r\n    }\r\n\r\n    public get stencilFunc(): number {\r\n        return this._stencilFunc;\r\n    }\r\n\r\n    public set stencilFunc(value: number) {\r\n        if (this._stencilFunc === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilFunc = value;\r\n        this._isStencilFuncDirty = true;\r\n    }\r\n\r\n    public get stencilFuncRef(): number {\r\n        return this._stencilFuncRef;\r\n    }\r\n\r\n    public set stencilFuncRef(value: number) {\r\n        if (this._stencilFuncRef === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilFuncRef = value;\r\n        this._isStencilFuncDirty = true;\r\n    }\r\n\r\n    public get stencilFuncMask(): number {\r\n        return this._stencilFuncMask;\r\n    }\r\n\r\n    public set stencilFuncMask(value: number) {\r\n        if (this._stencilFuncMask === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilFuncMask = value;\r\n        this._isStencilFuncDirty = true;\r\n    }\r\n\r\n    public get stencilOpStencilFail(): number {\r\n        return this._stencilOpStencilFail;\r\n    }\r\n\r\n    public set stencilOpStencilFail(value: number) {\r\n        if (this._stencilOpStencilFail === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilOpStencilFail = value;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public get stencilOpDepthFail(): number {\r\n        return this._stencilOpDepthFail;\r\n    }\r\n\r\n    public set stencilOpDepthFail(value: number) {\r\n        if (this._stencilOpDepthFail === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilOpDepthFail = value;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public get stencilOpStencilDepthPass(): number {\r\n        return this._stencilOpStencilDepthPass;\r\n    }\r\n\r\n    public set stencilOpStencilDepthPass(value: number) {\r\n        if (this._stencilOpStencilDepthPass === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilOpStencilDepthPass = value;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public get stencilMask(): number {\r\n        return this._stencilMask;\r\n    }\r\n\r\n    public set stencilMask(value: number) {\r\n        if (this._stencilMask === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilMask = value;\r\n        this._isStencilMaskDirty = true;\r\n    }\r\n\r\n    public get stencilTest(): boolean {\r\n        return this._stencilTest;\r\n    }\r\n\r\n    public set stencilTest(value: boolean) {\r\n        if (this._stencilTest === value) {\r\n            return;\r\n        }\r\n\r\n        this._stencilTest = value;\r\n        this._isStencilTestDirty = true;\r\n    }\r\n\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset() {\r\n        this._stencilTest = false;\r\n        this._stencilMask = 0xFF;\r\n\r\n        this._stencilFunc = StencilState.ALWAYS;\r\n        this._stencilFuncRef = 1;\r\n        this._stencilFuncMask = 0xFF;\r\n\r\n        this._stencilOpStencilFail = StencilState.KEEP;\r\n        this._stencilOpDepthFail = StencilState.KEEP;\r\n        this._stencilOpStencilDepthPass = StencilState.REPLACE;\r\n\r\n        this._isStencilTestDirty = true;\r\n        this._isStencilMaskDirty = true;\r\n        this._isStencilFuncDirty = true;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public apply(gl: WebGLRenderingContext) {\r\n        if (!this.isDirty) {\r\n            return;\r\n        }\r\n\r\n        // Stencil test\r\n        if (this._isStencilTestDirty) {\r\n            if (this.stencilTest) {\r\n                gl.enable(gl.STENCIL_TEST);\r\n            } else {\r\n                gl.disable(gl.STENCIL_TEST);\r\n            }\r\n            this._isStencilTestDirty = false;\r\n        }\r\n\r\n        // Stencil mask\r\n        if (this._isStencilMaskDirty) {\r\n            gl.stencilMask(this.stencilMask);\r\n            this._isStencilMaskDirty = false;\r\n        }\r\n\r\n        // Stencil func\r\n        if (this._isStencilFuncDirty) {\r\n            gl.stencilFunc(this.stencilFunc, this.stencilFuncRef, this.stencilFuncMask);\r\n            this._isStencilFuncDirty = false;\r\n        }\r\n\r\n        // Stencil op\r\n        if (this._isStencilOpDirty) {\r\n            gl.stencilOp(this.stencilOpStencilFail, this.stencilOpDepthFail, this.stencilOpStencilDepthPass);\r\n            this._isStencilOpDirty = false;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}