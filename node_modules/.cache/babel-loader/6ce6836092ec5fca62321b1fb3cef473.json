{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector\"; // https://dickyjim.wordpress.com/2013/09/04/spherical-harmonics-for-beginners/\n// http://silviojemma.com/public/papers/lighting/spherical-harmonic-lighting.pdf\n// https://www.ppsloan.org/publications/StupidSH36.pdf\n// http://cseweb.ucsd.edu/~ravir/papers/envmap/envmap.pdf\n// https://www.ppsloan.org/publications/SHJCGT.pdf\n// https://www.ppsloan.org/publications/shdering.pdf\n// https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\n// https://patapom.com/blog/SHPortal/\n// https://imdoingitwrong.wordpress.com/2011/04/14/spherical-harmonics-wtf/\n// Using real SH basis:\n//  m>0             m   m\n// y   = sqrt(2) * K * P * cos(m*phi) * cos(theta)\n//  l               l   l\n//\n//  m<0             m   |m|\n// y   = sqrt(2) * K * P * sin(m*phi) * cos(theta)\n//  l               l   l\n//\n//  m=0   0   0\n// y   = K * P * trigono terms\n//  l     l   l\n//\n//  m       (2l + 1)(l - |m|)!\n// K = sqrt(------------------)\n//  l           4pi(l + |m|)!\n//\n// and P by recursion:\n//\n// P00(x) = 1\n// P01(x) = x\n// Pll(x) = (-1^l)(2l - 1)!!(1-x*x)^(1/2)\n//          ((2l - 1)x[Pl-1/m]-(l + m - 1)[Pl-2/m])\n// Plm(x) = ---------------------------------------\n//                         l - m\n// Leaving the trigonometric terms aside we can precompute the constants to :\n\nvar SH3ylmBasisConstants = [Math.sqrt(1 / (4 * Math.PI)), -Math.sqrt(3 / (4 * Math.PI)), Math.sqrt(3 / (4 * Math.PI)), -Math.sqrt(3 / (4 * Math.PI)), Math.sqrt(15 / (4 * Math.PI)), -Math.sqrt(15 / (4 * Math.PI)), Math.sqrt(5 / (16 * Math.PI)), -Math.sqrt(15 / (4 * Math.PI)), Math.sqrt(15 / (16 * Math.PI))]; // cm = cos(m * phi)\n// sm = sin(m * phi)\n// {x,y,z} = {cos(phi)sin(theta), sin(phi)sin(theta), cos(theta)}\n// By recursion on using trigo identities:\n\nvar SH3ylmBasisTrigonometricTerms = [function (direction) {\n  return 1;\n}, function (direction) {\n  return direction.y;\n}, function (direction) {\n  return direction.z;\n}, function (direction) {\n  return direction.x;\n}, function (direction) {\n  return direction.x * direction.y;\n}, function (direction) {\n  return direction.y * direction.z;\n}, function (direction) {\n  return 3 * direction.z * direction.z - 1;\n}, function (direction) {\n  return direction.x * direction.z;\n}, function (direction) {\n  return direction.x * direction.x - direction.y * direction.y;\n}]; // Wrap the full compute\n\nvar applySH3 = function (lm, direction) {\n  return SH3ylmBasisConstants[lm] * SH3ylmBasisTrigonometricTerms[lm](direction);\n}; // Derived from the integration of the a kernel convolution to SH.\n// Great explanation here: https://patapom.com/blog/SHPortal/#about-distant-radiance-and-irradiance-environments\n\n\nvar SHCosKernelConvolution = [Math.PI, 2 * Math.PI / 3, 2 * Math.PI / 3, 2 * Math.PI / 3, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4];\n/**\r\n * Class representing spherical harmonics coefficients to the 3rd degree\r\n */\n\nvar SphericalHarmonics =\n/** @class */\nfunction () {\n  function SphericalHarmonics() {\n    /**\r\n     * Defines whether or not the harmonics have been prescaled for rendering.\r\n     */\n    this.preScaled = false;\n    /**\r\n     * The l0,0 coefficients of the spherical harmonics\r\n     */\n\n    this.l00 = Vector3.Zero();\n    /**\r\n     * The l1,-1 coefficients of the spherical harmonics\r\n     */\n\n    this.l1_1 = Vector3.Zero();\n    /**\r\n     * The l1,0 coefficients of the spherical harmonics\r\n     */\n\n    this.l10 = Vector3.Zero();\n    /**\r\n     * The l1,1 coefficients of the spherical harmonics\r\n     */\n\n    this.l11 = Vector3.Zero();\n    /**\r\n     * The l2,-2 coefficients of the spherical harmonics\r\n     */\n\n    this.l2_2 = Vector3.Zero();\n    /**\r\n     * The l2,-1 coefficients of the spherical harmonics\r\n     */\n\n    this.l2_1 = Vector3.Zero();\n    /**\r\n     * The l2,0 coefficients of the spherical harmonics\r\n     */\n\n    this.l20 = Vector3.Zero();\n    /**\r\n     * The l2,1 coefficients of the spherical harmonics\r\n     */\n\n    this.l21 = Vector3.Zero();\n    /**\r\n     * The l2,2 coefficients of the spherical harmonics\r\n     */\n\n    this.l22 = Vector3.Zero();\n  }\n  /**\r\n   * Adds a light to the spherical harmonics\r\n   * @param direction the direction of the light\r\n   * @param color the color of the light\r\n   * @param deltaSolidAngle the delta solid angle of the light\r\n   */\n\n\n  SphericalHarmonics.prototype.addLight = function (direction, color, deltaSolidAngle) {\n    var colorVector = new Vector3(color.r, color.g, color.b);\n    var c = colorVector.scale(deltaSolidAngle);\n    this.l00 = this.l00.add(c.scale(applySH3(0, direction)));\n    this.l1_1 = this.l1_1.add(c.scale(applySH3(1, direction)));\n    this.l10 = this.l10.add(c.scale(applySH3(2, direction)));\n    this.l11 = this.l11.add(c.scale(applySH3(3, direction)));\n    this.l2_2 = this.l2_2.add(c.scale(applySH3(4, direction)));\n    this.l2_1 = this.l2_1.add(c.scale(applySH3(5, direction)));\n    this.l20 = this.l20.add(c.scale(applySH3(6, direction)));\n    this.l21 = this.l21.add(c.scale(applySH3(7, direction)));\n    this.l22 = this.l22.add(c.scale(applySH3(8, direction)));\n  };\n  /**\r\n   * Scales the spherical harmonics by the given amount\r\n   * @param scale the amount to scale\r\n   */\n\n\n  SphericalHarmonics.prototype.scaleInPlace = function (scale) {\n    this.l00.scaleInPlace(scale);\n    this.l1_1.scaleInPlace(scale);\n    this.l10.scaleInPlace(scale);\n    this.l11.scaleInPlace(scale);\n    this.l2_2.scaleInPlace(scale);\n    this.l2_1.scaleInPlace(scale);\n    this.l20.scaleInPlace(scale);\n    this.l21.scaleInPlace(scale);\n    this.l22.scaleInPlace(scale);\n  };\n  /**\r\n   * Convert from incident radiance (Li) to irradiance (E) by applying convolution with the cosine-weighted hemisphere.\r\n   *\r\n   * ```\r\n   * E_lm = A_l * L_lm\r\n   * ```\r\n   *\r\n   * In spherical harmonics this convolution amounts to scaling factors for each frequency band.\r\n   * This corresponds to equation 5 in \"An Efficient Representation for Irradiance Environment Maps\", where\r\n   * the scaling factors are given in equation 9.\r\n   */\n\n\n  SphericalHarmonics.prototype.convertIncidentRadianceToIrradiance = function () {\n    // Constant (Band 0)\n    this.l00.scaleInPlace(SHCosKernelConvolution[0]); // Linear (Band 1)\n\n    this.l1_1.scaleInPlace(SHCosKernelConvolution[1]);\n    this.l10.scaleInPlace(SHCosKernelConvolution[2]);\n    this.l11.scaleInPlace(SHCosKernelConvolution[3]); // Quadratic (Band 2)\n\n    this.l2_2.scaleInPlace(SHCosKernelConvolution[4]);\n    this.l2_1.scaleInPlace(SHCosKernelConvolution[5]);\n    this.l20.scaleInPlace(SHCosKernelConvolution[6]);\n    this.l21.scaleInPlace(SHCosKernelConvolution[7]);\n    this.l22.scaleInPlace(SHCosKernelConvolution[8]);\n  };\n  /**\r\n   * Convert from irradiance to outgoing radiance for Lambertian BDRF, suitable for efficient shader evaluation.\r\n   *\r\n   * ```\r\n   * L = (1/pi) * E * rho\r\n   * ```\r\n   *\r\n   * This is done by an additional scale by 1/pi, so is a fairly trivial operation but important conceptually.\r\n   */\n\n\n  SphericalHarmonics.prototype.convertIrradianceToLambertianRadiance = function () {\n    this.scaleInPlace(1.0 / Math.PI); // The resultant SH now represents outgoing radiance, so includes the Lambert 1/pi normalisation factor but without albedo (rho) applied\n    // (The pixel shader must apply albedo after texture fetches, etc).\n  };\n  /**\r\n   * Integrates the reconstruction coefficients directly in to the SH preventing further\r\n   * required operations at run time.\r\n   *\r\n   * This is simply done by scaling back the SH with Ylm constants parameter.\r\n   * The trigonometric part being applied by the shader at run time.\r\n   */\n\n\n  SphericalHarmonics.prototype.preScaleForRendering = function () {\n    this.preScaled = true;\n    this.l00.scaleInPlace(SH3ylmBasisConstants[0]);\n    this.l1_1.scaleInPlace(SH3ylmBasisConstants[1]);\n    this.l10.scaleInPlace(SH3ylmBasisConstants[2]);\n    this.l11.scaleInPlace(SH3ylmBasisConstants[3]);\n    this.l2_2.scaleInPlace(SH3ylmBasisConstants[4]);\n    this.l2_1.scaleInPlace(SH3ylmBasisConstants[5]);\n    this.l20.scaleInPlace(SH3ylmBasisConstants[6]);\n    this.l21.scaleInPlace(SH3ylmBasisConstants[7]);\n    this.l22.scaleInPlace(SH3ylmBasisConstants[8]);\n  };\n  /**\r\n   * Constructs a spherical harmonics from an array.\r\n   * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\r\n   * @returns the spherical harmonics\r\n   */\n\n\n  SphericalHarmonics.FromArray = function (data) {\n    var sh = new SphericalHarmonics();\n    Vector3.FromArrayToRef(data[0], 0, sh.l00);\n    Vector3.FromArrayToRef(data[1], 0, sh.l1_1);\n    Vector3.FromArrayToRef(data[2], 0, sh.l10);\n    Vector3.FromArrayToRef(data[3], 0, sh.l11);\n    Vector3.FromArrayToRef(data[4], 0, sh.l2_2);\n    Vector3.FromArrayToRef(data[5], 0, sh.l2_1);\n    Vector3.FromArrayToRef(data[6], 0, sh.l20);\n    Vector3.FromArrayToRef(data[7], 0, sh.l21);\n    Vector3.FromArrayToRef(data[8], 0, sh.l22);\n    return sh;\n  }; // Keep for references.\n\n  /**\r\n   * Gets the spherical harmonics from polynomial\r\n   * @param polynomial the spherical polynomial\r\n   * @returns the spherical harmonics\r\n   */\n\n\n  SphericalHarmonics.FromPolynomial = function (polynomial) {\n    var result = new SphericalHarmonics();\n    result.l00 = polynomial.xx.scale(0.376127).add(polynomial.yy.scale(0.376127)).add(polynomial.zz.scale(0.376126));\n    result.l1_1 = polynomial.y.scale(0.977204);\n    result.l10 = polynomial.z.scale(0.977204);\n    result.l11 = polynomial.x.scale(0.977204);\n    result.l2_2 = polynomial.xy.scale(1.16538);\n    result.l2_1 = polynomial.yz.scale(1.16538);\n    result.l20 = polynomial.zz.scale(1.34567).subtract(polynomial.xx.scale(0.672834)).subtract(polynomial.yy.scale(0.672834));\n    result.l21 = polynomial.zx.scale(1.16538);\n    result.l22 = polynomial.xx.scale(1.16538).subtract(polynomial.yy.scale(1.16538));\n    result.l1_1.scaleInPlace(-1);\n    result.l11.scaleInPlace(-1);\n    result.l2_1.scaleInPlace(-1);\n    result.l21.scaleInPlace(-1);\n    result.scaleInPlace(Math.PI);\n    return result;\n  };\n\n  return SphericalHarmonics;\n}();\n\nexport { SphericalHarmonics };\n/**\r\n * Class representing spherical polynomial coefficients to the 3rd degree\r\n */\n\nvar SphericalPolynomial =\n/** @class */\nfunction () {\n  function SphericalPolynomial() {\n    /**\r\n     * The x coefficients of the spherical polynomial\r\n     */\n    this.x = Vector3.Zero();\n    /**\r\n     * The y coefficients of the spherical polynomial\r\n     */\n\n    this.y = Vector3.Zero();\n    /**\r\n     * The z coefficients of the spherical polynomial\r\n     */\n\n    this.z = Vector3.Zero();\n    /**\r\n     * The xx coefficients of the spherical polynomial\r\n     */\n\n    this.xx = Vector3.Zero();\n    /**\r\n     * The yy coefficients of the spherical polynomial\r\n     */\n\n    this.yy = Vector3.Zero();\n    /**\r\n     * The zz coefficients of the spherical polynomial\r\n     */\n\n    this.zz = Vector3.Zero();\n    /**\r\n     * The xy coefficients of the spherical polynomial\r\n     */\n\n    this.xy = Vector3.Zero();\n    /**\r\n     * The yz coefficients of the spherical polynomial\r\n     */\n\n    this.yz = Vector3.Zero();\n    /**\r\n     * The zx coefficients of the spherical polynomial\r\n     */\n\n    this.zx = Vector3.Zero();\n  }\n\n  Object.defineProperty(SphericalPolynomial.prototype, \"preScaledHarmonics\", {\n    /**\r\n     * The spherical harmonics used to create the polynomials.\r\n     */\n    get: function () {\n      if (!this._harmonics) {\n        this._harmonics = SphericalHarmonics.FromPolynomial(this);\n      }\n\n      if (!this._harmonics.preScaled) {\n        this._harmonics.preScaleForRendering();\n      }\n\n      return this._harmonics;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds an ambient color to the spherical polynomial\r\n   * @param color the color to add\r\n   */\n\n  SphericalPolynomial.prototype.addAmbient = function (color) {\n    var colorVector = new Vector3(color.r, color.g, color.b);\n    this.xx = this.xx.add(colorVector);\n    this.yy = this.yy.add(colorVector);\n    this.zz = this.zz.add(colorVector);\n  };\n  /**\r\n   * Scales the spherical polynomial by the given amount\r\n   * @param scale the amount to scale\r\n   */\n\n\n  SphericalPolynomial.prototype.scaleInPlace = function (scale) {\n    this.x.scaleInPlace(scale);\n    this.y.scaleInPlace(scale);\n    this.z.scaleInPlace(scale);\n    this.xx.scaleInPlace(scale);\n    this.yy.scaleInPlace(scale);\n    this.zz.scaleInPlace(scale);\n    this.yz.scaleInPlace(scale);\n    this.zx.scaleInPlace(scale);\n    this.xy.scaleInPlace(scale);\n  };\n  /**\r\n   * Gets the spherical polynomial from harmonics\r\n   * @param harmonics the spherical harmonics\r\n   * @returns the spherical polynomial\r\n   */\n\n\n  SphericalPolynomial.FromHarmonics = function (harmonics) {\n    var result = new SphericalPolynomial();\n    result._harmonics = harmonics;\n    result.x = harmonics.l11.scale(1.02333).scale(-1);\n    result.y = harmonics.l1_1.scale(1.02333).scale(-1);\n    result.z = harmonics.l10.scale(1.02333);\n    result.xx = harmonics.l00.scale(0.886277).subtract(harmonics.l20.scale(0.247708)).add(harmonics.l22.scale(0.429043));\n    result.yy = harmonics.l00.scale(0.886277).subtract(harmonics.l20.scale(0.247708)).subtract(harmonics.l22.scale(0.429043));\n    result.zz = harmonics.l00.scale(0.886277).add(harmonics.l20.scale(0.495417));\n    result.yz = harmonics.l2_1.scale(0.858086).scale(-1);\n    result.zx = harmonics.l21.scale(0.858086).scale(-1);\n    result.xy = harmonics.l2_2.scale(0.858086);\n    result.scaleInPlace(1.0 / Math.PI);\n    return result;\n  };\n  /**\r\n   * Constructs a spherical polynomial from an array.\r\n   * @param data defines the 9x3 coefficients (x, y, z, xx, yy, zz, yz, zx, xy)\r\n   * @returns the spherical polynomial\r\n   */\n\n\n  SphericalPolynomial.FromArray = function (data) {\n    var sp = new SphericalPolynomial();\n    Vector3.FromArrayToRef(data[0], 0, sp.x);\n    Vector3.FromArrayToRef(data[1], 0, sp.y);\n    Vector3.FromArrayToRef(data[2], 0, sp.z);\n    Vector3.FromArrayToRef(data[3], 0, sp.xx);\n    Vector3.FromArrayToRef(data[4], 0, sp.yy);\n    Vector3.FromArrayToRef(data[5], 0, sp.zz);\n    Vector3.FromArrayToRef(data[6], 0, sp.yz);\n    Vector3.FromArrayToRef(data[7], 0, sp.zx);\n    Vector3.FromArrayToRef(data[8], 0, sp.xy);\n    return sp;\n  };\n\n  return SphericalPolynomial;\n}();\n\nexport { SphericalPolynomial };","map":{"version":3,"sources":["../../../sourceES6/core/Maths/sphericalPolynomial.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector3 } from \"../Maths/math.vector\";\r\nimport { Nullable } from \"../types\";\r\nimport { Color3 } from '../Maths/math.color';\r\n\r\n// https://dickyjim.wordpress.com/2013/09/04/spherical-harmonics-for-beginners/\r\n// http://silviojemma.com/public/papers/lighting/spherical-harmonic-lighting.pdf\r\n// https://www.ppsloan.org/publications/StupidSH36.pdf\r\n// http://cseweb.ucsd.edu/~ravir/papers/envmap/envmap.pdf\r\n// https://www.ppsloan.org/publications/SHJCGT.pdf\r\n// https://www.ppsloan.org/publications/shdering.pdf\r\n// https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\r\n// https://patapom.com/blog/SHPortal/\r\n// https://imdoingitwrong.wordpress.com/2011/04/14/spherical-harmonics-wtf/\r\n\r\n// Using real SH basis:\r\n//  m>0             m   m\r\n// y   = sqrt(2) * K * P * cos(m*phi) * cos(theta)\r\n//  l               l   l\r\n//\r\n//  m<0             m   |m|\r\n// y   = sqrt(2) * K * P * sin(m*phi) * cos(theta)\r\n//  l               l   l\r\n//\r\n//  m=0   0   0\r\n// y   = K * P * trigono terms\r\n//  l     l   l\r\n//\r\n//  m       (2l + 1)(l - |m|)!\r\n// K = sqrt(------------------)\r\n//  l           4pi(l + |m|)!\r\n//\r\n// and P by recursion:\r\n//\r\n// P00(x) = 1\r\n// P01(x) = x\r\n// Pll(x) = (-1^l)(2l - 1)!!(1-x*x)^(1/2)\r\n//          ((2l - 1)x[Pl-1/m]-(l + m - 1)[Pl-2/m])\r\n// Plm(x) = ---------------------------------------\r\n//                         l - m\r\n// Leaving the trigonometric terms aside we can precompute the constants to :\r\nconst SH3ylmBasisConstants = [\r\n    Math.sqrt(1 / (4 * Math.PI)), // l00\r\n\r\n    -Math.sqrt(3 / (4 * Math.PI)), // l1_1\r\n    Math.sqrt(3 / (4 * Math.PI)), // l10\r\n    -Math.sqrt(3 / (4 * Math.PI)), // l11\r\n\r\n    Math.sqrt(15 / (4 * Math.PI)), // l2_2\r\n    -Math.sqrt(15 / (4 * Math.PI)), // l2_1\r\n    Math.sqrt(5 / (16 * Math.PI)), // l20\r\n    -Math.sqrt(15 / (4 * Math.PI)), // l21\r\n    Math.sqrt(15 / (16 * Math.PI)), // l22\r\n];\r\n\r\n// cm = cos(m * phi)\r\n// sm = sin(m * phi)\r\n// {x,y,z} = {cos(phi)sin(theta), sin(phi)sin(theta), cos(theta)}\r\n// By recursion on using trigo identities:\r\nconst SH3ylmBasisTrigonometricTerms = [\r\n    (direction: Vector3) => 1, // l00\r\n\r\n    (direction: Vector3) => direction.y, // l1_1\r\n    (direction: Vector3) => direction.z, // l10\r\n    (direction: Vector3) => direction.x, // l11\r\n\r\n    (direction: Vector3) => direction.x * direction.y, // l2_2\r\n    (direction: Vector3) => direction.y * direction.z, // l2_1\r\n    (direction: Vector3) => 3 * direction.z * direction.z - 1, // l20\r\n    (direction: Vector3) => direction.x * direction.z, // l21\r\n    (direction: Vector3) => direction.x * direction.x - direction.y * direction.y, // l22\r\n];\r\n\r\n// Wrap the full compute\r\nconst applySH3 = (lm: number, direction: Vector3) => {\r\n    return SH3ylmBasisConstants[lm] * SH3ylmBasisTrigonometricTerms[lm](direction);\r\n};\r\n\r\n// Derived from the integration of the a kernel convolution to SH.\r\n// Great explanation here: https://patapom.com/blog/SHPortal/#about-distant-radiance-and-irradiance-environments\r\nconst SHCosKernelConvolution = [\r\n    Math.PI,\r\n\r\n    2 * Math.PI / 3,\r\n    2 * Math.PI / 3,\r\n    2 * Math.PI / 3,\r\n\r\n    Math.PI / 4,\r\n    Math.PI / 4,\r\n    Math.PI / 4,\r\n    Math.PI / 4,\r\n    Math.PI / 4,\r\n];\r\n\r\n/**\r\n * Class representing spherical harmonics coefficients to the 3rd degree\r\n */\r\nexport class SphericalHarmonics {\r\n    /**\r\n     * Defines whether or not the harmonics have been prescaled for rendering.\r\n     */\r\n    public preScaled = false;\r\n\r\n    /**\r\n     * The l0,0 coefficients of the spherical harmonics\r\n     */\r\n    public l00: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l1,-1 coefficients of the spherical harmonics\r\n     */\r\n    public l1_1: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l1,0 coefficients of the spherical harmonics\r\n     */\r\n    public l10: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l1,1 coefficients of the spherical harmonics\r\n     */\r\n    public l11: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,-2 coefficients of the spherical harmonics\r\n     */\r\n    public l2_2: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,-1 coefficients of the spherical harmonics\r\n     */\r\n    public l2_1: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,0 coefficients of the spherical harmonics\r\n     */\r\n    public l20: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,1 coefficients of the spherical harmonics\r\n     */\r\n    public l21: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,2 coefficients of the spherical harmonics\r\n     */\r\n    public l22: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Adds a light to the spherical harmonics\r\n     * @param direction the direction of the light\r\n     * @param color the color of the light\r\n     * @param deltaSolidAngle the delta solid angle of the light\r\n     */\r\n    public addLight(direction: Vector3, color: Color3, deltaSolidAngle: number): void {\r\n        var colorVector = new Vector3(color.r, color.g, color.b);\r\n        var c = colorVector.scale(deltaSolidAngle);\r\n\r\n        this.l00 = this.l00.add(c.scale(applySH3(0, direction)));\r\n\r\n        this.l1_1 = this.l1_1.add(c.scale(applySH3(1, direction)));\r\n        this.l10 = this.l10.add(c.scale(applySH3(2, direction)));\r\n        this.l11 = this.l11.add(c.scale(applySH3(3, direction)));\r\n\r\n        this.l2_2 = this.l2_2.add(c.scale(applySH3(4, direction)));\r\n        this.l2_1 = this.l2_1.add(c.scale(applySH3(5, direction)));\r\n        this.l20 = this.l20.add(c.scale(applySH3(6, direction)));\r\n        this.l21 = this.l21.add(c.scale(applySH3(7, direction)));\r\n        this.l22 = this.l22.add(c.scale(applySH3(8, direction)));\r\n    }\r\n\r\n    /**\r\n     * Scales the spherical harmonics by the given amount\r\n     * @param scale the amount to scale\r\n     */\r\n    public scaleInPlace(scale: number): void {\r\n        this.l00.scaleInPlace(scale);\r\n        this.l1_1.scaleInPlace(scale);\r\n        this.l10.scaleInPlace(scale);\r\n        this.l11.scaleInPlace(scale);\r\n        this.l2_2.scaleInPlace(scale);\r\n        this.l2_1.scaleInPlace(scale);\r\n        this.l20.scaleInPlace(scale);\r\n        this.l21.scaleInPlace(scale);\r\n        this.l22.scaleInPlace(scale);\r\n    }\r\n\r\n    /**\r\n     * Convert from incident radiance (Li) to irradiance (E) by applying convolution with the cosine-weighted hemisphere.\r\n     *\r\n     * ```\r\n     * E_lm = A_l * L_lm\r\n     * ```\r\n     *\r\n     * In spherical harmonics this convolution amounts to scaling factors for each frequency band.\r\n     * This corresponds to equation 5 in \"An Efficient Representation for Irradiance Environment Maps\", where\r\n     * the scaling factors are given in equation 9.\r\n     */\r\n    public convertIncidentRadianceToIrradiance(): void {\r\n        // Constant (Band 0)\r\n        this.l00.scaleInPlace(SHCosKernelConvolution[0]);\r\n\r\n        // Linear (Band 1)\r\n        this.l1_1.scaleInPlace(SHCosKernelConvolution[1]);\r\n        this.l10.scaleInPlace(SHCosKernelConvolution[2]);\r\n        this.l11.scaleInPlace(SHCosKernelConvolution[3]);\r\n\r\n        // Quadratic (Band 2)\r\n        this.l2_2.scaleInPlace(SHCosKernelConvolution[4]);\r\n        this.l2_1.scaleInPlace(SHCosKernelConvolution[5]);\r\n        this.l20.scaleInPlace(SHCosKernelConvolution[6]);\r\n        this.l21.scaleInPlace(SHCosKernelConvolution[7]);\r\n        this.l22.scaleInPlace(SHCosKernelConvolution[8]);\r\n    }\r\n\r\n    /**\r\n     * Convert from irradiance to outgoing radiance for Lambertian BDRF, suitable for efficient shader evaluation.\r\n     *\r\n     * ```\r\n     * L = (1/pi) * E * rho\r\n     * ```\r\n     *\r\n     * This is done by an additional scale by 1/pi, so is a fairly trivial operation but important conceptually.\r\n     */\r\n    public convertIrradianceToLambertianRadiance(): void {\r\n        this.scaleInPlace(1.0 / Math.PI);\r\n\r\n        // The resultant SH now represents outgoing radiance, so includes the Lambert 1/pi normalisation factor but without albedo (rho) applied\r\n        // (The pixel shader must apply albedo after texture fetches, etc).\r\n    }\r\n\r\n    /**\r\n     * Integrates the reconstruction coefficients directly in to the SH preventing further\r\n     * required operations at run time.\r\n     *\r\n     * This is simply done by scaling back the SH with Ylm constants parameter.\r\n     * The trigonometric part being applied by the shader at run time.\r\n     */\r\n    public preScaleForRendering(): void {\r\n        this.preScaled = true;\r\n\r\n        this.l00.scaleInPlace(SH3ylmBasisConstants[0]);\r\n\r\n        this.l1_1.scaleInPlace(SH3ylmBasisConstants[1]);\r\n        this.l10.scaleInPlace(SH3ylmBasisConstants[2]);\r\n        this.l11.scaleInPlace(SH3ylmBasisConstants[3]);\r\n\r\n        this.l2_2.scaleInPlace(SH3ylmBasisConstants[4]);\r\n        this.l2_1.scaleInPlace(SH3ylmBasisConstants[5]);\r\n        this.l20.scaleInPlace(SH3ylmBasisConstants[6]);\r\n        this.l21.scaleInPlace(SH3ylmBasisConstants[7]);\r\n        this.l22.scaleInPlace(SH3ylmBasisConstants[8]);\r\n    }\r\n\r\n    /**\r\n     * Constructs a spherical harmonics from an array.\r\n     * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\r\n     * @returns the spherical harmonics\r\n     */\r\n    public static FromArray(data: ArrayLike<ArrayLike<number>>): SphericalHarmonics {\r\n        const sh = new SphericalHarmonics();\r\n        Vector3.FromArrayToRef(data[0], 0, sh.l00);\r\n        Vector3.FromArrayToRef(data[1], 0, sh.l1_1);\r\n        Vector3.FromArrayToRef(data[2], 0, sh.l10);\r\n        Vector3.FromArrayToRef(data[3], 0, sh.l11);\r\n        Vector3.FromArrayToRef(data[4], 0, sh.l2_2);\r\n        Vector3.FromArrayToRef(data[5], 0, sh.l2_1);\r\n        Vector3.FromArrayToRef(data[6], 0, sh.l20);\r\n        Vector3.FromArrayToRef(data[7], 0, sh.l21);\r\n        Vector3.FromArrayToRef(data[8], 0, sh.l22);\r\n        return sh;\r\n    }\r\n\r\n    // Keep for references.\r\n    /**\r\n     * Gets the spherical harmonics from polynomial\r\n     * @param polynomial the spherical polynomial\r\n     * @returns the spherical harmonics\r\n     */\r\n    public static FromPolynomial(polynomial: SphericalPolynomial): SphericalHarmonics {\r\n        var result = new SphericalHarmonics();\r\n\r\n        result.l00 = polynomial.xx.scale(0.376127).add(polynomial.yy.scale(0.376127)).add(polynomial.zz.scale(0.376126));\r\n        result.l1_1 = polynomial.y.scale(0.977204);\r\n        result.l10 = polynomial.z.scale(0.977204);\r\n        result.l11 = polynomial.x.scale(0.977204);\r\n        result.l2_2 = polynomial.xy.scale(1.16538);\r\n        result.l2_1 = polynomial.yz.scale(1.16538);\r\n        result.l20 = polynomial.zz.scale(1.34567).subtract(polynomial.xx.scale(0.672834)).subtract(polynomial.yy.scale(0.672834));\r\n        result.l21 = polynomial.zx.scale(1.16538);\r\n        result.l22 = polynomial.xx.scale(1.16538).subtract(polynomial.yy.scale(1.16538));\r\n\r\n        result.l1_1.scaleInPlace(-1);\r\n        result.l11.scaleInPlace(-1);\r\n        result.l2_1.scaleInPlace(-1);\r\n        result.l21.scaleInPlace(-1);\r\n\r\n        result.scaleInPlace(Math.PI);\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Class representing spherical polynomial coefficients to the 3rd degree\r\n */\r\nexport class SphericalPolynomial {\r\n    private _harmonics: Nullable<SphericalHarmonics>;\r\n\r\n    /**\r\n     * The spherical harmonics used to create the polynomials.\r\n     */\r\n    public get preScaledHarmonics(): SphericalHarmonics {\r\n        if (!this._harmonics) {\r\n            this._harmonics = SphericalHarmonics.FromPolynomial(this);\r\n        }\r\n        if (!this._harmonics.preScaled) {\r\n            this._harmonics.preScaleForRendering();\r\n        }\r\n        return this._harmonics;\r\n    }\r\n\r\n    /**\r\n     * The x coefficients of the spherical polynomial\r\n     */\r\n    public x: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The y coefficients of the spherical polynomial\r\n     */\r\n    public y: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The z coefficients of the spherical polynomial\r\n     */\r\n    public z: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The xx coefficients of the spherical polynomial\r\n     */\r\n    public xx: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The yy coefficients of the spherical polynomial\r\n     */\r\n    public yy: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The zz coefficients of the spherical polynomial\r\n     */\r\n    public zz: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The xy coefficients of the spherical polynomial\r\n     */\r\n    public xy: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The yz coefficients of the spherical polynomial\r\n     */\r\n    public yz: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The zx coefficients of the spherical polynomial\r\n     */\r\n    public zx: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Adds an ambient color to the spherical polynomial\r\n     * @param color the color to add\r\n     */\r\n    public addAmbient(color: Color3): void {\r\n        var colorVector = new Vector3(color.r, color.g, color.b);\r\n        this.xx = this.xx.add(colorVector);\r\n        this.yy = this.yy.add(colorVector);\r\n        this.zz = this.zz.add(colorVector);\r\n    }\r\n\r\n    /**\r\n     * Scales the spherical polynomial by the given amount\r\n     * @param scale the amount to scale\r\n     */\r\n    public scaleInPlace(scale: number) {\r\n        this.x.scaleInPlace(scale);\r\n        this.y.scaleInPlace(scale);\r\n        this.z.scaleInPlace(scale);\r\n        this.xx.scaleInPlace(scale);\r\n        this.yy.scaleInPlace(scale);\r\n        this.zz.scaleInPlace(scale);\r\n        this.yz.scaleInPlace(scale);\r\n        this.zx.scaleInPlace(scale);\r\n        this.xy.scaleInPlace(scale);\r\n    }\r\n\r\n    /**\r\n     * Gets the spherical polynomial from harmonics\r\n     * @param harmonics the spherical harmonics\r\n     * @returns the spherical polynomial\r\n     */\r\n    public static FromHarmonics(harmonics: SphericalHarmonics): SphericalPolynomial {\r\n        var result = new SphericalPolynomial();\r\n        result._harmonics = harmonics;\r\n\r\n        result.x = harmonics.l11.scale(1.02333).scale(-1);\r\n        result.y = harmonics.l1_1.scale(1.02333).scale(-1);\r\n        result.z = harmonics.l10.scale(1.02333);\r\n\r\n        result.xx = harmonics.l00.scale(0.886277).subtract(harmonics.l20.scale(0.247708)).add(harmonics.l22.scale(0.429043));\r\n        result.yy = harmonics.l00.scale(0.886277).subtract(harmonics.l20.scale(0.247708)).subtract(harmonics.l22.scale(0.429043));\r\n        result.zz = harmonics.l00.scale(0.886277).add(harmonics.l20.scale(0.495417));\r\n\r\n        result.yz = harmonics.l2_1.scale(0.858086).scale(-1);\r\n        result.zx = harmonics.l21.scale(0.858086).scale(-1);\r\n        result.xy = harmonics.l2_2.scale(0.858086);\r\n\r\n        result.scaleInPlace(1.0 / Math.PI);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Constructs a spherical polynomial from an array.\r\n     * @param data defines the 9x3 coefficients (x, y, z, xx, yy, zz, yz, zx, xy)\r\n     * @returns the spherical polynomial\r\n     */\r\n    public static FromArray(data: ArrayLike<ArrayLike<number>>): SphericalPolynomial {\r\n        const sp = new SphericalPolynomial();\r\n        Vector3.FromArrayToRef(data[0], 0, sp.x);\r\n        Vector3.FromArrayToRef(data[1], 0, sp.y);\r\n        Vector3.FromArrayToRef(data[2], 0, sp.z);\r\n        Vector3.FromArrayToRef(data[3], 0, sp.xx);\r\n        Vector3.FromArrayToRef(data[4], 0, sp.yy);\r\n        Vector3.FromArrayToRef(data[5], 0, sp.zz);\r\n        Vector3.FromArrayToRef(data[6], 0, sp.yz);\r\n        Vector3.FromArrayToRef(data[7], 0, sp.zx);\r\n        Vector3.FromArrayToRef(data[8], 0, sp.xy);\r\n        return sp;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}