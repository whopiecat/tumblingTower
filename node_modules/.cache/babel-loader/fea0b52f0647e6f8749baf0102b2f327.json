{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Color4 } from '../Maths/math.color';\nimport { Observable } from '../Misc/observable';\nimport { ThinSprite } from './thinSprite';\n/**\r\n * Class used to represent a sprite\r\n * @see https://doc.babylonjs.com/babylon101/sprites\r\n */\n\nvar Sprite =\n/** @class */\nfunction (_super) {\n  __extends(Sprite, _super);\n  /**\r\n   * Creates a new Sprite\r\n   * @param name defines the name\r\n   * @param manager defines the manager\r\n   */\n\n\n  function Sprite(\n  /** defines the name */\n  name, manager) {\n    var _this = _super.call(this) || this;\n\n    _this.name = name;\n    /** Gets the list of attached animations */\n\n    _this.animations = new Array();\n    /** Gets or sets a boolean indicating if the sprite can be picked */\n\n    _this.isPickable = false;\n    /** Gets or sets a boolean indicating that sprite texture alpha will be used for precise picking (false by default) */\n\n    _this.useAlphaForPicking = false;\n    /**\r\n     * An event triggered when the control has been disposed\r\n     */\n\n    _this.onDisposeObservable = new Observable();\n    _this._onAnimationEnd = null;\n\n    _this._endAnimation = function () {\n      if (_this._onAnimationEnd) {\n        _this._onAnimationEnd();\n      }\n\n      if (_this.disposeWhenFinishedAnimating) {\n        _this.dispose();\n      }\n    };\n\n    _this.color = new Color4(1.0, 1.0, 1.0, 1.0);\n    _this.position = Vector3.Zero();\n    _this._manager = manager;\n\n    _this._manager.sprites.push(_this);\n\n    _this.uniqueId = _this._manager.scene.getUniqueId();\n    return _this;\n  }\n\n  Object.defineProperty(Sprite.prototype, \"size\", {\n    /**\r\n     * Gets or sets the sprite size\r\n     */\n    get: function () {\n      return this.width;\n    },\n    set: function (value) {\n      this.width = value;\n      this.height = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"manager\", {\n    /**\r\n     * Gets the manager of this sprite\r\n     */\n    get: function () {\n      return this._manager;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the string \"Sprite\"\r\n   * @returns \"Sprite\"\r\n   */\n\n  Sprite.prototype.getClassName = function () {\n    return \"Sprite\";\n  };\n\n  Object.defineProperty(Sprite.prototype, \"fromIndex\", {\n    /** Gets or sets the initial key for the animation (setting it will restart the animation)  */\n    get: function () {\n      return this._fromIndex;\n    },\n    set: function (value) {\n      this.playAnimation(value, this._toIndex, this._loopAnimation, this._delay, this._onAnimationEnd);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"toIndex\", {\n    /** Gets or sets the end key for the animation (setting it will restart the animation)  */\n    get: function () {\n      return this._toIndex;\n    },\n    set: function (value) {\n      this.playAnimation(this._fromIndex, value, this._loopAnimation, this._delay, this._onAnimationEnd);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"loopAnimation\", {\n    /** Gets or sets a boolean indicating if the animation is looping (setting it will restart the animation)  */\n    get: function () {\n      return this._loopAnimation;\n    },\n    set: function (value) {\n      this.playAnimation(this._fromIndex, this._toIndex, value, this._delay, this._onAnimationEnd);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"delay\", {\n    /** Gets or sets the delay between cell changes (setting it will restart the animation)  */\n    get: function () {\n      return Math.max(this._delay, 1);\n    },\n    set: function (value) {\n      this.playAnimation(this._fromIndex, this._toIndex, this._loopAnimation, value, this._onAnimationEnd);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Starts an animation\r\n   * @param from defines the initial key\r\n   * @param to defines the end key\r\n   * @param loop defines if the animation must loop\r\n   * @param delay defines the start delay (in ms)\r\n   * @param onAnimationEnd defines a callback to call when animation ends\r\n   */\n\n  Sprite.prototype.playAnimation = function (from, to, loop, delay, onAnimationEnd) {\n    if (onAnimationEnd === void 0) {\n      onAnimationEnd = null;\n    }\n\n    this._onAnimationEnd = onAnimationEnd;\n\n    _super.prototype.playAnimation.call(this, from, to, loop, delay, this._endAnimation);\n  };\n  /** Release associated resources */\n\n\n  Sprite.prototype.dispose = function () {\n    for (var i = 0; i < this._manager.sprites.length; i++) {\n      if (this._manager.sprites[i] == this) {\n        this._manager.sprites.splice(i, 1);\n      }\n    } // Callback\n\n\n    this.onDisposeObservable.notifyObservers(this);\n    this.onDisposeObservable.clear();\n  };\n  /**\r\n   * Serializes the sprite to a JSON object\r\n   * @returns the JSON object\r\n   */\n\n\n  Sprite.prototype.serialize = function () {\n    var serializationObject = {};\n    serializationObject.name = this.name;\n    serializationObject.position = this.position.asArray();\n    serializationObject.color = this.color.asArray();\n    serializationObject.width = this.width;\n    serializationObject.height = this.height;\n    serializationObject.angle = this.angle;\n    serializationObject.cellIndex = this.cellIndex;\n    serializationObject.cellRef = this.cellRef;\n    serializationObject.invertU = this.invertU;\n    serializationObject.invertV = this.invertV;\n    serializationObject.disposeWhenFinishedAnimating = this.disposeWhenFinishedAnimating;\n    serializationObject.isPickable = this.isPickable;\n    serializationObject.isVisible = this.isVisible;\n    serializationObject.useAlphaForPicking = this.useAlphaForPicking;\n    serializationObject.animationStarted = this.animationStarted;\n    serializationObject.fromIndex = this.fromIndex;\n    serializationObject.toIndex = this.toIndex;\n    serializationObject.loopAnimation = this.loopAnimation;\n    serializationObject.delay = this.delay;\n    return serializationObject;\n  };\n  /**\r\n   * Parses a JSON object to create a new sprite\r\n   * @param parsedSprite The JSON object to parse\r\n   * @param manager defines the hosting manager\r\n   * @returns the new sprite\r\n   */\n\n\n  Sprite.Parse = function (parsedSprite, manager) {\n    var sprite = new Sprite(parsedSprite.name, manager);\n    sprite.position = Vector3.FromArray(parsedSprite.position);\n    sprite.color = Color4.FromArray(parsedSprite.color);\n    sprite.width = parsedSprite.width;\n    sprite.height = parsedSprite.height;\n    sprite.angle = parsedSprite.angle;\n    sprite.cellIndex = parsedSprite.cellIndex;\n    sprite.cellRef = parsedSprite.cellRef;\n    sprite.invertU = parsedSprite.invertU;\n    sprite.invertV = parsedSprite.invertV;\n    sprite.disposeWhenFinishedAnimating = parsedSprite.disposeWhenFinishedAnimating;\n    sprite.isPickable = parsedSprite.isPickable;\n    sprite.isVisible = parsedSprite.isVisible;\n    sprite.useAlphaForPicking = parsedSprite.useAlphaForPicking;\n    sprite.fromIndex = parsedSprite.fromIndex;\n    sprite.toIndex = parsedSprite.toIndex;\n    sprite.loopAnimation = parsedSprite.loopAnimation;\n    sprite.delay = parsedSprite.delay;\n\n    if (parsedSprite.animationStarted) {\n      sprite.playAnimation(sprite.fromIndex, sprite.toIndex, sprite.loopAnimation, sprite.delay);\n    }\n\n    return sprite;\n  };\n\n  return Sprite;\n}(ThinSprite);\n\nexport { Sprite };","map":{"version":3,"sources":["../../../sourceES6/core/Sprites/sprite.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector3 } from \"../Maths/math.vector\";\r\nimport { Nullable } from \"../types\";\r\nimport { ActionManager } from \"../Actions/actionManager\";\r\nimport { ISpriteManager, SpriteManager } from \"./spriteManager\";\r\nimport { Color4 } from '../Maths/math.color';\r\nimport { Observable } from '../Misc/observable';\r\nimport { IAnimatable } from '../Animations/animatable.interface';\r\nimport { ThinSprite } from './thinSprite';\r\n\r\ndeclare type Animation = import(\"../Animations/animation\").Animation;\r\n\r\n/**\r\n * Class used to represent a sprite\r\n * @see https://doc.babylonjs.com/babylon101/sprites\r\n */\r\nexport class Sprite extends ThinSprite implements IAnimatable {\r\n    /** Gets or sets the current world position */\r\n    public position: Vector3;\r\n    /** Gets or sets the main color */\r\n    public color: Color4;\r\n    /** Gets or sets a boolean indicating that this sprite should be disposed after animation ends */\r\n    public disposeWhenFinishedAnimating: boolean;\r\n    /** Gets the list of attached animations */\r\n    public animations: Nullable<Array<Animation>> = new Array<Animation>();\r\n    /** Gets or sets a boolean indicating if the sprite can be picked */\r\n    public isPickable = false;\r\n    /** Gets or sets a boolean indicating that sprite texture alpha will be used for precise picking (false by default) */\r\n    public useAlphaForPicking = false;\r\n\r\n    /**\r\n     * Gets or sets the associated action manager\r\n     */\r\n    public actionManager: Nullable<ActionManager>;\r\n\r\n    /**\r\n     * An event triggered when the control has been disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Sprite>();\r\n\r\n    private _manager: ISpriteManager;\r\n    private _onAnimationEnd: Nullable<() => void> = null;\r\n\r\n    /**\r\n     * Gets or sets the sprite size\r\n     */\r\n    public get size(): number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: number) {\r\n        this.width = value;\r\n        this.height = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the unique id of the sprite\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets the manager of this sprite\r\n     */\r\n    public get manager() {\r\n        return this._manager;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Sprite\r\n     * @param name defines the name\r\n     * @param manager defines the manager\r\n     */\r\n    constructor(\r\n        /** defines the name */\r\n        public name: string,\r\n        manager: ISpriteManager) {\r\n        super();\r\n        this.color = new Color4(1.0, 1.0, 1.0, 1.0);\r\n        this.position = Vector3.Zero();\r\n\r\n        this._manager = manager;\r\n        this._manager.sprites.push(this);\r\n        this.uniqueId = this._manager.scene.getUniqueId();\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"Sprite\"\r\n     * @returns \"Sprite\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Sprite\";\r\n    }\r\n\r\n    /** Gets or sets the initial key for the animation (setting it will restart the animation)  */\r\n    public get fromIndex() {\r\n        return this._fromIndex;\r\n    }\r\n    public set fromIndex(value: number) {\r\n        this.playAnimation(value, this._toIndex, this._loopAnimation, this._delay, this._onAnimationEnd);\r\n    }\r\n\r\n    /** Gets or sets the end key for the animation (setting it will restart the animation)  */\r\n    public get toIndex() {\r\n        return this._toIndex;\r\n    }\r\n    public set toIndex(value: number) {\r\n        this.playAnimation(this._fromIndex, value, this._loopAnimation, this._delay, this._onAnimationEnd);\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the animation is looping (setting it will restart the animation)  */\r\n    public get loopAnimation() {\r\n        return this._loopAnimation;\r\n    }\r\n    public set loopAnimation(value: boolean) {\r\n        this.playAnimation(this._fromIndex, this._toIndex, value, this._delay, this._onAnimationEnd);\r\n    }\r\n\r\n    /** Gets or sets the delay between cell changes (setting it will restart the animation)  */\r\n    public get delay() {\r\n        return Math.max(this._delay, 1);\r\n    }\r\n    public set delay(value: number) {\r\n        this.playAnimation(this._fromIndex, this._toIndex, this._loopAnimation, value, this._onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Starts an animation\r\n     * @param from defines the initial key\r\n     * @param to defines the end key\r\n     * @param loop defines if the animation must loop\r\n     * @param delay defines the start delay (in ms)\r\n     * @param onAnimationEnd defines a callback to call when animation ends\r\n     */\r\n    public playAnimation(from: number, to: number, loop: boolean, delay: number, onAnimationEnd: Nullable<() => void> = null): void {\r\n        this._onAnimationEnd = onAnimationEnd;\r\n\r\n        super.playAnimation(from, to, loop, delay, this._endAnimation);\r\n    }\r\n\r\n    private _endAnimation = () => {\r\n        if (this._onAnimationEnd) {\r\n            this._onAnimationEnd();\r\n        }\r\n        if (this.disposeWhenFinishedAnimating) {\r\n            this.dispose();\r\n        }\r\n    };\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        for (var i = 0; i < this._manager.sprites.length; i++) {\r\n            if (this._manager.sprites[i] == this) {\r\n                this._manager.sprites.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Serializes the sprite to a JSON object\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.position = this.position.asArray();\r\n        serializationObject.color = this.color.asArray();\r\n        serializationObject.width = this.width;\r\n        serializationObject.height = this.height;\r\n        serializationObject.angle = this.angle;\r\n        serializationObject.cellIndex = this.cellIndex;\r\n        serializationObject.cellRef = this.cellRef;\r\n        serializationObject.invertU = this.invertU;\r\n        serializationObject.invertV = this.invertV;\r\n        serializationObject.disposeWhenFinishedAnimating = this.disposeWhenFinishedAnimating;\r\n        serializationObject.isPickable = this.isPickable;\r\n        serializationObject.isVisible = this.isVisible;\r\n        serializationObject.useAlphaForPicking = this.useAlphaForPicking;\r\n\r\n        serializationObject.animationStarted = this.animationStarted;\r\n        serializationObject.fromIndex = this.fromIndex;\r\n        serializationObject.toIndex = this.toIndex;\r\n        serializationObject.loopAnimation = this.loopAnimation;\r\n        serializationObject.delay = this.delay;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a JSON object to create a new sprite\r\n     * @param parsedSprite The JSON object to parse\r\n     * @param manager defines the hosting manager\r\n     * @returns the new sprite\r\n     */\r\n    public static Parse(parsedSprite: any, manager: SpriteManager): Sprite {\r\n        var sprite = new Sprite(parsedSprite.name, manager);\r\n\r\n        sprite.position = Vector3.FromArray(parsedSprite.position);\r\n        sprite.color = Color4.FromArray(parsedSprite.color);\r\n        sprite.width = parsedSprite.width;\r\n        sprite.height = parsedSprite.height;\r\n        sprite.angle = parsedSprite.angle;\r\n        sprite.cellIndex = parsedSprite.cellIndex;\r\n        sprite.cellRef = parsedSprite.cellRef;\r\n        sprite.invertU = parsedSprite.invertU;\r\n        sprite.invertV = parsedSprite.invertV;\r\n        sprite.disposeWhenFinishedAnimating = parsedSprite.disposeWhenFinishedAnimating;\r\n        sprite.isPickable = parsedSprite.isPickable;\r\n        sprite.isVisible = parsedSprite.isVisible;\r\n        sprite.useAlphaForPicking = parsedSprite.useAlphaForPicking;\r\n\r\n        sprite.fromIndex = parsedSprite.fromIndex;\r\n        sprite.toIndex = parsedSprite.toIndex;\r\n        sprite.loopAnimation = parsedSprite.loopAnimation;\r\n        sprite.delay = parsedSprite.delay;\r\n\r\n        if (parsedSprite.animationStarted) {\r\n            sprite.playAnimation(sprite.fromIndex, sprite.toIndex, sprite.loopAnimation, sprite.delay);\r\n        }\r\n\r\n        return sprite;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}