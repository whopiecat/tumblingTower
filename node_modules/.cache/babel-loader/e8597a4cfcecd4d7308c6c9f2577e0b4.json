{"ast":null,"code":"import { Observable } from \"../Misc/observable\";\nimport { Vector2, Vector3 } from \"../Maths/math.vector\";\nimport { Color3, Color4 } from \"../Maths/math.color\";\nimport { _TypeStore } from '../Misc/typeStore';\n/**\r\n * The action to be carried out following a trigger\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions#available-actions\r\n */\n\nvar Action =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Action\r\n   * @param triggerOptions the trigger, with or without parameters, for the action\r\n   * @param condition an optional determinant of action\r\n   */\n  function Action(\n  /** the trigger, with or without parameters, for the action */\n  triggerOptions, condition) {\n    this.triggerOptions = triggerOptions;\n    /**\r\n    * An event triggered prior to action being executed.\r\n    */\n\n    this.onBeforeExecuteObservable = new Observable();\n\n    if (triggerOptions.parameter) {\n      this.trigger = triggerOptions.trigger;\n      this._triggerParameter = triggerOptions.parameter;\n    } else if (triggerOptions.trigger) {\n      this.trigger = triggerOptions.trigger;\n    } else {\n      this.trigger = triggerOptions;\n    }\n\n    this._nextActiveAction = this;\n    this._condition = condition;\n  }\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Action.prototype._prepare = function () {};\n  /**\r\n   * Gets the trigger parameters\r\n   * @returns the trigger parameters\r\n   */\n\n\n  Action.prototype.getTriggerParameter = function () {\n    return this._triggerParameter;\n  };\n  /**\r\n   * Internal only - executes current action event\r\n   * @hidden\r\n   */\n\n\n  Action.prototype._executeCurrent = function (evt) {\n    if (this._nextActiveAction._condition) {\n      var condition = this._nextActiveAction._condition;\n\n      var currentRenderId = this._actionManager.getScene().getRenderId(); // We cache the current evaluation for the current frame\n\n\n      if (condition._evaluationId === currentRenderId) {\n        if (!condition._currentResult) {\n          return;\n        }\n      } else {\n        condition._evaluationId = currentRenderId;\n\n        if (!condition.isValid()) {\n          condition._currentResult = false;\n          return;\n        }\n\n        condition._currentResult = true;\n      }\n    }\n\n    this.onBeforeExecuteObservable.notifyObservers(this);\n\n    this._nextActiveAction.execute(evt);\n\n    this.skipToNextActiveAction();\n  };\n  /**\r\n   * Execute placeholder for child classes\r\n   * @param evt optional action event\r\n   */\n\n\n  Action.prototype.execute = function (evt) {};\n  /**\r\n   * Skips to next active action\r\n   */\n\n\n  Action.prototype.skipToNextActiveAction = function () {\n    if (this._nextActiveAction._child) {\n      if (!this._nextActiveAction._child._actionManager) {\n        this._nextActiveAction._child._actionManager = this._actionManager;\n      }\n\n      this._nextActiveAction = this._nextActiveAction._child;\n    } else {\n      this._nextActiveAction = this;\n    }\n  };\n  /**\r\n   * Adds action to chain of actions, may be a DoNothingAction\r\n   * @param action defines the next action to execute\r\n   * @returns The action passed in\r\n   * @see https://www.babylonjs-playground.com/#1T30HR#0\r\n   */\n\n\n  Action.prototype.then = function (action) {\n    this._child = action;\n    action._actionManager = this._actionManager;\n\n    action._prepare();\n\n    return action;\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Action.prototype._getProperty = function (propertyPath) {\n    return this._actionManager._getProperty(propertyPath);\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Action.prototype._getEffectiveTarget = function (target, propertyPath) {\n    return this._actionManager._getEffectiveTarget(target, propertyPath);\n  };\n  /**\r\n   * Serialize placeholder for child classes\r\n   * @param parent of child\r\n   * @returns the serialized object\r\n   */\n\n\n  Action.prototype.serialize = function (parent) {};\n  /**\r\n   * Internal only called by serialize\r\n   * @hidden\r\n   */\n\n\n  Action.prototype._serialize = function (serializedAction, parent) {\n    var serializationObject = {\n      type: 1,\n      children: [],\n      name: serializedAction.name,\n      properties: serializedAction.properties || []\n    }; // Serialize child\n\n    if (this._child) {\n      this._child.serialize(serializationObject);\n    } // Check if \"this\" has a condition\n\n\n    if (this._condition) {\n      var serializedCondition = this._condition.serialize();\n\n      serializedCondition.children.push(serializationObject);\n\n      if (parent) {\n        parent.children.push(serializedCondition);\n      }\n\n      return serializedCondition;\n    }\n\n    if (parent) {\n      parent.children.push(serializationObject);\n    }\n\n    return serializationObject;\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Action._SerializeValueAsString = function (value) {\n    if (typeof value === \"number\") {\n      return value.toString();\n    }\n\n    if (typeof value === \"boolean\") {\n      return value ? \"true\" : \"false\";\n    }\n\n    if (value instanceof Vector2) {\n      return value.x + \", \" + value.y;\n    }\n\n    if (value instanceof Vector3) {\n      return value.x + \", \" + value.y + \", \" + value.z;\n    }\n\n    if (value instanceof Color3) {\n      return value.r + \", \" + value.g + \", \" + value.b;\n    }\n\n    if (value instanceof Color4) {\n      return value.r + \", \" + value.g + \", \" + value.b + \", \" + value.a;\n    }\n\n    return value; // string\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Action._GetTargetProperty = function (target) {\n    return {\n      name: \"target\",\n      targetType: target._isMesh ? \"MeshProperties\" : target._isLight ? \"LightProperties\" : target._isCamera ? \"CameraProperties\" : \"SceneProperties\",\n      value: target._isScene ? \"Scene\" : target.name\n    };\n  };\n\n  return Action;\n}();\n\nexport { Action };\n_TypeStore.RegisteredTypes[\"BABYLON.Action\"] = Action;","map":{"version":3,"sources":["../../../sourceES6/core/Actions/action.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport { Vector2, Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Condition } from \"./condition\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { AbstractActionManager } from './abstractActionManager';\r\nimport { Nullable } from \"../types\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\ndeclare type ActionManager = import(\"./actionManager\").ActionManager;\r\ndeclare type ActionEvent = import(\"./actionEvent\").ActionEvent;\r\ndeclare type Mesh = import(\"../Meshes/mesh\").Mesh;\r\ndeclare type Light = import(\"../Lights/light\").Light;\r\ndeclare type Camera = import(\"../Cameras/camera\").Camera;\r\ndeclare type Node = import(\"../node\").Node;\r\n\r\n/**\r\n * Interface used to define Action\r\n */\r\nexport interface IAction {\r\n    /**\r\n   * Trigger for the action\r\n   */\r\n    trigger: number;\r\n\r\n    /** Options of the trigger */\r\n    triggerOptions: any;\r\n\r\n    /**\r\n     * Gets the trigger parameters\r\n     * @returns the trigger parameters\r\n     */\r\n    getTriggerParameter(): any;\r\n\r\n    /**\r\n     * Internal only - executes current action event\r\n     * @hidden\r\n     */\r\n    _executeCurrent(evt?: ActionEvent): void;\r\n\r\n    /**\r\n     * Serialize placeholder for child classes\r\n     * @param parent of child\r\n     * @returns the serialized object\r\n     */\r\n    serialize(parent: any): any;\r\n\r\n    /**\r\n    * Internal only\r\n    * @hidden\r\n    */\r\n    _prepare(): void;\r\n\r\n    /**\r\n     * Internal only - manager for action\r\n     * @hidden\r\n     */\r\n    _actionManager: Nullable<AbstractActionManager>;\r\n\r\n    /**\r\n     * Adds action to chain of actions, may be a DoNothingAction\r\n     * @param action defines the next action to execute\r\n     * @returns The action passed in\r\n     * @see https://www.babylonjs-playground.com/#1T30HR#0\r\n     */\r\n    then(action: IAction): IAction;\r\n}\r\n\r\n/**\r\n * The action to be carried out following a trigger\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions#available-actions\r\n */\r\nexport class Action implements IAction {\r\n    /**\r\n     * Trigger for the action\r\n     */\r\n    public trigger: number;\r\n\r\n    /**\r\n     * Internal only - manager for action\r\n     * @hidden\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    private _nextActiveAction: Action;\r\n    private _child: Action;\r\n    private _condition?: Condition;\r\n    private _triggerParameter: any;\r\n\r\n    /**\r\n    * An event triggered prior to action being executed.\r\n    */\r\n    public onBeforeExecuteObservable = new Observable<Action>();\r\n\r\n    /**\r\n     * Creates a new Action\r\n     * @param triggerOptions the trigger, with or without parameters, for the action\r\n     * @param condition an optional determinant of action\r\n     */\r\n    constructor(\r\n        /** the trigger, with or without parameters, for the action */\r\n        public triggerOptions: any, condition?: Condition) {\r\n\r\n        if (triggerOptions.parameter) {\r\n            this.trigger = triggerOptions.trigger;\r\n            this._triggerParameter = triggerOptions.parameter;\r\n        } else if (triggerOptions.trigger) {\r\n            this.trigger = triggerOptions.trigger;\r\n        } else {\r\n            this.trigger = triggerOptions;\r\n        }\r\n\r\n        this._nextActiveAction = this;\r\n        this._condition = condition;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    public _prepare(): void {\r\n    }\r\n\r\n    /**\r\n     * Gets the trigger parameters\r\n     * @returns the trigger parameters\r\n     */\r\n    public getTriggerParameter(): any {\r\n        return this._triggerParameter;\r\n    }\r\n\r\n    /**\r\n     * Internal only - executes current action event\r\n     * @hidden\r\n     */\r\n    public _executeCurrent(evt?: ActionEvent): void {\r\n        if (this._nextActiveAction._condition) {\r\n            var condition = this._nextActiveAction._condition;\r\n            var currentRenderId = this._actionManager.getScene().getRenderId();\r\n\r\n            // We cache the current evaluation for the current frame\r\n            if (condition._evaluationId === currentRenderId) {\r\n                if (!condition._currentResult) {\r\n                    return;\r\n                }\r\n            } else {\r\n                condition._evaluationId = currentRenderId;\r\n\r\n                if (!condition.isValid()) {\r\n                    condition._currentResult = false;\r\n                    return;\r\n                }\r\n\r\n                condition._currentResult = true;\r\n            }\r\n        }\r\n\r\n        this.onBeforeExecuteObservable.notifyObservers(this);\r\n        this._nextActiveAction.execute(evt);\r\n\r\n        this.skipToNextActiveAction();\r\n    }\r\n\r\n    /**\r\n     * Execute placeholder for child classes\r\n     * @param evt optional action event\r\n     */\r\n    public execute(evt?: ActionEvent): void {\r\n\r\n    }\r\n\r\n    /**\r\n     * Skips to next active action\r\n     */\r\n    public skipToNextActiveAction(): void {\r\n        if (this._nextActiveAction._child) {\r\n\r\n            if (!this._nextActiveAction._child._actionManager) {\r\n                this._nextActiveAction._child._actionManager = this._actionManager;\r\n            }\r\n\r\n            this._nextActiveAction = this._nextActiveAction._child;\r\n        } else {\r\n            this._nextActiveAction = this;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds action to chain of actions, may be a DoNothingAction\r\n     * @param action defines the next action to execute\r\n     * @returns The action passed in\r\n     * @see https://www.babylonjs-playground.com/#1T30HR#0\r\n     */\r\n    public then(action: Action): Action {\r\n        this._child = action;\r\n\r\n        action._actionManager = this._actionManager;\r\n        action._prepare();\r\n\r\n        return action;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    public _getProperty(propertyPath: string): string {\r\n        return this._actionManager._getProperty(propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    public _getEffectiveTarget(target: any, propertyPath: string): any {\r\n        return this._actionManager._getEffectiveTarget(target, propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Serialize placeholder for child classes\r\n     * @param parent of child\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n    }\r\n\r\n    /**\r\n     * Internal only called by serialize\r\n     * @hidden\r\n     */\r\n    protected _serialize(serializedAction: any, parent?: any): any {\r\n        var serializationObject: any = {\r\n            type: 1,\r\n            children: [],\r\n            name: serializedAction.name,\r\n            properties: serializedAction.properties || []\r\n        };\r\n\r\n        // Serialize child\r\n        if (this._child) {\r\n            this._child.serialize(serializationObject);\r\n        }\r\n\r\n        // Check if \"this\" has a condition\r\n        if (this._condition) {\r\n            var serializedCondition = this._condition.serialize();\r\n            serializedCondition.children.push(serializationObject);\r\n\r\n            if (parent) {\r\n                parent.children.push(serializedCondition);\r\n            }\r\n            return serializedCondition;\r\n        }\r\n\r\n        if (parent) {\r\n            parent.children.push(serializationObject);\r\n        }\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    public static _SerializeValueAsString = (value: any): string => {\r\n        if (typeof value === \"number\") {\r\n            return value.toString();\r\n        }\r\n\r\n        if (typeof value === \"boolean\") {\r\n            return value ? \"true\" : \"false\";\r\n        }\r\n\r\n        if (value instanceof Vector2) {\r\n            return value.x + \", \" + value.y;\r\n        }\r\n        if (value instanceof Vector3) {\r\n            return value.x + \", \" + value.y + \", \" + value.z;\r\n        }\r\n\r\n        if (value instanceof Color3) {\r\n            return value.r + \", \" + value.g + \", \" + value.b;\r\n        }\r\n        if (value instanceof Color4) {\r\n            return value.r + \", \" + value.g + \", \" + value.b + \", \" + value.a;\r\n        }\r\n\r\n        return value; // string\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    public static _GetTargetProperty = (target: Scene | Node) => {\r\n        return {\r\n            name: \"target\",\r\n            targetType: (<Mesh>target)._isMesh ? \"MeshProperties\"\r\n                : (<Light>target)._isLight ? \"LightProperties\"\r\n                    : (<Camera>target)._isCamera ? \"CameraProperties\"\r\n                        : \"SceneProperties\",\r\n            value: (<Scene>target)._isScene ? \"Scene\" : (<Node>target).name\r\n        };\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.Action\"] = Action;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}