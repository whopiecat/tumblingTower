{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine\";\n\nThinEngine.prototype._readTexturePixels = function (texture, width, height, faceIndex, level, buffer) {\n  if (faceIndex === void 0) {\n    faceIndex = -1;\n  }\n\n  if (level === void 0) {\n    level = 0;\n  }\n\n  if (buffer === void 0) {\n    buffer = null;\n  }\n\n  var gl = this._gl;\n\n  if (!gl) {\n    throw new Error(\"Engine does not have gl rendering context.\");\n  }\n\n  if (!this._dummyFramebuffer) {\n    var dummy = gl.createFramebuffer();\n\n    if (!dummy) {\n      throw new Error(\"Unable to create dummy framebuffer\");\n    }\n\n    this._dummyFramebuffer = dummy;\n  }\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this._dummyFramebuffer);\n\n  if (faceIndex > -1) {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, texture._webGLTexture, level);\n  } else {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._webGLTexture, level);\n  }\n\n  var readType = texture.type !== undefined ? this._getWebGLTextureType(texture.type) : gl.UNSIGNED_BYTE;\n\n  switch (readType) {\n    case gl.UNSIGNED_BYTE:\n      if (!buffer) {\n        buffer = new Uint8Array(4 * width * height);\n      }\n\n      readType = gl.UNSIGNED_BYTE;\n      break;\n\n    default:\n      if (!buffer) {\n        buffer = new Float32Array(4 * width * height);\n      }\n\n      readType = gl.FLOAT;\n      break;\n  }\n\n  gl.readPixels(0, 0, width, height, gl.RGBA, readType, buffer);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this._currentFramebuffer);\n  return buffer;\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/Extensions/engine.readTexture.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,0BAA3B;;AAWA,UAAU,CAAC,SAAX,CAAqB,kBAArB,GAA0C,UAAS,OAAT,EAAmC,KAAnC,EAAkD,MAAlD,EAAkE,SAAlE,EAAkF,KAAlF,EAA6F,MAA7F,EAAqI;AAAnE,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAa,CAAb;AAAc;;AAAE,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAS;;AAAE,MAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,IAAA;AAAwC;;AAC3K,MAAI,EAAE,GAAG,KAAK,GAAd;;AACA,MAAI,CAAC,EAAL,EAAS;AACL,UAAM,IAAI,KAAJ,CAAW,4CAAX,CAAN;AACH;;AACD,MAAI,CAAC,KAAK,iBAAV,EAA6B;AACzB,QAAI,KAAK,GAAG,EAAE,CAAC,iBAAH,EAAZ;;AAEA,QAAI,CAAC,KAAL,EAAY;AACR,YAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACH;;AAED,SAAK,iBAAL,GAAyB,KAAzB;AACH;;AACD,EAAA,EAAE,CAAC,eAAH,CAAmB,EAAE,CAAC,WAAtB,EAAmC,KAAK,iBAAxC;;AAEA,MAAI,SAAS,GAAG,CAAC,CAAjB,EAAoB;AAChB,IAAA,EAAE,CAAC,oBAAH,CAAwB,EAAE,CAAC,WAA3B,EAAwC,EAAE,CAAC,iBAA3C,EAA8D,EAAE,CAAC,2BAAH,GAAiC,SAA/F,EAA0G,OAAO,CAAC,aAAlH,EAAiI,KAAjI;AACH,GAFD,MAEO;AACH,IAAA,EAAE,CAAC,oBAAH,CAAwB,EAAE,CAAC,WAA3B,EAAwC,EAAE,CAAC,iBAA3C,EAA8D,EAAE,CAAC,UAAjE,EAA6E,OAAO,CAAC,aAArF,EAAoG,KAApG;AACH;;AAED,MAAI,QAAQ,GAAI,OAAO,CAAC,IAAR,KAAiB,SAAlB,GAA+B,KAAK,oBAAL,CAA0B,OAAO,CAAC,IAAlC,CAA/B,GAAyE,EAAE,CAAC,aAA3F;;AAEA,UAAQ,QAAR;AACI,SAAK,EAAE,CAAC,aAAR;AACI,UAAI,CAAC,MAAL,EAAa;AACT,QAAA,MAAM,GAAG,IAAI,UAAJ,CAAe,IAAI,KAAJ,GAAY,MAA3B,CAAT;AACH;;AACD,MAAA,QAAQ,GAAG,EAAE,CAAC,aAAd;AACA;;AACJ;AACI,UAAI,CAAC,MAAL,EAAa;AACT,QAAA,MAAM,GAAG,IAAI,YAAJ,CAAiB,IAAI,KAAJ,GAAY,MAA7B,CAAT;AACH;;AACD,MAAA,QAAQ,GAAG,EAAE,CAAC,KAAd;AACA;AAZR;;AAeA,EAAA,EAAE,CAAC,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAApB,EAA2B,MAA3B,EAAmC,EAAE,CAAC,IAAtC,EAA4C,QAA5C,EAAgE,MAAhE;AACA,EAAA,EAAE,CAAC,eAAH,CAAmB,EAAE,CAAC,WAAtB,EAAmC,KAAK,mBAAxC;AAEA,SAAO,MAAP;AACH,CA3CD","sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { InternalTexture } from '../../Materials/Textures/internalTexture';\r\nimport { Nullable } from '../../types';\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /** @hidden */\r\n        _readTexturePixels(texture: InternalTexture, width: number, height: number, faceIndex?: number, level?: number, buffer?: Nullable<ArrayBufferView>): ArrayBufferView;\r\n    }\r\n}\r\n\r\nThinEngine.prototype._readTexturePixels = function(texture: InternalTexture, width: number, height: number, faceIndex = -1, level = 0, buffer: Nullable<ArrayBufferView> = null): ArrayBufferView {\r\n    let gl = this._gl;\r\n    if (!gl) {\r\n        throw new Error (\"Engine does not have gl rendering context.\");\r\n    }\r\n    if (!this._dummyFramebuffer) {\r\n        let dummy = gl.createFramebuffer();\r\n\r\n        if (!dummy) {\r\n            throw new Error(\"Unable to create dummy framebuffer\");\r\n        }\r\n\r\n        this._dummyFramebuffer = dummy;\r\n    }\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._dummyFramebuffer);\r\n\r\n    if (faceIndex > -1) {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, texture._webGLTexture, level);\r\n    } else {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._webGLTexture, level);\r\n    }\r\n\r\n    let readType = (texture.type !== undefined) ? this._getWebGLTextureType(texture.type) : gl.UNSIGNED_BYTE;\r\n\r\n    switch (readType) {\r\n        case gl.UNSIGNED_BYTE:\r\n            if (!buffer) {\r\n                buffer = new Uint8Array(4 * width * height);\r\n            }\r\n            readType = gl.UNSIGNED_BYTE;\r\n            break;\r\n        default:\r\n            if (!buffer) {\r\n                buffer = new Float32Array(4 * width * height);\r\n            }\r\n            readType = gl.FLOAT;\r\n            break;\r\n    }\r\n\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, readType, <DataView>buffer);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._currentFramebuffer);\r\n\r\n    return buffer;\r\n};"],"sourceRoot":""},"metadata":{},"sourceType":"module"}