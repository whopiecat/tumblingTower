{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators\";\nimport { Color3 } from \"../../Maths/math.color\";\nimport { PBRBaseMaterial } from \"./pbrBaseMaterial\";\n/**\r\n * The Physically based simple base material of BJS.\r\n *\r\n * This enables better naming and convention enforcements on top of the pbrMaterial.\r\n * It is used as the base class for both the specGloss and metalRough conventions.\r\n */\n\nvar PBRBaseSimpleMaterial =\n/** @class */\nfunction (_super) {\n  __extends(PBRBaseSimpleMaterial, _super);\n  /**\r\n   * Instantiates a new PBRMaterial instance.\r\n   *\r\n   * @param name The material name\r\n   * @param scene The scene the material will be use in.\r\n   */\n\n\n  function PBRBaseSimpleMaterial(name, scene) {\n    var _this = _super.call(this, name, scene) || this;\n    /**\r\n     * Number of Simultaneous lights allowed on the material.\r\n     */\n\n\n    _this.maxSimultaneousLights = 4;\n    /**\r\n     * If sets to true, disables all the lights affecting the material.\r\n     */\n\n    _this.disableLighting = false;\n    /**\r\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\r\n     */\n\n    _this.invertNormalMapX = false;\n    /**\r\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\r\n     */\n\n    _this.invertNormalMapY = false;\n    /**\r\n     * Emissivie color used to self-illuminate the model.\r\n     */\n\n    _this.emissiveColor = new Color3(0, 0, 0);\n    /**\r\n     * Occlusion Channel Strenght.\r\n     */\n\n    _this.occlusionStrength = 1.0;\n    /**\r\n     * If true, the light map contains occlusion information instead of lighting info.\r\n     */\n\n    _this.useLightmapAsShadowmap = false;\n    _this._useAlphaFromAlbedoTexture = true;\n    _this._useAmbientInGrayScale = true;\n    return _this;\n  }\n\n  Object.defineProperty(PBRBaseSimpleMaterial.prototype, \"doubleSided\", {\n    /**\r\n     * Gets the current double sided mode.\r\n     */\n    get: function () {\n      return this._twoSidedLighting;\n    },\n\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\n    set: function (value) {\n      if (this._twoSidedLighting === value) {\n        return;\n      }\n\n      this._twoSidedLighting = value;\n      this.backFaceCulling = !value;\n\n      this._markAllSubMeshesAsTexturesDirty();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PBRBaseSimpleMaterial.prototype.getClassName = function () {\n    return \"PBRBaseSimpleMaterial\";\n  };\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsLightsDirty\")], PBRBaseSimpleMaterial.prototype, \"maxSimultaneousLights\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsLightsDirty\")], PBRBaseSimpleMaterial.prototype, \"disableLighting\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectionTexture\")], PBRBaseSimpleMaterial.prototype, \"environmentTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"invertNormalMapX\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"invertNormalMapY\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_bumpTexture\")], PBRBaseSimpleMaterial.prototype, \"normalTexture\", void 0);\n\n  __decorate([serializeAsColor3(\"emissive\"), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"emissiveColor\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"emissiveTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTextureStrength\")], PBRBaseSimpleMaterial.prototype, \"occlusionStrength\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTexture\")], PBRBaseSimpleMaterial.prototype, \"occlusionTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_alphaCutOff\")], PBRBaseSimpleMaterial.prototype, \"alphaCutOff\", void 0);\n\n  __decorate([serialize()], PBRBaseSimpleMaterial.prototype, \"doubleSided\", null);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", null)], PBRBaseSimpleMaterial.prototype, \"lightmapTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"useLightmapAsShadowmap\", void 0);\n\n  return PBRBaseSimpleMaterial;\n}(PBRBaseMaterial);\n\nexport { PBRBaseSimpleMaterial };","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/PBR/pbrBaseSimpleMaterial.ts"],"names":[],"mappings":"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","sourcesContent":["import { serialize, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { PBRBaseMaterial } from \"./pbrBaseMaterial\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\n\r\n/**\r\n * The Physically based simple base material of BJS.\r\n *\r\n * This enables better naming and convention enforcements on top of the pbrMaterial.\r\n * It is used as the base class for both the specGloss and metalRough conventions.\r\n */\r\nexport abstract class PBRBaseSimpleMaterial extends PBRBaseMaterial {\r\n\r\n    /**\r\n     * Number of Simultaneous lights allowed on the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights = 4;\r\n\r\n    /**\r\n     * If sets to true, disables all the lights affecting the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting = false;\r\n\r\n    /**\r\n     * Environment Texture used in the material (this is use for both reflection and environment lighting).\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectionTexture\")\r\n    public environmentTexture: BaseTexture;\r\n\r\n    /**\r\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapX = false;\r\n\r\n    /**\r\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapY = false;\r\n\r\n    /**\r\n     * Normal map used in the model.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_bumpTexture\")\r\n    public normalTexture: BaseTexture;\r\n\r\n    /**\r\n     * Emissivie color used to self-illuminate the model.\r\n     */\r\n    @serializeAsColor3(\"emissive\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * Emissivie texture used to self-illuminate the model.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveTexture: BaseTexture;\r\n\r\n    /**\r\n     * Occlusion Channel Strenght.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTextureStrength\")\r\n    public occlusionStrength: number = 1.0;\r\n\r\n    /**\r\n     * Occlusion Texture of the material (adding extra occlusion effects).\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTexture\")\r\n    public occlusionTexture: BaseTexture;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_alphaCutOff\")\r\n    public alphaCutOff: number;\r\n\r\n    /**\r\n     * Gets the current double sided mode.\r\n     */\r\n    @serialize()\r\n    public get doubleSided(): boolean {\r\n        return this._twoSidedLighting;\r\n    }\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\r\n    public set doubleSided(value: boolean) {\r\n        if (this._twoSidedLighting === value) {\r\n            return;\r\n        }\r\n        this._twoSidedLighting = value;\r\n        this.backFaceCulling = !value;\r\n        this._markAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Stores the pre-calculated light information of a mesh in a texture.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", null)\r\n    public lightmapTexture: BaseTexture;\r\n\r\n    /**\r\n     * If true, the light map contains occlusion information instead of lighting info.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useLightmapAsShadowmap = false;\r\n\r\n    /**\r\n     * Instantiates a new PBRMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n\r\n        this._useAlphaFromAlbedoTexture = true;\r\n        this._useAmbientInGrayScale = true;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"PBRBaseSimpleMaterial\";\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}