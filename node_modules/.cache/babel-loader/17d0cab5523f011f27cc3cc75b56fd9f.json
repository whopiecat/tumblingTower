{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/blackAndWhite.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, SerializationHelper } from '../Misc/decorators';\n/**\r\n * Post process used to render in black and white\r\n */\n\nvar BlackAndWhitePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(BlackAndWhitePostProcess, _super);\n  /**\r\n   * Creates a black and white post process\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#black-and-white\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   */\n\n\n  function BlackAndWhitePostProcess(name, options, camera, samplingMode, engine, reusable) {\n    var _this = _super.call(this, name, \"blackAndWhite\", [\"degree\"], null, options, camera, samplingMode, engine, reusable) || this;\n    /**\r\n     * Linear about to convert he result to black and white (default: 1)\r\n     */\n\n\n    _this.degree = 1;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setFloat(\"degree\", _this.degree);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"BlackAndWhitePostProcess\" string\r\n   */\n\n\n  BlackAndWhitePostProcess.prototype.getClassName = function () {\n    return \"BlackAndWhitePostProcess\";\n  };\n  /** @hidden */\n\n\n  BlackAndWhitePostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new BlackAndWhitePostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], BlackAndWhitePostProcess.prototype, \"degree\", void 0);\n\n  return BlackAndWhitePostProcess;\n}(PostProcess);\n\nexport { BlackAndWhitePostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.BlackAndWhitePostProcess\"] = BlackAndWhitePostProcess;","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/blackAndWhitePostProcess.ts"],"names":[],"mappings":";AAAA,SAAS,WAAT,QAAgD,eAAhD;AAKA,OAAO,mCAAP;AACA,SAAS,UAAT,QAA2B,mBAA3B;AACA,SAAS,SAAT,EAAoB,mBAApB,QAA+C,oBAA/C;AAKA;;;;AAGA,IAAA,wBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8C,EAAA,SAAA,CAAA,wBAAA,EAAA,MAAA,CAAA;AAe1C;;;;;;;;;;;;AAUA,WAAA,wBAAA,CAAY,IAAZ,EAA0B,OAA1B,EAAgE,MAAhE,EAAgF,YAAhF,EAAuG,MAAvG,EAAwH,QAAxH,EAA0I;AAA1I,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,eAAZ,EAA6B,CAAC,QAAD,CAA7B,EAAyC,IAAzC,EAA+C,OAA/C,EAAwD,MAAxD,EAAgE,YAAhE,EAA8E,MAA9E,EAAsF,QAAtF,KAA+F,IADnG;AAxBA;;;;;AAIO,IAAA,KAAA,CAAA,MAAA,GAAS,CAAT;;AAuBH,IAAA,KAAI,CAAC,iBAAL,CAAuB,GAAvB,CAA2B,UAAC,MAAD,EAAe;AACtC,MAAA,MAAM,CAAC,QAAP,CAAgB,QAAhB,EAA0B,KAAI,CAAC,MAA/B;AACH,KAFD;;;AAGH;AAxBD;;;;;;AAIO,EAAA,wBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,0BAAP;AACH,GAFM;AAsBP;;;AACc,EAAA,wBAAA,CAAA,MAAA,GAAd,UAAqB,iBAArB,EAA6C,YAA7C,EAAmE,KAAnE,EAAiF,OAAjF,EAAgG;AAC5F,WAAO,mBAAmB,CAAC,KAApB,CAA0B,YAAA;AAC7B,aAAO,IAAI,wBAAJ,CACH,iBAAiB,CAAC,IADf,EACqB,iBAAiB,CAAC,OADvC,EAEH,YAFG,EAEW,iBAAiB,CAAC,wBAF7B,EAGH,KAAK,CAAC,SAAN,EAHG,EAGgB,iBAAiB,CAAC,QAHlC,CAAP;AAIH,KALM,EAKJ,iBALI,EAKe,KALf,EAKsB,OALtB,CAAP;AAMH,GAPa;;AA7Bd,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,kCAAA,E,QAAA,E,KAAkB,CAAlB,CAAA;;AAqCJ,SAAA,wBAAA;AAAC,CA1CD,CAA8C,WAA9C,CAAA;;SAAa,wB;AA4Cb,UAAU,CAAC,eAAX,CAA2B,kCAA3B,IAAiE,wBAAjE","sourcesContent":["import { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/blackAndWhite.fragment\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { serialize, SerializationHelper } from '../Misc/decorators';\r\nimport { Nullable } from '../types';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Post process used to render in black and white\r\n */\r\nexport class BlackAndWhitePostProcess extends PostProcess {\r\n    /**\r\n     * Linear about to convert he result to black and white (default: 1)\r\n     */\r\n    @serialize()\r\n    public degree = 1;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"BlackAndWhitePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"BlackAndWhitePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a black and white post process\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#black-and-white\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Camera, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"blackAndWhite\", [\"degree\"], null, options, camera, samplingMode, engine, reusable);\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat(\"degree\", this.degree);\r\n        });\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<BlackAndWhitePostProcess> {\r\n        return SerializationHelper.Parse(() => {\r\n            return new BlackAndWhitePostProcess(\r\n                parsedPostProcess.name, parsedPostProcess.options,\r\n                targetCamera, parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.reusable);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.BlackAndWhitePostProcess\"] = BlackAndWhitePostProcess;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}