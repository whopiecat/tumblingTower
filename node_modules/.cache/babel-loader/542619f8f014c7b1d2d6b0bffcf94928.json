{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\nimport { Gamepad } from \"../../Gamepads/gamepad\";\n/**\r\n * Manage the gamepad inputs to control a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FreeCameraGamepadInput =\n/** @class */\nfunction () {\n  function FreeCameraGamepadInput() {\n    /**\r\n     * Defines the gamepad rotation sensiblity.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\n    this.gamepadAngularSensibility = 200;\n    /**\r\n     * Defines the gamepad move sensiblity.\r\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\r\n     */\n\n    this.gamepadMoveSensibility = 40;\n    this._yAxisScale = 1.0;\n    this._cameraTransform = Matrix.Identity();\n    this._deltaTransform = Vector3.Zero();\n    this._vector3 = Vector3.Zero();\n    this._vector2 = Vector2.Zero();\n  }\n\n  Object.defineProperty(FreeCameraGamepadInput.prototype, \"invertYAxis\", {\n    /**\r\n     * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\r\n     */\n    get: function () {\n      return this._yAxisScale !== 1.0;\n    },\n    set: function (value) {\n      this._yAxisScale = value ? -1.0 : 1.0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   */\n\n  FreeCameraGamepadInput.prototype.attachControl = function () {\n    var _this = this;\n\n    var manager = this.camera.getScene().gamepadManager;\n    this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add(function (gamepad) {\n      if (gamepad.type !== Gamepad.POSE_ENABLED) {\n        // prioritize XBOX gamepads.\n        if (!_this.gamepad || gamepad.type === Gamepad.XBOX) {\n          _this.gamepad = gamepad;\n        }\n      }\n    });\n    this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add(function (gamepad) {\n      if (_this.gamepad === gamepad) {\n        _this.gamepad = null;\n      }\n    }); // check if there are already other controllers connected\n\n    this.gamepad = manager.getGamepadByType(Gamepad.XBOX); // if no xbox controller was found, but there are gamepad controllers, take the first one\n\n    if (!this.gamepad && manager.gamepads.length) {\n      this.gamepad = manager.gamepads[0];\n    }\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FreeCameraGamepadInput.prototype.detachControl = function (ignored) {\n    this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\n    this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\n    this.gamepad = null;\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  FreeCameraGamepadInput.prototype.checkInputs = function () {\n    if (this.gamepad && this.gamepad.leftStick) {\n      var camera = this.camera;\n      var LSValues = this.gamepad.leftStick;\n      var normalizedLX = LSValues.x / this.gamepadMoveSensibility;\n      var normalizedLY = LSValues.y / this.gamepadMoveSensibility;\n      LSValues.x = Math.abs(normalizedLX) > 0.005 ? 0 + normalizedLX : 0;\n      LSValues.y = Math.abs(normalizedLY) > 0.005 ? 0 + normalizedLY : 0;\n      var RSValues = this.gamepad.rightStick;\n\n      if (RSValues) {\n        var normalizedRX = RSValues.x / this.gamepadAngularSensibility;\n        var normalizedRY = RSValues.y / this.gamepadAngularSensibility * this._yAxisScale;\n        RSValues.x = Math.abs(normalizedRX) > 0.001 ? 0 + normalizedRX : 0;\n        RSValues.y = Math.abs(normalizedRY) > 0.001 ? 0 + normalizedRY : 0;\n      } else {\n        RSValues = {\n          x: 0,\n          y: 0\n        };\n      }\n\n      if (!camera.rotationQuaternion) {\n        Matrix.RotationYawPitchRollToRef(camera.rotation.y, camera.rotation.x, 0, this._cameraTransform);\n      } else {\n        camera.rotationQuaternion.toRotationMatrix(this._cameraTransform);\n      }\n\n      var speed = camera._computeLocalCameraSpeed() * 50.0;\n\n      this._vector3.copyFromFloats(LSValues.x * speed, 0, -LSValues.y * speed);\n\n      Vector3.TransformCoordinatesToRef(this._vector3, this._cameraTransform, this._deltaTransform);\n      camera.cameraDirection.addInPlace(this._deltaTransform);\n\n      this._vector2.copyFromFloats(RSValues.y, RSValues.x);\n\n      camera.cameraRotation.addInPlace(this._vector2);\n    }\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  FreeCameraGamepadInput.prototype.getClassName = function () {\n    return \"FreeCameraGamepadInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FreeCameraGamepadInput.prototype.getSimpleName = function () {\n    return \"gamepad\";\n  };\n\n  __decorate([serialize()], FreeCameraGamepadInput.prototype, \"gamepadAngularSensibility\", void 0);\n\n  __decorate([serialize()], FreeCameraGamepadInput.prototype, \"gamepadMoveSensibility\", void 0);\n\n  return FreeCameraGamepadInput;\n}();\n\nexport { FreeCameraGamepadInput };\nCameraInputTypes[\"FreeCameraGamepadInput\"] = FreeCameraGamepadInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/freeCameraGamepadInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { serialize } from \"../../Misc/decorators\";\r\nimport { Observer } from \"../../Misc/observable\";\r\nimport { Nullable } from \"../../types\";\r\nimport { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\n\r\n/**\r\n * Manage the gamepad inputs to control a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FreeCameraGamepadInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Define the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Define the Gamepad controlling the input\r\n     */\r\n    public gamepad: Nullable<Gamepad>;\r\n\r\n    /**\r\n     * Defines the gamepad rotation sensiblity.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\r\n    @serialize()\r\n    public gamepadAngularSensibility = 200;\r\n\r\n    /**\r\n     * Defines the gamepad move sensiblity.\r\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\r\n     */\r\n    @serialize()\r\n    public gamepadMoveSensibility = 40;\r\n\r\n    private _yAxisScale = 1.0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\r\n     */\r\n    public get invertYAxis() {\r\n        return this._yAxisScale !== 1.0;\r\n    }\r\n\r\n    public set invertYAxis(value: boolean) {\r\n        this._yAxisScale = value ? -1.0 : 1.0;\r\n    }\r\n\r\n    // private members\r\n    private _onGamepadConnectedObserver: Nullable<Observer<Gamepad>>;\r\n    private _onGamepadDisconnectedObserver: Nullable<Observer<Gamepad>>;\r\n    private _cameraTransform: Matrix = Matrix.Identity();\r\n    private _deltaTransform: Vector3 = Vector3.Zero();\r\n    private _vector3: Vector3 = Vector3.Zero();\r\n    private _vector2: Vector2 = Vector2.Zero();\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     */\r\n    public attachControl(): void {\r\n        let manager = this.camera.getScene().gamepadManager;\r\n        this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add((gamepad) => {\r\n            if (gamepad.type !== Gamepad.POSE_ENABLED) {\r\n                // prioritize XBOX gamepads.\r\n                if (!this.gamepad || gamepad.type === Gamepad.XBOX) {\r\n                    this.gamepad = gamepad;\r\n                }\r\n            }\r\n        });\r\n\r\n        this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add((gamepad) => {\r\n            if (this.gamepad === gamepad) {\r\n                this.gamepad = null;\r\n            }\r\n        });\r\n\r\n        // check if there are already other controllers connected\r\n        this.gamepad = manager.getGamepadByType(Gamepad.XBOX);\r\n        // if no xbox controller was found, but there are gamepad controllers, take the first one\r\n        if (!this.gamepad && manager.gamepads.length) {\r\n            this.gamepad = manager.gamepads[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\r\n        this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\r\n        this.gamepad = null;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this.gamepad && this.gamepad.leftStick) {\r\n            var camera = this.camera;\r\n            var LSValues = this.gamepad.leftStick;\r\n            var normalizedLX = LSValues.x / this.gamepadMoveSensibility;\r\n            var normalizedLY = LSValues.y / this.gamepadMoveSensibility;\r\n            LSValues.x = Math.abs(normalizedLX) > 0.005 ? 0 + normalizedLX : 0;\r\n            LSValues.y = Math.abs(normalizedLY) > 0.005 ? 0 + normalizedLY : 0;\r\n\r\n            var RSValues = this.gamepad.rightStick;\r\n            if (RSValues) {\r\n                var normalizedRX = RSValues.x / this.gamepadAngularSensibility;\r\n                var normalizedRY = (RSValues.y / this.gamepadAngularSensibility) * this._yAxisScale;\r\n                RSValues.x = Math.abs(normalizedRX) > 0.001 ? 0 + normalizedRX : 0;\r\n                RSValues.y = Math.abs(normalizedRY) > 0.001 ? 0 + normalizedRY : 0;\r\n            } else {\r\n                RSValues = { x: 0, y: 0 };\r\n            }\r\n\r\n            if (!camera.rotationQuaternion) {\r\n                Matrix.RotationYawPitchRollToRef(camera.rotation.y, camera.rotation.x, 0, this._cameraTransform);\r\n            } else {\r\n                camera.rotationQuaternion.toRotationMatrix(this._cameraTransform);\r\n            }\r\n\r\n            var speed = camera._computeLocalCameraSpeed() * 50.0;\r\n            this._vector3.copyFromFloats(LSValues.x * speed, 0, -LSValues.y * speed);\r\n\r\n            Vector3.TransformCoordinatesToRef(this._vector3, this._cameraTransform, this._deltaTransform);\r\n            camera.cameraDirection.addInPlace(this._deltaTransform);\r\n            this._vector2.copyFromFloats(RSValues.y, RSValues.x);\r\n            camera.cameraRotation.addInPlace(this._vector2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraGamepadInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"gamepad\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraGamepadInput\"] = FreeCameraGamepadInput;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}