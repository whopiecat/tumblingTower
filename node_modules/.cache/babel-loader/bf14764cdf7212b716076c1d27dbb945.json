{"ast":null,"code":"import { Tools } from \"../Misc/tools\";\nimport { PerfCounter } from '../Misc/perfCounter';\n/**\r\n * This class can be used to get instrumentation data from a Babylon engine\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#sceneinstrumentation\r\n */\n\nvar SceneInstrumentation =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new scene instrumentation.\r\n   * This class can be used to get instrumentation data from a Babylon engine\r\n   * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#sceneinstrumentation\r\n   * @param scene Defines the scene to instrument\r\n   */\n  function SceneInstrumentation(\n  /**\r\n   * Defines the scene to instrument\r\n   */\n  scene) {\n    var _this = this;\n\n    this.scene = scene;\n    this._captureActiveMeshesEvaluationTime = false;\n    this._activeMeshesEvaluationTime = new PerfCounter();\n    this._captureRenderTargetsRenderTime = false;\n    this._renderTargetsRenderTime = new PerfCounter();\n    this._captureFrameTime = false;\n    this._frameTime = new PerfCounter();\n    this._captureRenderTime = false;\n    this._renderTime = new PerfCounter();\n    this._captureInterFrameTime = false;\n    this._interFrameTime = new PerfCounter();\n    this._captureParticlesRenderTime = false;\n    this._particlesRenderTime = new PerfCounter();\n    this._captureSpritesRenderTime = false;\n    this._spritesRenderTime = new PerfCounter();\n    this._capturePhysicsTime = false;\n    this._physicsTime = new PerfCounter();\n    this._captureAnimationsTime = false;\n    this._animationsTime = new PerfCounter();\n    this._captureCameraRenderTime = false;\n    this._cameraRenderTime = new PerfCounter(); // Observers\n\n    this._onBeforeActiveMeshesEvaluationObserver = null;\n    this._onAfterActiveMeshesEvaluationObserver = null;\n    this._onBeforeRenderTargetsRenderObserver = null;\n    this._onAfterRenderTargetsRenderObserver = null;\n    this._onAfterRenderObserver = null;\n    this._onBeforeDrawPhaseObserver = null;\n    this._onAfterDrawPhaseObserver = null;\n    this._onBeforeAnimationsObserver = null;\n    this._onBeforeParticlesRenderingObserver = null;\n    this._onAfterParticlesRenderingObserver = null;\n    this._onBeforeSpritesRenderingObserver = null;\n    this._onAfterSpritesRenderingObserver = null;\n    this._onBeforePhysicsObserver = null;\n    this._onAfterPhysicsObserver = null;\n    this._onAfterAnimationsObserver = null;\n    this._onBeforeCameraRenderObserver = null;\n    this._onAfterCameraRenderObserver = null; // Before render\n\n    this._onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(function () {\n      if (_this._captureActiveMeshesEvaluationTime) {\n        _this._activeMeshesEvaluationTime.fetchNewFrame();\n      }\n\n      if (_this._captureRenderTargetsRenderTime) {\n        _this._renderTargetsRenderTime.fetchNewFrame();\n      }\n\n      if (_this._captureFrameTime) {\n        Tools.StartPerformanceCounter(\"Scene rendering\");\n\n        _this._frameTime.beginMonitoring();\n      }\n\n      if (_this._captureInterFrameTime) {\n        _this._interFrameTime.endMonitoring();\n      }\n\n      if (_this._captureParticlesRenderTime) {\n        _this._particlesRenderTime.fetchNewFrame();\n      }\n\n      if (_this._captureSpritesRenderTime) {\n        _this._spritesRenderTime.fetchNewFrame();\n      }\n\n      if (_this._captureAnimationsTime) {\n        _this._animationsTime.beginMonitoring();\n      }\n\n      _this.scene.getEngine()._drawCalls.fetchNewFrame();\n    }); // After render\n\n    this._onAfterRenderObserver = scene.onAfterRenderObservable.add(function () {\n      if (_this._captureFrameTime) {\n        Tools.EndPerformanceCounter(\"Scene rendering\");\n\n        _this._frameTime.endMonitoring();\n      }\n\n      if (_this._captureRenderTime) {\n        _this._renderTime.endMonitoring(false);\n      }\n\n      if (_this._captureInterFrameTime) {\n        _this._interFrameTime.beginMonitoring();\n      }\n    });\n  }\n\n  Object.defineProperty(SceneInstrumentation.prototype, \"activeMeshesEvaluationTimeCounter\", {\n    // Properties\n\n    /**\r\n     * Gets the perf counter used for active meshes evaluation time\r\n     */\n    get: function () {\n      return this._activeMeshesEvaluationTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureActiveMeshesEvaluationTime\", {\n    /**\r\n     * Gets the active meshes evaluation time capture status\r\n     */\n    get: function () {\n      return this._captureActiveMeshesEvaluationTime;\n    },\n\n    /**\r\n     * Enable or disable the active meshes evaluation time capture\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (value === this._captureActiveMeshesEvaluationTime) {\n        return;\n      }\n\n      this._captureActiveMeshesEvaluationTime = value;\n\n      if (value) {\n        this._onBeforeActiveMeshesEvaluationObserver = this.scene.onBeforeActiveMeshesEvaluationObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Active meshes evaluation\");\n\n          _this._activeMeshesEvaluationTime.beginMonitoring();\n        });\n        this._onAfterActiveMeshesEvaluationObserver = this.scene.onAfterActiveMeshesEvaluationObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Active meshes evaluation\");\n\n          _this._activeMeshesEvaluationTime.endMonitoring();\n        });\n      } else {\n        this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\n        this._onBeforeActiveMeshesEvaluationObserver = null;\n        this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\n        this._onAfterActiveMeshesEvaluationObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"renderTargetsRenderTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for render targets render time\r\n     */\n    get: function () {\n      return this._renderTargetsRenderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureRenderTargetsRenderTime\", {\n    /**\r\n     * Gets the render targets render time capture status\r\n     */\n    get: function () {\n      return this._captureRenderTargetsRenderTime;\n    },\n\n    /**\r\n     * Enable or disable the render targets render time capture\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (value === this._captureRenderTargetsRenderTime) {\n        return;\n      }\n\n      this._captureRenderTargetsRenderTime = value;\n\n      if (value) {\n        this._onBeforeRenderTargetsRenderObserver = this.scene.onBeforeRenderTargetsRenderObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Render targets rendering\");\n\n          _this._renderTargetsRenderTime.beginMonitoring();\n        });\n        this._onAfterRenderTargetsRenderObserver = this.scene.onAfterRenderTargetsRenderObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Render targets rendering\");\n\n          _this._renderTargetsRenderTime.endMonitoring(false);\n        });\n      } else {\n        this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\n        this._onBeforeRenderTargetsRenderObserver = null;\n        this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\n        this._onAfterRenderTargetsRenderObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"particlesRenderTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for particles render time\r\n     */\n    get: function () {\n      return this._particlesRenderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureParticlesRenderTime\", {\n    /**\r\n     * Gets the particles render time capture status\r\n     */\n    get: function () {\n      return this._captureParticlesRenderTime;\n    },\n\n    /**\r\n     * Enable or disable the particles render time capture\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (value === this._captureParticlesRenderTime) {\n        return;\n      }\n\n      this._captureParticlesRenderTime = value;\n\n      if (value) {\n        this._onBeforeParticlesRenderingObserver = this.scene.onBeforeParticlesRenderingObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Particles\");\n\n          _this._particlesRenderTime.beginMonitoring();\n        });\n        this._onAfterParticlesRenderingObserver = this.scene.onAfterParticlesRenderingObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Particles\");\n\n          _this._particlesRenderTime.endMonitoring(false);\n        });\n      } else {\n        this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\n        this._onBeforeParticlesRenderingObserver = null;\n        this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\n        this._onAfterParticlesRenderingObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"spritesRenderTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for sprites render time\r\n     */\n    get: function () {\n      return this._spritesRenderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureSpritesRenderTime\", {\n    /**\r\n     * Gets the sprites render time capture status\r\n     */\n    get: function () {\n      return this._captureSpritesRenderTime;\n    },\n\n    /**\r\n     * Enable or disable the sprites render time capture\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (value === this._captureSpritesRenderTime) {\n        return;\n      }\n\n      this._captureSpritesRenderTime = value;\n\n      if (!this.scene.spriteManagers) {\n        return;\n      }\n\n      if (value) {\n        this._onBeforeSpritesRenderingObserver = this.scene.onBeforeSpritesRenderingObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Sprites\");\n\n          _this._spritesRenderTime.beginMonitoring();\n        });\n        this._onAfterSpritesRenderingObserver = this.scene.onAfterSpritesRenderingObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Sprites\");\n\n          _this._spritesRenderTime.endMonitoring(false);\n        });\n      } else {\n        this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\n        this._onBeforeSpritesRenderingObserver = null;\n        this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\n        this._onAfterSpritesRenderingObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"physicsTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for physics time\r\n     */\n    get: function () {\n      return this._physicsTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"capturePhysicsTime\", {\n    /**\r\n     * Gets the physics time capture status\r\n     */\n    get: function () {\n      return this._capturePhysicsTime;\n    },\n\n    /**\r\n     * Enable or disable the physics time capture\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (value === this._capturePhysicsTime) {\n        return;\n      }\n\n      if (!this.scene.onBeforePhysicsObservable) {\n        return;\n      }\n\n      this._capturePhysicsTime = value;\n\n      if (value) {\n        this._onBeforePhysicsObserver = this.scene.onBeforePhysicsObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Physics\");\n\n          _this._physicsTime.beginMonitoring();\n        });\n        this._onAfterPhysicsObserver = this.scene.onAfterPhysicsObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Physics\");\n\n          _this._physicsTime.endMonitoring();\n        });\n      } else {\n        this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\n        this._onBeforePhysicsObserver = null;\n        this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\n        this._onAfterPhysicsObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"animationsTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for animations time\r\n     */\n    get: function () {\n      return this._animationsTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureAnimationsTime\", {\n    /**\r\n     * Gets the animations time capture status\r\n     */\n    get: function () {\n      return this._captureAnimationsTime;\n    },\n\n    /**\r\n     * Enable or disable the animations time capture\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (value === this._captureAnimationsTime) {\n        return;\n      }\n\n      this._captureAnimationsTime = value;\n\n      if (value) {\n        this._onAfterAnimationsObserver = this.scene.onAfterAnimationsObservable.add(function () {\n          _this._animationsTime.endMonitoring();\n        });\n      } else {\n        this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\n        this._onAfterAnimationsObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"frameTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for frame time capture\r\n     */\n    get: function () {\n      return this._frameTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureFrameTime\", {\n    /**\r\n     * Gets the frame time capture status\r\n     */\n    get: function () {\n      return this._captureFrameTime;\n    },\n\n    /**\r\n     * Enable or disable the frame time capture\r\n     */\n    set: function (value) {\n      this._captureFrameTime = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"interFrameTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for inter-frames time capture\r\n     */\n    get: function () {\n      return this._interFrameTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureInterFrameTime\", {\n    /**\r\n     * Gets the inter-frames time capture status\r\n     */\n    get: function () {\n      return this._captureInterFrameTime;\n    },\n\n    /**\r\n     * Enable or disable the inter-frames time capture\r\n     */\n    set: function (value) {\n      this._captureInterFrameTime = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"renderTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for render time capture\r\n     */\n    get: function () {\n      return this._renderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureRenderTime\", {\n    /**\r\n     * Gets the render time capture status\r\n     */\n    get: function () {\n      return this._captureRenderTime;\n    },\n\n    /**\r\n     * Enable or disable the render time capture\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (value === this._captureRenderTime) {\n        return;\n      }\n\n      this._captureRenderTime = value;\n\n      if (value) {\n        this._onBeforeDrawPhaseObserver = this.scene.onBeforeDrawPhaseObservable.add(function () {\n          _this._renderTime.beginMonitoring();\n\n          Tools.StartPerformanceCounter(\"Main render\");\n        });\n        this._onAfterDrawPhaseObserver = this.scene.onAfterDrawPhaseObservable.add(function () {\n          _this._renderTime.endMonitoring(false);\n\n          Tools.EndPerformanceCounter(\"Main render\");\n        });\n      } else {\n        this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\n        this._onBeforeDrawPhaseObserver = null;\n        this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\n        this._onAfterDrawPhaseObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"cameraRenderTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for camera render time capture\r\n     */\n    get: function () {\n      return this._cameraRenderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureCameraRenderTime\", {\n    /**\r\n     * Gets the camera render time capture status\r\n     */\n    get: function () {\n      return this._captureCameraRenderTime;\n    },\n\n    /**\r\n     * Enable or disable the camera render time capture\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (value === this._captureCameraRenderTime) {\n        return;\n      }\n\n      this._captureCameraRenderTime = value;\n\n      if (value) {\n        this._onBeforeCameraRenderObserver = this.scene.onBeforeCameraRenderObservable.add(function (camera) {\n          _this._cameraRenderTime.beginMonitoring();\n\n          Tools.StartPerformanceCounter(\"Rendering camera \" + camera.name);\n        });\n        this._onAfterCameraRenderObserver = this.scene.onAfterCameraRenderObservable.add(function (camera) {\n          _this._cameraRenderTime.endMonitoring(false);\n\n          Tools.EndPerformanceCounter(\"Rendering camera \" + camera.name);\n        });\n      } else {\n        this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n        this._onBeforeCameraRenderObserver = null;\n        this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n        this._onAfterCameraRenderObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"drawCallsCounter\", {\n    /**\r\n     * Gets the perf counter used for draw calls\r\n     */\n    get: function () {\n      return this.scene.getEngine()._drawCalls;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Dispose and release associated resources.\r\n   */\n\n  SceneInstrumentation.prototype.dispose = function () {\n    this.scene.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n    this._onAfterRenderObserver = null;\n    this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\n    this._onBeforeActiveMeshesEvaluationObserver = null;\n    this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\n    this._onAfterActiveMeshesEvaluationObserver = null;\n    this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\n    this._onBeforeRenderTargetsRenderObserver = null;\n    this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\n    this._onAfterRenderTargetsRenderObserver = null;\n    this.scene.onBeforeAnimationsObservable.remove(this._onBeforeAnimationsObserver);\n    this._onBeforeAnimationsObserver = null;\n    this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\n    this._onBeforeParticlesRenderingObserver = null;\n    this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\n    this._onAfterParticlesRenderingObserver = null;\n\n    if (this._onBeforeSpritesRenderingObserver) {\n      this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\n      this._onBeforeSpritesRenderingObserver = null;\n    }\n\n    if (this._onAfterSpritesRenderingObserver) {\n      this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\n      this._onAfterSpritesRenderingObserver = null;\n    }\n\n    this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\n    this._onBeforeDrawPhaseObserver = null;\n    this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\n    this._onAfterDrawPhaseObserver = null;\n\n    if (this._onBeforePhysicsObserver) {\n      this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\n      this._onBeforePhysicsObserver = null;\n    }\n\n    if (this._onAfterPhysicsObserver) {\n      this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\n      this._onAfterPhysicsObserver = null;\n    }\n\n    this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\n    this._onAfterAnimationsObserver = null;\n    this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n    this._onBeforeCameraRenderObserver = null;\n    this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n    this._onAfterCameraRenderObserver = null;\n    this.scene = null;\n  };\n\n  return SceneInstrumentation;\n}();\n\nexport { SceneInstrumentation };","map":{"version":3,"sources":["../../../sourceES6/core/Instrumentation/sceneInstrumentation.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,eAAtB;AAKA,SAAS,WAAT,QAA4B,qBAA5B;AACA;;;;;AAIA,IAAA,oBAAA;AAAA;AAAA,YAAA;AAicI;;;;;;AAMA,WAAA,oBAAA;AACI;;;AAGO,EAAA,KAJX,EAIuB;AAJvB,QAAA,KAAA,GAAA,IAAA;;AAIW,SAAA,KAAA,GAAA,KAAA;AA1cH,SAAA,kCAAA,GAAqC,KAArC;AACA,SAAA,2BAAA,GAA8B,IAAI,WAAJ,EAA9B;AAEA,SAAA,+BAAA,GAAkC,KAAlC;AACA,SAAA,wBAAA,GAA2B,IAAI,WAAJ,EAA3B;AAEA,SAAA,iBAAA,GAAoB,KAApB;AACA,SAAA,UAAA,GAAa,IAAI,WAAJ,EAAb;AAEA,SAAA,kBAAA,GAAqB,KAArB;AACA,SAAA,WAAA,GAAc,IAAI,WAAJ,EAAd;AAEA,SAAA,sBAAA,GAAyB,KAAzB;AACA,SAAA,eAAA,GAAkB,IAAI,WAAJ,EAAlB;AAEA,SAAA,2BAAA,GAA8B,KAA9B;AACA,SAAA,oBAAA,GAAuB,IAAI,WAAJ,EAAvB;AAEA,SAAA,yBAAA,GAA4B,KAA5B;AACA,SAAA,kBAAA,GAAqB,IAAI,WAAJ,EAArB;AAEA,SAAA,mBAAA,GAAsB,KAAtB;AACA,SAAA,YAAA,GAAe,IAAI,WAAJ,EAAf;AAEA,SAAA,sBAAA,GAAyB,KAAzB;AACA,SAAA,eAAA,GAAkB,IAAI,WAAJ,EAAlB;AAEA,SAAA,wBAAA,GAA2B,KAA3B;AACA,SAAA,iBAAA,GAAoB,IAAI,WAAJ,EAApB,CA8ae,CA5avB;;AACQ,SAAA,uCAAA,GAAqE,IAArE;AACA,SAAA,sCAAA,GAAoE,IAApE;AACA,SAAA,oCAAA,GAAkE,IAAlE;AACA,SAAA,mCAAA,GAAiE,IAAjE;AAEA,SAAA,sBAAA,GAAoD,IAApD;AAEA,SAAA,0BAAA,GAAwD,IAAxD;AACA,SAAA,yBAAA,GAAuD,IAAvD;AAEA,SAAA,2BAAA,GAAyD,IAAzD;AAEA,SAAA,mCAAA,GAAiE,IAAjE;AACA,SAAA,kCAAA,GAAgE,IAAhE;AAEA,SAAA,iCAAA,GAA+D,IAA/D;AACA,SAAA,gCAAA,GAA8D,IAA9D;AAEA,SAAA,wBAAA,GAAsD,IAAtD;AACA,SAAA,uBAAA,GAAqD,IAArD;AAEA,SAAA,0BAAA,GAAwD,IAAxD;AAEA,SAAA,6BAAA,GAA4D,IAA5D;AACA,SAAA,4BAAA,GAA2D,IAA3D,CAmZe,CACnB;;AACA,SAAK,2BAAL,GAAmC,KAAK,CAAC,4BAAN,CAAmC,GAAnC,CAAuC,YAAA;AACtE,UAAI,KAAI,CAAC,kCAAT,EAA6C;AACzC,QAAA,KAAI,CAAC,2BAAL,CAAiC,aAAjC;AACH;;AAED,UAAI,KAAI,CAAC,+BAAT,EAA0C;AACtC,QAAA,KAAI,CAAC,wBAAL,CAA8B,aAA9B;AACH;;AAED,UAAI,KAAI,CAAC,iBAAT,EAA4B;AACxB,QAAA,KAAK,CAAC,uBAAN,CAA8B,iBAA9B;;AACA,QAAA,KAAI,CAAC,UAAL,CAAgB,eAAhB;AACH;;AAED,UAAI,KAAI,CAAC,sBAAT,EAAiC;AAC7B,QAAA,KAAI,CAAC,eAAL,CAAqB,aAArB;AACH;;AAED,UAAI,KAAI,CAAC,2BAAT,EAAsC;AAClC,QAAA,KAAI,CAAC,oBAAL,CAA0B,aAA1B;AACH;;AAED,UAAI,KAAI,CAAC,yBAAT,EAAoC;AAChC,QAAA,KAAI,CAAC,kBAAL,CAAwB,aAAxB;AACH;;AAED,UAAI,KAAI,CAAC,sBAAT,EAAiC;AAC7B,QAAA,KAAI,CAAC,eAAL,CAAqB,eAArB;AACH;;AAED,MAAA,KAAI,CAAC,KAAL,CAAW,SAAX,GAAuB,UAAvB,CAAkC,aAAlC;AACH,KA/BkC,CAAnC,CAFmB,CAmCnB;;AACA,SAAK,sBAAL,GAA8B,KAAK,CAAC,uBAAN,CAA8B,GAA9B,CAAkC,YAAA;AAC5D,UAAI,KAAI,CAAC,iBAAT,EAA4B;AACxB,QAAA,KAAK,CAAC,qBAAN,CAA4B,iBAA5B;;AACA,QAAA,KAAI,CAAC,UAAL,CAAgB,aAAhB;AACH;;AAED,UAAI,KAAI,CAAC,kBAAT,EAA6B;AACzB,QAAA,KAAI,CAAC,WAAL,CAAiB,aAAjB,CAA+B,KAA/B;AACH;;AAED,UAAI,KAAI,CAAC,sBAAT,EAAiC;AAC7B,QAAA,KAAI,CAAC,eAAL,CAAqB,eAArB;AACH;AACJ,KAb6B,CAA9B;AAcH;;AA/bD,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,mCAAX,EAA4C;AAJ5C;;AACA;;;SAGA,YAAA;AACI,aAAO,KAAK,2BAAZ;AACH,KAF2C;qBAAA;;AAAA,GAA5C;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,mCAAX,EAA4C;AAH5C;;;SAGA,YAAA;AACI,aAAO,KAAK,kCAAZ;AACH,KAF2C;;AAI5C;;;SAGA,UAA6C,KAA7C,EAA2D;AAA3D,UAAA,KAAA,GAAA,IAAA;;AACI,UAAI,KAAK,KAAK,KAAK,kCAAnB,EAAuD;AACnD;AACH;;AAED,WAAK,kCAAL,GAA0C,KAA1C;;AAEA,UAAI,KAAJ,EAAW;AACP,aAAK,uCAAL,GAA+C,KAAK,KAAL,CAAW,wCAAX,CAAoD,GAApD,CAAwD,YAAA;AACnG,UAAA,KAAK,CAAC,uBAAN,CAA8B,0BAA9B;;AACA,UAAA,KAAI,CAAC,2BAAL,CAAiC,eAAjC;AACH,SAH8C,CAA/C;AAKA,aAAK,sCAAL,GAA8C,KAAK,KAAL,CAAW,uCAAX,CAAmD,GAAnD,CAAuD,YAAA;AACjG,UAAA,KAAK,CAAC,qBAAN,CAA4B,0BAA5B;;AACA,UAAA,KAAI,CAAC,2BAAL,CAAiC,aAAjC;AACH,SAH6C,CAA9C;AAIH,OAVD,MAUO;AACH,aAAK,KAAL,CAAW,wCAAX,CAAoD,MAApD,CAA2D,KAAK,uCAAhE;AACA,aAAK,uCAAL,GAA+C,IAA/C;AAEA,aAAK,KAAL,CAAW,uCAAX,CAAmD,MAAnD,CAA0D,KAAK,sCAA/D;AACA,aAAK,sCAAL,GAA8C,IAA9C;AACH;AACJ,KA/B2C;qBAAA;;AAAA,GAA5C;AAoCA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,gCAAX,EAAyC;AAHzC;;;SAGA,YAAA;AACI,aAAO,KAAK,wBAAZ;AACH,KAFwC;qBAAA;;AAAA,GAAzC;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,gCAAX,EAAyC;AAHzC;;;SAGA,YAAA;AACI,aAAO,KAAK,+BAAZ;AACH,KAFwC;;AAIzC;;;SAGA,UAA0C,KAA1C,EAAwD;AAAxD,UAAA,KAAA,GAAA,IAAA;;AACI,UAAI,KAAK,KAAK,KAAK,+BAAnB,EAAoD;AAChD;AACH;;AAED,WAAK,+BAAL,GAAuC,KAAvC;;AAEA,UAAI,KAAJ,EAAW;AACP,aAAK,oCAAL,GAA4C,KAAK,KAAL,CAAW,qCAAX,CAAiD,GAAjD,CAAqD,YAAA;AAC7F,UAAA,KAAK,CAAC,uBAAN,CAA8B,0BAA9B;;AACA,UAAA,KAAI,CAAC,wBAAL,CAA8B,eAA9B;AACH,SAH2C,CAA5C;AAKA,aAAK,mCAAL,GAA2C,KAAK,KAAL,CAAW,oCAAX,CAAgD,GAAhD,CAAoD,YAAA;AAC3F,UAAA,KAAK,CAAC,qBAAN,CAA4B,0BAA5B;;AACA,UAAA,KAAI,CAAC,wBAAL,CAA8B,aAA9B,CAA4C,KAA5C;AACH,SAH0C,CAA3C;AAIH,OAVD,MAUO;AACH,aAAK,KAAL,CAAW,qCAAX,CAAiD,MAAjD,CAAwD,KAAK,oCAA7D;AACA,aAAK,oCAAL,GAA4C,IAA5C;AAEA,aAAK,KAAL,CAAW,oCAAX,CAAgD,MAAhD,CAAuD,KAAK,mCAA5D;AACA,aAAK,mCAAL,GAA2C,IAA3C;AACH;AACJ,KA/BwC;qBAAA;;AAAA,GAAzC;AAoCA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,4BAAX,EAAqC;AAHrC;;;SAGA,YAAA;AACI,aAAO,KAAK,oBAAZ;AACH,KAFoC;qBAAA;;AAAA,GAArC;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,4BAAX,EAAqC;AAHrC;;;SAGA,YAAA;AACI,aAAO,KAAK,2BAAZ;AACH,KAFoC;;AAIrC;;;SAGA,UAAsC,KAAtC,EAAoD;AAApD,UAAA,KAAA,GAAA,IAAA;;AACI,UAAI,KAAK,KAAK,KAAK,2BAAnB,EAAgD;AAC5C;AACH;;AAED,WAAK,2BAAL,GAAmC,KAAnC;;AAEA,UAAI,KAAJ,EAAW;AACP,aAAK,mCAAL,GAA2C,KAAK,KAAL,CAAW,oCAAX,CAAgD,GAAhD,CAAoD,YAAA;AAC3F,UAAA,KAAK,CAAC,uBAAN,CAA8B,WAA9B;;AACA,UAAA,KAAI,CAAC,oBAAL,CAA0B,eAA1B;AACH,SAH0C,CAA3C;AAKA,aAAK,kCAAL,GAA0C,KAAK,KAAL,CAAW,mCAAX,CAA+C,GAA/C,CAAmD,YAAA;AACzF,UAAA,KAAK,CAAC,qBAAN,CAA4B,WAA5B;;AACA,UAAA,KAAI,CAAC,oBAAL,CAA0B,aAA1B,CAAwC,KAAxC;AACH,SAHyC,CAA1C;AAIH,OAVD,MAUO;AACH,aAAK,KAAL,CAAW,oCAAX,CAAgD,MAAhD,CAAuD,KAAK,mCAA5D;AACA,aAAK,mCAAL,GAA2C,IAA3C;AAEA,aAAK,KAAL,CAAW,mCAAX,CAA+C,MAA/C,CAAsD,KAAK,kCAA3D;AACA,aAAK,kCAAL,GAA0C,IAA1C;AACH;AACJ,KA/BoC;qBAAA;;AAAA,GAArC;AAoCA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,0BAAX,EAAmC;AAHnC;;;SAGA,YAAA;AACI,aAAO,KAAK,kBAAZ;AACH,KAFkC;qBAAA;;AAAA,GAAnC;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,0BAAX,EAAmC;AAHnC;;;SAGA,YAAA;AACI,aAAO,KAAK,yBAAZ;AACH,KAFkC;;AAInC;;;SAGA,UAAoC,KAApC,EAAkD;AAAlD,UAAA,KAAA,GAAA,IAAA;;AACI,UAAI,KAAK,KAAK,KAAK,yBAAnB,EAA8C;AAC1C;AACH;;AAED,WAAK,yBAAL,GAAiC,KAAjC;;AAEA,UAAI,CAAC,KAAK,KAAL,CAAW,cAAhB,EAAgC;AAC5B;AACH;;AAED,UAAI,KAAJ,EAAW;AACP,aAAK,iCAAL,GAAyC,KAAK,KAAL,CAAW,kCAAX,CAA8C,GAA9C,CAAkD,YAAA;AACvF,UAAA,KAAK,CAAC,uBAAN,CAA8B,SAA9B;;AACA,UAAA,KAAI,CAAC,kBAAL,CAAwB,eAAxB;AACH,SAHwC,CAAzC;AAKA,aAAK,gCAAL,GAAwC,KAAK,KAAL,CAAW,iCAAX,CAA6C,GAA7C,CAAiD,YAAA;AACrF,UAAA,KAAK,CAAC,qBAAN,CAA4B,SAA5B;;AACA,UAAA,KAAI,CAAC,kBAAL,CAAwB,aAAxB,CAAsC,KAAtC;AACH,SAHuC,CAAxC;AAIH,OAVD,MAUO;AACH,aAAK,KAAL,CAAW,kCAAX,CAA8C,MAA9C,CAAqD,KAAK,iCAA1D;AACA,aAAK,iCAAL,GAAyC,IAAzC;AAEA,aAAK,KAAL,CAAW,iCAAX,CAA6C,MAA7C,CAAoD,KAAK,gCAAzD;AACA,aAAK,gCAAL,GAAwC,IAAxC;AACH;AACJ,KAnCkC;qBAAA;;AAAA,GAAnC;AAwCA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,oBAAX,EAA6B;AAH7B;;;SAGA,YAAA;AACI,aAAO,KAAK,YAAZ;AACH,KAF4B;qBAAA;;AAAA,GAA7B;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,oBAAX,EAA6B;AAH7B;;;SAGA,YAAA;AACI,aAAO,KAAK,mBAAZ;AACH,KAF4B;;AAI7B;;;SAGA,UAA8B,KAA9B,EAA4C;AAA5C,UAAA,KAAA,GAAA,IAAA;;AACI,UAAI,KAAK,KAAK,KAAK,mBAAnB,EAAwC;AACpC;AACH;;AAED,UAAI,CAAC,KAAK,KAAL,CAAW,yBAAhB,EAA2C;AACvC;AACH;;AAED,WAAK,mBAAL,GAA2B,KAA3B;;AAEA,UAAI,KAAJ,EAAW;AACP,aAAK,wBAAL,GAAgC,KAAK,KAAL,CAAW,yBAAX,CAAqC,GAArC,CAAyC,YAAA;AACrE,UAAA,KAAK,CAAC,uBAAN,CAA8B,SAA9B;;AACA,UAAA,KAAI,CAAC,YAAL,CAAkB,eAAlB;AACH,SAH+B,CAAhC;AAKA,aAAK,uBAAL,GAA+B,KAAK,KAAL,CAAW,wBAAX,CAAoC,GAApC,CAAwC,YAAA;AACnE,UAAA,KAAK,CAAC,qBAAN,CAA4B,SAA5B;;AACA,UAAA,KAAI,CAAC,YAAL,CAAkB,aAAlB;AACH,SAH8B,CAA/B;AAIH,OAVD,MAUO;AACH,aAAK,KAAL,CAAW,yBAAX,CAAqC,MAArC,CAA4C,KAAK,wBAAjD;AACA,aAAK,wBAAL,GAAgC,IAAhC;AAEA,aAAK,KAAL,CAAW,wBAAX,CAAoC,MAApC,CAA2C,KAAK,uBAAhD;AACA,aAAK,uBAAL,GAA+B,IAA/B;AACH;AACJ,KAnC4B;qBAAA;;AAAA,GAA7B;AAwCA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,uBAAX,EAAgC;AAHhC;;;SAGA,YAAA;AACI,aAAO,KAAK,eAAZ;AACH,KAF+B;qBAAA;;AAAA,GAAhC;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,uBAAX,EAAgC;AAHhC;;;SAGA,YAAA;AACI,aAAO,KAAK,sBAAZ;AACH,KAF+B;;AAIhC;;;SAGA,UAAiC,KAAjC,EAA+C;AAA/C,UAAA,KAAA,GAAA,IAAA;;AACI,UAAI,KAAK,KAAK,KAAK,sBAAnB,EAA2C;AACvC;AACH;;AAED,WAAK,sBAAL,GAA8B,KAA9B;;AAEA,UAAI,KAAJ,EAAW;AACP,aAAK,0BAAL,GAAkC,KAAK,KAAL,CAAW,2BAAX,CAAuC,GAAvC,CAA2C,YAAA;AACzE,UAAA,KAAI,CAAC,eAAL,CAAqB,aAArB;AACH,SAFiC,CAAlC;AAGH,OAJD,MAIO;AACH,aAAK,KAAL,CAAW,2BAAX,CAAuC,MAAvC,CAA8C,KAAK,0BAAnD;AACA,aAAK,0BAAL,GAAkC,IAAlC;AACH;AACJ,KAtB+B;qBAAA;;AAAA,GAAhC;AA2BA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,kBAAX,EAA2B;AAH3B;;;SAGA,YAAA;AACI,aAAO,KAAK,UAAZ;AACH,KAF0B;qBAAA;;AAAA,GAA3B;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,kBAAX,EAA2B;AAH3B;;;SAGA,YAAA;AACI,aAAO,KAAK,iBAAZ;AACH,KAF0B;;AAI3B;;;SAGA,UAA4B,KAA5B,EAA0C;AACtC,WAAK,iBAAL,GAAyB,KAAzB;AACH,KAT0B;qBAAA;;AAAA,GAA3B;AAcA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,uBAAX,EAAgC;AAHhC;;;SAGA,YAAA;AACI,aAAO,KAAK,eAAZ;AACH,KAF+B;qBAAA;;AAAA,GAAhC;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,uBAAX,EAAgC;AAHhC;;;SAGA,YAAA;AACI,aAAO,KAAK,sBAAZ;AACH,KAF+B;;AAIhC;;;SAGA,UAAiC,KAAjC,EAA+C;AAC3C,WAAK,sBAAL,GAA8B,KAA9B;AACH,KAT+B;qBAAA;;AAAA,GAAhC;AAcA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,mBAAX,EAA4B;AAH5B;;;SAGA,YAAA;AACI,aAAO,KAAK,WAAZ;AACH,KAF2B;qBAAA;;AAAA,GAA5B;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,mBAAX,EAA4B;AAH5B;;;SAGA,YAAA;AACI,aAAO,KAAK,kBAAZ;AACH,KAF2B;;AAI5B;;;SAGA,UAA6B,KAA7B,EAA2C;AAA3C,UAAA,KAAA,GAAA,IAAA;;AACI,UAAI,KAAK,KAAK,KAAK,kBAAnB,EAAuC;AACnC;AACH;;AAED,WAAK,kBAAL,GAA0B,KAA1B;;AAEA,UAAI,KAAJ,EAAW;AACP,aAAK,0BAAL,GAAkC,KAAK,KAAL,CAAW,2BAAX,CAAuC,GAAvC,CAA2C,YAAA;AACzE,UAAA,KAAI,CAAC,WAAL,CAAiB,eAAjB;;AACA,UAAA,KAAK,CAAC,uBAAN,CAA8B,aAA9B;AACH,SAHiC,CAAlC;AAKA,aAAK,yBAAL,GAAiC,KAAK,KAAL,CAAW,0BAAX,CAAsC,GAAtC,CAA0C,YAAA;AACvE,UAAA,KAAI,CAAC,WAAL,CAAiB,aAAjB,CAA+B,KAA/B;;AACA,UAAA,KAAK,CAAC,qBAAN,CAA4B,aAA5B;AACH,SAHgC,CAAjC;AAIH,OAVD,MAUO;AACH,aAAK,KAAL,CAAW,2BAAX,CAAuC,MAAvC,CAA8C,KAAK,0BAAnD;AACA,aAAK,0BAAL,GAAkC,IAAlC;AACA,aAAK,KAAL,CAAW,0BAAX,CAAsC,MAAtC,CAA6C,KAAK,yBAAlD;AACA,aAAK,yBAAL,GAAiC,IAAjC;AACH;AACJ,KA9B2B;qBAAA;;AAAA,GAA5B;AAmCA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,yBAAX,EAAkC;AAHlC;;;SAGA,YAAA;AACI,aAAO,KAAK,iBAAZ;AACH,KAFiC;qBAAA;;AAAA,GAAlC;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,yBAAX,EAAkC;AAHlC;;;SAGA,YAAA;AACI,aAAO,KAAK,wBAAZ;AACH,KAFiC;;AAIlC;;;SAGA,UAAmC,KAAnC,EAAiD;AAAjD,UAAA,KAAA,GAAA,IAAA;;AACI,UAAI,KAAK,KAAK,KAAK,wBAAnB,EAA6C;AACzC;AACH;;AAED,WAAK,wBAAL,GAAgC,KAAhC;;AAEA,UAAI,KAAJ,EAAW;AACP,aAAK,6BAAL,GAAqC,KAAK,KAAL,CAAW,8BAAX,CAA0C,GAA1C,CAA8C,UAAC,MAAD,EAAO;AACtF,UAAA,KAAI,CAAC,iBAAL,CAAuB,eAAvB;;AACA,UAAA,KAAK,CAAC,uBAAN,CAA8B,sBAAoB,MAAM,CAAC,IAAzD;AACH,SAHoC,CAArC;AAKA,aAAK,4BAAL,GAAoC,KAAK,KAAL,CAAW,6BAAX,CAAyC,GAAzC,CAA6C,UAAC,MAAD,EAAO;AACpF,UAAA,KAAI,CAAC,iBAAL,CAAuB,aAAvB,CAAqC,KAArC;;AACA,UAAA,KAAK,CAAC,qBAAN,CAA4B,sBAAoB,MAAM,CAAC,IAAvD;AACH,SAHmC,CAApC;AAIH,OAVD,MAUO;AACH,aAAK,KAAL,CAAW,8BAAX,CAA0C,MAA1C,CAAiD,KAAK,6BAAtD;AACA,aAAK,6BAAL,GAAqC,IAArC;AACA,aAAK,KAAL,CAAW,6BAAX,CAAyC,MAAzC,CAAgD,KAAK,4BAArD;AACA,aAAK,4BAAL,GAAoC,IAApC;AACH;AACJ,KA9BiC;qBAAA;;AAAA,GAAlC;AAmCA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,kBAAX,EAA2B;AAH3B;;;SAGA,YAAA;AACI,aAAO,KAAK,KAAL,CAAW,SAAX,GAAuB,UAA9B;AACH,KAF0B;qBAAA;;AAAA,GAA3B;AAkEA;;;;AAGO,EAAA,oBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,SAAK,KAAL,CAAW,uBAAX,CAAmC,MAAnC,CAA0C,KAAK,sBAA/C;AACA,SAAK,sBAAL,GAA8B,IAA9B;AAEA,SAAK,KAAL,CAAW,wCAAX,CAAoD,MAApD,CAA2D,KAAK,uCAAhE;AACA,SAAK,uCAAL,GAA+C,IAA/C;AAEA,SAAK,KAAL,CAAW,uCAAX,CAAmD,MAAnD,CAA0D,KAAK,sCAA/D;AACA,SAAK,sCAAL,GAA8C,IAA9C;AAEA,SAAK,KAAL,CAAW,qCAAX,CAAiD,MAAjD,CAAwD,KAAK,oCAA7D;AACA,SAAK,oCAAL,GAA4C,IAA5C;AAEA,SAAK,KAAL,CAAW,oCAAX,CAAgD,MAAhD,CAAuD,KAAK,mCAA5D;AACA,SAAK,mCAAL,GAA2C,IAA3C;AAEA,SAAK,KAAL,CAAW,4BAAX,CAAwC,MAAxC,CAA+C,KAAK,2BAApD;AACA,SAAK,2BAAL,GAAmC,IAAnC;AAEA,SAAK,KAAL,CAAW,oCAAX,CAAgD,MAAhD,CAAuD,KAAK,mCAA5D;AACA,SAAK,mCAAL,GAA2C,IAA3C;AAEA,SAAK,KAAL,CAAW,mCAAX,CAA+C,MAA/C,CAAsD,KAAK,kCAA3D;AACA,SAAK,kCAAL,GAA0C,IAA1C;;AAEA,QAAI,KAAK,iCAAT,EAA4C;AACxC,WAAK,KAAL,CAAW,kCAAX,CAA8C,MAA9C,CAAqD,KAAK,iCAA1D;AACA,WAAK,iCAAL,GAAyC,IAAzC;AACH;;AAED,QAAI,KAAK,gCAAT,EAA2C;AACvC,WAAK,KAAL,CAAW,iCAAX,CAA6C,MAA7C,CAAoD,KAAK,gCAAzD;AACA,WAAK,gCAAL,GAAwC,IAAxC;AACH;;AAED,SAAK,KAAL,CAAW,2BAAX,CAAuC,MAAvC,CAA8C,KAAK,0BAAnD;AACA,SAAK,0BAAL,GAAkC,IAAlC;AAEA,SAAK,KAAL,CAAW,0BAAX,CAAsC,MAAtC,CAA6C,KAAK,yBAAlD;AACA,SAAK,yBAAL,GAAiC,IAAjC;;AAEA,QAAI,KAAK,wBAAT,EAAmC;AAC/B,WAAK,KAAL,CAAW,yBAAX,CAAqC,MAArC,CAA4C,KAAK,wBAAjD;AACA,WAAK,wBAAL,GAAgC,IAAhC;AACH;;AAED,QAAI,KAAK,uBAAT,EAAkC;AAC9B,WAAK,KAAL,CAAW,wBAAX,CAAoC,MAApC,CAA2C,KAAK,uBAAhD;AACA,WAAK,uBAAL,GAA+B,IAA/B;AACH;;AAED,SAAK,KAAL,CAAW,2BAAX,CAAuC,MAAvC,CAA8C,KAAK,0BAAnD;AACA,SAAK,0BAAL,GAAkC,IAAlC;AAEA,SAAK,KAAL,CAAW,8BAAX,CAA0C,MAA1C,CAAiD,KAAK,6BAAtD;AACA,SAAK,6BAAL,GAAqC,IAArC;AAEA,SAAK,KAAL,CAAW,6BAAX,CAAyC,MAAzC,CAAgD,KAAK,4BAArD;AACA,SAAK,4BAAL,GAAoC,IAApC;AAEM,SAAK,KAAL,GAAc,IAAd;AACT,GA7DM;;AA8DX,SAAA,oBAAA;AAAC,CAhkBD,EAAA","sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport { Observer } from \"../Misc/observable\";\r\nimport { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Scene, IDisposable } from \"../scene\";\r\nimport { PerfCounter } from '../Misc/perfCounter';\r\n/**\r\n * This class can be used to get instrumentation data from a Babylon engine\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#sceneinstrumentation\r\n */\r\nexport class SceneInstrumentation implements IDisposable {\r\n    private _captureActiveMeshesEvaluationTime = false;\r\n    private _activeMeshesEvaluationTime = new PerfCounter();\r\n\r\n    private _captureRenderTargetsRenderTime = false;\r\n    private _renderTargetsRenderTime = new PerfCounter();\r\n\r\n    private _captureFrameTime = false;\r\n    private _frameTime = new PerfCounter();\r\n\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureInterFrameTime = false;\r\n    private _interFrameTime = new PerfCounter();\r\n\r\n    private _captureParticlesRenderTime = false;\r\n    private _particlesRenderTime = new PerfCounter();\r\n\r\n    private _captureSpritesRenderTime = false;\r\n    private _spritesRenderTime = new PerfCounter();\r\n\r\n    private _capturePhysicsTime = false;\r\n    private _physicsTime = new PerfCounter();\r\n\r\n    private _captureAnimationsTime = false;\r\n    private _animationsTime = new PerfCounter();\r\n\r\n    private _captureCameraRenderTime = false;\r\n    private _cameraRenderTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeforeActiveMeshesEvaluationObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterActiveMeshesEvaluationObserver: Nullable<Observer<Scene>> = null;\r\n    private _onBeforeRenderTargetsRenderObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterRenderTargetsRenderObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onAfterRenderObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeDrawPhaseObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterDrawPhaseObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeAnimationsObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeParticlesRenderingObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterParticlesRenderingObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeSpritesRenderingObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterSpritesRenderingObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforePhysicsObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterPhysicsObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onAfterAnimationsObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeCameraRenderObserver: Nullable<Observer<Camera>> = null;\r\n    private _onAfterCameraRenderObserver: Nullable<Observer<Camera>> = null;\r\n\r\n    // Properties\r\n    /**\r\n     * Gets the perf counter used for active meshes evaluation time\r\n     */\r\n    public get activeMeshesEvaluationTimeCounter(): PerfCounter {\r\n        return this._activeMeshesEvaluationTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the active meshes evaluation time capture status\r\n     */\r\n    public get captureActiveMeshesEvaluationTime(): boolean {\r\n        return this._captureActiveMeshesEvaluationTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the active meshes evaluation time capture\r\n     */\r\n    public set captureActiveMeshesEvaluationTime(value: boolean) {\r\n        if (value === this._captureActiveMeshesEvaluationTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureActiveMeshesEvaluationTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeActiveMeshesEvaluationObserver = this.scene.onBeforeActiveMeshesEvaluationObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Active meshes evaluation\");\r\n                this._activeMeshesEvaluationTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterActiveMeshesEvaluationObserver = this.scene.onAfterActiveMeshesEvaluationObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Active meshes evaluation\");\r\n                this._activeMeshesEvaluationTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\r\n            this._onBeforeActiveMeshesEvaluationObserver = null;\r\n\r\n            this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\r\n            this._onAfterActiveMeshesEvaluationObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for render targets render time\r\n     */\r\n    public get renderTargetsRenderTimeCounter(): PerfCounter {\r\n        return this._renderTargetsRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the render targets render time capture status\r\n     */\r\n    public get captureRenderTargetsRenderTime(): boolean {\r\n        return this._captureRenderTargetsRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render targets render time capture\r\n     */\r\n    public set captureRenderTargetsRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTargetsRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTargetsRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeRenderTargetsRenderObserver = this.scene.onBeforeRenderTargetsRenderObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Render targets rendering\");\r\n                this._renderTargetsRenderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterRenderTargetsRenderObserver = this.scene.onAfterRenderTargetsRenderObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Render targets rendering\");\r\n                this._renderTargetsRenderTime.endMonitoring(false);\r\n            });\r\n        } else {\r\n            this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\r\n            this._onBeforeRenderTargetsRenderObserver = null;\r\n\r\n            this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\r\n            this._onAfterRenderTargetsRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for particles render time\r\n     */\r\n    public get particlesRenderTimeCounter(): PerfCounter {\r\n        return this._particlesRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the particles render time capture status\r\n     */\r\n    public get captureParticlesRenderTime(): boolean {\r\n        return this._captureParticlesRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the particles render time capture\r\n     */\r\n    public set captureParticlesRenderTime(value: boolean) {\r\n        if (value === this._captureParticlesRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureParticlesRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeParticlesRenderingObserver = this.scene.onBeforeParticlesRenderingObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Particles\");\r\n                this._particlesRenderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterParticlesRenderingObserver = this.scene.onAfterParticlesRenderingObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Particles\");\r\n                this._particlesRenderTime.endMonitoring(false);\r\n            });\r\n        } else {\r\n            this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\r\n            this._onBeforeParticlesRenderingObserver = null;\r\n\r\n            this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\r\n            this._onAfterParticlesRenderingObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for sprites render time\r\n     */\r\n    public get spritesRenderTimeCounter(): PerfCounter {\r\n        return this._spritesRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the sprites render time capture status\r\n     */\r\n    public get captureSpritesRenderTime(): boolean {\r\n        return this._captureSpritesRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the sprites render time capture\r\n     */\r\n    public set captureSpritesRenderTime(value: boolean) {\r\n        if (value === this._captureSpritesRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureSpritesRenderTime = value;\r\n\r\n        if (!this.scene.spriteManagers) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this._onBeforeSpritesRenderingObserver = this.scene.onBeforeSpritesRenderingObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Sprites\");\r\n                this._spritesRenderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterSpritesRenderingObserver = this.scene.onAfterSpritesRenderingObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Sprites\");\r\n                this._spritesRenderTime.endMonitoring(false);\r\n            });\r\n        } else {\r\n            this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\r\n            this._onBeforeSpritesRenderingObserver = null;\r\n\r\n            this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\r\n            this._onAfterSpritesRenderingObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for physics time\r\n     */\r\n    public get physicsTimeCounter(): PerfCounter {\r\n        return this._physicsTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the physics time capture status\r\n     */\r\n    public get capturePhysicsTime(): boolean {\r\n        return this._capturePhysicsTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the physics time capture\r\n     */\r\n    public set capturePhysicsTime(value: boolean) {\r\n        if (value === this._capturePhysicsTime) {\r\n            return;\r\n        }\r\n\r\n        if (!this.scene.onBeforePhysicsObservable) {\r\n            return;\r\n        }\r\n\r\n        this._capturePhysicsTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforePhysicsObserver = this.scene.onBeforePhysicsObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Physics\");\r\n                this._physicsTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterPhysicsObserver = this.scene.onAfterPhysicsObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Physics\");\r\n                this._physicsTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\r\n            this._onBeforePhysicsObserver = null;\r\n\r\n            this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\r\n            this._onAfterPhysicsObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for animations time\r\n     */\r\n    public get animationsTimeCounter(): PerfCounter {\r\n        return this._animationsTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the animations time capture status\r\n     */\r\n    public get captureAnimationsTime(): boolean {\r\n        return this._captureAnimationsTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the animations time capture\r\n     */\r\n    public set captureAnimationsTime(value: boolean) {\r\n        if (value === this._captureAnimationsTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureAnimationsTime = value;\r\n\r\n        if (value) {\r\n            this._onAfterAnimationsObserver = this.scene.onAfterAnimationsObservable.add(() => {\r\n                this._animationsTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\r\n            this._onAfterAnimationsObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for frame time capture\r\n     */\r\n    public get frameTimeCounter(): PerfCounter {\r\n        return this._frameTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the frame time capture status\r\n     */\r\n    public get captureFrameTime(): boolean {\r\n        return this._captureFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the frame time capture\r\n     */\r\n    public set captureFrameTime(value: boolean) {\r\n        this._captureFrameTime = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for inter-frames time capture\r\n     */\r\n    public get interFrameTimeCounter(): PerfCounter {\r\n        return this._interFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the inter-frames time capture status\r\n     */\r\n    public get captureInterFrameTime(): boolean {\r\n        return this._captureInterFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the inter-frames time capture\r\n     */\r\n    public set captureInterFrameTime(value: boolean) {\r\n        this._captureInterFrameTime = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for render time capture\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the render time capture status\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeDrawPhaseObserver = this.scene.onBeforeDrawPhaseObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n                Tools.StartPerformanceCounter(\"Main render\");\r\n            });\r\n\r\n            this._onAfterDrawPhaseObserver = this.scene.onAfterDrawPhaseObservable.add(() => {\r\n                this._renderTime.endMonitoring(false);\r\n                Tools.EndPerformanceCounter(\"Main render\");\r\n            });\r\n        } else {\r\n            this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\r\n            this._onBeforeDrawPhaseObserver = null;\r\n            this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\r\n            this._onAfterDrawPhaseObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for camera render time capture\r\n     */\r\n    public get cameraRenderTimeCounter(): PerfCounter {\r\n        return this._cameraRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the camera render time capture status\r\n     */\r\n    public get captureCameraRenderTime(): boolean {\r\n        return this._captureCameraRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the camera render time capture\r\n     */\r\n    public set captureCameraRenderTime(value: boolean) {\r\n        if (value === this._captureCameraRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureCameraRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeCameraRenderObserver = this.scene.onBeforeCameraRenderObservable.add((camera) => {\r\n                this._cameraRenderTime.beginMonitoring();\r\n                Tools.StartPerformanceCounter(`Rendering camera ${camera.name}`);\r\n            });\r\n\r\n            this._onAfterCameraRenderObserver = this.scene.onAfterCameraRenderObservable.add((camera) => {\r\n                this._cameraRenderTime.endMonitoring(false);\r\n                Tools.EndPerformanceCounter(`Rendering camera ${camera.name}`);\r\n            });\r\n        } else {\r\n            this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\r\n            this._onBeforeCameraRenderObserver = null;\r\n            this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\r\n            this._onAfterCameraRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for draw calls\r\n     */\r\n    public get drawCallsCounter(): PerfCounter {\r\n        return this.scene.getEngine()._drawCalls;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new scene instrumentation.\r\n     * This class can be used to get instrumentation data from a Babylon engine\r\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#sceneinstrumentation\r\n     * @param scene Defines the scene to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Defines the scene to instrument\r\n         */\r\n        public scene: Scene) {\r\n        // Before render\r\n        this._onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(() => {\r\n            if (this._captureActiveMeshesEvaluationTime) {\r\n                this._activeMeshesEvaluationTime.fetchNewFrame();\r\n            }\r\n\r\n            if (this._captureRenderTargetsRenderTime) {\r\n                this._renderTargetsRenderTime.fetchNewFrame();\r\n            }\r\n\r\n            if (this._captureFrameTime) {\r\n                Tools.StartPerformanceCounter(\"Scene rendering\");\r\n                this._frameTime.beginMonitoring();\r\n            }\r\n\r\n            if (this._captureInterFrameTime) {\r\n                this._interFrameTime.endMonitoring();\r\n            }\r\n\r\n            if (this._captureParticlesRenderTime) {\r\n                this._particlesRenderTime.fetchNewFrame();\r\n            }\r\n\r\n            if (this._captureSpritesRenderTime) {\r\n                this._spritesRenderTime.fetchNewFrame();\r\n            }\r\n\r\n            if (this._captureAnimationsTime) {\r\n                this._animationsTime.beginMonitoring();\r\n            }\r\n\r\n            this.scene.getEngine()._drawCalls.fetchNewFrame();\r\n        });\r\n\r\n        // After render\r\n        this._onAfterRenderObserver = scene.onAfterRenderObservable.add(() => {\r\n            if (this._captureFrameTime) {\r\n                Tools.EndPerformanceCounter(\"Scene rendering\");\r\n                this._frameTime.endMonitoring();\r\n            }\r\n\r\n            if (this._captureRenderTime) {\r\n                this._renderTime.endMonitoring(false);\r\n            }\r\n\r\n            if (this._captureInterFrameTime) {\r\n                this._interFrameTime.beginMonitoring();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.scene.onAfterRenderObservable.remove(this._onAfterRenderObserver);\r\n        this._onAfterRenderObserver = null;\r\n\r\n        this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\r\n        this._onBeforeActiveMeshesEvaluationObserver = null;\r\n\r\n        this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\r\n        this._onAfterActiveMeshesEvaluationObserver = null;\r\n\r\n        this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\r\n        this._onBeforeRenderTargetsRenderObserver = null;\r\n\r\n        this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\r\n        this._onAfterRenderTargetsRenderObserver = null;\r\n\r\n        this.scene.onBeforeAnimationsObservable.remove(this._onBeforeAnimationsObserver);\r\n        this._onBeforeAnimationsObserver = null;\r\n\r\n        this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\r\n        this._onBeforeParticlesRenderingObserver = null;\r\n\r\n        this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\r\n        this._onAfterParticlesRenderingObserver = null;\r\n\r\n        if (this._onBeforeSpritesRenderingObserver) {\r\n            this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\r\n            this._onBeforeSpritesRenderingObserver = null;\r\n        }\r\n\r\n        if (this._onAfterSpritesRenderingObserver) {\r\n            this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\r\n            this._onAfterSpritesRenderingObserver = null;\r\n        }\r\n\r\n        this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\r\n        this._onBeforeDrawPhaseObserver = null;\r\n\r\n        this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\r\n        this._onAfterDrawPhaseObserver = null;\r\n\r\n        if (this._onBeforePhysicsObserver) {\r\n            this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\r\n            this._onBeforePhysicsObserver = null;\r\n        }\r\n\r\n        if (this._onAfterPhysicsObserver) {\r\n            this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\r\n            this._onAfterPhysicsObserver = null;\r\n        }\r\n\r\n        this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\r\n        this._onAfterAnimationsObserver = null;\r\n\r\n        this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\r\n        this._onBeforeCameraRenderObserver = null;\r\n\r\n        this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\r\n        this._onAfterCameraRenderObserver = null;\r\n\r\n        (<any>this.scene) = null;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}