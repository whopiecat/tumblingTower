{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { TextureDome } from \"./textureDome\";\n/**\r\n * Display a 360 degree photo on an approximately spherical surface, useful for VR applications or skyboxes.\r\n * As a subclass of TransformNode, this allow parenting to the camera with different locations in the scene.\r\n * This class achieves its effect with a Texture and a correctly configured BackgroundMaterial on an inverted sphere.\r\n * Potential additions to this helper include zoom and and non-infinite distance rendering effects.\r\n */\n\nvar PhotoDome =\n/** @class */\nfunction (_super) {\n  __extends(PhotoDome, _super);\n\n  function PhotoDome() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(PhotoDome.prototype, \"photoTexture\", {\n    /**\r\n     * Gets or sets the texture being displayed on the sphere\r\n     */\n    get: function () {\n      return this.texture;\n    },\n\n    /**\r\n     * sets the texture being displayed on the sphere\r\n     */\n    set: function (value) {\n      this.texture = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhotoDome.prototype, \"imageMode\", {\n    /**\r\n     * Gets the current video mode for the video. It can be:\r\n     * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\r\n     * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\r\n     * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\r\n     */\n    get: function () {\n      return this.textureMode;\n    },\n\n    /**\r\n     * Sets the current video mode for the video. It can be:\r\n     * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\r\n     * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\r\n     * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\r\n     */\n    set: function (value) {\n      this.textureMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PhotoDome.prototype._initTexture = function (urlsOrElement, scene, options) {\n    var _this = this;\n\n    return new Texture(urlsOrElement, scene, !options.generateMipMaps, !this._useDirectMapping, undefined, undefined, function (message, exception) {\n      _this.onLoadErrorObservable.notifyObservers(message || \"Unknown error occured\");\n\n      if (_this.onError) {\n        _this.onError(message, exception);\n      }\n    });\n  };\n  /**\r\n   * Define the image as a Monoscopic panoramic 360 image.\r\n   */\n\n\n  PhotoDome.MODE_MONOSCOPIC = TextureDome.MODE_MONOSCOPIC;\n  /**\r\n   * Define the image as a Stereoscopic TopBottom/OverUnder panoramic 360 image.\r\n   */\n\n  PhotoDome.MODE_TOPBOTTOM = TextureDome.MODE_TOPBOTTOM;\n  /**\r\n   * Define the image as a Stereoscopic Side by Side panoramic 360 image.\r\n   */\n\n  PhotoDome.MODE_SIDEBYSIDE = TextureDome.MODE_SIDEBYSIDE;\n  return PhotoDome;\n}(TextureDome);\n\nexport { PhotoDome };","map":{"version":3,"sources":["../../../sourceES6/core/Helpers/photoDome.ts"],"names":[],"mappings":";AACA,SAAS,OAAT,QAAwB,+BAAxB;AACA,SAAS,WAAT,QAA4B,eAA5B;AAEA;;;;;;;AAMA,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+B,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;;AAA/B,WAAA,SAAA,GAAA;;AAuDC;;AAvCG,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,cAAX,EAAuB;AAHvB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAZ;AACH,KAFsB;;AAIvB;;;SAGA,UAAwB,KAAxB,EAAsC;AAClC,WAAK,OAAL,GAAe,KAAf;AACH,KATsB;qBAAA;;AAAA,GAAvB;AAiBA,EAAA,MAAA,CAAA,cAAA,CAAW,SAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AANpB;;;;;;SAMA,YAAA;AACI,aAAO,KAAK,WAAZ;AACH,KAFmB;;AAGpB;;;;;;SAMA,UAAqB,KAArB,EAAkC;AAC9B,WAAK,WAAL,GAAmB,KAAnB;AACH,KAXmB;qBAAA;;AAAA,GAApB;;AAaU,EAAA,SAAA,CAAA,SAAA,CAAA,YAAA,GAAV,UAAuB,aAAvB,EAA8C,KAA9C,EAA4D,OAA5D,EAAwE;AAAxE,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO,IAAI,OAAJ,CAAY,aAAZ,EAA2B,KAA3B,EAAkC,CAAC,OAAO,CAAC,eAA3C,EAA4D,CAAC,KAAK,iBAAlE,EAAqF,SAArF,EAAgG,SAAhG,EAA2G,UAAC,OAAD,EAAU,SAAV,EAAmB;AACjI,MAAA,KAAI,CAAC,qBAAL,CAA2B,eAA3B,CAA2C,OAAO,IAAI,uBAAtD;;AAEA,UAAI,KAAI,CAAC,OAAT,EAAkB;AACd,QAAA,KAAI,CAAC,OAAL,CAAa,OAAb,EAAsB,SAAtB;AACH;AACJ,KANM,CAAP;AAOH,GARS;AA7CV;;;;;AAGuB,EAAA,SAAA,CAAA,eAAA,GAAkB,WAAW,CAAC,eAA9B;AACvB;;;;AAGuB,EAAA,SAAA,CAAA,cAAA,GAAiB,WAAW,CAAC,cAA7B;AACvB;;;;AAGuB,EAAA,SAAA,CAAA,eAAA,GAAkB,WAAW,CAAC,eAA9B;AA2C3B,SAAA,SAAA;AAAC,CAvDD,CAA+B,WAA/B,CAAA;;SAAa,S","sourcesContent":["import { Scene } from \"../scene\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { TextureDome } from \"./textureDome\";\r\n\r\n/**\r\n * Display a 360 degree photo on an approximately spherical surface, useful for VR applications or skyboxes.\r\n * As a subclass of TransformNode, this allow parenting to the camera with different locations in the scene.\r\n * This class achieves its effect with a Texture and a correctly configured BackgroundMaterial on an inverted sphere.\r\n * Potential additions to this helper include zoom and and non-infinite distance rendering effects.\r\n */\r\nexport class PhotoDome extends TextureDome<Texture> {\r\n    /**\r\n     * Define the image as a Monoscopic panoramic 360 image.\r\n     */\r\n    public static readonly MODE_MONOSCOPIC = TextureDome.MODE_MONOSCOPIC;\r\n    /**\r\n     * Define the image as a Stereoscopic TopBottom/OverUnder panoramic 360 image.\r\n     */\r\n    public static readonly MODE_TOPBOTTOM = TextureDome.MODE_TOPBOTTOM;\r\n    /**\r\n     * Define the image as a Stereoscopic Side by Side panoramic 360 image.\r\n     */\r\n    public static readonly MODE_SIDEBYSIDE = TextureDome.MODE_SIDEBYSIDE;\r\n    /**\r\n     * Gets or sets the texture being displayed on the sphere\r\n     */\r\n    public get photoTexture(): Texture {\r\n        return this.texture;\r\n    }\r\n\r\n    /**\r\n     * sets the texture being displayed on the sphere\r\n     */\r\n    public set photoTexture(value: Texture) {\r\n        this.texture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the current video mode for the video. It can be:\r\n     * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\r\n     * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\r\n     * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\r\n     */\r\n    public get imageMode(): number {\r\n        return this.textureMode;\r\n    }\r\n    /**\r\n     * Sets the current video mode for the video. It can be:\r\n     * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\r\n     * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\r\n     * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\r\n     */\r\n    public set imageMode(value: number) {\r\n        this.textureMode = value;\r\n    }\r\n\r\n    protected _initTexture(urlsOrElement: string, scene: Scene, options: any): Texture {\r\n        return new Texture(urlsOrElement, scene, !options.generateMipMaps, !this._useDirectMapping, undefined, undefined, (message, exception) => {\r\n            this.onLoadErrorObservable.notifyObservers(message || \"Unknown error occured\");\r\n\r\n            if (this.onError) {\r\n                this.onError(message, exception);\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}