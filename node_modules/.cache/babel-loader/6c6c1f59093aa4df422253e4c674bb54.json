{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger\";\nimport { Observable } from \"../Misc/observable\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Color3 } from '../Maths/math.color';\nimport { Gizmo } from \"./gizmo\";\nimport { AxisDragGizmo } from \"./axisDragGizmo\";\nimport { PlaneDragGizmo } from \"./planeDragGizmo\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\n/**\r\n * Gizmo that enables dragging a mesh along 3 axis\r\n */\n\nvar PositionGizmo =\n/** @class */\nfunction (_super) {\n  __extends(PositionGizmo, _super);\n  /**\r\n   * Creates a PositionGizmo\r\n   * @param gizmoLayer The utility layer the gizmo will be added to\r\n    @param thickness display gizmo axis thickness\r\n   */\n\n\n  function PositionGizmo(gizmoLayer, thickness, gizmoManager) {\n    if (gizmoLayer === void 0) {\n      gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer;\n    }\n\n    if (thickness === void 0) {\n      thickness = 1;\n    }\n\n    var _this = _super.call(this, gizmoLayer) || this;\n    /**\r\n     * private variables\r\n     */\n\n\n    _this._meshAttached = null;\n    _this._nodeAttached = null;\n    _this._observables = [];\n    /** Node Caching for quick lookup */\n\n    _this._gizmoAxisCache = new Map();\n    /** Fires an event when any of it's sub gizmos are dragged */\n\n    _this.onDragStartObservable = new Observable();\n    /** Fires an event when any of it's sub gizmos are released from dragging */\n\n    _this.onDragEndObservable = new Observable();\n    /**\r\n     * If set to true, planar drag is enabled\r\n     */\n\n    _this._planarGizmoEnabled = false;\n    _this.xGizmo = new AxisDragGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, _this, thickness);\n    _this.yGizmo = new AxisDragGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, _this, thickness);\n    _this.zGizmo = new AxisDragGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, _this, thickness);\n    _this.xPlaneGizmo = new PlaneDragGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), _this.gizmoLayer, _this);\n    _this.yPlaneGizmo = new PlaneDragGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), _this.gizmoLayer, _this);\n    _this.zPlaneGizmo = new PlaneDragGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), _this.gizmoLayer, _this); // Relay drag events\n\n    [_this.xGizmo, _this.yGizmo, _this.zGizmo, _this.xPlaneGizmo, _this.yPlaneGizmo, _this.zPlaneGizmo].forEach(function (gizmo) {\n      gizmo.dragBehavior.onDragStartObservable.add(function () {\n        _this.onDragStartObservable.notifyObservers({});\n      });\n      gizmo.dragBehavior.onDragEndObservable.add(function () {\n        _this.onDragEndObservable.notifyObservers({});\n      });\n    });\n    _this.attachedMesh = null;\n\n    if (gizmoManager) {\n      gizmoManager.addToAxisCache(_this._gizmoAxisCache);\n    } else {\n      // Only subscribe to pointer event if gizmoManager isnt\n      Gizmo.GizmoAxisPointerObserver(gizmoLayer, _this._gizmoAxisCache);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(PositionGizmo.prototype, \"attachedMesh\", {\n    get: function () {\n      return this._meshAttached;\n    },\n    set: function (mesh) {\n      this._meshAttached = mesh;\n      this._nodeAttached = mesh;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo.isEnabled) {\n          gizmo.attachedMesh = mesh;\n        } else {\n          gizmo.attachedMesh = null;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"attachedNode\", {\n    get: function () {\n      return this._nodeAttached;\n    },\n    set: function (node) {\n      this._meshAttached = null;\n      this._nodeAttached = null;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo.isEnabled) {\n          gizmo.attachedNode = node;\n        } else {\n          gizmo.attachedNode = null;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"isHovered\", {\n    /**\r\n     * True when the mouse pointer is hovering a gizmo mesh\r\n     */\n    get: function () {\n      var hovered = false;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        hovered = hovered || gizmo.isHovered;\n      });\n      return hovered;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"planarGizmoEnabled\", {\n    get: function () {\n      return this._planarGizmoEnabled;\n    },\n\n    /**\r\n     * If the planar drag gizmo is enabled\r\n     * setting this will enable/disable XY, XZ and YZ planes regardless of individual gizmo settings.\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      this._planarGizmoEnabled = value;\n      [this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.isEnabled = value;\n\n          if (value) {\n            if (gizmo.attachedMesh) {\n              gizmo.attachedMesh = _this.attachedMesh;\n            } else {\n              gizmo.attachedNode = _this.attachedNode;\n            }\n          }\n        }\n      }, this);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"updateGizmoRotationToMatchAttachedMesh\", {\n    get: function () {\n      return this._updateGizmoRotationToMatchAttachedMesh;\n    },\n    set: function (value) {\n      this._updateGizmoRotationToMatchAttachedMesh = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.updateGizmoRotationToMatchAttachedMesh = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"snapDistance\", {\n    get: function () {\n      return this._snapDistance;\n    },\n\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\n    set: function (value) {\n      this._snapDistance = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.snapDistance = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"scaleRatio\", {\n    get: function () {\n      return this._scaleRatio;\n    },\n\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\n    set: function (value) {\n      this._scaleRatio = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.scaleRatio = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\r\n   * @param mesh Axis gizmo mesh\r\n   * @param cache Gizmo axis definition used for reactive gizmo UI\r\n   */\n\n  PositionGizmo.prototype.addToAxisCache = function (mesh, cache) {\n    this._gizmoAxisCache.set(mesh, cache);\n  };\n  /**\r\n   * Disposes of the gizmo\r\n   */\n\n\n  PositionGizmo.prototype.dispose = function () {\n    var _this = this;\n\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n      if (gizmo) {\n        gizmo.dispose();\n      }\n    });\n\n    this._observables.forEach(function (obs) {\n      _this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\n    });\n\n    this.onDragStartObservable.clear();\n    this.onDragEndObservable.clear();\n  };\n  /**\r\n   * CustomMeshes are not supported by this gizmo\r\n   * @param mesh The mesh to replace the default mesh of the gizmo\r\n   */\n\n\n  PositionGizmo.prototype.setCustomMesh = function (mesh) {\n    Logger.Error(\"Custom meshes are not supported on this gizmo, please set the custom meshes on the gizmos contained within this one (gizmo.xGizmo, gizmo.yGizmo, gizmo.zGizmo,gizmo.xPlaneGizmo, gizmo.yPlaneGizmo, gizmo.zPlaneGizmo)\");\n  };\n\n  return PositionGizmo;\n}(Gizmo);\n\nexport { PositionGizmo };","map":{"version":3,"sources":["../../../sourceES6/core/Gizmos/positionGizmo.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { Observable, Observer } from \"../Misc/observable\";\r\nimport { Nullable } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from '../Maths/math.color';\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Node } from \"../node\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Gizmo, GizmoAxisCache } from \"./gizmo\";\r\nimport { AxisDragGizmo } from \"./axisDragGizmo\";\r\nimport { PlaneDragGizmo } from \"./planeDragGizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { GizmoManager } from './gizmoManager';\r\n/**\r\n * Gizmo that enables dragging a mesh along 3 axis\r\n */\r\nexport class PositionGizmo extends Gizmo {\r\n    /**\r\n     * Internal gizmo used for interactions on the x axis\r\n     */\r\n    public xGizmo: AxisDragGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the y axis\r\n     */\r\n    public yGizmo: AxisDragGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the z axis\r\n     */\r\n    public zGizmo: AxisDragGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the yz plane\r\n     */\r\n    public xPlaneGizmo: PlaneDragGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the xz plane\r\n     */\r\n    public yPlaneGizmo: PlaneDragGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the xy plane\r\n     */\r\n    public zPlaneGizmo: PlaneDragGizmo;\r\n\r\n    /**\r\n     * private variables\r\n     */\r\n    private _meshAttached: Nullable<AbstractMesh> = null;\r\n    private _nodeAttached: Nullable<Node> = null;\r\n    private _snapDistance: number;\r\n    private _observables: Observer<PointerInfo>[] = [];\r\n\r\n    /** Node Caching for quick lookup */\r\n    private _gizmoAxisCache: Map<Mesh, GizmoAxisCache> = new Map();\r\n\r\n    /** Fires an event when any of it's sub gizmos are dragged */\r\n    public onDragStartObservable = new Observable();\r\n    /** Fires an event when any of it's sub gizmos are released from dragging */\r\n    public onDragEndObservable = new Observable();\r\n\r\n    /**\r\n     * If set to true, planar drag is enabled\r\n     */\r\n    private _planarGizmoEnabled = false;\r\n\r\n    public get attachedMesh() {\r\n        return this._meshAttached;\r\n    }\r\n    public set attachedMesh(mesh: Nullable<AbstractMesh>) {\r\n        this._meshAttached = mesh;\r\n        this._nodeAttached = mesh;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo.isEnabled) {\r\n                gizmo.attachedMesh = mesh;\r\n            }\r\n            else {\r\n                gizmo.attachedMesh = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get attachedNode() {\r\n        return this._nodeAttached;\r\n    }\r\n    public set attachedNode(node: Nullable<Node>) {\r\n        this._meshAttached = null;\r\n        this._nodeAttached = null;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo.isEnabled) {\r\n                gizmo.attachedNode = node;\r\n            }\r\n            else {\r\n                gizmo.attachedNode = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * True when the mouse pointer is hovering a gizmo mesh\r\n     */\r\n    public get isHovered() {\r\n        var hovered = false;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            hovered = hovered || gizmo.isHovered;\r\n        });\r\n        return hovered;\r\n    }\r\n\r\n    /**\r\n     * Creates a PositionGizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n      @param thickness display gizmo axis thickness\r\n     */\r\n    constructor(gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer, thickness: number = 1, gizmoManager?: GizmoManager) {\r\n        super(gizmoLayer);\r\n        this.xGizmo = new AxisDragGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, this, thickness);\r\n        this.yGizmo = new AxisDragGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, this, thickness);\r\n        this.zGizmo = new AxisDragGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, this, thickness);\r\n\r\n        this.xPlaneGizmo = new PlaneDragGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), this.gizmoLayer, this);\r\n        this.yPlaneGizmo = new PlaneDragGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), this.gizmoLayer, this);\r\n        this.zPlaneGizmo = new PlaneDragGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), this.gizmoLayer, this);\r\n        // Relay drag events\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            gizmo.dragBehavior.onDragStartObservable.add(() => {\r\n                this.onDragStartObservable.notifyObservers({});\r\n            });\r\n            gizmo.dragBehavior.onDragEndObservable.add(() => {\r\n                this.onDragEndObservable.notifyObservers({});\r\n            });\r\n        });\r\n\r\n        this.attachedMesh = null;\r\n\r\n        if (gizmoManager) {\r\n            gizmoManager.addToAxisCache(this._gizmoAxisCache);\r\n        } else {\r\n            // Only subscribe to pointer event if gizmoManager isnt\r\n            Gizmo.GizmoAxisPointerObserver(gizmoLayer, this._gizmoAxisCache);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the planar drag gizmo is enabled\r\n     * setting this will enable/disable XY, XZ and YZ planes regardless of individual gizmo settings.\r\n     */\r\n    public set planarGizmoEnabled(value: boolean) {\r\n        this._planarGizmoEnabled = value;\r\n        [this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.isEnabled = value;\r\n                if (value) {\r\n                    if (gizmo.attachedMesh) {\r\n                        gizmo.attachedMesh = this.attachedMesh;\r\n                    } else {\r\n                        gizmo.attachedNode = this.attachedNode;\r\n                    }\r\n\r\n                }\r\n            }\r\n        }, this);\r\n    }\r\n    public get planarGizmoEnabled(): boolean {\r\n        return this._planarGizmoEnabled;\r\n    }\r\n\r\n    public set updateGizmoRotationToMatchAttachedMesh(value: boolean) {\r\n        this._updateGizmoRotationToMatchAttachedMesh = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.updateGizmoRotationToMatchAttachedMesh = value;\r\n            }\r\n        });\r\n    }\r\n    public get updateGizmoRotationToMatchAttachedMesh() {\r\n        return this._updateGizmoRotationToMatchAttachedMesh;\r\n    }\r\n\r\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public set snapDistance(value: number) {\r\n        this._snapDistance = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.snapDistance = value;\r\n            }\r\n        });\r\n    }\r\n    public get snapDistance() {\r\n        return this._snapDistance;\r\n    }\r\n\r\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\r\n    public set scaleRatio(value: number) {\r\n        this._scaleRatio = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.scaleRatio = value;\r\n            }\r\n        });\r\n    }\r\n    public get scaleRatio() {\r\n        return this._scaleRatio;\r\n    }\r\n\r\n    /**\r\n     * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\r\n     * @param mesh Axis gizmo mesh\r\n     * @param cache Gizmo axis definition used for reactive gizmo UI\r\n     */\r\n    public addToAxisCache(mesh: Mesh, cache: GizmoAxisCache) {\r\n        this._gizmoAxisCache.set(mesh, cache);\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.dispose();\r\n            }\r\n        });\r\n        this._observables.forEach((obs) => {\r\n            this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\r\n        });\r\n        this.onDragStartObservable.clear();\r\n        this.onDragEndObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * CustomMeshes are not supported by this gizmo\r\n     * @param mesh The mesh to replace the default mesh of the gizmo\r\n     */\r\n    public setCustomMesh(mesh: Mesh) {\r\n        Logger.Error(\"Custom meshes are not supported on this gizmo, please set the custom meshes on the gizmos contained within this one (gizmo.xGizmo, gizmo.yGizmo, gizmo.zGizmo,gizmo.xPlaneGizmo, gizmo.yPlaneGizmo, gizmo.zPlaneGizmo)\");\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}