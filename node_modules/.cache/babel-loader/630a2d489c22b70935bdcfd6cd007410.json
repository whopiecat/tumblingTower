{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators\";\nimport { PBRBaseSimpleMaterial } from \"./pbrBaseSimpleMaterial\";\nimport { _TypeStore } from '../../Misc/typeStore';\n/**\r\n * The PBR material of BJS following the specular glossiness convention.\r\n *\r\n * This fits to the PBR convention in the GLTF definition:\r\n * https://github.com/KhronosGroup/glTF/tree/2.0/extensions/Khronos/KHR_materials_pbrSpecularGlossiness\r\n */\n\nvar PBRSpecularGlossinessMaterial =\n/** @class */\nfunction (_super) {\n  __extends(PBRSpecularGlossinessMaterial, _super);\n  /**\r\n   * Instantiates a new PBRSpecularGlossinessMaterial instance.\r\n   *\r\n   * @param name The material name\r\n   * @param scene The scene the material will be use in.\r\n   */\n\n\n  function PBRSpecularGlossinessMaterial(name, scene) {\n    var _this = _super.call(this, name, scene) || this;\n\n    _this._useMicroSurfaceFromReflectivityMapAlpha = true;\n    return _this;\n  }\n  /**\r\n   * Return the currrent class name of the material.\r\n   */\n\n\n  PBRSpecularGlossinessMaterial.prototype.getClassName = function () {\n    return \"PBRSpecularGlossinessMaterial\";\n  };\n  /**\r\n   * Makes a duplicate of the current material.\r\n   * @param name - name to use for the new material.\r\n   */\n\n\n  PBRSpecularGlossinessMaterial.prototype.clone = function (name) {\n    var _this = this;\n\n    var clone = SerializationHelper.Clone(function () {\n      return new PBRSpecularGlossinessMaterial(name, _this.getScene());\n    }, this);\n    clone.id = name;\n    clone.name = name;\n    this.clearCoat.copyTo(clone.clearCoat);\n    this.anisotropy.copyTo(clone.anisotropy);\n    this.brdf.copyTo(clone.brdf);\n    this.sheen.copyTo(clone.sheen);\n    this.subSurface.copyTo(clone.subSurface);\n    return clone;\n  };\n  /**\r\n   * Serialize the material to a parsable JSON object.\r\n   */\n\n\n  PBRSpecularGlossinessMaterial.prototype.serialize = function () {\n    var serializationObject = SerializationHelper.Serialize(this);\n    serializationObject.customType = \"BABYLON.PBRSpecularGlossinessMaterial\";\n    serializationObject.clearCoat = this.clearCoat.serialize();\n    serializationObject.anisotropy = this.anisotropy.serialize();\n    serializationObject.brdf = this.brdf.serialize();\n    serializationObject.sheen = this.sheen.serialize();\n    serializationObject.subSurface = this.subSurface.serialize();\n    return serializationObject;\n  };\n  /**\r\n   * Parses a JSON object correponding to the serialize function.\r\n   */\n\n\n  PBRSpecularGlossinessMaterial.Parse = function (source, scene, rootUrl) {\n    var material = SerializationHelper.Parse(function () {\n      return new PBRSpecularGlossinessMaterial(source.name, scene);\n    }, source, scene, rootUrl);\n\n    if (source.clearCoat) {\n      material.clearCoat.parse(source.clearCoat, scene, rootUrl);\n    }\n\n    if (source.anisotropy) {\n      material.anisotropy.parse(source.anisotropy, scene, rootUrl);\n    }\n\n    if (source.brdf) {\n      material.brdf.parse(source.brdf, scene, rootUrl);\n    }\n\n    if (source.sheen) {\n      material.sheen.parse(source.sheen, scene, rootUrl);\n    }\n\n    if (source.subSurface) {\n      material.subSurface.parse(source.subSurface, scene, rootUrl);\n    }\n\n    return material;\n  };\n\n  __decorate([serializeAsColor3(\"diffuse\"), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoColor\")], PBRSpecularGlossinessMaterial.prototype, \"diffuseColor\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoTexture\")], PBRSpecularGlossinessMaterial.prototype, \"diffuseTexture\", void 0);\n\n  __decorate([serializeAsColor3(\"specular\"), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectivityColor\")], PBRSpecularGlossinessMaterial.prototype, \"specularColor\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_microSurface\")], PBRSpecularGlossinessMaterial.prototype, \"glossiness\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectivityTexture\")], PBRSpecularGlossinessMaterial.prototype, \"specularGlossinessTexture\", void 0);\n\n  return PBRSpecularGlossinessMaterial;\n}(PBRBaseSimpleMaterial);\n\nexport { PBRSpecularGlossinessMaterial };\n_TypeStore.RegisteredTypes[\"BABYLON.PBRSpecularGlossinessMaterial\"] = PBRSpecularGlossinessMaterial;","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/PBR/pbrSpecularGlossinessMaterial.ts"],"names":[],"mappings":"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","sourcesContent":["import { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { PBRBaseSimpleMaterial } from \"./pbrBaseSimpleMaterial\";\r\nimport { _TypeStore } from '../../Misc/typeStore';\r\n\r\n/**\r\n * The PBR material of BJS following the specular glossiness convention.\r\n *\r\n * This fits to the PBR convention in the GLTF definition:\r\n * https://github.com/KhronosGroup/glTF/tree/2.0/extensions/Khronos/KHR_materials_pbrSpecularGlossiness\r\n */\r\nexport class PBRSpecularGlossinessMaterial extends PBRBaseSimpleMaterial {\r\n\r\n    /**\r\n     * Specifies the diffuse color of the material.\r\n     */\r\n    @serializeAsColor3(\"diffuse\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoColor\")\r\n    public diffuseColor: Color3;\r\n\r\n    /**\r\n     * Specifies the diffuse texture of the material. This can also contains the opcity value in its alpha\r\n     * channel.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoTexture\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    /**\r\n     * Specifies the specular color of the material. This indicates how reflective is the material (none to mirror).\r\n     */\r\n    @serializeAsColor3(\"specular\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectivityColor\")\r\n    public specularColor: Color3;\r\n\r\n    /**\r\n     * Specifies the glossiness of the material. This indicates \"how sharp is the reflection\".\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_microSurface\")\r\n    public glossiness: number;\r\n\r\n    /**\r\n     * Specifies both the specular color RGB and the glossiness A of the material per pixels.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectivityTexture\")\r\n    public specularGlossinessTexture: BaseTexture;\r\n\r\n    /**\r\n     * Instantiates a new PBRSpecularGlossinessMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this._useMicroSurfaceFromReflectivityMapAlpha = true;\r\n    }\r\n\r\n    /**\r\n     * Return the currrent class name of the material.\r\n     */\r\n    public getClassName(): string {\r\n        return \"PBRSpecularGlossinessMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current material.\r\n     * @param name - name to use for the new material.\r\n     */\r\n    public clone(name: string): PBRSpecularGlossinessMaterial {\r\n        var clone = SerializationHelper.Clone(() => new PBRSpecularGlossinessMaterial(name, this.getScene()), this);\r\n\r\n        clone.id = name;\r\n        clone.name = name;\r\n\r\n        this.clearCoat.copyTo(clone.clearCoat);\r\n        this.anisotropy.copyTo(clone.anisotropy);\r\n        this.brdf.copyTo(clone.brdf);\r\n        this.sheen.copyTo(clone.sheen);\r\n        this.subSurface.copyTo(clone.subSurface);\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Serialize the material to a parsable JSON object.\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.PBRSpecularGlossinessMaterial\";\r\n\r\n        serializationObject.clearCoat = this.clearCoat.serialize();\r\n        serializationObject.anisotropy = this.anisotropy.serialize();\r\n        serializationObject.brdf = this.brdf.serialize();\r\n        serializationObject.sheen = this.sheen.serialize();\r\n        serializationObject.subSurface = this.subSurface.serialize();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a JSON object correponding to the serialize function.\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): PBRSpecularGlossinessMaterial {\r\n        const material = SerializationHelper.Parse(() => new PBRSpecularGlossinessMaterial(source.name, scene), source, scene, rootUrl);\r\n        if (source.clearCoat) {\r\n            material.clearCoat.parse(source.clearCoat, scene, rootUrl);\r\n        }\r\n        if (source.anisotropy) {\r\n            material.anisotropy.parse(source.anisotropy, scene, rootUrl);\r\n        }\r\n        if (source.brdf) {\r\n            material.brdf.parse(source.brdf, scene, rootUrl);\r\n        }\r\n        if (source.sheen) {\r\n            material.sheen.parse(source.sheen, scene, rootUrl);\r\n        }\r\n        if (source.subSurface) {\r\n            material.subSurface.parse(source.subSurface, scene, rootUrl);\r\n        }\r\n        return material;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.PBRSpecularGlossinessMaterial\"] = PBRSpecularGlossinessMaterial;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}