{"ast":null,"code":"import { Vector3, Quaternion, Matrix } from \"../Maths/math.vector\";\nimport { Space } from '../Maths/math.axis';\n/**\r\n * Class used to apply inverse kinematics to bones\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons#boneikcontroller\r\n */\n\nvar BoneIKController =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new BoneIKController\r\n   * @param mesh defines the mesh to control\r\n   * @param bone defines the bone to control\r\n   * @param options defines options to set up the controller\r\n   */\n  function BoneIKController(mesh, bone, options) {\n    /**\r\n     * Gets or sets the target position\r\n     */\n    this.targetPosition = Vector3.Zero();\n    /**\r\n     * Gets or sets the pole target position\r\n     */\n\n    this.poleTargetPosition = Vector3.Zero();\n    /**\r\n     * Gets or sets the pole target local offset\r\n     */\n\n    this.poleTargetLocalOffset = Vector3.Zero();\n    /**\r\n     * Gets or sets the pole angle\r\n     */\n\n    this.poleAngle = 0;\n    /**\r\n     * The amount to slerp (spherical linear interpolation) to the target.  Set this to a value between 0 and 1 (a value of 1 disables slerp)\r\n     */\n\n    this.slerpAmount = 1;\n    this._bone1Quat = Quaternion.Identity();\n    this._bone1Mat = Matrix.Identity();\n    this._bone2Ang = Math.PI;\n    this._maxAngle = Math.PI;\n    this._rightHandedSystem = false;\n    this._bendAxis = Vector3.Right();\n    this._slerping = false;\n    this._adjustRoll = 0;\n    this._bone2 = bone;\n    this._bone1 = bone.getParent();\n\n    if (!this._bone1) {\n      return;\n    }\n\n    this.mesh = mesh;\n    var bonePos = bone.getPosition();\n\n    if (bone.getAbsoluteTransform().determinant() > 0) {\n      this._rightHandedSystem = true;\n      this._bendAxis.x = 0;\n      this._bendAxis.y = 0;\n      this._bendAxis.z = -1;\n\n      if (bonePos.x > bonePos.y && bonePos.x > bonePos.z) {\n        this._adjustRoll = Math.PI * .5;\n        this._bendAxis.z = 1;\n      }\n    }\n\n    if (this._bone1.length) {\n      var boneScale1 = this._bone1.getScale();\n\n      var boneScale2 = this._bone2.getScale();\n\n      this._bone1Length = this._bone1.length * boneScale1.y * this.mesh.scaling.y;\n      this._bone2Length = this._bone2.length * boneScale2.y * this.mesh.scaling.y;\n    } else if (this._bone1.children[0]) {\n      mesh.computeWorldMatrix(true);\n\n      var pos1 = this._bone2.children[0].getAbsolutePosition(mesh);\n\n      var pos2 = this._bone2.getAbsolutePosition(mesh);\n\n      var pos3 = this._bone1.getAbsolutePosition(mesh);\n\n      this._bone1Length = Vector3.Distance(pos1, pos2);\n      this._bone2Length = Vector3.Distance(pos2, pos3);\n    }\n\n    this._bone1.getRotationMatrixToRef(Space.WORLD, mesh, this._bone1Mat);\n\n    this.maxAngle = Math.PI;\n\n    if (options) {\n      if (options.targetMesh) {\n        this.targetMesh = options.targetMesh;\n        this.targetMesh.computeWorldMatrix(true);\n      }\n\n      if (options.poleTargetMesh) {\n        this.poleTargetMesh = options.poleTargetMesh;\n        this.poleTargetMesh.computeWorldMatrix(true);\n      } else if (options.poleTargetBone) {\n        this.poleTargetBone = options.poleTargetBone;\n      } else if (this._bone1.getParent()) {\n        this.poleTargetBone = this._bone1.getParent();\n      }\n\n      if (options.poleTargetLocalOffset) {\n        this.poleTargetLocalOffset.copyFrom(options.poleTargetLocalOffset);\n      }\n\n      if (options.poleAngle) {\n        this.poleAngle = options.poleAngle;\n      }\n\n      if (options.bendAxis) {\n        this._bendAxis.copyFrom(options.bendAxis);\n      }\n\n      if (options.maxAngle) {\n        this.maxAngle = options.maxAngle;\n      }\n\n      if (options.slerpAmount) {\n        this.slerpAmount = options.slerpAmount;\n      }\n    }\n  }\n\n  Object.defineProperty(BoneIKController.prototype, \"maxAngle\", {\n    /**\r\n     * Gets or sets maximum allowed angle\r\n     */\n    get: function () {\n      return this._maxAngle;\n    },\n    set: function (value) {\n      this._setMaxAngle(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BoneIKController.prototype._setMaxAngle = function (ang) {\n    if (ang < 0) {\n      ang = 0;\n    }\n\n    if (ang > Math.PI || ang == undefined) {\n      ang = Math.PI;\n    }\n\n    this._maxAngle = ang;\n    var a = this._bone1Length;\n    var b = this._bone2Length;\n    this._maxReach = Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(ang));\n  };\n  /**\r\n   * Force the controller to update the bones\r\n   */\n\n\n  BoneIKController.prototype.update = function () {\n    var bone1 = this._bone1;\n\n    if (!bone1) {\n      return;\n    }\n\n    var target = this.targetPosition;\n    var poleTarget = this.poleTargetPosition;\n    var mat1 = BoneIKController._tmpMats[0];\n    var mat2 = BoneIKController._tmpMats[1];\n\n    if (this.targetMesh) {\n      target.copyFrom(this.targetMesh.getAbsolutePosition());\n    }\n\n    if (this.poleTargetBone) {\n      this.poleTargetBone.getAbsolutePositionFromLocalToRef(this.poleTargetLocalOffset, this.mesh, poleTarget);\n    } else if (this.poleTargetMesh) {\n      Vector3.TransformCoordinatesToRef(this.poleTargetLocalOffset, this.poleTargetMesh.getWorldMatrix(), poleTarget);\n    }\n\n    var bonePos = BoneIKController._tmpVecs[0];\n    var zaxis = BoneIKController._tmpVecs[1];\n    var xaxis = BoneIKController._tmpVecs[2];\n    var yaxis = BoneIKController._tmpVecs[3];\n    var upAxis = BoneIKController._tmpVecs[4];\n    var _tmpQuat = BoneIKController._tmpQuat;\n    bone1.getAbsolutePositionToRef(this.mesh, bonePos);\n    poleTarget.subtractToRef(bonePos, upAxis);\n\n    if (upAxis.x == 0 && upAxis.y == 0 && upAxis.z == 0) {\n      upAxis.y = 1;\n    } else {\n      upAxis.normalize();\n    }\n\n    target.subtractToRef(bonePos, yaxis);\n    yaxis.normalize();\n    Vector3.CrossToRef(yaxis, upAxis, zaxis);\n    zaxis.normalize();\n    Vector3.CrossToRef(yaxis, zaxis, xaxis);\n    xaxis.normalize();\n    Matrix.FromXYZAxesToRef(xaxis, yaxis, zaxis, mat1);\n    var a = this._bone1Length;\n    var b = this._bone2Length;\n    var c = Vector3.Distance(bonePos, target);\n\n    if (this._maxReach > 0) {\n      c = Math.min(this._maxReach, c);\n    }\n\n    var acosa = (b * b + c * c - a * a) / (2 * b * c);\n    var acosb = (c * c + a * a - b * b) / (2 * c * a);\n\n    if (acosa > 1) {\n      acosa = 1;\n    }\n\n    if (acosb > 1) {\n      acosb = 1;\n    }\n\n    if (acosa < -1) {\n      acosa = -1;\n    }\n\n    if (acosb < -1) {\n      acosb = -1;\n    }\n\n    var angA = Math.acos(acosa);\n    var angB = Math.acos(acosb);\n    var angC = -angA - angB;\n\n    if (this._rightHandedSystem) {\n      Matrix.RotationYawPitchRollToRef(0, 0, this._adjustRoll, mat2);\n      mat2.multiplyToRef(mat1, mat1);\n      Matrix.RotationAxisToRef(this._bendAxis, angB, mat2);\n      mat2.multiplyToRef(mat1, mat1);\n    } else {\n      var _tmpVec = BoneIKController._tmpVecs[5];\n\n      _tmpVec.copyFrom(this._bendAxis);\n\n      _tmpVec.x *= -1;\n      Matrix.RotationAxisToRef(_tmpVec, -angB, mat2);\n      mat2.multiplyToRef(mat1, mat1);\n    }\n\n    if (this.poleAngle) {\n      Matrix.RotationAxisToRef(yaxis, this.poleAngle, mat2);\n      mat1.multiplyToRef(mat2, mat1);\n    }\n\n    if (this._bone1) {\n      if (this.slerpAmount < 1) {\n        if (!this._slerping) {\n          Quaternion.FromRotationMatrixToRef(this._bone1Mat, this._bone1Quat);\n        }\n\n        Quaternion.FromRotationMatrixToRef(mat1, _tmpQuat);\n        Quaternion.SlerpToRef(this._bone1Quat, _tmpQuat, this.slerpAmount, this._bone1Quat);\n        angC = this._bone2Ang * (1.0 - this.slerpAmount) + angC * this.slerpAmount;\n\n        this._bone1.setRotationQuaternion(this._bone1Quat, Space.WORLD, this.mesh);\n\n        this._slerping = true;\n      } else {\n        this._bone1.setRotationMatrix(mat1, Space.WORLD, this.mesh);\n\n        this._bone1Mat.copyFrom(mat1);\n\n        this._slerping = false;\n      }\n    }\n\n    this._bone2.setAxisAngle(this._bendAxis, angC, Space.LOCAL);\n\n    this._bone2Ang = angC;\n  };\n\n  BoneIKController._tmpVecs = [Vector3.Zero(), Vector3.Zero(), Vector3.Zero(), Vector3.Zero(), Vector3.Zero(), Vector3.Zero()];\n  BoneIKController._tmpQuat = Quaternion.Identity();\n  BoneIKController._tmpMats = [Matrix.Identity(), Matrix.Identity()];\n  return BoneIKController;\n}();\n\nexport { BoneIKController };","map":{"version":3,"sources":["../../../sourceES6/core/Bones/boneIKController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Bone } from \"./bone\";\r\nimport { Vector3, Quaternion, Matrix } from \"../Maths/math.vector\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Nullable } from \"../types\";\r\nimport { Space } from '../Maths/math.axis';\r\n\r\n/**\r\n * Class used to apply inverse kinematics to bones\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons#boneikcontroller\r\n */\r\nexport class BoneIKController {\r\n\r\n    private static _tmpVecs: Vector3[] = [Vector3.Zero(), Vector3.Zero(), Vector3.Zero(), Vector3.Zero(), Vector3.Zero(), Vector3.Zero()];\r\n    private static _tmpQuat = Quaternion.Identity();\r\n    private static _tmpMats: Matrix[] = [Matrix.Identity(), Matrix.Identity()];\r\n\r\n    /**\r\n     * Gets or sets the target mesh\r\n     */\r\n    public targetMesh: AbstractMesh;\r\n\r\n    /** Gets or sets the mesh used as pole */\r\n    public poleTargetMesh: AbstractMesh;\r\n\r\n    /**\r\n     * Gets or sets the bone used as pole\r\n     */\r\n    public poleTargetBone: Nullable<Bone>;\r\n\r\n    /**\r\n     * Gets or sets the target position\r\n     */\r\n    public targetPosition = Vector3.Zero();\r\n\r\n    /**\r\n     * Gets or sets the pole target position\r\n     */\r\n    public poleTargetPosition = Vector3.Zero();\r\n\r\n    /**\r\n     * Gets or sets the pole target local offset\r\n     */\r\n    public poleTargetLocalOffset = Vector3.Zero();\r\n\r\n    /**\r\n     * Gets or sets the pole angle\r\n     */\r\n    public poleAngle = 0;\r\n\r\n    /**\r\n     * Gets or sets the mesh associated with the controller\r\n     */\r\n    public mesh: AbstractMesh;\r\n\r\n    /**\r\n     * The amount to slerp (spherical linear interpolation) to the target.  Set this to a value between 0 and 1 (a value of 1 disables slerp)\r\n     */\r\n    public slerpAmount = 1;\r\n\r\n    private _bone1Quat = Quaternion.Identity();\r\n    private _bone1Mat = Matrix.Identity();\r\n    private _bone2Ang = Math.PI;\r\n\r\n    private _bone1: Nullable<Bone>;\r\n    private _bone2: Bone;\r\n    private _bone1Length: number;\r\n    private _bone2Length: number;\r\n    private _maxAngle = Math.PI;\r\n    private _maxReach: number;\r\n\r\n    private _rightHandedSystem = false;\r\n\r\n    private _bendAxis = Vector3.Right();\r\n    private _slerping = false;\r\n\r\n    private _adjustRoll = 0;\r\n\r\n    /**\r\n     * Gets or sets maximum allowed angle\r\n     */\r\n    public get maxAngle(): number {\r\n        return this._maxAngle;\r\n    }\r\n\r\n    public set maxAngle(value: number) {\r\n        this._setMaxAngle(value);\r\n    }\r\n\r\n    /**\r\n     * Creates a new BoneIKController\r\n     * @param mesh defines the mesh to control\r\n     * @param bone defines the bone to control\r\n     * @param options defines options to set up the controller\r\n     */\r\n    constructor(mesh: AbstractMesh,\r\n        bone: Bone,\r\n        options?: {\r\n            targetMesh?: AbstractMesh,\r\n            poleTargetMesh?: AbstractMesh,\r\n            poleTargetBone?: Bone,\r\n            poleTargetLocalOffset?: Vector3,\r\n            poleAngle?: number,\r\n            bendAxis?: Vector3,\r\n            maxAngle?: number,\r\n            slerpAmount?: number\r\n        }) {\r\n\r\n        this._bone2 = bone;\r\n        this._bone1 = bone.getParent();\r\n\r\n        if (!this._bone1) {\r\n            return;\r\n        }\r\n\r\n        this.mesh = mesh;\r\n\r\n        var bonePos = bone.getPosition();\r\n\r\n        if (bone.getAbsoluteTransform().determinant() > 0) {\r\n            this._rightHandedSystem = true;\r\n            this._bendAxis.x = 0;\r\n            this._bendAxis.y = 0;\r\n            this._bendAxis.z = -1;\r\n\r\n            if (bonePos.x > bonePos.y && bonePos.x > bonePos.z) {\r\n                this._adjustRoll = Math.PI * .5;\r\n                this._bendAxis.z = 1;\r\n            }\r\n        }\r\n\r\n        if (this._bone1.length) {\r\n\r\n            var boneScale1 = this._bone1.getScale();\r\n            var boneScale2 = this._bone2.getScale();\r\n\r\n            this._bone1Length = this._bone1.length * boneScale1.y * this.mesh.scaling.y;\r\n            this._bone2Length = this._bone2.length * boneScale2.y * this.mesh.scaling.y;\r\n\r\n        } else if (this._bone1.children[0]) {\r\n\r\n            mesh.computeWorldMatrix(true);\r\n\r\n            var pos1 = this._bone2.children[0].getAbsolutePosition(mesh);\r\n            var pos2 = this._bone2.getAbsolutePosition(mesh);\r\n            var pos3 = this._bone1.getAbsolutePosition(mesh);\r\n\r\n            this._bone1Length = Vector3.Distance(pos1, pos2);\r\n            this._bone2Length = Vector3.Distance(pos2, pos3);\r\n        }\r\n\r\n        this._bone1.getRotationMatrixToRef(Space.WORLD, mesh, this._bone1Mat);\r\n        this.maxAngle = Math.PI;\r\n\r\n        if (options) {\r\n\r\n            if (options.targetMesh) {\r\n                this.targetMesh = options.targetMesh;\r\n                this.targetMesh.computeWorldMatrix(true);\r\n            }\r\n\r\n            if (options.poleTargetMesh) {\r\n\r\n                this.poleTargetMesh = options.poleTargetMesh;\r\n                this.poleTargetMesh.computeWorldMatrix(true);\r\n\r\n            } else if (options.poleTargetBone) {\r\n                this.poleTargetBone = options.poleTargetBone;\r\n            } else if (this._bone1.getParent()) {\r\n                this.poleTargetBone = this._bone1.getParent();\r\n            }\r\n\r\n            if (options.poleTargetLocalOffset) {\r\n                this.poleTargetLocalOffset.copyFrom(options.poleTargetLocalOffset);\r\n            }\r\n\r\n            if (options.poleAngle) {\r\n                this.poleAngle = options.poleAngle;\r\n            }\r\n\r\n            if (options.bendAxis) {\r\n                this._bendAxis.copyFrom(options.bendAxis);\r\n            }\r\n\r\n            if (options.maxAngle) {\r\n                this.maxAngle = options.maxAngle;\r\n            }\r\n\r\n            if (options.slerpAmount) {\r\n                this.slerpAmount = options.slerpAmount;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private _setMaxAngle(ang: number): void {\r\n\r\n        if (ang < 0) {\r\n            ang = 0;\r\n        }\r\n\r\n        if (ang > Math.PI || ang == undefined) {\r\n            ang = Math.PI;\r\n        }\r\n\r\n        this._maxAngle = ang;\r\n\r\n        var a = this._bone1Length;\r\n        var b = this._bone2Length;\r\n\r\n        this._maxReach = Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(ang));\r\n\r\n    }\r\n\r\n    /**\r\n     * Force the controller to update the bones\r\n     */\r\n    public update(): void {\r\n        var bone1 = this._bone1;\r\n\r\n        if (!bone1) {\r\n            return;\r\n        }\r\n\r\n        var target = this.targetPosition;\r\n        var poleTarget = this.poleTargetPosition;\r\n\r\n        var mat1 = BoneIKController._tmpMats[0];\r\n        var mat2 = BoneIKController._tmpMats[1];\r\n\r\n        if (this.targetMesh) {\r\n            target.copyFrom(this.targetMesh.getAbsolutePosition());\r\n        }\r\n\r\n        if (this.poleTargetBone) {\r\n            this.poleTargetBone.getAbsolutePositionFromLocalToRef(this.poleTargetLocalOffset, this.mesh, poleTarget);\r\n        } else if (this.poleTargetMesh) {\r\n            Vector3.TransformCoordinatesToRef(this.poleTargetLocalOffset, this.poleTargetMesh.getWorldMatrix(), poleTarget);\r\n        }\r\n\r\n        var bonePos = BoneIKController._tmpVecs[0];\r\n        var zaxis = BoneIKController._tmpVecs[1];\r\n        var xaxis = BoneIKController._tmpVecs[2];\r\n        var yaxis = BoneIKController._tmpVecs[3];\r\n        var upAxis = BoneIKController._tmpVecs[4];\r\n\r\n        var _tmpQuat = BoneIKController._tmpQuat;\r\n\r\n        bone1.getAbsolutePositionToRef(this.mesh, bonePos);\r\n\r\n        poleTarget.subtractToRef(bonePos, upAxis);\r\n\r\n        if (upAxis.x == 0 && upAxis.y == 0 && upAxis.z == 0) {\r\n            upAxis.y = 1;\r\n        } else {\r\n            upAxis.normalize();\r\n        }\r\n\r\n        target.subtractToRef(bonePos, yaxis);\r\n        yaxis.normalize();\r\n\r\n        Vector3.CrossToRef(yaxis, upAxis, zaxis);\r\n        zaxis.normalize();\r\n\r\n        Vector3.CrossToRef(yaxis, zaxis, xaxis);\r\n        xaxis.normalize();\r\n\r\n        Matrix.FromXYZAxesToRef(xaxis, yaxis, zaxis, mat1);\r\n\r\n        var a = this._bone1Length;\r\n        var b = this._bone2Length;\r\n\r\n        var c = Vector3.Distance(bonePos, target);\r\n\r\n        if (this._maxReach > 0) {\r\n            c = Math.min(this._maxReach, c);\r\n        }\r\n\r\n        var acosa = (b * b + c * c - a * a) / (2 * b * c);\r\n        var acosb = (c * c + a * a - b * b) / (2 * c * a);\r\n\r\n        if (acosa > 1) {\r\n            acosa = 1;\r\n        }\r\n\r\n        if (acosb > 1) {\r\n            acosb = 1;\r\n        }\r\n\r\n        if (acosa < -1) {\r\n            acosa = -1;\r\n        }\r\n\r\n        if (acosb < -1) {\r\n            acosb = -1;\r\n        }\r\n\r\n        var angA = Math.acos(acosa);\r\n        var angB = Math.acos(acosb);\r\n\r\n        var angC = -angA - angB;\r\n\r\n        if (this._rightHandedSystem) {\r\n\r\n            Matrix.RotationYawPitchRollToRef(0, 0, this._adjustRoll, mat2);\r\n            mat2.multiplyToRef(mat1, mat1);\r\n\r\n            Matrix.RotationAxisToRef(this._bendAxis, angB, mat2);\r\n            mat2.multiplyToRef(mat1, mat1);\r\n\r\n        } else {\r\n\r\n            var _tmpVec = BoneIKController._tmpVecs[5];\r\n\r\n            _tmpVec.copyFrom(this._bendAxis);\r\n            _tmpVec.x *= -1;\r\n\r\n            Matrix.RotationAxisToRef(_tmpVec, -angB, mat2);\r\n            mat2.multiplyToRef(mat1, mat1);\r\n\r\n        }\r\n\r\n        if (this.poleAngle) {\r\n            Matrix.RotationAxisToRef(yaxis, this.poleAngle, mat2);\r\n            mat1.multiplyToRef(mat2, mat1);\r\n        }\r\n\r\n        if (this._bone1) {\r\n            if (this.slerpAmount < 1) {\r\n                if (!this._slerping) {\r\n                    Quaternion.FromRotationMatrixToRef(this._bone1Mat, this._bone1Quat);\r\n                }\r\n                Quaternion.FromRotationMatrixToRef(mat1, _tmpQuat);\r\n                Quaternion.SlerpToRef(this._bone1Quat, _tmpQuat, this.slerpAmount, this._bone1Quat);\r\n                angC = this._bone2Ang * (1.0 - this.slerpAmount) + angC * this.slerpAmount;\r\n                this._bone1.setRotationQuaternion(this._bone1Quat, Space.WORLD, this.mesh);\r\n                this._slerping = true;\r\n            } else {\r\n                this._bone1.setRotationMatrix(mat1, Space.WORLD, this.mesh);\r\n                this._bone1Mat.copyFrom(mat1);\r\n                this._slerping = false;\r\n            }\r\n        }\r\n\r\n        this._bone2.setAxisAngle(this._bendAxis, angC, Space.LOCAL);\r\n        this._bone2Ang = angC;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}