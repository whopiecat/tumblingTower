{"ast":null,"code":"import { Observable } from \"../Misc/observable\";\nimport { Vector2 } from \"../Maths/math.vector\";\nimport { Color4 } from '../Maths/math.color';\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { VertexBuffer } from \"../Meshes/buffer\";\nimport { Material } from \"../Materials/material\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { LayerSceneComponent } from \"./layerSceneComponent\";\nimport \"../Shaders/layer.fragment\";\nimport \"../Shaders/layer.vertex\";\n/**\r\n * This represents a full screen 2d layer.\r\n * This can be useful to display a picture in the  background of your scene for instance.\r\n * @see https://www.babylonjs-playground.com/#08A2BS#1\r\n */\n\nvar Layer =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new layer.\r\n   * This represents a full screen 2d layer.\r\n   * This can be useful to display a picture in the  background of your scene for instance.\r\n   * @see https://www.babylonjs-playground.com/#08A2BS#1\r\n   * @param name Define the name of the layer in the scene\r\n   * @param imgUrl Define the url of the texture to display in the layer\r\n   * @param scene Define the scene the layer belongs to\r\n   * @param isBackground Defines whether the layer is displayed in front or behind the scene\r\n   * @param color Defines a color for the layer\r\n   */\n  function Layer(\n  /**\r\n   * Define the name of the layer.\r\n   */\n  name, imgUrl, scene, isBackground, color) {\n    this.name = name;\n    /**\r\n     * Define the scale of the layer in order to zoom in out of the texture.\r\n     */\n\n    this.scale = new Vector2(1, 1);\n    /**\r\n     * Define an offset for the layer in order to shift the texture.\r\n     */\n\n    this.offset = new Vector2(0, 0);\n    /**\r\n     * Define the alpha blending mode used in the layer in case the texture or color has an alpha.\r\n     */\n\n    this.alphaBlendingMode = 2;\n    /**\r\n     * Define a mask to restrict the layer to only some of the scene cameras.\r\n     */\n\n    this.layerMask = 0x0FFFFFFF;\n    /**\r\n     * Define the list of render target the layer is visible into.\r\n     */\n\n    this.renderTargetTextures = [];\n    /**\r\n     * Define if the layer is only used in renderTarget or if it also\r\n     * renders in the main frame buffer of the canvas.\r\n     */\n\n    this.renderOnlyInRenderTargetTextures = false;\n    this._vertexBuffers = {};\n    /**\r\n     * An event triggered when the layer is disposed.\r\n     */\n\n    this.onDisposeObservable = new Observable();\n    /**\r\n    * An event triggered before rendering the scene\r\n    */\n\n    this.onBeforeRenderObservable = new Observable();\n    /**\r\n    * An event triggered after rendering the scene\r\n    */\n\n    this.onAfterRenderObservable = new Observable();\n    this.texture = imgUrl ? new Texture(imgUrl, scene, true) : null;\n    this.isBackground = isBackground === undefined ? true : isBackground;\n    this.color = color === undefined ? new Color4(1, 1, 1, 1) : color;\n    this._scene = scene || EngineStore.LastCreatedScene;\n\n    var layerComponent = this._scene._getComponent(SceneComponentConstants.NAME_LAYER);\n\n    if (!layerComponent) {\n      layerComponent = new LayerSceneComponent(this._scene);\n\n      this._scene._addComponent(layerComponent);\n    }\n\n    this._scene.layers.push(this);\n\n    var engine = this._scene.getEngine(); // VBO\n\n\n    var vertices = [];\n    vertices.push(1, 1);\n    vertices.push(-1, 1);\n    vertices.push(-1, -1);\n    vertices.push(1, -1);\n    var vertexBuffer = new VertexBuffer(engine, vertices, VertexBuffer.PositionKind, false, false, 2);\n    this._vertexBuffers[VertexBuffer.PositionKind] = vertexBuffer;\n\n    this._createIndexBuffer();\n  }\n\n  Object.defineProperty(Layer.prototype, \"onDispose\", {\n    /**\r\n     * Back compatibility with callback before the onDisposeObservable existed.\r\n     * The set callback will be triggered when the layer has been disposed.\r\n     */\n    set: function (callback) {\n      if (this._onDisposeObserver) {\n        this.onDisposeObservable.remove(this._onDisposeObserver);\n      }\n\n      this._onDisposeObserver = this.onDisposeObservable.add(callback);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Layer.prototype, \"onBeforeRender\", {\n    /**\r\n     * Back compatibility with callback before the onBeforeRenderObservable existed.\r\n     * The set callback will be triggered just before rendering the layer.\r\n     */\n    set: function (callback) {\n      if (this._onBeforeRenderObserver) {\n        this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n      }\n\n      this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Layer.prototype, \"onAfterRender\", {\n    /**\r\n     * Back compatibility with callback before the onAfterRenderObservable existed.\r\n     * The set callback will be triggered just after rendering the layer.\r\n     */\n    set: function (callback) {\n      if (this._onAfterRenderObserver) {\n        this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n      }\n\n      this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Layer.prototype._createIndexBuffer = function () {\n    var engine = this._scene.getEngine(); // Indices\n\n\n    var indices = [];\n    indices.push(0);\n    indices.push(1);\n    indices.push(2);\n    indices.push(0);\n    indices.push(2);\n    indices.push(3);\n    this._indexBuffer = engine.createIndexBuffer(indices);\n  };\n  /** @hidden */\n\n\n  Layer.prototype._rebuild = function () {\n    var vb = this._vertexBuffers[VertexBuffer.PositionKind];\n\n    if (vb) {\n      vb._rebuild();\n    }\n\n    this._createIndexBuffer();\n  };\n  /**\r\n   * Renders the layer in the scene.\r\n   */\n\n\n  Layer.prototype.render = function () {\n    var engine = this._scene.getEngine();\n\n    var defines = \"\";\n\n    if (this.alphaTest) {\n      defines = \"#define ALPHATEST\";\n    }\n\n    if (this.texture && !this.texture.gammaSpace) {\n      defines += \"\\r\\n#define LINEAR\";\n    }\n\n    if (this._previousDefines !== defines) {\n      this._previousDefines = defines;\n      this._effect = engine.createEffect(\"layer\", [VertexBuffer.PositionKind], [\"textureMatrix\", \"color\", \"scale\", \"offset\"], [\"textureSampler\"], defines);\n    }\n\n    var currentEffect = this._effect; // Check\n\n    if (!currentEffect || !currentEffect.isReady() || !this.texture || !this.texture.isReady()) {\n      return;\n    }\n\n    var engine = this._scene.getEngine();\n\n    this.onBeforeRenderObservable.notifyObservers(this); // Render\n\n    engine.enableEffect(currentEffect);\n    engine.setState(false); // Texture\n\n    currentEffect.setTexture(\"textureSampler\", this.texture);\n    currentEffect.setMatrix(\"textureMatrix\", this.texture.getTextureMatrix()); // Color\n\n    currentEffect.setFloat4(\"color\", this.color.r, this.color.g, this.color.b, this.color.a); // Scale / offset\n\n    currentEffect.setVector2(\"offset\", this.offset);\n    currentEffect.setVector2(\"scale\", this.scale); // VBOs\n\n    engine.bindBuffers(this._vertexBuffers, this._indexBuffer, currentEffect); // Draw order\n\n    if (!this.alphaTest) {\n      engine.setAlphaMode(this.alphaBlendingMode);\n      engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n      engine.setAlphaMode(0);\n    } else {\n      engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n    }\n\n    this.onAfterRenderObservable.notifyObservers(this);\n  };\n  /**\r\n   * Disposes and releases the associated ressources.\r\n   */\n\n\n  Layer.prototype.dispose = function () {\n    var vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\n\n    if (vertexBuffer) {\n      vertexBuffer.dispose();\n      this._vertexBuffers[VertexBuffer.PositionKind] = null;\n    }\n\n    if (this._indexBuffer) {\n      this._scene.getEngine()._releaseBuffer(this._indexBuffer);\n\n      this._indexBuffer = null;\n    }\n\n    if (this.texture) {\n      this.texture.dispose();\n      this.texture = null;\n    } // Clean RTT list\n\n\n    this.renderTargetTextures = []; // Remove from scene\n\n    var index = this._scene.layers.indexOf(this);\n\n    this._scene.layers.splice(index, 1); // Callback\n\n\n    this.onDisposeObservable.notifyObservers(this);\n    this.onDisposeObservable.clear();\n    this.onAfterRenderObservable.clear();\n    this.onBeforeRenderObservable.clear();\n  };\n\n  return Layer;\n}();\n\nexport { Layer };","map":{"version":3,"sources":["../../../sourceES6/core/Layers/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observer, Observable } from \"../Misc/observable\";\r\nimport { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\nimport { Color4 } from '../Maths/math.color';\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { VertexBuffer } from \"../Meshes/buffer\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { LayerSceneComponent } from \"./layerSceneComponent\";\r\n\r\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\n\r\nimport \"../Shaders/layer.fragment\";\r\nimport \"../Shaders/layer.vertex\";\r\nimport { DataBuffer } from '../Meshes/dataBuffer';\r\n\r\n/**\r\n * This represents a full screen 2d layer.\r\n * This can be useful to display a picture in the  background of your scene for instance.\r\n * @see https://www.babylonjs-playground.com/#08A2BS#1\r\n */\r\nexport class Layer {\r\n    /**\r\n     * Define the texture the layer should display.\r\n     */\r\n    public texture: Nullable<Texture>;\r\n\r\n    /**\r\n     * Is the layer in background or foreground.\r\n     */\r\n    public isBackground: boolean;\r\n\r\n    /**\r\n     * Define the color of the layer (instead of texture).\r\n     */\r\n    public color: Color4;\r\n\r\n    /**\r\n     * Define the scale of the layer in order to zoom in out of the texture.\r\n     */\r\n    public scale = new Vector2(1, 1);\r\n\r\n    /**\r\n     * Define an offset for the layer in order to shift the texture.\r\n     */\r\n    public offset = new Vector2(0, 0);\r\n\r\n    /**\r\n     * Define the alpha blending mode used in the layer in case the texture or color has an alpha.\r\n     */\r\n    public alphaBlendingMode = 2;\r\n\r\n    /**\r\n     * Define if the layer should alpha test or alpha blend with the rest of the scene.\r\n     * Alpha test will not mix with the background color in case of transparency.\r\n     * It will either use the texture color or the background depending on the alpha value of the current pixel.\r\n     */\r\n    public alphaTest: boolean;\r\n\r\n    /**\r\n     * Define a mask to restrict the layer to only some of the scene cameras.\r\n     */\r\n    public layerMask: number = 0x0FFFFFFF;\r\n\r\n    /**\r\n     * Define the list of render target the layer is visible into.\r\n     */\r\n    public renderTargetTextures: RenderTargetTexture[] = [];\r\n\r\n    /**\r\n     * Define if the layer is only used in renderTarget or if it also\r\n     * renders in the main frame buffer of the canvas.\r\n     */\r\n    public renderOnlyInRenderTargetTextures = false;\r\n\r\n    private _scene: Scene;\r\n    private _vertexBuffers: { [key: string]: Nullable<VertexBuffer> } = {};\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _effect: Effect;\r\n    private _previousDefines: string;\r\n\r\n    /**\r\n     * An event triggered when the layer is disposed.\r\n     */\r\n    public onDisposeObservable = new Observable<Layer>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<Layer>>;\r\n    /**\r\n     * Back compatibility with callback before the onDisposeObservable existed.\r\n     * The set callback will be triggered when the layer has been disposed.\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n    * An event triggered before rendering the scene\r\n    */\r\n    public onBeforeRenderObservable = new Observable<Layer>();\r\n\r\n    private _onBeforeRenderObserver: Nullable<Observer<Layer>>;\r\n    /**\r\n     * Back compatibility with callback before the onBeforeRenderObservable existed.\r\n     * The set callback will be triggered just before rendering the layer.\r\n     */\r\n    public set onBeforeRender(callback: () => void) {\r\n        if (this._onBeforeRenderObserver) {\r\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        }\r\n        this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n    * An event triggered after rendering the scene\r\n    */\r\n    public onAfterRenderObservable = new Observable<Layer>();\r\n\r\n    private _onAfterRenderObserver: Nullable<Observer<Layer>>;\r\n    /**\r\n     * Back compatibility with callback before the onAfterRenderObservable existed.\r\n     * The set callback will be triggered just after rendering the layer.\r\n     */\r\n    public set onAfterRender(callback: () => void) {\r\n        if (this._onAfterRenderObserver) {\r\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\r\n        }\r\n        this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new layer.\r\n     * This represents a full screen 2d layer.\r\n     * This can be useful to display a picture in the  background of your scene for instance.\r\n     * @see https://www.babylonjs-playground.com/#08A2BS#1\r\n     * @param name Define the name of the layer in the scene\r\n     * @param imgUrl Define the url of the texture to display in the layer\r\n     * @param scene Define the scene the layer belongs to\r\n     * @param isBackground Defines whether the layer is displayed in front or behind the scene\r\n     * @param color Defines a color for the layer\r\n     */\r\n    constructor(\r\n        /**\r\n         * Define the name of the layer.\r\n         */\r\n        public name: string,\r\n        imgUrl: Nullable<string>,\r\n        scene: Nullable<Scene>,\r\n        isBackground?: boolean, color?: Color4) {\r\n\r\n        this.texture = imgUrl ? new Texture(imgUrl, scene, true) : null;\r\n        this.isBackground = isBackground === undefined ? true : isBackground;\r\n        this.color = color === undefined ? new Color4(1, 1, 1, 1) : color;\r\n\r\n        this._scene = <Scene>(scene || EngineStore.LastCreatedScene);\r\n        let layerComponent = this._scene._getComponent(SceneComponentConstants.NAME_LAYER) as LayerSceneComponent;\r\n        if (!layerComponent) {\r\n            layerComponent = new LayerSceneComponent(this._scene);\r\n            this._scene._addComponent(layerComponent);\r\n        }\r\n        this._scene.layers.push(this);\r\n\r\n        var engine = this._scene.getEngine();\r\n\r\n        // VBO\r\n        var vertices = [];\r\n        vertices.push(1, 1);\r\n        vertices.push(-1, 1);\r\n        vertices.push(-1, -1);\r\n        vertices.push(1, -1);\r\n\r\n        var vertexBuffer = new VertexBuffer(engine, vertices, VertexBuffer.PositionKind, false, false, 2);\r\n        this._vertexBuffers[VertexBuffer.PositionKind] = vertexBuffer;\r\n\r\n        this._createIndexBuffer();\r\n    }\r\n\r\n    private _createIndexBuffer(): void {\r\n        var engine = this._scene.getEngine();\r\n\r\n        // Indices\r\n        var indices = [];\r\n        indices.push(0);\r\n        indices.push(1);\r\n        indices.push(2);\r\n\r\n        indices.push(0);\r\n        indices.push(2);\r\n        indices.push(3);\r\n\r\n        this._indexBuffer = engine.createIndexBuffer(indices);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild(): void {\r\n        let vb = this._vertexBuffers[VertexBuffer.PositionKind];\r\n\r\n        if (vb) {\r\n            vb._rebuild();\r\n        }\r\n\r\n        this._createIndexBuffer();\r\n    }\r\n\r\n    /**\r\n     * Renders the layer in the scene.\r\n     */\r\n    public render(): void {\r\n\r\n        var engine = this._scene.getEngine();\r\n\r\n        var defines = \"\";\r\n\r\n        if (this.alphaTest) {\r\n            defines = \"#define ALPHATEST\";\r\n        }\r\n\r\n        if (this.texture && !this.texture.gammaSpace) {\r\n            defines += \"\\r\\n#define LINEAR\";\r\n        }\r\n\r\n        if (this._previousDefines !== defines) {\r\n            this._previousDefines = defines;\r\n            this._effect = engine.createEffect(\"layer\",\r\n                [VertexBuffer.PositionKind],\r\n                [\"textureMatrix\", \"color\", \"scale\", \"offset\"],\r\n                [\"textureSampler\"], defines);\r\n        }\r\n        var currentEffect = this._effect;\r\n\r\n        // Check\r\n        if (!currentEffect || !currentEffect.isReady() || !this.texture || !this.texture.isReady()) {\r\n            return;\r\n        }\r\n\r\n        var engine = this._scene.getEngine();\r\n\r\n        this.onBeforeRenderObservable.notifyObservers(this);\r\n\r\n        // Render\r\n        engine.enableEffect(currentEffect);\r\n        engine.setState(false);\r\n\r\n        // Texture\r\n        currentEffect.setTexture(\"textureSampler\", this.texture);\r\n        currentEffect.setMatrix(\"textureMatrix\", this.texture.getTextureMatrix());\r\n\r\n        // Color\r\n        currentEffect.setFloat4(\"color\", this.color.r, this.color.g, this.color.b, this.color.a);\r\n\r\n        // Scale / offset\r\n        currentEffect.setVector2(\"offset\", this.offset);\r\n        currentEffect.setVector2(\"scale\", this.scale);\r\n\r\n        // VBOs\r\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, currentEffect);\r\n\r\n        // Draw order\r\n        if (!this.alphaTest) {\r\n            engine.setAlphaMode(this.alphaBlendingMode);\r\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\r\n            engine.setAlphaMode(0);\r\n        }\r\n        else {\r\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\r\n        }\r\n\r\n        this.onAfterRenderObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Disposes and releases the associated ressources.\r\n     */\r\n    public dispose(): void {\r\n        var vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (vertexBuffer) {\r\n            vertexBuffer.dispose();\r\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\r\n        }\r\n\r\n        if (this._indexBuffer) {\r\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\r\n            this._indexBuffer = null;\r\n        }\r\n\r\n        if (this.texture) {\r\n            this.texture.dispose();\r\n            this.texture = null;\r\n        }\r\n\r\n        // Clean RTT list\r\n        this.renderTargetTextures = [];\r\n\r\n        // Remove from scene\r\n        var index = this._scene.layers.indexOf(this);\r\n        this._scene.layers.splice(index, 1);\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n\r\n        this.onDisposeObservable.clear();\r\n        this.onAfterRenderObservable.clear();\r\n        this.onBeforeRenderObservable.clear();\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}