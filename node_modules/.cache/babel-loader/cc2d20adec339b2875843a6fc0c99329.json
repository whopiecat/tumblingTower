{"ast":null,"code":"import { Sound } from \"./sound\";\nimport { SoundTrack } from \"./soundTrack\";\nimport { Engine } from \"../Engines/engine\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { Scene } from \"../scene\";\nimport { AbstractScene } from \"../abstractScene\";\nimport \"./audioEngine\";\nimport { PrecisionDate } from '../Misc/precisionDate'; // Adds the parser to the scene parsers.\n\nAbstractScene.AddParser(SceneComponentConstants.NAME_AUDIO, function (parsedData, scene, container, rootUrl) {\n  // TODO: add sound\n  var loadedSounds = [];\n  var loadedSound;\n  container.sounds = container.sounds || [];\n\n  if (parsedData.sounds !== undefined && parsedData.sounds !== null) {\n    for (var index = 0, cache = parsedData.sounds.length; index < cache; index++) {\n      var parsedSound = parsedData.sounds[index];\n\n      if (Engine.audioEngine.canUseWebAudio) {\n        if (!parsedSound.url) {\n          parsedSound.url = parsedSound.name;\n        }\n\n        if (!loadedSounds[parsedSound.url]) {\n          loadedSound = Sound.Parse(parsedSound, scene, rootUrl);\n          loadedSounds[parsedSound.url] = loadedSound;\n          container.sounds.push(loadedSound);\n        } else {\n          container.sounds.push(Sound.Parse(parsedSound, scene, rootUrl, loadedSounds[parsedSound.url]));\n        }\n      } else {\n        container.sounds.push(new Sound(parsedSound.name, null, scene));\n      }\n    }\n  }\n\n  loadedSounds = [];\n});\nObject.defineProperty(Scene.prototype, \"mainSoundTrack\", {\n  get: function () {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    if (!this._mainSoundTrack) {\n      this._mainSoundTrack = new SoundTrack(this, {\n        mainTrack: true\n      });\n    }\n\n    return this._mainSoundTrack;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nScene.prototype.getSoundByName = function (name) {\n  var index;\n\n  for (index = 0; index < this.mainSoundTrack.soundCollection.length; index++) {\n    if (this.mainSoundTrack.soundCollection[index].name === name) {\n      return this.mainSoundTrack.soundCollection[index];\n    }\n  }\n\n  if (this.soundTracks) {\n    for (var sdIndex = 0; sdIndex < this.soundTracks.length; sdIndex++) {\n      for (index = 0; index < this.soundTracks[sdIndex].soundCollection.length; index++) {\n        if (this.soundTracks[sdIndex].soundCollection[index].name === name) {\n          return this.soundTracks[sdIndex].soundCollection[index];\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nObject.defineProperty(Scene.prototype, \"audioEnabled\", {\n  get: function () {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    return compo.audioEnabled;\n  },\n  set: function (value) {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    if (value) {\n      compo.enableAudio();\n    } else {\n      compo.disableAudio();\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"headphone\", {\n  get: function () {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    return compo.headphone;\n  },\n  set: function (value) {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    if (value) {\n      compo.switchAudioModeForHeadphones();\n    } else {\n      compo.switchAudioModeForNormalSpeakers();\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"audioListenerPositionProvider\", {\n  get: function () {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    return compo.audioListenerPositionProvider;\n  },\n  set: function (value) {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    if (typeof value !== 'function') {\n      throw new Error('The value passed to [Scene.audioListenerPositionProvider] must be a function that returns a Vector3');\n    } else {\n      compo.audioListenerPositionProvider = value;\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"audioPositioningRefreshRate\", {\n  get: function () {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    return compo.audioPositioningRefreshRate;\n  },\n  set: function (value) {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    compo.audioPositioningRefreshRate = value;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\r\n * Defines the sound scene component responsible to manage any sounds\r\n * in a given scene.\r\n */\n\nvar AudioSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function AudioSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_AUDIO;\n    this._audioEnabled = true;\n    this._headphone = false;\n    /**\r\n     * Gets or sets a refresh rate when using 3D audio positioning\r\n     */\n\n    this.audioPositioningRefreshRate = 500;\n    this._audioListenerPositionProvider = null;\n    this._cachedCameraDirection = new Vector3();\n    this._cachedCameraPosition = new Vector3();\n    this._lastCheck = 0;\n    this.scene = scene;\n    scene.soundTracks = new Array();\n    scene.sounds = new Array();\n  }\n\n  Object.defineProperty(AudioSceneComponent.prototype, \"audioEnabled\", {\n    /**\r\n     * Gets whether audio is enabled or not.\r\n     * Please use related enable/disable method to switch state.\r\n     */\n    get: function () {\n      return this._audioEnabled;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AudioSceneComponent.prototype, \"headphone\", {\n    /**\r\n     * Gets whether audio is outputing to headphone or not.\r\n     * Please use the according Switch methods to change output.\r\n     */\n    get: function () {\n      return this._headphone;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AudioSceneComponent.prototype, \"audioListenerPositionProvider\", {\n    /**\r\n     * Gets the current audio listener position provider\r\n     */\n    get: function () {\n      return this._audioListenerPositionProvider;\n    },\n\n    /**\r\n     * Sets a custom listener position for all sounds in the scene\r\n     * By default, this is the position of the first active camera\r\n     */\n    set: function (value) {\n      this._audioListenerPositionProvider = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n  AudioSceneComponent.prototype.register = function () {\n    this.scene._afterRenderStage.registerStep(SceneComponentConstants.STEP_AFTERRENDER_AUDIO, this, this._afterRender);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  AudioSceneComponent.prototype.rebuild = function () {// Nothing to do here. (Not rendering related)\n  };\n  /**\r\n   * Serializes the component data to the specified json object\r\n   * @param serializationObject The object to serialize to\r\n   */\n\n\n  AudioSceneComponent.prototype.serialize = function (serializationObject) {\n    serializationObject.sounds = [];\n\n    if (this.scene.soundTracks) {\n      for (var index = 0; index < this.scene.soundTracks.length; index++) {\n        var soundtrack = this.scene.soundTracks[index];\n\n        for (var soundId = 0; soundId < soundtrack.soundCollection.length; soundId++) {\n          serializationObject.sounds.push(soundtrack.soundCollection[soundId].serialize());\n        }\n      }\n    }\n  };\n  /**\r\n   * Adds all the elements from the container to the scene\r\n   * @param container the container holding the elements\r\n   */\n\n\n  AudioSceneComponent.prototype.addFromContainer = function (container) {\n    var _this = this;\n\n    if (!container.sounds) {\n      return;\n    }\n\n    container.sounds.forEach(function (sound) {\n      sound.play();\n      sound.autoplay = true;\n\n      _this.scene.mainSoundTrack.addSound(sound);\n    });\n  };\n  /**\r\n   * Removes all the elements in the container from the scene\r\n   * @param container contains the elements to remove\r\n   * @param dispose if the removed element should be disposed (default: false)\r\n   */\n\n\n  AudioSceneComponent.prototype.removeFromContainer = function (container, dispose) {\n    var _this = this;\n\n    if (dispose === void 0) {\n      dispose = false;\n    }\n\n    if (!container.sounds) {\n      return;\n    }\n\n    container.sounds.forEach(function (sound) {\n      sound.stop();\n      sound.autoplay = false;\n\n      _this.scene.mainSoundTrack.removeSound(sound);\n\n      if (dispose) {\n        sound.dispose();\n      }\n    });\n  };\n  /**\r\n   * Disposes the component and the associated ressources.\r\n   */\n\n\n  AudioSceneComponent.prototype.dispose = function () {\n    var scene = this.scene;\n\n    if (scene._mainSoundTrack) {\n      scene.mainSoundTrack.dispose();\n    }\n\n    if (scene.soundTracks) {\n      for (var scIndex = 0; scIndex < scene.soundTracks.length; scIndex++) {\n        scene.soundTracks[scIndex].dispose();\n      }\n    }\n  };\n  /**\r\n   * Disables audio in the associated scene.\r\n   */\n\n\n  AudioSceneComponent.prototype.disableAudio = function () {\n    var scene = this.scene;\n    this._audioEnabled = false;\n\n    if (Engine.audioEngine && Engine.audioEngine.audioContext) {\n      Engine.audioEngine.audioContext.suspend();\n    }\n\n    var i;\n\n    for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\n      scene.mainSoundTrack.soundCollection[i].pause();\n    }\n\n    if (scene.soundTracks) {\n      for (i = 0; i < scene.soundTracks.length; i++) {\n        for (var j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\n          scene.soundTracks[i].soundCollection[j].pause();\n        }\n      }\n    }\n  };\n  /**\r\n   * Enables audio in the associated scene.\r\n   */\n\n\n  AudioSceneComponent.prototype.enableAudio = function () {\n    var scene = this.scene;\n    this._audioEnabled = true;\n\n    if (Engine.audioEngine && Engine.audioEngine.audioContext) {\n      Engine.audioEngine.audioContext.resume();\n    }\n\n    var i;\n\n    for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\n      if (scene.mainSoundTrack.soundCollection[i].isPaused) {\n        scene.mainSoundTrack.soundCollection[i].play();\n      }\n    }\n\n    if (scene.soundTracks) {\n      for (i = 0; i < scene.soundTracks.length; i++) {\n        for (var j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\n          if (scene.soundTracks[i].soundCollection[j].isPaused) {\n            scene.soundTracks[i].soundCollection[j].play();\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Switch audio to headphone output.\r\n   */\n\n\n  AudioSceneComponent.prototype.switchAudioModeForHeadphones = function () {\n    var scene = this.scene;\n    this._headphone = true;\n    scene.mainSoundTrack.switchPanningModelToHRTF();\n\n    if (scene.soundTracks) {\n      for (var i = 0; i < scene.soundTracks.length; i++) {\n        scene.soundTracks[i].switchPanningModelToHRTF();\n      }\n    }\n  };\n  /**\r\n   * Switch audio to normal speakers.\r\n   */\n\n\n  AudioSceneComponent.prototype.switchAudioModeForNormalSpeakers = function () {\n    var scene = this.scene;\n    this._headphone = false;\n    scene.mainSoundTrack.switchPanningModelToEqualPower();\n\n    if (scene.soundTracks) {\n      for (var i = 0; i < scene.soundTracks.length; i++) {\n        scene.soundTracks[i].switchPanningModelToEqualPower();\n      }\n    }\n  };\n\n  AudioSceneComponent.prototype._afterRender = function () {\n    var now = PrecisionDate.Now;\n\n    if (this._lastCheck && now - this._lastCheck < this.audioPositioningRefreshRate) {\n      return;\n    }\n\n    this._lastCheck = now;\n    var scene = this.scene;\n\n    if (!this._audioEnabled || !scene._mainSoundTrack || !scene.soundTracks || scene._mainSoundTrack.soundCollection.length === 0 && scene.soundTracks.length === 1) {\n      return;\n    }\n\n    var audioEngine = Engine.audioEngine;\n\n    if (!audioEngine) {\n      return;\n    }\n\n    if (audioEngine.audioContext) {\n      // A custom listener position provider was set\n      // Use the users provided position instead of camera's\n      if (this._audioListenerPositionProvider) {\n        var position = this._audioListenerPositionProvider(); // Make sure all coordinates were provided\n\n\n        position.x = position.x || 0;\n        position.y = position.y || 0;\n        position.z = position.z || 0; // Set the listener position\n\n        audioEngine.audioContext.listener.setPosition(position.x, position.y, position.z);\n      } else {\n        var listeningCamera;\n\n        if (scene.activeCameras && scene.activeCameras.length > 0) {\n          listeningCamera = scene.activeCameras[0];\n        } else {\n          listeningCamera = scene.activeCamera;\n        } // Check if there is a listening camera\n\n\n        if (listeningCamera) {\n          // Set the listener position to the listening camera global position\n          if (!this._cachedCameraPosition.equals(listeningCamera.globalPosition)) {\n            this._cachedCameraPosition.copyFrom(listeningCamera.globalPosition);\n\n            audioEngine.audioContext.listener.setPosition(listeningCamera.globalPosition.x, listeningCamera.globalPosition.y, listeningCamera.globalPosition.z);\n          } // for VR cameras\n\n\n          if (listeningCamera.rigCameras && listeningCamera.rigCameras.length > 0) {\n            listeningCamera = listeningCamera.rigCameras[0];\n          }\n\n          var mat = Matrix.Invert(listeningCamera.getViewMatrix());\n          var cameraDirection = Vector3.TransformNormal(scene.useRightHandedSystem ? AudioSceneComponent._CameraDirectionRH : AudioSceneComponent._CameraDirectionLH, mat);\n          cameraDirection.normalize(); // To avoid some errors on GearVR\n\n          if (!isNaN(cameraDirection.x) && !isNaN(cameraDirection.y) && !isNaN(cameraDirection.z)) {\n            if (!this._cachedCameraDirection.equals(cameraDirection)) {\n              this._cachedCameraDirection.copyFrom(cameraDirection);\n\n              audioEngine.audioContext.listener.setOrientation(cameraDirection.x, cameraDirection.y, cameraDirection.z, 0, 1, 0);\n            }\n          }\n        } // Otherwise set the listener position to 0, 0 ,0\n        else {\n            // Set the listener position\n            audioEngine.audioContext.listener.setPosition(0, 0, 0);\n          }\n      }\n\n      var i;\n\n      for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\n        var sound = scene.mainSoundTrack.soundCollection[i];\n\n        if (sound.useCustomAttenuation) {\n          sound.updateDistanceFromListener();\n        }\n      }\n\n      if (scene.soundTracks) {\n        for (i = 0; i < scene.soundTracks.length; i++) {\n          for (var j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\n            sound = scene.soundTracks[i].soundCollection[j];\n\n            if (sound.useCustomAttenuation) {\n              sound.updateDistanceFromListener();\n            }\n          }\n        }\n      }\n    }\n  };\n\n  AudioSceneComponent._CameraDirectionLH = new Vector3(0, 0, -1);\n  AudioSceneComponent._CameraDirectionRH = new Vector3(0, 0, 1);\n  return AudioSceneComponent;\n}();\n\nexport { AudioSceneComponent };\n\nSound._SceneComponentInitialization = function (scene) {\n  var compo = scene._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n  if (!compo) {\n    compo = new AudioSceneComponent(scene);\n\n    scene._addComponent(compo);\n  }\n};","map":{"version":3,"sources":["../../../sourceES6/core/Audio/audioSceneComponent.ts"],"names":[],"mappings":"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","sourcesContent":["import { Sound } from \"./sound\";\r\nimport { SoundTrack } from \"./soundTrack\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Nullable } from \"../types\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { SceneComponentConstants, ISceneSerializableComponent } from \"../sceneComponent\";\r\nimport { Scene } from \"../scene\";\r\nimport { AbstractScene } from \"../abstractScene\";\r\nimport { AssetContainer } from \"../assetContainer\";\r\n\r\nimport \"./audioEngine\";\r\nimport { PrecisionDate } from '../Misc/precisionDate';\r\n\r\n// Adds the parser to the scene parsers.\r\nAbstractScene.AddParser(SceneComponentConstants.NAME_AUDIO, (parsedData: any, scene: Scene, container: AssetContainer, rootUrl: string) => {\r\n    // TODO: add sound\r\n    var loadedSounds: Sound[] = [];\r\n    var loadedSound: Sound;\r\n    container.sounds = container.sounds || [];\r\n    if (parsedData.sounds !== undefined && parsedData.sounds !== null) {\r\n        for (let index = 0, cache = parsedData.sounds.length; index < cache; index++) {\r\n            var parsedSound = parsedData.sounds[index];\r\n            if (Engine.audioEngine.canUseWebAudio) {\r\n                if (!parsedSound.url) { parsedSound.url = parsedSound.name; }\r\n                if (!loadedSounds[parsedSound.url]) {\r\n                    loadedSound = Sound.Parse(parsedSound, scene, rootUrl);\r\n                    loadedSounds[parsedSound.url] = loadedSound;\r\n                    container.sounds.push(loadedSound);\r\n                }\r\n                else {\r\n                    container.sounds.push(Sound.Parse(parsedSound, scene, rootUrl, loadedSounds[parsedSound.url]));\r\n                }\r\n            } else {\r\n                container.sounds.push(new Sound(parsedSound.name, null, scene));\r\n            }\r\n        }\r\n    }\r\n\r\n    loadedSounds = [];\r\n});\r\n\r\ndeclare module \"../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /**\r\n         * The list of sounds used in the scene.\r\n         */\r\n        sounds: Nullable<Array<Sound>>;\r\n    }\r\n}\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * @hidden\r\n         * Backing field\r\n         */\r\n        _mainSoundTrack: SoundTrack;\r\n        /**\r\n         * The main sound track played by the scene.\r\n         * It cotains your primary collection of sounds.\r\n         */\r\n        mainSoundTrack: SoundTrack;\r\n        /**\r\n         * The list of sound tracks added to the scene\r\n         * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n         */\r\n        soundTracks: Nullable<Array<SoundTrack>>;\r\n\r\n        /**\r\n         * Gets a sound using a given name\r\n         * @param name defines the name to search for\r\n         * @return the found sound or null if not found at all.\r\n         */\r\n        getSoundByName(name: string): Nullable<Sound>;\r\n\r\n        /**\r\n         * Gets or sets if audio support is enabled\r\n         * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n         */\r\n        audioEnabled: boolean;\r\n\r\n        /**\r\n         * Gets or sets if audio will be output to headphones\r\n         * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n         */\r\n        headphone: boolean;\r\n\r\n        /**\r\n         * Gets or sets custom audio listener position provider\r\n         * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n         */\r\n        audioListenerPositionProvider: Nullable<() => Vector3>;\r\n\r\n        /**\r\n         * Gets or sets a refresh rate when using 3D audio positioning\r\n         */\r\n        audioPositioningRefreshRate: number;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"mainSoundTrack\", {\r\n    get: function(this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (!this._mainSoundTrack) {\r\n            this._mainSoundTrack = new SoundTrack(this, { mainTrack: true });\r\n        }\r\n\r\n        return this._mainSoundTrack;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\nScene.prototype.getSoundByName = function(name: string): Nullable<Sound> {\r\n    var index: number;\r\n    for (index = 0; index < this.mainSoundTrack.soundCollection.length; index++) {\r\n        if (this.mainSoundTrack.soundCollection[index].name === name) {\r\n            return this.mainSoundTrack.soundCollection[index];\r\n        }\r\n    }\r\n\r\n    if (this.soundTracks) {\r\n        for (var sdIndex = 0; sdIndex < this.soundTracks.length; sdIndex++) {\r\n            for (index = 0; index < this.soundTracks[sdIndex].soundCollection.length; index++) {\r\n                if (this.soundTracks[sdIndex].soundCollection[index].name === name) {\r\n                    return this.soundTracks[sdIndex].soundCollection[index];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nObject.defineProperty(Scene.prototype, \"audioEnabled\", {\r\n    get: function(this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioEnabled;\r\n    },\r\n    set: function(this: Scene, value: boolean) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (value) {\r\n            compo.enableAudio();\r\n        }\r\n        else {\r\n            compo.disableAudio();\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"headphone\", {\r\n    get: function(this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.headphone;\r\n    },\r\n    set: function(this: Scene, value: boolean) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (value) {\r\n            compo.switchAudioModeForHeadphones();\r\n        }\r\n        else {\r\n            compo.switchAudioModeForNormalSpeakers();\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"audioListenerPositionProvider\", {\r\n    get: function(this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioListenerPositionProvider;\r\n    },\r\n    set: function(this: Scene, value: () => Vector3) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (typeof value !== 'function') {\r\n            throw new Error('The value passed to [Scene.audioListenerPositionProvider] must be a function that returns a Vector3');\r\n        } else {\r\n            compo.audioListenerPositionProvider = value;\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"audioPositioningRefreshRate\", {\r\n    get: function(this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioPositioningRefreshRate;\r\n    },\r\n    set: function(this: Scene, value: number) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        compo.audioPositioningRefreshRate = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\n/**\r\n * Defines the sound scene component responsible to manage any sounds\r\n * in a given scene.\r\n */\r\nexport class AudioSceneComponent implements ISceneSerializableComponent {\r\n    private static _CameraDirectionLH = new Vector3(0, 0, -1);\r\n    private static _CameraDirectionRH = new Vector3(0, 0, 1);\r\n\r\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_AUDIO;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    private _audioEnabled = true;\r\n    /**\r\n     * Gets whether audio is enabled or not.\r\n     * Please use related enable/disable method to switch state.\r\n     */\r\n    public get audioEnabled(): boolean {\r\n        return this._audioEnabled;\r\n    }\r\n\r\n    private _headphone = false;\r\n    /**\r\n     * Gets whether audio is outputing to headphone or not.\r\n     * Please use the according Switch methods to change output.\r\n     */\r\n    public get headphone(): boolean {\r\n        return this._headphone;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a refresh rate when using 3D audio positioning\r\n     */\r\n    public audioPositioningRefreshRate = 500;\r\n\r\n    private _audioListenerPositionProvider: Nullable<() => Vector3> = null;\r\n    /**\r\n     * Gets the current audio listener position provider\r\n     */\r\n    public get audioListenerPositionProvider(): Nullable<() => Vector3> {\r\n        return this._audioListenerPositionProvider;\r\n    }\r\n    /**\r\n     * Sets a custom listener position for all sounds in the scene\r\n     * By default, this is the position of the first active camera\r\n     */\r\n    public set audioListenerPositionProvider(value: Nullable<() => Vector3>) {\r\n        this._audioListenerPositionProvider = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n\r\n        scene.soundTracks = new Array<SoundTrack>();\r\n        scene.sounds = new Array<Sound>();\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._afterRenderStage.registerStep(SceneComponentConstants.STEP_AFTERRENDER_AUDIO, this, this._afterRender);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do here. (Not rendering related)\r\n    }\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        serializationObject.sounds = [];\r\n\r\n        if (this.scene.soundTracks) {\r\n            for (var index = 0; index < this.scene.soundTracks.length; index++) {\r\n                var soundtrack = this.scene.soundTracks[index];\r\n\r\n                for (var soundId = 0; soundId < soundtrack.soundCollection.length; soundId++) {\r\n                    serializationObject.sounds.push(soundtrack.soundCollection[soundId].serialize());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    public addFromContainer(container: AbstractScene): void {\r\n        if (!container.sounds) {\r\n            return;\r\n        }\r\n        container.sounds.forEach((sound) => {\r\n            sound.play();\r\n            sound.autoplay = true;\r\n            this.scene.mainSoundTrack.addSound(sound);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    public removeFromContainer(container: AbstractScene, dispose = false): void {\r\n        if (!container.sounds) {\r\n            return;\r\n        }\r\n        container.sounds.forEach((sound) => {\r\n            sound.stop();\r\n            sound.autoplay = false;\r\n            this.scene.mainSoundTrack.removeSound(sound);\r\n            if (dispose) {\r\n                sound.dispose();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated ressources.\r\n     */\r\n    public dispose(): void {\r\n        const scene = this.scene;\r\n        if (scene._mainSoundTrack) {\r\n            scene.mainSoundTrack.dispose();\r\n        }\r\n\r\n        if (scene.soundTracks) {\r\n            for (var scIndex = 0; scIndex < scene.soundTracks.length; scIndex++) {\r\n                scene.soundTracks[scIndex].dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disables audio in the associated scene.\r\n     */\r\n    public disableAudio() {\r\n        const scene = this.scene;\r\n        this._audioEnabled = false;\r\n\r\n        if (Engine.audioEngine && Engine.audioEngine.audioContext) {\r\n            Engine.audioEngine.audioContext.suspend();\r\n        }\r\n\r\n        let i: number;\r\n        for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\r\n            scene.mainSoundTrack.soundCollection[i].pause();\r\n        }\r\n        if (scene.soundTracks) {\r\n            for (i = 0; i < scene.soundTracks.length; i++) {\r\n                for (var j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\r\n                    scene.soundTracks[i].soundCollection[j].pause();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables audio in the associated scene.\r\n     */\r\n    public enableAudio() {\r\n        const scene = this.scene;\r\n        this._audioEnabled = true;\r\n\r\n        if (Engine.audioEngine && Engine.audioEngine.audioContext) {\r\n            Engine.audioEngine.audioContext.resume();\r\n        }\r\n\r\n        let i: number;\r\n        for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\r\n            if (scene.mainSoundTrack.soundCollection[i].isPaused) {\r\n                scene.mainSoundTrack.soundCollection[i].play();\r\n            }\r\n        }\r\n        if (scene.soundTracks) {\r\n            for (i = 0; i < scene.soundTracks.length; i++) {\r\n                for (var j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\r\n                    if (scene.soundTracks[i].soundCollection[j].isPaused) {\r\n                        scene.soundTracks[i].soundCollection[j].play();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch audio to headphone output.\r\n     */\r\n    public switchAudioModeForHeadphones() {\r\n        const scene = this.scene;\r\n        this._headphone = true;\r\n\r\n        scene.mainSoundTrack.switchPanningModelToHRTF();\r\n        if (scene.soundTracks) {\r\n            for (var i = 0; i < scene.soundTracks.length; i++) {\r\n                scene.soundTracks[i].switchPanningModelToHRTF();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch audio to normal speakers.\r\n     */\r\n    public switchAudioModeForNormalSpeakers() {\r\n        const scene = this.scene;\r\n        this._headphone = false;\r\n\r\n        scene.mainSoundTrack.switchPanningModelToEqualPower();\r\n\r\n        if (scene.soundTracks) {\r\n            for (var i = 0; i < scene.soundTracks.length; i++) {\r\n                scene.soundTracks[i].switchPanningModelToEqualPower();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _cachedCameraDirection = new Vector3();\r\n    private _cachedCameraPosition = new Vector3();\r\n    private _lastCheck = 0;\r\n\r\n    private _afterRender() {\r\n        var now = PrecisionDate.Now;\r\n        if (this._lastCheck && now - this._lastCheck < this.audioPositioningRefreshRate) {\r\n            return;\r\n        }\r\n\r\n        this._lastCheck = now;\r\n\r\n        const scene = this.scene;\r\n        if (!this._audioEnabled || !scene._mainSoundTrack || !scene.soundTracks || (scene._mainSoundTrack.soundCollection.length === 0 && scene.soundTracks.length === 1)) {\r\n            return;\r\n        }\r\n\r\n        var audioEngine = Engine.audioEngine;\r\n\r\n        if (!audioEngine) {\r\n            return;\r\n        }\r\n\r\n        if (audioEngine.audioContext) {\r\n            // A custom listener position provider was set\r\n            // Use the users provided position instead of camera's\r\n            if (this._audioListenerPositionProvider) {\r\n                var position: Vector3 = this._audioListenerPositionProvider();\r\n                // Make sure all coordinates were provided\r\n                position.x = position.x || 0;\r\n                position.y = position.y || 0;\r\n                position.z = position.z || 0;\r\n                // Set the listener position\r\n                audioEngine.audioContext.listener.setPosition(position.x, position.y, position.z);\r\n            } else {\r\n                var listeningCamera: Nullable<Camera>;\r\n\r\n                if (scene.activeCameras && scene.activeCameras.length > 0) {\r\n                    listeningCamera = scene.activeCameras[0];\r\n                } else {\r\n                    listeningCamera = scene.activeCamera;\r\n                }\r\n\r\n                // Check if there is a listening camera\r\n                if (listeningCamera) {\r\n                    // Set the listener position to the listening camera global position\r\n                    if (!this._cachedCameraPosition.equals(listeningCamera.globalPosition)) {\r\n                        this._cachedCameraPosition.copyFrom(listeningCamera.globalPosition);\r\n                        audioEngine.audioContext.listener.setPosition(listeningCamera.globalPosition.x, listeningCamera.globalPosition.y, listeningCamera.globalPosition.z);\r\n                    }\r\n\r\n                    // for VR cameras\r\n                    if (listeningCamera.rigCameras && listeningCamera.rigCameras.length > 0) {\r\n                        listeningCamera = listeningCamera.rigCameras[0];\r\n                    }\r\n                    var mat = Matrix.Invert(listeningCamera.getViewMatrix());\r\n                    var cameraDirection = Vector3.TransformNormal(scene.useRightHandedSystem ? AudioSceneComponent._CameraDirectionRH : AudioSceneComponent._CameraDirectionLH, mat);\r\n                    cameraDirection.normalize();\r\n                    // To avoid some errors on GearVR\r\n                    if (!isNaN(cameraDirection.x) && !isNaN(cameraDirection.y) && !isNaN(cameraDirection.z)) {\r\n                        if (!this._cachedCameraDirection.equals(cameraDirection)) {\r\n                            this._cachedCameraDirection.copyFrom(cameraDirection);\r\n                            audioEngine.audioContext.listener.setOrientation(cameraDirection.x, cameraDirection.y, cameraDirection.z, 0, 1, 0);\r\n                        }\r\n                    }\r\n                }\r\n                // Otherwise set the listener position to 0, 0 ,0\r\n                else {\r\n                    // Set the listener position\r\n                    audioEngine.audioContext.listener.setPosition(0, 0, 0);\r\n                }\r\n            }\r\n\r\n            var i: number;\r\n            for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\r\n                var sound = scene.mainSoundTrack.soundCollection[i];\r\n                if (sound.useCustomAttenuation) {\r\n                    sound.updateDistanceFromListener();\r\n                }\r\n            }\r\n            if (scene.soundTracks) {\r\n                for (i = 0; i < scene.soundTracks.length; i++) {\r\n                    for (var j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\r\n                        sound = scene.soundTracks[i].soundCollection[j];\r\n                        if (sound.useCustomAttenuation) {\r\n                            sound.updateDistanceFromListener();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nSound._SceneComponentInitialization = (scene: Scene) => {\r\n    let compo = scene._getComponent(SceneComponentConstants.NAME_AUDIO);\r\n    if (!compo) {\r\n        compo = new AudioSceneComponent(scene);\r\n        scene._addComponent(compo);\r\n    }\r\n};\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}