{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Color3 } from '../Maths/math.color';\nimport { TransformNode } from \"../Meshes/transformNode\";\nimport { PlaneBuilder } from \"../Meshes/Builders/planeBuilder\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\nimport { Gizmo } from \"./gizmo\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\n/**\r\n * Single plane drag gizmo\r\n */\n\nvar PlaneDragGizmo =\n/** @class */\nfunction (_super) {\n  __extends(PlaneDragGizmo, _super);\n  /**\r\n   * Creates a PlaneDragGizmo\r\n   * @param gizmoLayer The utility layer the gizmo will be added to\r\n   * @param dragPlaneNormal The axis normal to which the gizmo will be able to drag on\r\n   * @param color The color of the gizmo\r\n   */\n\n\n  function PlaneDragGizmo(dragPlaneNormal, color, gizmoLayer, parent) {\n    if (color === void 0) {\n      color = Color3.Gray();\n    }\n\n    if (gizmoLayer === void 0) {\n      gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer;\n    }\n\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    var _a;\n\n    var _this = _super.call(this, gizmoLayer) || this;\n\n    _this._pointerObserver = null;\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\n\n    _this.snapDistance = 0;\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\n\n    _this.onSnapObservable = new Observable();\n    _this._isEnabled = false;\n    _this._parent = null;\n    _this._dragging = false;\n    _this._parent = parent; // Create Material\n\n    _this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    _this._coloredMaterial.diffuseColor = color;\n    _this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\n    _this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    _this._hoverMaterial.diffuseColor = Color3.Yellow();\n    _this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    _this._disableMaterial.diffuseColor = Color3.Gray();\n    _this._disableMaterial.alpha = 0.4; // Build plane mesh on root node\n\n    _this._gizmoMesh = PlaneDragGizmo._CreatePlane(gizmoLayer.utilityLayerScene, _this._coloredMaterial);\n\n    _this._gizmoMesh.lookAt(_this._rootMesh.position.add(dragPlaneNormal));\n\n    _this._gizmoMesh.scaling.scaleInPlace(1 / 3);\n\n    _this._gizmoMesh.parent = _this._rootMesh;\n    var currentSnapDragDistance = 0;\n    var tmpVector = new Vector3();\n    var tmpSnapEvent = {\n      snapDistance: 0\n    }; // Add dragPlaneNormal drag behavior to handle events when the gizmo is dragged\n\n    _this.dragBehavior = new PointerDragBehavior({\n      dragPlaneNormal: dragPlaneNormal\n    });\n    _this.dragBehavior.moveAttached = false;\n\n    _this._rootMesh.addBehavior(_this.dragBehavior);\n\n    _this.dragBehavior.onDragObservable.add(function (event) {\n      if (_this.attachedNode) {\n        // Keep world translation and use it to update world transform\n        // if the node has parent, the local transform properties (position, rotation, scale)\n        // will be recomputed in _matrixChanged function\n        // Snapping logic\n        if (_this.snapDistance == 0) {\n          _this.attachedNode.getWorldMatrix().addTranslationFromFloats(event.delta.x, event.delta.y, event.delta.z);\n        } else {\n          currentSnapDragDistance += event.dragDistance;\n\n          if (Math.abs(currentSnapDragDistance) > _this.snapDistance) {\n            var dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / _this.snapDistance);\n            currentSnapDragDistance = currentSnapDragDistance % _this.snapDistance;\n            event.delta.normalizeToRef(tmpVector);\n            tmpVector.scaleInPlace(_this.snapDistance * dragSteps);\n\n            _this.attachedNode.getWorldMatrix().addTranslationFromFloats(tmpVector.x, tmpVector.y, tmpVector.z);\n\n            tmpSnapEvent.snapDistance = _this.snapDistance * dragSteps;\n\n            _this.onSnapObservable.notifyObservers(tmpSnapEvent);\n          }\n        }\n\n        _this._matrixChanged();\n      }\n    });\n\n    _this.dragBehavior.onDragStartObservable.add(function () {\n      _this._dragging = true;\n    });\n\n    _this.dragBehavior.onDragEndObservable.add(function () {\n      _this._dragging = false;\n    });\n\n    var light = gizmoLayer._getSharedGizmoLight();\n\n    light.includedOnlyMeshes = light.includedOnlyMeshes.concat(_this._rootMesh.getChildMeshes(false));\n    var cache = {\n      gizmoMeshes: _this._gizmoMesh.getChildMeshes(),\n      colliderMeshes: _this._gizmoMesh.getChildMeshes(),\n      material: _this._coloredMaterial,\n      hoverMaterial: _this._hoverMaterial,\n      disableMaterial: _this._disableMaterial,\n      active: false\n    };\n    (_a = _this._parent) === null || _a === void 0 ? void 0 : _a.addToAxisCache(_this._gizmoMesh, cache);\n    _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n      var _a;\n\n      if (_this._customMeshSet) {\n        return;\n      }\n\n      _this._isHovered = !!(cache.colliderMeshes.indexOf((_a = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) != -1);\n\n      if (!_this._parent) {\n        var material = _this._isHovered || _this._dragging ? _this._hoverMaterial : _this._coloredMaterial;\n        cache.gizmoMeshes.forEach(function (m) {\n          m.material = material;\n        });\n      }\n    });\n    return _this;\n  }\n  /** @hidden */\n\n\n  PlaneDragGizmo._CreatePlane = function (scene, material) {\n    var plane = new TransformNode(\"plane\", scene); //make sure plane is double sided\n\n    var dragPlane = PlaneBuilder.CreatePlane(\"dragPlane\", {\n      width: .1375,\n      height: .1375,\n      sideOrientation: 2\n    }, scene);\n    dragPlane.material = material;\n    dragPlane.parent = plane;\n    return plane;\n  };\n\n  PlaneDragGizmo.prototype._attachedNodeChanged = function (value) {\n    if (this.dragBehavior) {\n      this.dragBehavior.enabled = value ? true : false;\n    }\n  };\n\n  Object.defineProperty(PlaneDragGizmo.prototype, \"isEnabled\", {\n    get: function () {\n      return this._isEnabled;\n    },\n\n    /**\r\n     * If the gizmo is enabled\r\n     */\n    set: function (value) {\n      this._isEnabled = value;\n\n      if (!value) {\n        this.attachedNode = null;\n      } else {\n        if (this._parent) {\n          this.attachedNode = this._parent.attachedNode;\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Disposes of the gizmo\r\n   */\n\n  PlaneDragGizmo.prototype.dispose = function () {\n    this.onSnapObservable.clear();\n    this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n    this.dragBehavior.detach();\n\n    _super.prototype.dispose.call(this);\n\n    if (this._gizmoMesh) {\n      this._gizmoMesh.dispose();\n    }\n\n    [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(function (matl) {\n      if (matl) {\n        matl.dispose();\n      }\n    });\n  };\n\n  return PlaneDragGizmo;\n}(Gizmo);\n\nexport { PlaneDragGizmo };","map":{"version":3,"sources":["../../../sourceES6/core/Gizmos/planeDragGizmo.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observer, Observable } from \"../Misc/observable\";\r\nimport { Nullable } from \"../types\";\r\nimport { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from '../Maths/math.color';\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport { Node } from \"../node\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { PlaneBuilder } from \"../Meshes/Builders/planeBuilder\";\r\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\r\nimport { Gizmo, GizmoAxisCache } from \"./gizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { Scene } from \"../scene\";\r\nimport { PositionGizmo } from \"./positionGizmo\";\r\n/**\r\n * Single plane drag gizmo\r\n */\r\nexport class PlaneDragGizmo extends Gizmo {\r\n    /**\r\n     * Drag behavior responsible for the gizmos dragging interactions\r\n     */\r\n    public dragBehavior: PointerDragBehavior;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>> = null;\r\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public snapDistance = 0;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\r\n    public onSnapObservable = new Observable<{ snapDistance: number }>();\r\n\r\n    private _gizmoMesh: TransformNode;\r\n    private _coloredMaterial: StandardMaterial;\r\n    private _hoverMaterial: StandardMaterial;\r\n    private _disableMaterial: StandardMaterial;\r\n\r\n    private _isEnabled: boolean = false;\r\n    private _parent: Nullable<PositionGizmo> = null;\r\n    private _dragging: boolean = false;\r\n\r\n    /** @hidden */\r\n    public static _CreatePlane(scene: Scene, material: StandardMaterial): TransformNode {\r\n        var plane = new TransformNode(\"plane\", scene);\r\n\r\n        //make sure plane is double sided\r\n        var dragPlane = PlaneBuilder.CreatePlane(\"dragPlane\", { width: .1375, height: .1375, sideOrientation: 2 }, scene);\r\n        dragPlane.material = material;\r\n        dragPlane.parent = plane;\r\n        return plane;\r\n    }\r\n\r\n    /**\r\n     * Creates a PlaneDragGizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param dragPlaneNormal The axis normal to which the gizmo will be able to drag on\r\n     * @param color The color of the gizmo\r\n     */\r\n    constructor(dragPlaneNormal: Vector3, color: Color3 = Color3.Gray(), gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer, parent: Nullable<PositionGizmo> = null) {\r\n        super(gizmoLayer);\r\n        this._parent = parent;\r\n        // Create Material\r\n        this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._coloredMaterial.diffuseColor = color;\r\n        this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\r\n\r\n        this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._hoverMaterial.diffuseColor = Color3.Yellow();\r\n\r\n        this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._disableMaterial.diffuseColor = Color3.Gray();\r\n        this._disableMaterial.alpha = 0.4;\r\n\r\n        // Build plane mesh on root node\r\n        this._gizmoMesh = PlaneDragGizmo._CreatePlane(gizmoLayer.utilityLayerScene, this._coloredMaterial);\r\n\r\n        this._gizmoMesh.lookAt(this._rootMesh.position.add(dragPlaneNormal));\r\n        this._gizmoMesh.scaling.scaleInPlace(1 / 3);\r\n        this._gizmoMesh.parent = this._rootMesh;\r\n\r\n        var currentSnapDragDistance = 0;\r\n        var tmpVector = new Vector3();\r\n        var tmpSnapEvent = { snapDistance: 0 };\r\n        // Add dragPlaneNormal drag behavior to handle events when the gizmo is dragged\r\n        this.dragBehavior = new PointerDragBehavior({ dragPlaneNormal: dragPlaneNormal });\r\n        this.dragBehavior.moveAttached = false;\r\n        this._rootMesh.addBehavior(this.dragBehavior);\r\n\r\n        this.dragBehavior.onDragObservable.add((event) => {\r\n            if (this.attachedNode) {\r\n                // Keep world translation and use it to update world transform\r\n                // if the node has parent, the local transform properties (position, rotation, scale)\r\n                // will be recomputed in _matrixChanged function\r\n\r\n                // Snapping logic\r\n                if (this.snapDistance == 0) {\r\n                    this.attachedNode.getWorldMatrix().addTranslationFromFloats(event.delta.x, event.delta.y, event.delta.z);\r\n                } else {\r\n                    currentSnapDragDistance += event.dragDistance;\r\n                    if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\r\n                        var dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\r\n                        currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\r\n                        event.delta.normalizeToRef(tmpVector);\r\n                        tmpVector.scaleInPlace(this.snapDistance * dragSteps);\r\n                        this.attachedNode.getWorldMatrix().addTranslationFromFloats(tmpVector.x, tmpVector.y, tmpVector.z);\r\n                        tmpSnapEvent.snapDistance = this.snapDistance * dragSteps;\r\n                        this.onSnapObservable.notifyObservers(tmpSnapEvent);\r\n                    }\r\n                }\r\n                this._matrixChanged();\r\n            }\r\n        });\r\n        this.dragBehavior.onDragStartObservable.add(() => { this._dragging = true; });\r\n        this.dragBehavior.onDragEndObservable.add(() => { this._dragging = false; });\r\n\r\n        var light = gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes(false));\r\n\r\n        const cache: GizmoAxisCache = {\r\n            gizmoMeshes: this._gizmoMesh.getChildMeshes() as Mesh[],\r\n            colliderMeshes: this._gizmoMesh.getChildMeshes() as Mesh[],\r\n            material: this._coloredMaterial,\r\n            hoverMaterial: this._hoverMaterial,\r\n            disableMaterial: this._disableMaterial,\r\n            active: false\r\n        };\r\n        this._parent?.addToAxisCache((this._gizmoMesh as Mesh), cache);\r\n\r\n        this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (this._customMeshSet) {\r\n                return;\r\n            }\r\n            this._isHovered = !!(cache.colliderMeshes.indexOf(<Mesh>pointerInfo?.pickInfo?.pickedMesh) != -1);\r\n            if (!this._parent) {\r\n                var material = this._isHovered || this._dragging ? this._hoverMaterial : this._coloredMaterial;\r\n                cache.gizmoMeshes.forEach((m: Mesh) => {\r\n                    m.material = material;\r\n                });\r\n            }\r\n        });\r\n    }\r\n    protected _attachedNodeChanged(value: Nullable<Node>) {\r\n        if (this.dragBehavior) {\r\n            this.dragBehavior.enabled = value ? true : false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the gizmo is enabled\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        this._isEnabled = value;\r\n        if (!value) {\r\n            this.attachedNode = null;\r\n        }\r\n        else {\r\n            if (this._parent) {\r\n                this.attachedNode = this._parent.attachedNode;\r\n            }\r\n        }\r\n    }\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        this.onSnapObservable.clear();\r\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n        this.dragBehavior.detach();\r\n        super.dispose();\r\n        if (this._gizmoMesh) {\r\n            this._gizmoMesh.dispose();\r\n        }\r\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach((matl) => {\r\n            if (matl) {\r\n                matl.dispose();\r\n            }\r\n        });\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}