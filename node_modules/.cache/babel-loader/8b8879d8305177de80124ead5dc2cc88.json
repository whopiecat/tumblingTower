{"ast":null,"code":"import { Vector3 } from \"../../Maths/math.vector\";\nimport { BoundingBox } from \"../../Culling/boundingBox\";\n/**\r\n * Class used to store a cell in an octree\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\r\n */\n\nvar OctreeBlock =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new block\r\n   * @param minPoint defines the minimum vector (in world space) of the block's bounding box\r\n   * @param maxPoint defines the maximum vector (in world space) of the block's bounding box\r\n   * @param capacity defines the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\r\n   * @param depth defines the current depth of this block in the octree\r\n   * @param maxDepth defines the maximal depth allowed (beyond this value, the capacity is ignored)\r\n   * @param creationFunc defines a callback to call when an element is added to the block\r\n   */\n  function OctreeBlock(minPoint, maxPoint, capacity, depth, maxDepth, creationFunc) {\n    /**\r\n     * Gets the content of the current block\r\n     */\n    this.entries = new Array();\n    this._boundingVectors = new Array();\n    this._capacity = capacity;\n    this._depth = depth;\n    this._maxDepth = maxDepth;\n    this._creationFunc = creationFunc;\n    this._minPoint = minPoint;\n    this._maxPoint = maxPoint;\n\n    this._boundingVectors.push(minPoint.clone());\n\n    this._boundingVectors.push(maxPoint.clone());\n\n    this._boundingVectors.push(minPoint.clone());\n\n    this._boundingVectors[2].x = maxPoint.x;\n\n    this._boundingVectors.push(minPoint.clone());\n\n    this._boundingVectors[3].y = maxPoint.y;\n\n    this._boundingVectors.push(minPoint.clone());\n\n    this._boundingVectors[4].z = maxPoint.z;\n\n    this._boundingVectors.push(maxPoint.clone());\n\n    this._boundingVectors[5].z = minPoint.z;\n\n    this._boundingVectors.push(maxPoint.clone());\n\n    this._boundingVectors[6].x = minPoint.x;\n\n    this._boundingVectors.push(maxPoint.clone());\n\n    this._boundingVectors[7].y = minPoint.y;\n  }\n\n  Object.defineProperty(OctreeBlock.prototype, \"capacity\", {\n    // Property\n\n    /**\r\n     * Gets the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\r\n     */\n    get: function () {\n      return this._capacity;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OctreeBlock.prototype, \"minPoint\", {\n    /**\r\n     * Gets the minimum vector (in world space) of the block's bounding box\r\n     */\n    get: function () {\n      return this._minPoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OctreeBlock.prototype, \"maxPoint\", {\n    /**\r\n     * Gets the maximum vector (in world space) of the block's bounding box\r\n     */\n    get: function () {\n      return this._maxPoint;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Methods\n\n  /**\r\n   * Add a new element to this block\r\n   * @param entry defines the element to add\r\n   */\n\n  OctreeBlock.prototype.addEntry = function (entry) {\n    if (this.blocks) {\n      for (var index = 0; index < this.blocks.length; index++) {\n        var block = this.blocks[index];\n        block.addEntry(entry);\n      }\n\n      return;\n    }\n\n    this._creationFunc(entry, this);\n\n    if (this.entries.length > this.capacity && this._depth < this._maxDepth) {\n      this.createInnerBlocks();\n    }\n  };\n  /**\r\n   * Remove an element from this block\r\n   * @param entry defines the element to remove\r\n   */\n\n\n  OctreeBlock.prototype.removeEntry = function (entry) {\n    if (this.blocks) {\n      for (var index = 0; index < this.blocks.length; index++) {\n        var block = this.blocks[index];\n        block.removeEntry(entry);\n      }\n\n      return;\n    }\n\n    var entryIndex = this.entries.indexOf(entry);\n\n    if (entryIndex > -1) {\n      this.entries.splice(entryIndex, 1);\n    }\n  };\n  /**\r\n   * Add an array of elements to this block\r\n   * @param entries defines the array of elements to add\r\n   */\n\n\n  OctreeBlock.prototype.addEntries = function (entries) {\n    for (var index = 0; index < entries.length; index++) {\n      var mesh = entries[index];\n      this.addEntry(mesh);\n    }\n  };\n  /**\r\n   * Test if the current block intersects the furstum planes and if yes, then add its content to the selection array\r\n   * @param frustumPlanes defines the frustum planes to test\r\n   * @param selection defines the array to store current content if selection is positive\r\n   * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n   */\n\n\n  OctreeBlock.prototype.select = function (frustumPlanes, selection, allowDuplicate) {\n    if (BoundingBox.IsInFrustum(this._boundingVectors, frustumPlanes)) {\n      if (this.blocks) {\n        for (var index = 0; index < this.blocks.length; index++) {\n          var block = this.blocks[index];\n          block.select(frustumPlanes, selection, allowDuplicate);\n        }\n\n        return;\n      }\n\n      if (allowDuplicate) {\n        selection.concat(this.entries);\n      } else {\n        selection.concatWithNoDuplicate(this.entries);\n      }\n    }\n  };\n  /**\r\n   * Test if the current block intersect with the given bounding sphere and if yes, then add its content to the selection array\r\n   * @param sphereCenter defines the bounding sphere center\r\n   * @param sphereRadius defines the bounding sphere radius\r\n   * @param selection defines the array to store current content if selection is positive\r\n   * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n   */\n\n\n  OctreeBlock.prototype.intersects = function (sphereCenter, sphereRadius, selection, allowDuplicate) {\n    if (BoundingBox.IntersectsSphere(this._minPoint, this._maxPoint, sphereCenter, sphereRadius)) {\n      if (this.blocks) {\n        for (var index = 0; index < this.blocks.length; index++) {\n          var block = this.blocks[index];\n          block.intersects(sphereCenter, sphereRadius, selection, allowDuplicate);\n        }\n\n        return;\n      }\n\n      if (allowDuplicate) {\n        selection.concat(this.entries);\n      } else {\n        selection.concatWithNoDuplicate(this.entries);\n      }\n    }\n  };\n  /**\r\n   * Test if the current block intersect with the given ray and if yes, then add its content to the selection array\r\n   * @param ray defines the ray to test with\r\n   * @param selection defines the array to store current content if selection is positive\r\n   */\n\n\n  OctreeBlock.prototype.intersectsRay = function (ray, selection) {\n    if (ray.intersectsBoxMinMax(this._minPoint, this._maxPoint)) {\n      if (this.blocks) {\n        for (var index = 0; index < this.blocks.length; index++) {\n          var block = this.blocks[index];\n          block.intersectsRay(ray, selection);\n        }\n\n        return;\n      }\n\n      selection.concatWithNoDuplicate(this.entries);\n    }\n  };\n  /**\r\n   * Subdivide the content into child blocks (this block will then be empty)\r\n   */\n\n\n  OctreeBlock.prototype.createInnerBlocks = function () {\n    OctreeBlock._CreateBlocks(this._minPoint, this._maxPoint, this.entries, this._capacity, this._depth, this._maxDepth, this, this._creationFunc);\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  OctreeBlock._CreateBlocks = function (worldMin, worldMax, entries, maxBlockCapacity, currentDepth, maxDepth, target, creationFunc) {\n    target.blocks = new Array();\n    var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2); // Segmenting space\n\n    for (var x = 0; x < 2; x++) {\n      for (var y = 0; y < 2; y++) {\n        for (var z = 0; z < 2; z++) {\n          var localMin = worldMin.add(blockSize.multiplyByFloats(x, y, z));\n          var localMax = worldMin.add(blockSize.multiplyByFloats(x + 1, y + 1, z + 1));\n          var block = new OctreeBlock(localMin, localMax, maxBlockCapacity, currentDepth + 1, maxDepth, creationFunc);\n          block.addEntries(entries);\n          target.blocks.push(block);\n        }\n      }\n    }\n  };\n\n  return OctreeBlock;\n}();\n\nexport { OctreeBlock };","map":{"version":3,"sources":["../../../../sourceES6/core/Culling/Octrees/octreeBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { SmartArrayNoDuplicate } from \"../../Misc/smartArray\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport { BoundingBox } from \"../../Culling/boundingBox\";\r\nimport { Plane } from '../../Maths/math.plane';\r\n\r\n/**\r\n * Contains an array of blocks representing the octree\r\n */\r\nexport interface IOctreeContainer<T> {\r\n    /**\r\n     * Blocks within the octree\r\n     */\r\n    blocks: Array<OctreeBlock<T>>;\r\n}\r\n\r\n/**\r\n * Class used to store a cell in an octree\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\r\n */\r\nexport class OctreeBlock<T> {\r\n    /**\r\n     * Gets the content of the current block\r\n     */\r\n    public entries = new Array<T>();\r\n\r\n    /**\r\n     * Gets the list of block children\r\n     */\r\n    public blocks: Array<OctreeBlock<T>>;\r\n\r\n    private _depth: number;\r\n    private _maxDepth: number;\r\n    private _capacity: number;\r\n    private _minPoint: Vector3;\r\n    private _maxPoint: Vector3;\r\n    private _boundingVectors = new Array<Vector3>();\r\n    private _creationFunc: (entry: T, block: OctreeBlock<T>) => void;\r\n\r\n    /**\r\n     * Creates a new block\r\n     * @param minPoint defines the minimum vector (in world space) of the block's bounding box\r\n     * @param maxPoint defines the maximum vector (in world space) of the block's bounding box\r\n     * @param capacity defines the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\r\n     * @param depth defines the current depth of this block in the octree\r\n     * @param maxDepth defines the maximal depth allowed (beyond this value, the capacity is ignored)\r\n     * @param creationFunc defines a callback to call when an element is added to the block\r\n     */\r\n    constructor(minPoint: Vector3, maxPoint: Vector3, capacity: number, depth: number, maxDepth: number, creationFunc: (entry: T, block: OctreeBlock<T>) => void) {\r\n        this._capacity = capacity;\r\n        this._depth = depth;\r\n        this._maxDepth = maxDepth;\r\n        this._creationFunc = creationFunc;\r\n\r\n        this._minPoint = minPoint;\r\n        this._maxPoint = maxPoint;\r\n\r\n        this._boundingVectors.push(minPoint.clone());\r\n        this._boundingVectors.push(maxPoint.clone());\r\n\r\n        this._boundingVectors.push(minPoint.clone());\r\n        this._boundingVectors[2].x = maxPoint.x;\r\n\r\n        this._boundingVectors.push(minPoint.clone());\r\n        this._boundingVectors[3].y = maxPoint.y;\r\n\r\n        this._boundingVectors.push(minPoint.clone());\r\n        this._boundingVectors[4].z = maxPoint.z;\r\n\r\n        this._boundingVectors.push(maxPoint.clone());\r\n        this._boundingVectors[5].z = minPoint.z;\r\n\r\n        this._boundingVectors.push(maxPoint.clone());\r\n        this._boundingVectors[6].x = minPoint.x;\r\n\r\n        this._boundingVectors.push(maxPoint.clone());\r\n        this._boundingVectors[7].y = minPoint.y;\r\n    }\r\n\r\n    // Property\r\n\r\n    /**\r\n     * Gets the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\r\n     */\r\n    public get capacity(): number {\r\n        return this._capacity;\r\n    }\r\n\r\n    /**\r\n     * Gets the minimum vector (in world space) of the block's bounding box\r\n     */\r\n    public get minPoint(): Vector3 {\r\n        return this._minPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the maximum vector (in world space) of the block's bounding box\r\n     */\r\n    public get maxPoint(): Vector3 {\r\n        return this._maxPoint;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Add a new element to this block\r\n     * @param entry defines the element to add\r\n     */\r\n    public addEntry(entry: T): void {\r\n        if (this.blocks) {\r\n            for (var index = 0; index < this.blocks.length; index++) {\r\n                var block = this.blocks[index];\r\n                block.addEntry(entry);\r\n            }\r\n            return;\r\n        }\r\n\r\n        this._creationFunc(entry, this);\r\n\r\n        if (this.entries.length > this.capacity && this._depth < this._maxDepth) {\r\n            this.createInnerBlocks();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an element from this block\r\n     * @param entry defines the element to remove\r\n     */\r\n    public removeEntry(entry: T): void {\r\n        if (this.blocks) {\r\n            for (var index = 0; index < this.blocks.length; index++) {\r\n                var block = this.blocks[index];\r\n                block.removeEntry(entry);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const entryIndex = this.entries.indexOf(entry);\r\n\r\n        if (entryIndex > -1) {\r\n            this.entries.splice(entryIndex, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an array of elements to this block\r\n     * @param entries defines the array of elements to add\r\n     */\r\n    public addEntries(entries: T[]): void {\r\n        for (var index = 0; index < entries.length; index++) {\r\n            var mesh = entries[index];\r\n            this.addEntry(mesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test if the current block intersects the furstum planes and if yes, then add its content to the selection array\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @param selection defines the array to store current content if selection is positive\r\n     * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n     */\r\n    public select(frustumPlanes: Plane[], selection: SmartArrayNoDuplicate<T>, allowDuplicate?: boolean): void {\r\n        if (BoundingBox.IsInFrustum(this._boundingVectors, frustumPlanes)) {\r\n            if (this.blocks) {\r\n                for (var index = 0; index < this.blocks.length; index++) {\r\n                    var block = this.blocks[index];\r\n                    block.select(frustumPlanes, selection, allowDuplicate);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (allowDuplicate) {\r\n                selection.concat(this.entries);\r\n            } else {\r\n                selection.concatWithNoDuplicate(this.entries);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test if the current block intersect with the given bounding sphere and if yes, then add its content to the selection array\r\n     * @param sphereCenter defines the bounding sphere center\r\n     * @param sphereRadius defines the bounding sphere radius\r\n     * @param selection defines the array to store current content if selection is positive\r\n     * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n     */\r\n    public intersects(sphereCenter: Vector3, sphereRadius: number, selection: SmartArrayNoDuplicate<T>, allowDuplicate?: boolean): void {\r\n        if (BoundingBox.IntersectsSphere(this._minPoint, this._maxPoint, sphereCenter, sphereRadius)) {\r\n            if (this.blocks) {\r\n                for (var index = 0; index < this.blocks.length; index++) {\r\n                    var block = this.blocks[index];\r\n                    block.intersects(sphereCenter, sphereRadius, selection, allowDuplicate);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (allowDuplicate) {\r\n                selection.concat(this.entries);\r\n            } else {\r\n                selection.concatWithNoDuplicate(this.entries);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test if the current block intersect with the given ray and if yes, then add its content to the selection array\r\n     * @param ray defines the ray to test with\r\n     * @param selection defines the array to store current content if selection is positive\r\n     */\r\n    public intersectsRay(ray: Ray, selection: SmartArrayNoDuplicate<T>): void {\r\n        if (ray.intersectsBoxMinMax(this._minPoint, this._maxPoint)) {\r\n            if (this.blocks) {\r\n                for (var index = 0; index < this.blocks.length; index++) {\r\n                    var block = this.blocks[index];\r\n                    block.intersectsRay(ray, selection);\r\n                }\r\n                return;\r\n            }\r\n            selection.concatWithNoDuplicate(this.entries);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subdivide the content into child blocks (this block will then be empty)\r\n     */\r\n    public createInnerBlocks(): void {\r\n        OctreeBlock._CreateBlocks(this._minPoint, this._maxPoint, this.entries, this._capacity, this._depth, this._maxDepth, this, this._creationFunc);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public static _CreateBlocks<T>(worldMin: Vector3, worldMax: Vector3, entries: T[], maxBlockCapacity: number, currentDepth: number, maxDepth: number, target: IOctreeContainer<T>, creationFunc: (entry: T, block: OctreeBlock<T>) => void): void {\r\n        target.blocks = new Array<OctreeBlock<T>>();\r\n        var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\r\n\r\n        // Segmenting space\r\n        for (var x = 0; x < 2; x++) {\r\n            for (var y = 0; y < 2; y++) {\r\n                for (var z = 0; z < 2; z++) {\r\n                    var localMin = worldMin.add(blockSize.multiplyByFloats(x, y, z));\r\n                    var localMax = worldMin.add(blockSize.multiplyByFloats(x + 1, y + 1, z + 1));\r\n\r\n                    var block = new OctreeBlock<T>(localMin, localMax, maxBlockCapacity, currentDepth + 1, maxDepth, creationFunc);\r\n                    block.addEntries(entries);\r\n                    target.blocks.push(block);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}