{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport \"../Shaders/kernelBlur.fragment\";\nimport \"../Shaders/kernelBlur.vertex\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, serializeAsVector2, SerializationHelper } from '../Misc/decorators';\n/**\r\n * The Blur Post Process which blurs an image based on a kernel and direction.\r\n * Can be used twice in x and y directions to perform a guassian blur in two passes.\r\n */\n\nvar BlurPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(BlurPostProcess, _super);\n  /**\r\n   * Creates a new instance BlurPostProcess\r\n   * @param name The name of the effect.\r\n   * @param direction The direction in which to blur the image.\r\n   * @param kernel The size of the kernel to be used when computing the blur. eg. Size of 3 will blur the center pixel by 2 pixels surrounding it.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function BlurPostProcess(name, direction, kernel, options, camera, samplingMode, engine, reusable, textureType, defines, blockCompilation) {\n    if (samplingMode === void 0) {\n      samplingMode = Texture.BILINEAR_SAMPLINGMODE;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (defines === void 0) {\n      defines = \"\";\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"kernelBlur\", [\"delta\", \"direction\", \"cameraMinMaxZ\"], [\"circleOfConfusionSampler\"], options, camera, samplingMode, engine, reusable, null, textureType, \"kernelBlur\", {\n      varyingCount: 0,\n      depCount: 0\n    }, true) || this;\n\n    _this.blockCompilation = blockCompilation;\n    _this._packedFloat = false;\n    _this._staticDefines = \"\";\n    _this._staticDefines = defines;\n    _this.direction = direction;\n\n    _this.onApplyObservable.add(function (effect) {\n      if (_this._outputTexture) {\n        effect.setFloat2('delta', 1 / _this._outputTexture.width * _this.direction.x, 1 / _this._outputTexture.height * _this.direction.y);\n      } else {\n        effect.setFloat2('delta', 1 / _this.width * _this.direction.x, 1 / _this.height * _this.direction.y);\n      }\n    });\n\n    _this.kernel = kernel;\n    return _this;\n  }\n\n  Object.defineProperty(BlurPostProcess.prototype, \"kernel\", {\n    /**\r\n     * Gets the length in pixels of the blur sample region\r\n     */\n    get: function () {\n      return this._idealKernel;\n    },\n\n    /**\r\n     * Sets the length in pixels of the blur sample region\r\n     */\n    set: function (v) {\n      if (this._idealKernel === v) {\n        return;\n      }\n\n      v = Math.max(v, 1);\n      this._idealKernel = v;\n      this._kernel = this._nearestBestKernel(v);\n\n      if (!this.blockCompilation) {\n        this._updateParameters();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BlurPostProcess.prototype, \"packedFloat\", {\n    /**\r\n     * Gets wether or not the blur is unpacking/repacking floats\r\n     */\n    get: function () {\n      return this._packedFloat;\n    },\n\n    /**\r\n     * Sets wether or not the blur needs to unpack/repack floats\r\n     */\n    set: function (v) {\n      if (this._packedFloat === v) {\n        return;\n      }\n\n      this._packedFloat = v;\n\n      if (!this.blockCompilation) {\n        this._updateParameters();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"BlurPostProcess\" string\r\n   */\n\n  BlurPostProcess.prototype.getClassName = function () {\n    return \"BlurPostProcess\";\n  };\n  /**\r\n   * Updates the effect with the current post process compile time values and recompiles the shader.\r\n   * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n   * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n   * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n   * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n   * @param onCompiled Called when the shader has been compiled.\r\n   * @param onError Called if there is an error when compiling a shader.\r\n   */\n\n\n  BlurPostProcess.prototype.updateEffect = function (defines, uniforms, samplers, indexParameters, onCompiled, onError) {\n    if (defines === void 0) {\n      defines = null;\n    }\n\n    if (uniforms === void 0) {\n      uniforms = null;\n    }\n\n    if (samplers === void 0) {\n      samplers = null;\n    }\n\n    this._updateParameters(onCompiled, onError);\n  };\n\n  BlurPostProcess.prototype._updateParameters = function (onCompiled, onError) {\n    // Generate sampling offsets and weights\n    var N = this._kernel;\n    var centerIndex = (N - 1) / 2; // Generate Gaussian sampling weights over kernel\n\n    var offsets = [];\n    var weights = [];\n    var totalWeight = 0;\n\n    for (var i = 0; i < N; i++) {\n      var u = i / (N - 1);\n\n      var w = this._gaussianWeight(u * 2.0 - 1);\n\n      offsets[i] = i - centerIndex;\n      weights[i] = w;\n      totalWeight += w;\n    } // Normalize weights\n\n\n    for (var i = 0; i < weights.length; i++) {\n      weights[i] /= totalWeight;\n    } // Optimize: combine samples to take advantage of hardware linear sampling\n    // Walk from left to center, combining pairs (symmetrically)\n\n\n    var linearSamplingWeights = [];\n    var linearSamplingOffsets = [];\n    var linearSamplingMap = [];\n\n    for (var i = 0; i <= centerIndex; i += 2) {\n      var j = Math.min(i + 1, Math.floor(centerIndex));\n      var singleCenterSample = i === j;\n\n      if (singleCenterSample) {\n        linearSamplingMap.push({\n          o: offsets[i],\n          w: weights[i]\n        });\n      } else {\n        var sharedCell = j === centerIndex;\n        var weightLinear = weights[i] + weights[j] * (sharedCell ? .5 : 1.);\n        var offsetLinear = offsets[i] + 1 / (1 + weights[i] / weights[j]);\n\n        if (offsetLinear === 0) {\n          linearSamplingMap.push({\n            o: offsets[i],\n            w: weights[i]\n          });\n          linearSamplingMap.push({\n            o: offsets[i + 1],\n            w: weights[i + 1]\n          });\n        } else {\n          linearSamplingMap.push({\n            o: offsetLinear,\n            w: weightLinear\n          });\n          linearSamplingMap.push({\n            o: -offsetLinear,\n            w: weightLinear\n          });\n        }\n      }\n    }\n\n    for (var i = 0; i < linearSamplingMap.length; i++) {\n      linearSamplingOffsets[i] = linearSamplingMap[i].o;\n      linearSamplingWeights[i] = linearSamplingMap[i].w;\n    } // Replace with optimized\n\n\n    offsets = linearSamplingOffsets;\n    weights = linearSamplingWeights; // Generate shaders\n\n    var maxVaryingRows = this.getEngine().getCaps().maxVaryingVectors;\n    var freeVaryingVec2 = Math.max(maxVaryingRows, 0.) - 1; // Because of sampleCenter\n\n    var varyingCount = Math.min(offsets.length, freeVaryingVec2);\n    var defines = \"\";\n    defines += this._staticDefines; // The DOF fragment should ignore the center pixel when looping as it is handled manualy in the fragment shader.\n\n    if (this._staticDefines.indexOf(\"DOF\") != -1) {\n      defines += \"#define CENTER_WEIGHT \" + this._glslFloat(weights[varyingCount - 1]) + \"\\r\\n\";\n      varyingCount--;\n    }\n\n    for (var i = 0; i < varyingCount; i++) {\n      defines += \"#define KERNEL_OFFSET\" + i + \" \" + this._glslFloat(offsets[i]) + \"\\r\\n\";\n      defines += \"#define KERNEL_WEIGHT\" + i + \" \" + this._glslFloat(weights[i]) + \"\\r\\n\";\n    }\n\n    var depCount = 0;\n\n    for (var i = freeVaryingVec2; i < offsets.length; i++) {\n      defines += \"#define KERNEL_DEP_OFFSET\" + depCount + \" \" + this._glslFloat(offsets[i]) + \"\\r\\n\";\n      defines += \"#define KERNEL_DEP_WEIGHT\" + depCount + \" \" + this._glslFloat(weights[i]) + \"\\r\\n\";\n      depCount++;\n    }\n\n    if (this.packedFloat) {\n      defines += \"#define PACKEDFLOAT 1\";\n    }\n\n    this.blockCompilation = false;\n\n    _super.prototype.updateEffect.call(this, defines, null, null, {\n      varyingCount: varyingCount,\n      depCount: depCount\n    }, onCompiled, onError);\n  };\n  /**\r\n   * Best kernels are odd numbers that when divided by 2, their integer part is even, so 5, 9 or 13.\r\n   * Other odd kernels optimize correctly but require proportionally more samples, even kernels are\r\n   * possible but will produce minor visual artifacts. Since each new kernel requires a new shader we\r\n   * want to minimize kernel changes, having gaps between physical kernels is helpful in that regard.\r\n   * The gaps between physical kernels are compensated for in the weighting of the samples\r\n   * @param idealKernel Ideal blur kernel.\r\n   * @return Nearest best kernel.\r\n   */\n\n\n  BlurPostProcess.prototype._nearestBestKernel = function (idealKernel) {\n    var v = Math.round(idealKernel);\n\n    for (var _i = 0, _a = [v, v - 1, v + 1, v - 2, v + 2]; _i < _a.length; _i++) {\n      var k = _a[_i];\n\n      if (k % 2 !== 0 && Math.floor(k / 2) % 2 === 0 && k > 0) {\n        return Math.max(k, 3);\n      }\n    }\n\n    return Math.max(v, 3);\n  };\n  /**\r\n   * Calculates the value of a Gaussian distribution with sigma 3 at a given point.\r\n   * @param x The point on the Gaussian distribution to sample.\r\n   * @return the value of the Gaussian function at x.\r\n   */\n\n\n  BlurPostProcess.prototype._gaussianWeight = function (x) {\n    //reference: Engines/ImageProcessingBlur.cpp #dcc760\n    // We are evaluating the Gaussian (normal) distribution over a kernel parameter space of [-1,1],\n    // so we truncate at three standard deviations by setting stddev (sigma) to 1/3.\n    // The choice of 3-sigma truncation is common but arbitrary, and means that the signal is\n    // truncated at around 1.3% of peak strength.\n    //the distribution is scaled to account for the difference between the actual kernel size and the requested kernel size\n    var sigma = 1 / 3;\n    var denominator = Math.sqrt(2.0 * Math.PI) * sigma;\n    var exponent = -(x * x / (2.0 * sigma * sigma));\n    var weight = 1.0 / denominator * Math.exp(exponent);\n    return weight;\n  };\n  /**\r\n    * Generates a string that can be used as a floating point number in GLSL.\r\n    * @param x Value to print.\r\n    * @param decimalFigures Number of decimal places to print the number to (excluding trailing 0s).\r\n    * @return GLSL float string.\r\n    */\n\n\n  BlurPostProcess.prototype._glslFloat = function (x, decimalFigures) {\n    if (decimalFigures === void 0) {\n      decimalFigures = 8;\n    }\n\n    return x.toFixed(decimalFigures).replace(/0+$/, '');\n  };\n  /** @hidden */\n\n\n  BlurPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new BlurPostProcess(parsedPostProcess.name, parsedPostProcess.direction, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, undefined, false);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize(\"kernel\")], BlurPostProcess.prototype, \"_kernel\", void 0);\n\n  __decorate([serialize(\"packedFloat\")], BlurPostProcess.prototype, \"_packedFloat\", void 0);\n\n  __decorate([serializeAsVector2()], BlurPostProcess.prototype, \"direction\", void 0);\n\n  return BlurPostProcess;\n}(PostProcess);\n\nexport { BlurPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.BlurPostProcess\"] = BlurPostProcess;","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/blurPostProcess.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAAgD,eAAhD;AAGA,SAAS,OAAT,QAAwB,+BAAxB;AAIA,OAAO,gCAAP;AACA,OAAO,8BAAP;AACA,SAAS,UAAT,QAA2B,mBAA3B;AACA,SAAS,SAAT,EAAoB,kBAApB,EAAwC,mBAAxC,QAAmE,oBAAnE;AAIA;;;;;AAIA,IAAA,eAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqC,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;AA+DjC;;;;;;;;;;;;;;;AAaA,WAAA,eAAA,CAAY,IAAZ,EACI,SADJ,EAEI,MAFJ,EAEoB,OAFpB,EAE0D,MAF1D,EAEoF,YAFpF,EAE0I,MAF1I,EAE2J,QAF3J,EAE+K,WAF/K,EAEwM,OAFxM,EAE8N,gBAF9N,EAEsP;AAAlK,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAuB,OAAO,CAAC,qBAA/B;AAAoD;;AAAuC,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,CAAA;AAAuB;;AAAE,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAAY;;AAAU,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,KAAA;AAAwB;;AAFtP,QAAA,KAAA,GAGI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,YAAZ,EAA0B,CAAC,OAAD,EAAU,WAAV,EAAuB,eAAvB,CAA1B,EAAmE,CAAC,0BAAD,CAAnE,EAAiG,OAAjG,EAA0G,MAA1G,EAAkH,YAAlH,EAAgI,MAAhI,EAAwI,QAAxI,EAAkJ,IAAlJ,EAAwJ,WAAxJ,EAAqK,YAArK,EAAmL;AAAE,MAAA,YAAY,EAAE,CAAhB;AAAmB,MAAA,QAAQ,EAAE;AAA7B,KAAnL,EAAqN,IAArN,KAA0N,IAH9N;;AAE8N,IAAA,KAAA,CAAA,gBAAA,GAAA,gBAAA;AAzEpN,IAAA,KAAA,CAAA,YAAA,GAAwB,KAAxB;AACF,IAAA,KAAA,CAAA,cAAA,GAAyB,EAAzB;AA0EJ,IAAA,KAAI,CAAC,cAAL,GAAsB,OAAtB;AACA,IAAA,KAAI,CAAC,SAAL,GAAiB,SAAjB;;AACA,IAAA,KAAI,CAAC,iBAAL,CAAuB,GAAvB,CAA2B,UAAC,MAAD,EAAe;AACtC,UAAI,KAAI,CAAC,cAAT,EAAyB;AACrB,QAAA,MAAM,CAAC,SAAP,CAAiB,OAAjB,EAA2B,IAAI,KAAI,CAAC,cAAL,CAAoB,KAAzB,GAAkC,KAAI,CAAC,SAAL,CAAe,CAA3E,EAA+E,IAAI,KAAI,CAAC,cAAL,CAAoB,MAAzB,GAAmC,KAAI,CAAC,SAAL,CAAe,CAAhI;AACH,OAFD,MAEO;AACH,QAAA,MAAM,CAAC,SAAP,CAAiB,OAAjB,EAA2B,IAAI,KAAI,CAAC,KAAV,GAAmB,KAAI,CAAC,SAAL,CAAe,CAA5D,EAAgE,IAAI,KAAI,CAAC,MAAV,GAAoB,KAAI,CAAC,SAAL,CAAe,CAAlG;AACH;AACJ,KAND;;AAQA,IAAA,KAAI,CAAC,MAAL,GAAc,MAAd;;AACH;;AA5ED,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAajB;;;SAGA,YAAA;AACI,aAAO,KAAK,YAAZ;AACH,KAlBgB;;AAHjB;;;SAGA,UAAkB,CAAlB,EAA2B;AACvB,UAAI,KAAK,YAAL,KAAsB,CAA1B,EAA6B;AACzB;AACH;;AAED,MAAA,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAJ;AACA,WAAK,YAAL,GAAoB,CAApB;AACA,WAAK,OAAL,GAAe,KAAK,kBAAL,CAAwB,CAAxB,CAAf;;AACA,UAAI,CAAC,KAAK,gBAAV,EAA4B;AACxB,aAAK,iBAAL;AACH;AACJ,KAXgB;qBAAA;;AAAA,GAAjB;AAuBA,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AAUtB;;;SAGA,YAAA;AACI,aAAO,KAAK,YAAZ;AACH,KAfqB;;AAHtB;;;SAGA,UAAuB,CAAvB,EAAiC;AAC7B,UAAI,KAAK,YAAL,KAAsB,CAA1B,EAA6B;AACzB;AACH;;AACD,WAAK,YAAL,GAAoB,CAApB;;AACA,UAAI,CAAC,KAAK,gBAAV,EAA4B;AACxB,aAAK,iBAAL;AACH;AACJ,KARqB;qBAAA;;AAAA,GAAtB;AAiBA;;;;;AAIO,EAAA,eAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,iBAAP;AACH,GAFM;AAkCP;;;;;;;;;;;AASO,EAAA,eAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,OAApB,EAAsD,QAAtD,EAA2F,QAA3F,EAAgI,eAAhI,EACI,UADJ,EAC2C,OAD3C,EAC6F;AADzE,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,IAAA;AAAgC;;AAAE,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,IAAA;AAAmC;;AAAE,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,IAAA;AAAmC;;AAE1H,SAAK,iBAAL,CAAuB,UAAvB,EAAmC,OAAnC;AACH,GAHM;;AAKG,EAAA,eAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,UAA4B,UAA5B,EAAmE,OAAnE,EAAqH;AACjH;AACA,QAAI,CAAC,GAAG,KAAK,OAAb;AACA,QAAI,WAAW,GAAG,CAAC,CAAC,GAAG,CAAL,IAAU,CAA5B,CAHiH,CAKjH;;AACA,QAAI,OAAO,GAAG,EAAd;AACA,QAAI,OAAO,GAAG,EAAd;AACA,QAAI,WAAW,GAAG,CAAlB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,UAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAR,CAAT;;AACA,UAAI,CAAC,GAAG,KAAK,eAAL,CAAqB,CAAC,GAAG,GAAJ,GAAU,CAA/B,CAAR;;AACA,MAAA,OAAO,CAAC,CAAD,CAAP,GAAc,CAAC,GAAG,WAAlB;AACA,MAAA,OAAO,CAAC,CAAD,CAAP,GAAa,CAAb;AACA,MAAA,WAAW,IAAI,CAAf;AACH,KAfgH,CAiBjH;;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,EAArC,EAAyC;AACrC,MAAA,OAAO,CAAC,CAAD,CAAP,IAAc,WAAd;AACH,KApBgH,CAsBjH;AACA;;;AACA,QAAI,qBAAqB,GAAG,EAA5B;AACA,QAAI,qBAAqB,GAAG,EAA5B;AAEA,QAAI,iBAAiB,GAAG,EAAxB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,WAArB,EAAkC,CAAC,IAAI,CAAvC,EAA0C;AACtC,UAAI,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,EAAgB,IAAI,CAAC,KAAL,CAAW,WAAX,CAAhB,CAAR;AAEA,UAAI,kBAAkB,GAAG,CAAC,KAAK,CAA/B;;AAEA,UAAI,kBAAJ,EAAwB;AACpB,QAAA,iBAAiB,CAAC,IAAlB,CAAuB;AAAE,UAAA,CAAC,EAAE,OAAO,CAAC,CAAD,CAAZ;AAAiB,UAAA,CAAC,EAAE,OAAO,CAAC,CAAD;AAA3B,SAAvB;AACH,OAFD,MAEO;AACH,YAAI,UAAU,GAAG,CAAC,KAAK,WAAvB;AAEA,YAAI,YAAY,GAAI,OAAO,CAAC,CAAD,CAAP,GAAa,OAAO,CAAC,CAAD,CAAP,IAAc,UAAU,GAAG,EAAH,GAAQ,EAAhC,CAAjC;AACA,YAAI,YAAY,GAAG,OAAO,CAAC,CAAD,CAAP,GAAa,KAAK,IAAI,OAAO,CAAC,CAAD,CAAP,GAAa,OAAO,CAAC,CAAD,CAA7B,CAAhC;;AAEA,YAAI,YAAY,KAAK,CAArB,EAAwB;AACpB,UAAA,iBAAiB,CAAC,IAAlB,CAAuB;AAAE,YAAA,CAAC,EAAE,OAAO,CAAC,CAAD,CAAZ;AAAiB,YAAA,CAAC,EAAE,OAAO,CAAC,CAAD;AAA3B,WAAvB;AACA,UAAA,iBAAiB,CAAC,IAAlB,CAAuB;AAAE,YAAA,CAAC,EAAE,OAAO,CAAC,CAAC,GAAG,CAAL,CAAZ;AAAqB,YAAA,CAAC,EAAE,OAAO,CAAC,CAAC,GAAG,CAAL;AAA/B,WAAvB;AACH,SAHD,MAGO;AACH,UAAA,iBAAiB,CAAC,IAAlB,CAAuB;AAAE,YAAA,CAAC,EAAE,YAAL;AAAmB,YAAA,CAAC,EAAE;AAAtB,WAAvB;AACA,UAAA,iBAAiB,CAAC,IAAlB,CAAuB;AAAE,YAAA,CAAC,EAAE,CAAC,YAAN;AAAoB,YAAA,CAAC,EAAE;AAAvB,WAAvB;AACH;AAEJ;AACJ;;AAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,iBAAiB,CAAC,MAAtC,EAA8C,CAAC,EAA/C,EAAmD;AAC/C,MAAA,qBAAqB,CAAC,CAAD,CAArB,GAA2B,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,CAAhD;AACA,MAAA,qBAAqB,CAAC,CAAD,CAArB,GAA2B,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,CAAhD;AACH,KAxDgH,CA0DjH;;;AACA,IAAA,OAAO,GAAG,qBAAV;AACA,IAAA,OAAO,GAAG,qBAAV,CA5DiH,CA8DjH;;AACA,QAAI,cAAc,GAAG,KAAK,SAAL,GAAiB,OAAjB,GAA2B,iBAAhD;AACA,QAAI,eAAe,GAAG,IAAI,CAAC,GAAL,CAAS,cAAT,EAAyB,EAAzB,IAA+B,CAArD,CAhEiH,CAgEzD;;AAExD,QAAI,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,MAAjB,EAAyB,eAAzB,CAAnB;AAEA,QAAI,OAAO,GAAG,EAAd;AACA,IAAA,OAAO,IAAI,KAAK,cAAhB,CArEiH,CAuEjH;;AACA,QAAI,KAAK,cAAL,CAAoB,OAApB,CAA4B,KAA5B,KAAsC,CAAC,CAA3C,EAA8C;AAC1C,MAAA,OAAO,IAAI,2BAAyB,KAAK,UAAL,CAAgB,OAAO,CAAC,YAAY,GAAG,CAAhB,CAAvB,CAAzB,GAAmE,MAA9E;AACA,MAAA,YAAY;AACf;;AAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,YAApB,EAAkC,CAAC,EAAnC,EAAuC;AACnC,MAAA,OAAO,IAAI,0BAAwB,CAAxB,GAAyB,GAAzB,GAA6B,KAAK,UAAL,CAAgB,OAAO,CAAC,CAAD,CAAvB,CAA7B,GAAwD,MAAnE;AACA,MAAA,OAAO,IAAI,0BAAwB,CAAxB,GAAyB,GAAzB,GAA6B,KAAK,UAAL,CAAgB,OAAO,CAAC,CAAD,CAAvB,CAA7B,GAAwD,MAAnE;AACH;;AAED,QAAI,QAAQ,GAAG,CAAf;;AACA,SAAK,IAAI,CAAC,GAAG,eAAb,EAA8B,CAAC,GAAG,OAAO,CAAC,MAA1C,EAAkD,CAAC,EAAnD,EAAuD;AACnD,MAAA,OAAO,IAAI,8BAA4B,QAA5B,GAAoC,GAApC,GAAwC,KAAK,UAAL,CAAgB,OAAO,CAAC,CAAD,CAAvB,CAAxC,GAAmE,MAA9E;AACA,MAAA,OAAO,IAAI,8BAA4B,QAA5B,GAAoC,GAApC,GAAwC,KAAK,UAAL,CAAgB,OAAO,CAAC,CAAD,CAAvB,CAAxC,GAAmE,MAA9E;AACA,MAAA,QAAQ;AACX;;AAED,QAAI,KAAK,WAAT,EAAsB;AAClB,MAAA,OAAO,IAAI,uBAAX;AACH;;AAED,SAAK,gBAAL,GAAwB,KAAxB;;AACA,IAAA,MAAA,CAAA,SAAA,CAAM,YAAN,CAAkB,IAAlB,CAAkB,IAAlB,EAAmB,OAAnB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC;AACpC,MAAA,YAAY,EAAE,YADsB;AAEpC,MAAA,QAAQ,EAAE;AAF0B,KAAxC,EAGG,UAHH,EAGe,OAHf;AAIH,GAlGS;AAoGV;;;;;;;;;;;AASU,EAAA,eAAA,CAAA,SAAA,CAAA,kBAAA,GAAV,UAA6B,WAA7B,EAAgD;AAC5C,QAAI,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,WAAX,CAAR;;AACA,SAAc,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,CAAC,CAAD,EAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,CAAf,EAAkB,CAAC,GAAG,CAAtB,EAAyB,CAAC,GAAG,CAA7B,CAAd,EAAc,EAAA,GAAA,EAAA,CAAA,MAAd,EAAc,EAAA,EAAd,EAA+C;AAA1C,UAAI,CAAC,GAAA,EAAA,CAAA,EAAA,CAAL;;AACD,UAAM,CAAC,GAAG,CAAL,KAAY,CAAb,IAAqB,IAAI,CAAC,KAAL,CAAW,CAAC,GAAG,CAAf,IAAoB,CAArB,KAA4B,CAAhD,IAAsD,CAAC,GAAG,CAA9D,EAAiE;AAC7D,eAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAP;AACH;AACJ;;AACD,WAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAZ,CAAP;AACH,GARS;AAUV;;;;;;;AAKU,EAAA,eAAA,CAAA,SAAA,CAAA,eAAA,GAAV,UAA0B,CAA1B,EAAmC;AAC/B;AACA;AACA;AACA;AACA;AAEA;AACA,QAAI,KAAK,GAAI,IAAI,CAAjB;AACA,QAAI,WAAW,GAAG,IAAI,CAAC,IAAL,CAAU,MAAM,IAAI,CAAC,EAArB,IAA2B,KAA7C;AACA,QAAI,QAAQ,GAAG,EAAG,CAAC,GAAG,CAAL,IAAW,MAAM,KAAN,GAAc,KAAzB,CAAF,CAAf;AACA,QAAI,MAAM,GAAI,MAAM,WAAP,GAAsB,IAAI,CAAC,GAAL,CAAS,QAAT,CAAnC;AACA,WAAO,MAAP;AACH,GAbS;AAeV;;;;;;;;AAMU,EAAA,eAAA,CAAA,SAAA,CAAA,UAAA,GAAV,UAAqB,CAArB,EAAgC,cAAhC,EAAkD;AAAlB,QAAA,cAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,cAAA,GAAA,CAAA;AAAkB;;AAC9C,WAAO,CAAC,CAAC,OAAF,CAAU,cAAV,EAA0B,OAA1B,CAAkC,KAAlC,EAAyC,EAAzC,CAAP;AACH,GAFS;AAIV;;;AACc,EAAA,eAAA,CAAA,MAAA,GAAd,UAAqB,iBAArB,EAA6C,YAA7C,EAAmE,KAAnE,EAAiF,OAAjF,EAAgG;AAC5F,WAAO,mBAAmB,CAAC,KAApB,CAA0B,YAAA;AAC7B,aAAO,IAAI,eAAJ,CACH,iBAAiB,CAAC,IADf,EACqB,iBAAiB,CAAC,SADvC,EACkD,iBAAiB,CAAC,MADpE,EAEH,iBAAiB,CAAC,OAFf,EAEwB,YAFxB,EAEsC,iBAAiB,CAAC,wBAFxD,EAGH,KAAK,CAAC,SAAN,EAHG,EAGgB,iBAAiB,CAAC,QAHlC,EAG4C,iBAAiB,CAAC,WAH9D,EAG2E,SAH3E,EAGsF,KAHtF,CAAP;AAIH,KALM,EAKJ,iBALI,EAKe,KALf,EAKsB,OALtB,CAAP;AAMH,GAPa;;AA/Pd,EAAA,UAAA,CAAA,CADC,SAAS,CAAC,QAAD,CACV,CAAA,E,yBAAA,E,SAAA,E,KAA0B,CAA1B,CAAA;;AAGA,EAAA,UAAA,CAAA,CADC,SAAS,CAAC,aAAD,CACV,CAAA,E,yBAAA,E,cAAA,E,KAAwC,CAAxC,CAAA;;AAKA,EAAA,UAAA,CAAA,CADC,kBAAkB,EACnB,CAAA,E,yBAAA,E,WAAA,E,KAA0B,CAA1B,CAAA;;AA+PJ,SAAA,eAAA;AAAC,CAzQD,CAAqC,WAArC,CAAA;;SAAa,e;AA2Qb,UAAU,CAAC,eAAX,CAA2B,yBAA3B,IAAwD,eAAxD","sourcesContent":["import { Vector2 } from \"../Maths/math.vector\";\r\nimport { Nullable } from \"../types\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\n\r\nimport \"../Shaders/kernelBlur.fragment\";\r\nimport \"../Shaders/kernelBlur.vertex\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { serialize, serializeAsVector2, SerializationHelper } from '../Misc/decorators';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The Blur Post Process which blurs an image based on a kernel and direction.\r\n * Can be used twice in x and y directions to perform a guassian blur in two passes.\r\n */\r\nexport class BlurPostProcess extends PostProcess {\r\n    @serialize(\"kernel\")\r\n    protected _kernel: number;\r\n    protected _idealKernel: number;\r\n    @serialize(\"packedFloat\")\r\n    protected _packedFloat: boolean = false;\r\n    private _staticDefines: string = \"\";\r\n\r\n    /** The direction in which to blur the image. */\r\n    @serializeAsVector2()\r\n    public direction: Vector2;\r\n\r\n    /**\r\n     * Sets the length in pixels of the blur sample region\r\n     */\r\n    public set kernel(v: number) {\r\n        if (this._idealKernel === v) {\r\n            return;\r\n        }\r\n\r\n        v = Math.max(v, 1);\r\n        this._idealKernel = v;\r\n        this._kernel = this._nearestBestKernel(v);\r\n        if (!this.blockCompilation) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the length in pixels of the blur sample region\r\n     */\r\n    public get kernel(): number {\r\n        return this._idealKernel;\r\n    }\r\n\r\n    /**\r\n     * Sets wether or not the blur needs to unpack/repack floats\r\n     */\r\n    public set packedFloat(v: boolean) {\r\n        if (this._packedFloat === v) {\r\n            return;\r\n        }\r\n        this._packedFloat = v;\r\n        if (!this.blockCompilation) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets wether or not the blur is unpacking/repacking floats\r\n     */\r\n    public get packedFloat(): boolean {\r\n        return this._packedFloat;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"BlurPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"BlurPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance BlurPostProcess\r\n     * @param name The name of the effect.\r\n     * @param direction The direction in which to blur the image.\r\n     * @param kernel The size of the kernel to be used when computing the blur. eg. Size of 3 will blur the center pixel by 2 pixels surrounding it.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string,\r\n        direction: Vector2,\r\n        kernel: number, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode: number = Texture.BILINEAR_SAMPLINGMODE, engine?: Engine, reusable?: boolean, textureType: number = 0, defines = \"\", private blockCompilation = false) {\r\n        super(name, \"kernelBlur\", [\"delta\", \"direction\", \"cameraMinMaxZ\"], [\"circleOfConfusionSampler\"], options, camera, samplingMode, engine, reusable, null, textureType, \"kernelBlur\", { varyingCount: 0, depCount: 0 }, true);\r\n        this._staticDefines = defines;\r\n        this.direction = direction;\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (this._outputTexture) {\r\n                effect.setFloat2('delta', (1 / this._outputTexture.width) * this.direction.x, (1 / this._outputTexture.height) * this.direction.y);\r\n            } else {\r\n                effect.setFloat2('delta', (1 / this.width) * this.direction.x, (1 / this.height) * this.direction.y);\r\n            }\r\n        });\r\n\r\n        this.kernel = kernel;\r\n    }\r\n\r\n    /**\r\n     * Updates the effect with the current post process compile time values and recompiles the shader.\r\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n     * @param onCompiled Called when the shader has been compiled.\r\n     * @param onError Called if there is an error when compiling a shader.\r\n     */\r\n    public updateEffect(defines: Nullable<string> = null, uniforms: Nullable<string[]> = null, samplers: Nullable<string[]> = null, indexParameters?: any,\r\n        onCompiled?: (effect: Effect) => void, onError?: (effect: Effect, errors: string) => void) {\r\n        this._updateParameters(onCompiled, onError);\r\n    }\r\n\r\n    protected _updateParameters(onCompiled?: (effect: Effect) => void, onError?: (effect: Effect, errors: string) => void): void {\r\n        // Generate sampling offsets and weights\r\n        let N = this._kernel;\r\n        let centerIndex = (N - 1) / 2;\r\n\r\n        // Generate Gaussian sampling weights over kernel\r\n        let offsets = [];\r\n        let weights = [];\r\n        let totalWeight = 0;\r\n        for (let i = 0; i < N; i++) {\r\n            let u = i / (N - 1);\r\n            let w = this._gaussianWeight(u * 2.0 - 1);\r\n            offsets[i] = (i - centerIndex);\r\n            weights[i] = w;\r\n            totalWeight += w;\r\n        }\r\n\r\n        // Normalize weights\r\n        for (let i = 0; i < weights.length; i++) {\r\n            weights[i] /= totalWeight;\r\n        }\r\n\r\n        // Optimize: combine samples to take advantage of hardware linear sampling\r\n        // Walk from left to center, combining pairs (symmetrically)\r\n        let linearSamplingWeights = [];\r\n        let linearSamplingOffsets = [];\r\n\r\n        let linearSamplingMap = [];\r\n\r\n        for (let i = 0; i <= centerIndex; i += 2) {\r\n            let j = Math.min(i + 1, Math.floor(centerIndex));\r\n\r\n            let singleCenterSample = i === j;\r\n\r\n            if (singleCenterSample) {\r\n                linearSamplingMap.push({ o: offsets[i], w: weights[i] });\r\n            } else {\r\n                let sharedCell = j === centerIndex;\r\n\r\n                let weightLinear = (weights[i] + weights[j] * (sharedCell ? .5 : 1.));\r\n                let offsetLinear = offsets[i] + 1 / (1 + weights[i] / weights[j]);\r\n\r\n                if (offsetLinear === 0) {\r\n                    linearSamplingMap.push({ o: offsets[i], w: weights[i] });\r\n                    linearSamplingMap.push({ o: offsets[i + 1], w: weights[i + 1] });\r\n                } else {\r\n                    linearSamplingMap.push({ o: offsetLinear, w: weightLinear });\r\n                    linearSamplingMap.push({ o: -offsetLinear, w: weightLinear });\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < linearSamplingMap.length; i++) {\r\n            linearSamplingOffsets[i] = linearSamplingMap[i].o;\r\n            linearSamplingWeights[i] = linearSamplingMap[i].w;\r\n        }\r\n\r\n        // Replace with optimized\r\n        offsets = linearSamplingOffsets;\r\n        weights = linearSamplingWeights;\r\n\r\n        // Generate shaders\r\n        let maxVaryingRows = this.getEngine().getCaps().maxVaryingVectors;\r\n        let freeVaryingVec2 = Math.max(maxVaryingRows, 0.) - 1; // Because of sampleCenter\r\n\r\n        let varyingCount = Math.min(offsets.length, freeVaryingVec2);\r\n\r\n        let defines = \"\";\r\n        defines += this._staticDefines;\r\n\r\n        // The DOF fragment should ignore the center pixel when looping as it is handled manualy in the fragment shader.\r\n        if (this._staticDefines.indexOf(\"DOF\") != -1) {\r\n            defines += `#define CENTER_WEIGHT ${this._glslFloat(weights[varyingCount - 1])}\\r\\n`;\r\n            varyingCount--;\r\n        }\r\n\r\n        for (let i = 0; i < varyingCount; i++) {\r\n            defines += `#define KERNEL_OFFSET${i} ${this._glslFloat(offsets[i])}\\r\\n`;\r\n            defines += `#define KERNEL_WEIGHT${i} ${this._glslFloat(weights[i])}\\r\\n`;\r\n        }\r\n\r\n        let depCount = 0;\r\n        for (let i = freeVaryingVec2; i < offsets.length; i++) {\r\n            defines += `#define KERNEL_DEP_OFFSET${depCount} ${this._glslFloat(offsets[i])}\\r\\n`;\r\n            defines += `#define KERNEL_DEP_WEIGHT${depCount} ${this._glslFloat(weights[i])}\\r\\n`;\r\n            depCount++;\r\n        }\r\n\r\n        if (this.packedFloat) {\r\n            defines += `#define PACKEDFLOAT 1`;\r\n        }\r\n\r\n        this.blockCompilation = false;\r\n        super.updateEffect(defines, null, null, {\r\n            varyingCount: varyingCount,\r\n            depCount: depCount\r\n        }, onCompiled, onError);\r\n    }\r\n\r\n    /**\r\n     * Best kernels are odd numbers that when divided by 2, their integer part is even, so 5, 9 or 13.\r\n     * Other odd kernels optimize correctly but require proportionally more samples, even kernels are\r\n     * possible but will produce minor visual artifacts. Since each new kernel requires a new shader we\r\n     * want to minimize kernel changes, having gaps between physical kernels is helpful in that regard.\r\n     * The gaps between physical kernels are compensated for in the weighting of the samples\r\n     * @param idealKernel Ideal blur kernel.\r\n     * @return Nearest best kernel.\r\n     */\r\n    protected _nearestBestKernel(idealKernel: number): number {\r\n        let v = Math.round(idealKernel);\r\n        for (let k of [v, v - 1, v + 1, v - 2, v + 2]) {\r\n            if (((k % 2) !== 0) && ((Math.floor(k / 2) % 2) === 0) && k > 0) {\r\n                return Math.max(k, 3);\r\n            }\r\n        }\r\n        return Math.max(v, 3);\r\n    }\r\n\r\n    /**\r\n     * Calculates the value of a Gaussian distribution with sigma 3 at a given point.\r\n     * @param x The point on the Gaussian distribution to sample.\r\n     * @return the value of the Gaussian function at x.\r\n     */\r\n    protected _gaussianWeight(x: number): number {\r\n        //reference: Engines/ImageProcessingBlur.cpp #dcc760\r\n        // We are evaluating the Gaussian (normal) distribution over a kernel parameter space of [-1,1],\r\n        // so we truncate at three standard deviations by setting stddev (sigma) to 1/3.\r\n        // The choice of 3-sigma truncation is common but arbitrary, and means that the signal is\r\n        // truncated at around 1.3% of peak strength.\r\n\r\n        //the distribution is scaled to account for the difference between the actual kernel size and the requested kernel size\r\n        let sigma = (1 / 3);\r\n        let denominator = Math.sqrt(2.0 * Math.PI) * sigma;\r\n        let exponent = -((x * x) / (2.0 * sigma * sigma));\r\n        let weight = (1.0 / denominator) * Math.exp(exponent);\r\n        return weight;\r\n    }\r\n\r\n    /**\r\n      * Generates a string that can be used as a floating point number in GLSL.\r\n      * @param x Value to print.\r\n      * @param decimalFigures Number of decimal places to print the number to (excluding trailing 0s).\r\n      * @return GLSL float string.\r\n      */\r\n    protected _glslFloat(x: number, decimalFigures = 8) {\r\n        return x.toFixed(decimalFigures).replace(/0+$/, '');\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<BlurPostProcess> {\r\n        return SerializationHelper.Parse(() => {\r\n            return new BlurPostProcess(\r\n                parsedPostProcess.name, parsedPostProcess.direction, parsedPostProcess.kernel,\r\n                parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, undefined, false);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.BlurPostProcess\"] = BlurPostProcess;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}