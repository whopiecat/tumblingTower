{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera\";\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Node } from \"../../node\";\nimport \"../Inputs/arcRotateCameraVRDeviceOrientationInput\"; // Side effect import to define the stereoscopic mode.\n\nimport \"../RigModes/vrRigMode\";\nNode.AddNodeConstructor(\"VRDeviceOrientationFreeCamera\", function (name, scene) {\n  return function () {\n    return new VRDeviceOrientationArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), scene);\n  };\n});\n/**\r\n * Camera used to simulate VR rendering (based on ArcRotateCamera)\r\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\r\n */\n\nvar VRDeviceOrientationArcRotateCamera =\n/** @class */\nfunction (_super) {\n  __extends(VRDeviceOrientationArcRotateCamera, _super);\n  /**\r\n   * Creates a new VRDeviceOrientationArcRotateCamera\r\n   * @param name defines camera name\r\n   * @param alpha defines the camera rotation along the logitudinal axis\r\n   * @param beta defines the camera rotation along the latitudinal axis\r\n   * @param radius defines the camera distance from its target\r\n   * @param target defines the camera target\r\n   * @param scene defines the scene the camera belongs to\r\n   * @param compensateDistortion defines if the camera needs to compensate the lens distorsion\r\n   * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n   */\n\n\n  function VRDeviceOrientationArcRotateCamera(name, alpha, beta, radius, target, scene, compensateDistortion, vrCameraMetrics) {\n    if (compensateDistortion === void 0) {\n      compensateDistortion = true;\n    }\n\n    if (vrCameraMetrics === void 0) {\n      vrCameraMetrics = VRCameraMetrics.GetDefault();\n    }\n\n    var _this = _super.call(this, name, alpha, beta, radius, target, scene) || this;\n\n    vrCameraMetrics.compensateDistortion = compensateDistortion;\n\n    _this.setCameraRigMode(Camera.RIG_MODE_VR, {\n      vrCameraMetrics: vrCameraMetrics\n    });\n\n    _this.inputs.addVRDeviceOrientation();\n\n    return _this;\n  }\n  /**\r\n   * Gets camera class name\r\n   * @returns VRDeviceOrientationArcRotateCamera\r\n   */\n\n\n  VRDeviceOrientationArcRotateCamera.prototype.getClassName = function () {\n    return \"VRDeviceOrientationArcRotateCamera\";\n  };\n\n  return VRDeviceOrientationArcRotateCamera;\n}(ArcRotateCamera);\n\nexport { VRDeviceOrientationArcRotateCamera };","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/VR/vrDeviceOrientationArcRotateCamera.ts"],"names":[],"mappings":";AAAA,SAAS,MAAT,QAAuB,sBAAvB;AACA,SAAS,eAAT,QAAgC,+BAAhC;AACA,SAAS,eAAT,QAAgC,mBAAhC;AAEA,SAAS,OAAT,QAAwB,yBAAxB;AACA,SAAS,IAAT,QAAqB,YAArB;AAEA,OAAO,mDAAP,C,CAEA;;AACA,OAAO,uBAAP;AAEA,IAAI,CAAC,kBAAL,CAAwB,+BAAxB,EAAyD,UAAC,IAAD,EAAO,KAAP,EAAY;AACjE,SAAO,YAAA;AAAM,WAAA,IAAI,kCAAJ,CAAuC,IAAvC,EAA6C,CAA7C,EAAgD,CAAhD,EAAmD,GAAnD,EAAwD,OAAO,CAAC,IAAR,EAAxD,EAAA,KAAA,CAAA;AAA8E,GAA3F;AACH,CAFD;AAIA;;;;;AAIA,IAAA,kCAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwD,EAAA,SAAA,CAAA,kCAAA,EAAA,MAAA,CAAA;AAEpD;;;;;;;;;;;;;AAWA,WAAA,kCAAA,CAAY,IAAZ,EAA0B,KAA1B,EAAyC,IAAzC,EAAuD,MAAvD,EAAuE,MAAvE,EAAwF,KAAxF,EAAsG,oBAAtG,EAAmI,eAAnI,EAAkM;AAA5F,QAAA,oBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,oBAAA,GAAA,IAAA;AAA2B;;AAAE,QAAA,eAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,eAAA,GAAmC,eAAe,CAAC,UAAhB,EAAnC;AAA+D;;AAAlM,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,KAAZ,EAAmB,IAAnB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,KAAzC,KAA+C,IADnD;;AAGI,IAAA,eAAe,CAAC,oBAAhB,GAAuC,oBAAvC;;AACA,IAAA,KAAI,CAAC,gBAAL,CAAsB,MAAM,CAAC,WAA7B,EAA0C;AAAE,MAAA,eAAe,EAAE;AAAnB,KAA1C;;AAEA,IAAA,KAAI,CAAC,MAAL,CAAY,sBAAZ;;;AACH;AAED;;;;;;AAIO,EAAA,kCAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,oCAAP;AACH,GAFM;;AAGX,SAAA,kCAAA;AAAC,CA7BD,CAAwD,eAAxD,CAAA","sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\n\r\nimport \"../Inputs/arcRotateCameraVRDeviceOrientationInput\";\r\n\r\n// Side effect import to define the stereoscopic mode.\r\nimport \"../RigModes/vrRigMode\";\r\n\r\nNode.AddNodeConstructor(\"VRDeviceOrientationFreeCamera\", (name, scene) => {\r\n    return () => new VRDeviceOrientationArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on ArcRotateCamera)\r\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\r\n */\r\nexport class VRDeviceOrientationArcRotateCamera extends ArcRotateCamera {\r\n\r\n    /**\r\n     * Creates a new VRDeviceOrientationArcRotateCamera\r\n     * @param name defines camera name\r\n     * @param alpha defines the camera rotation along the logitudinal axis\r\n     * @param beta defines the camera rotation along the latitudinal axis\r\n     * @param radius defines the camera distance from its target\r\n     * @param target defines the camera target\r\n     * @param scene defines the scene the camera belongs to\r\n     * @param compensateDistortion defines if the camera needs to compensate the lens distorsion\r\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n     */\r\n    constructor(name: string, alpha: number, beta: number, radius: number, target: Vector3, scene: Scene, compensateDistortion = true, vrCameraMetrics: VRCameraMetrics = VRCameraMetrics.GetDefault()) {\r\n        super(name, alpha, beta, radius, target, scene);\r\n\r\n        vrCameraMetrics.compensateDistortion = compensateDistortion;\r\n        this.setCameraRigMode(Camera.RIG_MODE_VR, { vrCameraMetrics: vrCameraMetrics });\r\n\r\n        this.inputs.addVRDeviceOrientation();\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns VRDeviceOrientationArcRotateCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDeviceOrientationArcRotateCamera\";\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}