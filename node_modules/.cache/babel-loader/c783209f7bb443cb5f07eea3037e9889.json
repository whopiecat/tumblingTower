{"ast":null,"code":"import { Vector2, Vector3, TmpVectors, Vector4 } from \"../Maths/math.vector\";\nimport { Color4 } from '../Maths/math.color';\nimport { Scalar } from \"../Maths/math.scalar\";\n/**\r\n * A particle represents one of the element emitted by a particle system.\r\n * This is mainly define by its coordinates, direction, velocity and age.\r\n */\n\nvar Particle =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance Particle\r\n   * @param particleSystem the particle system the particle belongs to\r\n   */\n  function Particle(\n  /**\r\n   * The particle system the particle belongs to.\r\n   */\n  particleSystem) {\n    this.particleSystem = particleSystem;\n    /**\r\n     * The world position of the particle in the scene.\r\n     */\n\n    this.position = Vector3.Zero();\n    /**\r\n     * The world direction of the particle in the scene.\r\n     */\n\n    this.direction = Vector3.Zero();\n    /**\r\n     * The color of the particle.\r\n     */\n\n    this.color = new Color4(0, 0, 0, 0);\n    /**\r\n     * The color change of the particle per step.\r\n     */\n\n    this.colorStep = new Color4(0, 0, 0, 0);\n    /**\r\n     * Defines how long will the life of the particle be.\r\n     */\n\n    this.lifeTime = 1.0;\n    /**\r\n     * The current age of the particle.\r\n     */\n\n    this.age = 0;\n    /**\r\n     * The current size of the particle.\r\n     */\n\n    this.size = 0;\n    /**\r\n     * The current scale of the particle.\r\n     */\n\n    this.scale = new Vector2(1, 1);\n    /**\r\n     * The current angle of the particle.\r\n     */\n\n    this.angle = 0;\n    /**\r\n     * Defines how fast is the angle changing.\r\n     */\n\n    this.angularSpeed = 0;\n    /**\r\n     * Defines the cell index used by the particle to be rendered from a sprite.\r\n     */\n\n    this.cellIndex = 0;\n    /** @hidden */\n\n    this._attachedSubEmitters = null;\n    /** @hidden */\n\n    this._currentColor1 = new Color4(0, 0, 0, 0);\n    /** @hidden */\n\n    this._currentColor2 = new Color4(0, 0, 0, 0);\n    /** @hidden */\n\n    this._currentSize1 = 0;\n    /** @hidden */\n\n    this._currentSize2 = 0;\n    /** @hidden */\n\n    this._currentAngularSpeed1 = 0;\n    /** @hidden */\n\n    this._currentAngularSpeed2 = 0;\n    /** @hidden */\n\n    this._currentVelocity1 = 0;\n    /** @hidden */\n\n    this._currentVelocity2 = 0;\n    /** @hidden */\n\n    this._currentLimitVelocity1 = 0;\n    /** @hidden */\n\n    this._currentLimitVelocity2 = 0;\n    /** @hidden */\n\n    this._currentDrag1 = 0;\n    /** @hidden */\n\n    this._currentDrag2 = 0;\n    this.id = Particle._Count++;\n\n    if (!this.particleSystem.isAnimationSheetEnabled) {\n      return;\n    }\n\n    this.updateCellInfoFromSystem();\n  }\n\n  Particle.prototype.updateCellInfoFromSystem = function () {\n    this.cellIndex = this.particleSystem.startSpriteCellID;\n  };\n  /**\r\n   * Defines how the sprite cell index is updated for the particle\r\n   */\n\n\n  Particle.prototype.updateCellIndex = function () {\n    var offsetAge = this.age;\n    var changeSpeed = this.particleSystem.spriteCellChangeSpeed;\n\n    if (this.particleSystem.spriteRandomStartCell) {\n      if (this._randomCellOffset === undefined) {\n        this._randomCellOffset = Math.random() * this.lifeTime;\n      }\n\n      if (changeSpeed === 0) {\n        // Special case when speed = 0 meaning we want to stay on initial cell\n        changeSpeed = 1;\n        offsetAge = this._randomCellOffset;\n      } else {\n        offsetAge += this._randomCellOffset;\n      }\n    }\n\n    var dist = this._initialEndSpriteCellID - this._initialStartSpriteCellID;\n    var ratio = Scalar.Clamp(offsetAge * changeSpeed % this.lifeTime / this.lifeTime);\n    this.cellIndex = this._initialStartSpriteCellID + ratio * dist | 0;\n  };\n  /** @hidden */\n\n\n  Particle.prototype._inheritParticleInfoToSubEmitter = function (subEmitter) {\n    if (subEmitter.particleSystem.emitter.position) {\n      var emitterMesh = subEmitter.particleSystem.emitter;\n      emitterMesh.position.copyFrom(this.position);\n\n      if (subEmitter.inheritDirection) {\n        var temp = TmpVectors.Vector3[0];\n        this.direction.normalizeToRef(temp);\n        emitterMesh.setDirection(temp, 0, Math.PI / 2);\n      }\n    } else {\n      var emitterPosition = subEmitter.particleSystem.emitter;\n      emitterPosition.copyFrom(this.position);\n    } // Set inheritedVelocityOffset to be used when new particles are created\n\n\n    this.direction.scaleToRef(subEmitter.inheritedVelocityAmount / 2, TmpVectors.Vector3[0]);\n\n    subEmitter.particleSystem._inheritedVelocityOffset.copyFrom(TmpVectors.Vector3[0]);\n  };\n  /** @hidden */\n\n\n  Particle.prototype._inheritParticleInfoToSubEmitters = function () {\n    var _this = this;\n\n    if (this._attachedSubEmitters && this._attachedSubEmitters.length > 0) {\n      this._attachedSubEmitters.forEach(function (subEmitter) {\n        _this._inheritParticleInfoToSubEmitter(subEmitter);\n      });\n    }\n  };\n  /** @hidden */\n\n\n  Particle.prototype._reset = function () {\n    this.age = 0;\n    this.id = Particle._Count++;\n    this._currentColorGradient = null;\n    this._currentSizeGradient = null;\n    this._currentAngularSpeedGradient = null;\n    this._currentVelocityGradient = null;\n    this._currentLimitVelocityGradient = null;\n    this._currentDragGradient = null;\n    this.cellIndex = this.particleSystem.startSpriteCellID;\n    this._randomCellOffset = undefined;\n  };\n  /**\r\n   * Copy the properties of particle to another one.\r\n   * @param other the particle to copy the information to.\r\n   */\n\n\n  Particle.prototype.copyTo = function (other) {\n    other.position.copyFrom(this.position);\n\n    if (this._initialDirection) {\n      if (other._initialDirection) {\n        other._initialDirection.copyFrom(this._initialDirection);\n      } else {\n        other._initialDirection = this._initialDirection.clone();\n      }\n    } else {\n      other._initialDirection = null;\n    }\n\n    other.direction.copyFrom(this.direction);\n\n    if (this._localPosition) {\n      if (other._localPosition) {\n        other._localPosition.copyFrom(this._localPosition);\n      } else {\n        other._localPosition = this._localPosition.clone();\n      }\n    }\n\n    other.color.copyFrom(this.color);\n    other.colorStep.copyFrom(this.colorStep);\n    other.lifeTime = this.lifeTime;\n    other.age = this.age;\n    other._randomCellOffset = this._randomCellOffset;\n    other.size = this.size;\n    other.scale.copyFrom(this.scale);\n    other.angle = this.angle;\n    other.angularSpeed = this.angularSpeed;\n    other.particleSystem = this.particleSystem;\n    other.cellIndex = this.cellIndex;\n    other.id = this.id;\n    other._attachedSubEmitters = this._attachedSubEmitters;\n\n    if (this._currentColorGradient) {\n      other._currentColorGradient = this._currentColorGradient;\n\n      other._currentColor1.copyFrom(this._currentColor1);\n\n      other._currentColor2.copyFrom(this._currentColor2);\n    }\n\n    if (this._currentSizeGradient) {\n      other._currentSizeGradient = this._currentSizeGradient;\n      other._currentSize1 = this._currentSize1;\n      other._currentSize2 = this._currentSize2;\n    }\n\n    if (this._currentAngularSpeedGradient) {\n      other._currentAngularSpeedGradient = this._currentAngularSpeedGradient;\n      other._currentAngularSpeed1 = this._currentAngularSpeed1;\n      other._currentAngularSpeed2 = this._currentAngularSpeed2;\n    }\n\n    if (this._currentVelocityGradient) {\n      other._currentVelocityGradient = this._currentVelocityGradient;\n      other._currentVelocity1 = this._currentVelocity1;\n      other._currentVelocity2 = this._currentVelocity2;\n    }\n\n    if (this._currentLimitVelocityGradient) {\n      other._currentLimitVelocityGradient = this._currentLimitVelocityGradient;\n      other._currentLimitVelocity1 = this._currentLimitVelocity1;\n      other._currentLimitVelocity2 = this._currentLimitVelocity2;\n    }\n\n    if (this._currentDragGradient) {\n      other._currentDragGradient = this._currentDragGradient;\n      other._currentDrag1 = this._currentDrag1;\n      other._currentDrag2 = this._currentDrag2;\n    }\n\n    if (this.particleSystem.isAnimationSheetEnabled) {\n      other._initialStartSpriteCellID = this._initialStartSpriteCellID;\n      other._initialEndSpriteCellID = this._initialEndSpriteCellID;\n    }\n\n    if (this.particleSystem.useRampGradients) {\n      if (other.remapData && this.remapData) {\n        other.remapData.copyFrom(this.remapData);\n      } else {\n        other.remapData = new Vector4(0, 0, 0, 0);\n      }\n    }\n\n    if (this._randomNoiseCoordinates1) {\n      if (other._randomNoiseCoordinates1) {\n        other._randomNoiseCoordinates1.copyFrom(this._randomNoiseCoordinates1);\n\n        other._randomNoiseCoordinates2.copyFrom(this._randomNoiseCoordinates2);\n      } else {\n        other._randomNoiseCoordinates1 = this._randomNoiseCoordinates1.clone();\n        other._randomNoiseCoordinates2 = this._randomNoiseCoordinates2.clone();\n      }\n    }\n  };\n\n  Particle._Count = 0;\n  return Particle;\n}();\n\nexport { Particle };","map":{"version":3,"sources":["../../../sourceES6/core/Particles/particle.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Vector2, Vector3, TmpVectors, Vector4 } from \"../Maths/math.vector\";\r\nimport { Color4 } from '../Maths/math.color';\r\nimport { Scalar } from \"../Maths/math.scalar\";\r\nimport { ParticleSystem } from \"./particleSystem\";\r\nimport { SubEmitter } from \"./subEmitter\";\r\nimport { ColorGradient, FactorGradient } from \"../Misc/gradients\";\r\n\r\ndeclare type AbstractMesh = import(\"../Meshes/abstractMesh\").AbstractMesh;\r\n\r\n/**\r\n * A particle represents one of the element emitted by a particle system.\r\n * This is mainly define by its coordinates, direction, velocity and age.\r\n */\r\nexport class Particle {\r\n    private static _Count = 0;\r\n    /**\r\n     * Unique ID of the particle\r\n     */\r\n    public id: number;\r\n    /**\r\n     * The world position of the particle in the scene.\r\n     */\r\n    public position = Vector3.Zero();\r\n\r\n    /**\r\n     * The world direction of the particle in the scene.\r\n     */\r\n    public direction = Vector3.Zero();\r\n\r\n    /**\r\n     * The color of the particle.\r\n     */\r\n    public color = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * The color change of the particle per step.\r\n     */\r\n    public colorStep = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Defines how long will the life of the particle be.\r\n     */\r\n    public lifeTime = 1.0;\r\n\r\n    /**\r\n     * The current age of the particle.\r\n     */\r\n    public age = 0;\r\n\r\n    /**\r\n     * The current size of the particle.\r\n     */\r\n    public size = 0;\r\n\r\n    /**\r\n     * The current scale of the particle.\r\n     */\r\n    public scale = new Vector2(1, 1);\r\n\r\n    /**\r\n     * The current angle of the particle.\r\n     */\r\n    public angle = 0;\r\n\r\n    /**\r\n     * Defines how fast is the angle changing.\r\n     */\r\n    public angularSpeed = 0;\r\n\r\n    /**\r\n     * Defines the cell index used by the particle to be rendered from a sprite.\r\n     */\r\n    public cellIndex: number = 0;\r\n\r\n    /**\r\n     * The information required to support color remapping\r\n     */\r\n    public remapData: Vector4;\r\n\r\n    /** @hidden */\r\n    public _randomCellOffset?: number;\r\n\r\n    /** @hidden */\r\n    public _initialDirection: Nullable<Vector3>;\r\n\r\n    /** @hidden */\r\n    public _attachedSubEmitters: Nullable<Array<SubEmitter>> = null;\r\n\r\n    /** @hidden */\r\n    public _initialStartSpriteCellID: number;\r\n    /** @hidden */\r\n    public _initialEndSpriteCellID: number;\r\n\r\n    /** @hidden */\r\n    public _currentColorGradient: Nullable<ColorGradient>;\r\n    /** @hidden */\r\n    public _currentColor1 = new Color4(0, 0, 0, 0);\r\n    /** @hidden */\r\n    public _currentColor2 = new Color4(0, 0, 0, 0);\r\n\r\n    /** @hidden */\r\n    public _currentSizeGradient: Nullable<FactorGradient>;\r\n    /** @hidden */\r\n    public _currentSize1 = 0;\r\n    /** @hidden */\r\n    public _currentSize2 = 0;\r\n\r\n    /** @hidden */\r\n    public _currentAngularSpeedGradient: Nullable<FactorGradient>;\r\n    /** @hidden */\r\n    public _currentAngularSpeed1 = 0;\r\n    /** @hidden */\r\n    public _currentAngularSpeed2 = 0;\r\n\r\n    /** @hidden */\r\n    public _currentVelocityGradient: Nullable<FactorGradient>;\r\n    /** @hidden */\r\n    public _currentVelocity1 = 0;\r\n    /** @hidden */\r\n    public _currentVelocity2 = 0;\r\n\r\n    /** @hidden */\r\n    public _currentLimitVelocityGradient: Nullable<FactorGradient>;\r\n    /** @hidden */\r\n    public _currentLimitVelocity1 = 0;\r\n    /** @hidden */\r\n    public _currentLimitVelocity2 = 0;\r\n\r\n    /** @hidden */\r\n    public _currentDragGradient: Nullable<FactorGradient>;\r\n    /** @hidden */\r\n    public _currentDrag1 = 0;\r\n    /** @hidden */\r\n    public _currentDrag2 = 0;\r\n\r\n    /** @hidden */\r\n    public _randomNoiseCoordinates1: Vector3;\r\n    /** @hidden */\r\n    public _randomNoiseCoordinates2: Vector3;\r\n\r\n    /** @hidden */\r\n    public _localPosition?: Vector3;\r\n\r\n    /**\r\n     * Creates a new instance Particle\r\n     * @param particleSystem the particle system the particle belongs to\r\n     */\r\n    constructor(\r\n        /**\r\n         * The particle system the particle belongs to.\r\n         */\r\n        public particleSystem: ParticleSystem) {\r\n        this.id = Particle._Count++;\r\n        if (!this.particleSystem.isAnimationSheetEnabled) {\r\n            return;\r\n        }\r\n\r\n        this.updateCellInfoFromSystem();\r\n    }\r\n\r\n    private updateCellInfoFromSystem(): void {\r\n        this.cellIndex = this.particleSystem.startSpriteCellID;\r\n    }\r\n\r\n    /**\r\n     * Defines how the sprite cell index is updated for the particle\r\n     */\r\n    public updateCellIndex(): void {\r\n        let offsetAge = this.age;\r\n        let changeSpeed = this.particleSystem.spriteCellChangeSpeed;\r\n\r\n        if (this.particleSystem.spriteRandomStartCell) {\r\n            if (this._randomCellOffset === undefined) {\r\n                this._randomCellOffset = Math.random() * this.lifeTime;\r\n            }\r\n\r\n            if (changeSpeed === 0) { // Special case when speed = 0 meaning we want to stay on initial cell\r\n                changeSpeed = 1;\r\n                offsetAge = this._randomCellOffset;\r\n            } else {\r\n                offsetAge += this._randomCellOffset;\r\n            }\r\n        }\r\n\r\n        let dist = (this._initialEndSpriteCellID - this._initialStartSpriteCellID);\r\n        let ratio = Scalar.Clamp(((offsetAge * changeSpeed) % this.lifeTime) / this.lifeTime);\r\n\r\n        this.cellIndex = this._initialStartSpriteCellID + (ratio * dist) | 0;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _inheritParticleInfoToSubEmitter(subEmitter: SubEmitter) {\r\n        if ((<AbstractMesh>subEmitter.particleSystem.emitter).position) {\r\n            var emitterMesh = (<AbstractMesh>subEmitter.particleSystem.emitter);\r\n            emitterMesh.position.copyFrom(this.position);\r\n            if (subEmitter.inheritDirection) {\r\n                let temp = TmpVectors.Vector3[0];\r\n                this.direction.normalizeToRef(temp);\r\n                emitterMesh.setDirection(temp, 0, Math.PI / 2);\r\n            }\r\n        } else {\r\n            var emitterPosition = (<Vector3>subEmitter.particleSystem.emitter);\r\n            emitterPosition.copyFrom(this.position);\r\n        }\r\n        // Set inheritedVelocityOffset to be used when new particles are created\r\n        this.direction.scaleToRef(subEmitter.inheritedVelocityAmount / 2, TmpVectors.Vector3[0]);\r\n        subEmitter.particleSystem._inheritedVelocityOffset.copyFrom(TmpVectors.Vector3[0]);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _inheritParticleInfoToSubEmitters() {\r\n        if (this._attachedSubEmitters && this._attachedSubEmitters.length > 0) {\r\n            this._attachedSubEmitters.forEach((subEmitter) => {\r\n                this._inheritParticleInfoToSubEmitter(subEmitter);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reset() {\r\n        this.age = 0;\r\n        this.id = Particle._Count++;\r\n        this._currentColorGradient = null;\r\n        this._currentSizeGradient = null;\r\n        this._currentAngularSpeedGradient = null;\r\n        this._currentVelocityGradient = null;\r\n        this._currentLimitVelocityGradient = null;\r\n        this._currentDragGradient = null;\r\n        this.cellIndex = this.particleSystem.startSpriteCellID;\r\n        this._randomCellOffset = undefined;\r\n    }\r\n\r\n    /**\r\n     * Copy the properties of particle to another one.\r\n     * @param other the particle to copy the information to.\r\n     */\r\n    public copyTo(other: Particle) {\r\n        other.position.copyFrom(this.position);\r\n        if (this._initialDirection) {\r\n            if (other._initialDirection) {\r\n                other._initialDirection.copyFrom(this._initialDirection);\r\n            } else {\r\n                other._initialDirection = this._initialDirection.clone();\r\n            }\r\n        } else {\r\n            other._initialDirection = null;\r\n        }\r\n        other.direction.copyFrom(this.direction);\r\n        if (this._localPosition) {\r\n            if (other._localPosition) {\r\n                other._localPosition.copyFrom(this._localPosition);\r\n            } else {\r\n                other._localPosition = this._localPosition.clone();\r\n            }\r\n        }\r\n        other.color.copyFrom(this.color);\r\n        other.colorStep.copyFrom(this.colorStep);\r\n        other.lifeTime = this.lifeTime;\r\n        other.age = this.age;\r\n        other._randomCellOffset = this._randomCellOffset;\r\n        other.size = this.size;\r\n        other.scale.copyFrom(this.scale);\r\n        other.angle = this.angle;\r\n        other.angularSpeed = this.angularSpeed;\r\n        other.particleSystem = this.particleSystem;\r\n        other.cellIndex = this.cellIndex;\r\n        other.id = this.id;\r\n        other._attachedSubEmitters = this._attachedSubEmitters;\r\n        if (this._currentColorGradient) {\r\n            other._currentColorGradient = this._currentColorGradient;\r\n            other._currentColor1.copyFrom(this._currentColor1);\r\n            other._currentColor2.copyFrom(this._currentColor2);\r\n        }\r\n        if (this._currentSizeGradient) {\r\n            other._currentSizeGradient = this._currentSizeGradient;\r\n            other._currentSize1 = this._currentSize1;\r\n            other._currentSize2 = this._currentSize2;\r\n        }\r\n        if (this._currentAngularSpeedGradient) {\r\n            other._currentAngularSpeedGradient = this._currentAngularSpeedGradient;\r\n            other._currentAngularSpeed1 = this._currentAngularSpeed1;\r\n            other._currentAngularSpeed2 = this._currentAngularSpeed2;\r\n        }\r\n        if (this._currentVelocityGradient) {\r\n            other._currentVelocityGradient = this._currentVelocityGradient;\r\n            other._currentVelocity1 = this._currentVelocity1;\r\n            other._currentVelocity2 = this._currentVelocity2;\r\n        }\r\n        if (this._currentLimitVelocityGradient) {\r\n            other._currentLimitVelocityGradient = this._currentLimitVelocityGradient;\r\n            other._currentLimitVelocity1 = this._currentLimitVelocity1;\r\n            other._currentLimitVelocity2 = this._currentLimitVelocity2;\r\n        }\r\n        if (this._currentDragGradient) {\r\n            other._currentDragGradient = this._currentDragGradient;\r\n            other._currentDrag1 = this._currentDrag1;\r\n            other._currentDrag2 = this._currentDrag2;\r\n        }\r\n        if (this.particleSystem.isAnimationSheetEnabled) {\r\n            other._initialStartSpriteCellID = this._initialStartSpriteCellID;\r\n            other._initialEndSpriteCellID = this._initialEndSpriteCellID;\r\n        }\r\n        if (this.particleSystem.useRampGradients) {\r\n            if (other.remapData && this.remapData) {\r\n                other.remapData.copyFrom(this.remapData);\r\n            } else {\r\n                other.remapData = new Vector4(0, 0, 0, 0);\r\n            }\r\n        }\r\n        if (this._randomNoiseCoordinates1) {\r\n            if (other._randomNoiseCoordinates1) {\r\n                other._randomNoiseCoordinates1.copyFrom(this._randomNoiseCoordinates1);\r\n                other._randomNoiseCoordinates2.copyFrom(this._randomNoiseCoordinates2);\r\n            } else {\r\n                other._randomNoiseCoordinates1 = this._randomNoiseCoordinates1.clone();\r\n                other._randomNoiseCoordinates2 = this._randomNoiseCoordinates2.clone();\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}