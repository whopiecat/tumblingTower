{"ast":null,"code":"/**\r\n * The engine store class is responsible to hold all the instances of Engine and Scene created\r\n * during the life time of the application.\r\n */\nvar EngineStore =\n/** @class */\nfunction () {\n  function EngineStore() {}\n\n  Object.defineProperty(EngineStore, \"LastCreatedEngine\", {\n    /**\r\n     * Gets the latest created engine\r\n     */\n    get: function () {\n      if (this.Instances.length === 0) {\n        return null;\n      }\n\n      return this.Instances[this.Instances.length - 1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EngineStore, \"LastCreatedScene\", {\n    /**\r\n     * Gets the latest created scene\r\n     */\n    get: function () {\n      return this._LastCreatedScene;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Gets the list of created engines */\n\n  EngineStore.Instances = new Array();\n  /** @hidden */\n\n  EngineStore._LastCreatedScene = null;\n  /**\r\n   * Gets or sets a global variable indicating if fallback texture must be used when a texture cannot be loaded\r\n   * @ignorenaming\r\n   */\n\n  EngineStore.UseFallbackTexture = true;\n  /**\r\n   * Texture content used if a texture cannot loaded\r\n   * @ignorenaming\r\n   */\n\n  EngineStore.FallbackTexture = \"\";\n  return EngineStore;\n}();\n\nexport { EngineStore };","map":{"version":3,"sources":["../../../sourceES6/core/Engines/engineStore.ts"],"names":[],"mappings":"AAKA;;;;AAIA,IAAA,WAAA;AAAA;AAAA,YAAA;AAAA,WAAA,WAAA,GAAA,CAoCC;;AA1BG,EAAA,MAAA,CAAA,cAAA,CAAkB,WAAlB,EAAkB,mBAAlB,EAAmC;AAHnC;;;SAGA,YAAA;AACI,UAAI,KAAK,SAAL,CAAe,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,eAAO,IAAP;AACH;;AAED,aAAO,KAAK,SAAL,CAAe,KAAK,SAAL,CAAe,MAAf,GAAwB,CAAvC,CAAP;AACH,KANkC;qBAAA;;AAAA,GAAnC;AAWA,EAAA,MAAA,CAAA,cAAA,CAAkB,WAAlB,EAAkB,kBAAlB,EAAkC;AAHlC;;;SAGA,YAAA;AACI,aAAO,KAAK,iBAAZ;AACH,KAFiC;qBAAA;;AAAA,GAAlC;AApBA;;AACc,EAAA,WAAA,CAAA,SAAA,GAAY,IAAI,KAAJ,EAAZ;AAEd;;AACc,EAAA,WAAA,CAAA,iBAAA,GAAqC,IAArC;AAoBd;;;;;AAIc,EAAA,WAAA,CAAA,kBAAA,GAAqB,IAArB;AAEd;;;;;AAIc,EAAA,WAAA,CAAA,eAAA,GAAkB,EAAlB;AAClB,SAAA,WAAA;AAAC,CApCD,EAAA;;SAAa,W","sourcesContent":["import { Nullable } from \"../types\";\r\n\r\ndeclare type Engine = import(\"./engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The engine store class is responsible to hold all the instances of Engine and Scene created\r\n * during the life time of the application.\r\n */\r\nexport class EngineStore {\r\n    /** Gets the list of created engines */\r\n    public static Instances = new Array<Engine>();\r\n\r\n    /** @hidden */\r\n    public static _LastCreatedScene: Nullable<Scene> = null;\r\n\r\n    /**\r\n     * Gets the latest created engine\r\n     */\r\n    public static get LastCreatedEngine(): Nullable<Engine> {\r\n        if (this.Instances.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return this.Instances[this.Instances.length - 1];\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created scene\r\n     */\r\n    public static get LastCreatedScene(): Nullable<Scene> {\r\n        return this._LastCreatedScene;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a global variable indicating if fallback texture must be used when a texture cannot be loaded\r\n     * @ignorenaming\r\n     */\r\n    public static UseFallbackTexture = true;\r\n\r\n    /**\r\n     * Texture content used if a texture cannot loaded\r\n     * @ignorenaming\r\n     */\r\n    public static FallbackTexture = \"\";\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}