{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ShaderCodeNode } from './shaderCodeNode';\n/** @hidden */\n\nvar ShaderCodeConditionNode =\n/** @class */\nfunction (_super) {\n  __extends(ShaderCodeConditionNode, _super);\n\n  function ShaderCodeConditionNode() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ShaderCodeConditionNode.prototype.process = function (preprocessors, options) {\n    for (var index = 0; index < this.children.length; index++) {\n      var node = this.children[index];\n\n      if (node.isValid(preprocessors)) {\n        return node.process(preprocessors, options);\n      }\n    }\n\n    return \"\";\n  };\n\n  return ShaderCodeConditionNode;\n}(ShaderCodeNode);\n\nexport { ShaderCodeConditionNode };","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/Processors/shaderCodeConditionNode.ts"],"names":[],"mappings":";AAAA,SAAS,cAAT,QAA+B,kBAA/B;AAGA;;AACA,IAAA,uBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6C,EAAA,SAAA,CAAA,uBAAA,EAAA,MAAA,CAAA;;AAA7C,WAAA,uBAAA,GAAA;;AAYC;;AAXG,EAAA,uBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,aAAR,EAAkD,OAAlD,EAA4E;AACxE,SAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,GAAG,KAAK,QAAL,CAAc,MAA1C,EAAkD,KAAK,EAAvD,EAA2D;AACvD,UAAI,IAAI,GAAG,KAAK,QAAL,CAAc,KAAd,CAAX;;AAEA,UAAI,IAAI,CAAC,OAAL,CAAa,aAAb,CAAJ,EAAiC;AAC7B,eAAO,IAAI,CAAC,OAAL,CAAa,aAAb,EAA4B,OAA5B,CAAP;AACH;AACJ;;AAED,WAAO,EAAP;AACH,GAVD;;AAWJ,SAAA,uBAAA;AAAC,CAZD,CAA6C,cAA7C,CAAA","sourcesContent":["import { ShaderCodeNode } from './shaderCodeNode';\r\nimport { ProcessingOptions } from './shaderProcessingOptions';\r\n\r\n/** @hidden */\r\nexport class ShaderCodeConditionNode extends ShaderCodeNode {\r\n    process(preprocessors: { [key: string]: string }, options: ProcessingOptions) {\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            let node = this.children[index];\r\n\r\n            if (node.isValid(preprocessors)) {\r\n                return node.process(preprocessors, options);\r\n            }\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}