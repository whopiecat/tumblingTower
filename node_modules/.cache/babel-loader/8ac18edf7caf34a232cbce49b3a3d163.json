{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { PointLight } from '../../../../Lights/pointLight';\n/**\r\n * Block used to get data information from a light\r\n */\n\nvar LightInformationBlock =\n/** @class */\nfunction (_super) {\n  __extends(LightInformationBlock, _super);\n  /**\r\n   * Creates a new LightInformationBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function LightInformationBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Vertex) || this;\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerOutput(\"direction\", NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this.registerOutput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3);\n\n    _this.registerOutput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  LightInformationBlock.prototype.getClassName = function () {\n    return \"LightInformationBlock\";\n  };\n\n  Object.defineProperty(LightInformationBlock.prototype, \"worldPosition\", {\n    /**\r\n     * Gets the world position input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightInformationBlock.prototype, \"direction\", {\n    /**\r\n     * Gets the direction output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightInformationBlock.prototype, \"color\", {\n    /**\r\n     * Gets the direction output component\r\n     */\n    get: function () {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightInformationBlock.prototype, \"intensity\", {\n    /**\r\n    * Gets the direction output component\r\n    */\n    get: function () {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  LightInformationBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n\n    if (this.light && this.light.isDisposed) {\n      this.light = null;\n    }\n\n    var light = this.light;\n    var scene = nodeMaterial.getScene();\n\n    if (!light && scene.lights.length) {\n      light = scene.lights[0];\n    }\n\n    if (!light || !light.isEnabled) {\n      effect.setFloat3(this._lightDataUniformName, 0, 0, 0);\n      effect.setFloat4(this._lightColorUniformName, 0, 0, 0, 0);\n      return;\n    }\n\n    light.transferToNodeMaterialEffect(effect, this._lightDataUniformName);\n    effect.setColor4(this._lightColorUniformName, light.diffuse, light.intensity);\n  };\n\n  LightInformationBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    if (!defines._areLightsDirty) {\n      return;\n    }\n\n    var light = this.light;\n    defines.setValue(this._lightTypeDefineName, light && light instanceof PointLight ? true : false);\n  };\n\n  LightInformationBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    state.sharedData.bindableBlocks.push(this);\n    state.sharedData.blocksWithDefines.push(this);\n    var direction = this.direction;\n    var color = this.color;\n    var intensity = this.intensity;\n    this._lightDataUniformName = state._getFreeVariableName(\"lightData\");\n    this._lightColorUniformName = state._getFreeVariableName(\"lightColor\");\n    this._lightTypeDefineName = state._getFreeDefineName(\"LIGHTPOINTTYPE\");\n\n    state._emitUniformFromString(this._lightDataUniformName, \"vec3\");\n\n    state._emitUniformFromString(this._lightColorUniformName, \"vec4\");\n\n    state.compilationString += \"#ifdef \" + this._lightTypeDefineName + \"\\r\\n\";\n    state.compilationString += this._declareOutput(direction, state) + (\" = normalize(\" + this.worldPosition.associatedVariableName + \".xyz - \" + this._lightDataUniformName + \");\\r\\n\");\n    state.compilationString += \"#else\\r\\n\";\n    state.compilationString += this._declareOutput(direction, state) + (\" = \" + this._lightDataUniformName + \";\\r\\n\");\n    state.compilationString += \"#endif\\r\\n\";\n    state.compilationString += this._declareOutput(color, state) + (\" = \" + this._lightColorUniformName + \".rgb;\\r\\n\");\n    state.compilationString += this._declareOutput(intensity, state) + (\" = \" + this._lightColorUniformName + \".a;\\r\\n\");\n    return this;\n  };\n\n  LightInformationBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    if (this.light) {\n      serializationObject.lightId = this.light.id;\n    }\n\n    return serializationObject;\n  };\n\n  LightInformationBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    if (serializationObject.lightId) {\n      this.light = scene.getLightByID(serializationObject.lightId);\n    }\n  };\n\n  return LightInformationBlock;\n}(NodeMaterialBlock);\n\nexport { LightInformationBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.LightInformationBlock\"] = LightInformationBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Vertex/lightInformationBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\nimport { Nullable } from '../../../../types';\r\nimport { Scene } from '../../../../scene';\r\nimport { Effect } from '../../../effect';\r\nimport { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';\r\nimport { Mesh } from '../../../../Meshes/mesh';\r\nimport { Light } from '../../../../Lights/light';\r\nimport { PointLight } from '../../../../Lights/pointLight';\r\nimport { AbstractMesh } from '../../../../Meshes/abstractMesh';\r\n/**\r\n * Block used to get data information from a light\r\n */\r\nexport class LightInformationBlock extends NodeMaterialBlock {\r\n    private _lightDataUniformName: string;\r\n    private _lightColorUniformName: string;\r\n    private _lightTypeDefineName: string;\r\n\r\n    /**\r\n     * Gets or sets the light associated with this block\r\n     */\r\n    public light: Nullable<Light>;\r\n\r\n    /**\r\n     * Creates a new LightInformationBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex);\r\n\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerOutput(\"direction\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n        this.registerOutput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3);\r\n        this.registerOutput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"LightInformationBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the direction output component\r\n     */\r\n    public get direction(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the direction output component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n        /**\r\n     * Gets the direction output component\r\n     */\r\n    public get intensity(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        if (this.light && this.light.isDisposed) {\r\n            this.light = null;\r\n        }\r\n\r\n        let light = this.light;\r\n        let scene = nodeMaterial.getScene();\r\n\r\n        if (!light && scene.lights.length) {\r\n            light = scene.lights[0];\r\n        }\r\n\r\n        if (!light || !light.isEnabled) {\r\n            effect.setFloat3(this._lightDataUniformName, 0, 0, 0);\r\n            effect.setFloat4(this._lightColorUniformName, 0, 0, 0, 0);\r\n            return;\r\n        }\r\n\r\n        light.transferToNodeMaterialEffect(effect, this._lightDataUniformName);\r\n\r\n        effect.setColor4(this._lightColorUniformName, light.diffuse, light.intensity);\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (!defines._areLightsDirty) {\r\n            return;\r\n        }\r\n\r\n        let light = this.light;\r\n        defines.setValue(this._lightTypeDefineName, light && light instanceof PointLight ? true : false);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        state.sharedData.bindableBlocks.push(this);\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        let direction = this.direction;\r\n        let color = this.color;\r\n        let intensity = this.intensity;\r\n\r\n        this._lightDataUniformName = state._getFreeVariableName(\"lightData\");\r\n        this._lightColorUniformName = state._getFreeVariableName(\"lightColor\");\r\n        this._lightTypeDefineName = state._getFreeDefineName(\"LIGHTPOINTTYPE\");\r\n\r\n        state._emitUniformFromString(this._lightDataUniformName, \"vec3\");\r\n        state._emitUniformFromString(this._lightColorUniformName, \"vec4\");\r\n\r\n        state.compilationString += `#ifdef ${this._lightTypeDefineName}\\r\\n`;\r\n        state.compilationString += this._declareOutput(direction, state) + ` = normalize(${this.worldPosition.associatedVariableName}.xyz - ${this._lightDataUniformName});\\r\\n`;\r\n        state.compilationString += `#else\\r\\n`;\r\n        state.compilationString += this._declareOutput(direction, state) + ` = ${this._lightDataUniformName};\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n\r\n        state.compilationString += this._declareOutput(color, state) + ` = ${this._lightColorUniformName}.rgb;\\r\\n`;\r\n        state.compilationString += this._declareOutput(intensity, state) + ` = ${this._lightColorUniformName}.a;\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        let serializationObject = super.serialize();\r\n\r\n        if (this.light) {\r\n            serializationObject.lightId = this.light.id;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        if (serializationObject.lightId) {\r\n            this.light = scene.getLightByID(serializationObject.lightId);\r\n        }\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.LightInformationBlock\"] = LightInformationBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}