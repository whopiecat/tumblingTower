{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { TouchCamera } from \"./touchCamera\";\nimport { Node } from \"../node\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Camera } from \"./camera\";\nimport \"../Gamepads/gamepadSceneComponent\";\nNode.AddNodeConstructor(\"FreeCamera\", function (name, scene) {\n  // Forcing to use the Universal camera\n  return function () {\n    return new UniversalCamera(name, Vector3.Zero(), scene);\n  };\n});\n/**\r\n * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\r\n * which still works and will still be found in many Playgrounds.\r\n * @see https://doc.babylonjs.com/features/cameras#universal-camera\r\n */\n\nvar UniversalCamera =\n/** @class */\nfunction (_super) {\n  __extends(UniversalCamera, _super);\n  /**\r\n   * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\r\n   * which still works and will still be found in many Playgrounds.\r\n   * @see https://doc.babylonjs.com/features/cameras#universal-camera\r\n   * @param name Define the name of the camera in the scene\r\n   * @param position Define the start position of the camera in the scene\r\n   * @param scene Define the scene the camera belongs to\r\n   */\n\n\n  function UniversalCamera(name, position, scene) {\n    var _this = _super.call(this, name, position, scene) || this;\n\n    _this.inputs.addGamepad();\n\n    return _this;\n  }\n\n  Object.defineProperty(UniversalCamera.prototype, \"gamepadAngularSensibility\", {\n    /**\r\n     * Defines the gamepad rotation sensiblity.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\n    get: function () {\n      var gamepad = this.inputs.attached[\"gamepad\"];\n\n      if (gamepad) {\n        return gamepad.gamepadAngularSensibility;\n      }\n\n      return 0;\n    },\n    set: function (value) {\n      var gamepad = this.inputs.attached[\"gamepad\"];\n\n      if (gamepad) {\n        gamepad.gamepadAngularSensibility = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UniversalCamera.prototype, \"gamepadMoveSensibility\", {\n    /**\r\n     * Defines the gamepad move sensiblity.\r\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\r\n     */\n    get: function () {\n      var gamepad = this.inputs.attached[\"gamepad\"];\n\n      if (gamepad) {\n        return gamepad.gamepadMoveSensibility;\n      }\n\n      return 0;\n    },\n    set: function (value) {\n      var gamepad = this.inputs.attached[\"gamepad\"];\n\n      if (gamepad) {\n        gamepad.gamepadMoveSensibility = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets the current object class name.\r\n   * @return the class name\r\n   */\n\n  UniversalCamera.prototype.getClassName = function () {\n    return \"UniversalCamera\";\n  };\n\n  return UniversalCamera;\n}(TouchCamera);\n\nexport { UniversalCamera };\n\nCamera._createDefaultParsedCamera = function (name, scene) {\n  return new UniversalCamera(name, Vector3.Zero(), scene);\n};","map":{"version":3,"sources":["../../../sourceES6/core/Cameras/universalCamera.ts"],"names":[],"mappings":";AAAA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,IAAT,QAAqB,SAArB;AAGA,SAAS,OAAT,QAAwB,sBAAxB;AACA,SAAS,MAAT,QAAuB,UAAvB;AAEA,OAAO,mCAAP;AAEA,IAAI,CAAC,kBAAL,CAAwB,YAAxB,EAAsC,UAAC,IAAD,EAAO,KAAP,EAAY;AAC9C;AACA,SAAO,YAAA;AAAM,WAAA,IAAI,eAAJ,CAAoB,IAApB,EAA0B,OAAO,CAAC,IAAR,EAA1B,EAAA,KAAA,CAAA;AAAgD,GAA7D;AACH,CAHD;AAKA;;;;;;AAKA,IAAA,eAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqC,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;AAyCjC;;;;;;;;;;AAQA,WAAA,eAAA,CAAY,IAAZ,EAA0B,QAA1B,EAA6C,KAA7C,EAAyD;AAAzD,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,QAAZ,EAAsB,KAAtB,KAA4B,IADhC;;AAEI,IAAA,KAAI,CAAC,MAAL,CAAY,UAAZ;;;AACH;;AA/CD,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,2BAAX,EAAoC;AAJpC;;;;SAIA,YAAA;AACI,UAAI,OAAO,GAA2B,KAAK,MAAL,CAAY,QAAZ,CAAqB,SAArB,CAAtC;;AACA,UAAI,OAAJ,EAAa;AACT,eAAO,OAAO,CAAC,yBAAf;AACH;;AAED,aAAO,CAAP;AACH,KAPmC;SASpC,UAAqC,KAArC,EAAkD;AAC9C,UAAI,OAAO,GAA2B,KAAK,MAAL,CAAY,QAAZ,CAAqB,SAArB,CAAtC;;AACA,UAAI,OAAJ,EAAa;AACT,QAAA,OAAO,CAAC,yBAAR,GAAoC,KAApC;AACH;AACJ,KAdmC;qBAAA;;AAAA,GAApC;AAoBA,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,wBAAX,EAAiC;AAJjC;;;;SAIA,YAAA;AACI,UAAI,OAAO,GAA2B,KAAK,MAAL,CAAY,QAAZ,CAAqB,SAArB,CAAtC;;AACA,UAAI,OAAJ,EAAa;AACT,eAAO,OAAO,CAAC,sBAAf;AACH;;AAED,aAAO,CAAP;AACH,KAPgC;SASjC,UAAkC,KAAlC,EAA+C;AAC3C,UAAI,OAAO,GAA2B,KAAK,MAAL,CAAY,QAAZ,CAAqB,SAArB,CAAtC;;AACA,UAAI,OAAJ,EAAa;AACT,QAAA,OAAO,CAAC,sBAAR,GAAiC,KAAjC;AACH;AACJ,KAdgC;qBAAA;;AAAA,GAAjC;AA6BA;;;;;AAIO,EAAA,eAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,iBAAP;AACH,GAFM;;AAGX,SAAA,eAAA;AAAC,CA7DD,CAAqC,WAArC,CAAA;;;;AA+DA,MAAM,CAAC,0BAAP,GAAoC,UAAC,IAAD,EAAe,KAAf,EAA2B;AAC3D,SAAO,IAAI,eAAJ,CAAoB,IAApB,EAA0B,OAAO,CAAC,IAAR,EAA1B,EAA0C,KAA1C,CAAP;AACH,CAFD","sourcesContent":["import { TouchCamera } from \"./touchCamera\";\r\nimport { Node } from \"../node\";\r\nimport { FreeCameraGamepadInput } from \"../Cameras/Inputs/freeCameraGamepadInput\";\r\nimport { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Camera } from \"./camera\";\r\n\r\nimport \"../Gamepads/gamepadSceneComponent\";\r\n\r\nNode.AddNodeConstructor(\"FreeCamera\", (name, scene) => {\r\n    // Forcing to use the Universal camera\r\n    return () => new UniversalCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\r\n * which still works and will still be found in many Playgrounds.\r\n * @see https://doc.babylonjs.com/features/cameras#universal-camera\r\n */\r\nexport class UniversalCamera extends TouchCamera {\r\n    /**\r\n     * Defines the gamepad rotation sensiblity.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\r\n    public get gamepadAngularSensibility(): number {\r\n        var gamepad = <FreeCameraGamepadInput>this.inputs.attached[\"gamepad\"];\r\n        if (gamepad) {\r\n            return gamepad.gamepadAngularSensibility;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set gamepadAngularSensibility(value: number) {\r\n        var gamepad = <FreeCameraGamepadInput>this.inputs.attached[\"gamepad\"];\r\n        if (gamepad) {\r\n            gamepad.gamepadAngularSensibility = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines the gamepad move sensiblity.\r\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\r\n     */\r\n    public get gamepadMoveSensibility(): number {\r\n        var gamepad = <FreeCameraGamepadInput>this.inputs.attached[\"gamepad\"];\r\n        if (gamepad) {\r\n            return gamepad.gamepadMoveSensibility;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set gamepadMoveSensibility(value: number) {\r\n        var gamepad = <FreeCameraGamepadInput>this.inputs.attached[\"gamepad\"];\r\n        if (gamepad) {\r\n            gamepad.gamepadMoveSensibility = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\r\n     * which still works and will still be found in many Playgrounds.\r\n     * @see https://doc.babylonjs.com/features/cameras#universal-camera\r\n     * @param name Define the name of the camera in the scene\r\n     * @param position Define the start position of the camera in the scene\r\n     * @param scene Define the scene the camera belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene: Scene) {\r\n        super(name, position, scene);\r\n        this.inputs.addGamepad();\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @return the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"UniversalCamera\";\r\n    }\r\n}\r\n\r\nCamera._createDefaultParsedCamera = (name: string, scene: Scene) => {\r\n    return new UniversalCamera(name, Vector3.Zero(), scene);\r\n};\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}