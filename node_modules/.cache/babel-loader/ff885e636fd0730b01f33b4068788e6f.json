{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { InputBlock } from '../Input/inputBlock';\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\nimport { RefractionBlock } from './refractionBlock';\n/**\r\n * Block used to implement the sub surface module of the PBR material\r\n */\n\nvar SubSurfaceBlock =\n/** @class */\nfunction (_super) {\n  __extends(SubSurfaceBlock, _super);\n  /**\r\n   * Create a new SubSurfaceBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function SubSurfaceBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._isUnique = true;\n\n    _this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"translucencyIntensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"translucencyDiffusionDist\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"refraction\", _this, NodeMaterialConnectionPointDirection.Input, RefractionBlock, \"RefractionBlock\"));\n\n    _this.registerOutput(\"subsurface\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"subsurface\", _this, NodeMaterialConnectionPointDirection.Output, SubSurfaceBlock, \"SubSurfaceBlock\"));\n\n    return _this;\n  }\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n\n  SubSurfaceBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"subSurfaceOut\");\n\n    state._excludeVariableName(\"vThicknessParam\");\n\n    state._excludeVariableName(\"vTintColor\");\n\n    state._excludeVariableName(\"vSubSurfaceIntensity\");\n  };\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  SubSurfaceBlock.prototype.getClassName = function () {\n    return \"SubSurfaceBlock\";\n  };\n\n  Object.defineProperty(SubSurfaceBlock.prototype, \"thickness\", {\n    /**\r\n     * Gets the thickness component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"tintColor\", {\n    /**\r\n     * Gets the tint color input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"translucencyIntensity\", {\n    /**\r\n     * Gets the translucency intensity input component\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"translucencyDiffusionDist\", {\n    /**\r\n     * Gets the translucency diffusion distance input component\r\n     */\n    get: function () {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"refraction\", {\n    /**\r\n     * Gets the refraction object parameters\r\n     */\n    get: function () {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"subsurface\", {\n    /**\r\n     * Gets the sub surface object output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SubSurfaceBlock.prototype.autoConfigure = function (material) {\n    if (!this.thickness.isConnected) {\n      var thicknessInput = new InputBlock(\"SubSurface thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      thicknessInput.value = 0;\n      thicknessInput.output.connectTo(this.thickness);\n    }\n  };\n\n  SubSurfaceBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    _super.prototype.prepareDefines.call(this, mesh, nodeMaterial, defines);\n\n    var translucencyEnabled = this.translucencyDiffusionDist.isConnected || this.translucencyIntensity.isConnected;\n    defines.setValue(\"SUBSURFACE\", translucencyEnabled || this.refraction.isConnected, true);\n    defines.setValue(\"SS_TRANSLUCENCY\", translucencyEnabled, true);\n    defines.setValue(\"SS_THICKNESSANDMASK_TEXTURE\", false, true);\n    defines.setValue(\"SS_MASK_FROM_THICKNESS_TEXTURE\", false, true);\n    defines.setValue(\"SS_MASK_FROM_THICKNESS_TEXTURE_GLTF\", false, true);\n  };\n  /**\r\n   * Gets the main code of the block (fragment side)\r\n   * @param state current state of the node material building\r\n   * @param ssBlock instance of a SubSurfaceBlock or null if the code must be generated without an active sub surface module\r\n   * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n   * @param worldPosVarName name of the variable holding the world position\r\n   * @returns the shader code\r\n   */\n\n\n  SubSurfaceBlock.GetCode = function (state, ssBlock, reflectionBlock, worldPosVarName) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n\n    var code = \"\";\n    var thickness = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.thickness.isConnected) ? ssBlock.thickness.associatedVariableName : \"0.\";\n    var tintColor = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.tintColor.isConnected) ? ssBlock.tintColor.associatedVariableName : \"vec3(1.)\";\n    var translucencyIntensity = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyIntensity.isConnected) ? ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyIntensity.associatedVariableName : \"1.\";\n    var translucencyDiffusionDistance = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyDiffusionDist.isConnected) ? ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyDiffusionDist.associatedVariableName : \"vec3(1.)\";\n    var refractionBlock = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.refraction.isConnected) ? (_a = ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.refraction.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n    var refractionTintAtDistance = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.tintAtDistance.isConnected) ? refractionBlock.tintAtDistance.associatedVariableName : \"1.\";\n    var refractionIntensity = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.intensity.isConnected) ? refractionBlock.intensity.associatedVariableName : \"1.\";\n    var refractionView = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.view.isConnected) ? refractionBlock.view.associatedVariableName : \"\";\n    code += (_b = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.getCode(state)) !== null && _b !== void 0 ? _b : \"\";\n    code += \"subSurfaceOutParams subSurfaceOut;\\n\\n        #ifdef SUBSURFACE\\n            vec2 vThicknessParam = vec2(0., \" + thickness + \");\\n            vec4 vTintColor = vec4(\" + tintColor + \", \" + refractionTintAtDistance + \");\\n            vec3 vSubSurfaceIntensity = vec3(\" + refractionIntensity + \", \" + translucencyIntensity + \", 0.);\\n\\n            subSurfaceBlock(\\n                vSubSurfaceIntensity,\\n                vThicknessParam,\\n                vTintColor,\\n                normalW,\\n                specularEnvironmentReflectance,\\n            #ifdef SS_THICKNESSANDMASK_TEXTURE\\n                vec4(0.),\\n            #endif\\n            #ifdef REFLECTION\\n                #ifdef SS_TRANSLUCENCY\\n                    \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._reflectionMatrixName) + \",\\n                    #ifdef USESPHERICALFROMREFLECTIONMAP\\n                        #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\\n                            reflectionOut.irradianceVector,\\n                        #endif\\n                        #if defined(REALTIME_FILTERING)\\n                            \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                            \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionFilteringInfoName) + \",\\n                        #endif\\n                        #endif\\n                    #ifdef USEIRRADIANCEMAP\\n                        irradianceSampler,\\n                    #endif\\n                #endif\\n            #endif\\n            #ifdef SS_REFRACTION\\n                \" + worldPosVarName + \".xyz,\\n                viewDirectionW,\\n                \" + refractionView + \",\\n                surfaceAlbedo,\\n                \" + ((_c = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionInfosName) !== null && _c !== void 0 ? _c : \"\") + \",\\n                \" + ((_d = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._refractionMatrixName) !== null && _d !== void 0 ? _d : \"\") + \",\\n                \" + ((_e = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionMicrosurfaceInfosName) !== null && _e !== void 0 ? _e : \"\") + \",\\n                vLightingIntensity,\\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\\n                    alpha,\\n                #endif\\n                #ifdef \" + ((_f = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLODRefractionAlpha) !== null && _f !== void 0 ? _f : \"IGNORE\") + \"\\n                    NdotVUnclamped,\\n                #endif\\n                #ifdef \" + ((_g = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLinearSpecularRefraction) !== null && _g !== void 0 ? _g : \"IGNORE\") + \"\\n                    roughness,\\n                #else\\n                    alphaG,\\n                #endif\\n                #ifdef \" + ((_h = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _h !== void 0 ? _h : \"IGNORE\") + \"\\n                    \" + ((_j = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _j !== void 0 ? _j : \"\") + \",\\n                #else\\n                    \" + ((_k = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _k !== void 0 ? _k : \"\") + \",\\n                #endif\\n                #ifndef LODBASEDMICROSFURACE\\n                    #ifdef \" + ((_l = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _l !== void 0 ? _l : \"IGNORE\") + \"\\n                        \" + ((_m = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _m !== void 0 ? _m : \"\") + \",\\n                        \" + ((_o = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _o !== void 0 ? _o : \"\") + \",\\n                    #else\\n                        \" + ((_p = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _p !== void 0 ? _p : \"\") + \",\\n                        \" + ((_q = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _q !== void 0 ? _q : \"\") + \",\\n                    #endif\\n                #endif\\n                #ifdef ANISOTROPIC\\n                    anisotropicOut,\\n                #endif\\n                #ifdef REALTIME_FILTERING\\n                    \" + ((_r = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionFilteringInfoName) !== null && _r !== void 0 ? _r : \"\") + \",\\n                #endif\\n            #endif\\n            #ifdef SS_TRANSLUCENCY\\n                \" + translucencyDiffusionDistance + \",\\n            #endif\\n                subSurfaceOut\\n            );\\n\\n            #ifdef SS_REFRACTION\\n                surfaceAlbedo = subSurfaceOut.surfaceAlbedo;\\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\\n                    alpha = subSurfaceOut.alpha;\\n                #endif\\n            #endif\\n        #else\\n            subSurfaceOut.specularEnvironmentReflectance = specularEnvironmentReflectance;\\n        #endif\\r\\n\";\n    return code;\n  };\n\n  SubSurfaceBlock.prototype._buildBlock = function (state) {\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.blocksWithDefines.push(this);\n    }\n\n    return this;\n  };\n\n  return SubSurfaceBlock;\n}(NodeMaterialBlock);\n\nexport { SubSurfaceBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.SubSurfaceBlock\"] = SubSurfaceBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/PBR/subSurfaceBlock.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAT,QAAkC,yBAAlC;AACA,SAAS,qCAAT,QAAsD,mDAAtD;AAEA,SAAsC,oCAAtC,QAAkF,wCAAlF;AACA,SAAS,wBAAT,QAAyC,sCAAzC;AACA,SAAS,UAAT,QAA2B,4BAA3B;AACA,SAAS,UAAT,QAA2B,qBAA3B;AACA,SAAS,uCAAT,QAAwD,+CAAxD;AAKA,SAAS,eAAT,QAAgC,mBAAhC;AAEA;;;;AAGA,IAAA,eAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqC,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;AAEjC;;;;;;AAIA,WAAA,eAAA,CAAmB,IAAnB,EAA+B;AAA/B,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,wBAAwB,CAAC,QAArC,KAA8C,IADlD;;AAGI,IAAA,KAAI,CAAC,SAAL,GAAiB,IAAjB;;AAEA,IAAA,KAAI,CAAC,aAAL,CAAmB,WAAnB,EAAgC,qCAAqC,CAAC,KAAtE,EAA6E,KAA7E,EAAoF,wBAAwB,CAAC,QAA7G;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,WAAnB,EAAgC,qCAAqC,CAAC,MAAtE,EAA8E,IAA9E,EAAoF,wBAAwB,CAAC,QAA7G;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,uBAAnB,EAA4C,qCAAqC,CAAC,KAAlF,EAAyF,IAAzF,EAA+F,wBAAwB,CAAC,QAAxH;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,2BAAnB,EAAgD,qCAAqC,CAAC,MAAtF,EAA8F,IAA9F,EAAoG,wBAAwB,CAAC,QAA7H;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,YAAnB,EAAiC,qCAAqC,CAAC,MAAvE,EAA+E,IAA/E,EAAqF,wBAAwB,CAAC,QAA9G,EACI,IAAI,uCAAJ,CAA4C,YAA5C,EAA0D,KAA1D,EAAgE,oCAAoC,CAAC,KAArG,EAA4G,eAA5G,EAA6H,iBAA7H,CADJ;;AAGA,IAAA,KAAI,CAAC,cAAL,CAAoB,YAApB,EAAkC,qCAAqC,CAAC,MAAxE,EAAgF,wBAAwB,CAAC,QAAzG,EACI,IAAI,uCAAJ,CAA4C,YAA5C,EAA0D,KAA1D,EAAgE,oCAAoC,CAAC,MAArG,EAA6G,eAA7G,EAA8H,iBAA9H,CADJ;;;AAEH;AAED;;;;;;AAIO,EAAA,eAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,KAAlB,EAA+C;AAC3C,IAAA,KAAK,CAAC,oBAAN,CAA2B,eAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,iBAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,YAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,sBAA3B;AACH,GALM;AAOP;;;;;;AAIO,EAAA,eAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,iBAAP;AACH,GAFM;;AAOP,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFmB;qBAAA;;AAAA,GAApB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFmB;qBAAA;;AAAA,GAApB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,uBAAX,EAAgC;AAHhC;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAF+B;qBAAA;;AAAA,GAAhC;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,2BAAX,EAAoC;AAHpC;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFmC;qBAAA;;AAAA,GAApC;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AAHrB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFoB;qBAAA;;AAAA,GAArB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AAHrB;;;SAGA,YAAA;AACI,aAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACH,KAFoB;qBAAA;;AAAA,GAArB;;AAIO,EAAA,eAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,QAArB,EAA2C;AACvC,QAAI,CAAC,KAAK,SAAL,CAAe,WAApB,EAAiC;AAC7B,UAAI,cAAc,GAAG,IAAI,UAAJ,CAAe,sBAAf,EAAuC,wBAAwB,CAAC,QAAhE,EAA0E,qCAAqC,CAAC,KAAhH,CAArB;AACA,MAAA,cAAc,CAAC,KAAf,GAAuB,CAAvB;AACA,MAAA,cAAc,CAAC,MAAf,CAAsB,SAAtB,CAAgC,KAAK,SAArC;AACH;AACJ,GANM;;AAQA,EAAA,eAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,IAAtB,EAA0C,YAA1C,EAAsE,OAAtE,EAAkG;AAC9F,IAAA,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB,EAAqB,IAArB,EAA2B,YAA3B,EAAyC,OAAzC;;AAEA,QAAM,mBAAmB,GAAG,KAAK,yBAAL,CAA+B,WAA/B,IAA8C,KAAK,qBAAL,CAA2B,WAArG;AAEA,IAAA,OAAO,CAAC,QAAR,CAAiB,YAAjB,EAA+B,mBAAmB,IAAI,KAAK,UAAL,CAAgB,WAAtE,EAAmF,IAAnF;AACA,IAAA,OAAO,CAAC,QAAR,CAAiB,iBAAjB,EAAoC,mBAApC,EAAyD,IAAzD;AACA,IAAA,OAAO,CAAC,QAAR,CAAiB,6BAAjB,EAAgD,KAAhD,EAAuD,IAAvD;AACA,IAAA,OAAO,CAAC,QAAR,CAAiB,gCAAjB,EAAmD,KAAnD,EAA0D,IAA1D;AACA,IAAA,OAAO,CAAC,QAAR,CAAiB,qCAAjB,EAAwD,KAAxD,EAA+D,IAA/D;AACH,GAVM;AAYP;;;;;;;;;;AAQc,EAAA,eAAA,CAAA,OAAA,GAAd,UAAsB,KAAtB,EAAqD,OAArD,EAAyF,eAAzF,EAAqI,eAArI,EAA4J;;;AACxJ,QAAI,IAAI,GAAG,EAAX;AAEA,QAAM,SAAS,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,SAAT,CAAmB,WAAnB,IAAiC,OAAO,CAAC,SAAR,CAAkB,sBAAnD,GAA4E,IAA9F;AACA,QAAM,SAAS,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,SAAT,CAAmB,WAAnB,IAAiC,OAAO,CAAC,SAAR,CAAkB,sBAAnD,GAA4E,UAA9F;AACA,QAAM,qBAAqB,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,qBAAT,CAA+B,WAA/B,IAA6C,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,qBAAT,CAA+B,sBAA5E,GAAqG,IAAnI;AACA,QAAM,6BAA6B,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,yBAAT,CAAmC,WAAnC,IAAiD,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,yBAAT,CAAmC,sBAApF,GAA6G,UAAnJ;AAEA,QAAM,eAAe,GAA+B,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,UAAT,CAAoB,WAApB,IAAiC,CAAA,EAAA,GAAC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,UAAT,CAAoB,cAArB,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,KAAA,CAAnC,GAAmC,EAAA,CAAE,UAAtE,GAAmF,IAAvI;AAEA,QAAM,wBAAwB,GAAG,CAAA,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,cAAjB,CAAgC,WAAhC,IAA8C,eAAe,CAAC,cAAhB,CAA+B,sBAA7E,GAAsG,IAAvI;AACA,QAAM,mBAAmB,GAAG,CAAA,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,SAAjB,CAA2B,WAA3B,IAAyC,eAAe,CAAC,SAAhB,CAA0B,sBAAnE,GAA4F,IAAxH;AACA,QAAM,cAAc,GAAG,CAAA,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,IAAjB,CAAsB,WAAtB,IAAoC,eAAe,CAAC,IAAhB,CAAqB,sBAAzD,GAAkF,EAAzG;AAEA,IAAA,IAAI,IAAA,CAAA,EAAA,GAAI,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,OAAjB,CAAyB,KAAzB,CAAJ,MAAkC,IAAlC,IAAkC,EAAA,KAAA,KAAA,CAAlC,GAAkC,EAAlC,GAAuC,EAA3C;AAEA,IAAA,IAAI,IAAI,kHAG8B,SAH9B,GAGuC,yCAHvC,GAIqB,SAJrB,GAI8B,IAJ9B,GAImC,wBAJnC,GAI2D,mDAJ3D,GAK+B,mBAL/B,GAKkD,IALlD,GAKuD,qBALvD,GAK4E,qZAL5E,IAkBM,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,qBAlBvB,IAkB4C,iUAlB5C,IAwBc,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,gBAxB/B,IAwB+C,iCAxB/C,IAyBc,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,6BAzB/B,IAyB4D,wRAzB5D,GAkCE,eAlCF,GAkCiB,0DAlCjB,GAoCE,cApCF,GAoCgB,qDApChB,IAoCgB,CAAA,EAAA,GAEd,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,qBAFH,MAEwB,IAFxB,IAEwB,EAAA,KAAA,KAAA,CAFxB,GAEwB,EAFxB,GAE4B,EAtC5C,IAsC8C,qBAtC9C,IAsC8C,CAAA,EAAA,GAC5C,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,qBAD2B,MACN,IADM,IACN,EAAA,KAAA,KAAA,CADM,GACN,EADM,GACF,EAvC5C,IAuC8C,qBAvC9C,IAuC8C,CAAA,EAAA,GAC5C,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,iCAD2B,MACM,IADN,IACM,EAAA,KAAA,KAAA,CADN,GACM,EADN,GACU,EAxCxD,IAwC0D,6KAxC1D,IAwC0D,CAAA,EAAA,GAKjD,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,yBALgC,MAKP,IALO,IAKP,EAAA,KAAA,KAAA,CALO,GAKP,EALO,GAKH,QA7CvD,IA6C+D,wFA7C/D,IA6C+D,CAAA,EAAA,GAGtD,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,+BAHqC,MAGN,IAHM,IAGN,EAAA,KAAA,KAAA,CAHM,GAGN,EAHM,GAGF,QAhD7D,IAgDqE,uIAhDrE,IAgDqE,CAAA,EAAA,GAK5D,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,aAL2C,MAK9B,IAL8B,IAK9B,EAAA,KAAA,KAAA,CAL8B,GAK9B,EAL8B,GAK1B,QArD3C,IAqDmD,wBArDnD,IAqDmD,CAAA,EAAA,GAC7C,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,gBAD4B,MACZ,IADY,IACZ,EAAA,KAAA,KAAA,CADY,GACZ,EADY,GACR,EAtD3C,IAsD6C,gDAtD7C,IAsD6C,CAAA,EAAA,GAEvC,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,cAFsB,MAER,IAFQ,IAER,EAAA,KAAA,KAAA,CAFQ,GAER,EAFQ,GAEJ,EAxDzC,IAwD2C,sGAxD3C,IAwD2C,CAAA,EAAA,GAG9B,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,aAHa,MAGA,IAHA,IAGA,EAAA,KAAA,KAAA,CAHA,GAGA,EAHA,GAGI,QA3D/C,IA2DuD,4BA3DvD,IA2DuD,CAAA,EAAA,GAC7C,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,gBAD4B,MACZ,IADY,IACZ,EAAA,KAAA,KAAA,CADY,GACZ,EADY,GACR,EA5D/C,IA4DiD,6BA5DjD,IA4DiD,CAAA,EAAA,GACvC,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,gBADsB,MACN,IADM,IACN,EAAA,KAAA,KAAA,CADM,GACN,EADM,GACF,EA7D/C,IA6DiD,wDA7DjD,IA6DiD,CAAA,EAAA,GAEvC,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,cAFsB,MAER,IAFQ,IAER,EAAA,KAAA,KAAA,CAFQ,GAER,EAFQ,GAEJ,EA/D7C,IA+D+C,6BA/D/C,IA+D+C,CAAA,EAAA,GACrC,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,cADoB,MACN,IADM,IACN,EAAA,KAAA,KAAA,CADM,GACN,EADM,GACF,EAhE7C,IAgE+C,yNAhE/C,IAgE+C,CAAA,EAAA,GAOzC,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,6BAPwB,MAOK,IAPL,IAOK,EAAA,KAAA,KAAA,CAPL,GAOK,EAPL,GAOS,EAvExD,IAuE0D,qGAvE1D,GA2EE,6BA3EF,GA2E+B,6bA3EvC;AA0FA,WAAO,IAAP;AACH,GA3Ga;;AA6GJ,EAAA,eAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,KAAtB,EAAmD;AAC/C,QAAI,KAAK,CAAC,MAAN,KAAiB,wBAAwB,CAAC,QAA9C,EAAwD;AACpD,MAAA,KAAK,CAAC,UAAN,CAAiB,iBAAjB,CAAmC,IAAnC,CAAwC,IAAxC;AACH;;AAED,WAAO,IAAP;AACH,GANS;;AAOd,SAAA,eAAA;AAAC,CAnOD,CAAqC,iBAArC,CAAA;;;AAqOA,UAAU,CAAC,eAAX,CAA2B,yBAA3B,IAAwD,eAAxD","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\nimport { InputBlock } from '../Input/inputBlock';\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';\r\nimport { AbstractMesh } from '../../../../Meshes/abstractMesh';\r\nimport { ReflectionBlock } from './reflectionBlock';\r\nimport { Nullable } from '../../../../types';\r\nimport { RefractionBlock } from './refractionBlock';\r\n\r\n/**\r\n * Block used to implement the sub surface module of the PBR material\r\n */\r\nexport class SubSurfaceBlock extends NodeMaterialBlock {\r\n\r\n    /**\r\n     * Create a new SubSurfaceBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"translucencyIntensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"translucencyDiffusionDist\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"refraction\", this, NodeMaterialConnectionPointDirection.Input, RefractionBlock, \"RefractionBlock\"));\r\n\r\n        this.registerOutput(\"subsurface\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"subsurface\", this, NodeMaterialConnectionPointDirection.Output, SubSurfaceBlock, \"SubSurfaceBlock\"));\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"subSurfaceOut\");\r\n        state._excludeVariableName(\"vThicknessParam\");\r\n        state._excludeVariableName(\"vTintColor\");\r\n        state._excludeVariableName(\"vSubSurfaceIntensity\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"SubSurfaceBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the thickness component\r\n     */\r\n    public get thickness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the tint color input component\r\n     */\r\n    public get tintColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the translucency intensity input component\r\n     */\r\n    public get translucencyIntensity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the translucency diffusion distance input component\r\n     */\r\n    public get translucencyDiffusionDist(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the refraction object parameters\r\n     */\r\n    public get refraction(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the sub surface object output component\r\n     */\r\n    public get subsurface(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.thickness.isConnected) {\r\n            let thicknessInput = new InputBlock(\"SubSurface thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\r\n            thicknessInput.value = 0;\r\n            thicknessInput.output.connectTo(this.thickness);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        super.prepareDefines(mesh, nodeMaterial, defines);\r\n\r\n        const translucencyEnabled = this.translucencyDiffusionDist.isConnected || this.translucencyIntensity.isConnected;\r\n\r\n        defines.setValue(\"SUBSURFACE\", translucencyEnabled || this.refraction.isConnected, true);\r\n        defines.setValue(\"SS_TRANSLUCENCY\", translucencyEnabled, true);\r\n        defines.setValue(\"SS_THICKNESSANDMASK_TEXTURE\", false, true);\r\n        defines.setValue(\"SS_MASK_FROM_THICKNESS_TEXTURE\", false, true);\r\n        defines.setValue(\"SS_MASK_FROM_THICKNESS_TEXTURE_GLTF\", false, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the main code of the block (fragment side)\r\n     * @param state current state of the node material building\r\n     * @param ssBlock instance of a SubSurfaceBlock or null if the code must be generated without an active sub surface module\r\n     * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n     * @param worldPosVarName name of the variable holding the world position\r\n     * @returns the shader code\r\n     */\r\n    public static GetCode(state: NodeMaterialBuildState, ssBlock: Nullable<SubSurfaceBlock>, reflectionBlock: Nullable<ReflectionBlock>, worldPosVarName: string): string {\r\n        let code = \"\";\r\n\r\n        const thickness = ssBlock?.thickness.isConnected ? ssBlock.thickness.associatedVariableName : \"0.\";\r\n        const tintColor = ssBlock?.tintColor.isConnected ? ssBlock.tintColor.associatedVariableName : \"vec3(1.)\";\r\n        const translucencyIntensity = ssBlock?.translucencyIntensity.isConnected ? ssBlock?.translucencyIntensity.associatedVariableName : \"1.\";\r\n        const translucencyDiffusionDistance = ssBlock?.translucencyDiffusionDist.isConnected ? ssBlock?.translucencyDiffusionDist.associatedVariableName : \"vec3(1.)\";\r\n\r\n        const refractionBlock: Nullable<RefractionBlock> = (ssBlock?.refraction.isConnected ? ssBlock?.refraction.connectedPoint?.ownerBlock : null) as Nullable<RefractionBlock>;\r\n\r\n        const refractionTintAtDistance = refractionBlock?.tintAtDistance.isConnected ? refractionBlock.tintAtDistance.associatedVariableName : \"1.\";\r\n        const refractionIntensity = refractionBlock?.intensity.isConnected ? refractionBlock.intensity.associatedVariableName : \"1.\";\r\n        const refractionView = refractionBlock?.view.isConnected ? refractionBlock.view.associatedVariableName : \"\";\r\n\r\n        code += refractionBlock?.getCode(state) ?? \"\";\r\n\r\n        code += `subSurfaceOutParams subSurfaceOut;\r\n\r\n        #ifdef SUBSURFACE\r\n            vec2 vThicknessParam = vec2(0., ${thickness});\r\n            vec4 vTintColor = vec4(${tintColor}, ${refractionTintAtDistance});\r\n            vec3 vSubSurfaceIntensity = vec3(${refractionIntensity}, ${translucencyIntensity}, 0.);\r\n\r\n            subSurfaceBlock(\r\n                vSubSurfaceIntensity,\r\n                vThicknessParam,\r\n                vTintColor,\r\n                normalW,\r\n                specularEnvironmentReflectance,\r\n            #ifdef SS_THICKNESSANDMASK_TEXTURE\r\n                vec4(0.),\r\n            #endif\r\n            #ifdef REFLECTION\r\n                #ifdef SS_TRANSLUCENCY\r\n                    ${reflectionBlock?._reflectionMatrixName},\r\n                    #ifdef USESPHERICALFROMREFLECTIONMAP\r\n                        #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\r\n                            reflectionOut.irradianceVector,\r\n                        #endif\r\n                        #if defined(REALTIME_FILTERING)\r\n                            ${reflectionBlock?._cubeSamplerName},\r\n                            ${reflectionBlock?._vReflectionFilteringInfoName},\r\n                        #endif\r\n                        #endif\r\n                    #ifdef USEIRRADIANCEMAP\r\n                        irradianceSampler,\r\n                    #endif\r\n                #endif\r\n            #endif\r\n            #ifdef SS_REFRACTION\r\n                ${worldPosVarName}.xyz,\r\n                viewDirectionW,\r\n                ${refractionView},\r\n                surfaceAlbedo,\r\n                ${refractionBlock?._vRefractionInfosName ?? \"\"},\r\n                ${refractionBlock?._refractionMatrixName ?? \"\"},\r\n                ${refractionBlock?._vRefractionMicrosurfaceInfosName ?? \"\"},\r\n                vLightingIntensity,\r\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\r\n                    alpha,\r\n                #endif\r\n                #ifdef ${refractionBlock?._defineLODRefractionAlpha ?? \"IGNORE\"}\r\n                    NdotVUnclamped,\r\n                #endif\r\n                #ifdef ${refractionBlock?._defineLinearSpecularRefraction ?? \"IGNORE\"}\r\n                    roughness,\r\n                #else\r\n                    alphaG,\r\n                #endif\r\n                #ifdef ${refractionBlock?._define3DName ?? \"IGNORE\"}\r\n                    ${refractionBlock?._cubeSamplerName ?? \"\"},\r\n                #else\r\n                    ${refractionBlock?._2DSamplerName ?? \"\"},\r\n                #endif\r\n                #ifndef LODBASEDMICROSFURACE\r\n                    #ifdef ${refractionBlock?._define3DName ?? \"IGNORE\"}\r\n                        ${refractionBlock?._cubeSamplerName ?? \"\"},\r\n                        ${refractionBlock?._cubeSamplerName ?? \"\"},\r\n                    #else\r\n                        ${refractionBlock?._2DSamplerName ?? \"\"},\r\n                        ${refractionBlock?._2DSamplerName ?? \"\"},\r\n                    #endif\r\n                #endif\r\n                #ifdef ANISOTROPIC\r\n                    anisotropicOut,\r\n                #endif\r\n                #ifdef REALTIME_FILTERING\r\n                    ${refractionBlock?._vRefractionFilteringInfoName ?? \"\"},\r\n                #endif\r\n            #endif\r\n            #ifdef SS_TRANSLUCENCY\r\n                ${translucencyDiffusionDistance},\r\n            #endif\r\n                subSurfaceOut\r\n            );\r\n\r\n            #ifdef SS_REFRACTION\r\n                surfaceAlbedo = subSurfaceOut.surfaceAlbedo;\r\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\r\n                    alpha = subSurfaceOut.alpha;\r\n                #endif\r\n            #endif\r\n        #else\r\n            subSurfaceOut.specularEnvironmentReflectance = specularEnvironmentReflectance;\r\n        #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.blocksWithDefines.push(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.SubSurfaceBlock\"] = SubSurfaceBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}