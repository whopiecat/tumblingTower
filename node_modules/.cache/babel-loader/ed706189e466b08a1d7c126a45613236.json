{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\nimport { Mesh } from \"../../Meshes/mesh\";\nimport { Quaternion } from \"../../Maths/math.vector\";\n/**\r\n * A generic trigger-only motion controller for WebXR\r\n */\n\nvar WebXRGenericTriggerMotionController =\n/** @class */\nfunction (_super) {\n  __extends(WebXRGenericTriggerMotionController, _super);\n\n  function WebXRGenericTriggerMotionController(scene, gamepadObject, handedness) {\n    var _this = _super.call(this, scene, GenericTriggerLayout[handedness], gamepadObject, handedness) || this;\n\n    _this.profileId = WebXRGenericTriggerMotionController.ProfileId;\n    return _this;\n  }\n\n  WebXRGenericTriggerMotionController.prototype._getFilenameAndPath = function () {\n    return {\n      filename: \"generic.babylon\",\n      path: \"https://controllers.babylonjs.com/generic/\"\n    };\n  };\n\n  WebXRGenericTriggerMotionController.prototype._getModelLoadingConstraints = function () {\n    return true;\n  };\n\n  WebXRGenericTriggerMotionController.prototype._processLoadedModel = function (meshes) {// nothing to do\n  };\n\n  WebXRGenericTriggerMotionController.prototype._setRootMesh = function (meshes) {\n    var _this = this;\n\n    this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n    meshes.forEach(function (mesh) {\n      mesh.isPickable = false;\n\n      if (!mesh.parent) {\n        mesh.setParent(_this.rootMesh);\n      }\n    });\n    this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n  };\n\n  WebXRGenericTriggerMotionController.prototype._updateModel = function () {// no-op\n  };\n  /**\r\n   * Static version of the profile id of this controller\r\n   */\n\n\n  WebXRGenericTriggerMotionController.ProfileId = \"generic-trigger\";\n  return WebXRGenericTriggerMotionController;\n}(WebXRAbstractMotionController);\n\nexport { WebXRGenericTriggerMotionController }; // https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/generic/generic-trigger-touchpad-thumbstick.json\n\nvar GenericTriggerLayout = {\n  left: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"generic-trigger-left\",\n    assetPath: \"left.glb\"\n  },\n  right: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"generic-trigger-right\",\n    assetPath: \"right.glb\"\n  },\n  none: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"generic-trigger-none\",\n    assetPath: \"none.glb\"\n  }\n};","map":{"version":3,"sources":["../../../../sourceES6/core/XR/motionController/webXRGenericMotionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebXRAbstractMotionController, IMinimalMotionControllerObject, MotionControllerHandedness, IMotionControllerLayoutMap } from \"./webXRAbstractMotionController\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\n\r\n/**\r\n * A generic trigger-only motion controller for WebXR\r\n */\r\nexport class WebXRGenericTriggerMotionController extends WebXRAbstractMotionController {\r\n    /**\r\n     * Static version of the profile id of this controller\r\n     */\r\n    public static ProfileId = \"generic-trigger\";\r\n\r\n    public profileId = WebXRGenericTriggerMotionController.ProfileId;\r\n\r\n    constructor(scene: Scene, gamepadObject: IMinimalMotionControllerObject, handedness: MotionControllerHandedness) {\r\n        super(scene, GenericTriggerLayout[handedness], gamepadObject, handedness);\r\n    }\r\n\r\n    protected _getFilenameAndPath(): { filename: string; path: string } {\r\n        return {\r\n            filename: \"generic.babylon\",\r\n            path: \"https://controllers.babylonjs.com/generic/\",\r\n        };\r\n    }\r\n\r\n    protected _getModelLoadingConstraints(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected _processLoadedModel(meshes: AbstractMesh[]): void {\r\n        // nothing to do\r\n    }\r\n\r\n    protected _setRootMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\r\n\r\n        meshes.forEach((mesh) => {\r\n            mesh.isPickable = false;\r\n            if (!mesh.parent) {\r\n                mesh.setParent(this.rootMesh);\r\n            }\r\n        });\r\n\r\n        this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n    }\r\n\r\n    protected _updateModel(): void {\r\n        // no-op\r\n    }\r\n}\r\n\r\n// https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/generic/generic-trigger-touchpad-thumbstick.json\r\nconst GenericTriggerLayout: IMotionControllerLayoutMap = {\r\n    left: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {},\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"generic-trigger-left\",\r\n        assetPath: \"left.glb\",\r\n    },\r\n    right: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {},\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"generic-trigger-right\",\r\n        assetPath: \"right.glb\",\r\n    },\r\n    none: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {},\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"generic-trigger-none\",\r\n        assetPath: \"none.glb\",\r\n    },\r\n};\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}