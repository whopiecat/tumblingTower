{"ast":null,"code":"import { Material } from \"../Materials/material\";\nimport { VertexBuffer } from \"../Meshes/buffer\";\n/**\r\n * PostProcessManager is used to manage one or more post processes or post process pipelines\r\n * See https://doc.babylonjs.com/how_to/how_to_use_postprocesses\r\n */\n\nvar PostProcessManager =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance PostProcess\r\n   * @param scene The scene that the post process is associated with.\r\n   */\n  function PostProcessManager(scene) {\n    this._vertexBuffers = {};\n    this._scene = scene;\n  }\n\n  PostProcessManager.prototype._prepareBuffers = function () {\n    if (this._vertexBuffers[VertexBuffer.PositionKind]) {\n      return;\n    } // VBO\n\n\n    var vertices = [];\n    vertices.push(1, 1);\n    vertices.push(-1, 1);\n    vertices.push(-1, -1);\n    vertices.push(1, -1);\n    this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(this._scene.getEngine(), vertices, VertexBuffer.PositionKind, false, false, 2);\n\n    this._buildIndexBuffer();\n  };\n\n  PostProcessManager.prototype._buildIndexBuffer = function () {\n    // Indices\n    var indices = [];\n    indices.push(0);\n    indices.push(1);\n    indices.push(2);\n    indices.push(0);\n    indices.push(2);\n    indices.push(3);\n    this._indexBuffer = this._scene.getEngine().createIndexBuffer(indices);\n  };\n  /**\r\n   * Rebuilds the vertex buffers of the manager.\r\n   * @hidden\r\n   */\n\n\n  PostProcessManager.prototype._rebuild = function () {\n    var vb = this._vertexBuffers[VertexBuffer.PositionKind];\n\n    if (!vb) {\n      return;\n    }\n\n    vb._rebuild();\n\n    this._buildIndexBuffer();\n  }; // Methods\n\n  /**\r\n   * Prepares a frame to be run through a post process.\r\n   * @param sourceTexture The input texture to the post procesess. (default: null)\r\n   * @param postProcesses An array of post processes to be run. (default: null)\r\n   * @returns True if the post processes were able to be run.\r\n   * @hidden\r\n   */\n\n\n  PostProcessManager.prototype._prepareFrame = function (sourceTexture, postProcesses) {\n    if (sourceTexture === void 0) {\n      sourceTexture = null;\n    }\n\n    if (postProcesses === void 0) {\n      postProcesses = null;\n    }\n\n    var camera = this._scene.activeCamera;\n\n    if (!camera) {\n      return false;\n    }\n\n    postProcesses = postProcesses || camera._postProcesses.filter(function (pp) {\n      return pp != null;\n    });\n\n    if (!postProcesses || postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\n      return false;\n    }\n\n    postProcesses[0].activate(camera, sourceTexture, postProcesses !== null && postProcesses !== undefined);\n    return true;\n  };\n  /**\r\n   * Manually render a set of post processes to a texture.\r\n   * Please note, the frame buffer won't be unbound after the call in case you have more render to do.\r\n   * @param postProcesses An array of post processes to be run.\r\n   * @param targetTexture The target texture to render to.\r\n   * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight\r\n   * @param faceIndex defines the face to render to if a cubemap is defined as the target\r\n   * @param lodLevel defines which lod of the texture to render to\r\n   * @param doNotBindFrambuffer If set to true, assumes that the framebuffer has been bound previously\r\n   */\n\n\n  PostProcessManager.prototype.directRender = function (postProcesses, targetTexture, forceFullscreenViewport, faceIndex, lodLevel, doNotBindFrambuffer) {\n    if (targetTexture === void 0) {\n      targetTexture = null;\n    }\n\n    if (forceFullscreenViewport === void 0) {\n      forceFullscreenViewport = false;\n    }\n\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    if (lodLevel === void 0) {\n      lodLevel = 0;\n    }\n\n    if (doNotBindFrambuffer === void 0) {\n      doNotBindFrambuffer = false;\n    }\n\n    var engine = this._scene.getEngine();\n\n    for (var index = 0; index < postProcesses.length; index++) {\n      if (index < postProcesses.length - 1) {\n        postProcesses[index + 1].activate(this._scene.activeCamera, targetTexture);\n      } else {\n        if (targetTexture) {\n          engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport, lodLevel);\n        } else if (!doNotBindFrambuffer) {\n          engine.restoreDefaultFramebuffer();\n        }\n      }\n\n      var pp = postProcesses[index];\n      var effect = pp.apply();\n\n      if (effect) {\n        pp.onBeforeRenderObservable.notifyObservers(effect); // VBOs\n\n        this._prepareBuffers();\n\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect); // Draw order\n\n        engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n        pp.onAfterRenderObservable.notifyObservers(effect);\n      }\n    } // Restore depth buffer\n\n\n    engine.setDepthBuffer(true);\n    engine.setDepthWrite(true);\n  };\n  /**\r\n   * Finalize the result of the output of the postprocesses.\r\n   * @param doNotPresent If true the result will not be displayed to the screen.\r\n   * @param targetTexture The target texture to render to.\r\n   * @param faceIndex The index of the face to bind the target texture to.\r\n   * @param postProcesses The array of post processes to render.\r\n   * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight (default: false)\r\n   * @hidden\r\n   */\n\n\n  PostProcessManager.prototype._finalizeFrame = function (doNotPresent, targetTexture, faceIndex, postProcesses, forceFullscreenViewport) {\n    if (forceFullscreenViewport === void 0) {\n      forceFullscreenViewport = false;\n    }\n\n    var camera = this._scene.activeCamera;\n\n    if (!camera) {\n      return;\n    }\n\n    postProcesses = postProcesses || camera._postProcesses.filter(function (pp) {\n      return pp != null;\n    });\n\n    if (postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\n      return;\n    }\n\n    var engine = this._scene.getEngine();\n\n    for (var index = 0, len = postProcesses.length; index < len; index++) {\n      var pp = postProcesses[index];\n\n      if (index < len - 1) {\n        pp._outputTexture = postProcesses[index + 1].activate(camera, targetTexture);\n      } else {\n        if (targetTexture) {\n          engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport);\n          pp._outputTexture = targetTexture;\n        } else {\n          engine.restoreDefaultFramebuffer();\n          pp._outputTexture = null;\n        }\n      }\n\n      if (doNotPresent) {\n        break;\n      }\n\n      var effect = pp.apply();\n\n      if (effect) {\n        pp.onBeforeRenderObservable.notifyObservers(effect); // VBOs\n\n        this._prepareBuffers();\n\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect); // Draw order\n\n        engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n        pp.onAfterRenderObservable.notifyObservers(effect);\n      }\n    } // Restore states\n\n\n    engine.setDepthBuffer(true);\n    engine.setDepthWrite(true);\n    engine.setAlphaMode(0);\n  };\n  /**\r\n   * Disposes of the post process manager.\r\n   */\n\n\n  PostProcessManager.prototype.dispose = function () {\n    var buffer = this._vertexBuffers[VertexBuffer.PositionKind];\n\n    if (buffer) {\n      buffer.dispose();\n      this._vertexBuffers[VertexBuffer.PositionKind] = null;\n    }\n\n    if (this._indexBuffer) {\n      this._scene.getEngine()._releaseBuffer(this._indexBuffer);\n\n      this._indexBuffer = null;\n    }\n  };\n\n  return PostProcessManager;\n}();\n\nexport { PostProcessManager };","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/postProcessManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport { VertexBuffer } from \"../Meshes/buffer\";\r\n\r\nimport { DataBuffer } from '../Meshes/dataBuffer';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * PostProcessManager is used to manage one or more post processes or post process pipelines\r\n * See https://doc.babylonjs.com/how_to/how_to_use_postprocesses\r\n */\r\nexport class PostProcessManager {\r\n    private _scene: Scene;\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _vertexBuffers: { [key: string]: Nullable<VertexBuffer> } = {};\r\n\r\n    /**\r\n     * Creates a new instance PostProcess\r\n     * @param scene The scene that the post process is associated with.\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n    }\r\n\r\n    private _prepareBuffers(): void {\r\n        if (this._vertexBuffers[VertexBuffer.PositionKind]) {\r\n            return;\r\n        }\r\n\r\n        // VBO\r\n        var vertices = [];\r\n        vertices.push(1, 1);\r\n        vertices.push(-1, 1);\r\n        vertices.push(-1, -1);\r\n        vertices.push(1, -1);\r\n\r\n        this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(this._scene.getEngine(), vertices, VertexBuffer.PositionKind, false, false, 2);\r\n\r\n        this._buildIndexBuffer();\r\n    }\r\n\r\n    private _buildIndexBuffer(): void {\r\n        // Indices\r\n        var indices = [];\r\n        indices.push(0);\r\n        indices.push(1);\r\n        indices.push(2);\r\n\r\n        indices.push(0);\r\n        indices.push(2);\r\n        indices.push(3);\r\n\r\n        this._indexBuffer = this._scene.getEngine().createIndexBuffer(indices);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the vertex buffers of the manager.\r\n     * @hidden\r\n     */\r\n    public _rebuild(): void {\r\n        let vb = this._vertexBuffers[VertexBuffer.PositionKind];\r\n\r\n        if (!vb) {\r\n            return;\r\n        }\r\n        vb._rebuild();\r\n        this._buildIndexBuffer();\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Prepares a frame to be run through a post process.\r\n     * @param sourceTexture The input texture to the post procesess. (default: null)\r\n     * @param postProcesses An array of post processes to be run. (default: null)\r\n     * @returns True if the post processes were able to be run.\r\n     * @hidden\r\n     */\r\n    public _prepareFrame(sourceTexture: Nullable<InternalTexture> = null, postProcesses: Nullable<PostProcess[]> = null): boolean {\r\n        let camera = this._scene.activeCamera;\r\n        if (!camera) {\r\n            return false;\r\n        }\r\n\r\n        postProcesses = postProcesses || (<Nullable<PostProcess[]>>camera._postProcesses.filter((pp) => { return pp != null; }));\r\n\r\n        if (!postProcesses || postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\r\n            return false;\r\n        }\r\n\r\n        postProcesses[0].activate(camera, sourceTexture, postProcesses !== null && postProcesses !== undefined);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Manually render a set of post processes to a texture.\r\n     * Please note, the frame buffer won't be unbound after the call in case you have more render to do.\r\n     * @param postProcesses An array of post processes to be run.\r\n     * @param targetTexture The target texture to render to.\r\n     * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight\r\n     * @param faceIndex defines the face to render to if a cubemap is defined as the target\r\n     * @param lodLevel defines which lod of the texture to render to\r\n     * @param doNotBindFrambuffer If set to true, assumes that the framebuffer has been bound previously\r\n     */\r\n    public directRender(postProcesses: PostProcess[], targetTexture: Nullable<InternalTexture> = null, forceFullscreenViewport = false, faceIndex = 0, lodLevel = 0, doNotBindFrambuffer = false): void {\r\n        var engine = this._scene.getEngine();\r\n\r\n        for (var index = 0; index < postProcesses.length; index++) {\r\n            if (index < postProcesses.length - 1) {\r\n                postProcesses[index + 1].activate(this._scene.activeCamera, targetTexture);\r\n            } else {\r\n                if (targetTexture) {\r\n                    engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport, lodLevel);\r\n                } else if (!doNotBindFrambuffer) {\r\n                    engine.restoreDefaultFramebuffer();\r\n                }\r\n            }\r\n\r\n            var pp = postProcesses[index];\r\n            var effect = pp.apply();\r\n\r\n            if (effect) {\r\n                pp.onBeforeRenderObservable.notifyObservers(effect);\r\n\r\n                // VBOs\r\n                this._prepareBuffers();\r\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\r\n\r\n                // Draw order\r\n                engine.drawElementsType(Material.TriangleFillMode, 0, 6);\r\n\r\n                pp.onAfterRenderObservable.notifyObservers(effect);\r\n            }\r\n        }\r\n\r\n        // Restore depth buffer\r\n        engine.setDepthBuffer(true);\r\n        engine.setDepthWrite(true);\r\n    }\r\n\r\n    /**\r\n     * Finalize the result of the output of the postprocesses.\r\n     * @param doNotPresent If true the result will not be displayed to the screen.\r\n     * @param targetTexture The target texture to render to.\r\n     * @param faceIndex The index of the face to bind the target texture to.\r\n     * @param postProcesses The array of post processes to render.\r\n     * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight (default: false)\r\n     * @hidden\r\n     */\r\n    public _finalizeFrame(doNotPresent?: boolean, targetTexture?: InternalTexture, faceIndex?: number, postProcesses?: Array<PostProcess>, forceFullscreenViewport = false): void {\r\n        let camera = this._scene.activeCamera;\r\n\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        postProcesses = postProcesses || <Array<PostProcess>>camera._postProcesses.filter((pp) => { return pp != null; });\r\n        if (postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\r\n            return;\r\n        }\r\n        var engine = this._scene.getEngine();\r\n\r\n        for (var index = 0, len = postProcesses.length; index < len; index++) {\r\n            var pp = postProcesses[index];\r\n\r\n            if (index < len - 1) {\r\n                pp._outputTexture = postProcesses[index + 1].activate(camera, targetTexture);\r\n            } else {\r\n                if (targetTexture) {\r\n                    engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport);\r\n                    pp._outputTexture = targetTexture;\r\n                } else {\r\n                    engine.restoreDefaultFramebuffer();\r\n                    pp._outputTexture = null;\r\n                }\r\n            }\r\n\r\n            if (doNotPresent) {\r\n                break;\r\n            }\r\n\r\n            var effect = pp.apply();\r\n\r\n            if (effect) {\r\n                pp.onBeforeRenderObservable.notifyObservers(effect);\r\n\r\n                // VBOs\r\n                this._prepareBuffers();\r\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\r\n\r\n                // Draw order\r\n                engine.drawElementsType(Material.TriangleFillMode, 0, 6);\r\n\r\n                pp.onAfterRenderObservable.notifyObservers(effect);\r\n            }\r\n        }\r\n\r\n        // Restore states\r\n        engine.setDepthBuffer(true);\r\n        engine.setDepthWrite(true);\r\n        engine.setAlphaMode(0);\r\n    }\r\n\r\n    /**\r\n     * Disposes of the post process manager.\r\n     */\r\n    public dispose(): void {\r\n        var buffer = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (buffer) {\r\n            buffer.dispose();\r\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\r\n        }\r\n\r\n        if (this._indexBuffer) {\r\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\r\n            this._indexBuffer = null;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}