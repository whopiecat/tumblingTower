{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Vector3, Vector2 } from \"../Maths/math.vector\";\nimport { StringDictionary } from \"./stringDictionary\"; // Mainly based on these 2 articles :\n// Creating an universal virtual touch joystick working for all Touch models thanks to Hand.JS : http://blogs.msdn.com/b/davrous/archive/2013/02/22/creating-an-universal-virtual-touch-joystick-working-for-all-touch-models-thanks-to-hand-js.aspx\n// & on Seb Lee-Delisle original work: http://seb.ly/2011/04/multi-touch-game-controller-in-javascripthtml5-for-ipad/\n\n/**\r\n * Defines the potential axis of a Joystick\r\n */\n\nexport var JoystickAxis;\n\n(function (JoystickAxis) {\n  /** X axis */\n  JoystickAxis[JoystickAxis[\"X\"] = 0] = \"X\";\n  /** Y axis */\n\n  JoystickAxis[JoystickAxis[\"Y\"] = 1] = \"Y\";\n  /** Z axis */\n\n  JoystickAxis[JoystickAxis[\"Z\"] = 2] = \"Z\";\n})(JoystickAxis || (JoystickAxis = {}));\n/**\r\n * Class used to define virtual joystick (used in touch mode)\r\n */\n\n\nvar VirtualJoystick =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new virtual joystick\r\n   * @param leftJoystick defines that the joystick is for left hand (false by default)\r\n   * @param customizations Defines the options we want to customize the VirtualJoystick\r\n   */\n  function VirtualJoystick(leftJoystick, customizations) {\n    var _this = this;\n\n    var options = __assign(__assign({}, VirtualJoystick._GetDefaultOptions()), customizations);\n\n    if (leftJoystick) {\n      this._leftJoystick = true;\n    } else {\n      this._leftJoystick = false;\n    }\n\n    VirtualJoystick._globalJoystickIndex++; // By default left & right arrow keys are moving the X\n    // and up & down keys are moving the Y\n\n    this._axisTargetedByLeftAndRight = JoystickAxis.X;\n    this._axisTargetedByUpAndDown = JoystickAxis.Y;\n    this.reverseLeftRight = false;\n    this.reverseUpDown = false; // collections of pointers\n\n    this._touches = new StringDictionary();\n    this.deltaPosition = Vector3.Zero();\n    this._joystickSensibility = 25;\n    this._inversedSensibility = 1 / (this._joystickSensibility / 1000);\n\n    this._onResize = function (evt) {\n      VirtualJoystick.vjCanvasWidth = window.innerWidth;\n      VirtualJoystick.vjCanvasHeight = window.innerHeight;\n\n      if (VirtualJoystick.Canvas) {\n        VirtualJoystick.Canvas.width = VirtualJoystick.vjCanvasWidth;\n        VirtualJoystick.Canvas.height = VirtualJoystick.vjCanvasHeight;\n      }\n\n      VirtualJoystick.halfWidth = VirtualJoystick.vjCanvasWidth / 2;\n    }; // injecting a canvas element on top of the canvas 3D game\n\n\n    if (!VirtualJoystick.Canvas) {\n      window.addEventListener(\"resize\", this._onResize, false);\n      VirtualJoystick.Canvas = document.createElement(\"canvas\");\n      VirtualJoystick.vjCanvasWidth = window.innerWidth;\n      VirtualJoystick.vjCanvasHeight = window.innerHeight;\n      VirtualJoystick.Canvas.width = window.innerWidth;\n      VirtualJoystick.Canvas.height = window.innerHeight;\n      VirtualJoystick.Canvas.style.width = \"100%\";\n      VirtualJoystick.Canvas.style.height = \"100%\";\n      VirtualJoystick.Canvas.style.position = \"absolute\";\n      VirtualJoystick.Canvas.style.backgroundColor = \"transparent\";\n      VirtualJoystick.Canvas.style.top = \"0px\";\n      VirtualJoystick.Canvas.style.left = \"0px\";\n      VirtualJoystick.Canvas.style.zIndex = \"5\";\n      VirtualJoystick.Canvas.style.msTouchAction = \"none\";\n      VirtualJoystick.Canvas.style.touchAction = \"none\"; // fix https://forum.babylonjs.com/t/virtualjoystick-needs-to-set-style-touch-action-none-explicitly/9562\n      // Support for jQuery PEP polyfill\n\n      VirtualJoystick.Canvas.setAttribute(\"touch-action\", \"none\");\n      var context = VirtualJoystick.Canvas.getContext('2d');\n\n      if (!context) {\n        throw new Error(\"Unable to create canvas for virtual joystick\");\n      }\n\n      VirtualJoystick.vjCanvasContext = context;\n      VirtualJoystick.vjCanvasContext.strokeStyle = \"#ffffff\";\n      VirtualJoystick.vjCanvasContext.lineWidth = 2;\n      document.body.appendChild(VirtualJoystick.Canvas);\n    }\n\n    VirtualJoystick.halfWidth = VirtualJoystick.Canvas.width / 2;\n    this.pressed = false;\n    this.limitToContainer = options.limitToContainer; // default joystick color\n\n    this._joystickColor = options.color; // default joystick size\n\n    this.containerSize = options.containerSize;\n    this.puckSize = options.puckSize;\n\n    if (options.position) {\n      this.setPosition(options.position.x, options.position.y);\n    }\n\n    if (options.puckImage) {\n      this.setPuckImage(options.puckImage);\n    }\n\n    if (options.containerImage) {\n      this.setContainerImage(options.containerImage);\n    }\n\n    if (options.alwaysVisible) {\n      VirtualJoystick._alwaysVisibleSticks++;\n    } // must come after position potentially set\n\n\n    this.alwaysVisible = options.alwaysVisible;\n    this._joystickPointerID = -1; // current joystick position\n\n    this._joystickPointerPos = new Vector2(0, 0);\n    this._joystickPreviousPointerPos = new Vector2(0, 0); // origin joystick position\n\n    this._joystickPointerStartPos = new Vector2(0, 0);\n    this._deltaJoystickVector = new Vector2(0, 0);\n\n    this._onPointerDownHandlerRef = function (evt) {\n      _this._onPointerDown(evt);\n    };\n\n    this._onPointerMoveHandlerRef = function (evt) {\n      _this._onPointerMove(evt);\n    };\n\n    this._onPointerUpHandlerRef = function (evt) {\n      _this._onPointerUp(evt);\n    };\n\n    VirtualJoystick.Canvas.addEventListener('pointerdown', this._onPointerDownHandlerRef, false);\n    VirtualJoystick.Canvas.addEventListener('pointermove', this._onPointerMoveHandlerRef, false);\n    VirtualJoystick.Canvas.addEventListener('pointerup', this._onPointerUpHandlerRef, false);\n    VirtualJoystick.Canvas.addEventListener('pointerout', this._onPointerUpHandlerRef, false);\n    VirtualJoystick.Canvas.addEventListener(\"contextmenu\", function (evt) {\n      evt.preventDefault(); // Disables system menu\n    }, false);\n    requestAnimationFrame(function () {\n      _this._drawVirtualJoystick();\n    });\n  }\n\n  VirtualJoystick._GetDefaultOptions = function () {\n    return {\n      puckSize: 40,\n      containerSize: 60,\n      color: \"cyan\",\n      puckImage: undefined,\n      containerImage: undefined,\n      position: undefined,\n      alwaysVisible: false,\n      limitToContainer: false\n    };\n  };\n  /**\r\n   * Defines joystick sensibility (ie. the ratio beteen a physical move and virtual joystick position change)\r\n   * @param newJoystickSensibility defines the new sensibility\r\n   */\n\n\n  VirtualJoystick.prototype.setJoystickSensibility = function (newJoystickSensibility) {\n    this._joystickSensibility = newJoystickSensibility;\n    this._inversedSensibility = 1 / (this._joystickSensibility / 1000);\n  };\n\n  VirtualJoystick.prototype._onPointerDown = function (e) {\n    var positionOnScreenCondition;\n    e.preventDefault();\n\n    if (this._leftJoystick === true) {\n      positionOnScreenCondition = e.clientX < VirtualJoystick.halfWidth;\n    } else {\n      positionOnScreenCondition = e.clientX > VirtualJoystick.halfWidth;\n    }\n\n    if (positionOnScreenCondition && this._joystickPointerID < 0) {\n      // First contact will be dedicated to the virtual joystick\n      this._joystickPointerID = e.pointerId;\n\n      if (this._joystickPosition) {\n        this._joystickPointerStartPos = this._joystickPosition.clone();\n        this._joystickPointerPos = this._joystickPosition.clone();\n        this._joystickPreviousPointerPos = this._joystickPosition.clone(); // in case the user only clicks down && doesn't move:\n        // this ensures the delta is properly set\n\n        this._onPointerMove(e);\n      } else {\n        this._joystickPointerStartPos.x = e.clientX;\n        this._joystickPointerStartPos.y = e.clientY;\n        this._joystickPointerPos = this._joystickPointerStartPos.clone();\n        this._joystickPreviousPointerPos = this._joystickPointerStartPos.clone();\n      }\n\n      this._deltaJoystickVector.x = 0;\n      this._deltaJoystickVector.y = 0;\n      this.pressed = true;\n\n      this._touches.add(e.pointerId.toString(), e);\n    } else {\n      // You can only trigger the action buttons with a joystick declared\n      if (VirtualJoystick._globalJoystickIndex < 2 && this._action) {\n        this._action();\n\n        this._touches.add(e.pointerId.toString(), {\n          x: e.clientX,\n          y: e.clientY,\n          prevX: e.clientX,\n          prevY: e.clientY\n        });\n      }\n    }\n  };\n\n  VirtualJoystick.prototype._onPointerMove = function (e) {\n    // If the current pointer is the one associated to the joystick (first touch contact)\n    if (this._joystickPointerID == e.pointerId) {\n      // limit to container if need be\n      if (this.limitToContainer) {\n        var vector = new Vector2(e.clientX - this._joystickPointerStartPos.x, e.clientY - this._joystickPointerStartPos.y);\n        var distance = vector.length();\n\n        if (distance > this.containerSize) {\n          vector.scaleInPlace(this.containerSize / distance);\n        }\n\n        this._joystickPointerPos.x = this._joystickPointerStartPos.x + vector.x;\n        this._joystickPointerPos.y = this._joystickPointerStartPos.y + vector.y;\n      } else {\n        this._joystickPointerPos.x = e.clientX;\n        this._joystickPointerPos.y = e.clientY;\n      } // create delta vector\n\n\n      this._deltaJoystickVector = this._joystickPointerPos.clone();\n      this._deltaJoystickVector = this._deltaJoystickVector.subtract(this._joystickPointerStartPos); // if a joystick is always visible, there will be clipping issues if\n      // you drag the puck from one over the container of the other\n\n      if (0 < VirtualJoystick._alwaysVisibleSticks) {\n        if (this._leftJoystick) {\n          this._joystickPointerPos.x = Math.min(VirtualJoystick.halfWidth, this._joystickPointerPos.x);\n        } else {\n          this._joystickPointerPos.x = Math.max(VirtualJoystick.halfWidth, this._joystickPointerPos.x);\n        }\n      }\n\n      var directionLeftRight = this.reverseLeftRight ? -1 : 1;\n      var deltaJoystickX = directionLeftRight * this._deltaJoystickVector.x / this._inversedSensibility;\n\n      switch (this._axisTargetedByLeftAndRight) {\n        case JoystickAxis.X:\n          this.deltaPosition.x = Math.min(1, Math.max(-1, deltaJoystickX));\n          break;\n\n        case JoystickAxis.Y:\n          this.deltaPosition.y = Math.min(1, Math.max(-1, deltaJoystickX));\n          break;\n\n        case JoystickAxis.Z:\n          this.deltaPosition.z = Math.min(1, Math.max(-1, deltaJoystickX));\n          break;\n      }\n\n      var directionUpDown = this.reverseUpDown ? 1 : -1;\n      var deltaJoystickY = directionUpDown * this._deltaJoystickVector.y / this._inversedSensibility;\n\n      switch (this._axisTargetedByUpAndDown) {\n        case JoystickAxis.X:\n          this.deltaPosition.x = Math.min(1, Math.max(-1, deltaJoystickY));\n          break;\n\n        case JoystickAxis.Y:\n          this.deltaPosition.y = Math.min(1, Math.max(-1, deltaJoystickY));\n          break;\n\n        case JoystickAxis.Z:\n          this.deltaPosition.z = Math.min(1, Math.max(-1, deltaJoystickY));\n          break;\n      }\n    } else {\n      var data = this._touches.get(e.pointerId.toString());\n\n      if (data) {\n        data.x = e.clientX;\n        data.y = e.clientY;\n      }\n    }\n  };\n\n  VirtualJoystick.prototype._onPointerUp = function (e) {\n    if (this._joystickPointerID == e.pointerId) {\n      this._clearPreviousDraw();\n\n      this._joystickPointerID = -1;\n      this.pressed = false;\n    } else {\n      var touch = this._touches.get(e.pointerId.toString());\n\n      if (touch) {\n        VirtualJoystick.vjCanvasContext.clearRect(touch.prevX - 44, touch.prevY - 44, 88, 88);\n      }\n    }\n\n    this._deltaJoystickVector.x = 0;\n    this._deltaJoystickVector.y = 0;\n\n    this._touches.remove(e.pointerId.toString());\n  };\n  /**\r\n   * Change the color of the virtual joystick\r\n   * @param newColor a string that must be a CSS color value (like \"red\") or the hexa value (like \"#FF0000\")\r\n   */\n\n\n  VirtualJoystick.prototype.setJoystickColor = function (newColor) {\n    this._joystickColor = newColor;\n  };\n\n  Object.defineProperty(VirtualJoystick.prototype, \"containerSize\", {\n    get: function () {\n      return this._joystickContainerSize;\n    },\n\n    /**\r\n     * Size of the joystick's container\r\n     */\n    set: function (newSize) {\n      this._joystickContainerSize = newSize;\n      this._clearContainerSize = ~~(this._joystickContainerSize * 2.1);\n      this._clearContainerSizeOffset = ~~(this._clearContainerSize / 2);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VirtualJoystick.prototype, \"puckSize\", {\n    get: function () {\n      return this._joystickPuckSize;\n    },\n\n    /**\r\n     * Size of the joystick's puck\r\n     */\n    set: function (newSize) {\n      this._joystickPuckSize = newSize;\n      this._clearPuckSize = ~~(this._joystickPuckSize * 2.1);\n      this._clearPuckSizeOffset = ~~(this._clearPuckSize / 2);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Clears the set position of the joystick\r\n   */\n\n  VirtualJoystick.prototype.clearPosition = function () {\n    this.alwaysVisible = false;\n    this._joystickPosition = null;\n  };\n\n  Object.defineProperty(VirtualJoystick.prototype, \"alwaysVisible\", {\n    get: function () {\n      return this._alwaysVisible;\n    },\n\n    /**\r\n     * Defines whether or not the joystick container is always visible\r\n     */\n    set: function (value) {\n      if (this._alwaysVisible === value) {\n        return;\n      }\n\n      if (value && this._joystickPosition) {\n        VirtualJoystick._alwaysVisibleSticks++;\n        this._alwaysVisible = true;\n      } else {\n        VirtualJoystick._alwaysVisibleSticks--;\n        this._alwaysVisible = false;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n  * Sets the constant position of the Joystick container\r\n  * @param x X axis coordinate\r\n  * @param y Y axis coordinate\r\n  */\n\n  VirtualJoystick.prototype.setPosition = function (x, y) {\n    // just in case position is moved while the container is visible\n    if (this._joystickPointerStartPos) {\n      this._clearPreviousDraw();\n    }\n\n    this._joystickPosition = new Vector2(x, y);\n  };\n  /**\r\n   * Defines a callback to call when the joystick is touched\r\n   * @param action defines the callback\r\n   */\n\n\n  VirtualJoystick.prototype.setActionOnTouch = function (action) {\n    this._action = action;\n  };\n  /**\r\n   * Defines which axis you'd like to control for left & right\r\n   * @param axis defines the axis to use\r\n   */\n\n\n  VirtualJoystick.prototype.setAxisForLeftRight = function (axis) {\n    switch (axis) {\n      case JoystickAxis.X:\n      case JoystickAxis.Y:\n      case JoystickAxis.Z:\n        this._axisTargetedByLeftAndRight = axis;\n        break;\n\n      default:\n        this._axisTargetedByLeftAndRight = JoystickAxis.X;\n        break;\n    }\n  };\n  /**\r\n   * Defines which axis you'd like to control for up & down\r\n   * @param axis defines the axis to use\r\n   */\n\n\n  VirtualJoystick.prototype.setAxisForUpDown = function (axis) {\n    switch (axis) {\n      case JoystickAxis.X:\n      case JoystickAxis.Y:\n      case JoystickAxis.Z:\n        this._axisTargetedByUpAndDown = axis;\n        break;\n\n      default:\n        this._axisTargetedByUpAndDown = JoystickAxis.Y;\n        break;\n    }\n  };\n  /**\r\n   * Clears the canvas from the previous puck / container draw\r\n   */\n\n\n  VirtualJoystick.prototype._clearPreviousDraw = function () {\n    var jp = this._joystickPosition || this._joystickPointerStartPos; // clear container pixels\n\n    VirtualJoystick.vjCanvasContext.clearRect(jp.x - this._clearContainerSizeOffset, jp.y - this._clearContainerSizeOffset, this._clearContainerSize, this._clearContainerSize); // clear puck pixels\n\n    VirtualJoystick.vjCanvasContext.clearRect(this._joystickPreviousPointerPos.x - this._clearPuckSizeOffset, this._joystickPreviousPointerPos.y - this._clearPuckSizeOffset, this._clearPuckSize, this._clearPuckSize);\n  };\n  /**\r\n   * Loads `urlPath` to be used for the container's image\r\n   * @param urlPath defines the urlPath of an image to use\r\n   */\n\n\n  VirtualJoystick.prototype.setContainerImage = function (urlPath) {\n    var _this = this;\n\n    var image = new Image();\n    image.src = urlPath;\n\n    image.onload = function () {\n      return _this._containerImage = image;\n    };\n  };\n  /**\r\n   * Loads `urlPath` to be used for the puck's image\r\n   * @param urlPath defines the urlPath of an image to use\r\n   */\n\n\n  VirtualJoystick.prototype.setPuckImage = function (urlPath) {\n    var _this = this;\n\n    var image = new Image();\n    image.src = urlPath;\n\n    image.onload = function () {\n      return _this._puckImage = image;\n    };\n  };\n  /**\r\n   * Draws the Virtual Joystick's container\r\n   */\n\n\n  VirtualJoystick.prototype._drawContainer = function () {\n    var jp = this._joystickPosition || this._joystickPointerStartPos;\n\n    this._clearPreviousDraw();\n\n    if (this._containerImage) {\n      VirtualJoystick.vjCanvasContext.drawImage(this._containerImage, jp.x - this.containerSize, jp.y - this.containerSize, this.containerSize * 2, this.containerSize * 2);\n    } else {\n      // outer container\n      VirtualJoystick.vjCanvasContext.beginPath();\n      VirtualJoystick.vjCanvasContext.strokeStyle = this._joystickColor;\n      VirtualJoystick.vjCanvasContext.lineWidth = 2;\n      VirtualJoystick.vjCanvasContext.arc(jp.x, jp.y, this.containerSize, 0, Math.PI * 2, true);\n      VirtualJoystick.vjCanvasContext.stroke();\n      VirtualJoystick.vjCanvasContext.closePath(); // inner container\n\n      VirtualJoystick.vjCanvasContext.beginPath();\n      VirtualJoystick.vjCanvasContext.lineWidth = 6;\n      VirtualJoystick.vjCanvasContext.strokeStyle = this._joystickColor;\n      VirtualJoystick.vjCanvasContext.arc(jp.x, jp.y, this.puckSize, 0, Math.PI * 2, true);\n      VirtualJoystick.vjCanvasContext.stroke();\n      VirtualJoystick.vjCanvasContext.closePath();\n    }\n  };\n  /**\r\n   * Draws the Virtual Joystick's puck\r\n   */\n\n\n  VirtualJoystick.prototype._drawPuck = function () {\n    if (this._puckImage) {\n      VirtualJoystick.vjCanvasContext.drawImage(this._puckImage, this._joystickPointerPos.x - this.puckSize, this._joystickPointerPos.y - this.puckSize, this.puckSize * 2, this.puckSize * 2);\n    } else {\n      VirtualJoystick.vjCanvasContext.beginPath();\n      VirtualJoystick.vjCanvasContext.strokeStyle = this._joystickColor;\n      VirtualJoystick.vjCanvasContext.lineWidth = 2;\n      VirtualJoystick.vjCanvasContext.arc(this._joystickPointerPos.x, this._joystickPointerPos.y, this.puckSize, 0, Math.PI * 2, true);\n      VirtualJoystick.vjCanvasContext.stroke();\n      VirtualJoystick.vjCanvasContext.closePath();\n    }\n  };\n\n  VirtualJoystick.prototype._drawVirtualJoystick = function () {\n    var _this = this;\n\n    if (this.alwaysVisible) {\n      this._drawContainer();\n    }\n\n    if (this.pressed) {\n      this._touches.forEach(function (key, touch) {\n        if (touch.pointerId === _this._joystickPointerID) {\n          if (!_this.alwaysVisible) {\n            _this._drawContainer();\n          }\n\n          _this._drawPuck(); // store current pointer for next clear\n\n\n          _this._joystickPreviousPointerPos = _this._joystickPointerPos.clone();\n        } else {\n          VirtualJoystick.vjCanvasContext.clearRect(touch.prevX - 44, touch.prevY - 44, 88, 88);\n          VirtualJoystick.vjCanvasContext.beginPath();\n          VirtualJoystick.vjCanvasContext.fillStyle = \"white\";\n          VirtualJoystick.vjCanvasContext.beginPath();\n          VirtualJoystick.vjCanvasContext.strokeStyle = \"red\";\n          VirtualJoystick.vjCanvasContext.lineWidth = 6;\n          VirtualJoystick.vjCanvasContext.arc(touch.x, touch.y, 40, 0, Math.PI * 2, true);\n          VirtualJoystick.vjCanvasContext.stroke();\n          VirtualJoystick.vjCanvasContext.closePath();\n          touch.prevX = touch.x;\n          touch.prevY = touch.y;\n        }\n      });\n    }\n\n    requestAnimationFrame(function () {\n      _this._drawVirtualJoystick();\n    });\n  };\n  /**\r\n   * Release internal HTML canvas\r\n   */\n\n\n  VirtualJoystick.prototype.releaseCanvas = function () {\n    if (VirtualJoystick.Canvas) {\n      VirtualJoystick.Canvas.removeEventListener('pointerdown', this._onPointerDownHandlerRef);\n      VirtualJoystick.Canvas.removeEventListener('pointermove', this._onPointerMoveHandlerRef);\n      VirtualJoystick.Canvas.removeEventListener('pointerup', this._onPointerUpHandlerRef);\n      VirtualJoystick.Canvas.removeEventListener('pointerout', this._onPointerUpHandlerRef);\n      window.removeEventListener(\"resize\", this._onResize);\n      document.body.removeChild(VirtualJoystick.Canvas);\n      VirtualJoystick.Canvas = null;\n    }\n  }; // Used to draw the virtual joystick inside a 2D canvas on top of the WebGL rendering canvas\n\n\n  VirtualJoystick._globalJoystickIndex = 0;\n  VirtualJoystick._alwaysVisibleSticks = 0;\n  return VirtualJoystick;\n}();\n\nexport { VirtualJoystick };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/virtualJoystick.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Vector3, Vector2 } from \"../Maths/math.vector\";\r\nimport { StringDictionary } from \"./stringDictionary\";\r\n\r\n// Mainly based on these 2 articles :\r\n// Creating an universal virtual touch joystick working for all Touch models thanks to Hand.JS : http://blogs.msdn.com/b/davrous/archive/2013/02/22/creating-an-universal-virtual-touch-joystick-working-for-all-touch-models-thanks-to-hand-js.aspx\r\n// & on Seb Lee-Delisle original work: http://seb.ly/2011/04/multi-touch-game-controller-in-javascripthtml5-for-ipad/\r\n\r\n/**\r\n * Defines the potential axis of a Joystick\r\n */\r\nexport enum JoystickAxis {\r\n    /** X axis */\r\n    X,\r\n    /** Y axis */\r\n    Y,\r\n    /** Z axis */\r\n    Z\r\n}\r\n\r\n/**\r\n * Represents the different customization options available\r\n * for VirtualJoystick\r\n */\r\ninterface VirtualJoystickCustomizations {\r\n    /**\r\n     * Size of the joystick's puck\r\n     */\r\n    puckSize: number;\r\n    /**\r\n     * Size of the joystick's container\r\n     */\r\n    containerSize: number;\r\n    /**\r\n     * Color of the joystick && puck\r\n     */\r\n    color: string;\r\n    /**\r\n     * Image URL for the joystick's puck\r\n     */\r\n    puckImage?: string;\r\n    /**\r\n     * Image URL for the joystick's container\r\n     */\r\n    containerImage?: string;\r\n    /**\r\n     * Defines the unmoving position of the joystick container\r\n     */\r\n    position?: { x: number, y: number };\r\n    /**\r\n     * Defines whether or not the joystick container is always visible\r\n     */\r\n    alwaysVisible: boolean;\r\n    /**\r\n     * Defines whether or not to limit the movement of the puck to the joystick's container\r\n     */\r\n    limitToContainer: boolean;\r\n}\r\n\r\n/**\r\n * Class used to define virtual joystick (used in touch mode)\r\n */\r\nexport class VirtualJoystick {\r\n    /**\r\n     * Gets or sets a boolean indicating that left and right values must be inverted\r\n     */\r\n    public reverseLeftRight: boolean;\r\n    /**\r\n     * Gets or sets a boolean indicating that up and down values must be inverted\r\n     */\r\n    public reverseUpDown: boolean;\r\n    /**\r\n     * Gets the offset value for the position (ie. the change of the position value)\r\n     */\r\n    public deltaPosition: Vector3;\r\n    /**\r\n     * Gets a boolean indicating if the virtual joystick was pressed\r\n     */\r\n    public pressed: boolean;\r\n    /**\r\n     * Canvas the virtual joystick will render onto, default z-index of this is 5\r\n     */\r\n    public static Canvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * boolean indicating whether or not the joystick's puck's movement should be limited to the joystick's container area\r\n     */\r\n    public limitToContainer: boolean;\r\n\r\n    // Used to draw the virtual joystick inside a 2D canvas on top of the WebGL rendering canvas\r\n    private static _globalJoystickIndex: number = 0;\r\n    private static _alwaysVisibleSticks: number = 0;\r\n    private static vjCanvasContext: CanvasRenderingContext2D;\r\n    private static vjCanvasWidth: number;\r\n    private static vjCanvasHeight: number;\r\n    private static halfWidth: number;\r\n    private static _GetDefaultOptions(): VirtualJoystickCustomizations {\r\n        return {\r\n            puckSize: 40,\r\n            containerSize: 60,\r\n            color: \"cyan\",\r\n            puckImage: undefined,\r\n            containerImage: undefined,\r\n            position: undefined,\r\n            alwaysVisible: false,\r\n            limitToContainer: false,\r\n        };\r\n    }\r\n\r\n    private _action: () => any;\r\n    private _axisTargetedByLeftAndRight: JoystickAxis;\r\n    private _axisTargetedByUpAndDown: JoystickAxis;\r\n    private _joystickSensibility: number;\r\n    private _inversedSensibility: number;\r\n    private _joystickPointerID: number;\r\n    private _joystickColor: string;\r\n    private _joystickPointerPos: Vector2;\r\n    private _joystickPreviousPointerPos: Vector2;\r\n    private _joystickPointerStartPos: Vector2;\r\n    private _deltaJoystickVector: Vector2;\r\n    private _leftJoystick: boolean;\r\n    private _touches: StringDictionary<{ x: number, y: number, prevX: number, prevY: number } | PointerEvent>;\r\n    private _joystickPosition: Nullable<Vector2>;\r\n    private _alwaysVisible: boolean;\r\n    private _puckImage: HTMLImageElement;\r\n    private _containerImage: HTMLImageElement;\r\n\r\n    // size properties\r\n    private _joystickPuckSize: number;\r\n    private _joystickContainerSize: number;\r\n    private _clearPuckSize: number;\r\n    private _clearContainerSize: number;\r\n    private _clearPuckSizeOffset: number;\r\n    private _clearContainerSizeOffset: number;\r\n\r\n    private _onPointerDownHandlerRef: (e: PointerEvent) => any;\r\n    private _onPointerMoveHandlerRef: (e: PointerEvent) => any;\r\n    private _onPointerUpHandlerRef: (e: PointerEvent) => any;\r\n    private _onResize: (e: any) => any;\r\n\r\n    /**\r\n     * Creates a new virtual joystick\r\n     * @param leftJoystick defines that the joystick is for left hand (false by default)\r\n     * @param customizations Defines the options we want to customize the VirtualJoystick\r\n     */\r\n    constructor(leftJoystick?: boolean, customizations?: Partial<VirtualJoystickCustomizations>) {\r\n        const options = {\r\n            ...VirtualJoystick._GetDefaultOptions(),\r\n            ...customizations\r\n        };\r\n\r\n        if (leftJoystick) {\r\n            this._leftJoystick = true;\r\n        }\r\n        else {\r\n            this._leftJoystick = false;\r\n        }\r\n\r\n        VirtualJoystick._globalJoystickIndex++;\r\n\r\n        // By default left & right arrow keys are moving the X\r\n        // and up & down keys are moving the Y\r\n        this._axisTargetedByLeftAndRight = JoystickAxis.X;\r\n        this._axisTargetedByUpAndDown = JoystickAxis.Y;\r\n\r\n        this.reverseLeftRight = false;\r\n        this.reverseUpDown = false;\r\n\r\n        // collections of pointers\r\n        this._touches = new StringDictionary<{ x: number, y: number, prevX: number, prevY: number } | PointerEvent>();\r\n        this.deltaPosition = Vector3.Zero();\r\n\r\n        this._joystickSensibility = 25;\r\n        this._inversedSensibility = 1 / (this._joystickSensibility / 1000);\r\n\r\n        this._onResize = (evt) => {\r\n            VirtualJoystick.vjCanvasWidth = window.innerWidth;\r\n            VirtualJoystick.vjCanvasHeight = window.innerHeight;\r\n            if (VirtualJoystick.Canvas) {\r\n                VirtualJoystick.Canvas.width = VirtualJoystick.vjCanvasWidth;\r\n                VirtualJoystick.Canvas.height = VirtualJoystick.vjCanvasHeight;\r\n            }\r\n            VirtualJoystick.halfWidth = VirtualJoystick.vjCanvasWidth / 2;\r\n        };\r\n\r\n        // injecting a canvas element on top of the canvas 3D game\r\n        if (!VirtualJoystick.Canvas) {\r\n            window.addEventListener(\"resize\", this._onResize, false);\r\n            VirtualJoystick.Canvas = document.createElement(\"canvas\");\r\n            VirtualJoystick.vjCanvasWidth = window.innerWidth;\r\n            VirtualJoystick.vjCanvasHeight = window.innerHeight;\r\n            VirtualJoystick.Canvas.width = window.innerWidth;\r\n            VirtualJoystick.Canvas.height = window.innerHeight;\r\n            VirtualJoystick.Canvas.style.width = \"100%\";\r\n            VirtualJoystick.Canvas.style.height = \"100%\";\r\n            VirtualJoystick.Canvas.style.position = \"absolute\";\r\n            VirtualJoystick.Canvas.style.backgroundColor = \"transparent\";\r\n            VirtualJoystick.Canvas.style.top = \"0px\";\r\n            VirtualJoystick.Canvas.style.left = \"0px\";\r\n            VirtualJoystick.Canvas.style.zIndex = \"5\";\r\n            (VirtualJoystick.Canvas.style as any).msTouchAction = \"none\";\r\n            VirtualJoystick.Canvas.style.touchAction = \"none\";  // fix https://forum.babylonjs.com/t/virtualjoystick-needs-to-set-style-touch-action-none-explicitly/9562\r\n            // Support for jQuery PEP polyfill\r\n            VirtualJoystick.Canvas.setAttribute(\"touch-action\", \"none\");\r\n            let context = VirtualJoystick.Canvas.getContext('2d');\r\n\r\n            if (!context) {\r\n                throw new Error(\"Unable to create canvas for virtual joystick\");\r\n            }\r\n\r\n            VirtualJoystick.vjCanvasContext = context;\r\n            VirtualJoystick.vjCanvasContext.strokeStyle = \"#ffffff\";\r\n            VirtualJoystick.vjCanvasContext.lineWidth = 2;\r\n            document.body.appendChild(VirtualJoystick.Canvas);\r\n        }\r\n        VirtualJoystick.halfWidth = VirtualJoystick.Canvas.width / 2;\r\n        this.pressed = false;\r\n        this.limitToContainer = options.limitToContainer;\r\n\r\n        // default joystick color\r\n        this._joystickColor = options.color;\r\n\r\n        // default joystick size\r\n        this.containerSize = options.containerSize;\r\n        this.puckSize = options.puckSize;\r\n\r\n        if (options.position) {\r\n            this.setPosition(options.position.x, options.position.y);\r\n        }\r\n        if (options.puckImage) {\r\n            this.setPuckImage(options.puckImage);\r\n        }\r\n        if (options.containerImage) {\r\n            this.setContainerImage(options.containerImage);\r\n        }\r\n        if (options.alwaysVisible) {\r\n            VirtualJoystick._alwaysVisibleSticks++;\r\n        }\r\n\r\n        // must come after position potentially set\r\n        this.alwaysVisible = options.alwaysVisible;\r\n\r\n        this._joystickPointerID = -1;\r\n        // current joystick position\r\n        this._joystickPointerPos = new Vector2(0, 0);\r\n        this._joystickPreviousPointerPos = new Vector2(0, 0);\r\n        // origin joystick position\r\n        this._joystickPointerStartPos = new Vector2(0, 0);\r\n        this._deltaJoystickVector = new Vector2(0, 0);\r\n\r\n        this._onPointerDownHandlerRef = (evt) => {\r\n            this._onPointerDown(evt);\r\n        };\r\n        this._onPointerMoveHandlerRef = (evt) => {\r\n            this._onPointerMove(evt);\r\n        };\r\n        this._onPointerUpHandlerRef = (evt) => {\r\n            this._onPointerUp(evt);\r\n        };\r\n\r\n        VirtualJoystick.Canvas.addEventListener('pointerdown', this._onPointerDownHandlerRef, false);\r\n        VirtualJoystick.Canvas.addEventListener('pointermove', this._onPointerMoveHandlerRef, false);\r\n        VirtualJoystick.Canvas.addEventListener('pointerup', this._onPointerUpHandlerRef, false);\r\n        VirtualJoystick.Canvas.addEventListener('pointerout', this._onPointerUpHandlerRef, false);\r\n        VirtualJoystick.Canvas.addEventListener(\"contextmenu\", (evt) => {\r\n            evt.preventDefault();    // Disables system menu\r\n        }, false);\r\n        requestAnimationFrame(() => { this._drawVirtualJoystick(); });\r\n    }\r\n\r\n    /**\r\n     * Defines joystick sensibility (ie. the ratio beteen a physical move and virtual joystick position change)\r\n     * @param newJoystickSensibility defines the new sensibility\r\n     */\r\n    public setJoystickSensibility(newJoystickSensibility: number) {\r\n        this._joystickSensibility = newJoystickSensibility;\r\n        this._inversedSensibility = 1 / (this._joystickSensibility / 1000);\r\n    }\r\n\r\n    private _onPointerDown(e: PointerEvent) {\r\n        var positionOnScreenCondition: boolean;\r\n\r\n        e.preventDefault();\r\n\r\n        if (this._leftJoystick === true) {\r\n            positionOnScreenCondition = (e.clientX < VirtualJoystick.halfWidth);\r\n        }\r\n        else {\r\n            positionOnScreenCondition = (e.clientX > VirtualJoystick.halfWidth);\r\n        }\r\n\r\n        if (positionOnScreenCondition && this._joystickPointerID < 0) {\r\n            // First contact will be dedicated to the virtual joystick\r\n            this._joystickPointerID = e.pointerId;\r\n\r\n            if (this._joystickPosition) {\r\n                this._joystickPointerStartPos = this._joystickPosition.clone();\r\n                this._joystickPointerPos = this._joystickPosition.clone();\r\n                this._joystickPreviousPointerPos = this._joystickPosition.clone();\r\n\r\n                // in case the user only clicks down && doesn't move:\r\n                // this ensures the delta is properly set\r\n                this._onPointerMove(e);\r\n            } else {\r\n                this._joystickPointerStartPos.x = e.clientX;\r\n                this._joystickPointerStartPos.y = e.clientY;\r\n                this._joystickPointerPos = this._joystickPointerStartPos.clone();\r\n                this._joystickPreviousPointerPos = this._joystickPointerStartPos.clone();\r\n            }\r\n\r\n            this._deltaJoystickVector.x = 0;\r\n            this._deltaJoystickVector.y = 0;\r\n            this.pressed = true;\r\n            this._touches.add(e.pointerId.toString(), e);\r\n        }\r\n        else {\r\n            // You can only trigger the action buttons with a joystick declared\r\n            if (VirtualJoystick._globalJoystickIndex < 2 && this._action) {\r\n                this._action();\r\n                this._touches.add(e.pointerId.toString(), { x: e.clientX, y: e.clientY, prevX: e.clientX, prevY: e.clientY });\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onPointerMove(e: PointerEvent) {\r\n        // If the current pointer is the one associated to the joystick (first touch contact)\r\n        if (this._joystickPointerID == e.pointerId) {\r\n            // limit to container if need be\r\n            if (this.limitToContainer) {\r\n                let vector = new Vector2(e.clientX - this._joystickPointerStartPos.x, e.clientY - this._joystickPointerStartPos.y);\r\n                let distance = vector.length();\r\n\r\n                if (distance > this.containerSize) {\r\n                    vector.scaleInPlace(this.containerSize / distance);\r\n                }\r\n\r\n                this._joystickPointerPos.x = this._joystickPointerStartPos.x + vector.x;\r\n                this._joystickPointerPos.y = this._joystickPointerStartPos.y + vector.y;\r\n            } else {\r\n                this._joystickPointerPos.x = e.clientX;\r\n                this._joystickPointerPos.y = e.clientY;\r\n            }\r\n\r\n            // create delta vector\r\n            this._deltaJoystickVector = this._joystickPointerPos.clone();\r\n            this._deltaJoystickVector = this._deltaJoystickVector.subtract(this._joystickPointerStartPos);\r\n\r\n            // if a joystick is always visible, there will be clipping issues if\r\n            // you drag the puck from one over the container of the other\r\n            if (0 < VirtualJoystick._alwaysVisibleSticks) {\r\n                if (this._leftJoystick) {\r\n                    this._joystickPointerPos.x = Math.min(VirtualJoystick.halfWidth, this._joystickPointerPos.x);\r\n                } else {\r\n                    this._joystickPointerPos.x = Math.max(VirtualJoystick.halfWidth, this._joystickPointerPos.x);\r\n                }\r\n            }\r\n\r\n            var directionLeftRight = this.reverseLeftRight ? -1 : 1;\r\n            var deltaJoystickX = directionLeftRight * this._deltaJoystickVector.x / this._inversedSensibility;\r\n            switch (this._axisTargetedByLeftAndRight) {\r\n                case JoystickAxis.X:\r\n                    this.deltaPosition.x = Math.min(1, Math.max(-1, deltaJoystickX));\r\n                    break;\r\n                case JoystickAxis.Y:\r\n                    this.deltaPosition.y = Math.min(1, Math.max(-1, deltaJoystickX));\r\n                    break;\r\n                case JoystickAxis.Z:\r\n                    this.deltaPosition.z = Math.min(1, Math.max(-1, deltaJoystickX));\r\n                    break;\r\n            }\r\n            var directionUpDown = this.reverseUpDown ? 1 : -1;\r\n            var deltaJoystickY = directionUpDown * this._deltaJoystickVector.y / this._inversedSensibility;\r\n            switch (this._axisTargetedByUpAndDown) {\r\n                case JoystickAxis.X:\r\n                    this.deltaPosition.x = Math.min(1, Math.max(-1, deltaJoystickY));\r\n                    break;\r\n                case JoystickAxis.Y:\r\n                    this.deltaPosition.y = Math.min(1, Math.max(-1, deltaJoystickY));\r\n                    break;\r\n                case JoystickAxis.Z:\r\n                    this.deltaPosition.z = Math.min(1, Math.max(-1, deltaJoystickY));\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            let data = this._touches.get(e.pointerId.toString());\r\n            if (data) {\r\n                (data as any).x = e.clientX;\r\n                (data as any).y = e.clientY;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onPointerUp(e: PointerEvent) {\r\n        if (this._joystickPointerID == e.pointerId) {\r\n            this._clearPreviousDraw();\r\n\r\n            this._joystickPointerID = -1;\r\n            this.pressed = false;\r\n        }\r\n        else {\r\n            var touch = <{ x: number, y: number, prevX: number, prevY: number }>this._touches.get(e.pointerId.toString());\r\n            if (touch) {\r\n                VirtualJoystick.vjCanvasContext.clearRect(touch.prevX - 44, touch.prevY - 44, 88, 88);\r\n            }\r\n        }\r\n        this._deltaJoystickVector.x = 0;\r\n        this._deltaJoystickVector.y = 0;\r\n\r\n        this._touches.remove(e.pointerId.toString());\r\n    }\r\n\r\n    /**\r\n     * Change the color of the virtual joystick\r\n     * @param newColor a string that must be a CSS color value (like \"red\") or the hexa value (like \"#FF0000\")\r\n     */\r\n    public setJoystickColor(newColor: string) {\r\n        this._joystickColor = newColor;\r\n    }\r\n\r\n    /**\r\n     * Size of the joystick's container\r\n     */\r\n    public set containerSize(newSize: number) {\r\n        this._joystickContainerSize = newSize;\r\n        this._clearContainerSize = ~~(this._joystickContainerSize * 2.1);\r\n        this._clearContainerSizeOffset = ~~(this._clearContainerSize / 2);\r\n    }\r\n    public get containerSize() {\r\n        return this._joystickContainerSize;\r\n    }\r\n\r\n    /**\r\n     * Size of the joystick's puck\r\n     */\r\n    public set puckSize(newSize: number) {\r\n        this._joystickPuckSize = newSize;\r\n        this._clearPuckSize = ~~(this._joystickPuckSize * 2.1);\r\n        this._clearPuckSizeOffset = ~~(this._clearPuckSize / 2);\r\n    }\r\n    public get puckSize() {\r\n        return this._joystickPuckSize;\r\n    }\r\n\r\n    /**\r\n     * Clears the set position of the joystick\r\n     */\r\n    public clearPosition() {\r\n        this.alwaysVisible = false;\r\n\r\n        this._joystickPosition = null;\r\n    }\r\n\r\n    /**\r\n     * Defines whether or not the joystick container is always visible\r\n     */\r\n    public set alwaysVisible(value: boolean) {\r\n        if (this._alwaysVisible === value) {\r\n            return;\r\n        }\r\n\r\n        if (value && this._joystickPosition) {\r\n            VirtualJoystick._alwaysVisibleSticks++;\r\n\r\n            this._alwaysVisible = true;\r\n        } else {\r\n            VirtualJoystick._alwaysVisibleSticks--;\r\n\r\n            this._alwaysVisible = false;\r\n        }\r\n    }\r\n    public get alwaysVisible() {\r\n        return this._alwaysVisible;\r\n    }\r\n\r\n    /**\r\n    * Sets the constant position of the Joystick container\r\n    * @param x X axis coordinate\r\n    * @param y Y axis coordinate\r\n    */\r\n    public setPosition(x: number, y: number) {\r\n        // just in case position is moved while the container is visible\r\n        if (this._joystickPointerStartPos) {\r\n            this._clearPreviousDraw();\r\n        }\r\n\r\n        this._joystickPosition = new Vector2(x, y);\r\n    }\r\n\r\n    /**\r\n     * Defines a callback to call when the joystick is touched\r\n     * @param action defines the callback\r\n     */\r\n    public setActionOnTouch(action: () => any) {\r\n        this._action = action;\r\n    }\r\n\r\n    /**\r\n     * Defines which axis you'd like to control for left & right\r\n     * @param axis defines the axis to use\r\n     */\r\n    public setAxisForLeftRight(axis: JoystickAxis) {\r\n        switch (axis) {\r\n            case JoystickAxis.X:\r\n            case JoystickAxis.Y:\r\n            case JoystickAxis.Z:\r\n                this._axisTargetedByLeftAndRight = axis;\r\n                break;\r\n            default:\r\n                this._axisTargetedByLeftAndRight = JoystickAxis.X;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines which axis you'd like to control for up & down\r\n     * @param axis defines the axis to use\r\n     */\r\n    public setAxisForUpDown(axis: JoystickAxis) {\r\n        switch (axis) {\r\n            case JoystickAxis.X:\r\n            case JoystickAxis.Y:\r\n            case JoystickAxis.Z:\r\n                this._axisTargetedByUpAndDown = axis;\r\n                break;\r\n            default:\r\n                this._axisTargetedByUpAndDown = JoystickAxis.Y;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the canvas from the previous puck / container draw\r\n     */\r\n    private _clearPreviousDraw() {\r\n        var jp = this._joystickPosition || this._joystickPointerStartPos;\r\n\r\n        // clear container pixels\r\n        VirtualJoystick.vjCanvasContext.clearRect(\r\n            jp.x - this._clearContainerSizeOffset,\r\n            jp.y - this._clearContainerSizeOffset,\r\n            this._clearContainerSize,\r\n            this._clearContainerSize\r\n        );\r\n\r\n        // clear puck pixels\r\n        VirtualJoystick.vjCanvasContext.clearRect(\r\n            this._joystickPreviousPointerPos.x - this._clearPuckSizeOffset,\r\n            this._joystickPreviousPointerPos.y - this._clearPuckSizeOffset,\r\n            this._clearPuckSize,\r\n            this._clearPuckSize\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Loads `urlPath` to be used for the container's image\r\n     * @param urlPath defines the urlPath of an image to use\r\n     */\r\n    public setContainerImage(urlPath: string) {\r\n        var image = new Image();\r\n        image.src = urlPath;\r\n\r\n        image.onload = () => this._containerImage = image;\r\n    }\r\n\r\n    /**\r\n     * Loads `urlPath` to be used for the puck's image\r\n     * @param urlPath defines the urlPath of an image to use\r\n     */\r\n    public setPuckImage(urlPath: string) {\r\n        var image = new Image();\r\n        image.src = urlPath;\r\n\r\n        image.onload = () => this._puckImage = image;\r\n    }\r\n\r\n    /**\r\n     * Draws the Virtual Joystick's container\r\n     */\r\n    private _drawContainer() {\r\n        var jp = this._joystickPosition || this._joystickPointerStartPos;\r\n\r\n        this._clearPreviousDraw();\r\n\r\n        if (this._containerImage) {\r\n            VirtualJoystick.vjCanvasContext.drawImage(\r\n                this._containerImage,\r\n                jp.x - this.containerSize,\r\n                jp.y - this.containerSize,\r\n                this.containerSize * 2,\r\n                this.containerSize * 2\r\n            );\r\n        } else {\r\n            // outer container\r\n            VirtualJoystick.vjCanvasContext.beginPath();\r\n            VirtualJoystick.vjCanvasContext.strokeStyle = this._joystickColor;\r\n            VirtualJoystick.vjCanvasContext.lineWidth = 2;\r\n            VirtualJoystick.vjCanvasContext.arc(jp.x, jp.y, this.containerSize, 0, Math.PI * 2, true);\r\n            VirtualJoystick.vjCanvasContext.stroke();\r\n            VirtualJoystick.vjCanvasContext.closePath();\r\n\r\n            // inner container\r\n            VirtualJoystick.vjCanvasContext.beginPath();\r\n            VirtualJoystick.vjCanvasContext.lineWidth = 6;\r\n            VirtualJoystick.vjCanvasContext.strokeStyle = this._joystickColor;\r\n            VirtualJoystick.vjCanvasContext.arc(jp.x, jp.y, this.puckSize, 0, Math.PI * 2, true);\r\n            VirtualJoystick.vjCanvasContext.stroke();\r\n            VirtualJoystick.vjCanvasContext.closePath();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the Virtual Joystick's puck\r\n     */\r\n    private _drawPuck() {\r\n        if (this._puckImage) {\r\n            VirtualJoystick.vjCanvasContext.drawImage(\r\n                this._puckImage,\r\n                this._joystickPointerPos.x - this.puckSize,\r\n                this._joystickPointerPos.y - this.puckSize,\r\n                this.puckSize * 2,\r\n                this.puckSize * 2\r\n            );\r\n        } else {\r\n            VirtualJoystick.vjCanvasContext.beginPath();\r\n            VirtualJoystick.vjCanvasContext.strokeStyle = this._joystickColor;\r\n            VirtualJoystick.vjCanvasContext.lineWidth = 2;\r\n            VirtualJoystick.vjCanvasContext.arc(this._joystickPointerPos.x, this._joystickPointerPos.y, this.puckSize, 0, Math.PI * 2, true);\r\n            VirtualJoystick.vjCanvasContext.stroke();\r\n            VirtualJoystick.vjCanvasContext.closePath();\r\n        }\r\n    }\r\n\r\n    private _drawVirtualJoystick() {\r\n        if (this.alwaysVisible) {\r\n            this._drawContainer();\r\n        }\r\n\r\n        if (this.pressed) {\r\n            this._touches.forEach((key, touch) => {\r\n                if ((<PointerEvent>touch).pointerId === this._joystickPointerID) {\r\n                    if (! this.alwaysVisible) {\r\n                        this._drawContainer();\r\n                    }\r\n\r\n                    this._drawPuck();\r\n\r\n                    // store current pointer for next clear\r\n                    this._joystickPreviousPointerPos = this._joystickPointerPos.clone();\r\n                }\r\n                else {\r\n                    VirtualJoystick.vjCanvasContext.clearRect((<any>touch).prevX - 44, (<any>touch).prevY - 44, 88, 88);\r\n                    VirtualJoystick.vjCanvasContext.beginPath();\r\n                    VirtualJoystick.vjCanvasContext.fillStyle = \"white\";\r\n                    VirtualJoystick.vjCanvasContext.beginPath();\r\n                    VirtualJoystick.vjCanvasContext.strokeStyle = \"red\";\r\n                    VirtualJoystick.vjCanvasContext.lineWidth = 6;\r\n                    VirtualJoystick.vjCanvasContext.arc(touch.x, touch.y, 40, 0, Math.PI * 2, true);\r\n                    VirtualJoystick.vjCanvasContext.stroke();\r\n                    VirtualJoystick.vjCanvasContext.closePath();\r\n                    (<any>touch).prevX = touch.x;\r\n                    (<any>touch).prevY = touch.y;\r\n                }\r\n            });\r\n        }\r\n        requestAnimationFrame(() => { this._drawVirtualJoystick(); });\r\n    }\r\n\r\n    /**\r\n     * Release internal HTML canvas\r\n     */\r\n    public releaseCanvas() {\r\n        if (VirtualJoystick.Canvas) {\r\n            VirtualJoystick.Canvas.removeEventListener('pointerdown', this._onPointerDownHandlerRef);\r\n            VirtualJoystick.Canvas.removeEventListener('pointermove', this._onPointerMoveHandlerRef);\r\n            VirtualJoystick.Canvas.removeEventListener('pointerup', this._onPointerUpHandlerRef);\r\n            VirtualJoystick.Canvas.removeEventListener('pointerout', this._onPointerUpHandlerRef);\r\n            window.removeEventListener(\"resize\", this._onResize);\r\n            document.body.removeChild(VirtualJoystick.Canvas);\r\n            VirtualJoystick.Canvas = null;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}