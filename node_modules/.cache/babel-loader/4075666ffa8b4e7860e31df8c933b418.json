{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointCompatibilityStates } from './nodeMaterialBlockConnectionPoint';\n/**\r\n * Defines a connection point to be used for points with a custom object type\r\n */\n\nvar NodeMaterialConnectionPointCustomObject =\n/** @class */\nfunction (_super) {\n  __extends(NodeMaterialConnectionPointCustomObject, _super);\n  /**\r\n   * Creates a new connection point\r\n   * @param name defines the connection point name\r\n   * @param ownerBlock defines the block hosting this connection point\r\n   * @param direction defines the direction of the connection point\r\n   */\n\n\n  function NodeMaterialConnectionPointCustomObject(name, ownerBlock, direction, _blockType, _blockName, _nameForCheking) {\n    var _this = _super.call(this, name, ownerBlock, direction) || this;\n\n    _this._blockType = _blockType;\n    _this._blockName = _blockName;\n    _this._nameForCheking = _nameForCheking;\n\n    if (!_this._nameForCheking) {\n      _this._nameForCheking = name;\n    }\n\n    _this.needDualDirectionValidation = true;\n    return _this;\n  }\n  /**\r\n   * Gets a number indicating if the current point can be connected to another point\r\n   * @param connectionPoint defines the other connection point\r\n   * @returns a number defining the compatibility state\r\n   */\n\n\n  NodeMaterialConnectionPointCustomObject.prototype.checkCompatibilityState = function (connectionPoint) {\n    return connectionPoint instanceof NodeMaterialConnectionPointCustomObject && connectionPoint.name === this._nameForCheking ? NodeMaterialConnectionPointCompatibilityStates.Compatible : NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\n  };\n  /**\r\n   * Creates a block suitable to be used as an input for this input point.\r\n   * If null is returned, a block based on the point type will be created.\r\n   * @returns The returned string parameter is the name of the output point of NodeMaterialBlock (first parameter of the returned array) that can be connected to the input\r\n   */\n\n\n  NodeMaterialConnectionPointCustomObject.prototype.createCustomInputBlock = function () {\n    return [new this._blockType(this._blockName), this.name];\n  };\n\n  return NodeMaterialConnectionPointCustomObject;\n}(NodeMaterialConnectionPoint);\n\nexport { NodeMaterialConnectionPointCustomObject };","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/Node/nodeMaterialConnectionPointCustomObject.ts"],"names":[],"mappings":";AACA,SAAS,2BAAT,EAA4E,8CAA5E,QAAkI,oCAAlI;AAGA;;;;AAGA,IAAA,uCAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0F,EAAA,SAAA,CAAA,uCAAA,EAAA,MAAA,CAAA;AAEtF;;;;;;;;AAMA,WAAA,uCAAA,CAAmB,IAAnB,EAAiC,UAAjC,EAAgE,SAAhE,EACgB,UADhB,EAC+D,UAD/D,EAC2F,eAD3F,EACmH;AADnH,QAAA,KAAA,GAEI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,UAAZ,EAAwB,SAAxB,KAAkC,IAFtC;;AACgB,IAAA,KAAA,CAAA,UAAA,GAAA,UAAA;AAA+C,IAAA,KAAA,CAAA,UAAA,GAAA,UAAA;AAA4B,IAAA,KAAA,CAAA,eAAA,GAAA,eAAA;;AAGvF,QAAI,CAAC,KAAI,CAAC,eAAV,EAA2B;AACvB,MAAA,KAAI,CAAC,eAAL,GAAuB,IAAvB;AACH;;AAED,IAAA,KAAI,CAAC,2BAAL,GAAmC,IAAnC;;AACH;AAED;;;;;;;AAKO,EAAA,uCAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,UAA+B,eAA/B,EAA2E;AACvE,WAAO,eAAe,YAAY,uCAA3B,IAAsE,eAAe,CAAC,IAAhB,KAAyB,KAAK,eAApG,GACC,8CAA8C,CAAC,UADhD,GAC6D,8CAA8C,CAAC,gBADnH;AAEH,GAHM;AAKP;;;;;;;AAKO,EAAA,uCAAA,CAAA,SAAA,CAAA,sBAAA,GAAP,YAAA;AACI,WAAO,CAAC,IAAI,KAAK,UAAT,CAAoB,KAAK,UAAzB,CAAD,EAAuC,KAAK,IAA5C,CAAP;AACH,GAFM;;AAIX,SAAA,uCAAA;AAAC,CAtCD,CAA0F,2BAA1F,CAAA","sourcesContent":["import { NodeMaterialBlock } from './nodeMaterialBlock';\r\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointDirection, NodeMaterialConnectionPointCompatibilityStates } from './nodeMaterialBlockConnectionPoint';\r\nimport { Nullable } from '../../types';\r\n\r\n/**\r\n * Defines a connection point to be used for points with a custom object type\r\n */\r\nexport class NodeMaterialConnectionPointCustomObject<T extends NodeMaterialBlock> extends NodeMaterialConnectionPoint {\r\n\r\n    /**\r\n     * Creates a new connection point\r\n     * @param name defines the connection point name\r\n     * @param ownerBlock defines the block hosting this connection point\r\n     * @param direction defines the direction of the connection point\r\n     */\r\n    public constructor(name: string, ownerBlock: NodeMaterialBlock, direction: NodeMaterialConnectionPointDirection,\r\n            private _blockType: new (...args: any[]) => T, private _blockName: string, private _nameForCheking?: string) {\r\n        super(name, ownerBlock, direction);\r\n\r\n        if (!this._nameForCheking) {\r\n            this._nameForCheking = name;\r\n        }\r\n\r\n        this.needDualDirectionValidation = true;\r\n    }\r\n\r\n    /**\r\n     * Gets a number indicating if the current point can be connected to another point\r\n     * @param connectionPoint defines the other connection point\r\n     * @returns a number defining the compatibility state\r\n     */\r\n    public checkCompatibilityState(connectionPoint: NodeMaterialConnectionPoint): NodeMaterialConnectionPointCompatibilityStates {\r\n        return connectionPoint instanceof NodeMaterialConnectionPointCustomObject && connectionPoint.name === this._nameForCheking ?\r\n                NodeMaterialConnectionPointCompatibilityStates.Compatible : NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\r\n    }\r\n\r\n    /**\r\n     * Creates a block suitable to be used as an input for this input point.\r\n     * If null is returned, a block based on the point type will be created.\r\n     * @returns The returned string parameter is the name of the output point of NodeMaterialBlock (first parameter of the returned array) that can be connected to the input\r\n     */\r\n    public createCustomInputBlock(): Nullable<[NodeMaterialBlock, string]> {\r\n        return [new this._blockType(this._blockName), this.name];\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}