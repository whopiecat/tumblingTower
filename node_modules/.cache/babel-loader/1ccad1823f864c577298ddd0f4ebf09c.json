{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport { Engine } from \"../Engines/engine\";\nimport \"../Shaders/pass.fragment\";\nimport \"../Shaders/passCube.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { SerializationHelper } from '../Misc/decorators';\n/**\r\n * PassPostProcess which produces an output the same as it's input\r\n */\n\nvar PassPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(PassPostProcess, _super);\n  /**\r\n   * Creates the PassPostProcess\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType The type of texture to be used when performing the post processing.\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function PassPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    return _super.call(this, name, \"pass\", null, null, options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation) || this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"PassPostProcess\" string\r\n   */\n\n\n  PassPostProcess.prototype.getClassName = function () {\n    return \"PassPostProcess\";\n  };\n  /** @hidden */\n\n\n  PassPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new PassPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  return PassPostProcess;\n}(PostProcess);\n\nexport { PassPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.PassPostProcess\"] = PassPostProcess;\n/**\r\n * PassCubePostProcess which produces an output the same as it's input (which must be a cube texture)\r\n */\n\nvar PassCubePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(PassCubePostProcess, _super);\n  /**\r\n   * Creates the PassCubePostProcess\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType The type of texture to be used when performing the post processing.\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function PassCubePostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"passCube\", null, null, options, camera, samplingMode, engine, reusable, \"#define POSITIVEX\", textureType, undefined, null, blockCompilation) || this;\n\n    _this._face = 0;\n    return _this;\n  }\n\n  Object.defineProperty(PassCubePostProcess.prototype, \"face\", {\n    /**\r\n     * Gets or sets the cube face to display.\r\n     *  * 0 is +X\r\n     *  * 1 is -X\r\n     *  * 2 is +Y\r\n     *  * 3 is -Y\r\n     *  * 4 is +Z\r\n     *  * 5 is -Z\r\n     */\n    get: function () {\n      return this._face;\n    },\n    set: function (value) {\n      if (value < 0 || value > 5) {\n        return;\n      }\n\n      this._face = value;\n\n      switch (this._face) {\n        case 0:\n          this.updateEffect(\"#define POSITIVEX\");\n          break;\n\n        case 1:\n          this.updateEffect(\"#define NEGATIVEX\");\n          break;\n\n        case 2:\n          this.updateEffect(\"#define POSITIVEY\");\n          break;\n\n        case 3:\n          this.updateEffect(\"#define NEGATIVEY\");\n          break;\n\n        case 4:\n          this.updateEffect(\"#define POSITIVEZ\");\n          break;\n\n        case 5:\n          this.updateEffect(\"#define NEGATIVEZ\");\n          break;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"PassCubePostProcess\" string\r\n   */\n\n  PassCubePostProcess.prototype.getClassName = function () {\n    return \"PassCubePostProcess\";\n  };\n  /** @hidden */\n\n\n  PassCubePostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new PassCubePostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  return PassCubePostProcess;\n}(PostProcess);\n\nexport { PassCubePostProcess };\n\nEngine._RescalePostProcessFactory = function (engine) {\n  return new PassPostProcess(\"rescale\", 1, null, 2, engine, false, 0);\n};","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/passPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\n\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/pass.fragment\";\r\nimport \"../Shaders/passCube.fragment\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { SerializationHelper } from '../Misc/decorators';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * PassPostProcess which produces an output the same as it's input\r\n */\r\nexport class PassPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"PassPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"PassPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates the PassPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType The type of texture to be used when performing the post processing.\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Nullable<Camera> = null, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0, blockCompilation = false) {\r\n        super(name, \"pass\", null, null, options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation);\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(() => {\r\n            return new PassPostProcess(\r\n                parsedPostProcess.name,\r\n                parsedPostProcess.options, targetCamera,\r\n                parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.reusable);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.PassPostProcess\"] = PassPostProcess;\r\n\r\n/**\r\n * PassCubePostProcess which produces an output the same as it's input (which must be a cube texture)\r\n */\r\nexport class PassCubePostProcess extends PostProcess {\r\n    private _face = 0;\r\n\r\n    /**\r\n     * Gets or sets the cube face to display.\r\n     *  * 0 is +X\r\n     *  * 1 is -X\r\n     *  * 2 is +Y\r\n     *  * 3 is -Y\r\n     *  * 4 is +Z\r\n     *  * 5 is -Z\r\n     */\r\n    public get face(): number {\r\n        return this._face;\r\n    }\r\n\r\n    public set face(value: number) {\r\n        if (value < 0 || value > 5) {\r\n            return;\r\n        }\r\n\r\n        this._face = value;\r\n        switch (this._face) {\r\n            case 0:\r\n                this.updateEffect(\"#define POSITIVEX\");\r\n                break;\r\n            case 1:\r\n                this.updateEffect(\"#define NEGATIVEX\");\r\n                break;\r\n            case 2:\r\n                this.updateEffect(\"#define POSITIVEY\");\r\n                break;\r\n            case 3:\r\n                this.updateEffect(\"#define NEGATIVEY\");\r\n                break;\r\n            case 4:\r\n                this.updateEffect(\"#define POSITIVEZ\");\r\n                break;\r\n            case 5:\r\n                this.updateEffect(\"#define NEGATIVEZ\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"PassCubePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"PassCubePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates the PassCubePostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType The type of texture to be used when performing the post processing.\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Nullable<Camera> = null, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0, blockCompilation = false) {\r\n        super(name, \"passCube\", null, null, options, camera, samplingMode, engine, reusable, \"#define POSITIVEX\", textureType, undefined, null, blockCompilation);\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(() => {\r\n            return new PassCubePostProcess(\r\n                parsedPostProcess.name,\r\n                parsedPostProcess.options, targetCamera,\r\n                parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.reusable);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\nEngine._RescalePostProcessFactory = (engine: Engine) => {\r\n    return new PassPostProcess(\"rescale\", 1, null, 2, engine, false, 0);\r\n};"],"sourceRoot":""},"metadata":{},"sourceType":"module"}