{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { BaseCameraMouseWheelInput } from \"../../Cameras/Inputs/BaseCameraMouseWheelInput\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\nimport { Coordinate } from \"../../Maths/math.axis\";\n\nvar _CameraProperty;\n\n(function (_CameraProperty) {\n  _CameraProperty[_CameraProperty[\"MoveRelative\"] = 0] = \"MoveRelative\";\n  _CameraProperty[_CameraProperty[\"RotateRelative\"] = 1] = \"RotateRelative\";\n  _CameraProperty[_CameraProperty[\"MoveScene\"] = 2] = \"MoveScene\";\n})(_CameraProperty || (_CameraProperty = {}));\n/**\r\n * Manage the mouse wheel inputs to control a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\n\nvar FreeCameraMouseWheelInput =\n/** @class */\nfunction (_super) {\n  __extends(FreeCameraMouseWheelInput, _super);\n\n  function FreeCameraMouseWheelInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._moveRelative = Vector3.Zero();\n    _this._rotateRelative = Vector3.Zero();\n    _this._moveScene = Vector3.Zero();\n    /**\r\n     * These are set to the desired default behaviour.\r\n     */\n\n    _this._wheelXAction = _CameraProperty.MoveRelative;\n    _this._wheelXActionCoordinate = Coordinate.X;\n    _this._wheelYAction = _CameraProperty.MoveRelative;\n    _this._wheelYActionCoordinate = Coordinate.Z;\n    _this._wheelZAction = null;\n    _this._wheelZActionCoordinate = null;\n    return _this;\n  }\n  /**\r\n   * Gets the class name of the current input.\r\n   * @returns the class name\r\n   */\n\n\n  FreeCameraMouseWheelInput.prototype.getClassName = function () {\n    return \"FreeCameraMouseWheelInput\";\n  };\n\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelXMoveRelative\", {\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function () {\n      if (this._wheelXAction !== _CameraProperty.MoveRelative) {\n        return null;\n      }\n\n      return this._wheelXActionCoordinate;\n    },\n\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's X axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function (axis) {\n      if (axis === null && this._wheelXAction !== _CameraProperty.MoveRelative) {\n        // Attempting to clear different _wheelXAction.\n        return;\n      }\n\n      this._wheelXAction = _CameraProperty.MoveRelative;\n      this._wheelXActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelYMoveRelative\", {\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function () {\n      if (this._wheelYAction !== _CameraProperty.MoveRelative) {\n        return null;\n      }\n\n      return this._wheelYActionCoordinate;\n    },\n\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's Y axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function (axis) {\n      if (axis === null && this._wheelYAction !== _CameraProperty.MoveRelative) {\n        // Attempting to clear different _wheelYAction.\n        return;\n      }\n\n      this._wheelYAction = _CameraProperty.MoveRelative;\n      this._wheelYActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelZMoveRelative\", {\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function () {\n      if (this._wheelZAction !== _CameraProperty.MoveRelative) {\n        return null;\n      }\n\n      return this._wheelZActionCoordinate;\n    },\n\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's Z axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function (axis) {\n      if (axis === null && this._wheelZAction !== _CameraProperty.MoveRelative) {\n        // Attempting to clear different _wheelZAction.\n        return;\n      }\n\n      this._wheelZAction = _CameraProperty.MoveRelative;\n      this._wheelZActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelXRotateRelative\", {\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function () {\n      if (this._wheelXAction !== _CameraProperty.RotateRelative) {\n        return null;\n      }\n\n      return this._wheelXActionCoordinate;\n    },\n\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's X axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function (axis) {\n      if (axis === null && this._wheelXAction !== _CameraProperty.RotateRelative) {\n        // Attempting to clear different _wheelXAction.\n        return;\n      }\n\n      this._wheelXAction = _CameraProperty.RotateRelative;\n      this._wheelXActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelYRotateRelative\", {\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function () {\n      if (this._wheelYAction !== _CameraProperty.RotateRelative) {\n        return null;\n      }\n\n      return this._wheelYActionCoordinate;\n    },\n\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's Y axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function (axis) {\n      if (axis === null && this._wheelYAction !== _CameraProperty.RotateRelative) {\n        // Attempting to clear different _wheelYAction.\n        return;\n      }\n\n      this._wheelYAction = _CameraProperty.RotateRelative;\n      this._wheelYActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelZRotateRelative\", {\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function () {\n      if (this._wheelZAction !== _CameraProperty.RotateRelative) {\n        return null;\n      }\n\n      return this._wheelZActionCoordinate;\n    },\n\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's Z axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function (axis) {\n      if (axis === null && this._wheelZAction !== _CameraProperty.RotateRelative) {\n        // Attempting to clear different _wheelZAction.\n        return;\n      }\n\n      this._wheelZAction = _CameraProperty.RotateRelative;\n      this._wheelZActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelXMoveScene\", {\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function () {\n      if (this._wheelXAction !== _CameraProperty.MoveScene) {\n        return null;\n      }\n\n      return this._wheelXActionCoordinate;\n    },\n\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's X axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function (axis) {\n      if (axis === null && this._wheelXAction !== _CameraProperty.MoveScene) {\n        // Attempting to clear different _wheelXAction.\n        return;\n      }\n\n      this._wheelXAction = _CameraProperty.MoveScene;\n      this._wheelXActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelYMoveScene\", {\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function () {\n      if (this._wheelYAction !== _CameraProperty.MoveScene) {\n        return null;\n      }\n\n      return this._wheelYActionCoordinate;\n    },\n\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's Y axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function (axis) {\n      if (axis === null && this._wheelYAction !== _CameraProperty.MoveScene) {\n        // Attempting to clear different _wheelYAction.\n        return;\n      }\n\n      this._wheelYAction = _CameraProperty.MoveScene;\n      this._wheelYActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelZMoveScene\", {\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function () {\n      if (this._wheelZAction !== _CameraProperty.MoveScene) {\n        return null;\n      }\n\n      return this._wheelZActionCoordinate;\n    },\n\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's Z axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function (axis) {\n      if (axis === null && this._wheelZAction !== _CameraProperty.MoveScene) {\n        // Attempting to clear different _wheelZAction.\n        return;\n      }\n\n      this._wheelZAction = _CameraProperty.MoveScene;\n      this._wheelZActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Called for each rendered frame.\r\n   */\n\n  FreeCameraMouseWheelInput.prototype.checkInputs = function () {\n    if (this._wheelDeltaX === 0 && this._wheelDeltaY === 0 && this._wheelDeltaZ == 0) {\n      return;\n    } // Clear the camera properties that we might be updating.\n\n\n    this._moveRelative.setAll(0);\n\n    this._rotateRelative.setAll(0);\n\n    this._moveScene.setAll(0); // Set the camera properties that are to be updated.\n\n\n    this._updateCamera();\n\n    if (this.camera.getScene().useRightHandedSystem) {\n      // TODO: Does this need done for worldUpdate too?\n      this._moveRelative.z *= -1;\n    } // Convert updates relative to camera to world position update.\n\n\n    var cameraTransformMatrix = Matrix.Zero();\n    this.camera.getViewMatrix().invertToRef(cameraTransformMatrix);\n    var transformedDirection = Vector3.Zero();\n    Vector3.TransformNormalToRef(this._moveRelative, cameraTransformMatrix, transformedDirection); // Apply updates to camera position.\n\n    this.camera.cameraRotation.x += this._rotateRelative.x / 200;\n    this.camera.cameraRotation.y += this._rotateRelative.y / 200;\n    this.camera.cameraDirection.addInPlace(transformedDirection);\n    this.camera.cameraDirection.addInPlace(this._moveScene); // Call the base class implementation to handle observers and do cleanup.\n\n    _super.prototype.checkInputs.call(this);\n  };\n  /**\r\n   * Update the camera according to any configured properties for the 3\r\n   * mouse-wheel axis.\r\n   */\n\n\n  FreeCameraMouseWheelInput.prototype._updateCamera = function () {\n    var moveRelative = this._moveRelative;\n    var rotateRelative = this._rotateRelative;\n    var moveScene = this._moveScene;\n\n    var updateCameraProperty = function (\n    /* Mouse-wheel delta. */\n    value,\n    /* Camera property to be changed. */\n    cameraProperty,\n    /* Axis of Camera property to be changed. */\n    coordinate) {\n      if (value === 0) {\n        // Mouse wheel has not moved.\n        return;\n      }\n\n      if (cameraProperty === null || coordinate === null) {\n        // Mouse wheel axis not configured.\n        return;\n      }\n\n      var action = null;\n\n      switch (cameraProperty) {\n        case _CameraProperty.MoveRelative:\n          action = moveRelative;\n          break;\n\n        case _CameraProperty.RotateRelative:\n          action = rotateRelative;\n          break;\n\n        case _CameraProperty.MoveScene:\n          action = moveScene;\n          break;\n      }\n\n      switch (coordinate) {\n        case Coordinate.X:\n          action.set(value, 0, 0);\n          break;\n\n        case Coordinate.Y:\n          action.set(0, value, 0);\n          break;\n\n        case Coordinate.Z:\n          action.set(0, 0, value);\n          break;\n      }\n    }; // Do the camera updates for each of the 3 touch-wheel axis.\n\n\n    updateCameraProperty(this._wheelDeltaX, this._wheelXAction, this._wheelXActionCoordinate);\n    updateCameraProperty(this._wheelDeltaY, this._wheelYAction, this._wheelYActionCoordinate);\n    updateCameraProperty(this._wheelDeltaZ, this._wheelZAction, this._wheelZActionCoordinate);\n  };\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelXMoveRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelYMoveRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelZMoveRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelXRotateRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelYRotateRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelZRotateRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelXMoveScene\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelYMoveScene\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelZMoveScene\", null);\n\n  return FreeCameraMouseWheelInput;\n}(BaseCameraMouseWheelInput);\n\nexport { FreeCameraMouseWheelInput };\nCameraInputTypes[\"FreeCameraMouseWheelInput\"] = FreeCameraMouseWheelInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/freeCameraMouseWheelInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { BaseCameraMouseWheelInput } from \"../../Cameras/Inputs/BaseCameraMouseWheelInput\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\nimport { Coordinate } from \"../../Maths/math.axis\";\n\nenum _CameraProperty {\n    MoveRelative,\n    RotateRelative,\n    MoveScene\n}\n\n/**\n * Manage the mouse wheel inputs to control a free camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nexport class FreeCameraMouseWheelInput extends BaseCameraMouseWheelInput {\n\n    /**\n     * Defines the camera the input is attached to.\n     */\n    public camera: FreeCamera;\n\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    public getClassName(): string {\n        return \"FreeCameraMouseWheelInput\";\n    }\n\n    /**\n     * Set which movement axis (relative to camera's orientation) the mouse\n     * wheel's X axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelXMoveRelative(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelXAction !== _CameraProperty.MoveRelative) {\n            // Attempting to clear different _wheelXAction.\n            return;\n        }\n        this._wheelXAction = _CameraProperty.MoveRelative;\n        this._wheelXActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured movement axis (relative to camera's orientation) the\n     * mouse wheel's X axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelXMoveRelative(): Nullable<Coordinate> {\n        if (this._wheelXAction !== _CameraProperty.MoveRelative) {\n            return null;\n        }\n        return this._wheelXActionCoordinate;\n    }\n\n    /**\n     * Set which movement axis (relative to camera's orientation) the mouse\n     * wheel's Y axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelYMoveRelative(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelYAction !== _CameraProperty.MoveRelative) {\n            // Attempting to clear different _wheelYAction.\n            return;\n        }\n        this._wheelYAction = _CameraProperty.MoveRelative;\n        this._wheelYActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured movement axis (relative to camera's orientation) the\n     * mouse wheel's Y axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelYMoveRelative(): Nullable<Coordinate> {\n        if (this._wheelYAction !== _CameraProperty.MoveRelative) {\n            return null;\n        }\n        return this._wheelYActionCoordinate;\n    }\n\n    /**\n     * Set which movement axis (relative to camera's orientation) the mouse\n     * wheel's Z axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelZMoveRelative(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelZAction !== _CameraProperty.MoveRelative) {\n            // Attempting to clear different _wheelZAction.\n            return;\n        }\n        this._wheelZAction = _CameraProperty.MoveRelative;\n        this._wheelZActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured movement axis (relative to camera's orientation) the\n     * mouse wheel's Z axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelZMoveRelative(): Nullable<Coordinate> {\n        if (this._wheelZAction !== _CameraProperty.MoveRelative) {\n            return null;\n        }\n        return this._wheelZActionCoordinate;\n    }\n\n    /**\n     * Set which rotation axis (relative to camera's orientation) the mouse\n     * wheel's X axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelXRotateRelative(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelXAction !== _CameraProperty.RotateRelative) {\n            // Attempting to clear different _wheelXAction.\n            return;\n        }\n        this._wheelXAction = _CameraProperty.RotateRelative;\n        this._wheelXActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured rotation axis (relative to camera's orientation) the\n     * mouse wheel's X axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelXRotateRelative(): Nullable<Coordinate> {\n        if (this._wheelXAction !== _CameraProperty.RotateRelative) {\n            return null;\n        }\n        return this._wheelXActionCoordinate;\n    }\n\n    /**\n     * Set which rotation axis (relative to camera's orientation) the mouse\n     * wheel's Y axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelYRotateRelative(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelYAction !== _CameraProperty.RotateRelative) {\n            // Attempting to clear different _wheelYAction.\n            return;\n        }\n        this._wheelYAction = _CameraProperty.RotateRelative;\n        this._wheelYActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured rotation axis (relative to camera's orientation) the\n     * mouse wheel's Y axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelYRotateRelative(): Nullable<Coordinate> {\n        if (this._wheelYAction !== _CameraProperty.RotateRelative) {\n            return null;\n        }\n        return this._wheelYActionCoordinate;\n    }\n\n    /**\n     * Set which rotation axis (relative to camera's orientation) the mouse\n     * wheel's Z axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelZRotateRelative(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelZAction !== _CameraProperty.RotateRelative) {\n            // Attempting to clear different _wheelZAction.\n            return;\n        }\n        this._wheelZAction = _CameraProperty.RotateRelative;\n        this._wheelZActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured rotation axis (relative to camera's orientation) the\n     * mouse wheel's Z axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelZRotateRelative(): Nullable<Coordinate> {\n        if (this._wheelZAction !== _CameraProperty.RotateRelative) {\n            return null;\n        }\n        return this._wheelZActionCoordinate;\n    }\n\n    /**\n     * Set which movement axis (relative to the scene) the mouse wheel's X axis\n     * controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelXMoveScene(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelXAction !== _CameraProperty.MoveScene) {\n            // Attempting to clear different _wheelXAction.\n            return;\n        }\n        this._wheelXAction = _CameraProperty.MoveScene;\n        this._wheelXActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\n     * X axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelXMoveScene(): Nullable<Coordinate> {\n        if (this._wheelXAction !== _CameraProperty.MoveScene) {\n            return null;\n        }\n        return this._wheelXActionCoordinate;\n    }\n\n    /**\n     * Set which movement axis (relative to the scene) the mouse wheel's Y axis\n     * controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelYMoveScene(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelYAction !== _CameraProperty.MoveScene) {\n            // Attempting to clear different _wheelYAction.\n            return;\n        }\n        this._wheelYAction = _CameraProperty.MoveScene;\n        this._wheelYActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\n     * Y axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelYMoveScene(): Nullable<Coordinate> {\n        if (this._wheelYAction !== _CameraProperty.MoveScene) {\n            return null;\n        }\n        return this._wheelYActionCoordinate;\n    }\n\n    /**\n     * Set which movement axis (relative to the scene) the mouse wheel's Z axis\n     * controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    @serialize()\n    public set wheelZMoveScene(axis: Nullable<Coordinate>) {\n        if (axis === null && this._wheelZAction !== _CameraProperty.MoveScene) {\n            // Attempting to clear different _wheelZAction.\n            return;\n        }\n        this._wheelZAction = _CameraProperty.MoveScene;\n        this._wheelZActionCoordinate = axis;\n    }\n\n    /**\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\n     * Z axis controls.\n     * @returns The configured axis or null if none.\n     */\n    public get wheelZMoveScene(): Nullable<Coordinate> {\n        if (this._wheelZAction !== _CameraProperty.MoveScene) {\n            return null;\n        }\n        return this._wheelZActionCoordinate;\n    }\n\n    /**\n     * Called for each rendered frame.\n     */\n    public checkInputs(): void {\n        if (this._wheelDeltaX === 0 &&\n                this._wheelDeltaY === 0 &&\n                this._wheelDeltaZ == 0) {\n            return;\n        }\n\n        // Clear the camera properties that we might be updating.\n        this._moveRelative.setAll(0);\n        this._rotateRelative.setAll(0);\n        this._moveScene.setAll(0);\n\n        // Set the camera properties that are to be updated.\n        this._updateCamera();\n\n        if (this.camera.getScene().useRightHandedSystem) {\n            // TODO: Does this need done for worldUpdate too?\n            this._moveRelative.z *= -1;\n        }\n\n        // Convert updates relative to camera to world position update.\n        const cameraTransformMatrix = Matrix.Zero();\n        this.camera.getViewMatrix().invertToRef(cameraTransformMatrix);\n\n        const transformedDirection = Vector3.Zero();\n        Vector3.TransformNormalToRef(\n            this._moveRelative, cameraTransformMatrix, transformedDirection);\n\n        // Apply updates to camera position.\n        this.camera.cameraRotation.x += this._rotateRelative.x / 200;\n        this.camera.cameraRotation.y += this._rotateRelative.y / 200;\n        this.camera.cameraDirection.addInPlace(transformedDirection);\n        this.camera.cameraDirection.addInPlace(this._moveScene);\n\n        // Call the base class implementation to handle observers and do cleanup.\n        super.checkInputs();\n    }\n\n    private _moveRelative = Vector3.Zero();\n    private _rotateRelative = Vector3.Zero();\n    private _moveScene = Vector3.Zero();\n\n    /**\n     * These are set to the desired default behaviour.\n     */\n    private _wheelXAction: Nullable<_CameraProperty> = _CameraProperty.MoveRelative;\n    private _wheelXActionCoordinate: Nullable<Coordinate> = Coordinate.X;\n    private _wheelYAction: Nullable<_CameraProperty> = _CameraProperty.MoveRelative;\n    private _wheelYActionCoordinate: Nullable<Coordinate> = Coordinate.Z;\n    private _wheelZAction: Nullable<_CameraProperty> = null;\n    private _wheelZActionCoordinate: Nullable<Coordinate> = null;\n\n    /**\n     * Update the camera according to any configured properties for the 3\n     * mouse-wheel axis.\n     */\n    private _updateCamera(): void {\n        const moveRelative = this._moveRelative;\n        const rotateRelative = this._rotateRelative;\n        const moveScene = this._moveScene;\n\n        let updateCameraProperty = function(/* Mouse-wheel delta. */\n                                            value: number,\n                                            /* Camera property to be changed. */\n                                            cameraProperty: Nullable<_CameraProperty>,\n                                            /* Axis of Camera property to be changed. */\n                                            coordinate: Nullable<Coordinate>): void {\n                if (value === 0) {\n                    // Mouse wheel has not moved.\n                    return;\n                }\n                if (cameraProperty === null || coordinate === null) {\n                    // Mouse wheel axis not configured.\n                    return;\n                }\n\n                let action = null;\n                switch (cameraProperty) {\n                    case _CameraProperty.MoveRelative:\n                        action = moveRelative;\n                        break;\n                    case _CameraProperty.RotateRelative:\n                        action = rotateRelative;\n                        break;\n                    case _CameraProperty.MoveScene:\n                        action = moveScene;\n                        break;\n                }\n\n                switch (coordinate) {\n                    case Coordinate.X:\n                        action.set(value, 0, 0);\n                        break;\n                    case Coordinate.Y:\n                        action.set(0, value, 0);\n                        break;\n                    case Coordinate.Z:\n                        action.set(0, 0, value);\n                        break;\n                }\n            };\n\n        // Do the camera updates for each of the 3 touch-wheel axis.\n        updateCameraProperty(\n            this._wheelDeltaX, this._wheelXAction, this._wheelXActionCoordinate);\n        updateCameraProperty(\n            this._wheelDeltaY, this._wheelYAction, this._wheelYActionCoordinate);\n        updateCameraProperty(\n            this._wheelDeltaZ, this._wheelZAction, this._wheelZActionCoordinate);\n    }\n\n}\n\n(<any>CameraInputTypes)[\"FreeCameraMouseWheelInput\"] = FreeCameraMouseWheelInput;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}