{"ast":null,"code":"/** @hidden */\nvar WebGLPipelineContext =\n/** @class */\nfunction () {\n  function WebGLPipelineContext() {\n    this.vertexCompilationError = null;\n    this.fragmentCompilationError = null;\n    this.programLinkError = null;\n    this.programValidationError = null;\n  }\n\n  Object.defineProperty(WebGLPipelineContext.prototype, \"isAsync\", {\n    get: function () {\n      return this.isParallelCompiled;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebGLPipelineContext.prototype, \"isReady\", {\n    get: function () {\n      if (this.program) {\n        if (this.isParallelCompiled) {\n          return this.engine._isRenderingStateCompiled(this);\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebGLPipelineContext.prototype._handlesSpectorRebuildCallback = function (onCompiled) {\n    if (onCompiled && this.program) {\n      onCompiled(this.program);\n    }\n  };\n\n  WebGLPipelineContext.prototype._getVertexShaderCode = function () {\n    return this.vertexShader ? this.engine._getShaderSource(this.vertexShader) : null;\n  };\n\n  WebGLPipelineContext.prototype._getFragmentShaderCode = function () {\n    return this.fragmentShader ? this.engine._getShaderSource(this.fragmentShader) : null;\n  };\n\n  return WebGLPipelineContext;\n}();\n\nexport { WebGLPipelineContext };","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/WebGL/webGLPipelineContext.ts"],"names":[],"mappings":"AAIA;AACA,IAAA,oBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,oBAAA,GAAA;AAUW,SAAA,sBAAA,GAA2C,IAA3C;AACA,SAAA,wBAAA,GAA6C,IAA7C;AACA,SAAA,gBAAA,GAAqC,IAArC;AACA,SAAA,sBAAA,GAA2C,IAA3C;AA8BV;;AA5BG,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;SAAlB,YAAA;AACI,aAAO,KAAK,kBAAZ;AACH,KAFiB;qBAAA;;AAAA,GAAlB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;SAAlB,YAAA;AACI,UAAI,KAAK,OAAT,EAAkB;AACd,YAAI,KAAK,kBAAT,EAA6B;AACzB,iBAAO,KAAK,MAAL,CAAY,yBAAZ,CAAsC,IAAtC,CAAP;AACH;;AACD,eAAO,IAAP;AACH;;AAED,aAAO,KAAP;AACH,KATiB;qBAAA;;AAAA,GAAlB;;AAWO,EAAA,oBAAA,CAAA,SAAA,CAAA,8BAAA,GAAP,UAAsC,UAAtC,EAAiF;AAC7E,QAAI,UAAU,IAAI,KAAK,OAAvB,EAAgC;AAC5B,MAAA,UAAU,CAAC,KAAK,OAAN,CAAV;AACH;AACJ,GAJM;;AAMA,EAAA,oBAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,YAAA;AACI,WAAO,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,gBAAZ,CAA6B,KAAK,YAAlC,CAApB,GAAsE,IAA7E;AACH,GAFM;;AAIA,EAAA,oBAAA,CAAA,SAAA,CAAA,sBAAA,GAAP,YAAA;AACI,WAAO,KAAK,cAAL,GAAsB,KAAK,MAAL,CAAY,gBAAZ,CAA6B,KAAK,cAAlC,CAAtB,GAA0E,IAAjF;AACH,GAFM;;AAGX,SAAA,oBAAA;AAAC,CA3CD,EAAA","sourcesContent":["import { IPipelineContext } from '../IPipelineContext';\r\nimport { Nullable } from '../../types';\r\nimport { ThinEngine } from '../thinEngine';\r\n\r\n/** @hidden */\r\nexport class WebGLPipelineContext implements IPipelineContext {\r\n    public engine: ThinEngine;\r\n    public program: Nullable<WebGLProgram>;\r\n    public context?: WebGLRenderingContext;\r\n    public vertexShader?: WebGLShader;\r\n    public fragmentShader?: WebGLShader;\r\n    public isParallelCompiled: boolean;\r\n    public onCompiled?: () => void;\r\n    public transformFeedback?: WebGLTransformFeedback | null;\r\n\r\n    public vertexCompilationError: Nullable<string> = null;\r\n    public fragmentCompilationError: Nullable<string> = null;\r\n    public programLinkError: Nullable<string> = null;\r\n    public programValidationError: Nullable<string> = null;\r\n\r\n    public get isAsync() {\r\n        return this.isParallelCompiled;\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        if (this.program) {\r\n            if (this.isParallelCompiled) {\r\n                return this.engine._isRenderingStateCompiled(this);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public _handlesSpectorRebuildCallback(onCompiled: (program: WebGLProgram) => void): void {\r\n        if (onCompiled && this.program) {\r\n            onCompiled(this.program);\r\n        }\r\n    }\r\n\r\n    public _getVertexShaderCode(): string | null {\r\n        return this.vertexShader ? this.engine._getShaderSource(this.vertexShader) : null;\r\n    }\r\n\r\n    public _getFragmentShaderCode(): string | null {\r\n        return this.fragmentShader ? this.engine._getShaderSource(this.fragmentShader) : null;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}