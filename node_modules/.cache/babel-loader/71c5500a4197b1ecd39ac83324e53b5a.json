{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { SerializationHelper, serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators\";\nimport { Color3 } from '../../Maths/math.color';\nimport { MaterialFlags } from \"../materialFlags\";\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\n/**\r\n * Define the code related to the clear coat parameters of the pbr material.\r\n */\n\nvar PBRClearCoatConfiguration =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiate a new istance of clear coat configuration.\r\n   * @param markAllSubMeshesAsTexturesDirty Callback to flag the material to dirty\r\n   */\n  function PBRClearCoatConfiguration(markAllSubMeshesAsTexturesDirty) {\n    this._isEnabled = false;\n    /**\r\n     * Defines if the clear coat is enabled in the material.\r\n     */\n\n    this.isEnabled = false;\n    /**\r\n     * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.\r\n     */\n\n    this.intensity = 1;\n    /**\r\n     * Defines the clear coat layer roughness.\r\n     */\n\n    this.roughness = 0;\n    this._indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    /**\r\n     * Defines the index of refraction of the clear coat.\r\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\r\n     * The default fits with a polyurethane material.\r\n     * Changing the default value is more performance intensive.\r\n     */\n\n    this.indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    this._texture = null;\n    /**\r\n     * Stores the clear coat values in a texture (red channel is intensity and green channel is roughness)\r\n     * If useRoughnessFromMainTexture is false, the green channel of texture is not used and the green channel of textureRoughness is used instead\r\n     * if textureRoughness is not empty, else no texture roughness is used\r\n     */\n\n    this.texture = null;\n    this._useRoughnessFromMainTexture = true;\n    /**\r\n     * Indicates that the green channel of the texture property will be used for roughness (default: true)\r\n     * If false, the green channel from textureRoughness is used for roughness\r\n     */\n\n    this.useRoughnessFromMainTexture = true;\n    this._textureRoughness = null;\n    /**\r\n     * Stores the clear coat roughness in a texture (green channel)\r\n     * Not used if useRoughnessFromMainTexture is true\r\n     */\n\n    this.textureRoughness = null;\n    this._remapF0OnInterfaceChange = true;\n    /**\r\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\r\n     */\n\n    this.remapF0OnInterfaceChange = true;\n    this._bumpTexture = null;\n    /**\r\n     * Define the clear coat specific bump texture.\r\n     */\n\n    this.bumpTexture = null;\n    this._isTintEnabled = false;\n    /**\r\n     * Defines if the clear coat tint is enabled in the material.\r\n     */\n\n    this.isTintEnabled = false;\n    /**\r\n     * Defines the clear coat tint of the material.\r\n     * This is only use if tint is enabled\r\n     */\n\n    this.tintColor = Color3.White();\n    /**\r\n     * Defines the distance at which the tint color should be found in the\r\n     * clear coat media.\r\n     * This is only use if tint is enabled\r\n     */\n\n    this.tintColorAtDistance = 1;\n    /**\r\n     * Defines the clear coat layer thickness.\r\n     * This is only use if tint is enabled\r\n     */\n\n    this.tintThickness = 1;\n    this._tintTexture = null;\n    /**\r\n     * Stores the clear tint values in a texture.\r\n     * rgb is tint\r\n     * a is a thickness factor\r\n     */\n\n    this.tintTexture = null;\n    this._internalMarkAllSubMeshesAsTexturesDirty = markAllSubMeshesAsTexturesDirty;\n  }\n  /** @hidden */\n\n\n  PBRClearCoatConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  };\n  /**\r\n   * Gets wehter the submesh is ready to be used or not.\r\n   * @param defines the list of \"defines\" to update.\r\n   * @param scene defines the scene the material belongs to.\r\n   * @param engine defines the engine the material belongs to.\r\n   * @param disableBumpMap defines wether the material disables bump or not.\r\n   * @returns - boolean indicating that the submesh is ready or not.\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.isReadyForSubMesh = function (defines, scene, engine, disableBumpMap) {\n    if (defines._areTexturesDirty) {\n      if (scene.texturesEnabled) {\n        if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n          if (!this._texture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n          if (!this._textureRoughness.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n          // Bump texture cannot be not blocking.\n          if (!this._bumpTexture.isReady()) {\n            return false;\n          }\n        }\n\n        if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n          if (!this._tintTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Checks to see if a texture is used in the material.\r\n   * @param defines the list of \"defines\" to update.\r\n   * @param scene defines the scene to the material belongs to.\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.prepareDefines = function (defines, scene) {\n    var _a;\n\n    if (this._isEnabled) {\n      defines.CLEARCOAT = true;\n      defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = this._texture !== null && this._texture._texture === ((_a = this._textureRoughness) === null || _a === void 0 ? void 0 : _a._texture) && this._texture.checkTransformsAreIdentical(this._textureRoughness);\n      defines.CLEARCOAT_REMAP_F0 = this._remapF0OnInterfaceChange;\n\n      if (defines._areTexturesDirty) {\n        if (scene.texturesEnabled) {\n          if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"CLEARCOAT_TEXTURE\");\n          } else {\n            defines.CLEARCOAT_TEXTURE = false;\n          }\n\n          if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"CLEARCOAT_TEXTURE_ROUGHNESS\");\n          } else {\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n          }\n\n          if (this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"CLEARCOAT_BUMP\");\n          } else {\n            defines.CLEARCOAT_BUMP = false;\n          }\n\n          defines.CLEARCOAT_DEFAULTIOR = this._indexOfRefraction === PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n\n          if (this._isTintEnabled) {\n            defines.CLEARCOAT_TINT = true;\n\n            if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n              MaterialHelper.PrepareDefinesForMergedUV(this._tintTexture, defines, \"CLEARCOAT_TINT_TEXTURE\");\n            } else {\n              defines.CLEARCOAT_TINT_TEXTURE = false;\n            }\n          } else {\n            defines.CLEARCOAT_TINT = false;\n            defines.CLEARCOAT_TINT_TEXTURE = false;\n          }\n        }\n      }\n    } else {\n      defines.CLEARCOAT = false;\n      defines.CLEARCOAT_TEXTURE = false;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n      defines.CLEARCOAT_BUMP = false;\n      defines.CLEARCOAT_TINT = false;\n      defines.CLEARCOAT_TINT_TEXTURE = false;\n      defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n    }\n  };\n  /**\r\n   * Binds the material data.\r\n   * @param uniformBuffer defines the Uniform buffer to fill in.\r\n   * @param scene defines the scene the material belongs to.\r\n   * @param engine defines the engine the material belongs to.\r\n   * @param disableBumpMap defines wether the material disables bump or not.\r\n   * @param isFrozen defines wether the material is frozen or not.\r\n   * @param invertNormalMapX If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\r\n   * @param invertNormalMapY If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\r\n   * @param subMesh the submesh to bind data for\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene, engine, disableBumpMap, isFrozen, invertNormalMapX, invertNormalMapY, subMesh) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    var defines = subMesh._materialDefines;\n    var identicalTextures = defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL;\n\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      if (identicalTextures && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture.coordinatesIndex, this._texture.level, -1, -1);\n        MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n      } else if ((this._texture || this._textureRoughness) && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatInfos\", (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.coordinatesIndex) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this._texture) === null || _c === void 0 ? void 0 : _c.level) !== null && _d !== void 0 ? _d : 0, (_f = (_e = this._textureRoughness) === null || _e === void 0 ? void 0 : _e.coordinatesIndex) !== null && _f !== void 0 ? _f : 0, (_h = (_g = this._textureRoughness) === null || _g === void 0 ? void 0 : _g.level) !== null && _h !== void 0 ? _h : 0);\n\n        if (this._texture) {\n          MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n        }\n\n        if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE) {\n          MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"clearCoatRoughness\");\n        }\n      }\n\n      if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatTextureEnabled && !disableBumpMap) {\n        uniformBuffer.updateFloat2(\"vClearCoatBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level);\n        MaterialHelper.BindTextureMatrix(this._bumpTexture, uniformBuffer, \"clearCoatBump\");\n\n        if (scene._mirroredCameraPosition) {\n          uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? 1.0 : -1.0, invertNormalMapY ? 1.0 : -1.0);\n        } else {\n          uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? -1.0 : 1.0, invertNormalMapY ? -1.0 : 1.0);\n        }\n      }\n\n      if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n        uniformBuffer.updateFloat2(\"vClearCoatTintInfos\", this._tintTexture.coordinatesIndex, this._tintTexture.level);\n        MaterialHelper.BindTextureMatrix(this._tintTexture, uniformBuffer, \"clearCoatTint\");\n      } // Clear Coat General params\n\n\n      uniformBuffer.updateFloat2(\"vClearCoatParams\", this.intensity, this.roughness); // Clear Coat Refraction params\n\n      var a = 1 - this._indexOfRefraction;\n      var b = 1 + this._indexOfRefraction;\n      var f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\n\n      var eta = 1 / this._indexOfRefraction;\n      uniformBuffer.updateFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\n\n      if (this._isTintEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatTintParams\", this.tintColor.r, this.tintColor.g, this.tintColor.b, Math.max(0.00001, this.tintThickness));\n        uniformBuffer.updateFloat(\"clearCoatColorAtDistance\", Math.max(0.00001, this.tintColorAtDistance));\n      }\n    } // Textures\n\n\n    if (scene.texturesEnabled) {\n      if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatSampler\", this._texture);\n      }\n\n      if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatRoughnessSampler\", this._textureRoughness);\n      }\n\n      if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n        uniformBuffer.setTexture(\"clearCoatBumpSampler\", this._bumpTexture);\n      }\n\n      if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatTintSampler\", this._tintTexture);\n      }\n    }\n  };\n  /**\r\n   * Checks to see if a texture is used in the material.\r\n   * @param texture - Base texture to use.\r\n   * @returns - Boolean specifying if a texture is used in the material.\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.hasTexture = function (texture) {\n    if (this._texture === texture) {\n      return true;\n    }\n\n    if (this._textureRoughness === texture) {\n      return true;\n    }\n\n    if (this._bumpTexture === texture) {\n      return true;\n    }\n\n    if (this._tintTexture === texture) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Returns an array of the actively used textures.\r\n   * @param activeTextures Array of BaseTextures\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.getActiveTextures = function (activeTextures) {\n    if (this._texture) {\n      activeTextures.push(this._texture);\n    }\n\n    if (this._textureRoughness) {\n      activeTextures.push(this._textureRoughness);\n    }\n\n    if (this._bumpTexture) {\n      activeTextures.push(this._bumpTexture);\n    }\n\n    if (this._tintTexture) {\n      activeTextures.push(this._tintTexture);\n    }\n  };\n  /**\r\n   * Returns the animatable textures.\r\n   * @param animatables Array of animatable textures.\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.getAnimatables = function (animatables) {\n    if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n      animatables.push(this._texture);\n    }\n\n    if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\n      animatables.push(this._textureRoughness);\n    }\n\n    if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n      animatables.push(this._bumpTexture);\n    }\n\n    if (this._tintTexture && this._tintTexture.animations && this._tintTexture.animations.length > 0) {\n      animatables.push(this._tintTexture);\n    }\n  };\n  /**\r\n   * Disposes the resources of the material.\r\n   * @param forceDisposeTextures - Forces the disposal of all textures.\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.dispose = function (forceDisposeTextures) {\n    var _a, _b, _c, _d;\n\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._textureRoughness) === null || _b === void 0 ? void 0 : _b.dispose();\n      (_c = this._bumpTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n      (_d = this._tintTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n    }\n  };\n  /**\r\n  * Get the current class name of the texture useful for serialization or dynamic coding.\r\n  * @returns \"PBRClearCoatConfiguration\"\r\n  */\n\n\n  PBRClearCoatConfiguration.prototype.getClassName = function () {\n    return \"PBRClearCoatConfiguration\";\n  };\n  /**\r\n   * Add fallbacks to the effect fallbacks list.\r\n   * @param defines defines the Base texture to use.\r\n   * @param fallbacks defines the current fallback list.\r\n   * @param currentRank defines the current fallback rank.\r\n   * @returns the new fallback rank.\r\n   */\n\n\n  PBRClearCoatConfiguration.AddFallbacks = function (defines, fallbacks, currentRank) {\n    if (defines.CLEARCOAT_BUMP) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT_BUMP\");\n    }\n\n    if (defines.CLEARCOAT_TINT) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT_TINT\");\n    }\n\n    if (defines.CLEARCOAT) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT\");\n    }\n\n    return currentRank;\n  };\n  /**\r\n   * Add the required uniforms to the current list.\r\n   * @param uniforms defines the current uniform list.\r\n   */\n\n\n  PBRClearCoatConfiguration.AddUniforms = function (uniforms) {\n    uniforms.push(\"vClearCoatTangentSpaceParams\", \"vClearCoatParams\", \"vClearCoatRefractionParams\", \"vClearCoatTintParams\", \"clearCoatColorAtDistance\", \"clearCoatMatrix\", \"clearCoatRoughnessMatrix\", \"clearCoatBumpMatrix\", \"clearCoatTintMatrix\", \"vClearCoatInfos\", \"vClearCoatBumpInfos\", \"vClearCoatTintInfos\");\n  };\n  /**\r\n   * Add the required samplers to the current list.\r\n   * @param samplers defines the current sampler list.\r\n   */\n\n\n  PBRClearCoatConfiguration.AddSamplers = function (samplers) {\n    samplers.push(\"clearCoatSampler\", \"clearCoatRoughnessSampler\", \"clearCoatBumpSampler\", \"clearCoatTintSampler\");\n  };\n  /**\r\n   * Add the required uniforms to the current buffer.\r\n   * @param uniformBuffer defines the current uniform buffer.\r\n   */\n\n\n  PBRClearCoatConfiguration.PrepareUniformBuffer = function (uniformBuffer) {\n    uniformBuffer.addUniform(\"vClearCoatParams\", 2);\n    uniformBuffer.addUniform(\"vClearCoatRefractionParams\", 4);\n    uniformBuffer.addUniform(\"vClearCoatInfos\", 4);\n    uniformBuffer.addUniform(\"clearCoatMatrix\", 16);\n    uniformBuffer.addUniform(\"clearCoatRoughnessMatrix\", 16);\n    uniformBuffer.addUniform(\"vClearCoatBumpInfos\", 2);\n    uniformBuffer.addUniform(\"vClearCoatTangentSpaceParams\", 2);\n    uniformBuffer.addUniform(\"clearCoatBumpMatrix\", 16);\n    uniformBuffer.addUniform(\"vClearCoatTintParams\", 4);\n    uniformBuffer.addUniform(\"clearCoatColorAtDistance\", 1);\n    uniformBuffer.addUniform(\"vClearCoatTintInfos\", 2);\n    uniformBuffer.addUniform(\"clearCoatTintMatrix\", 16);\n  };\n  /**\r\n   * Makes a duplicate of the current configuration into another one.\r\n   * @param clearCoatConfiguration define the config where to copy the info\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.copyTo = function (clearCoatConfiguration) {\n    SerializationHelper.Clone(function () {\n      return clearCoatConfiguration;\n    }, this);\n  };\n  /**\r\n   * Serializes this clear coat configuration.\r\n   * @returns - An object with the serialized config.\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.serialize = function () {\n    return SerializationHelper.Serialize(this);\n  };\n  /**\r\n   * Parses a anisotropy Configuration from a serialized object.\r\n   * @param source - Serialized object.\r\n   * @param scene Defines the scene we are parsing for\r\n   * @param rootUrl Defines the rootUrl to load from\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.parse = function (source, scene, rootUrl) {\n    var _this = this;\n\n    SerializationHelper.Parse(function () {\n      return _this;\n    }, source, scene, rootUrl);\n  };\n  /**\r\n   * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\r\n   * The default fits with a polyurethane material.\r\n   * @hidden\r\n   */\n\n\n  PBRClearCoatConfiguration._DefaultIndexOfRefraction = 1.5;\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"isEnabled\", void 0);\n\n  __decorate([serialize()], PBRClearCoatConfiguration.prototype, \"intensity\", void 0);\n\n  __decorate([serialize()], PBRClearCoatConfiguration.prototype, \"roughness\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"indexOfRefraction\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"texture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"useRoughnessFromMainTexture\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"textureRoughness\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"remapF0OnInterfaceChange\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"bumpTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"isTintEnabled\", void 0);\n\n  __decorate([serializeAsColor3()], PBRClearCoatConfiguration.prototype, \"tintColor\", void 0);\n\n  __decorate([serialize()], PBRClearCoatConfiguration.prototype, \"tintColorAtDistance\", void 0);\n\n  __decorate([serialize()], PBRClearCoatConfiguration.prototype, \"tintThickness\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"tintTexture\", void 0);\n\n  return PBRClearCoatConfiguration;\n}();\n\nexport { PBRClearCoatConfiguration };","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/PBR/pbrClearCoatConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\nimport { SerializationHelper, serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators\";\nimport { Color3 } from '../../Maths/math.color';\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\nimport { MaterialFlags } from \"../materialFlags\";\nimport { UniformBuffer } from \"../../Materials/uniformBuffer\";\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\nimport { IAnimatable } from '../../Animations/animatable.interface';\nimport { EffectFallbacks } from '../effectFallbacks';\nimport { SubMesh } from '../../Meshes/subMesh';\n\ndeclare type Engine = import(\"../../Engines/engine\").Engine;\ndeclare type Scene = import(\"../../scene\").Scene;\n\n/**\n * @hidden\n */\nexport interface IMaterialClearCoatDefines {\n    CLEARCOAT: boolean;\n    CLEARCOAT_DEFAULTIOR: boolean;\n    CLEARCOAT_TEXTURE: boolean;\n    CLEARCOAT_TEXTURE_ROUGHNESS: boolean;\n    CLEARCOAT_TEXTUREDIRECTUV: number;\n    CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV: number;\n    CLEARCOAT_BUMP: boolean;\n    CLEARCOAT_BUMPDIRECTUV: number;\n    CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE: boolean;\n    CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL: boolean;\n    CLEARCOAT_REMAP_F0: boolean;\n\n    CLEARCOAT_TINT: boolean;\n    CLEARCOAT_TINT_TEXTURE: boolean;\n    CLEARCOAT_TINT_TEXTUREDIRECTUV: number;\n\n    /** @hidden */\n    _areTexturesDirty: boolean;\n}\n\n/**\n * Define the code related to the clear coat parameters of the pbr material.\n */\nexport class PBRClearCoatConfiguration {\n    /**\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\n     * The default fits with a polyurethane material.\n     * @hidden\n     */\n    public static readonly _DefaultIndexOfRefraction = 1.5;\n\n    private _isEnabled = false;\n    /**\n     * Defines if the clear coat is enabled in the material.\n     */\n    @serialize()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public isEnabled = false;\n\n    /**\n     * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.\n     */\n    @serialize()\n    public intensity: number = 1;\n\n    /**\n     * Defines the clear coat layer roughness.\n     */\n    @serialize()\n    public roughness: number = 0;\n\n    private _indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    /**\n     * Defines the index of refraction of the clear coat.\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\n     * The default fits with a polyurethane material.\n     * Changing the default value is more performance intensive.\n     */\n    @serialize()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n\n    private _texture: Nullable<BaseTexture> = null;\n    /**\n     * Stores the clear coat values in a texture (red channel is intensity and green channel is roughness)\n     * If useRoughnessFromMainTexture is false, the green channel of texture is not used and the green channel of textureRoughness is used instead\n     * if textureRoughness is not empty, else no texture roughness is used\n     */\n    @serializeAsTexture()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public texture: Nullable<BaseTexture> = null;\n\n    private _useRoughnessFromMainTexture = true;\n    /**\n     * Indicates that the green channel of the texture property will be used for roughness (default: true)\n     * If false, the green channel from textureRoughness is used for roughness\n     */\n    @serialize()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public useRoughnessFromMainTexture = true;\n\n    private _textureRoughness: Nullable<BaseTexture> = null;\n    /**\n     * Stores the clear coat roughness in a texture (green channel)\n     * Not used if useRoughnessFromMainTexture is true\n     */\n    @serializeAsTexture()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public textureRoughness: Nullable<BaseTexture> = null;\n\n    private _remapF0OnInterfaceChange = true;\n    /**\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\n     */\n    @serialize()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public remapF0OnInterfaceChange = true;\n\n    private _bumpTexture: Nullable<BaseTexture> = null;\n    /**\n     * Define the clear coat specific bump texture.\n     */\n    @serializeAsTexture()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public bumpTexture: Nullable<BaseTexture> = null;\n\n    private _isTintEnabled = false;\n    /**\n     * Defines if the clear coat tint is enabled in the material.\n     */\n    @serialize()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public isTintEnabled = false;\n\n    /**\n     * Defines the clear coat tint of the material.\n     * This is only use if tint is enabled\n     */\n    @serializeAsColor3()\n    public tintColor = Color3.White();\n\n    /**\n     * Defines the distance at which the tint color should be found in the\n     * clear coat media.\n     * This is only use if tint is enabled\n     */\n    @serialize()\n    public tintColorAtDistance = 1;\n\n    /**\n     * Defines the clear coat layer thickness.\n     * This is only use if tint is enabled\n     */\n    @serialize()\n    public tintThickness: number = 1;\n\n    private _tintTexture: Nullable<BaseTexture> = null;\n    /**\n     * Stores the clear tint values in a texture.\n     * rgb is tint\n     * a is a thickness factor\n     */\n    @serializeAsTexture()\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\n    public tintTexture: Nullable<BaseTexture> = null;\n\n    /** @hidden */\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\n\n    /** @hidden */\n    public _markAllSubMeshesAsTexturesDirty(): void {\n        this._internalMarkAllSubMeshesAsTexturesDirty();\n    }\n\n    /**\n     * Instantiate a new istance of clear coat configuration.\n     * @param markAllSubMeshesAsTexturesDirty Callback to flag the material to dirty\n     */\n    constructor(markAllSubMeshesAsTexturesDirty: () => void) {\n        this._internalMarkAllSubMeshesAsTexturesDirty = markAllSubMeshesAsTexturesDirty;\n    }\n\n    /**\n     * Gets wehter the submesh is ready to be used or not.\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene the material belongs to.\n     * @param engine defines the engine the material belongs to.\n     * @param disableBumpMap defines wether the material disables bump or not.\n     * @returns - boolean indicating that the submesh is ready or not.\n     */\n    public isReadyForSubMesh(defines: IMaterialClearCoatDefines, scene: Scene, engine: Engine, disableBumpMap: boolean): boolean {\n        if (defines._areTexturesDirty) {\n            if (scene.texturesEnabled) {\n                if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n                    if (!this._texture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n\n                if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n                    if (!this._textureRoughness.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n                    // Bump texture cannot be not blocking.\n                    if (!this._bumpTexture.isReady()) {\n                        return false;\n                    }\n                }\n\n                if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n                    if (!this._tintTexture.isReadyOrNotBlocking()) {\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks to see if a texture is used in the material.\n     * @param defines the list of \"defines\" to update.\n     * @param scene defines the scene to the material belongs to.\n     */\n    public prepareDefines(defines: IMaterialClearCoatDefines, scene: Scene): void {\n        if (this._isEnabled) {\n            defines.CLEARCOAT = true;\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = this._texture !== null && this._texture._texture === this._textureRoughness?._texture && this._texture.checkTransformsAreIdentical(this._textureRoughness);\n            defines.CLEARCOAT_REMAP_F0 = this._remapF0OnInterfaceChange;\n\n            if (defines._areTexturesDirty) {\n                if (scene.texturesEnabled) {\n                    if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"CLEARCOAT_TEXTURE\");\n                    } else {\n                        defines.CLEARCOAT_TEXTURE = false;\n                    }\n\n                    if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"CLEARCOAT_TEXTURE_ROUGHNESS\");\n                    } else {\n                        defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n                    }\n\n                    if (this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled) {\n                        MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"CLEARCOAT_BUMP\");\n                    } else {\n                        defines.CLEARCOAT_BUMP = false;\n                    }\n\n                    defines.CLEARCOAT_DEFAULTIOR = this._indexOfRefraction === PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n\n                    if (this._isTintEnabled) {\n                        defines.CLEARCOAT_TINT = true;\n                        if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n                            MaterialHelper.PrepareDefinesForMergedUV(this._tintTexture, defines, \"CLEARCOAT_TINT_TEXTURE\");\n                        }\n                        else {\n                            defines.CLEARCOAT_TINT_TEXTURE = false;\n                        }\n                    }\n                    else {\n                        defines.CLEARCOAT_TINT = false;\n                        defines.CLEARCOAT_TINT_TEXTURE = false;\n                    }\n                }\n            }\n        }\n        else {\n            defines.CLEARCOAT = false;\n            defines.CLEARCOAT_TEXTURE = false;\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n            defines.CLEARCOAT_BUMP = false;\n            defines.CLEARCOAT_TINT = false;\n            defines.CLEARCOAT_TINT_TEXTURE = false;\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n        }\n    }\n\n    /**\n     * Binds the material data.\n     * @param uniformBuffer defines the Uniform buffer to fill in.\n     * @param scene defines the scene the material belongs to.\n     * @param engine defines the engine the material belongs to.\n     * @param disableBumpMap defines wether the material disables bump or not.\n     * @param isFrozen defines wether the material is frozen or not.\n     * @param invertNormalMapX If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\n     * @param invertNormalMapY If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\n     * @param subMesh the submesh to bind data for\n     */\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, disableBumpMap: boolean, isFrozen: boolean, invertNormalMapX: boolean, invertNormalMapY: boolean, subMesh?: SubMesh): void {\n        const defines = subMesh!._materialDefines as unknown as IMaterialClearCoatDefines;\n\n        const identicalTextures = defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL;\n\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n            if (identicalTextures && MaterialFlags.ClearCoatTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture!.coordinatesIndex, this._texture!.level, -1, -1);\n                MaterialHelper.BindTextureMatrix(this._texture!, uniformBuffer, \"clearCoat\");\n            } else  if ((this._texture || this._textureRoughness) && MaterialFlags.ClearCoatTextureEnabled) {\n                uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture?.coordinatesIndex ?? 0, this._texture?.level ?? 0, this._textureRoughness?.coordinatesIndex ?? 0, this._textureRoughness?.level ?? 0);\n                if (this._texture) {\n                    MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n                }\n                if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE) {\n                    MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"clearCoatRoughness\");\n                }\n            }\n\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatTextureEnabled && !disableBumpMap) {\n                uniformBuffer.updateFloat2(\"vClearCoatBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level);\n                MaterialHelper.BindTextureMatrix(this._bumpTexture, uniformBuffer, \"clearCoatBump\");\n\n                if (scene._mirroredCameraPosition) {\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? 1.0 : -1.0, invertNormalMapY ? 1.0 : -1.0);\n                } else {\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? -1.0 : 1.0, invertNormalMapY ? -1.0 : 1.0);\n                }\n            }\n\n            if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n                uniformBuffer.updateFloat2(\"vClearCoatTintInfos\", this._tintTexture.coordinatesIndex, this._tintTexture.level);\n                MaterialHelper.BindTextureMatrix(this._tintTexture, uniformBuffer, \"clearCoatTint\");\n            }\n\n            // Clear Coat General params\n            uniformBuffer.updateFloat2(\"vClearCoatParams\", this.intensity, this.roughness);\n\n            // Clear Coat Refraction params\n            const a = 1 - this._indexOfRefraction;\n            const b = 1 + this._indexOfRefraction;\n            const f0 = Math.pow((-a / b), 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\n            const eta = 1 / this._indexOfRefraction;\n            uniformBuffer.updateFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\n\n            if (this._isTintEnabled) {\n                uniformBuffer.updateFloat4(\"vClearCoatTintParams\",\n                    this.tintColor.r,\n                    this.tintColor.g,\n                    this.tintColor.b,\n                    Math.max(0.00001, this.tintThickness));\n                uniformBuffer.updateFloat(\"clearCoatColorAtDistance\", Math.max(0.00001, this.tintColorAtDistance));\n            }\n        }\n\n        // Textures\n        if (scene.texturesEnabled) {\n            if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n                uniformBuffer.setTexture(\"clearCoatSampler\", this._texture);\n            }\n\n            if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.ClearCoatTextureEnabled) {\n                uniformBuffer.setTexture(\"clearCoatRoughnessSampler\", this._textureRoughness);\n            }\n\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n                uniformBuffer.setTexture(\"clearCoatBumpSampler\", this._bumpTexture);\n            }\n\n            if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n                uniformBuffer.setTexture(\"clearCoatTintSampler\", this._tintTexture);\n            }\n        }\n    }\n\n    /**\n     * Checks to see if a texture is used in the material.\n     * @param texture - Base texture to use.\n     * @returns - Boolean specifying if a texture is used in the material.\n     */\n    public hasTexture(texture: BaseTexture): boolean {\n        if (this._texture === texture) {\n            return true;\n        }\n\n        if (this._textureRoughness === texture) {\n            return true;\n        }\n\n        if (this._bumpTexture === texture) {\n            return true;\n        }\n\n        if (this._tintTexture === texture) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns an array of the actively used textures.\n     * @param activeTextures Array of BaseTextures\n     */\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\n        if (this._texture) {\n            activeTextures.push(this._texture);\n        }\n\n        if (this._textureRoughness) {\n            activeTextures.push(this._textureRoughness);\n        }\n\n        if (this._bumpTexture) {\n            activeTextures.push(this._bumpTexture);\n        }\n\n        if (this._tintTexture) {\n            activeTextures.push(this._tintTexture);\n        }\n    }\n\n    /**\n     * Returns the animatable textures.\n     * @param animatables Array of animatable textures.\n     */\n    public getAnimatables(animatables: IAnimatable[]): void {\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n            animatables.push(this._texture);\n        }\n\n        if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\n            animatables.push(this._textureRoughness);\n        }\n\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n            animatables.push(this._bumpTexture);\n        }\n\n        if (this._tintTexture && this._tintTexture.animations && this._tintTexture.animations.length > 0) {\n            animatables.push(this._tintTexture);\n        }\n    }\n\n    /**\n     * Disposes the resources of the material.\n     * @param forceDisposeTextures - Forces the disposal of all textures.\n     */\n    public dispose(forceDisposeTextures?: boolean): void {\n        if (forceDisposeTextures) {\n            this._texture?.dispose();\n            this._textureRoughness?.dispose();\n            this._bumpTexture?.dispose();\n            this._tintTexture?.dispose();\n        }\n    }\n\n    /**\n    * Get the current class name of the texture useful for serialization or dynamic coding.\n    * @returns \"PBRClearCoatConfiguration\"\n    */\n    public getClassName(): string {\n        return \"PBRClearCoatConfiguration\";\n    }\n\n    /**\n     * Add fallbacks to the effect fallbacks list.\n     * @param defines defines the Base texture to use.\n     * @param fallbacks defines the current fallback list.\n     * @param currentRank defines the current fallback rank.\n     * @returns the new fallback rank.\n     */\n    public static AddFallbacks(defines: IMaterialClearCoatDefines, fallbacks: EffectFallbacks, currentRank: number): number {\n        if (defines.CLEARCOAT_BUMP) {\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_BUMP\");\n        }\n        if (defines.CLEARCOAT_TINT) {\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_TINT\");\n        }\n        if (defines.CLEARCOAT) {\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT\");\n        }\n        return currentRank;\n    }\n\n    /**\n     * Add the required uniforms to the current list.\n     * @param uniforms defines the current uniform list.\n     */\n    public static AddUniforms(uniforms: string[]): void {\n        uniforms.push(\"vClearCoatTangentSpaceParams\", \"vClearCoatParams\", \"vClearCoatRefractionParams\",\n            \"vClearCoatTintParams\", \"clearCoatColorAtDistance\",\n            \"clearCoatMatrix\", \"clearCoatRoughnessMatrix\", \"clearCoatBumpMatrix\", \"clearCoatTintMatrix\",\n            \"vClearCoatInfos\", \"vClearCoatBumpInfos\", \"vClearCoatTintInfos\");\n    }\n\n    /**\n     * Add the required samplers to the current list.\n     * @param samplers defines the current sampler list.\n     */\n    public static AddSamplers(samplers: string[]): void {\n        samplers.push(\"clearCoatSampler\", \"clearCoatRoughnessSampler\", \"clearCoatBumpSampler\", \"clearCoatTintSampler\");\n    }\n\n    /**\n     * Add the required uniforms to the current buffer.\n     * @param uniformBuffer defines the current uniform buffer.\n     */\n    public static PrepareUniformBuffer(uniformBuffer: UniformBuffer): void {\n        uniformBuffer.addUniform(\"vClearCoatParams\", 2);\n        uniformBuffer.addUniform(\"vClearCoatRefractionParams\", 4);\n        uniformBuffer.addUniform(\"vClearCoatInfos\", 4);\n        uniformBuffer.addUniform(\"clearCoatMatrix\", 16);\n        uniformBuffer.addUniform(\"clearCoatRoughnessMatrix\", 16);\n        uniformBuffer.addUniform(\"vClearCoatBumpInfos\", 2);\n        uniformBuffer.addUniform(\"vClearCoatTangentSpaceParams\", 2);\n        uniformBuffer.addUniform(\"clearCoatBumpMatrix\", 16);\n        uniformBuffer.addUniform(\"vClearCoatTintParams\", 4);\n        uniformBuffer.addUniform(\"clearCoatColorAtDistance\", 1);\n        uniformBuffer.addUniform(\"vClearCoatTintInfos\", 2);\n        uniformBuffer.addUniform(\"clearCoatTintMatrix\", 16);\n    }\n\n    /**\n     * Makes a duplicate of the current configuration into another one.\n     * @param clearCoatConfiguration define the config where to copy the info\n     */\n    public copyTo(clearCoatConfiguration: PBRClearCoatConfiguration): void {\n        SerializationHelper.Clone(() => clearCoatConfiguration, this);\n    }\n\n    /**\n     * Serializes this clear coat configuration.\n     * @returns - An object with the serialized config.\n     */\n    public serialize(): any {\n        return SerializationHelper.Serialize(this);\n    }\n\n    /**\n     * Parses a anisotropy Configuration from a serialized object.\n     * @param source - Serialized object.\n     * @param scene Defines the scene we are parsing for\n     * @param rootUrl Defines the rootUrl to load from\n     */\n    public parse(source: any, scene: Scene, rootUrl: string): void {\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\n    }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}