{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\nimport { Tools } from '../../Misc/tools';\n/**\r\n * Manage the keyboard inputs to control the movement of an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar ArcRotateCameraKeyboardMoveInput =\n/** @class */\nfunction () {\n  function ArcRotateCameraKeyboardMoveInput() {\n    /**\r\n     * Defines the list of key codes associated with the up action (increase alpha)\r\n     */\n    this.keysUp = [38];\n    /**\r\n     * Defines the list of key codes associated with the down action (decrease alpha)\r\n     */\n\n    this.keysDown = [40];\n    /**\r\n     * Defines the list of key codes associated with the left action (increase beta)\r\n     */\n\n    this.keysLeft = [37];\n    /**\r\n     * Defines the list of key codes associated with the right action (decrease beta)\r\n     */\n\n    this.keysRight = [39];\n    /**\r\n     * Defines the list of key codes associated with the reset action.\r\n     * Those keys reset the camera to its last stored state (with the method camera.storeState())\r\n     */\n\n    this.keysReset = [220];\n    /**\r\n     * Defines the panning sensibility of the inputs.\r\n     * (How fast is the camera panning)\r\n     */\n\n    this.panningSensibility = 50.0;\n    /**\r\n     * Defines the zooming sensibility of the inputs.\r\n     * (How fast is the camera zooming)\r\n     */\n\n    this.zoomingSensibility = 25.0;\n    /**\r\n     * Defines whether maintaining the alt key down switch the movement mode from\r\n     * orientation to zoom.\r\n     */\n\n    this.useAltToZoom = true;\n    /**\r\n     * Rotation speed of the camera\r\n     */\n\n    this.angularSpeed = 0.01;\n    this._keys = new Array();\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this; // was there a second variable defined?\n\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n      _this._keys = [];\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n      var evt = info.event;\n\n      if (!evt.metaKey) {\n        if (info.type === KeyboardEventTypes.KEYDOWN) {\n          _this._ctrlPressed = evt.ctrlKey;\n          _this._altPressed = evt.altKey;\n\n          if (_this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1 || _this.keysReset.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index === -1) {\n              _this._keys.push(evt.keyCode);\n            }\n\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        } else {\n          if (_this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1 || _this.keysReset.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index >= 0) {\n              _this._keys.splice(index, 1);\n            }\n\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.detachControl = function (ignored) {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n\n    this._keys = [];\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.checkInputs = function () {\n    if (this._onKeyboardObserver) {\n      var camera = this.camera;\n\n      for (var index = 0; index < this._keys.length; index++) {\n        var keyCode = this._keys[index];\n\n        if (this.keysLeft.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningX -= 1 / this.panningSensibility;\n          } else {\n            camera.inertialAlphaOffset -= this.angularSpeed;\n          }\n        } else if (this.keysUp.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningY += 1 / this.panningSensibility;\n          } else if (this._altPressed && this.useAltToZoom) {\n            camera.inertialRadiusOffset += 1 / this.zoomingSensibility;\n          } else {\n            camera.inertialBetaOffset -= this.angularSpeed;\n          }\n        } else if (this.keysRight.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningX += 1 / this.panningSensibility;\n          } else {\n            camera.inertialAlphaOffset += this.angularSpeed;\n          }\n        } else if (this.keysDown.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningY -= 1 / this.panningSensibility;\n          } else if (this._altPressed && this.useAltToZoom) {\n            camera.inertialRadiusOffset -= 1 / this.zoomingSensibility;\n          } else {\n            camera.inertialBetaOffset += this.angularSpeed;\n          }\n        } else if (this.keysReset.indexOf(keyCode) !== -1) {\n          if (camera.useInputToRestoreState) {\n            camera.restoreState();\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraKeyboardMoveInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.getSimpleName = function () {\n    return \"keyboard\";\n  };\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysUp\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysDown\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysLeft\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysRight\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysReset\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"panningSensibility\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"zoomingSensibility\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"useAltToZoom\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"angularSpeed\", void 0);\n\n  return ArcRotateCameraKeyboardMoveInput;\n}();\n\nexport { ArcRotateCameraKeyboardMoveInput };\nCameraInputTypes[\"ArcRotateCameraKeyboardMoveInput\"] = ArcRotateCameraKeyboardMoveInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/arcRotateCameraKeyboardMoveInput.ts"],"names":[],"mappings":";AACA,SAAS,SAAT,QAA0B,uBAA1B;AAIA,SAAuB,gBAAvB,QAA+C,mCAA/C;AAEA,SAAuB,kBAAvB,QAAiD,6BAAjD;AACA,SAAS,KAAT,QAAsB,kBAAtB;AAEA;;;;;AAIA,IAAA,gCAAA;AAAA;AAAA,YAAA;AAAA,WAAA,gCAAA,GAAA;AAMI;;;AAIO,SAAA,MAAA,GAAS,CAAC,EAAD,CAAT;AAEP;;;;AAIO,SAAA,QAAA,GAAW,CAAC,EAAD,CAAX;AAEP;;;;AAIO,SAAA,QAAA,GAAW,CAAC,EAAD,CAAX;AAEP;;;;AAIO,SAAA,SAAA,GAAY,CAAC,EAAD,CAAZ;AAEP;;;;;AAKO,SAAA,SAAA,GAAY,CAAC,GAAD,CAAZ;AAEP;;;;;AAKO,SAAA,kBAAA,GAA6B,IAA7B;AAEP;;;;;AAKO,SAAA,kBAAA,GAA6B,IAA7B;AAEP;;;;;AAKO,SAAA,YAAA,GAAwB,IAAxB;AAEP;;;;AAIO,SAAA,YAAA,GAAe,IAAf;AAEC,SAAA,KAAA,GAAQ,IAAI,KAAJ,EAAR;AAwJX;AAhJG;;;;;;AAIO,EAAA,gCAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,gBAArB,EAA+C;AAA/C,QAAA,KAAA,GAAA,IAAA,CAA+C,CAC3C;;;AACA,IAAA,gBAAgB,GAAG,KAAK,CAAC,gCAAN,CAAuC,SAAvC,CAAnB;;AAEA,QAAI,KAAK,qBAAT,EAAgC;AAC5B;AACH;;AAED,SAAK,MAAL,GAAc,KAAK,MAAL,CAAY,QAAZ,EAAd;AACA,SAAK,OAAL,GAAe,KAAK,MAAL,CAAY,SAAZ,EAAf;AAEA,SAAK,qBAAL,GAA6B,KAAK,OAAL,CAAa,sBAAb,CAAoC,GAApC,CAAwC,YAAA;AACjE,MAAA,KAAI,CAAC,KAAL,GAAa,EAAb;AACH,KAF4B,CAA7B;AAIA,SAAK,mBAAL,GAA2B,KAAK,MAAL,CAAY,oBAAZ,CAAiC,GAAjC,CAAqC,UAAC,IAAD,EAAK;AACjE,UAAI,GAAG,GAAG,IAAI,CAAC,KAAf;;AACA,UAAI,CAAC,GAAG,CAAC,OAAT,EAAkB;AACd,YAAI,IAAI,CAAC,IAAL,KAAc,kBAAkB,CAAC,OAArC,EAA8C;AAC1C,UAAA,KAAI,CAAC,YAAL,GAAoB,GAAG,CAAC,OAAxB;AACA,UAAA,KAAI,CAAC,WAAL,GAAmB,GAAG,CAAC,MAAvB;;AAEA,cAAI,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,GAAG,CAAC,OAAxB,MAAqC,CAAC,CAAtC,IAA2C,KAAI,CAAC,QAAL,CAAc,OAAd,CAAsB,GAAG,CAAC,OAA1B,MAAuC,CAAC,CAAnF,IAAwF,KAAI,CAAC,QAAL,CAAc,OAAd,CAAsB,GAAG,CAAC,OAA1B,MAAuC,CAAC,CAAhI,IAAqI,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,GAAG,CAAC,OAA3B,MAAwC,CAAC,CAA9K,IAAmL,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,GAAG,CAAC,OAA3B,MAAwC,CAAC,CAAhO,EAAmO;AAC/N,gBAAI,KAAK,GAAG,KAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,GAAG,CAAC,OAAvB,CAAZ;;AAEA,gBAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,cAAA,KAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,GAAG,CAAC,OAApB;AACH;;AAED,gBAAI,GAAG,CAAC,cAAR,EAAwB;AACpB,kBAAI,CAAC,gBAAL,EAAuB;AACnB,gBAAA,GAAG,CAAC,cAAJ;AACH;AACJ;AACJ;AACJ,SAjBD,MAiBO;AACH,cAAI,KAAI,CAAC,MAAL,CAAY,OAAZ,CAAoB,GAAG,CAAC,OAAxB,MAAqC,CAAC,CAAtC,IAA2C,KAAI,CAAC,QAAL,CAAc,OAAd,CAAsB,GAAG,CAAC,OAA1B,MAAuC,CAAC,CAAnF,IAAwF,KAAI,CAAC,QAAL,CAAc,OAAd,CAAsB,GAAG,CAAC,OAA1B,MAAuC,CAAC,CAAhI,IAAqI,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,GAAG,CAAC,OAA3B,MAAwC,CAAC,CAA9K,IAAmL,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,GAAG,CAAC,OAA3B,MAAwC,CAAC,CAAhO,EAAmO;AAC/N,gBAAI,KAAK,GAAG,KAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,GAAG,CAAC,OAAvB,CAAZ;;AAEA,gBAAI,KAAK,IAAI,CAAb,EAAgB;AACZ,cAAA,KAAI,CAAC,KAAL,CAAW,MAAX,CAAkB,KAAlB,EAAyB,CAAzB;AACH;;AAED,gBAAI,GAAG,CAAC,cAAR,EAAwB;AACpB,kBAAI,CAAC,gBAAL,EAAuB;AACnB,gBAAA,GAAG,CAAC,cAAJ;AACH;AACJ;AACJ;AACJ;AACJ;AACJ,KApC0B,CAA3B;AAqCH,GApDM;AA2DP;;;;;;AAIO,EAAA,gCAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,OAArB,EAAkC;AAC9B,QAAI,KAAK,MAAT,EAAiB;AACb,UAAI,KAAK,mBAAT,EAA8B;AAC1B,aAAK,MAAL,CAAY,oBAAZ,CAAiC,MAAjC,CAAwC,KAAK,mBAA7C;AACH;;AACD,UAAI,KAAK,qBAAT,EAAgC;AAC5B,aAAK,OAAL,CAAa,sBAAb,CAAoC,MAApC,CAA2C,KAAK,qBAAhD;AACH;;AACD,WAAK,mBAAL,GAA2B,IAA3B;AACA,WAAK,qBAAL,GAA6B,IAA7B;AACH;;AAED,SAAK,KAAL,GAAa,EAAb;AACH,GAbM;AAeP;;;;;;AAIO,EAAA,gCAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACI,QAAI,KAAK,mBAAT,EAA8B;AAC1B,UAAI,MAAM,GAAG,KAAK,MAAlB;;AAEA,WAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,GAAG,KAAK,KAAL,CAAW,MAAvC,EAA+C,KAAK,EAApD,EAAwD;AACpD,YAAI,OAAO,GAAG,KAAK,KAAL,CAAW,KAAX,CAAd;;AACA,YAAI,KAAK,QAAL,CAAc,OAAd,CAAsB,OAAtB,MAAmC,CAAC,CAAxC,EAA2C;AACvC,cAAI,KAAK,YAAL,IAAqB,KAAK,MAAL,CAAY,kBAArC,EAAyD;AACrD,YAAA,MAAM,CAAC,gBAAP,IAA2B,IAAI,KAAK,kBAApC;AACH,WAFD,MAEO;AACH,YAAA,MAAM,CAAC,mBAAP,IAA8B,KAAK,YAAnC;AACH;AACJ,SAND,MAMO,IAAI,KAAK,MAAL,CAAY,OAAZ,CAAoB,OAApB,MAAiC,CAAC,CAAtC,EAAyC;AAC5C,cAAI,KAAK,YAAL,IAAqB,KAAK,MAAL,CAAY,kBAArC,EAAyD;AACrD,YAAA,MAAM,CAAC,gBAAP,IAA2B,IAAI,KAAK,kBAApC;AACH,WAFD,MAEO,IAAI,KAAK,WAAL,IAAoB,KAAK,YAA7B,EAA2C;AAC9C,YAAA,MAAM,CAAC,oBAAP,IAA+B,IAAI,KAAK,kBAAxC;AACH,WAFM,MAEA;AACH,YAAA,MAAM,CAAC,kBAAP,IAA6B,KAAK,YAAlC;AACH;AACJ,SARM,MAQA,IAAI,KAAK,SAAL,CAAe,OAAf,CAAuB,OAAvB,MAAoC,CAAC,CAAzC,EAA4C;AAC/C,cAAI,KAAK,YAAL,IAAqB,KAAK,MAAL,CAAY,kBAArC,EAAyD;AACrD,YAAA,MAAM,CAAC,gBAAP,IAA2B,IAAI,KAAK,kBAApC;AACH,WAFD,MAEO;AACH,YAAA,MAAM,CAAC,mBAAP,IAA8B,KAAK,YAAnC;AACH;AACJ,SANM,MAMA,IAAI,KAAK,QAAL,CAAc,OAAd,CAAsB,OAAtB,MAAmC,CAAC,CAAxC,EAA2C;AAC9C,cAAI,KAAK,YAAL,IAAqB,KAAK,MAAL,CAAY,kBAArC,EAAyD;AACrD,YAAA,MAAM,CAAC,gBAAP,IAA2B,IAAI,KAAK,kBAApC;AACH,WAFD,MAEO,IAAI,KAAK,WAAL,IAAoB,KAAK,YAA7B,EAA2C;AAC9C,YAAA,MAAM,CAAC,oBAAP,IAA+B,IAAI,KAAK,kBAAxC;AACH,WAFM,MAEA;AACH,YAAA,MAAM,CAAC,kBAAP,IAA6B,KAAK,YAAlC;AACH;AACJ,SARM,MAQA,IAAI,KAAK,SAAL,CAAe,OAAf,CAAuB,OAAvB,MAAoC,CAAC,CAAzC,EAA4C;AAC/C,cAAI,MAAM,CAAC,sBAAX,EAAmC;AAC/B,YAAA,MAAM,CAAC,YAAP;AACH;AACJ;AACJ;AACJ;AACJ,GAzCM;AA2CP;;;;;;AAIO,EAAA,gCAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,kCAAP;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,gCAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACI,WAAO,UAAP;AACH,GAFM;;AA3MP,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,0CAAA,E,QAAA,E,KAAqB,CAArB,CAAA;;AAMA,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,0CAAA,E,UAAA,E,KAAuB,CAAvB,CAAA;;AAMA,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,0CAAA,E,UAAA,E,KAAuB,CAAvB,CAAA;;AAMA,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,0CAAA,E,WAAA,E,KAAwB,CAAxB,CAAA;;AAOA,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,0CAAA,E,WAAA,E,KAAyB,CAAzB,CAAA;;AAOA,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,0CAAA,E,oBAAA,E,KAAyC,CAAzC,CAAA;;AAOA,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,0CAAA,E,oBAAA,E,KAAyC,CAAzC,CAAA;;AAOA,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,0CAAA,E,cAAA,E,KAAoC,CAApC,CAAA;;AAMA,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,0CAAA,E,cAAA,E,KAA2B,CAA3B,CAAA;;AA0JJ,SAAA,gCAAA;AAAC,CAxND,EAAA;;SAAa,gC;AA0NP,gBAAiB,CAAC,kCAAD,CAAjB,GAAwD,gCAAxD","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { Observer } from \"../../Misc/observable\";\r\nimport { Scene } from \"../../scene\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { Engine } from \"../../Engines/engine\";\r\nimport { KeyboardInfo, KeyboardEventTypes } from \"../../Events/keyboardEvents\";\r\nimport { Tools } from '../../Misc/tools';\r\n\r\n/**\r\n * Manage the keyboard inputs to control the movement of an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class ArcRotateCameraKeyboardMoveInput implements ICameraInput<ArcRotateCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: ArcRotateCamera;\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the up action (increase alpha)\r\n     */\r\n    @serialize()\r\n    public keysUp = [38];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the down action (decrease alpha)\r\n     */\r\n    @serialize()\r\n    public keysDown = [40];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the left action (increase beta)\r\n     */\r\n    @serialize()\r\n    public keysLeft = [37];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the right action (decrease beta)\r\n     */\r\n    @serialize()\r\n    public keysRight = [39];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the reset action.\r\n     * Those keys reset the camera to its last stored state (with the method camera.storeState())\r\n     */\r\n    @serialize()\r\n    public keysReset = [220];\r\n\r\n    /**\r\n     * Defines the panning sensibility of the inputs.\r\n     * (How fast is the camera panning)\r\n     */\r\n    @serialize()\r\n    public panningSensibility: number = 50.0;\r\n\r\n    /**\r\n     * Defines the zooming sensibility of the inputs.\r\n     * (How fast is the camera zooming)\r\n     */\r\n    @serialize()\r\n    public zoomingSensibility: number = 25.0;\r\n\r\n    /**\r\n     * Defines whether maintaining the alt key down switch the movement mode from\r\n     * orientation to zoom.\r\n     */\r\n    @serialize()\r\n    public useAltToZoom: boolean = true;\r\n\r\n    /**\r\n     * Rotation speed of the camera\r\n     */\r\n    @serialize()\r\n    public angularSpeed = 0.01;\r\n\r\n    private _keys = new Array<number>();\r\n    private _ctrlPressed: boolean;\r\n    private _altPressed: boolean;\r\n    private _onCanvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\r\n    private _engine: Engine;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // was there a second variable defined?\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n\r\n        if (this._onCanvasBlurObserver) {\r\n            return;\r\n        }\r\n\r\n        this._scene = this.camera.getScene();\r\n        this._engine = this._scene.getEngine();\r\n\r\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\r\n            this._keys = [];\r\n        });\r\n\r\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\r\n            let evt = info.event;\r\n            if (!evt.metaKey) {\r\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                    this._ctrlPressed = evt.ctrlKey;\r\n                    this._altPressed = evt.altKey;\r\n\r\n                    if (this.keysUp.indexOf(evt.keyCode) !== -1 || this.keysDown.indexOf(evt.keyCode) !== -1 || this.keysLeft.indexOf(evt.keyCode) !== -1 || this.keysRight.indexOf(evt.keyCode) !== -1 || this.keysReset.indexOf(evt.keyCode) !== -1) {\r\n                        var index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index === -1) {\r\n                            this._keys.push(evt.keyCode);\r\n                        }\r\n\r\n                        if (evt.preventDefault) {\r\n                            if (!noPreventDefault) {\r\n                                evt.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (this.keysUp.indexOf(evt.keyCode) !== -1 || this.keysDown.indexOf(evt.keyCode) !== -1 || this.keysLeft.indexOf(evt.keyCode) !== -1 || this.keysRight.indexOf(evt.keyCode) !== -1 || this.keysReset.indexOf(evt.keyCode) !== -1) {\r\n                        var index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index >= 0) {\r\n                            this._keys.splice(index, 1);\r\n                        }\r\n\r\n                        if (evt.preventDefault) {\r\n                            if (!noPreventDefault) {\r\n                                evt.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        if (this._scene) {\r\n            if (this._onKeyboardObserver) {\r\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\r\n            }\r\n            if (this._onCanvasBlurObserver) {\r\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\r\n            }\r\n            this._onKeyboardObserver = null;\r\n            this._onCanvasBlurObserver = null;\r\n        }\r\n\r\n        this._keys = [];\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._onKeyboardObserver) {\r\n            var camera = this.camera;\r\n\r\n            for (var index = 0; index < this._keys.length; index++) {\r\n                var keyCode = this._keys[index];\r\n                if (this.keysLeft.indexOf(keyCode) !== -1) {\r\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\r\n                        camera.inertialPanningX -= 1 / this.panningSensibility;\r\n                    } else {\r\n                        camera.inertialAlphaOffset -= this.angularSpeed;\r\n                    }\r\n                } else if (this.keysUp.indexOf(keyCode) !== -1) {\r\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\r\n                        camera.inertialPanningY += 1 / this.panningSensibility;\r\n                    } else if (this._altPressed && this.useAltToZoom) {\r\n                        camera.inertialRadiusOffset += 1 / this.zoomingSensibility;\r\n                    } else {\r\n                        camera.inertialBetaOffset -= this.angularSpeed;\r\n                    }\r\n                } else if (this.keysRight.indexOf(keyCode) !== -1) {\r\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\r\n                        camera.inertialPanningX += 1 / this.panningSensibility;\r\n                    } else {\r\n                        camera.inertialAlphaOffset += this.angularSpeed;\r\n                    }\r\n                } else if (this.keysDown.indexOf(keyCode) !== -1) {\r\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\r\n                        camera.inertialPanningY -= 1 / this.panningSensibility;\r\n                    } else if (this._altPressed && this.useAltToZoom) {\r\n                        camera.inertialRadiusOffset -= 1 / this.zoomingSensibility;\r\n                    } else {\r\n                        camera.inertialBetaOffset += this.angularSpeed;\r\n                    }\r\n                } else if (this.keysReset.indexOf(keyCode) !== -1) {\r\n                    if (camera.useInputToRestoreState) {\r\n                        camera.restoreState();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraKeyboardMoveInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"keyboard\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"ArcRotateCameraKeyboardMoveInput\"] = ArcRotateCameraKeyboardMoveInput;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}