{"ast":null,"code":"import { Effect } from \"../../Materials/effect\";\nvar name = 'pbrBlockAlphaFresnel';\nvar shader = \"#ifdef ALPHAFRESNEL\\n#if defined(ALPHATEST) || defined(ALPHABLEND)\\nstruct alphaFresnelOutParams\\n{\\nfloat alpha;\\n};\\n#define pbr_inline\\nvoid alphaFresnelBlock(\\nconst in vec3 normalW,\\nconst in vec3 viewDirectionW,\\nconst in float alpha,\\nconst in float microSurface,\\nout alphaFresnelOutParams outParams\\n)\\n{\\n\\n\\n\\nfloat opacityPerceptual=alpha;\\n#ifdef LINEARALPHAFRESNEL\\nfloat opacity0=opacityPerceptual;\\n#else\\nfloat opacity0=opacityPerceptual*opacityPerceptual;\\n#endif\\nfloat opacity90=fresnelGrazingReflectance(opacity0);\\nvec3 normalForward=faceforward(normalW,-viewDirectionW,normalW);\\n\\noutParams.alpha=getReflectanceFromAnalyticalBRDFLookup_Jones(saturate(dot(viewDirectionW,normalForward)),vec3(opacity0),vec3(opacity90),sqrt(microSurface)).x;\\n#ifdef ALPHATEST\\nif (outParams.alpha<ALPHATESTVALUE)\\ndiscard;\\n#ifndef ALPHABLEND\\n\\noutParams.alpha=1.0;\\n#endif\\n#endif\\n}\\n#endif\\n#endif\\n\";\nEffect.IncludesShadersStore[name] = shader;\n/** @hidden */\n\nexport var pbrBlockAlphaFresnel = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Shaders/ShadersInclude/pbrBlockAlphaFresnel.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,wBAAvB;AAEA,IAAI,IAAI,GAAG,sBAAX;AACA,IAAI,MAAM,GAAG,+4BAAb;AAyCA,MAAM,CAAC,oBAAP,CAA4B,IAA5B,IAAoC,MAApC;AACA;;AACA,OAAO,IAAI,oBAAoB,GAAG;AAAE,EAAA,IAAI,EAAA,IAAN;AAAQ,EAAA,MAAM,EAAA;AAAd,CAA3B","sourcesContent":["import { Effect } from \"../../Materials/effect\";\n\nlet name = 'pbrBlockAlphaFresnel';\nlet shader = `#ifdef ALPHAFRESNEL\n#if defined(ALPHATEST) || defined(ALPHABLEND)\nstruct alphaFresnelOutParams\n{\nfloat alpha;\n};\n#define pbr_inline\nvoid alphaFresnelBlock(\nconst in vec3 normalW,\nconst in vec3 viewDirectionW,\nconst in float alpha,\nconst in float microSurface,\nout alphaFresnelOutParams outParams\n)\n{\n\n\n\nfloat opacityPerceptual=alpha;\n#ifdef LINEARALPHAFRESNEL\nfloat opacity0=opacityPerceptual;\n#else\nfloat opacity0=opacityPerceptual*opacityPerceptual;\n#endif\nfloat opacity90=fresnelGrazingReflectance(opacity0);\nvec3 normalForward=faceforward(normalW,-viewDirectionW,normalW);\n\noutParams.alpha=getReflectanceFromAnalyticalBRDFLookup_Jones(saturate(dot(viewDirectionW,normalForward)),vec3(opacity0),vec3(opacity90),sqrt(microSurface)).x;\n#ifdef ALPHATEST\nif (outParams.alpha<ALPHATESTVALUE)\ndiscard;\n#ifndef ALPHABLEND\n\noutParams.alpha=1.0;\n#endif\n#endif\n}\n#endif\n#endif\n`;\n\nEffect.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport var pbrBlockAlphaFresnel = { name, shader };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}