{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable\";\nimport { DomManagement } from \"../Misc/domManagement\";\nimport { EngineStore } from \"./engineStore\";\nimport { _DevTools } from '../Misc/devTools';\nimport { ThinEngine } from './thinEngine';\nimport { PerformanceMonitor } from '../Misc/performanceMonitor';\nimport { PerfCounter } from '../Misc/perfCounter';\nimport { WebGLDataBuffer } from '../Meshes/WebGL/webGLDataBuffer';\nimport { Logger } from '../Misc/logger';\nimport \"./Extensions/engine.alpha\";\nimport \"./Extensions/engine.readTexture\";\nimport \"./Extensions/engine.dynamicBuffer\";\n/**\r\n * The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio\r\n */\n\nvar Engine =\n/** @class */\nfunction (_super) {\n  __extends(Engine, _super);\n  /**\r\n   * Creates a new engine\r\n   * @param canvasOrContext defines the canvas or WebGL context to use for rendering. If you provide a WebGL context, Babylon.js will not hook events on the canvas (like pointers, keyboards, etc...) so no event observables will be available. This is mostly used when Babylon.js is used as a plugin on a system which alreay used the WebGL context\r\n   * @param antialias defines enable antialiasing (default: false)\r\n   * @param options defines further options to be sent to the getContext() function\r\n   * @param adaptToDeviceRatio defines whether to adapt to the device's viewport characteristics (default: false)\r\n   */\n\n\n  function Engine(canvasOrContext, antialias, options, adaptToDeviceRatio) {\n    if (adaptToDeviceRatio === void 0) {\n      adaptToDeviceRatio = false;\n    }\n\n    var _this = _super.call(this, canvasOrContext, antialias, options, adaptToDeviceRatio) || this; // Members\n\n    /**\r\n     * Gets or sets a boolean to enable/disable IndexedDB support and avoid XHR on .manifest\r\n     **/\n\n\n    _this.enableOfflineSupport = false;\n    /**\r\n     * Gets or sets a boolean to enable/disable checking manifest if IndexedDB support is enabled (js will always consider the database is up to date)\r\n     **/\n\n    _this.disableManifestCheck = false;\n    /**\r\n     * Gets the list of created scenes\r\n     */\n\n    _this.scenes = new Array();\n    /**\r\n     * Event raised when a new scene is created\r\n     */\n\n    _this.onNewSceneAddedObservable = new Observable();\n    /**\r\n     * Gets the list of created postprocesses\r\n     */\n\n    _this.postProcesses = new Array();\n    /**\r\n     * Gets a boolean indicating if the pointer is currently locked\r\n     */\n\n    _this.isPointerLock = false; // Observables\n\n    /**\r\n     * Observable event triggered each time the rendering canvas is resized\r\n     */\n\n    _this.onResizeObservable = new Observable();\n    /**\r\n     * Observable event triggered each time the canvas loses focus\r\n     */\n\n    _this.onCanvasBlurObservable = new Observable();\n    /**\r\n     * Observable event triggered each time the canvas gains focus\r\n     */\n\n    _this.onCanvasFocusObservable = new Observable();\n    /**\r\n     * Observable event triggered each time the canvas receives pointerout event\r\n     */\n\n    _this.onCanvasPointerOutObservable = new Observable();\n    /**\r\n     * Observable raised when the engine begins a new frame\r\n     */\n\n    _this.onBeginFrameObservable = new Observable();\n    /**\r\n     * If set, will be used to request the next animation frame for the render loop\r\n     */\n\n    _this.customAnimationFrameRequester = null;\n    /**\r\n     * Observable raised when the engine ends the current frame\r\n     */\n\n    _this.onEndFrameObservable = new Observable();\n    /**\r\n     * Observable raised when the engine is about to compile a shader\r\n     */\n\n    _this.onBeforeShaderCompilationObservable = new Observable();\n    /**\r\n     * Observable raised when the engine has jsut compiled a shader\r\n     */\n\n    _this.onAfterShaderCompilationObservable = new Observable(); // Deterministic lockstepMaxSteps\n\n    _this._deterministicLockstep = false;\n    _this._lockstepMaxSteps = 4;\n    _this._timeStep = 1 / 60; // FPS\n\n    _this._fps = 60;\n    _this._deltaTime = 0;\n    /** @hidden */\n\n    _this._drawCalls = new PerfCounter();\n    /** Gets or sets the tab index to set to the rendering canvas. 1 is the minimum value to set to be able to capture keyboard events */\n\n    _this.canvasTabIndex = 1;\n    /**\r\n     * Turn this value on if you want to pause FPS computation when in background\r\n     */\n\n    _this.disablePerformanceMonitorInBackground = false;\n    _this._performanceMonitor = new PerformanceMonitor();\n    Engine.Instances.push(_this);\n\n    if (!canvasOrContext) {\n      return _this;\n    }\n\n    options = _this._creationOptions;\n\n    if (canvasOrContext.getContext) {\n      var canvas_1 = canvasOrContext;\n\n      _this._onCanvasFocus = function () {\n        _this.onCanvasFocusObservable.notifyObservers(_this);\n      };\n\n      _this._onCanvasBlur = function () {\n        _this.onCanvasBlurObservable.notifyObservers(_this);\n      };\n\n      canvas_1.addEventListener(\"focus\", _this._onCanvasFocus);\n      canvas_1.addEventListener(\"blur\", _this._onCanvasBlur);\n\n      _this._onBlur = function () {\n        if (_this.disablePerformanceMonitorInBackground) {\n          _this._performanceMonitor.disable();\n        }\n\n        _this._windowIsBackground = true;\n      };\n\n      _this._onFocus = function () {\n        if (_this.disablePerformanceMonitorInBackground) {\n          _this._performanceMonitor.enable();\n        }\n\n        _this._windowIsBackground = false;\n      };\n\n      _this._onCanvasPointerOut = function (ev) {\n        _this.onCanvasPointerOutObservable.notifyObservers(ev);\n      };\n\n      canvas_1.addEventListener(\"pointerout\", _this._onCanvasPointerOut);\n\n      if (DomManagement.IsWindowObjectExist()) {\n        var hostWindow = _this.getHostWindow();\n\n        hostWindow.addEventListener(\"blur\", _this._onBlur);\n        hostWindow.addEventListener(\"focus\", _this._onFocus);\n        var anyDoc_1 = document; // Fullscreen\n\n        _this._onFullscreenChange = function () {\n          if (anyDoc_1.fullscreen !== undefined) {\n            _this.isFullscreen = anyDoc_1.fullscreen;\n          } else if (anyDoc_1.mozFullScreen !== undefined) {\n            _this.isFullscreen = anyDoc_1.mozFullScreen;\n          } else if (anyDoc_1.webkitIsFullScreen !== undefined) {\n            _this.isFullscreen = anyDoc_1.webkitIsFullScreen;\n          } else if (anyDoc_1.msIsFullScreen !== undefined) {\n            _this.isFullscreen = anyDoc_1.msIsFullScreen;\n          } // Pointer lock\n\n\n          if (_this.isFullscreen && _this._pointerLockRequested && canvas_1) {\n            Engine._RequestPointerlock(canvas_1);\n          }\n        };\n\n        document.addEventListener(\"fullscreenchange\", _this._onFullscreenChange, false);\n        document.addEventListener(\"mozfullscreenchange\", _this._onFullscreenChange, false);\n        document.addEventListener(\"webkitfullscreenchange\", _this._onFullscreenChange, false);\n        document.addEventListener(\"msfullscreenchange\", _this._onFullscreenChange, false); // Pointer lock\n\n        _this._onPointerLockChange = function () {\n          _this.isPointerLock = anyDoc_1.mozPointerLockElement === canvas_1 || anyDoc_1.webkitPointerLockElement === canvas_1 || anyDoc_1.msPointerLockElement === canvas_1 || anyDoc_1.pointerLockElement === canvas_1;\n        };\n\n        document.addEventListener(\"pointerlockchange\", _this._onPointerLockChange, false);\n        document.addEventListener(\"mspointerlockchange\", _this._onPointerLockChange, false);\n        document.addEventListener(\"mozpointerlockchange\", _this._onPointerLockChange, false);\n        document.addEventListener(\"webkitpointerlockchange\", _this._onPointerLockChange, false); // Create Audio Engine if needed.\n\n        if (!Engine.audioEngine && options.audioEngine && Engine.AudioEngineFactory) {\n          Engine.audioEngine = Engine.AudioEngineFactory(_this.getRenderingCanvas());\n        }\n      }\n\n      _this._connectVREvents();\n\n      _this.enableOfflineSupport = Engine.OfflineProviderFactory !== undefined;\n\n      if (!options.doNotHandleTouchAction) {\n        _this._disableTouchAction();\n      }\n\n      _this._deterministicLockstep = !!options.deterministicLockstep;\n      _this._lockstepMaxSteps = options.lockstepMaxSteps || 0;\n      _this._timeStep = options.timeStep || 1 / 60;\n    } // Load WebVR Devices\n\n\n    _this._prepareVRComponent();\n\n    if (options.autoEnableWebVR) {\n      _this.initWebVR();\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(Engine, \"NpmPackage\", {\n    /**\r\n     * Returns the current npm package of the sdk\r\n     */\n    // Not mixed with Version for tooling purpose.\n    get: function () {\n      return ThinEngine.NpmPackage;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine, \"Version\", {\n    /**\r\n     * Returns the current version of the framework\r\n     */\n    get: function () {\n      return ThinEngine.Version;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine, \"Instances\", {\n    /** Gets the list of created engines */\n    get: function () {\n      return EngineStore.Instances;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine, \"LastCreatedEngine\", {\n    /**\r\n     * Gets the latest created engine\r\n     */\n    get: function () {\n      return EngineStore.LastCreatedEngine;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine, \"LastCreatedScene\", {\n    /**\r\n     * Gets the latest created scene\r\n     */\n    get: function () {\n      return EngineStore.LastCreatedScene;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Will flag all materials in all scenes in all engines as dirty to trigger new shader compilation\r\n   * @param flag defines which part of the materials must be marked as dirty\r\n   * @param predicate defines a predicate used to filter which materials should be affected\r\n   */\n\n  Engine.MarkAllMaterialsAsDirty = function (flag, predicate) {\n    for (var engineIndex = 0; engineIndex < Engine.Instances.length; engineIndex++) {\n      var engine = Engine.Instances[engineIndex];\n\n      for (var sceneIndex = 0; sceneIndex < engine.scenes.length; sceneIndex++) {\n        engine.scenes[sceneIndex].markAllMaterialsAsDirty(flag, predicate);\n      }\n    }\n  };\n  /**\r\n   * Method called to create the default loading screen.\r\n   * This can be overriden in your own app.\r\n   * @param canvas The rendering canvas element\r\n   * @returns The loading screen\r\n   */\n\n\n  Engine.DefaultLoadingScreenFactory = function (canvas) {\n    throw _DevTools.WarnImport(\"LoadingScreen\");\n  };\n\n  Object.defineProperty(Engine.prototype, \"_supportsHardwareTextureRescaling\", {\n    get: function () {\n      return !!Engine._RescalePostProcessFactory;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine.prototype, \"performanceMonitor\", {\n    /**\r\n     * Gets the performance monitor attached to this engine\r\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n     */\n    get: function () {\n      return this._performanceMonitor;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Events\n\n  /**\r\n   * Gets the HTML element used to attach event listeners\r\n   * @returns a HTML element\r\n   */\n\n  Engine.prototype.getInputElement = function () {\n    return this._renderingCanvas;\n  };\n  /**\r\n   * Gets current aspect ratio\r\n   * @param viewportOwner defines the camera to use to get the aspect ratio\r\n   * @param useScreen defines if screen size must be used (or the current render target if any)\r\n   * @returns a number defining the aspect ratio\r\n   */\n\n\n  Engine.prototype.getAspectRatio = function (viewportOwner, useScreen) {\n    if (useScreen === void 0) {\n      useScreen = false;\n    }\n\n    var viewport = viewportOwner.viewport;\n    return this.getRenderWidth(useScreen) * viewport.width / (this.getRenderHeight(useScreen) * viewport.height);\n  };\n  /**\r\n   * Gets current screen aspect ratio\r\n   * @returns a number defining the aspect ratio\r\n   */\n\n\n  Engine.prototype.getScreenAspectRatio = function () {\n    return this.getRenderWidth(true) / this.getRenderHeight(true);\n  };\n  /**\r\n   * Gets the client rect of the HTML canvas attached with the current webGL context\r\n   * @returns a client rectanglee\r\n   */\n\n\n  Engine.prototype.getRenderingCanvasClientRect = function () {\n    if (!this._renderingCanvas) {\n      return null;\n    }\n\n    return this._renderingCanvas.getBoundingClientRect();\n  };\n  /**\r\n   * Gets the client rect of the HTML element used for events\r\n   * @returns a client rectanglee\r\n   */\n\n\n  Engine.prototype.getInputElementClientRect = function () {\n    if (!this._renderingCanvas) {\n      return null;\n    }\n\n    return this.getInputElement().getBoundingClientRect();\n  };\n  /**\r\n   * Gets a boolean indicating that the engine is running in deterministic lock step mode\r\n   * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\r\n   * @returns true if engine is in deterministic lock step mode\r\n   */\n\n\n  Engine.prototype.isDeterministicLockStep = function () {\n    return this._deterministicLockstep;\n  };\n  /**\r\n   * Gets the max steps when engine is running in deterministic lock step\r\n   * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\r\n   * @returns the max steps\r\n   */\n\n\n  Engine.prototype.getLockstepMaxSteps = function () {\n    return this._lockstepMaxSteps;\n  };\n  /**\r\n   * Returns the time in ms between steps when using deterministic lock step.\r\n   * @returns time step in (ms)\r\n   */\n\n\n  Engine.prototype.getTimeStep = function () {\n    return this._timeStep * 1000;\n  };\n  /**\r\n   * Force the mipmap generation for the given render target texture\r\n   * @param texture defines the render target texture to use\r\n   * @param unbind defines whether or not to unbind the texture after generation. Defaults to true.\r\n   */\n\n\n  Engine.prototype.generateMipMapsForCubemap = function (texture, unbind) {\n    if (unbind === void 0) {\n      unbind = true;\n    }\n\n    if (texture.generateMipMaps) {\n      var gl = this._gl;\n\n      this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n\n      gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n\n      if (unbind) {\n        this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n      }\n    }\n  };\n  /** States */\n\n  /**\r\n   * Set various states to the webGL context\r\n   * @param culling defines backface culling state\r\n   * @param zOffset defines the value to apply to zOffset (0 by default)\r\n   * @param force defines if states must be applied even if cache is up to date\r\n   * @param reverseSide defines if culling must be reversed (CCW instead of CW and CW instead of CCW)\r\n   */\n\n\n  Engine.prototype.setState = function (culling, zOffset, force, reverseSide) {\n    if (zOffset === void 0) {\n      zOffset = 0;\n    }\n\n    if (reverseSide === void 0) {\n      reverseSide = false;\n    } // Culling\n\n\n    if (this._depthCullingState.cull !== culling || force) {\n      this._depthCullingState.cull = culling;\n    } // Cull face\n\n\n    var cullFace = this.cullBackFaces ? this._gl.BACK : this._gl.FRONT;\n\n    if (this._depthCullingState.cullFace !== cullFace || force) {\n      this._depthCullingState.cullFace = cullFace;\n    } // Z offset\n\n\n    this.setZOffset(zOffset); // Front face\n\n    var frontFace = reverseSide ? this._gl.CW : this._gl.CCW;\n\n    if (this._depthCullingState.frontFace !== frontFace || force) {\n      this._depthCullingState.frontFace = frontFace;\n    }\n  };\n  /**\r\n   * Set the z offset to apply to current rendering\r\n   * @param value defines the offset to apply\r\n   */\n\n\n  Engine.prototype.setZOffset = function (value) {\n    this._depthCullingState.zOffset = value;\n  };\n  /**\r\n   * Gets the current value of the zOffset\r\n   * @returns the current zOffset state\r\n   */\n\n\n  Engine.prototype.getZOffset = function () {\n    return this._depthCullingState.zOffset;\n  };\n  /**\r\n   * Enable or disable depth buffering\r\n   * @param enable defines the state to set\r\n   */\n\n\n  Engine.prototype.setDepthBuffer = function (enable) {\n    this._depthCullingState.depthTest = enable;\n  };\n  /**\r\n   * Gets a boolean indicating if depth writing is enabled\r\n   * @returns the current depth writing state\r\n   */\n\n\n  Engine.prototype.getDepthWrite = function () {\n    return this._depthCullingState.depthMask;\n  };\n  /**\r\n   * Enable or disable depth writing\r\n   * @param enable defines the state to set\r\n   */\n\n\n  Engine.prototype.setDepthWrite = function (enable) {\n    this._depthCullingState.depthMask = enable;\n  };\n  /**\r\n   * Gets a boolean indicating if stencil buffer is enabled\r\n   * @returns the current stencil buffer state\r\n   */\n\n\n  Engine.prototype.getStencilBuffer = function () {\n    return this._stencilState.stencilTest;\n  };\n  /**\r\n   * Enable or disable the stencil buffer\r\n   * @param enable defines if the stencil buffer must be enabled or disabled\r\n   */\n\n\n  Engine.prototype.setStencilBuffer = function (enable) {\n    this._stencilState.stencilTest = enable;\n  };\n  /**\r\n   * Gets the current stencil mask\r\n   * @returns a number defining the new stencil mask to use\r\n   */\n\n\n  Engine.prototype.getStencilMask = function () {\n    return this._stencilState.stencilMask;\n  };\n  /**\r\n   * Sets the current stencil mask\r\n   * @param mask defines the new stencil mask to use\r\n   */\n\n\n  Engine.prototype.setStencilMask = function (mask) {\n    this._stencilState.stencilMask = mask;\n  };\n  /**\r\n   * Gets the current stencil function\r\n   * @returns a number defining the stencil function to use\r\n   */\n\n\n  Engine.prototype.getStencilFunction = function () {\n    return this._stencilState.stencilFunc;\n  };\n  /**\r\n   * Gets the current stencil reference value\r\n   * @returns a number defining the stencil reference value to use\r\n   */\n\n\n  Engine.prototype.getStencilFunctionReference = function () {\n    return this._stencilState.stencilFuncRef;\n  };\n  /**\r\n   * Gets the current stencil mask\r\n   * @returns a number defining the stencil mask to use\r\n   */\n\n\n  Engine.prototype.getStencilFunctionMask = function () {\n    return this._stencilState.stencilFuncMask;\n  };\n  /**\r\n   * Sets the current stencil function\r\n   * @param stencilFunc defines the new stencil function to use\r\n   */\n\n\n  Engine.prototype.setStencilFunction = function (stencilFunc) {\n    this._stencilState.stencilFunc = stencilFunc;\n  };\n  /**\r\n   * Sets the current stencil reference\r\n   * @param reference defines the new stencil reference to use\r\n   */\n\n\n  Engine.prototype.setStencilFunctionReference = function (reference) {\n    this._stencilState.stencilFuncRef = reference;\n  };\n  /**\r\n   * Sets the current stencil mask\r\n   * @param mask defines the new stencil mask to use\r\n   */\n\n\n  Engine.prototype.setStencilFunctionMask = function (mask) {\n    this._stencilState.stencilFuncMask = mask;\n  };\n  /**\r\n   * Gets the current stencil operation when stencil fails\r\n   * @returns a number defining stencil operation to use when stencil fails\r\n   */\n\n\n  Engine.prototype.getStencilOperationFail = function () {\n    return this._stencilState.stencilOpStencilFail;\n  };\n  /**\r\n   * Gets the current stencil operation when depth fails\r\n   * @returns a number defining stencil operation to use when depth fails\r\n   */\n\n\n  Engine.prototype.getStencilOperationDepthFail = function () {\n    return this._stencilState.stencilOpDepthFail;\n  };\n  /**\r\n   * Gets the current stencil operation when stencil passes\r\n   * @returns a number defining stencil operation to use when stencil passes\r\n   */\n\n\n  Engine.prototype.getStencilOperationPass = function () {\n    return this._stencilState.stencilOpStencilDepthPass;\n  };\n  /**\r\n   * Sets the stencil operation to use when stencil fails\r\n   * @param operation defines the stencil operation to use when stencil fails\r\n   */\n\n\n  Engine.prototype.setStencilOperationFail = function (operation) {\n    this._stencilState.stencilOpStencilFail = operation;\n  };\n  /**\r\n   * Sets the stencil operation to use when depth fails\r\n   * @param operation defines the stencil operation to use when depth fails\r\n   */\n\n\n  Engine.prototype.setStencilOperationDepthFail = function (operation) {\n    this._stencilState.stencilOpDepthFail = operation;\n  };\n  /**\r\n   * Sets the stencil operation to use when stencil passes\r\n   * @param operation defines the stencil operation to use when stencil passes\r\n   */\n\n\n  Engine.prototype.setStencilOperationPass = function (operation) {\n    this._stencilState.stencilOpStencilDepthPass = operation;\n  };\n  /**\r\n   * Sets a boolean indicating if the dithering state is enabled or disabled\r\n   * @param value defines the dithering state\r\n   */\n\n\n  Engine.prototype.setDitheringState = function (value) {\n    if (value) {\n      this._gl.enable(this._gl.DITHER);\n    } else {\n      this._gl.disable(this._gl.DITHER);\n    }\n  };\n  /**\r\n   * Sets a boolean indicating if the rasterizer state is enabled or disabled\r\n   * @param value defines the rasterizer state\r\n   */\n\n\n  Engine.prototype.setRasterizerState = function (value) {\n    if (value) {\n      this._gl.disable(this._gl.RASTERIZER_DISCARD);\n    } else {\n      this._gl.enable(this._gl.RASTERIZER_DISCARD);\n    }\n  };\n  /**\r\n   * Gets the current depth function\r\n   * @returns a number defining the depth function\r\n   */\n\n\n  Engine.prototype.getDepthFunction = function () {\n    return this._depthCullingState.depthFunc;\n  };\n  /**\r\n   * Sets the current depth function\r\n   * @param depthFunc defines the function to use\r\n   */\n\n\n  Engine.prototype.setDepthFunction = function (depthFunc) {\n    this._depthCullingState.depthFunc = depthFunc;\n  };\n  /**\r\n   * Sets the current depth function to GREATER\r\n   */\n\n\n  Engine.prototype.setDepthFunctionToGreater = function () {\n    this._depthCullingState.depthFunc = this._gl.GREATER;\n  };\n  /**\r\n   * Sets the current depth function to GEQUAL\r\n   */\n\n\n  Engine.prototype.setDepthFunctionToGreaterOrEqual = function () {\n    this._depthCullingState.depthFunc = this._gl.GEQUAL;\n  };\n  /**\r\n   * Sets the current depth function to LESS\r\n   */\n\n\n  Engine.prototype.setDepthFunctionToLess = function () {\n    this._depthCullingState.depthFunc = this._gl.LESS;\n  };\n  /**\r\n   * Sets the current depth function to LEQUAL\r\n   */\n\n\n  Engine.prototype.setDepthFunctionToLessOrEqual = function () {\n    this._depthCullingState.depthFunc = this._gl.LEQUAL;\n  };\n  /**\r\n   * Caches the the state of the stencil buffer\r\n   */\n\n\n  Engine.prototype.cacheStencilState = function () {\n    this._cachedStencilBuffer = this.getStencilBuffer();\n    this._cachedStencilFunction = this.getStencilFunction();\n    this._cachedStencilMask = this.getStencilMask();\n    this._cachedStencilOperationPass = this.getStencilOperationPass();\n    this._cachedStencilOperationFail = this.getStencilOperationFail();\n    this._cachedStencilOperationDepthFail = this.getStencilOperationDepthFail();\n    this._cachedStencilReference = this.getStencilFunctionReference();\n  };\n  /**\r\n   * Restores the state of the stencil buffer\r\n   */\n\n\n  Engine.prototype.restoreStencilState = function () {\n    this.setStencilFunction(this._cachedStencilFunction);\n    this.setStencilMask(this._cachedStencilMask);\n    this.setStencilBuffer(this._cachedStencilBuffer);\n    this.setStencilOperationPass(this._cachedStencilOperationPass);\n    this.setStencilOperationFail(this._cachedStencilOperationFail);\n    this.setStencilOperationDepthFail(this._cachedStencilOperationDepthFail);\n    this.setStencilFunctionReference(this._cachedStencilReference);\n  };\n  /**\r\n   * Directly set the WebGL Viewport\r\n   * @param x defines the x coordinate of the viewport (in screen space)\r\n   * @param y defines the y coordinate of the viewport (in screen space)\r\n   * @param width defines the width of the viewport (in screen space)\r\n   * @param height defines the height of the viewport (in screen space)\r\n   * @return the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state\r\n   */\n\n\n  Engine.prototype.setDirectViewport = function (x, y, width, height) {\n    var currentViewport = this._cachedViewport;\n    this._cachedViewport = null;\n\n    this._viewport(x, y, width, height);\n\n    return currentViewport;\n  };\n  /**\r\n   * Executes a scissor clear (ie. a clear on a specific portion of the screen)\r\n   * @param x defines the x-coordinate of the top left corner of the clear rectangle\r\n   * @param y defines the y-coordinate of the corner of the clear rectangle\r\n   * @param width defines the width of the clear rectangle\r\n   * @param height defines the height of the clear rectangle\r\n   * @param clearColor defines the clear color\r\n   */\n\n\n  Engine.prototype.scissorClear = function (x, y, width, height, clearColor) {\n    this.enableScissor(x, y, width, height);\n    this.clear(clearColor, true, true, true);\n    this.disableScissor();\n  };\n  /**\r\n   * Enable scissor test on a specific rectangle (ie. render will only be executed on a specific portion of the screen)\r\n   * @param x defines the x-coordinate of the top left corner of the clear rectangle\r\n   * @param y defines the y-coordinate of the corner of the clear rectangle\r\n   * @param width defines the width of the clear rectangle\r\n   * @param height defines the height of the clear rectangle\r\n   */\n\n\n  Engine.prototype.enableScissor = function (x, y, width, height) {\n    var gl = this._gl; // Change state\n\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(x, y, width, height);\n  };\n  /**\r\n   * Disable previously set scissor test rectangle\r\n   */\n\n\n  Engine.prototype.disableScissor = function () {\n    var gl = this._gl;\n    gl.disable(gl.SCISSOR_TEST);\n  };\n\n  Engine.prototype._reportDrawCall = function () {\n    this._drawCalls.addCount(1, false);\n  };\n  /**\r\n   * Initializes a webVR display and starts listening to display change events\r\n   * The onVRDisplayChangedObservable will be notified upon these changes\r\n   * @returns The onVRDisplayChangedObservable\r\n   */\n\n\n  Engine.prototype.initWebVR = function () {\n    throw _DevTools.WarnImport(\"WebVRCamera\");\n  };\n  /** @hidden */\n\n\n  Engine.prototype._prepareVRComponent = function () {// Do nothing as the engine side effect will overload it\n  };\n  /** @hidden */\n\n\n  Engine.prototype._connectVREvents = function (canvas, document) {// Do nothing as the engine side effect will overload it\n  };\n  /** @hidden */\n\n\n  Engine.prototype._submitVRFrame = function () {// Do nothing as the engine side effect will overload it\n  };\n  /**\r\n   * Call this function to leave webVR mode\r\n   * Will do nothing if webVR is not supported or if there is no webVR device\r\n   * @see https://doc.babylonjs.com/how_to/webvr_camera\r\n   */\n\n\n  Engine.prototype.disableVR = function () {// Do nothing as the engine side effect will overload it\n  };\n  /**\r\n   * Gets a boolean indicating that the system is in VR mode and is presenting\r\n   * @returns true if VR mode is engaged\r\n   */\n\n\n  Engine.prototype.isVRPresenting = function () {\n    return false;\n  };\n  /** @hidden */\n\n\n  Engine.prototype._requestVRFrame = function () {// Do nothing as the engine side effect will overload it\n  };\n  /** @hidden */\n\n\n  Engine.prototype._loadFileAsync = function (url, offlineProvider, useArrayBuffer) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this._loadFile(url, function (data) {\n        resolve(data);\n      }, undefined, offlineProvider, useArrayBuffer, function (request, exception) {\n        reject(exception);\n      });\n    });\n  };\n  /**\r\n  * Gets the source code of the vertex shader associated with a specific webGL program\r\n  * @param program defines the program to use\r\n  * @returns a string containing the source code of the vertex shader associated with the program\r\n  */\n\n\n  Engine.prototype.getVertexShaderSource = function (program) {\n    var shaders = this._gl.getAttachedShaders(program);\n\n    if (!shaders) {\n      return null;\n    }\n\n    return this._gl.getShaderSource(shaders[0]);\n  };\n  /**\r\n   * Gets the source code of the fragment shader associated with a specific webGL program\r\n   * @param program defines the program to use\r\n   * @returns a string containing the source code of the fragment shader associated with the program\r\n   */\n\n\n  Engine.prototype.getFragmentShaderSource = function (program) {\n    var shaders = this._gl.getAttachedShaders(program);\n\n    if (!shaders) {\n      return null;\n    }\n\n    return this._gl.getShaderSource(shaders[1]);\n  };\n  /**\r\n   * Sets a depth stencil texture from a render target to the according uniform.\r\n   * @param channel The texture channel\r\n   * @param uniform The uniform to set\r\n   * @param texture The render target texture containing the depth stencil texture to apply\r\n   */\n\n\n  Engine.prototype.setDepthStencilTexture = function (channel, uniform, texture) {\n    if (channel === undefined) {\n      return;\n    }\n\n    if (uniform) {\n      this._boundUniforms[channel] = uniform;\n    }\n\n    if (!texture || !texture.depthStencilTexture) {\n      this._setTexture(channel, null);\n    } else {\n      this._setTexture(channel, texture, false, true);\n    }\n  };\n  /**\r\n   * Sets a texture to the webGL context from a postprocess\r\n   * @param channel defines the channel to use\r\n   * @param postProcess defines the source postprocess\r\n   */\n\n\n  Engine.prototype.setTextureFromPostProcess = function (channel, postProcess) {\n    this._bindTexture(channel, postProcess ? postProcess._textures.data[postProcess._currentRenderTextureInd] : null);\n  };\n  /**\r\n   * Binds the output of the passed in post process to the texture channel specified\r\n   * @param channel The channel the texture should be bound to\r\n   * @param postProcess The post process which's output should be bound\r\n   */\n\n\n  Engine.prototype.setTextureFromPostProcessOutput = function (channel, postProcess) {\n    this._bindTexture(channel, postProcess ? postProcess._outputTexture : null);\n  };\n\n  Engine.prototype._rebuildBuffers = function () {\n    // Index / Vertex\n    for (var _i = 0, _a = this.scenes; _i < _a.length; _i++) {\n      var scene = _a[_i];\n      scene.resetCachedMaterial();\n\n      scene._rebuildGeometries();\n\n      scene._rebuildTextures();\n    }\n\n    _super.prototype._rebuildBuffers.call(this);\n  };\n  /** @hidden */\n\n\n  Engine.prototype._renderFrame = function () {\n    for (var index = 0; index < this._activeRenderLoops.length; index++) {\n      var renderFunction = this._activeRenderLoops[index];\n      renderFunction();\n    }\n  };\n\n  Engine.prototype._renderLoop = function () {\n    if (!this._contextWasLost) {\n      var shouldRender = true;\n\n      if (!this.renderEvenInBackground && this._windowIsBackground) {\n        shouldRender = false;\n      }\n\n      if (shouldRender) {\n        // Start new frame\n        this.beginFrame(); // Child canvases\n\n        if (!this._renderViews()) {\n          // Main frame\n          this._renderFrame();\n        } // Present\n\n\n        this.endFrame();\n      }\n    }\n\n    if (this._activeRenderLoops.length > 0) {\n      // Register new frame\n      if (this.customAnimationFrameRequester) {\n        this.customAnimationFrameRequester.requestID = this._queueNewFrame(this.customAnimationFrameRequester.renderFunction || this._boundRenderFunction, this.customAnimationFrameRequester);\n        this._frameHandler = this.customAnimationFrameRequester.requestID;\n      } else if (this.isVRPresenting()) {\n        this._requestVRFrame();\n      } else {\n        this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\n      }\n    } else {\n      this._renderingQueueLaunched = false;\n    }\n  };\n  /** @hidden */\n\n\n  Engine.prototype._renderViews = function () {\n    return false;\n  };\n  /**\r\n   * Toggle full screen mode\r\n   * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n   */\n\n\n  Engine.prototype.switchFullscreen = function (requestPointerLock) {\n    if (this.isFullscreen) {\n      this.exitFullscreen();\n    } else {\n      this.enterFullscreen(requestPointerLock);\n    }\n  };\n  /**\r\n   * Enters full screen mode\r\n   * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n   */\n\n\n  Engine.prototype.enterFullscreen = function (requestPointerLock) {\n    if (!this.isFullscreen) {\n      this._pointerLockRequested = requestPointerLock;\n\n      if (this._renderingCanvas) {\n        Engine._RequestFullscreen(this._renderingCanvas);\n      }\n    }\n  };\n  /**\r\n   * Exits full screen mode\r\n   */\n\n\n  Engine.prototype.exitFullscreen = function () {\n    if (this.isFullscreen) {\n      Engine._ExitFullscreen();\n    }\n  };\n  /**\r\n   * Enters Pointerlock mode\r\n   */\n\n\n  Engine.prototype.enterPointerlock = function () {\n    if (this._renderingCanvas) {\n      Engine._RequestPointerlock(this._renderingCanvas);\n    }\n  };\n  /**\r\n   * Exits Pointerlock mode\r\n   */\n\n\n  Engine.prototype.exitPointerlock = function () {\n    Engine._ExitPointerlock();\n  };\n  /**\r\n   * Begin a new frame\r\n   */\n\n\n  Engine.prototype.beginFrame = function () {\n    this._measureFps();\n\n    this.onBeginFrameObservable.notifyObservers(this);\n\n    _super.prototype.beginFrame.call(this);\n  };\n  /**\r\n   * Enf the current frame\r\n   */\n\n\n  Engine.prototype.endFrame = function () {\n    _super.prototype.endFrame.call(this);\n\n    this._submitVRFrame();\n\n    this.onEndFrameObservable.notifyObservers(this);\n  };\n\n  Engine.prototype.resize = function () {\n    // We're not resizing the size of the canvas while in VR mode & presenting\n    if (this.isVRPresenting()) {\n      return;\n    }\n\n    _super.prototype.resize.call(this);\n  };\n  /**\r\n   * Force a specific size of the canvas\r\n   * @param width defines the new canvas' width\r\n   * @param height defines the new canvas' height\r\n   * @returns true if the size was changed\r\n   */\n\n\n  Engine.prototype.setSize = function (width, height) {\n    if (!this._renderingCanvas) {\n      return false;\n    }\n\n    if (!_super.prototype.setSize.call(this, width, height)) {\n      return false;\n    }\n\n    if (this.scenes) {\n      for (var index = 0; index < this.scenes.length; index++) {\n        var scene = this.scenes[index];\n\n        for (var camIndex = 0; camIndex < scene.cameras.length; camIndex++) {\n          var cam = scene.cameras[camIndex];\n          cam._currentRenderId = 0;\n        }\n      }\n\n      if (this.onResizeObservable.hasObservers()) {\n        this.onResizeObservable.notifyObservers(this);\n      }\n    }\n\n    return true;\n  };\n\n  Engine.prototype._deletePipelineContext = function (pipelineContext) {\n    var webGLPipelineContext = pipelineContext;\n\n    if (webGLPipelineContext && webGLPipelineContext.program) {\n      if (webGLPipelineContext.transformFeedback) {\n        this.deleteTransformFeedback(webGLPipelineContext.transformFeedback);\n        webGLPipelineContext.transformFeedback = null;\n      }\n    }\n\n    _super.prototype._deletePipelineContext.call(this, pipelineContext);\n  };\n\n  Engine.prototype.createShaderProgram = function (pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings) {\n    if (transformFeedbackVaryings === void 0) {\n      transformFeedbackVaryings = null;\n    }\n\n    context = context || this._gl;\n    this.onBeforeShaderCompilationObservable.notifyObservers(this);\n\n    var program = _super.prototype.createShaderProgram.call(this, pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings);\n\n    this.onAfterShaderCompilationObservable.notifyObservers(this);\n    return program;\n  };\n\n  Engine.prototype._createShaderProgram = function (pipelineContext, vertexShader, fragmentShader, context, transformFeedbackVaryings) {\n    if (transformFeedbackVaryings === void 0) {\n      transformFeedbackVaryings = null;\n    }\n\n    var shaderProgram = context.createProgram();\n    pipelineContext.program = shaderProgram;\n\n    if (!shaderProgram) {\n      throw new Error(\"Unable to create program\");\n    }\n\n    context.attachShader(shaderProgram, vertexShader);\n    context.attachShader(shaderProgram, fragmentShader);\n\n    if (this.webGLVersion > 1 && transformFeedbackVaryings) {\n      var transformFeedback = this.createTransformFeedback();\n      this.bindTransformFeedback(transformFeedback);\n      this.setTranformFeedbackVaryings(shaderProgram, transformFeedbackVaryings);\n      pipelineContext.transformFeedback = transformFeedback;\n    }\n\n    context.linkProgram(shaderProgram);\n\n    if (this.webGLVersion > 1 && transformFeedbackVaryings) {\n      this.bindTransformFeedback(null);\n    }\n\n    pipelineContext.context = context;\n    pipelineContext.vertexShader = vertexShader;\n    pipelineContext.fragmentShader = fragmentShader;\n\n    if (!pipelineContext.isParallelCompiled) {\n      this._finalizePipelineContext(pipelineContext);\n    }\n\n    return shaderProgram;\n  };\n\n  Engine.prototype._releaseTexture = function (texture) {\n    _super.prototype._releaseTexture.call(this, texture); // Set output texture of post process to null if the texture has been released/disposed\n\n\n    this.scenes.forEach(function (scene) {\n      scene.postProcesses.forEach(function (postProcess) {\n        if (postProcess._outputTexture == texture) {\n          postProcess._outputTexture = null;\n        }\n      });\n      scene.cameras.forEach(function (camera) {\n        camera._postProcesses.forEach(function (postProcess) {\n          if (postProcess) {\n            if (postProcess._outputTexture == texture) {\n              postProcess._outputTexture = null;\n            }\n          }\n        });\n      });\n    });\n  };\n  /**\r\n   * @hidden\r\n   * Rescales a texture\r\n   * @param source input texutre\r\n   * @param destination destination texture\r\n   * @param scene scene to use to render the resize\r\n   * @param internalFormat format to use when resizing\r\n   * @param onComplete callback to be called when resize has completed\r\n   */\n\n\n  Engine.prototype._rescaleTexture = function (source, destination, scene, internalFormat, onComplete) {\n    var _this = this;\n\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);\n\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR);\n\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\n\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\n\n    var rtt = this.createRenderTargetTexture({\n      width: destination.width,\n      height: destination.height\n    }, {\n      generateMipMaps: false,\n      type: 0,\n      samplingMode: 2,\n      generateDepthBuffer: false,\n      generateStencilBuffer: false\n    });\n\n    if (!this._rescalePostProcess && Engine._RescalePostProcessFactory) {\n      this._rescalePostProcess = Engine._RescalePostProcessFactory(this);\n    }\n\n    this._rescalePostProcess.getEffect().executeWhenCompiled(function () {\n      _this._rescalePostProcess.onApply = function (effect) {\n        effect._bindTexture(\"textureSampler\", source);\n      };\n\n      var hostingScene = scene;\n\n      if (!hostingScene) {\n        hostingScene = _this.scenes[_this.scenes.length - 1];\n      }\n\n      hostingScene.postProcessManager.directRender([_this._rescalePostProcess], rtt, true);\n\n      _this._bindTextureDirectly(_this._gl.TEXTURE_2D, destination, true);\n\n      _this._gl.copyTexImage2D(_this._gl.TEXTURE_2D, 0, internalFormat, 0, 0, destination.width, destination.height, 0);\n\n      _this.unBindFramebuffer(rtt);\n\n      _this._releaseTexture(rtt);\n\n      if (onComplete) {\n        onComplete();\n      }\n    });\n  }; // FPS\n\n  /**\r\n   * Gets the current framerate\r\n   * @returns a number representing the framerate\r\n   */\n\n\n  Engine.prototype.getFps = function () {\n    return this._fps;\n  };\n  /**\r\n   * Gets the time spent between current and previous frame\r\n   * @returns a number representing the delta time in ms\r\n   */\n\n\n  Engine.prototype.getDeltaTime = function () {\n    return this._deltaTime;\n  };\n\n  Engine.prototype._measureFps = function () {\n    this._performanceMonitor.sampleFrame();\n\n    this._fps = this._performanceMonitor.averageFPS;\n    this._deltaTime = this._performanceMonitor.instantaneousFrameTime || 0;\n  };\n  /** @hidden */\n\n\n  Engine.prototype._uploadImageToTexture = function (texture, image, faceIndex, lod) {\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    if (lod === void 0) {\n      lod = 0;\n    }\n\n    var gl = this._gl;\n\n    var textureType = this._getWebGLTextureType(texture.type);\n\n    var format = this._getInternalFormat(texture.format);\n\n    var internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, format);\n\n    var bindTarget = texture.isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n\n    this._bindTextureDirectly(bindTarget, texture, true);\n\n    this._unpackFlipY(texture.invertY);\n\n    var target = gl.TEXTURE_2D;\n\n    if (texture.isCube) {\n      target = gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex;\n    }\n\n    gl.texImage2D(target, lod, internalFormat, format, textureType, image);\n\n    this._bindTextureDirectly(bindTarget, null, true);\n  };\n  /**\r\n   * Updates the sample count of a render target texture\r\n   * @see https://doc.babylonjs.com/features/webgl2#multisample-render-targets\r\n   * @param texture defines the texture to update\r\n   * @param samples defines the sample count to set\r\n   * @returns the effective sample count (could be 0 if multisample render targets are not supported)\r\n   */\n\n\n  Engine.prototype.updateRenderTargetTextureSampleCount = function (texture, samples) {\n    if (this.webGLVersion < 2 || !texture) {\n      return 1;\n    }\n\n    if (texture.samples === samples) {\n      return samples;\n    }\n\n    var gl = this._gl;\n    samples = Math.min(samples, this.getCaps().maxMSAASamples); // Dispose previous render buffers\n\n    if (texture._depthStencilBuffer) {\n      gl.deleteRenderbuffer(texture._depthStencilBuffer);\n      texture._depthStencilBuffer = null;\n    }\n\n    if (texture._MSAAFramebuffer) {\n      gl.deleteFramebuffer(texture._MSAAFramebuffer);\n      texture._MSAAFramebuffer = null;\n    }\n\n    if (texture._MSAARenderBuffer) {\n      gl.deleteRenderbuffer(texture._MSAARenderBuffer);\n      texture._MSAARenderBuffer = null;\n    }\n\n    if (samples > 1 && gl.renderbufferStorageMultisample) {\n      var framebuffer = gl.createFramebuffer();\n\n      if (!framebuffer) {\n        throw new Error(\"Unable to create multi sampled framebuffer\");\n      }\n\n      texture._MSAAFramebuffer = framebuffer;\n\n      this._bindUnboundFramebuffer(texture._MSAAFramebuffer);\n\n      var colorRenderbuffer = gl.createRenderbuffer();\n\n      if (!colorRenderbuffer) {\n        throw new Error(\"Unable to create multi sampled framebuffer\");\n      }\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, colorRenderbuffer);\n      gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, this._getRGBAMultiSampleBufferFormat(texture.type), texture.width, texture.height);\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorRenderbuffer);\n      texture._MSAARenderBuffer = colorRenderbuffer;\n    } else {\n      this._bindUnboundFramebuffer(texture._framebuffer);\n    }\n\n    texture.samples = samples;\n    texture._depthStencilBuffer = this._setupFramebufferDepthAttachments(texture._generateStencilBuffer, texture._generateDepthBuffer, texture.width, texture.height, samples);\n\n    this._bindUnboundFramebuffer(null);\n\n    return samples;\n  };\n  /**\r\n   * Updates a depth texture Comparison Mode and Function.\r\n   * If the comparison Function is equal to 0, the mode will be set to none.\r\n   * Otherwise, this only works in webgl 2 and requires a shadow sampler in the shader.\r\n   * @param texture The texture to set the comparison function for\r\n   * @param comparisonFunction The comparison function to set, 0 if no comparison required\r\n   */\n\n\n  Engine.prototype.updateTextureComparisonFunction = function (texture, comparisonFunction) {\n    if (this.webGLVersion === 1) {\n      Logger.Error(\"WebGL 1 does not support texture comparison.\");\n      return;\n    }\n\n    var gl = this._gl;\n\n    if (texture.isCube) {\n      this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\n\n      if (comparisonFunction === 0) {\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, 515);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);\n      } else {\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n      }\n\n      this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\n    } else {\n      this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\n\n      if (comparisonFunction === 0) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, 515);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.NONE);\n      } else {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n      }\n\n      this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\n    }\n\n    texture._comparisonFunction = comparisonFunction;\n  };\n  /**\r\n   * Creates a webGL buffer to use with instanciation\r\n   * @param capacity defines the size of the buffer\r\n   * @returns the webGL buffer\r\n   */\n\n\n  Engine.prototype.createInstancesBuffer = function (capacity) {\n    var buffer = this._gl.createBuffer();\n\n    if (!buffer) {\n      throw new Error(\"Unable to create instance buffer\");\n    }\n\n    var result = new WebGLDataBuffer(buffer);\n    result.capacity = capacity;\n    this.bindArrayBuffer(result);\n\n    this._gl.bufferData(this._gl.ARRAY_BUFFER, capacity, this._gl.DYNAMIC_DRAW);\n\n    return result;\n  };\n  /**\r\n   * Delete a webGL buffer used with instanciation\r\n   * @param buffer defines the webGL buffer to delete\r\n   */\n\n\n  Engine.prototype.deleteInstancesBuffer = function (buffer) {\n    this._gl.deleteBuffer(buffer);\n  };\n\n  Engine.prototype._clientWaitAsync = function (sync, flags, interval_ms) {\n    if (flags === void 0) {\n      flags = 0;\n    }\n\n    if (interval_ms === void 0) {\n      interval_ms = 10;\n    }\n\n    var gl = this._gl;\n    return new Promise(function (resolve, reject) {\n      var check = function () {\n        var res = gl.clientWaitSync(sync, flags, 0);\n\n        if (res == gl.WAIT_FAILED) {\n          reject();\n          return;\n        }\n\n        if (res == gl.TIMEOUT_EXPIRED) {\n          setTimeout(check, interval_ms);\n          return;\n        }\n\n        resolve();\n      };\n\n      check();\n    });\n  };\n  /** @hidden */\n\n\n  Engine.prototype._readPixelsAsync = function (x, y, w, h, format, type, outputBuffer) {\n    if (this._webGLVersion < 2) {\n      throw new Error(\"_readPixelsAsync only work on WebGL2+\");\n    }\n\n    var gl = this._gl;\n    var buf = gl.createBuffer();\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n    gl.bufferData(gl.PIXEL_PACK_BUFFER, outputBuffer.byteLength, gl.STREAM_READ);\n    gl.readPixels(x, y, w, h, format, type, 0);\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n    var sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n\n    if (!sync) {\n      return null;\n    }\n\n    gl.flush();\n    return this._clientWaitAsync(sync, 0, 10).then(function () {\n      gl.deleteSync(sync);\n      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n      gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, outputBuffer);\n      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n      gl.deleteBuffer(buf);\n      return outputBuffer;\n    });\n  };\n\n  Engine.prototype.dispose = function () {\n    this.hideLoadingUI();\n    this.onNewSceneAddedObservable.clear(); // Release postProcesses\n\n    while (this.postProcesses.length) {\n      this.postProcesses[0].dispose();\n    } // Rescale PP\n\n\n    if (this._rescalePostProcess) {\n      this._rescalePostProcess.dispose();\n    } // Release scenes\n\n\n    while (this.scenes.length) {\n      this.scenes[0].dispose();\n    } // Release audio engine\n\n\n    if (Engine.Instances.length === 1 && Engine.audioEngine) {\n      Engine.audioEngine.dispose();\n    } //WebVR\n\n\n    this.disableVR(); // Events\n\n    if (DomManagement.IsWindowObjectExist()) {\n      window.removeEventListener(\"blur\", this._onBlur);\n      window.removeEventListener(\"focus\", this._onFocus);\n\n      if (this._renderingCanvas) {\n        this._renderingCanvas.removeEventListener(\"focus\", this._onCanvasFocus);\n\n        this._renderingCanvas.removeEventListener(\"blur\", this._onCanvasBlur);\n\n        this._renderingCanvas.removeEventListener(\"pointerout\", this._onCanvasPointerOut);\n      }\n\n      if (DomManagement.IsDocumentAvailable()) {\n        document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\n        document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\n        document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\n        document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\n        document.removeEventListener(\"pointerlockchange\", this._onPointerLockChange);\n        document.removeEventListener(\"mspointerlockchange\", this._onPointerLockChange);\n        document.removeEventListener(\"mozpointerlockchange\", this._onPointerLockChange);\n        document.removeEventListener(\"webkitpointerlockchange\", this._onPointerLockChange);\n      }\n    }\n\n    _super.prototype.dispose.call(this); // Remove from Instances\n\n\n    var index = Engine.Instances.indexOf(this);\n\n    if (index >= 0) {\n      Engine.Instances.splice(index, 1);\n    } // Observables\n\n\n    this.onResizeObservable.clear();\n    this.onCanvasBlurObservable.clear();\n    this.onCanvasFocusObservable.clear();\n    this.onCanvasPointerOutObservable.clear();\n    this.onBeginFrameObservable.clear();\n    this.onEndFrameObservable.clear();\n  };\n\n  Engine.prototype._disableTouchAction = function () {\n    if (!this._renderingCanvas || !this._renderingCanvas.setAttribute) {\n      return;\n    }\n\n    this._renderingCanvas.setAttribute(\"touch-action\", \"none\");\n\n    this._renderingCanvas.style.touchAction = \"none\";\n    this._renderingCanvas.style.msTouchAction = \"none\";\n  }; // Loading screen\n\n  /**\r\n   * Display the loading screen\r\n   * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n   */\n\n\n  Engine.prototype.displayLoadingUI = function () {\n    if (!DomManagement.IsWindowObjectExist()) {\n      return;\n    }\n\n    var loadingScreen = this.loadingScreen;\n\n    if (loadingScreen) {\n      loadingScreen.displayLoadingUI();\n    }\n  };\n  /**\r\n   * Hide the loading screen\r\n   * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n   */\n\n\n  Engine.prototype.hideLoadingUI = function () {\n    if (!DomManagement.IsWindowObjectExist()) {\n      return;\n    }\n\n    var loadingScreen = this._loadingScreen;\n\n    if (loadingScreen) {\n      loadingScreen.hideLoadingUI();\n    }\n  };\n\n  Object.defineProperty(Engine.prototype, \"loadingScreen\", {\n    /**\r\n     * Gets the current loading screen object\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\n    get: function () {\n      if (!this._loadingScreen && this._renderingCanvas) {\n        this._loadingScreen = Engine.DefaultLoadingScreenFactory(this._renderingCanvas);\n      }\n\n      return this._loadingScreen;\n    },\n\n    /**\r\n     * Sets the current loading screen object\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\n    set: function (loadingScreen) {\n      this._loadingScreen = loadingScreen;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine.prototype, \"loadingUIText\", {\n    /**\r\n     * Sets the current loading screen text\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\n    set: function (text) {\n      this.loadingScreen.loadingUIText = text;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine.prototype, \"loadingUIBackgroundColor\", {\n    /**\r\n     * Sets the current loading screen background color\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\n    set: function (color) {\n      this.loadingScreen.loadingUIBackgroundColor = color;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Pointerlock and fullscreen */\n\n  /**\r\n   * Ask the browser to promote the current element to pointerlock mode\r\n   * @param element defines the DOM element to promote\r\n   */\n\n  Engine._RequestPointerlock = function (element) {\n    element.requestPointerLock = element.requestPointerLock || element.msRequestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;\n\n    if (element.requestPointerLock) {\n      element.requestPointerLock();\n    }\n  };\n  /**\r\n   * Asks the browser to exit pointerlock mode\r\n   */\n\n\n  Engine._ExitPointerlock = function () {\n    var anyDoc = document;\n    document.exitPointerLock = document.exitPointerLock || anyDoc.msExitPointerLock || anyDoc.mozExitPointerLock || anyDoc.webkitExitPointerLock;\n\n    if (document.exitPointerLock) {\n      document.exitPointerLock();\n    }\n  };\n  /**\r\n   * Ask the browser to promote the current element to fullscreen rendering mode\r\n   * @param element defines the DOM element to promote\r\n   */\n\n\n  Engine._RequestFullscreen = function (element) {\n    var requestFunction = element.requestFullscreen || element.msRequestFullscreen || element.webkitRequestFullscreen || element.mozRequestFullScreen;\n\n    if (!requestFunction) {\n      return;\n    }\n\n    requestFunction.call(element);\n  };\n  /**\r\n   * Asks the browser to exit fullscreen mode\r\n   */\n\n\n  Engine._ExitFullscreen = function () {\n    var anyDoc = document;\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (anyDoc.mozCancelFullScreen) {\n      anyDoc.mozCancelFullScreen();\n    } else if (anyDoc.webkitCancelFullScreen) {\n      anyDoc.webkitCancelFullScreen();\n    } else if (anyDoc.msCancelFullScreen) {\n      anyDoc.msCancelFullScreen();\n    }\n  }; // Const statics\n\n  /** Defines that alpha blending is disabled */\n\n\n  Engine.ALPHA_DISABLE = 0;\n  /** Defines that alpha blending to SRC ALPHA * SRC + DEST */\n\n  Engine.ALPHA_ADD = 1;\n  /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\n\n  Engine.ALPHA_COMBINE = 2;\n  /** Defines that alpha blending to DEST - SRC * DEST */\n\n  Engine.ALPHA_SUBTRACT = 3;\n  /** Defines that alpha blending to SRC * DEST */\n\n  Engine.ALPHA_MULTIPLY = 4;\n  /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC) * DEST */\n\n  Engine.ALPHA_MAXIMIZED = 5;\n  /** Defines that alpha blending to SRC + DEST */\n\n  Engine.ALPHA_ONEONE = 6;\n  /** Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST */\n\n  Engine.ALPHA_PREMULTIPLIED = 7;\n  /**\r\n   * Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST\r\n   * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\r\n   */\n\n  Engine.ALPHA_PREMULTIPLIED_PORTERDUFF = 8;\n  /** Defines that alpha blending to CST * SRC + (1 - CST) * DEST */\n\n  Engine.ALPHA_INTERPOLATE = 9;\n  /**\r\n   * Defines that alpha blending to SRC + (1 - SRC) * DEST\r\n   * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\r\n   */\n\n  Engine.ALPHA_SCREENMODE = 10;\n  /** Defines that the ressource is not delayed*/\n\n  Engine.DELAYLOADSTATE_NONE = 0;\n  /** Defines that the ressource was successfully delay loaded */\n\n  Engine.DELAYLOADSTATE_LOADED = 1;\n  /** Defines that the ressource is currently delay loading */\n\n  Engine.DELAYLOADSTATE_LOADING = 2;\n  /** Defines that the ressource is delayed and has not started loading */\n\n  Engine.DELAYLOADSTATE_NOTLOADED = 4; // Depht or Stencil test Constants.\n\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\n\n  Engine.NEVER = 512;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\n\n  Engine.ALWAYS = 519;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\n\n  Engine.LESS = 513;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\n\n  Engine.EQUAL = 514;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\n\n  Engine.LEQUAL = 515;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\n\n  Engine.GREATER = 516;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\n\n  Engine.GEQUAL = 518;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\n\n  Engine.NOTEQUAL = 517; // Stencil Actions Constants.\n\n  /** Passed to stencilOperation to specify that stencil value must be kept */\n\n  Engine.KEEP = 7680;\n  /** Passed to stencilOperation to specify that stencil value must be replaced */\n\n  Engine.REPLACE = 7681;\n  /** Passed to stencilOperation to specify that stencil value must be incremented */\n\n  Engine.INCR = 7682;\n  /** Passed to stencilOperation to specify that stencil value must be decremented */\n\n  Engine.DECR = 7683;\n  /** Passed to stencilOperation to specify that stencil value must be inverted */\n\n  Engine.INVERT = 5386;\n  /** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\n\n  Engine.INCR_WRAP = 34055;\n  /** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\n\n  Engine.DECR_WRAP = 34056;\n  /** Texture is not repeating outside of 0..1 UVs */\n\n  Engine.TEXTURE_CLAMP_ADDRESSMODE = 0;\n  /** Texture is repeating outside of 0..1 UVs */\n\n  Engine.TEXTURE_WRAP_ADDRESSMODE = 1;\n  /** Texture is repeating and mirrored */\n\n  Engine.TEXTURE_MIRROR_ADDRESSMODE = 2;\n  /** ALPHA */\n\n  Engine.TEXTUREFORMAT_ALPHA = 0;\n  /** LUMINANCE */\n\n  Engine.TEXTUREFORMAT_LUMINANCE = 1;\n  /** LUMINANCE_ALPHA */\n\n  Engine.TEXTUREFORMAT_LUMINANCE_ALPHA = 2;\n  /** RGB */\n\n  Engine.TEXTUREFORMAT_RGB = 4;\n  /** RGBA */\n\n  Engine.TEXTUREFORMAT_RGBA = 5;\n  /** RED */\n\n  Engine.TEXTUREFORMAT_RED = 6;\n  /** RED (2nd reference) */\n\n  Engine.TEXTUREFORMAT_R = 6;\n  /** RG */\n\n  Engine.TEXTUREFORMAT_RG = 7;\n  /** RED_INTEGER */\n\n  Engine.TEXTUREFORMAT_RED_INTEGER = 8;\n  /** RED_INTEGER (2nd reference) */\n\n  Engine.TEXTUREFORMAT_R_INTEGER = 8;\n  /** RG_INTEGER */\n\n  Engine.TEXTUREFORMAT_RG_INTEGER = 9;\n  /** RGB_INTEGER */\n\n  Engine.TEXTUREFORMAT_RGB_INTEGER = 10;\n  /** RGBA_INTEGER */\n\n  Engine.TEXTUREFORMAT_RGBA_INTEGER = 11;\n  /** UNSIGNED_BYTE */\n\n  Engine.TEXTURETYPE_UNSIGNED_BYTE = 0;\n  /** UNSIGNED_BYTE (2nd reference) */\n\n  Engine.TEXTURETYPE_UNSIGNED_INT = 0;\n  /** FLOAT */\n\n  Engine.TEXTURETYPE_FLOAT = 1;\n  /** HALF_FLOAT */\n\n  Engine.TEXTURETYPE_HALF_FLOAT = 2;\n  /** BYTE */\n\n  Engine.TEXTURETYPE_BYTE = 3;\n  /** SHORT */\n\n  Engine.TEXTURETYPE_SHORT = 4;\n  /** UNSIGNED_SHORT */\n\n  Engine.TEXTURETYPE_UNSIGNED_SHORT = 5;\n  /** INT */\n\n  Engine.TEXTURETYPE_INT = 6;\n  /** UNSIGNED_INT */\n\n  Engine.TEXTURETYPE_UNSIGNED_INTEGER = 7;\n  /** UNSIGNED_SHORT_4_4_4_4 */\n\n  Engine.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = 8;\n  /** UNSIGNED_SHORT_5_5_5_1 */\n\n  Engine.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = 9;\n  /** UNSIGNED_SHORT_5_6_5 */\n\n  Engine.TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = 10;\n  /** UNSIGNED_INT_2_10_10_10_REV */\n\n  Engine.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = 11;\n  /** UNSIGNED_INT_24_8 */\n\n  Engine.TEXTURETYPE_UNSIGNED_INT_24_8 = 12;\n  /** UNSIGNED_INT_10F_11F_11F_REV */\n\n  Engine.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = 13;\n  /** UNSIGNED_INT_5_9_9_9_REV */\n\n  Engine.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = 14;\n  /** FLOAT_32_UNSIGNED_INT_24_8_REV */\n\n  Engine.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = 15;\n  /** nearest is mag = nearest and min = nearest and mip = linear */\n\n  Engine.TEXTURE_NEAREST_SAMPLINGMODE = 1;\n  /** Bilinear is mag = linear and min = linear and mip = nearest */\n\n  Engine.TEXTURE_BILINEAR_SAMPLINGMODE = 2;\n  /** Trilinear is mag = linear and min = linear and mip = linear */\n\n  Engine.TEXTURE_TRILINEAR_SAMPLINGMODE = 3;\n  /** nearest is mag = nearest and min = nearest and mip = linear */\n\n  Engine.TEXTURE_NEAREST_NEAREST_MIPLINEAR = 8;\n  /** Bilinear is mag = linear and min = linear and mip = nearest */\n\n  Engine.TEXTURE_LINEAR_LINEAR_MIPNEAREST = 11;\n  /** Trilinear is mag = linear and min = linear and mip = linear */\n\n  Engine.TEXTURE_LINEAR_LINEAR_MIPLINEAR = 3;\n  /** mag = nearest and min = nearest and mip = nearest */\n\n  Engine.TEXTURE_NEAREST_NEAREST_MIPNEAREST = 4;\n  /** mag = nearest and min = linear and mip = nearest */\n\n  Engine.TEXTURE_NEAREST_LINEAR_MIPNEAREST = 5;\n  /** mag = nearest and min = linear and mip = linear */\n\n  Engine.TEXTURE_NEAREST_LINEAR_MIPLINEAR = 6;\n  /** mag = nearest and min = linear and mip = none */\n\n  Engine.TEXTURE_NEAREST_LINEAR = 7;\n  /** mag = nearest and min = nearest and mip = none */\n\n  Engine.TEXTURE_NEAREST_NEAREST = 1;\n  /** mag = linear and min = nearest and mip = nearest */\n\n  Engine.TEXTURE_LINEAR_NEAREST_MIPNEAREST = 9;\n  /** mag = linear and min = nearest and mip = linear */\n\n  Engine.TEXTURE_LINEAR_NEAREST_MIPLINEAR = 10;\n  /** mag = linear and min = linear and mip = none */\n\n  Engine.TEXTURE_LINEAR_LINEAR = 2;\n  /** mag = linear and min = nearest and mip = none */\n\n  Engine.TEXTURE_LINEAR_NEAREST = 12;\n  /** Explicit coordinates mode */\n\n  Engine.TEXTURE_EXPLICIT_MODE = 0;\n  /** Spherical coordinates mode */\n\n  Engine.TEXTURE_SPHERICAL_MODE = 1;\n  /** Planar coordinates mode */\n\n  Engine.TEXTURE_PLANAR_MODE = 2;\n  /** Cubic coordinates mode */\n\n  Engine.TEXTURE_CUBIC_MODE = 3;\n  /** Projection coordinates mode */\n\n  Engine.TEXTURE_PROJECTION_MODE = 4;\n  /** Skybox coordinates mode */\n\n  Engine.TEXTURE_SKYBOX_MODE = 5;\n  /** Inverse Cubic coordinates mode */\n\n  Engine.TEXTURE_INVCUBIC_MODE = 6;\n  /** Equirectangular coordinates mode */\n\n  Engine.TEXTURE_EQUIRECTANGULAR_MODE = 7;\n  /** Equirectangular Fixed coordinates mode */\n\n  Engine.TEXTURE_FIXED_EQUIRECTANGULAR_MODE = 8;\n  /** Equirectangular Fixed Mirrored coordinates mode */\n\n  Engine.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9; // Texture rescaling mode\n\n  /** Defines that texture rescaling will use a floor to find the closer power of 2 size */\n\n  Engine.SCALEMODE_FLOOR = 1;\n  /** Defines that texture rescaling will look for the nearest power of 2 size */\n\n  Engine.SCALEMODE_NEAREST = 2;\n  /** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\n\n  Engine.SCALEMODE_CEILING = 3;\n  /**\r\n   * Method called to create the default rescale post process on each engine.\r\n   */\n\n  Engine._RescalePostProcessFactory = null;\n  return Engine;\n}(ThinEngine);\n\nexport { Engine };","map":{"version":3,"sources":["../../../sourceES6/core/Engines/engine.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { IOfflineProvider } from \"../Offline/IOfflineProvider\";\r\nimport { ILoadingScreen } from \"../Loading/loadingScreen\";\r\nimport { DomManagement } from \"../Misc/domManagement\";\r\nimport { EngineStore } from \"./engineStore\";\r\nimport { _DevTools } from '../Misc/devTools';\r\nimport { WebGLPipelineContext } from './WebGL/webGLPipelineContext';\r\nimport { IPipelineContext } from './IPipelineContext';\r\nimport { ICustomAnimationFrameRequester } from '../Misc/customAnimationFrameRequester';\r\nimport { ThinEngine, EngineOptions } from './thinEngine';\r\n\r\nimport { IViewportLike, IColor4Like } from '../Maths/math.like';\r\nimport { RenderTargetTexture } from '../Materials/Textures/renderTargetTexture';\r\nimport { PerformanceMonitor } from '../Misc/performanceMonitor';\r\nimport { DataBuffer } from '../Meshes/dataBuffer';\r\nimport { PerfCounter } from '../Misc/perfCounter';\r\nimport { WebGLDataBuffer } from '../Meshes/WebGL/webGLDataBuffer';\r\nimport { Logger } from '../Misc/logger';\r\n\r\nimport \"./Extensions/engine.alpha\";\r\nimport \"./Extensions/engine.readTexture\";\r\nimport \"./Extensions/engine.dynamicBuffer\";\r\nimport { IAudioEngine } from '../Audio/Interfaces/IAudioEngine';\r\n\r\ndeclare type Material = import(\"../Materials/material\").Material;\r\ndeclare type PostProcess = import(\"../PostProcesses/postProcess\").PostProcess;\r\n\r\n/**\r\n * Defines the interface used by display changed events\r\n */\r\nexport interface IDisplayChangedEventArgs {\r\n    /** Gets the vrDisplay object (if any) */\r\n    vrDisplay: Nullable<any>;\r\n    /** Gets a boolean indicating if webVR is supported */\r\n    vrSupported: boolean;\r\n}\r\n\r\n/**\r\n * Defines the interface used by objects containing a viewport (like a camera)\r\n */\r\ninterface IViewportOwnerLike {\r\n    /**\r\n     * Gets or sets the viewport\r\n     */\r\n    viewport: IViewportLike;\r\n}\r\n\r\n/**\r\n * The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio\r\n */\r\nexport class Engine extends ThinEngine {\r\n    // Const statics\r\n\r\n    /** Defines that alpha blending is disabled */\r\n    public static readonly ALPHA_DISABLE = 0;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + DEST */\r\n    public static readonly ALPHA_ADD = 1;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_COMBINE = 2;\r\n    /** Defines that alpha blending to DEST - SRC * DEST */\r\n    public static readonly ALPHA_SUBTRACT = 3;\r\n    /** Defines that alpha blending to SRC * DEST */\r\n    public static readonly ALPHA_MULTIPLY = 4;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC) * DEST */\r\n    public static readonly ALPHA_MAXIMIZED = 5;\r\n    /** Defines that alpha blending to SRC + DEST */\r\n    public static readonly ALPHA_ONEONE = 6;\r\n    /** Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_PREMULTIPLIED = 7;\r\n    /**\r\n     * Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST\r\n     * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_PREMULTIPLIED_PORTERDUFF = 8;\r\n    /** Defines that alpha blending to CST * SRC + (1 - CST) * DEST */\r\n    public static readonly ALPHA_INTERPOLATE = 9;\r\n    /**\r\n     * Defines that alpha blending to SRC + (1 - SRC) * DEST\r\n     * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_SCREENMODE = 10;\r\n\r\n    /** Defines that the ressource is not delayed*/\r\n    public static readonly DELAYLOADSTATE_NONE = 0;\r\n    /** Defines that the ressource was successfully delay loaded */\r\n    public static readonly DELAYLOADSTATE_LOADED = 1;\r\n    /** Defines that the ressource is currently delay loading */\r\n    public static readonly DELAYLOADSTATE_LOADING = 2;\r\n    /** Defines that the ressource is delayed and has not started loading */\r\n    public static readonly DELAYLOADSTATE_NOTLOADED = 4;\r\n\r\n    // Depht or Stencil test Constants.\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\r\n    public static readonly NEVER = 512;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\r\n    public static readonly ALWAYS = 519;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\r\n    public static readonly LESS = 513;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\r\n    public static readonly EQUAL = 514;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\r\n    public static readonly LEQUAL = 515;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\r\n    public static readonly GREATER = 516;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\r\n    public static readonly GEQUAL = 518;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\r\n    public static readonly NOTEQUAL = 517;\r\n\r\n    // Stencil Actions Constants.\r\n    /** Passed to stencilOperation to specify that stencil value must be kept */\r\n    public static readonly KEEP = 7680;\r\n    /** Passed to stencilOperation to specify that stencil value must be replaced */\r\n    public static readonly REPLACE = 7681;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented */\r\n    public static readonly INCR = 7682;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented */\r\n    public static readonly DECR = 7683;\r\n    /** Passed to stencilOperation to specify that stencil value must be inverted */\r\n    public static readonly INVERT = 5386;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\r\n    public static readonly INCR_WRAP = 34055;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\r\n    public static readonly DECR_WRAP = 34056;\r\n\r\n    /** Texture is not repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_CLAMP_ADDRESSMODE = 0;\r\n    /** Texture is repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_WRAP_ADDRESSMODE = 1;\r\n    /** Texture is repeating and mirrored */\r\n    public static readonly TEXTURE_MIRROR_ADDRESSMODE = 2;\r\n\r\n    /** ALPHA */\r\n    public static readonly TEXTUREFORMAT_ALPHA = 0;\r\n    /** LUMINANCE */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE = 1;\r\n    /** LUMINANCE_ALPHA */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE_ALPHA = 2;\r\n    /** RGB */\r\n    public static readonly TEXTUREFORMAT_RGB = 4;\r\n    /** RGBA */\r\n    public static readonly TEXTUREFORMAT_RGBA = 5;\r\n    /** RED */\r\n    public static readonly TEXTUREFORMAT_RED = 6;\r\n    /** RED (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R = 6;\r\n    /** RG */\r\n    public static readonly TEXTUREFORMAT_RG = 7;\r\n    /** RED_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RED_INTEGER = 8;\r\n    /** RED_INTEGER (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R_INTEGER = 8;\r\n    /** RG_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RG_INTEGER = 9;\r\n    /** RGB_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGB_INTEGER = 10;\r\n    /** RGBA_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGBA_INTEGER = 11;\r\n\r\n    /** UNSIGNED_BYTE */\r\n    public static readonly TEXTURETYPE_UNSIGNED_BYTE = 0;\r\n    /** UNSIGNED_BYTE (2nd reference) */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT = 0;\r\n    /** FLOAT */\r\n    public static readonly TEXTURETYPE_FLOAT = 1;\r\n    /** HALF_FLOAT */\r\n    public static readonly TEXTURETYPE_HALF_FLOAT = 2;\r\n    /** BYTE */\r\n    public static readonly TEXTURETYPE_BYTE = 3;\r\n    /** SHORT */\r\n    public static readonly TEXTURETYPE_SHORT = 4;\r\n    /** UNSIGNED_SHORT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT = 5;\r\n    /** INT */\r\n    public static readonly TEXTURETYPE_INT = 6;\r\n    /** UNSIGNED_INT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INTEGER = 7;\r\n    /** UNSIGNED_SHORT_4_4_4_4 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = 8;\r\n    /** UNSIGNED_SHORT_5_5_5_1 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = 9;\r\n    /** UNSIGNED_SHORT_5_6_5 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = 10;\r\n    /** UNSIGNED_INT_2_10_10_10_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = 11;\r\n    /** UNSIGNED_INT_24_8 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_24_8 = 12;\r\n    /** UNSIGNED_INT_10F_11F_11F_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = 13;\r\n    /** UNSIGNED_INT_5_9_9_9_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = 14;\r\n    /** FLOAT_32_UNSIGNED_INT_24_8_REV */\r\n    public static readonly TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = 15;\r\n\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_SAMPLINGMODE = 1;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_BILINEAR_SAMPLINGMODE = 2;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_TRILINEAR_SAMPLINGMODE = 3;\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPLINEAR = 8;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPNEAREST = 11;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPLINEAR = 3;\r\n    /** mag = nearest and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPNEAREST = 4;\r\n    /** mag = nearest and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPNEAREST = 5;\r\n    /** mag = nearest and min = linear and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPLINEAR = 6;\r\n    /** mag = nearest and min = linear and mip = none */\r\n    public static readonly TEXTURE_NEAREST_LINEAR = 7;\r\n    /** mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_NEAREST = 1;\r\n    /** mag = linear and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPNEAREST = 9;\r\n    /** mag = linear and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPLINEAR = 10;\r\n    /** mag = linear and min = linear and mip = none */\r\n    public static readonly TEXTURE_LINEAR_LINEAR = 2;\r\n    /** mag = linear and min = nearest and mip = none */\r\n    public static readonly TEXTURE_LINEAR_NEAREST = 12;\r\n\r\n    /** Explicit coordinates mode */\r\n    public static readonly TEXTURE_EXPLICIT_MODE = 0;\r\n    /** Spherical coordinates mode */\r\n    public static readonly TEXTURE_SPHERICAL_MODE = 1;\r\n    /** Planar coordinates mode */\r\n    public static readonly TEXTURE_PLANAR_MODE = 2;\r\n    /** Cubic coordinates mode */\r\n    public static readonly TEXTURE_CUBIC_MODE = 3;\r\n    /** Projection coordinates mode */\r\n    public static readonly TEXTURE_PROJECTION_MODE = 4;\r\n    /** Skybox coordinates mode */\r\n    public static readonly TEXTURE_SKYBOX_MODE = 5;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly TEXTURE_INVCUBIC_MODE = 6;\r\n    /** Equirectangular coordinates mode */\r\n    public static readonly TEXTURE_EQUIRECTANGULAR_MODE = 7;\r\n    /** Equirectangular Fixed coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MODE = 8;\r\n    /** Equirectangular Fixed Mirrored coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\r\n\r\n    // Texture rescaling mode\r\n    /** Defines that texture rescaling will use a floor to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_FLOOR = 1;\r\n    /** Defines that texture rescaling will look for the nearest power of 2 size */\r\n    public static readonly SCALEMODE_NEAREST = 2;\r\n    /** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_CEILING = 3;\r\n\r\n    /**\r\n     * Returns the current npm package of the sdk\r\n     */\r\n    // Not mixed with Version for tooling purpose.\r\n    public static get NpmPackage(): string {\r\n        return ThinEngine.NpmPackage;\r\n    }\r\n\r\n    /**\r\n     * Returns the current version of the framework\r\n     */\r\n    public static get Version(): string {\r\n        return ThinEngine.Version;\r\n    }\r\n\r\n    /** Gets the list of created engines */\r\n    public static get Instances(): Engine[] {\r\n        return EngineStore.Instances;\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created engine\r\n     */\r\n    public static get LastCreatedEngine(): Nullable<Engine> {\r\n        return EngineStore.LastCreatedEngine;\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created scene\r\n     */\r\n    public static get LastCreatedScene(): Nullable<Scene> {\r\n        return EngineStore.LastCreatedScene;\r\n    }\r\n\r\n    /**\r\n     * Will flag all materials in all scenes in all engines as dirty to trigger new shader compilation\r\n     * @param flag defines which part of the materials must be marked as dirty\r\n     * @param predicate defines a predicate used to filter which materials should be affected\r\n     */\r\n    public static MarkAllMaterialsAsDirty(flag: number, predicate?: (mat: Material) => boolean): void {\r\n        for (var engineIndex = 0; engineIndex < Engine.Instances.length; engineIndex++) {\r\n            var engine = Engine.Instances[engineIndex];\r\n\r\n            for (var sceneIndex = 0; sceneIndex < engine.scenes.length; sceneIndex++) {\r\n                engine.scenes[sceneIndex].markAllMaterialsAsDirty(flag, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method called to create the default loading screen.\r\n     * This can be overriden in your own app.\r\n     * @param canvas The rendering canvas element\r\n     * @returns The loading screen\r\n     */\r\n    public static DefaultLoadingScreenFactory(canvas: HTMLCanvasElement): ILoadingScreen {\r\n        throw _DevTools.WarnImport(\"LoadingScreen\");\r\n    }\r\n\r\n    /**\r\n     * Method called to create the default rescale post process on each engine.\r\n     */\r\n    public static _RescalePostProcessFactory: Nullable<(engine: Engine) => PostProcess> = null;\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable IndexedDB support and avoid XHR on .manifest\r\n     **/\r\n    public enableOfflineSupport = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable checking manifest if IndexedDB support is enabled (js will always consider the database is up to date)\r\n     **/\r\n    public disableManifestCheck = false;\r\n\r\n    /**\r\n     * Gets the list of created scenes\r\n     */\r\n    public scenes = new Array<Scene>();\r\n\r\n    /**\r\n     * Event raised when a new scene is created\r\n     */\r\n    public onNewSceneAddedObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * Gets the list of created postprocesses\r\n     */\r\n    public postProcesses = new Array<PostProcess>();\r\n\r\n    /**\r\n     * Gets a boolean indicating if the pointer is currently locked\r\n     */\r\n    public isPointerLock = false;\r\n\r\n    // Observables\r\n\r\n    /**\r\n     * Observable event triggered each time the rendering canvas is resized\r\n     */\r\n    public onResizeObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas loses focus\r\n     */\r\n    public onCanvasBlurObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas gains focus\r\n     */\r\n    public onCanvasFocusObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas receives pointerout event\r\n     */\r\n    public onCanvasPointerOutObservable = new Observable<PointerEvent>();\r\n\r\n    /**\r\n     * Observable raised when the engine begins a new frame\r\n     */\r\n    public onBeginFrameObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * If set, will be used to request the next animation frame for the render loop\r\n     */\r\n    public customAnimationFrameRequester: Nullable<ICustomAnimationFrameRequester> = null;\r\n\r\n    /**\r\n     * Observable raised when the engine ends the current frame\r\n     */\r\n    public onEndFrameObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable raised when the engine is about to compile a shader\r\n     */\r\n    public onBeforeShaderCompilationObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable raised when the engine has jsut compiled a shader\r\n     */\r\n    public onAfterShaderCompilationObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Gets the audio engine\r\n     * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n     * @ignorenaming\r\n     */\r\n    public static audioEngine: IAudioEngine;\r\n\r\n    /**\r\n     * Default AudioEngine factory responsible of creating the Audio Engine.\r\n     * By default, this will create a BabylonJS Audio Engine if the workload has been embedded.\r\n     */\r\n    public static AudioEngineFactory: (hostElement: Nullable<HTMLElement>) => IAudioEngine;\r\n\r\n    /**\r\n     * Default offline support factory responsible of creating a tool used to store data locally.\r\n     * By default, this will create a Database object if the workload has been embedded.\r\n     */\r\n    public static OfflineProviderFactory: (urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck: boolean) => IOfflineProvider;\r\n\r\n    private _loadingScreen: ILoadingScreen;\r\n    private _pointerLockRequested: boolean;\r\n    private _rescalePostProcess: PostProcess;\r\n\r\n    // Deterministic lockstepMaxSteps\r\n    private _deterministicLockstep: boolean = false;\r\n    private _lockstepMaxSteps: number = 4;\r\n    private _timeStep: number = 1 / 60;\r\n\r\n    protected get _supportsHardwareTextureRescaling() {\r\n        return !!Engine._RescalePostProcessFactory;\r\n    }\r\n\r\n    // FPS\r\n    private _fps = 60;\r\n    private _deltaTime = 0;\r\n\r\n    /** @hidden */\r\n    public _drawCalls = new PerfCounter();\r\n\r\n    /** Gets or sets the tab index to set to the rendering canvas. 1 is the minimum value to set to be able to capture keyboard events */\r\n    public canvasTabIndex = 1;\r\n\r\n    /**\r\n     * Turn this value on if you want to pause FPS computation when in background\r\n     */\r\n    public disablePerformanceMonitorInBackground = false;\r\n\r\n    private _performanceMonitor = new PerformanceMonitor();\r\n    /**\r\n     * Gets the performance monitor attached to this engine\r\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n     */\r\n    public get performanceMonitor(): PerformanceMonitor {\r\n        return this._performanceMonitor;\r\n    }\r\n\r\n    // Focus\r\n    private _onFocus: () => void;\r\n    private _onBlur: () => void;\r\n    private _onCanvasPointerOut: (event: PointerEvent) => void;\r\n    private _onCanvasBlur: () => void;\r\n    private _onCanvasFocus: () => void;\r\n\r\n    private _onFullscreenChange: () => void;\r\n    private _onPointerLockChange: () => void;\r\n\r\n    // Events\r\n\r\n    /**\r\n     * Gets the HTML element used to attach event listeners\r\n     * @returns a HTML element\r\n     */\r\n    public getInputElement(): Nullable<HTMLElement> {\r\n        return this._renderingCanvas;\r\n    }\r\n\r\n    /**\r\n     * Creates a new engine\r\n     * @param canvasOrContext defines the canvas or WebGL context to use for rendering. If you provide a WebGL context, Babylon.js will not hook events on the canvas (like pointers, keyboards, etc...) so no event observables will be available. This is mostly used when Babylon.js is used as a plugin on a system which alreay used the WebGL context\r\n     * @param antialias defines enable antialiasing (default: false)\r\n     * @param options defines further options to be sent to the getContext() function\r\n     * @param adaptToDeviceRatio defines whether to adapt to the device's viewport characteristics (default: false)\r\n     */\r\n    constructor(canvasOrContext: Nullable<HTMLCanvasElement | WebGLRenderingContext>, antialias?: boolean, options?: EngineOptions, adaptToDeviceRatio: boolean = false) {\r\n        super(canvasOrContext, antialias, options, adaptToDeviceRatio);\r\n\r\n        Engine.Instances.push(this);\r\n\r\n        if (!canvasOrContext) {\r\n            return;\r\n        }\r\n\r\n        options = this._creationOptions;\r\n\r\n        if ((<any>canvasOrContext).getContext) {\r\n            let canvas = <HTMLCanvasElement>canvasOrContext;\r\n\r\n            this._onCanvasFocus = () => {\r\n                this.onCanvasFocusObservable.notifyObservers(this);\r\n            };\r\n\r\n            this._onCanvasBlur = () => {\r\n                this.onCanvasBlurObservable.notifyObservers(this);\r\n            };\r\n\r\n            canvas.addEventListener(\"focus\", this._onCanvasFocus);\r\n            canvas.addEventListener(\"blur\", this._onCanvasBlur);\r\n\r\n            this._onBlur = () => {\r\n                if (this.disablePerformanceMonitorInBackground) {\r\n                    this._performanceMonitor.disable();\r\n                }\r\n                this._windowIsBackground = true;\r\n            };\r\n\r\n            this._onFocus = () => {\r\n                if (this.disablePerformanceMonitorInBackground) {\r\n                    this._performanceMonitor.enable();\r\n                }\r\n                this._windowIsBackground = false;\r\n            };\r\n\r\n            this._onCanvasPointerOut = (ev) => {\r\n                this.onCanvasPointerOutObservable.notifyObservers(ev);\r\n            };\r\n\r\n            canvas.addEventListener(\"pointerout\", this._onCanvasPointerOut);\r\n\r\n            if (DomManagement.IsWindowObjectExist()) {\r\n                let hostWindow = this.getHostWindow()!;\r\n                hostWindow.addEventListener(\"blur\", this._onBlur);\r\n                hostWindow.addEventListener(\"focus\", this._onFocus);\r\n\r\n                let anyDoc = document as any;\r\n\r\n                // Fullscreen\r\n                this._onFullscreenChange = () => {\r\n\r\n                    if (anyDoc.fullscreen !== undefined) {\r\n                        this.isFullscreen = anyDoc.fullscreen;\r\n                    } else if (anyDoc.mozFullScreen !== undefined) {\r\n                        this.isFullscreen = anyDoc.mozFullScreen;\r\n                    } else if (anyDoc.webkitIsFullScreen !== undefined) {\r\n                        this.isFullscreen = anyDoc.webkitIsFullScreen;\r\n                    } else if (anyDoc.msIsFullScreen !== undefined) {\r\n                        this.isFullscreen = anyDoc.msIsFullScreen;\r\n                    }\r\n\r\n                    // Pointer lock\r\n                    if (this.isFullscreen && this._pointerLockRequested && canvas) {\r\n                        Engine._RequestPointerlock(canvas);\r\n                    }\r\n                };\r\n\r\n                document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\r\n                document.addEventListener(\"mozfullscreenchange\", this._onFullscreenChange, false);\r\n                document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\r\n                document.addEventListener(\"msfullscreenchange\", this._onFullscreenChange, false);\r\n\r\n                // Pointer lock\r\n                this._onPointerLockChange = () => {\r\n                    this.isPointerLock = (anyDoc.mozPointerLockElement === canvas ||\r\n                        anyDoc.webkitPointerLockElement === canvas ||\r\n                        anyDoc.msPointerLockElement === canvas ||\r\n                        anyDoc.pointerLockElement === canvas\r\n                    );\r\n                };\r\n\r\n                document.addEventListener(\"pointerlockchange\", this._onPointerLockChange, false);\r\n                document.addEventListener(\"mspointerlockchange\", this._onPointerLockChange, false);\r\n                document.addEventListener(\"mozpointerlockchange\", this._onPointerLockChange, false);\r\n                document.addEventListener(\"webkitpointerlockchange\", this._onPointerLockChange, false);\r\n\r\n                // Create Audio Engine if needed.\r\n                if (!Engine.audioEngine && options.audioEngine && Engine.AudioEngineFactory) {\r\n                    Engine.audioEngine = Engine.AudioEngineFactory(this.getRenderingCanvas());\r\n                }\r\n            }\r\n\r\n            this._connectVREvents();\r\n\r\n            this.enableOfflineSupport = Engine.OfflineProviderFactory !== undefined;\r\n\r\n            if (!options.doNotHandleTouchAction) {\r\n                this._disableTouchAction();\r\n            }\r\n\r\n            this._deterministicLockstep = !!options.deterministicLockstep;\r\n            this._lockstepMaxSteps = options.lockstepMaxSteps || 0;\r\n            this._timeStep = options.timeStep || 1 / 60;\r\n\r\n        }\r\n\r\n        // Load WebVR Devices\r\n        this._prepareVRComponent();\r\n        if (options.autoEnableWebVR) {\r\n            this.initWebVR();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets current aspect ratio\r\n     * @param viewportOwner defines the camera to use to get the aspect ratio\r\n     * @param useScreen defines if screen size must be used (or the current render target if any)\r\n     * @returns a number defining the aspect ratio\r\n     */\r\n    public getAspectRatio(viewportOwner: IViewportOwnerLike, useScreen = false): number {\r\n        var viewport = viewportOwner.viewport;\r\n        return (this.getRenderWidth(useScreen) * viewport.width) / (this.getRenderHeight(useScreen) * viewport.height);\r\n    }\r\n\r\n    /**\r\n     * Gets current screen aspect ratio\r\n     * @returns a number defining the aspect ratio\r\n     */\r\n    public getScreenAspectRatio(): number {\r\n        return (this.getRenderWidth(true)) / (this.getRenderHeight(true));\r\n    }\r\n\r\n    /**\r\n     * Gets the client rect of the HTML canvas attached with the current webGL context\r\n     * @returns a client rectanglee\r\n     */\r\n    public getRenderingCanvasClientRect(): Nullable<ClientRect> {\r\n        if (!this._renderingCanvas) {\r\n            return null;\r\n        }\r\n        return this._renderingCanvas.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * Gets the client rect of the HTML element used for events\r\n     * @returns a client rectanglee\r\n     */\r\n    public getInputElementClientRect(): Nullable<ClientRect> {\r\n        if (!this._renderingCanvas) {\r\n            return null;\r\n        }\r\n        return this.getInputElement()!.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the engine is running in deterministic lock step mode\r\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\r\n     * @returns true if engine is in deterministic lock step mode\r\n     */\r\n    public isDeterministicLockStep(): boolean {\r\n        return this._deterministicLockstep;\r\n    }\r\n\r\n    /**\r\n     * Gets the max steps when engine is running in deterministic lock step\r\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\r\n     * @returns the max steps\r\n     */\r\n    public getLockstepMaxSteps(): number {\r\n        return this._lockstepMaxSteps;\r\n    }\r\n\r\n    /**\r\n     * Returns the time in ms between steps when using deterministic lock step.\r\n     * @returns time step in (ms)\r\n     */\r\n    public getTimeStep(): number {\r\n        return this._timeStep * 1000;\r\n    }\r\n\r\n    /**\r\n     * Force the mipmap generation for the given render target texture\r\n     * @param texture defines the render target texture to use\r\n     * @param unbind defines whether or not to unbind the texture after generation. Defaults to true.\r\n     */\r\n    public generateMipMapsForCubemap(texture: InternalTexture, unbind = true) {\r\n        if (texture.generateMipMaps) {\r\n            var gl = this._gl;\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n            if (unbind) {\r\n                this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** States */\r\n\r\n    /**\r\n     * Set various states to the webGL context\r\n     * @param culling defines backface culling state\r\n     * @param zOffset defines the value to apply to zOffset (0 by default)\r\n     * @param force defines if states must be applied even if cache is up to date\r\n     * @param reverseSide defines if culling must be reversed (CCW instead of CW and CW instead of CCW)\r\n     */\r\n    public setState(culling: boolean, zOffset: number = 0, force?: boolean, reverseSide = false): void {\r\n        // Culling\r\n        if (this._depthCullingState.cull !== culling || force) {\r\n            this._depthCullingState.cull = culling;\r\n        }\r\n\r\n        // Cull face\r\n        var cullFace = this.cullBackFaces ? this._gl.BACK : this._gl.FRONT;\r\n        if (this._depthCullingState.cullFace !== cullFace || force) {\r\n            this._depthCullingState.cullFace = cullFace;\r\n        }\r\n\r\n        // Z offset\r\n        this.setZOffset(zOffset);\r\n\r\n        // Front face\r\n        var frontFace = reverseSide ? this._gl.CW : this._gl.CCW;\r\n        if (this._depthCullingState.frontFace !== frontFace || force) {\r\n            this._depthCullingState.frontFace = frontFace;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the z offset to apply to current rendering\r\n     * @param value defines the offset to apply\r\n     */\r\n    public setZOffset(value: number): void {\r\n        this._depthCullingState.zOffset = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the current value of the zOffset\r\n     * @returns the current zOffset state\r\n     */\r\n    public getZOffset(): number {\r\n        return this._depthCullingState.zOffset;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable depth buffering\r\n     * @param enable defines the state to set\r\n     */\r\n    public setDepthBuffer(enable: boolean): void {\r\n        this._depthCullingState.depthTest = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if depth writing is enabled\r\n     * @returns the current depth writing state\r\n     */\r\n    public getDepthWrite(): boolean {\r\n        return this._depthCullingState.depthMask;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable depth writing\r\n     * @param enable defines the state to set\r\n     */\r\n    public setDepthWrite(enable: boolean): void {\r\n        this._depthCullingState.depthMask = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if stencil buffer is enabled\r\n     * @returns the current stencil buffer state\r\n     */\r\n    public getStencilBuffer(): boolean {\r\n        return this._stencilState.stencilTest;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the stencil buffer\r\n     * @param enable defines if the stencil buffer must be enabled or disabled\r\n     */\r\n    public setStencilBuffer(enable: boolean): void {\r\n        this._stencilState.stencilTest = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil mask\r\n     * @returns a number defining the new stencil mask to use\r\n     */\r\n    public getStencilMask(): number {\r\n        return this._stencilState.stencilMask;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil mask\r\n     * @param mask defines the new stencil mask to use\r\n     */\r\n    public setStencilMask(mask: number): void {\r\n        this._stencilState.stencilMask = mask;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil function\r\n     * @returns a number defining the stencil function to use\r\n     */\r\n    public getStencilFunction(): number {\r\n        return this._stencilState.stencilFunc;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil reference value\r\n     * @returns a number defining the stencil reference value to use\r\n     */\r\n    public getStencilFunctionReference(): number {\r\n        return this._stencilState.stencilFuncRef;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil mask\r\n     * @returns a number defining the stencil mask to use\r\n     */\r\n    public getStencilFunctionMask(): number {\r\n        return this._stencilState.stencilFuncMask;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil function\r\n     * @param stencilFunc defines the new stencil function to use\r\n     */\r\n    public setStencilFunction(stencilFunc: number) {\r\n        this._stencilState.stencilFunc = stencilFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil reference\r\n     * @param reference defines the new stencil reference to use\r\n     */\r\n    public setStencilFunctionReference(reference: number) {\r\n        this._stencilState.stencilFuncRef = reference;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil mask\r\n     * @param mask defines the new stencil mask to use\r\n     */\r\n    public setStencilFunctionMask(mask: number) {\r\n        this._stencilState.stencilFuncMask = mask;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when stencil fails\r\n     * @returns a number defining stencil operation to use when stencil fails\r\n     */\r\n    public getStencilOperationFail(): number {\r\n        return this._stencilState.stencilOpStencilFail;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when depth fails\r\n     * @returns a number defining stencil operation to use when depth fails\r\n     */\r\n    public getStencilOperationDepthFail(): number {\r\n        return this._stencilState.stencilOpDepthFail;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when stencil passes\r\n     * @returns a number defining stencil operation to use when stencil passes\r\n     */\r\n    public getStencilOperationPass(): number {\r\n        return this._stencilState.stencilOpStencilDepthPass;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when stencil fails\r\n     * @param operation defines the stencil operation to use when stencil fails\r\n     */\r\n    public setStencilOperationFail(operation: number): void {\r\n        this._stencilState.stencilOpStencilFail = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when depth fails\r\n     * @param operation defines the stencil operation to use when depth fails\r\n     */\r\n    public setStencilOperationDepthFail(operation: number): void {\r\n        this._stencilState.stencilOpDepthFail = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when stencil passes\r\n     * @param operation defines the stencil operation to use when stencil passes\r\n     */\r\n    public setStencilOperationPass(operation: number): void {\r\n        this._stencilState.stencilOpStencilDepthPass = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets a boolean indicating if the dithering state is enabled or disabled\r\n     * @param value defines the dithering state\r\n     */\r\n    public setDitheringState(value: boolean): void {\r\n        if (value) {\r\n            this._gl.enable(this._gl.DITHER);\r\n        } else {\r\n            this._gl.disable(this._gl.DITHER);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a boolean indicating if the rasterizer state is enabled or disabled\r\n     * @param value defines the rasterizer state\r\n     */\r\n    public setRasterizerState(value: boolean): void {\r\n        if (value) {\r\n            this._gl.disable(this._gl.RASTERIZER_DISCARD);\r\n        } else {\r\n            this._gl.enable(this._gl.RASTERIZER_DISCARD);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current depth function\r\n     * @returns a number defining the depth function\r\n     */\r\n    public getDepthFunction(): Nullable<number> {\r\n        return this._depthCullingState.depthFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function\r\n     * @param depthFunc defines the function to use\r\n     */\r\n    public setDepthFunction(depthFunc: number) {\r\n        this._depthCullingState.depthFunc = depthFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to GREATER\r\n     */\r\n    public setDepthFunctionToGreater(): void {\r\n        this._depthCullingState.depthFunc = this._gl.GREATER;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to GEQUAL\r\n     */\r\n    public setDepthFunctionToGreaterOrEqual(): void {\r\n        this._depthCullingState.depthFunc = this._gl.GEQUAL;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to LESS\r\n     */\r\n    public setDepthFunctionToLess(): void {\r\n        this._depthCullingState.depthFunc = this._gl.LESS;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to LEQUAL\r\n     */\r\n    public setDepthFunctionToLessOrEqual(): void {\r\n        this._depthCullingState.depthFunc = this._gl.LEQUAL;\r\n    }\r\n\r\n    private _cachedStencilBuffer: boolean;\r\n    private _cachedStencilFunction: number;\r\n    private _cachedStencilMask: number;\r\n    private _cachedStencilOperationPass: number;\r\n    private _cachedStencilOperationFail: number;\r\n    private _cachedStencilOperationDepthFail: number;\r\n    private _cachedStencilReference: number;\r\n\r\n    /**\r\n     * Caches the the state of the stencil buffer\r\n     */\r\n    public cacheStencilState() {\r\n        this._cachedStencilBuffer = this.getStencilBuffer();\r\n        this._cachedStencilFunction = this.getStencilFunction();\r\n        this._cachedStencilMask = this.getStencilMask();\r\n        this._cachedStencilOperationPass = this.getStencilOperationPass();\r\n        this._cachedStencilOperationFail = this.getStencilOperationFail();\r\n        this._cachedStencilOperationDepthFail = this.getStencilOperationDepthFail();\r\n        this._cachedStencilReference = this.getStencilFunctionReference();\r\n    }\r\n\r\n    /**\r\n     * Restores the state of the stencil buffer\r\n     */\r\n    public restoreStencilState() {\r\n        this.setStencilFunction(this._cachedStencilFunction);\r\n        this.setStencilMask(this._cachedStencilMask);\r\n        this.setStencilBuffer(this._cachedStencilBuffer);\r\n        this.setStencilOperationPass(this._cachedStencilOperationPass);\r\n        this.setStencilOperationFail(this._cachedStencilOperationFail);\r\n        this.setStencilOperationDepthFail(this._cachedStencilOperationDepthFail);\r\n        this.setStencilFunctionReference(this._cachedStencilReference);\r\n    }\r\n\r\n    /**\r\n     * Directly set the WebGL Viewport\r\n     * @param x defines the x coordinate of the viewport (in screen space)\r\n     * @param y defines the y coordinate of the viewport (in screen space)\r\n     * @param width defines the width of the viewport (in screen space)\r\n     * @param height defines the height of the viewport (in screen space)\r\n     * @return the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state\r\n     */\r\n    public setDirectViewport(x: number, y: number, width: number, height: number): Nullable<IViewportLike> {\r\n        let currentViewport = this._cachedViewport;\r\n        this._cachedViewport = null;\r\n\r\n        this._viewport(x, y, width, height);\r\n\r\n        return currentViewport;\r\n    }\r\n\r\n    /**\r\n     * Executes a scissor clear (ie. a clear on a specific portion of the screen)\r\n     * @param x defines the x-coordinate of the top left corner of the clear rectangle\r\n     * @param y defines the y-coordinate of the corner of the clear rectangle\r\n     * @param width defines the width of the clear rectangle\r\n     * @param height defines the height of the clear rectangle\r\n     * @param clearColor defines the clear color\r\n     */\r\n    public scissorClear(x: number, y: number, width: number, height: number, clearColor: IColor4Like): void {\r\n        this.enableScissor(x, y, width, height);\r\n        this.clear(clearColor, true, true, true);\r\n        this.disableScissor();\r\n    }\r\n\r\n    /**\r\n     * Enable scissor test on a specific rectangle (ie. render will only be executed on a specific portion of the screen)\r\n     * @param x defines the x-coordinate of the top left corner of the clear rectangle\r\n     * @param y defines the y-coordinate of the corner of the clear rectangle\r\n     * @param width defines the width of the clear rectangle\r\n     * @param height defines the height of the clear rectangle\r\n     */\r\n    public enableScissor(x: number, y: number, width: number, height: number): void {\r\n        let gl = this._gl;\r\n\r\n        // Change state\r\n        gl.enable(gl.SCISSOR_TEST);\r\n        gl.scissor(x, y, width, height);\r\n    }\r\n\r\n    /**\r\n     * Disable previously set scissor test rectangle\r\n     */\r\n    public disableScissor() {\r\n        let gl = this._gl;\r\n\r\n        gl.disable(gl.SCISSOR_TEST);\r\n    }\r\n\r\n    protected _reportDrawCall() {\r\n        this._drawCalls.addCount(1, false);\r\n    }\r\n\r\n    /**\r\n     * Initializes a webVR display and starts listening to display change events\r\n     * The onVRDisplayChangedObservable will be notified upon these changes\r\n     * @returns The onVRDisplayChangedObservable\r\n     */\r\n    public initWebVR(): Observable<IDisplayChangedEventArgs> {\r\n        throw _DevTools.WarnImport(\"WebVRCamera\");\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepareVRComponent() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /** @hidden */\r\n    public _connectVREvents(canvas?: HTMLCanvasElement, document?: any) {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /** @hidden */\r\n    public _submitVRFrame() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n    /**\r\n     * Call this function to leave webVR mode\r\n     * Will do nothing if webVR is not supported or if there is no webVR device\r\n     * @see https://doc.babylonjs.com/how_to/webvr_camera\r\n     */\r\n    public disableVR() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the system is in VR mode and is presenting\r\n     * @returns true if VR mode is engaged\r\n     */\r\n    public isVRPresenting() {\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _requestVRFrame() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /** @hidden */\r\n    public _loadFileAsync(url: string, offlineProvider?: IOfflineProvider, useArrayBuffer?: boolean): Promise<string | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this._loadFile(url, (data) => {\r\n                resolve(data);\r\n            }, undefined, offlineProvider, useArrayBuffer, (request, exception) => {\r\n                reject(exception);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Gets the source code of the vertex shader associated with a specific webGL program\r\n    * @param program defines the program to use\r\n    * @returns a string containing the source code of the vertex shader associated with the program\r\n    */\r\n    public getVertexShaderSource(program: WebGLProgram): Nullable<string> {\r\n        var shaders = this._gl.getAttachedShaders(program);\r\n\r\n        if (!shaders) {\r\n            return null;\r\n        }\r\n\r\n        return this._gl.getShaderSource(shaders[0]);\r\n    }\r\n\r\n    /**\r\n     * Gets the source code of the fragment shader associated with a specific webGL program\r\n     * @param program defines the program to use\r\n     * @returns a string containing the source code of the fragment shader associated with the program\r\n     */\r\n    public getFragmentShaderSource(program: WebGLProgram): Nullable<string> {\r\n        var shaders = this._gl.getAttachedShaders(program);\r\n\r\n        if (!shaders) {\r\n            return null;\r\n        }\r\n\r\n        return this._gl.getShaderSource(shaders[1]);\r\n    }\r\n\r\n    /**\r\n     * Sets a depth stencil texture from a render target to the according uniform.\r\n     * @param channel The texture channel\r\n     * @param uniform The uniform to set\r\n     * @param texture The render target texture containing the depth stencil texture to apply\r\n     */\r\n    public setDepthStencilTexture(channel: number, uniform: Nullable<WebGLUniformLocation>, texture: Nullable<RenderTargetTexture>): void {\r\n        if (channel === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (uniform) {\r\n            this._boundUniforms[channel] = uniform;\r\n        }\r\n\r\n        if (!texture || !texture.depthStencilTexture) {\r\n            this._setTexture(channel, null);\r\n        }\r\n        else {\r\n            this._setTexture(channel, texture, false, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a texture to the webGL context from a postprocess\r\n     * @param channel defines the channel to use\r\n     * @param postProcess defines the source postprocess\r\n     */\r\n    public setTextureFromPostProcess(channel: number, postProcess: Nullable<PostProcess>): void {\r\n        this._bindTexture(channel, postProcess ? postProcess._textures.data[postProcess._currentRenderTextureInd] : null);\r\n    }\r\n\r\n    /**\r\n     * Binds the output of the passed in post process to the texture channel specified\r\n     * @param channel The channel the texture should be bound to\r\n     * @param postProcess The post process which's output should be bound\r\n     */\r\n    public setTextureFromPostProcessOutput(channel: number, postProcess: Nullable<PostProcess>): void {\r\n        this._bindTexture(channel, postProcess ? postProcess._outputTexture : null);\r\n    }\r\n\r\n    protected _rebuildBuffers(): void {\r\n        // Index / Vertex\r\n        for (var scene of this.scenes) {\r\n            scene.resetCachedMaterial();\r\n            scene._rebuildGeometries();\r\n            scene._rebuildTextures();\r\n        }\r\n\r\n        super._rebuildBuffers();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderFrame() {\r\n        for (var index = 0; index < this._activeRenderLoops.length; index++) {\r\n            var renderFunction = this._activeRenderLoops[index];\r\n\r\n            renderFunction();\r\n        }\r\n    }\r\n\r\n    public _renderLoop(): void {\r\n        if (!this._contextWasLost) {\r\n            var shouldRender = true;\r\n            if (!this.renderEvenInBackground && this._windowIsBackground) {\r\n                shouldRender = false;\r\n            }\r\n\r\n            if (shouldRender) {\r\n                // Start new frame\r\n                this.beginFrame();\r\n\r\n                // Child canvases\r\n                if (!this._renderViews()) {\r\n                    // Main frame\r\n                    this._renderFrame();\r\n                }\r\n\r\n                // Present\r\n                this.endFrame();\r\n            }\r\n        }\r\n\r\n        if (this._activeRenderLoops.length > 0) {\r\n            // Register new frame\r\n            if (this.customAnimationFrameRequester) {\r\n                this.customAnimationFrameRequester.requestID = this._queueNewFrame(this.customAnimationFrameRequester.renderFunction || this._boundRenderFunction, this.customAnimationFrameRequester);\r\n                this._frameHandler = this.customAnimationFrameRequester.requestID;\r\n            } else if (this.isVRPresenting()) {\r\n                this._requestVRFrame();\r\n            } else {\r\n                this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\r\n            }\r\n        } else {\r\n            this._renderingQueueLaunched = false;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderViews() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Toggle full screen mode\r\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n     */\r\n    public switchFullscreen(requestPointerLock: boolean): void {\r\n        if (this.isFullscreen) {\r\n            this.exitFullscreen();\r\n        } else {\r\n            this.enterFullscreen(requestPointerLock);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters full screen mode\r\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n     */\r\n    public enterFullscreen(requestPointerLock: boolean): void {\r\n        if (!this.isFullscreen) {\r\n            this._pointerLockRequested = requestPointerLock;\r\n            if (this._renderingCanvas) {\r\n                Engine._RequestFullscreen(this._renderingCanvas);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits full screen mode\r\n     */\r\n    public exitFullscreen(): void {\r\n        if (this.isFullscreen) {\r\n            Engine._ExitFullscreen();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters Pointerlock mode\r\n     */\r\n    public enterPointerlock(): void {\r\n        if (this._renderingCanvas) {\r\n            Engine._RequestPointerlock(this._renderingCanvas);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits Pointerlock mode\r\n     */\r\n    public exitPointerlock(): void {\r\n        Engine._ExitPointerlock();\r\n    }\r\n\r\n    /**\r\n     * Begin a new frame\r\n     */\r\n    public beginFrame(): void {\r\n        this._measureFps();\r\n\r\n        this.onBeginFrameObservable.notifyObservers(this);\r\n        super.beginFrame();\r\n    }\r\n\r\n    /**\r\n     * Enf the current frame\r\n     */\r\n    public endFrame(): void {\r\n        super.endFrame();\r\n        this._submitVRFrame();\r\n\r\n        this.onEndFrameObservable.notifyObservers(this);\r\n    }\r\n\r\n    public resize(): void {\r\n        // We're not resizing the size of the canvas while in VR mode & presenting\r\n        if (this.isVRPresenting()) {\r\n            return;\r\n        }\r\n\r\n        super.resize();\r\n    }\r\n\r\n    /**\r\n     * Force a specific size of the canvas\r\n     * @param width defines the new canvas' width\r\n     * @param height defines the new canvas' height\r\n     * @returns true if the size was changed\r\n     */\r\n    public setSize(width: number, height: number): boolean {\r\n        if (!this._renderingCanvas) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.setSize(width, height)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.scenes) {\r\n            for (var index = 0; index < this.scenes.length; index++) {\r\n                var scene = this.scenes[index];\r\n\r\n                for (var camIndex = 0; camIndex < scene.cameras.length; camIndex++) {\r\n                    var cam = scene.cameras[camIndex];\r\n\r\n                    cam._currentRenderId = 0;\r\n                }\r\n            }\r\n\r\n            if (this.onResizeObservable.hasObservers()) {\r\n                this.onResizeObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public _deletePipelineContext(pipelineContext: IPipelineContext): void {\r\n        let webGLPipelineContext = pipelineContext as WebGLPipelineContext;\r\n        if (webGLPipelineContext && webGLPipelineContext.program) {\r\n            if (webGLPipelineContext.transformFeedback) {\r\n                this.deleteTransformFeedback(webGLPipelineContext.transformFeedback);\r\n                webGLPipelineContext.transformFeedback = null;\r\n            }\r\n        }\r\n        super._deletePipelineContext(pipelineContext);\r\n    }\r\n\r\n    public createShaderProgram(pipelineContext: IPipelineContext, vertexCode: string, fragmentCode: string, defines: Nullable<string>, context?: WebGLRenderingContext, transformFeedbackVaryings: Nullable<string[]> = null): WebGLProgram {\r\n        context = context || this._gl;\r\n\r\n        this.onBeforeShaderCompilationObservable.notifyObservers(this);\r\n\r\n        let program = super.createShaderProgram(pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings);\r\n        this.onAfterShaderCompilationObservable.notifyObservers(this);\r\n\r\n        return program;\r\n    }\r\n\r\n    protected _createShaderProgram(pipelineContext: WebGLPipelineContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, context: WebGLRenderingContext, transformFeedbackVaryings: Nullable<string[]> = null): WebGLProgram {\r\n        var shaderProgram = context.createProgram();\r\n        pipelineContext.program = shaderProgram;\r\n\r\n        if (!shaderProgram) {\r\n            throw new Error(\"Unable to create program\");\r\n        }\r\n\r\n        context.attachShader(shaderProgram, vertexShader);\r\n        context.attachShader(shaderProgram, fragmentShader);\r\n\r\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\r\n            let transformFeedback = this.createTransformFeedback();\r\n\r\n            this.bindTransformFeedback(transformFeedback);\r\n            this.setTranformFeedbackVaryings(shaderProgram, transformFeedbackVaryings);\r\n            pipelineContext.transformFeedback = transformFeedback;\r\n        }\r\n\r\n        context.linkProgram(shaderProgram);\r\n\r\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\r\n            this.bindTransformFeedback(null);\r\n        }\r\n\r\n        pipelineContext.context = context;\r\n        pipelineContext.vertexShader = vertexShader;\r\n        pipelineContext.fragmentShader = fragmentShader;\r\n\r\n        if (!pipelineContext.isParallelCompiled) {\r\n            this._finalizePipelineContext(pipelineContext);\r\n        }\r\n\r\n        return shaderProgram;\r\n    }\r\n\r\n    public _releaseTexture(texture: InternalTexture): void {\r\n        super._releaseTexture(texture);\r\n\r\n        // Set output texture of post process to null if the texture has been released/disposed\r\n        this.scenes.forEach((scene) => {\r\n            scene.postProcesses.forEach((postProcess) => {\r\n                if (postProcess._outputTexture == texture) {\r\n                    postProcess._outputTexture = null;\r\n                }\r\n            });\r\n            scene.cameras.forEach((camera) => {\r\n                camera._postProcesses.forEach((postProcess) => {\r\n                    if (postProcess) {\r\n                        if (postProcess._outputTexture == texture) {\r\n                            postProcess._outputTexture = null;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Rescales a texture\r\n     * @param source input texutre\r\n     * @param destination destination texture\r\n     * @param scene scene to use to render the resize\r\n     * @param internalFormat format to use when resizing\r\n     * @param onComplete callback to be called when resize has completed\r\n     */\r\n    public _rescaleTexture(source: InternalTexture, destination: InternalTexture, scene: Nullable<any>, internalFormat: number, onComplete: () => void): void {\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\r\n\r\n        let rtt = this.createRenderTargetTexture({\r\n            width: destination.width,\r\n            height: destination.height,\r\n        }, {\r\n            generateMipMaps: false,\r\n            type: 0,\r\n            samplingMode: 2,\r\n            generateDepthBuffer: false,\r\n            generateStencilBuffer: false\r\n        }\r\n        );\r\n\r\n        if (!this._rescalePostProcess && Engine._RescalePostProcessFactory) {\r\n            this._rescalePostProcess = Engine._RescalePostProcessFactory(this);\r\n        }\r\n\r\n        this._rescalePostProcess.getEffect().executeWhenCompiled(() => {\r\n            this._rescalePostProcess.onApply = function(effect) {\r\n                effect._bindTexture(\"textureSampler\", source);\r\n            };\r\n\r\n            let hostingScene: Scene = scene;\r\n\r\n            if (!hostingScene) {\r\n                hostingScene = this.scenes[this.scenes.length - 1];\r\n            }\r\n            hostingScene.postProcessManager.directRender([this._rescalePostProcess], rtt, true);\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, destination, true);\r\n            this._gl.copyTexImage2D(this._gl.TEXTURE_2D, 0, internalFormat, 0, 0, destination.width, destination.height, 0);\r\n\r\n            this.unBindFramebuffer(rtt);\r\n            this._releaseTexture(rtt);\r\n\r\n            if (onComplete) {\r\n                onComplete();\r\n            }\r\n        });\r\n    }\r\n\r\n    // FPS\r\n\r\n    /**\r\n     * Gets the current framerate\r\n     * @returns a number representing the framerate\r\n     */\r\n    public getFps(): number {\r\n        return this._fps;\r\n    }\r\n\r\n    /**\r\n     * Gets the time spent between current and previous frame\r\n     * @returns a number representing the delta time in ms\r\n     */\r\n    public getDeltaTime(): number {\r\n        return this._deltaTime;\r\n    }\r\n\r\n    private _measureFps(): void {\r\n        this._performanceMonitor.sampleFrame();\r\n        this._fps = this._performanceMonitor.averageFPS;\r\n        this._deltaTime = this._performanceMonitor.instantaneousFrameTime || 0;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _uploadImageToTexture(texture: InternalTexture, image: HTMLImageElement | ImageBitmap, faceIndex: number = 0, lod: number = 0) {\r\n        var gl = this._gl;\r\n\r\n        var textureType = this._getWebGLTextureType(texture.type);\r\n        var format = this._getInternalFormat(texture.format);\r\n        var internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, format);\r\n\r\n        var bindTarget = texture.isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\r\n\r\n        this._bindTextureDirectly(bindTarget, texture, true);\r\n        this._unpackFlipY(texture.invertY);\r\n\r\n        var target = gl.TEXTURE_2D;\r\n        if (texture.isCube) {\r\n            target = gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex;\r\n        }\r\n\r\n        gl.texImage2D(target, lod, internalFormat, format, textureType, image);\r\n        this._bindTextureDirectly(bindTarget, null, true);\r\n    }\r\n\r\n    /**\r\n     * Updates the sample count of a render target texture\r\n     * @see https://doc.babylonjs.com/features/webgl2#multisample-render-targets\r\n     * @param texture defines the texture to update\r\n     * @param samples defines the sample count to set\r\n     * @returns the effective sample count (could be 0 if multisample render targets are not supported)\r\n     */\r\n    public updateRenderTargetTextureSampleCount(texture: Nullable<InternalTexture>, samples: number): number {\r\n        if (this.webGLVersion < 2 || !texture) {\r\n            return 1;\r\n        }\r\n\r\n        if (texture.samples === samples) {\r\n            return samples;\r\n        }\r\n\r\n        var gl = this._gl;\r\n\r\n        samples = Math.min(samples, this.getCaps().maxMSAASamples);\r\n\r\n        // Dispose previous render buffers\r\n        if (texture._depthStencilBuffer) {\r\n            gl.deleteRenderbuffer(texture._depthStencilBuffer);\r\n            texture._depthStencilBuffer = null;\r\n        }\r\n\r\n        if (texture._MSAAFramebuffer) {\r\n            gl.deleteFramebuffer(texture._MSAAFramebuffer);\r\n            texture._MSAAFramebuffer = null;\r\n        }\r\n\r\n        if (texture._MSAARenderBuffer) {\r\n            gl.deleteRenderbuffer(texture._MSAARenderBuffer);\r\n            texture._MSAARenderBuffer = null;\r\n        }\r\n\r\n        if (samples > 1 && gl.renderbufferStorageMultisample) {\r\n            let framebuffer = gl.createFramebuffer();\r\n\r\n            if (!framebuffer) {\r\n                throw new Error(\"Unable to create multi sampled framebuffer\");\r\n            }\r\n\r\n            texture._MSAAFramebuffer = framebuffer;\r\n            this._bindUnboundFramebuffer(texture._MSAAFramebuffer);\r\n\r\n            var colorRenderbuffer = gl.createRenderbuffer();\r\n\r\n            if (!colorRenderbuffer) {\r\n                throw new Error(\"Unable to create multi sampled framebuffer\");\r\n            }\r\n\r\n            gl.bindRenderbuffer(gl.RENDERBUFFER, colorRenderbuffer);\r\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, this._getRGBAMultiSampleBufferFormat(texture.type), texture.width, texture.height);\r\n\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, colorRenderbuffer);\r\n\r\n            texture._MSAARenderBuffer = colorRenderbuffer;\r\n        } else {\r\n            this._bindUnboundFramebuffer(texture._framebuffer);\r\n        }\r\n\r\n        texture.samples = samples;\r\n        texture._depthStencilBuffer = this._setupFramebufferDepthAttachments(texture._generateStencilBuffer, texture._generateDepthBuffer, texture.width, texture.height, samples);\r\n\r\n        this._bindUnboundFramebuffer(null);\r\n\r\n        return samples;\r\n    }\r\n\r\n    /**\r\n     * Updates a depth texture Comparison Mode and Function.\r\n     * If the comparison Function is equal to 0, the mode will be set to none.\r\n     * Otherwise, this only works in webgl 2 and requires a shadow sampler in the shader.\r\n     * @param texture The texture to set the comparison function for\r\n     * @param comparisonFunction The comparison function to set, 0 if no comparison required\r\n     */\r\n    public updateTextureComparisonFunction(texture: InternalTexture, comparisonFunction: number): void {\r\n        if (this.webGLVersion === 1) {\r\n            Logger.Error(\"WebGL 1 does not support texture comparison.\");\r\n            return;\r\n        }\r\n\r\n        var gl = this._gl;\r\n\r\n        if (texture.isCube) {\r\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n            if (comparisonFunction === 0) {\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, 515);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n            }\r\n            else {\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n            }\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\r\n        } else {\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\r\n\r\n            if (comparisonFunction === 0) {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, 515);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n            }\r\n            else {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n            }\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\r\n        }\r\n\r\n        texture._comparisonFunction = comparisonFunction;\r\n    }\r\n\r\n    /**\r\n     * Creates a webGL buffer to use with instanciation\r\n     * @param capacity defines the size of the buffer\r\n     * @returns the webGL buffer\r\n     */\r\n    public createInstancesBuffer(capacity: number): DataBuffer {\r\n        var buffer = this._gl.createBuffer();\r\n\r\n        if (!buffer) {\r\n            throw new Error(\"Unable to create instance buffer\");\r\n        }\r\n\r\n        var result = new WebGLDataBuffer(buffer);\r\n        result.capacity = capacity;\r\n\r\n        this.bindArrayBuffer(result);\r\n        this._gl.bufferData(this._gl.ARRAY_BUFFER, capacity, this._gl.DYNAMIC_DRAW);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Delete a webGL buffer used with instanciation\r\n     * @param buffer defines the webGL buffer to delete\r\n     */\r\n    public deleteInstancesBuffer(buffer: WebGLBuffer): void {\r\n        this._gl.deleteBuffer(buffer);\r\n    }\r\n\r\n    private _clientWaitAsync(sync: WebGLSync, flags = 0, interval_ms = 10) {\r\n        let gl = <WebGL2RenderingContext>(this._gl as any);\r\n        return new Promise((resolve, reject) => {\r\n            let check = () => {\r\n                const res = gl.clientWaitSync(sync, flags, 0);\r\n                if (res == gl.WAIT_FAILED) {\r\n                reject();\r\n                return;\r\n                }\r\n                if (res == gl.TIMEOUT_EXPIRED) {\r\n                setTimeout(check, interval_ms);\r\n                return;\r\n                }\r\n                resolve();\r\n            };\r\n\r\n            check();\r\n        });\r\n    }\r\n\r\n    /** @hidden */\r\n    public _readPixelsAsync(x: number, y: number, w: number, h: number, format: number, type: number, outputBuffer: ArrayBufferView) {\r\n        if (this._webGLVersion < 2) {\r\n            throw new Error(\"_readPixelsAsync only work on WebGL2+\");\r\n        }\r\n\r\n        let gl = <WebGL2RenderingContext>(this._gl as any);\r\n        const buf = gl.createBuffer();\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\r\n        gl.bufferData(gl.PIXEL_PACK_BUFFER, outputBuffer.byteLength, gl.STREAM_READ);\r\n        gl.readPixels(x, y, w, h, format, type, 0);\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n\r\n        const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n        if (!sync) {\r\n            return null;\r\n        }\r\n\r\n        gl.flush();\r\n\r\n        return this._clientWaitAsync(sync, 0, 10).then(() => {\r\n            gl.deleteSync(sync);\r\n\r\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\r\n            gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, outputBuffer);\r\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n            gl.deleteBuffer(buf);\r\n\r\n            return outputBuffer;\r\n        });\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.hideLoadingUI();\r\n\r\n        this.onNewSceneAddedObservable.clear();\r\n\r\n        // Release postProcesses\r\n        while (this.postProcesses.length) {\r\n            this.postProcesses[0].dispose();\r\n        }\r\n\r\n        // Rescale PP\r\n        if (this._rescalePostProcess) {\r\n            this._rescalePostProcess.dispose();\r\n        }\r\n\r\n        // Release scenes\r\n        while (this.scenes.length) {\r\n            this.scenes[0].dispose();\r\n        }\r\n\r\n        // Release audio engine\r\n        if (Engine.Instances.length === 1 && Engine.audioEngine) {\r\n            Engine.audioEngine.dispose();\r\n        }\r\n\r\n        //WebVR\r\n        this.disableVR();\r\n\r\n        // Events\r\n        if (DomManagement.IsWindowObjectExist()) {\r\n            window.removeEventListener(\"blur\", this._onBlur);\r\n            window.removeEventListener(\"focus\", this._onFocus);\r\n\r\n            if (this._renderingCanvas) {\r\n                this._renderingCanvas.removeEventListener(\"focus\", this._onCanvasFocus);\r\n                this._renderingCanvas.removeEventListener(\"blur\", this._onCanvasBlur);\r\n                this._renderingCanvas.removeEventListener(\"pointerout\", this._onCanvasPointerOut);\r\n            }\r\n\r\n            if (DomManagement.IsDocumentAvailable()) {\r\n                document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\r\n                document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\r\n                document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\r\n                document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\r\n                document.removeEventListener(\"pointerlockchange\", this._onPointerLockChange);\r\n                document.removeEventListener(\"mspointerlockchange\", this._onPointerLockChange);\r\n                document.removeEventListener(\"mozpointerlockchange\", this._onPointerLockChange);\r\n                document.removeEventListener(\"webkitpointerlockchange\", this._onPointerLockChange);\r\n            }\r\n        }\r\n\r\n        super.dispose();\r\n\r\n        // Remove from Instances\r\n        var index = Engine.Instances.indexOf(this);\r\n\r\n        if (index >= 0) {\r\n            Engine.Instances.splice(index, 1);\r\n        }\r\n\r\n        // Observables\r\n        this.onResizeObservable.clear();\r\n        this.onCanvasBlurObservable.clear();\r\n        this.onCanvasFocusObservable.clear();\r\n        this.onCanvasPointerOutObservable.clear();\r\n        this.onBeginFrameObservable.clear();\r\n        this.onEndFrameObservable.clear();\r\n    }\r\n\r\n    private _disableTouchAction(): void {\r\n        if (!this._renderingCanvas || !this._renderingCanvas.setAttribute) {\r\n            return;\r\n        }\r\n\r\n        this._renderingCanvas.setAttribute(\"touch-action\", \"none\");\r\n        this._renderingCanvas.style.touchAction = \"none\";\r\n        (this._renderingCanvas.style as any).msTouchAction = \"none\";\r\n    }\r\n\r\n    // Loading screen\r\n\r\n    /**\r\n     * Display the loading screen\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\r\n    public displayLoadingUI(): void {\r\n        if (!DomManagement.IsWindowObjectExist()) {\r\n            return;\r\n        }\r\n        const loadingScreen = this.loadingScreen;\r\n        if (loadingScreen) {\r\n            loadingScreen.displayLoadingUI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide the loading screen\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\r\n    public hideLoadingUI(): void {\r\n        if (!DomManagement.IsWindowObjectExist()) {\r\n            return;\r\n        }\r\n        const loadingScreen = this._loadingScreen;\r\n        if (loadingScreen) {\r\n            loadingScreen.hideLoadingUI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current loading screen object\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\r\n    public get loadingScreen(): ILoadingScreen {\r\n        if (!this._loadingScreen && this._renderingCanvas) {\r\n            this._loadingScreen = Engine.DefaultLoadingScreenFactory(this._renderingCanvas);\r\n        }\r\n        return this._loadingScreen;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen object\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\r\n    public set loadingScreen(loadingScreen: ILoadingScreen) {\r\n        this._loadingScreen = loadingScreen;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen text\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\r\n    public set loadingUIText(text: string) {\r\n        this.loadingScreen.loadingUIText = text;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen background color\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\r\n    public set loadingUIBackgroundColor(color: string) {\r\n        this.loadingScreen.loadingUIBackgroundColor = color;\r\n    }\r\n\r\n    /** Pointerlock and fullscreen */\r\n\r\n    /**\r\n     * Ask the browser to promote the current element to pointerlock mode\r\n     * @param element defines the DOM element to promote\r\n     */\r\n    static _RequestPointerlock(element: HTMLElement): void {\r\n        element.requestPointerLock = element.requestPointerLock || (<any>element).msRequestPointerLock || (<any>element).mozRequestPointerLock || (<any>element).webkitRequestPointerLock;\r\n        if (element.requestPointerLock) {\r\n            element.requestPointerLock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Asks the browser to exit pointerlock mode\r\n     */\r\n    static _ExitPointerlock(): void {\r\n        let anyDoc = document as any;\r\n        document.exitPointerLock = document.exitPointerLock || anyDoc.msExitPointerLock || anyDoc.mozExitPointerLock || anyDoc.webkitExitPointerLock;\r\n\r\n        if (document.exitPointerLock) {\r\n            document.exitPointerLock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ask the browser to promote the current element to fullscreen rendering mode\r\n     * @param element defines the DOM element to promote\r\n     */\r\n    static _RequestFullscreen(element: HTMLElement): void {\r\n        var requestFunction = element.requestFullscreen || (<any>element).msRequestFullscreen || (<any>element).webkitRequestFullscreen || (<any>element).mozRequestFullScreen;\r\n        if (!requestFunction) { return; }\r\n        requestFunction.call(element);\r\n    }\r\n\r\n    /**\r\n     * Asks the browser to exit fullscreen mode\r\n     */\r\n    static _ExitFullscreen(): void {\r\n        let anyDoc = document as any;\r\n\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        }\r\n        else if (anyDoc.mozCancelFullScreen) {\r\n            anyDoc.mozCancelFullScreen();\r\n        }\r\n        else if (anyDoc.webkitCancelFullScreen) {\r\n            anyDoc.webkitCancelFullScreen();\r\n        }\r\n        else if (anyDoc.msCancelFullScreen) {\r\n            anyDoc.msCancelFullScreen();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}