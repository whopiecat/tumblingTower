{"ast":null,"code":"import { Engine } from \"../Engines/engine\";\n/**\r\n * It could be useful to isolate your music & sounds on several tracks to better manage volume on a grouped instance of sounds.\r\n * It will be also used in a future release to apply effects on a specific track.\r\n * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-sound-tracks\r\n */\n\nvar SoundTrack =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new sound track.\r\n   * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-sound-tracks\r\n   * @param scene Define the scene the sound track belongs to\r\n   * @param options\r\n   */\n  function SoundTrack(scene, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\r\n     * The unique identifier of the sound track in the scene.\r\n     */\n\n\n    this.id = -1;\n    this._isInitialized = false;\n    this._scene = scene;\n    this.soundCollection = new Array();\n    this._options = options;\n\n    if (!this._options.mainTrack && this._scene.soundTracks) {\n      this._scene.soundTracks.push(this);\n\n      this.id = this._scene.soundTracks.length - 1;\n    }\n  }\n\n  SoundTrack.prototype._initializeSoundTrackAudioGraph = function () {\n    if (Engine.audioEngine.canUseWebAudio && Engine.audioEngine.audioContext) {\n      this._outputAudioNode = Engine.audioEngine.audioContext.createGain();\n\n      this._outputAudioNode.connect(Engine.audioEngine.masterGain);\n\n      if (this._options) {\n        if (this._options.volume) {\n          this._outputAudioNode.gain.value = this._options.volume;\n        }\n      }\n\n      this._isInitialized = true;\n    }\n  };\n  /**\r\n   * Release the sound track and its associated resources\r\n   */\n\n\n  SoundTrack.prototype.dispose = function () {\n    if (Engine.audioEngine && Engine.audioEngine.canUseWebAudio) {\n      if (this._connectedAnalyser) {\n        this._connectedAnalyser.stopDebugCanvas();\n      }\n\n      while (this.soundCollection.length) {\n        this.soundCollection[0].dispose();\n      }\n\n      if (this._outputAudioNode) {\n        this._outputAudioNode.disconnect();\n      }\n\n      this._outputAudioNode = null;\n    }\n  };\n  /**\r\n   * Adds a sound to this sound track\r\n   * @param sound define the cound to add\r\n   * @ignoreNaming\r\n   */\n\n\n  SoundTrack.prototype.addSound = function (sound) {\n    if (!this._isInitialized) {\n      this._initializeSoundTrackAudioGraph();\n    }\n\n    if (Engine.audioEngine.canUseWebAudio && this._outputAudioNode) {\n      sound.connectToSoundTrackAudioNode(this._outputAudioNode);\n    }\n\n    if (sound.soundTrackId) {\n      if (sound.soundTrackId === -1) {\n        this._scene.mainSoundTrack.removeSound(sound);\n      } else if (this._scene.soundTracks) {\n        this._scene.soundTracks[sound.soundTrackId].removeSound(sound);\n      }\n    }\n\n    this.soundCollection.push(sound);\n    sound.soundTrackId = this.id;\n  };\n  /**\r\n   * Removes a sound to this sound track\r\n   * @param sound define the cound to remove\r\n   * @ignoreNaming\r\n   */\n\n\n  SoundTrack.prototype.removeSound = function (sound) {\n    var index = this.soundCollection.indexOf(sound);\n\n    if (index !== -1) {\n      this.soundCollection.splice(index, 1);\n    }\n  };\n  /**\r\n   * Set a global volume for the full sound track.\r\n   * @param newVolume Define the new volume of the sound track\r\n   */\n\n\n  SoundTrack.prototype.setVolume = function (newVolume) {\n    if (Engine.audioEngine.canUseWebAudio && this._outputAudioNode) {\n      this._outputAudioNode.gain.value = newVolume;\n    }\n  };\n  /**\r\n   * Switch the panning model to HRTF:\r\n   * Renders a stereo output of higher quality than equalpower â€” it uses a convolution with measured impulse responses from human subjects.\r\n   * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#creating-a-spatial-3d-sound\r\n   */\n\n\n  SoundTrack.prototype.switchPanningModelToHRTF = function () {\n    if (Engine.audioEngine.canUseWebAudio) {\n      for (var i = 0; i < this.soundCollection.length; i++) {\n        this.soundCollection[i].switchPanningModelToHRTF();\n      }\n    }\n  };\n  /**\r\n   * Switch the panning model to Equal Power:\r\n   * Represents the equal-power panning algorithm, generally regarded as simple and efficient. equalpower is the default value.\r\n   * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#creating-a-spatial-3d-sound\r\n   */\n\n\n  SoundTrack.prototype.switchPanningModelToEqualPower = function () {\n    if (Engine.audioEngine.canUseWebAudio) {\n      for (var i = 0; i < this.soundCollection.length; i++) {\n        this.soundCollection[i].switchPanningModelToEqualPower();\n      }\n    }\n  };\n  /**\r\n   * Connect the sound track to an audio analyser allowing some amazing\r\n   * synchornization between the sounds/music and your visualization (VuMeter for instance).\r\n   * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-the-analyser\r\n   * @param analyser The analyser to connect to the engine\r\n   */\n\n\n  SoundTrack.prototype.connectToAnalyser = function (analyser) {\n    if (this._connectedAnalyser) {\n      this._connectedAnalyser.stopDebugCanvas();\n    }\n\n    this._connectedAnalyser = analyser;\n\n    if (Engine.audioEngine.canUseWebAudio && this._outputAudioNode) {\n      this._outputAudioNode.disconnect();\n\n      this._connectedAnalyser.connectAudioNodes(this._outputAudioNode, Engine.audioEngine.masterGain);\n    }\n  };\n\n  return SoundTrack;\n}();\n\nexport { SoundTrack };","map":{"version":3,"sources":["../../../sourceES6/core/Audio/soundTrack.ts"],"names":[],"mappings":"AAIA,SAAS,MAAT,QAAuB,mBAAvB;AAgBA;;;;;;AAKA,IAAA,UAAA;AAAA;AAAA,YAAA;AAgBI;;;;;;AAMA,WAAA,UAAA,CAAY,KAAZ,EAA0B,OAA1B,EAA0D;AAAhC,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAAgC;AArB1D;;;;;AAGO,SAAA,EAAA,GAAa,CAAC,CAAd;AAUC,SAAA,cAAA,GAAiB,KAAjB;AASJ,SAAK,MAAL,GAAc,KAAd;AACA,SAAK,eAAL,GAAuB,IAAI,KAAJ,EAAvB;AACA,SAAK,QAAL,GAAgB,OAAhB;;AAEA,QAAI,CAAC,KAAK,QAAL,CAAc,SAAf,IAA4B,KAAK,MAAL,CAAY,WAA5C,EAAyD;AACrD,WAAK,MAAL,CAAY,WAAZ,CAAwB,IAAxB,CAA6B,IAA7B;;AACA,WAAK,EAAL,GAAU,KAAK,MAAL,CAAY,WAAZ,CAAwB,MAAxB,GAAiC,CAA3C;AACH;AACJ;;AAEO,EAAA,UAAA,CAAA,SAAA,CAAA,+BAAA,GAAR,YAAA;AACI,QAAI,MAAM,CAAC,WAAP,CAAmB,cAAnB,IAAqC,MAAM,CAAC,WAAP,CAAmB,YAA5D,EAA0E;AACtE,WAAK,gBAAL,GAAwB,MAAM,CAAC,WAAP,CAAmB,YAAnB,CAAgC,UAAhC,EAAxB;;AACA,WAAK,gBAAL,CAAsB,OAAtB,CAA8B,MAAM,CAAC,WAAP,CAAmB,UAAjD;;AAEA,UAAI,KAAK,QAAT,EAAmB;AACf,YAAI,KAAK,QAAL,CAAc,MAAlB,EAA0B;AAAE,eAAK,gBAAL,CAAsB,IAAtB,CAA2B,KAA3B,GAAmC,KAAK,QAAL,CAAc,MAAjD;AAA0D;AACzF;;AAED,WAAK,cAAL,GAAsB,IAAtB;AACH;AACJ,GAXO;AAaR;;;;;AAGO,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,QAAI,MAAM,CAAC,WAAP,IAAsB,MAAM,CAAC,WAAP,CAAmB,cAA7C,EAA6D;AACzD,UAAI,KAAK,kBAAT,EAA6B;AACzB,aAAK,kBAAL,CAAwB,eAAxB;AACH;;AACD,aAAO,KAAK,eAAL,CAAqB,MAA5B,EAAoC;AAChC,aAAK,eAAL,CAAqB,CAArB,EAAwB,OAAxB;AACH;;AACD,UAAI,KAAK,gBAAT,EAA2B;AACvB,aAAK,gBAAL,CAAsB,UAAtB;AACH;;AACD,WAAK,gBAAL,GAAwB,IAAxB;AACH;AACJ,GAbM;AAeP;;;;;;;AAKO,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,KAAhB,EAA4B;AACxB,QAAI,CAAC,KAAK,cAAV,EAA0B;AACtB,WAAK,+BAAL;AACH;;AACD,QAAI,MAAM,CAAC,WAAP,CAAmB,cAAnB,IAAqC,KAAK,gBAA9C,EAAgE;AAC5D,MAAA,KAAK,CAAC,4BAAN,CAAmC,KAAK,gBAAxC;AACH;;AACD,QAAI,KAAK,CAAC,YAAV,EAAwB;AACpB,UAAI,KAAK,CAAC,YAAN,KAAuB,CAAC,CAA5B,EAA+B;AAC3B,aAAK,MAAL,CAAY,cAAZ,CAA2B,WAA3B,CAAuC,KAAvC;AACH,OAFD,MAGK,IAAI,KAAK,MAAL,CAAY,WAAhB,EAA6B;AAC9B,aAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,CAAC,YAA9B,EAA4C,WAA5C,CAAwD,KAAxD;AACH;AACJ;;AAED,SAAK,eAAL,CAAqB,IAArB,CAA0B,KAA1B;AACA,IAAA,KAAK,CAAC,YAAN,GAAqB,KAAK,EAA1B;AACH,GAlBM;AAoBP;;;;;;;AAKO,EAAA,UAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,KAAnB,EAA+B;AAC3B,QAAI,KAAK,GAAG,KAAK,eAAL,CAAqB,OAArB,CAA6B,KAA7B,CAAZ;;AACA,QAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,WAAK,eAAL,CAAqB,MAArB,CAA4B,KAA5B,EAAmC,CAAnC;AACH;AACJ,GALM;AAOP;;;;;;AAIO,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,SAAjB,EAAkC;AAC9B,QAAI,MAAM,CAAC,WAAP,CAAmB,cAAnB,IAAqC,KAAK,gBAA9C,EAAgE;AAC5D,WAAK,gBAAL,CAAsB,IAAtB,CAA2B,KAA3B,GAAmC,SAAnC;AACH;AACJ,GAJM;AAMP;;;;;;;AAKO,EAAA,UAAA,CAAA,SAAA,CAAA,wBAAA,GAAP,YAAA;AACI,QAAI,MAAM,CAAC,WAAP,CAAmB,cAAvB,EAAuC;AACnC,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,eAAL,CAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AAClD,aAAK,eAAL,CAAqB,CAArB,EAAwB,wBAAxB;AACH;AACJ;AACJ,GANM;AAQP;;;;;;;AAKO,EAAA,UAAA,CAAA,SAAA,CAAA,8BAAA,GAAP,YAAA;AACI,QAAI,MAAM,CAAC,WAAP,CAAmB,cAAvB,EAAuC;AACnC,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,eAAL,CAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AAClD,aAAK,eAAL,CAAqB,CAArB,EAAwB,8BAAxB;AACH;AACJ;AACJ,GANM;AAQP;;;;;;;;AAMO,EAAA,UAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,QAAzB,EAA2C;AACvC,QAAI,KAAK,kBAAT,EAA6B;AACzB,WAAK,kBAAL,CAAwB,eAAxB;AACH;;AACD,SAAK,kBAAL,GAA0B,QAA1B;;AACA,QAAI,MAAM,CAAC,WAAP,CAAmB,cAAnB,IAAqC,KAAK,gBAA9C,EAAgE;AAC5D,WAAK,gBAAL,CAAsB,UAAtB;;AACA,WAAK,kBAAL,CAAwB,iBAAxB,CAA0C,KAAK,gBAA/C,EAAiE,MAAM,CAAC,WAAP,CAAmB,UAApF;AACH;AACJ,GATM;;AAUX,SAAA,UAAA;AAAC,CAzJD,EAAA","sourcesContent":["import { Sound } from \"./sound\";\r\nimport { Analyser } from \"./analyser\";\r\nimport { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\n/**\r\n * Options allowed during the creation of a sound track.\r\n */\r\nexport interface ISoundTrackOptions {\r\n    /**\r\n     * The volume the sound track should take during creation\r\n     */\r\n    volume?: number;\r\n    /**\r\n     * Define if the sound track is the main sound track of the scene\r\n     */\r\n    mainTrack?: boolean;\r\n}\r\n\r\n/**\r\n * It could be useful to isolate your music & sounds on several tracks to better manage volume on a grouped instance of sounds.\r\n * It will be also used in a future release to apply effects on a specific track.\r\n * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-sound-tracks\r\n */\r\nexport class SoundTrack {\r\n    /**\r\n     * The unique identifier of the sound track in the scene.\r\n     */\r\n    public id: number = -1;\r\n    /**\r\n     * The list of sounds included in the sound track.\r\n     */\r\n    public soundCollection: Array<Sound>;\r\n\r\n    private _outputAudioNode: Nullable<GainNode>;\r\n    private _scene: Scene;\r\n    private _connectedAnalyser: Analyser;\r\n    private _options: ISoundTrackOptions;\r\n    private _isInitialized = false;\r\n\r\n    /**\r\n     * Creates a new sound track.\r\n     * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-sound-tracks\r\n     * @param scene Define the scene the sound track belongs to\r\n     * @param options\r\n     */\r\n    constructor(scene: Scene, options: ISoundTrackOptions = {}) {\r\n        this._scene = scene;\r\n        this.soundCollection = new Array();\r\n        this._options = options;\r\n\r\n        if (!this._options.mainTrack && this._scene.soundTracks) {\r\n            this._scene.soundTracks.push(this);\r\n            this.id = this._scene.soundTracks.length - 1;\r\n        }\r\n    }\r\n\r\n    private _initializeSoundTrackAudioGraph() {\r\n        if (Engine.audioEngine.canUseWebAudio && Engine.audioEngine.audioContext) {\r\n            this._outputAudioNode = Engine.audioEngine.audioContext.createGain();\r\n            this._outputAudioNode.connect(Engine.audioEngine.masterGain);\r\n\r\n            if (this._options) {\r\n                if (this._options.volume) { this._outputAudioNode.gain.value = this._options.volume; }\r\n            }\r\n\r\n            this._isInitialized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release the sound track and its associated resources\r\n     */\r\n    public dispose(): void {\r\n        if (Engine.audioEngine && Engine.audioEngine.canUseWebAudio) {\r\n            if (this._connectedAnalyser) {\r\n                this._connectedAnalyser.stopDebugCanvas();\r\n            }\r\n            while (this.soundCollection.length) {\r\n                this.soundCollection[0].dispose();\r\n            }\r\n            if (this._outputAudioNode) {\r\n                this._outputAudioNode.disconnect();\r\n            }\r\n            this._outputAudioNode = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a sound to this sound track\r\n     * @param sound define the cound to add\r\n     * @ignoreNaming\r\n     */\r\n    public addSound(sound: Sound): void {\r\n        if (!this._isInitialized) {\r\n            this._initializeSoundTrackAudioGraph();\r\n        }\r\n        if (Engine.audioEngine.canUseWebAudio && this._outputAudioNode) {\r\n            sound.connectToSoundTrackAudioNode(this._outputAudioNode);\r\n        }\r\n        if (sound.soundTrackId) {\r\n            if (sound.soundTrackId === -1) {\r\n                this._scene.mainSoundTrack.removeSound(sound);\r\n            }\r\n            else if (this._scene.soundTracks) {\r\n                this._scene.soundTracks[sound.soundTrackId].removeSound(sound);\r\n            }\r\n        }\r\n\r\n        this.soundCollection.push(sound);\r\n        sound.soundTrackId = this.id;\r\n    }\r\n\r\n    /**\r\n     * Removes a sound to this sound track\r\n     * @param sound define the cound to remove\r\n     * @ignoreNaming\r\n     */\r\n    public removeSound(sound: Sound): void {\r\n        var index = this.soundCollection.indexOf(sound);\r\n        if (index !== -1) {\r\n            this.soundCollection.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a global volume for the full sound track.\r\n     * @param newVolume Define the new volume of the sound track\r\n     */\r\n    public setVolume(newVolume: number): void {\r\n        if (Engine.audioEngine.canUseWebAudio && this._outputAudioNode) {\r\n            this._outputAudioNode.gain.value = newVolume;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to HRTF:\r\n     * Renders a stereo output of higher quality than equalpower â€” it uses a convolution with measured impulse responses from human subjects.\r\n     * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToHRTF(): void {\r\n        if (Engine.audioEngine.canUseWebAudio) {\r\n            for (var i = 0; i < this.soundCollection.length; i++) {\r\n                this.soundCollection[i].switchPanningModelToHRTF();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to Equal Power:\r\n     * Represents the equal-power panning algorithm, generally regarded as simple and efficient. equalpower is the default value.\r\n     * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToEqualPower(): void {\r\n        if (Engine.audioEngine.canUseWebAudio) {\r\n            for (var i = 0; i < this.soundCollection.length; i++) {\r\n                this.soundCollection[i].switchPanningModelToEqualPower();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect the sound track to an audio analyser allowing some amazing\r\n     * synchornization between the sounds/music and your visualization (VuMeter for instance).\r\n     * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-the-analyser\r\n     * @param analyser The analyser to connect to the engine\r\n     */\r\n    public connectToAnalyser(analyser: Analyser): void {\r\n        if (this._connectedAnalyser) {\r\n            this._connectedAnalyser.stopDebugCanvas();\r\n        }\r\n        this._connectedAnalyser = analyser;\r\n        if (Engine.audioEngine.canUseWebAudio && this._outputAudioNode) {\r\n            this._outputAudioNode.disconnect();\r\n            this._connectedAnalyser.connectAudioNodes(this._outputAudioNode, Engine.audioEngine.masterGain);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}