{"ast":null,"code":"import { Scene } from \"../scene\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { GamepadManager } from \"./gamepadManager\";\nimport { FreeCameraInputsManager } from \"../Cameras/freeCameraInputsManager\";\nimport { FreeCameraGamepadInput } from \"../Cameras/Inputs/freeCameraGamepadInput\";\nimport { ArcRotateCameraInputsManager } from \"../Cameras/arcRotateCameraInputsManager\";\nimport { ArcRotateCameraGamepadInput } from \"../Cameras/Inputs/arcRotateCameraGamepadInput\";\nObject.defineProperty(Scene.prototype, \"gamepadManager\", {\n  get: function () {\n    if (!this._gamepadManager) {\n      this._gamepadManager = new GamepadManager(this);\n\n      var component = this._getComponent(SceneComponentConstants.NAME_GAMEPAD);\n\n      if (!component) {\n        component = new GamepadSystemSceneComponent(this);\n\n        this._addComponent(component);\n      }\n    }\n\n    return this._gamepadManager;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\r\n * Adds a gamepad to the free camera inputs manager\r\n */\n\nFreeCameraInputsManager.prototype.addGamepad = function () {\n  this.add(new FreeCameraGamepadInput());\n  return this;\n};\n/**\r\n * Adds a gamepad to the arc rotate camera inputs manager\r\n */\n\n\nArcRotateCameraInputsManager.prototype.addGamepad = function () {\n  this.add(new ArcRotateCameraGamepadInput());\n  return this;\n};\n/**\r\n  * Defines the gamepad scene component responsible to manage gamepads in a given scene\r\n  */\n\n\nvar GamepadSystemSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function GamepadSystemSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_GAMEPAD;\n    this.scene = scene;\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  GamepadSystemSceneComponent.prototype.register = function () {\n    this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_GAMEPAD, this, this._beforeCameraUpdate);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  GamepadSystemSceneComponent.prototype.rebuild = function () {// Nothing to do for gamepads\n  };\n  /**\r\n   * Disposes the component and the associated ressources\r\n   */\n\n\n  GamepadSystemSceneComponent.prototype.dispose = function () {\n    var gamepadManager = this.scene._gamepadManager;\n\n    if (gamepadManager) {\n      gamepadManager.dispose();\n      this.scene._gamepadManager = null;\n    }\n  };\n\n  GamepadSystemSceneComponent.prototype._beforeCameraUpdate = function () {\n    var gamepadManager = this.scene._gamepadManager;\n\n    if (gamepadManager && gamepadManager._isMonitoring) {\n      gamepadManager._checkGamepadsStatus();\n    }\n  };\n\n  return GamepadSystemSceneComponent;\n}();\n\nexport { GamepadSystemSceneComponent };","map":{"version":3,"sources":["../../../sourceES6/core/Gamepads/gamepadSceneComponent.ts"],"names":[],"mappings":"AACA,SAAS,KAAT,QAAsB,UAAtB;AACA,SAAS,uBAAT,QAAyD,mBAAzD;AACA,SAAS,cAAT,QAA+B,kBAA/B;AAEA,SAAS,uBAAT,QAAwC,oCAAxC;AACA,SAAS,sBAAT,QAAuC,0CAAvC;AACA,SAAS,4BAAT,QAA6C,yCAA7C;AACA,SAAS,2BAAT,QAA4C,+CAA5C;AAeA,MAAM,CAAC,cAAP,CAAsB,KAAK,CAAC,SAA5B,EAAuC,gBAAvC,EAAyD;AACrD,EAAA,GAAG,EAAE,YAAA;AACD,QAAI,CAAC,KAAK,eAAV,EAA2B;AACvB,WAAK,eAAL,GAAuB,IAAI,cAAJ,CAAmB,IAAnB,CAAvB;;AACA,UAAI,SAAS,GAAG,KAAK,aAAL,CAAmB,uBAAuB,CAAC,YAA3C,CAAhB;;AACA,UAAI,CAAC,SAAL,EAAgB;AACZ,QAAA,SAAS,GAAG,IAAI,2BAAJ,CAAgC,IAAhC,CAAZ;;AACA,aAAK,aAAL,CAAmB,SAAnB;AACH;AACJ;;AAED,WAAO,KAAK,eAAZ;AACH,GAZoD;AAarD,EAAA,UAAU,EAAE,IAbyC;AAcrD,EAAA,YAAY,EAAE;AAduC,CAAzD;AA8BA;;;;AAGA,uBAAuB,CAAC,SAAxB,CAAkC,UAAlC,GAA+C,YAAA;AAC3C,OAAK,GAAL,CAAS,IAAI,sBAAJ,EAAT;AACA,SAAO,IAAP;AACH,CAHD;AAkBA;;;;;AAGA,4BAA4B,CAAC,SAA7B,CAAuC,UAAvC,GAAoD,YAAA;AAChD,OAAK,GAAL,CAAS,IAAI,2BAAJ,EAAT;AACA,SAAO,IAAP;AACH,CAHD;AAKA;;;;;AAGA,IAAA,2BAAA;AAAA;AAAA,YAAA;AAWI;;;;AAIA,WAAA,2BAAA,CAAY,KAAZ,EAAwB;AAdxB;;;AAGgB,SAAA,IAAA,GAAO,uBAAuB,CAAC,YAA/B;AAYZ,SAAK,KAAL,GAAa,KAAb;AACH;AAED;;;;;AAGO,EAAA,2BAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACI,SAAK,KAAL,CAAW,wBAAX,CAAoC,YAApC,CAAiD,uBAAuB,CAAC,+BAAzE,EAA0G,IAA1G,EAAgH,KAAK,mBAArH;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,2BAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA,CACI;AACH,GAFM;AAIP;;;;;AAGO,EAAA,2BAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,QAAI,cAAc,GAAG,KAAK,KAAL,CAAW,eAAhC;;AACA,QAAI,cAAJ,EAAoB;AAChB,MAAA,cAAc,CAAC,OAAf;AACA,WAAK,KAAL,CAAW,eAAX,GAA6B,IAA7B;AACH;AACJ,GANM;;AAQC,EAAA,2BAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,YAAA;AACI,QAAI,cAAc,GAAG,KAAK,KAAL,CAAW,eAAhC;;AAEA,QAAI,cAAc,IAAI,cAAc,CAAC,aAArC,EAAoD;AAChD,MAAA,cAAc,CAAC,oBAAf;AACH;AACJ,GANO;;AAOZ,SAAA,2BAAA;AAAC,CApDD,EAAA","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { SceneComponentConstants, ISceneComponent } from \"../sceneComponent\";\r\nimport { GamepadManager } from \"./gamepadManager\";\r\n\r\nimport { FreeCameraInputsManager } from \"../Cameras/freeCameraInputsManager\";\r\nimport { FreeCameraGamepadInput } from \"../Cameras/Inputs/freeCameraGamepadInput\";\r\nimport { ArcRotateCameraInputsManager } from \"../Cameras/arcRotateCameraInputsManager\";\r\nimport { ArcRotateCameraGamepadInput } from \"../Cameras/Inputs/arcRotateCameraGamepadInput\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @hidden */\r\n        _gamepadManager: Nullable<GamepadManager>;\r\n\r\n        /**\r\n         * Gets the gamepad manager associated with the scene\r\n         * @see https://doc.babylonjs.com/how_to/how_to_use_gamepads\r\n         */\r\n        gamepadManager: GamepadManager;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"gamepadManager\", {\r\n    get: function(this: Scene) {\r\n        if (!this._gamepadManager) {\r\n            this._gamepadManager = new GamepadManager(this);\r\n            let component = this._getComponent(SceneComponentConstants.NAME_GAMEPAD) as GamepadSystemSceneComponent;\r\n            if (!component) {\r\n                component = new GamepadSystemSceneComponent(this);\r\n                this._addComponent(component);\r\n            }\r\n        }\r\n\r\n        return this._gamepadManager;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\ndeclare module \"../Cameras/freeCameraInputsManager\" {\r\n    /**\r\n     * Interface representing a free camera inputs manager\r\n     */\r\n    export interface FreeCameraInputsManager {\r\n        /**\r\n         * Adds gamepad input support to the FreeCameraInputsManager.\r\n         * @returns the FreeCameraInputsManager\r\n         */\r\n        addGamepad(): FreeCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a gamepad to the free camera inputs manager\r\n */\r\nFreeCameraInputsManager.prototype.addGamepad = function(): FreeCameraInputsManager {\r\n    this.add(new FreeCameraGamepadInput());\r\n    return this;\r\n};\r\n\r\ndeclare module \"../Cameras/arcRotateCameraInputsManager\" {\r\n    /**\r\n     * Interface representing an arc rotate camera inputs manager\r\n     */\r\n    export interface ArcRotateCameraInputsManager {\r\n        /**\r\n         * Adds gamepad input support to the ArcRotateCamera InputManager.\r\n         * @returns the camera inputs manager\r\n         */\r\n        addGamepad(): ArcRotateCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a gamepad to the arc rotate camera inputs manager\r\n */\r\nArcRotateCameraInputsManager.prototype.addGamepad = function(): ArcRotateCameraInputsManager {\r\n    this.add(new ArcRotateCameraGamepadInput());\r\n    return this;\r\n};\r\n\r\n/**\r\n  * Defines the gamepad scene component responsible to manage gamepads in a given scene\r\n  */\r\nexport class GamepadSystemSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_GAMEPAD;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_GAMEPAD, this, this._beforeCameraUpdate);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for gamepads\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated ressources\r\n     */\r\n    public dispose(): void {\r\n        let gamepadManager = this.scene._gamepadManager;\r\n        if (gamepadManager) {\r\n            gamepadManager.dispose();\r\n            this.scene._gamepadManager = null;\r\n        }\r\n    }\r\n\r\n    private _beforeCameraUpdate(): void {\r\n        let gamepadManager = this.scene._gamepadManager;\r\n\r\n        if (gamepadManager && gamepadManager._isMonitoring) {\r\n            gamepadManager._checkGamepadsStatus();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}