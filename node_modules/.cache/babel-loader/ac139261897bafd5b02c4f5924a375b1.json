{"ast":null,"code":"import { Tools } from \"../Misc/tools\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { AbstractScene } from \"../abstractScene\";\nimport { LensFlareSystem } from \"./lensFlareSystem\"; // Adds the parser to the scene parsers.\n\nAbstractScene.AddParser(SceneComponentConstants.NAME_LENSFLARESYSTEM, function (parsedData, scene, container, rootUrl) {\n  // Lens flares\n  if (parsedData.lensFlareSystems !== undefined && parsedData.lensFlareSystems !== null) {\n    if (!container.lensFlareSystems) {\n      container.lensFlareSystems = new Array();\n    }\n\n    for (var index = 0, cache = parsedData.lensFlareSystems.length; index < cache; index++) {\n      var parsedLensFlareSystem = parsedData.lensFlareSystems[index];\n      var lf = LensFlareSystem.Parse(parsedLensFlareSystem, scene, rootUrl);\n      container.lensFlareSystems.push(lf);\n    }\n  }\n});\n\nAbstractScene.prototype.getLensFlareSystemByName = function (name) {\n  for (var index = 0; index < this.lensFlareSystems.length; index++) {\n    if (this.lensFlareSystems[index].name === name) {\n      return this.lensFlareSystems[index];\n    }\n  }\n\n  return null;\n};\n\nAbstractScene.prototype.getLensFlareSystemByID = function (id) {\n  for (var index = 0; index < this.lensFlareSystems.length; index++) {\n    if (this.lensFlareSystems[index].id === id) {\n      return this.lensFlareSystems[index];\n    }\n  }\n\n  return null;\n};\n\nAbstractScene.prototype.removeLensFlareSystem = function (toRemove) {\n  var index = this.lensFlareSystems.indexOf(toRemove);\n\n  if (index !== -1) {\n    this.lensFlareSystems.splice(index, 1);\n  }\n\n  return index;\n};\n\nAbstractScene.prototype.addLensFlareSystem = function (newLensFlareSystem) {\n  this.lensFlareSystems.push(newLensFlareSystem);\n};\n/**\r\n * Defines the lens flare scene component responsible to manage any lens flares\r\n * in a given scene.\r\n */\n\n\nvar LensFlareSystemSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function LensFlareSystemSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_LENSFLARESYSTEM;\n    this.scene = scene;\n    scene.lensFlareSystems = new Array();\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.register = function () {\n    this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LENSFLARESYSTEM, this, this._draw);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.rebuild = function () {// Nothing to do for lens flare\n  };\n  /**\r\n   * Adds all the elements from the container to the scene\r\n   * @param container the container holding the elements\r\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.addFromContainer = function (container) {\n    var _this = this;\n\n    if (!container.lensFlareSystems) {\n      return;\n    }\n\n    container.lensFlareSystems.forEach(function (o) {\n      _this.scene.addLensFlareSystem(o);\n    });\n  };\n  /**\r\n   * Removes all the elements in the container from the scene\r\n   * @param container contains the elements to remove\r\n   * @param dispose if the removed element should be disposed (default: false)\r\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.removeFromContainer = function (container, dispose) {\n    var _this = this;\n\n    if (!container.lensFlareSystems) {\n      return;\n    }\n\n    container.lensFlareSystems.forEach(function (o) {\n      _this.scene.removeLensFlareSystem(o);\n\n      if (dispose) {\n        o.dispose();\n      }\n    });\n  };\n  /**\r\n   * Serializes the component data to the specified json object\r\n   * @param serializationObject The object to serialize to\r\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.serialize = function (serializationObject) {\n    // Lens flares\n    serializationObject.lensFlareSystems = [];\n    var lensFlareSystems = this.scene.lensFlareSystems;\n\n    for (var _i = 0, lensFlareSystems_1 = lensFlareSystems; _i < lensFlareSystems_1.length; _i++) {\n      var lensFlareSystem = lensFlareSystems_1[_i];\n      serializationObject.lensFlareSystems.push(lensFlareSystem.serialize());\n    }\n  };\n  /**\r\n   * Disposes the component and the associated ressources.\r\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.dispose = function () {\n    var lensFlareSystems = this.scene.lensFlareSystems;\n\n    while (lensFlareSystems.length) {\n      lensFlareSystems[0].dispose();\n    }\n  };\n\n  LensFlareSystemSceneComponent.prototype._draw = function (camera) {\n    // Lens flares\n    if (this.scene.lensFlaresEnabled) {\n      var lensFlareSystems = this.scene.lensFlareSystems;\n      Tools.StartPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\n\n      for (var _i = 0, lensFlareSystems_2 = lensFlareSystems; _i < lensFlareSystems_2.length; _i++) {\n        var lensFlareSystem = lensFlareSystems_2[_i];\n\n        if ((camera.layerMask & lensFlareSystem.layerMask) !== 0) {\n          lensFlareSystem.render();\n        }\n      }\n\n      Tools.EndPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\n    }\n  };\n\n  return LensFlareSystemSceneComponent;\n}();\n\nexport { LensFlareSystemSceneComponent };\n\nLensFlareSystem._SceneComponentInitialization = function (scene) {\n  var component = scene._getComponent(SceneComponentConstants.NAME_LENSFLARESYSTEM);\n\n  if (!component) {\n    component = new LensFlareSystemSceneComponent(scene);\n\n    scene._addComponent(component);\n  }\n};","map":{"version":3,"sources":["../../../sourceES6/core/LensFlares/lensFlareSystemSceneComponent.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Scene } from \"../scene\";\r\nimport { SceneComponentConstants, ISceneSerializableComponent } from \"../sceneComponent\";\r\nimport { AbstractScene } from \"../abstractScene\";\r\nimport { AssetContainer } from \"../assetContainer\";\r\nimport { LensFlareSystem } from \"./lensFlareSystem\";\r\n// Adds the parser to the scene parsers.\r\nAbstractScene.AddParser(SceneComponentConstants.NAME_LENSFLARESYSTEM, (parsedData: any, scene: Scene, container: AssetContainer, rootUrl: string) => {\r\n    // Lens flares\r\n    if (parsedData.lensFlareSystems !== undefined && parsedData.lensFlareSystems !== null) {\r\n        if (!container.lensFlareSystems) {\r\n            container.lensFlareSystems = new Array<LensFlareSystem>();\r\n        }\r\n\r\n        for (let index = 0, cache = parsedData.lensFlareSystems.length; index < cache; index++) {\r\n            var parsedLensFlareSystem = parsedData.lensFlareSystems[index];\r\n            var lf = LensFlareSystem.Parse(parsedLensFlareSystem, scene, rootUrl);\r\n            container.lensFlareSystems.push(lf);\r\n        }\r\n    }\r\n});\r\n\r\ndeclare module \"../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /**\r\n         * The list of lens flare system added to the scene\r\n         * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n         */\r\n        lensFlareSystems: Array<LensFlareSystem>;\r\n\r\n        /**\r\n         * Removes the given lens flare system from this scene.\r\n         * @param toRemove The lens flare system to remove\r\n         * @returns The index of the removed lens flare system\r\n         */\r\n        removeLensFlareSystem(toRemove: LensFlareSystem): number;\r\n\r\n        /**\r\n         * Adds the given lens flare system to this scene\r\n         * @param newLensFlareSystem The lens flare system to add\r\n         */\r\n        addLensFlareSystem(newLensFlareSystem: LensFlareSystem): void;\r\n\r\n        /**\r\n         * Gets a lens flare system using its name\r\n         * @param name defines the name to look for\r\n         * @returns the lens flare system or null if not found\r\n         */\r\n        getLensFlareSystemByName(name: string): Nullable<LensFlareSystem>;\r\n\r\n        /**\r\n         * Gets a lens flare system using its id\r\n         * @param id defines the id to look for\r\n         * @returns the lens flare system or null if not found\r\n         */\r\n        getLensFlareSystemByID(id: string): Nullable<LensFlareSystem>;\r\n    }\r\n}\r\n\r\nAbstractScene.prototype.getLensFlareSystemByName = function(name: string): Nullable<LensFlareSystem> {\r\n    for (var index = 0; index < this.lensFlareSystems.length; index++) {\r\n        if (this.lensFlareSystems[index].name === name) {\r\n            return this.lensFlareSystems[index];\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nAbstractScene.prototype.getLensFlareSystemByID = function(id: string): Nullable<LensFlareSystem> {\r\n    for (var index = 0; index < this.lensFlareSystems.length; index++) {\r\n        if (this.lensFlareSystems[index].id === id) {\r\n            return this.lensFlareSystems[index];\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nAbstractScene.prototype.removeLensFlareSystem = function(toRemove: LensFlareSystem): number {\r\n    var index = this.lensFlareSystems.indexOf(toRemove);\r\n    if (index !== -1) {\r\n        this.lensFlareSystems.splice(index, 1);\r\n    }\r\n    return index;\r\n};\r\n\r\nAbstractScene.prototype.addLensFlareSystem = function(newLensFlareSystem: LensFlareSystem): void {\r\n    this.lensFlareSystems.push(newLensFlareSystem);\r\n};\r\n\r\n/**\r\n * Defines the lens flare scene component responsible to manage any lens flares\r\n * in a given scene.\r\n */\r\nexport class LensFlareSystemSceneComponent implements ISceneSerializableComponent {\r\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_LENSFLARESYSTEM;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n\r\n        scene.lensFlareSystems = new Array<LensFlareSystem>();\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LENSFLARESYSTEM, this, this._draw);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for lens flare\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    public addFromContainer(container: AbstractScene): void {\r\n        if (!container.lensFlareSystems) {\r\n            return;\r\n        }\r\n        container.lensFlareSystems.forEach((o) => {\r\n            this.scene.addLensFlareSystem(o);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    public removeFromContainer(container: AbstractScene, dispose?: boolean): void {\r\n        if (!container.lensFlareSystems) {\r\n            return;\r\n        }\r\n        container.lensFlareSystems.forEach((o) => {\r\n            this.scene.removeLensFlareSystem(o);\r\n            if (dispose) {\r\n                o.dispose();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        // Lens flares\r\n        serializationObject.lensFlareSystems = [];\r\n        let lensFlareSystems = this.scene.lensFlareSystems;\r\n        for (let lensFlareSystem of lensFlareSystems) {\r\n            serializationObject.lensFlareSystems.push(lensFlareSystem.serialize());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated ressources.\r\n     */\r\n    public dispose(): void {\r\n        let lensFlareSystems = this.scene.lensFlareSystems;\r\n        while (lensFlareSystems.length) {\r\n            lensFlareSystems[0].dispose();\r\n        }\r\n    }\r\n\r\n    private _draw(camera: Camera): void {\r\n        // Lens flares\r\n        if (this.scene.lensFlaresEnabled) {\r\n            let lensFlareSystems = this.scene.lensFlareSystems;\r\n            Tools.StartPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\r\n            for (let lensFlareSystem of lensFlareSystems) {\r\n                if ((camera.layerMask & lensFlareSystem.layerMask) !== 0) {\r\n                    lensFlareSystem.render();\r\n                }\r\n            }\r\n            Tools.EndPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\r\n        }\r\n    }\r\n}\r\n\r\nLensFlareSystem._SceneComponentInitialization = (scene: Scene) => {\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_LENSFLARESYSTEM) as LensFlareSystemSceneComponent;\r\n    if (!component) {\r\n        component = new LensFlareSystemSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};"],"sourceRoot":""},"metadata":{},"sourceType":"module"}