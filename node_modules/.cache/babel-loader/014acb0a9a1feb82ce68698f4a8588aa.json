{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Observable } from \"../Misc/observable\";\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Color3, Color4 } from '../Maths/math.color';\nimport { Mesh } from \"../Meshes/mesh\";\nimport { BaseTexture } from \"../Materials/Textures/baseTexture\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { MirrorTexture } from \"../Materials/Textures/mirrorTexture\";\nimport { CubeTexture } from \"../Materials/Textures/cubeTexture\";\nimport { BackgroundMaterial } from \"../Materials/Background/backgroundMaterial\";\nimport \"../Meshes/Builders/planeBuilder\";\nimport \"../Meshes/Builders/boxBuilder\";\nimport { Plane } from '../Maths/math.plane';\n/**\r\n * The Environment helper class can be used to add a fully featuread none expensive background to your scene.\r\n * It includes by default a skybox and a ground relying on the BackgroundMaterial.\r\n * It also helps with the default setup of your imageProcessing configuration.\r\n */\n\nvar EnvironmentHelper =\n/** @class */\nfunction () {\n  /**\r\n   * constructor\r\n   * @param options Defines the options we want to customize the helper\r\n   * @param scene The scene to add the material to\r\n   */\n  function EnvironmentHelper(options, scene) {\n    var _this = this;\n\n    this._errorHandler = function (message, exception) {\n      _this.onErrorObservable.notifyObservers({\n        message: message,\n        exception: exception\n      });\n    };\n\n    this._options = __assign(__assign({}, EnvironmentHelper._getDefaultOptions()), options);\n    this._scene = scene;\n    this.onErrorObservable = new Observable();\n\n    this._setupBackground();\n\n    this._setupImageProcessing();\n  }\n  /**\r\n   * Creates the default options for the helper.\r\n   */\n\n\n  EnvironmentHelper._getDefaultOptions = function () {\n    return {\n      createGround: true,\n      groundSize: 15,\n      groundTexture: this._groundTextureCDNUrl,\n      groundColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\n      groundOpacity: 0.9,\n      enableGroundShadow: true,\n      groundShadowLevel: 0.5,\n      enableGroundMirror: false,\n      groundMirrorSizeRatio: 0.3,\n      groundMirrorBlurKernel: 64,\n      groundMirrorAmount: 1,\n      groundMirrorFresnelWeight: 1,\n      groundMirrorFallOffDistance: 0,\n      groundMirrorTextureType: 0,\n      groundYBias: 0.00001,\n      createSkybox: true,\n      skyboxSize: 20,\n      skyboxTexture: this._skyboxTextureCDNUrl,\n      skyboxColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\n      backgroundYRotation: 0,\n      sizeAuto: true,\n      rootPosition: Vector3.Zero(),\n      setupImageProcessing: true,\n      environmentTexture: this._environmentTextureCDNUrl,\n      cameraExposure: 0.8,\n      cameraContrast: 1.2,\n      toneMappingEnabled: true\n    };\n  };\n\n  Object.defineProperty(EnvironmentHelper.prototype, \"rootMesh\", {\n    /**\r\n     * Gets the root mesh created by the helper.\r\n     */\n    get: function () {\n      return this._rootMesh;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"skybox\", {\n    /**\r\n     * Gets the skybox created by the helper.\r\n     */\n    get: function () {\n      return this._skybox;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"skyboxTexture\", {\n    /**\r\n     * Gets the skybox texture created by the helper.\r\n     */\n    get: function () {\n      return this._skyboxTexture;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"skyboxMaterial\", {\n    /**\r\n     * Gets the skybox material created by the helper.\r\n     */\n    get: function () {\n      return this._skyboxMaterial;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"ground\", {\n    /**\r\n     * Gets the ground mesh created by the helper.\r\n     */\n    get: function () {\n      return this._ground;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"groundTexture\", {\n    /**\r\n     * Gets the ground texture created by the helper.\r\n     */\n    get: function () {\n      return this._groundTexture;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"groundMirror\", {\n    /**\r\n     * Gets the ground mirror created by the helper.\r\n     */\n    get: function () {\n      return this._groundMirror;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"groundMirrorRenderList\", {\n    /**\r\n     * Gets the ground mirror render list to helps pushing the meshes\r\n     * you wish in the ground reflection.\r\n     */\n    get: function () {\n      if (this._groundMirror) {\n        return this._groundMirror.renderList;\n      }\n\n      return null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"groundMaterial\", {\n    /**\r\n     * Gets the ground material created by the helper.\r\n     */\n    get: function () {\n      return this._groundMaterial;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Updates the background according to the new options\r\n   * @param options\r\n   */\n\n  EnvironmentHelper.prototype.updateOptions = function (options) {\n    var newOptions = __assign(__assign({}, this._options), options);\n\n    if (this._ground && !newOptions.createGround) {\n      this._ground.dispose();\n\n      this._ground = null;\n    }\n\n    if (this._groundMaterial && !newOptions.createGround) {\n      this._groundMaterial.dispose();\n\n      this._groundMaterial = null;\n    }\n\n    if (this._groundTexture) {\n      if (this._options.groundTexture != newOptions.groundTexture) {\n        this._groundTexture.dispose();\n\n        this._groundTexture = null;\n      }\n    }\n\n    if (this._skybox && !newOptions.createSkybox) {\n      this._skybox.dispose();\n\n      this._skybox = null;\n    }\n\n    if (this._skyboxMaterial && !newOptions.createSkybox) {\n      this._skyboxMaterial.dispose();\n\n      this._skyboxMaterial = null;\n    }\n\n    if (this._skyboxTexture) {\n      if (this._options.skyboxTexture != newOptions.skyboxTexture) {\n        this._skyboxTexture.dispose();\n\n        this._skyboxTexture = null;\n      }\n    }\n\n    if (this._groundMirror && !newOptions.enableGroundMirror) {\n      this._groundMirror.dispose();\n\n      this._groundMirror = null;\n    }\n\n    if (this._scene.environmentTexture) {\n      if (this._options.environmentTexture != newOptions.environmentTexture) {\n        this._scene.environmentTexture.dispose();\n      }\n    }\n\n    this._options = newOptions;\n\n    this._setupBackground();\n\n    this._setupImageProcessing();\n  };\n  /**\r\n   * Sets the primary color of all the available elements.\r\n   * @param color the main color to affect to the ground and the background\r\n   */\n\n\n  EnvironmentHelper.prototype.setMainColor = function (color) {\n    if (this.groundMaterial) {\n      this.groundMaterial.primaryColor = color;\n    }\n\n    if (this.skyboxMaterial) {\n      this.skyboxMaterial.primaryColor = color;\n    }\n\n    if (this.groundMirror) {\n      this.groundMirror.clearColor = new Color4(color.r, color.g, color.b, 1.0);\n    }\n  };\n  /**\r\n   * Setup the image processing according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupImageProcessing = function () {\n    if (this._options.setupImageProcessing) {\n      this._scene.imageProcessingConfiguration.contrast = this._options.cameraContrast;\n      this._scene.imageProcessingConfiguration.exposure = this._options.cameraExposure;\n      this._scene.imageProcessingConfiguration.toneMappingEnabled = this._options.toneMappingEnabled;\n\n      this._setupEnvironmentTexture();\n    }\n  };\n  /**\r\n   * Setup the environment texture according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupEnvironmentTexture = function () {\n    if (this._scene.environmentTexture) {\n      return;\n    }\n\n    if (this._options.environmentTexture instanceof BaseTexture) {\n      this._scene.environmentTexture = this._options.environmentTexture;\n      return;\n    }\n\n    var environmentTexture = CubeTexture.CreateFromPrefilteredData(this._options.environmentTexture, this._scene);\n    this._scene.environmentTexture = environmentTexture;\n  };\n  /**\r\n   * Setup the background according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupBackground = function () {\n    if (!this._rootMesh) {\n      this._rootMesh = new Mesh(\"BackgroundHelper\", this._scene);\n    }\n\n    this._rootMesh.rotation.y = this._options.backgroundYRotation;\n\n    var sceneSize = this._getSceneSize();\n\n    if (this._options.createGround) {\n      this._setupGround(sceneSize);\n\n      this._setupGroundMaterial();\n\n      this._setupGroundDiffuseTexture();\n\n      if (this._options.enableGroundMirror) {\n        this._setupGroundMirrorTexture(sceneSize);\n      }\n\n      this._setupMirrorInGroundMaterial();\n    }\n\n    if (this._options.createSkybox) {\n      this._setupSkybox(sceneSize);\n\n      this._setupSkyboxMaterial();\n\n      this._setupSkyboxReflectionTexture();\n    }\n\n    this._rootMesh.position.x = sceneSize.rootPosition.x;\n    this._rootMesh.position.z = sceneSize.rootPosition.z;\n    this._rootMesh.position.y = sceneSize.rootPosition.y;\n  };\n  /**\r\n   * Get the scene sizes according to the setup.\r\n   */\n\n\n  EnvironmentHelper.prototype._getSceneSize = function () {\n    var _this = this;\n\n    var groundSize = this._options.groundSize;\n    var skyboxSize = this._options.skyboxSize;\n    var rootPosition = this._options.rootPosition;\n\n    if (!this._scene.meshes || this._scene.meshes.length === 1) {\n      // 1 only means the root of the helper.\n      return {\n        groundSize: groundSize,\n        skyboxSize: skyboxSize,\n        rootPosition: rootPosition\n      };\n    }\n\n    var sceneExtends = this._scene.getWorldExtends(function (mesh) {\n      return mesh !== _this._ground && mesh !== _this._rootMesh && mesh !== _this._skybox;\n    });\n\n    var sceneDiagonal = sceneExtends.max.subtract(sceneExtends.min);\n\n    if (this._options.sizeAuto) {\n      if (this._scene.activeCamera instanceof ArcRotateCamera && this._scene.activeCamera.upperRadiusLimit) {\n        groundSize = this._scene.activeCamera.upperRadiusLimit * 2;\n        skyboxSize = groundSize;\n      }\n\n      var sceneDiagonalLenght = sceneDiagonal.length();\n\n      if (sceneDiagonalLenght > groundSize) {\n        groundSize = sceneDiagonalLenght * 2;\n        skyboxSize = groundSize;\n      } // 10 % bigger.\n\n\n      groundSize *= 1.1;\n      skyboxSize *= 1.5;\n      rootPosition = sceneExtends.min.add(sceneDiagonal.scale(0.5));\n      rootPosition.y = sceneExtends.min.y - this._options.groundYBias;\n    }\n\n    return {\n      groundSize: groundSize,\n      skyboxSize: skyboxSize,\n      rootPosition: rootPosition\n    };\n  };\n  /**\r\n   * Setup the ground according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupGround = function (sceneSize) {\n    var _this = this;\n\n    if (!this._ground || this._ground.isDisposed()) {\n      this._ground = Mesh.CreatePlane(\"BackgroundPlane\", sceneSize.groundSize, this._scene);\n      this._ground.rotation.x = Math.PI / 2; // Face up by default.\n\n      this._ground.parent = this._rootMesh;\n\n      this._ground.onDisposeObservable.add(function () {\n        _this._ground = null;\n      });\n    }\n\n    this._ground.receiveShadows = this._options.enableGroundShadow;\n  };\n  /**\r\n   * Setup the ground material according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupGroundMaterial = function () {\n    if (!this._groundMaterial) {\n      this._groundMaterial = new BackgroundMaterial(\"BackgroundPlaneMaterial\", this._scene);\n    }\n\n    this._groundMaterial.alpha = this._options.groundOpacity;\n    this._groundMaterial.alphaMode = 8;\n    this._groundMaterial.shadowLevel = this._options.groundShadowLevel;\n    this._groundMaterial.primaryColor = this._options.groundColor;\n    this._groundMaterial.useRGBColor = false;\n    this._groundMaterial.enableNoise = true;\n\n    if (this._ground) {\n      this._ground.material = this._groundMaterial;\n    }\n  };\n  /**\r\n   * Setup the ground diffuse texture according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupGroundDiffuseTexture = function () {\n    if (!this._groundMaterial) {\n      return;\n    }\n\n    if (this._groundTexture) {\n      return;\n    }\n\n    if (this._options.groundTexture instanceof BaseTexture) {\n      this._groundMaterial.diffuseTexture = this._options.groundTexture;\n      return;\n    }\n\n    this._groundTexture = new Texture(this._options.groundTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\n    this._groundTexture.gammaSpace = false;\n    this._groundTexture.hasAlpha = true;\n    this._groundMaterial.diffuseTexture = this._groundTexture;\n  };\n  /**\r\n   * Setup the ground mirror texture according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupGroundMirrorTexture = function (sceneSize) {\n    var wrapping = Texture.CLAMP_ADDRESSMODE;\n\n    if (!this._groundMirror) {\n      this._groundMirror = new MirrorTexture(\"BackgroundPlaneMirrorTexture\", {\n        ratio: this._options.groundMirrorSizeRatio\n      }, this._scene, false, this._options.groundMirrorTextureType, Texture.BILINEAR_SAMPLINGMODE, true);\n      this._groundMirror.mirrorPlane = new Plane(0, -1, 0, sceneSize.rootPosition.y);\n      this._groundMirror.anisotropicFilteringLevel = 1;\n      this._groundMirror.wrapU = wrapping;\n      this._groundMirror.wrapV = wrapping;\n      this._groundMirror.gammaSpace = false;\n\n      if (this._groundMirror.renderList) {\n        for (var i = 0; i < this._scene.meshes.length; i++) {\n          var mesh = this._scene.meshes[i];\n\n          if (mesh !== this._ground && mesh !== this._skybox && mesh !== this._rootMesh) {\n            this._groundMirror.renderList.push(mesh);\n          }\n        }\n      }\n    }\n\n    this._groundMirror.clearColor = new Color4(this._options.groundColor.r, this._options.groundColor.g, this._options.groundColor.b, 1);\n    this._groundMirror.adaptiveBlurKernel = this._options.groundMirrorBlurKernel;\n  };\n  /**\r\n   * Setup the ground to receive the mirror texture.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupMirrorInGroundMaterial = function () {\n    if (this._groundMaterial) {\n      this._groundMaterial.reflectionTexture = this._groundMirror;\n      this._groundMaterial.reflectionFresnel = true;\n      this._groundMaterial.reflectionAmount = this._options.groundMirrorAmount;\n      this._groundMaterial.reflectionStandardFresnelWeight = this._options.groundMirrorFresnelWeight;\n      this._groundMaterial.reflectionFalloffDistance = this._options.groundMirrorFallOffDistance;\n    }\n  };\n  /**\r\n   * Setup the skybox according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupSkybox = function (sceneSize) {\n    var _this = this;\n\n    if (!this._skybox || this._skybox.isDisposed()) {\n      this._skybox = Mesh.CreateBox(\"BackgroundSkybox\", sceneSize.skyboxSize, this._scene, undefined, Mesh.BACKSIDE);\n\n      this._skybox.onDisposeObservable.add(function () {\n        _this._skybox = null;\n      });\n    }\n\n    this._skybox.parent = this._rootMesh;\n  };\n  /**\r\n   * Setup the skybox material according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupSkyboxMaterial = function () {\n    if (!this._skybox) {\n      return;\n    }\n\n    if (!this._skyboxMaterial) {\n      this._skyboxMaterial = new BackgroundMaterial(\"BackgroundSkyboxMaterial\", this._scene);\n    }\n\n    this._skyboxMaterial.useRGBColor = false;\n    this._skyboxMaterial.primaryColor = this._options.skyboxColor;\n    this._skyboxMaterial.enableNoise = true;\n    this._skybox.material = this._skyboxMaterial;\n  };\n  /**\r\n   * Setup the skybox reflection texture according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupSkyboxReflectionTexture = function () {\n    if (!this._skyboxMaterial) {\n      return;\n    }\n\n    if (this._skyboxTexture) {\n      return;\n    }\n\n    if (this._options.skyboxTexture instanceof BaseTexture) {\n      this._skyboxMaterial.reflectionTexture = this._options.skyboxTexture;\n      return;\n    }\n\n    this._skyboxTexture = new CubeTexture(this._options.skyboxTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\n    this._skyboxTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    this._skyboxTexture.gammaSpace = false;\n    this._skyboxMaterial.reflectionTexture = this._skyboxTexture;\n  };\n  /**\r\n   * Dispose all the elements created by the Helper.\r\n   */\n\n\n  EnvironmentHelper.prototype.dispose = function () {\n    if (this._groundMaterial) {\n      this._groundMaterial.dispose(true, true);\n    }\n\n    if (this._skyboxMaterial) {\n      this._skyboxMaterial.dispose(true, true);\n    }\n\n    this._rootMesh.dispose(false);\n  };\n  /**\r\n   * Default ground texture URL.\r\n   */\n\n\n  EnvironmentHelper._groundTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundGround.png\";\n  /**\r\n   * Default skybox texture URL.\r\n   */\n\n  EnvironmentHelper._skyboxTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundSkybox.dds\";\n  /**\r\n   * Default environment texture URL.\r\n   */\n\n  EnvironmentHelper._environmentTextureCDNUrl = \"https://assets.babylonjs.com/environments/environmentSpecular.env\";\n  return EnvironmentHelper;\n}();\n\nexport { EnvironmentHelper };","map":{"version":3,"sources":["../../../sourceES6/core/Helpers/environmentHelper.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,oBAA3B;AAEA,SAAS,eAAT,QAAgC,4BAAhC;AAEA,SAAS,OAAT,QAAwB,sBAAxB;AACA,SAAS,MAAT,EAAiB,MAAjB,QAA+B,qBAA/B;AAEA,SAAS,IAAT,QAAqB,gBAArB;AACA,SAAS,WAAT,QAA4B,mCAA5B;AACA,SAAS,OAAT,QAAwB,+BAAxB;AACA,SAAS,aAAT,QAA8B,qCAA9B;AACA,SAAS,WAAT,QAA4B,mCAA5B;AACA,SAAS,kBAAT,QAAmC,4CAAnC;AAGA,OAAO,iCAAP;AACA,OAAO,+BAAP;AACA,SAAS,KAAT,QAAsB,qBAAtB;AAyKA;;;;;;AAKA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAgJI;;;;;AAKA,WAAA,iBAAA,CAAY,OAAZ,EAAyD,KAAzD,EAAqE;AAArE,QAAA,KAAA,GAAA,IAAA;;AA+VQ,SAAA,aAAA,GAAgB,UAAC,OAAD,EAAmB,SAAnB,EAAkC;AACtD,MAAA,KAAI,CAAC,iBAAL,CAAuB,eAAvB,CAAuC;AAAE,QAAA,OAAO,EAAE,OAAX;AAAoB,QAAA,SAAS,EAAE;AAA/B,OAAvC;AACH,KAFO;;AA9VJ,SAAK,QAAL,GAAa,QAAA,CAAA,QAAA,CAAA,EAAA,EACN,iBAAiB,CAAC,kBAAlB,EADM,CAAA,EAEN,OAFM,CAAb;AAIA,SAAK,MAAL,GAAc,KAAd;AACA,SAAK,iBAAL,GAAyB,IAAI,UAAJ,EAAzB;;AAEA,SAAK,gBAAL;;AACA,SAAK,qBAAL;AACH;AA9ID;;;;;AAGe,EAAA,iBAAA,CAAA,kBAAA,GAAf,YAAA;AACI,WAAO;AACH,MAAA,YAAY,EAAE,IADX;AAEH,MAAA,UAAU,EAAE,EAFT;AAGH,MAAA,aAAa,EAAE,KAAK,oBAHjB;AAIH,MAAA,WAAW,EAAE,IAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,aAA1B,GAA0C,KAA1C,CAAgD,CAAhD,CAJV;AAKH,MAAA,aAAa,EAAE,GALZ;AAMH,MAAA,kBAAkB,EAAE,IANjB;AAOH,MAAA,iBAAiB,EAAE,GAPhB;AASH,MAAA,kBAAkB,EAAE,KATjB;AAUH,MAAA,qBAAqB,EAAE,GAVpB;AAWH,MAAA,sBAAsB,EAAE,EAXrB;AAYH,MAAA,kBAAkB,EAAE,CAZjB;AAaH,MAAA,yBAAyB,EAAE,CAbxB;AAcH,MAAA,2BAA2B,EAAE,CAd1B;AAeH,MAAA,uBAAuB,EAAE,CAftB;AAiBH,MAAA,WAAW,EAAE,OAjBV;AAmBH,MAAA,YAAY,EAAE,IAnBX;AAoBH,MAAA,UAAU,EAAE,EApBT;AAqBH,MAAA,aAAa,EAAE,KAAK,oBArBjB;AAsBH,MAAA,WAAW,EAAE,IAAI,MAAJ,CAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,aAA1B,GAA0C,KAA1C,CAAgD,CAAhD,CAtBV;AAwBH,MAAA,mBAAmB,EAAE,CAxBlB;AAyBH,MAAA,QAAQ,EAAE,IAzBP;AA0BH,MAAA,YAAY,EAAE,OAAO,CAAC,IAAR,EA1BX;AA4BH,MAAA,oBAAoB,EAAE,IA5BnB;AA6BH,MAAA,kBAAkB,EAAE,KAAK,yBA7BtB;AA8BH,MAAA,cAAc,EAAE,GA9Bb;AA+BH,MAAA,cAAc,EAAE,GA/Bb;AAgCH,MAAA,kBAAkB,EAAE;AAhCjB,KAAP;AAkCH,GAnCc;;AAyCf,EAAA,MAAA,CAAA,cAAA,CAAW,iBAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;AAHnB;;;SAGA,YAAA;AACI,aAAO,KAAK,SAAZ;AACH,KAFkB;qBAAA;;AAAA,GAAnB;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,iBAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAHjB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAZ;AACH,KAFgB;qBAAA;;AAAA,GAAjB;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,iBAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;AAHxB;;;SAGA,YAAA;AACI,aAAO,KAAK,cAAZ;AACH,KAFuB;qBAAA;;AAAA,GAAxB;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,iBAAA,CAAA,SAAX,EAAW,gBAAX,EAAyB;AAHzB;;;SAGA,YAAA;AACI,aAAO,KAAK,eAAZ;AACH,KAFwB;qBAAA;;AAAA,GAAzB;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,iBAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAHjB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAZ;AACH,KAFgB;qBAAA;;AAAA,GAAjB;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,iBAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;AAHxB;;;SAGA,YAAA;AACI,aAAO,KAAK,cAAZ;AACH,KAFuB;qBAAA;;AAAA,GAAxB;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,iBAAA,CAAA,SAAX,EAAW,cAAX,EAAuB;AAHvB;;;SAGA,YAAA;AACI,aAAO,KAAK,aAAZ;AACH,KAFsB;qBAAA;;AAAA,GAAvB;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,iBAAA,CAAA,SAAX,EAAW,wBAAX,EAAiC;AAJjC;;;;SAIA,YAAA;AACI,UAAI,KAAK,aAAT,EAAwB;AACpB,eAAO,KAAK,aAAL,CAAmB,UAA1B;AACH;;AACD,aAAO,IAAP;AACH,KALgC;qBAAA;;AAAA,GAAjC;AAWA,EAAA,MAAA,CAAA,cAAA,CAAW,iBAAA,CAAA,SAAX,EAAW,gBAAX,EAAyB;AAHzB;;;SAGA,YAAA;AACI,aAAO,KAAK,eAAZ;AACH,KAFwB;qBAAA;;AAAA,GAAzB;AAiCA;;;;;AAIO,EAAA,iBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,OAArB,EAAgE;AAC5D,QAAM,UAAU,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACT,KAAK,QADI,CAAA,EAET,OAFS,CAAhB;;AAKA,QAAI,KAAK,OAAL,IAAgB,CAAC,UAAU,CAAC,YAAhC,EAA8C;AAC1C,WAAK,OAAL,CAAa,OAAb;;AACA,WAAK,OAAL,GAAe,IAAf;AACH;;AAED,QAAI,KAAK,eAAL,IAAwB,CAAC,UAAU,CAAC,YAAxC,EAAsD;AAClD,WAAK,eAAL,CAAqB,OAArB;;AACA,WAAK,eAAL,GAAuB,IAAvB;AACH;;AAED,QAAI,KAAK,cAAT,EAAyB;AACrB,UAAI,KAAK,QAAL,CAAc,aAAd,IAA+B,UAAU,CAAC,aAA9C,EAA6D;AACzD,aAAK,cAAL,CAAoB,OAApB;;AACA,aAAK,cAAL,GAAsB,IAAtB;AACH;AACJ;;AAED,QAAI,KAAK,OAAL,IAAgB,CAAC,UAAU,CAAC,YAAhC,EAA8C;AAC1C,WAAK,OAAL,CAAa,OAAb;;AACA,WAAK,OAAL,GAAe,IAAf;AACH;;AAED,QAAI,KAAK,eAAL,IAAwB,CAAC,UAAU,CAAC,YAAxC,EAAsD;AAClD,WAAK,eAAL,CAAqB,OAArB;;AACA,WAAK,eAAL,GAAuB,IAAvB;AACH;;AAED,QAAI,KAAK,cAAT,EAAyB;AACrB,UAAI,KAAK,QAAL,CAAc,aAAd,IAA+B,UAAU,CAAC,aAA9C,EAA6D;AACzD,aAAK,cAAL,CAAoB,OAApB;;AACA,aAAK,cAAL,GAAsB,IAAtB;AACH;AACJ;;AAED,QAAI,KAAK,aAAL,IAAsB,CAAC,UAAU,CAAC,kBAAtC,EAA0D;AACtD,WAAK,aAAL,CAAmB,OAAnB;;AACA,WAAK,aAAL,GAAqB,IAArB;AACH;;AAED,QAAI,KAAK,MAAL,CAAY,kBAAhB,EAAoC;AAChC,UAAI,KAAK,QAAL,CAAc,kBAAd,IAAoC,UAAU,CAAC,kBAAnD,EAAuE;AACnE,aAAK,MAAL,CAAY,kBAAZ,CAA+B,OAA/B;AACH;AACJ;;AAED,SAAK,QAAL,GAAgB,UAAhB;;AAEA,SAAK,gBAAL;;AACA,SAAK,qBAAL;AACH,GAvDM;AAyDP;;;;;;AAIO,EAAA,iBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,KAApB,EAAiC;AAC7B,QAAI,KAAK,cAAT,EAAyB;AACrB,WAAK,cAAL,CAAoB,YAApB,GAAmC,KAAnC;AACH;;AAED,QAAI,KAAK,cAAT,EAAyB;AACrB,WAAK,cAAL,CAAoB,YAApB,GAAmC,KAAnC;AACH;;AAED,QAAI,KAAK,YAAT,EAAuB;AACnB,WAAK,YAAL,CAAkB,UAAlB,GAA+B,IAAI,MAAJ,CAAW,KAAK,CAAC,CAAjB,EAAoB,KAAK,CAAC,CAA1B,EAA6B,KAAK,CAAC,CAAnC,EAAsC,GAAtC,CAA/B;AACH;AACJ,GAZM;AAcP;;;;;AAGQ,EAAA,iBAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,YAAA;AACI,QAAI,KAAK,QAAL,CAAc,oBAAlB,EAAwC;AACpC,WAAK,MAAL,CAAY,4BAAZ,CAAyC,QAAzC,GAAoD,KAAK,QAAL,CAAc,cAAlE;AACA,WAAK,MAAL,CAAY,4BAAZ,CAAyC,QAAzC,GAAoD,KAAK,QAAL,CAAc,cAAlE;AACA,WAAK,MAAL,CAAY,4BAAZ,CAAyC,kBAAzC,GAA8D,KAAK,QAAL,CAAc,kBAA5E;;AACA,WAAK,wBAAL;AACH;AACJ,GAPO;AASR;;;;;AAGQ,EAAA,iBAAA,CAAA,SAAA,CAAA,wBAAA,GAAR,YAAA;AACI,QAAI,KAAK,MAAL,CAAY,kBAAhB,EAAoC;AAChC;AACH;;AAED,QAAI,KAAK,QAAL,CAAc,kBAAd,YAA4C,WAAhD,EAA6D;AACzD,WAAK,MAAL,CAAY,kBAAZ,GAAiC,KAAK,QAAL,CAAc,kBAA/C;AACA;AACH;;AAED,QAAM,kBAAkB,GAAG,WAAW,CAAC,yBAAZ,CAAsC,KAAK,QAAL,CAAc,kBAApD,EAAwE,KAAK,MAA7E,CAA3B;AACA,SAAK,MAAL,CAAY,kBAAZ,GAAiC,kBAAjC;AACH,GAZO;AAcR;;;;;AAGQ,EAAA,iBAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,YAAA;AACI,QAAI,CAAC,KAAK,SAAV,EAAqB;AACjB,WAAK,SAAL,GAAiB,IAAI,IAAJ,CAAS,kBAAT,EAA6B,KAAK,MAAlC,CAAjB;AACH;;AACD,SAAK,SAAL,CAAe,QAAf,CAAwB,CAAxB,GAA4B,KAAK,QAAL,CAAc,mBAA1C;;AAEA,QAAM,SAAS,GAAG,KAAK,aAAL,EAAlB;;AACA,QAAI,KAAK,QAAL,CAAc,YAAlB,EAAgC;AAC5B,WAAK,YAAL,CAAkB,SAAlB;;AACA,WAAK,oBAAL;;AACA,WAAK,0BAAL;;AAEA,UAAI,KAAK,QAAL,CAAc,kBAAlB,EAAsC;AAClC,aAAK,yBAAL,CAA+B,SAA/B;AACH;;AACD,WAAK,4BAAL;AACH;;AAED,QAAI,KAAK,QAAL,CAAc,YAAlB,EAAgC;AAC5B,WAAK,YAAL,CAAkB,SAAlB;;AACA,WAAK,oBAAL;;AACA,WAAK,6BAAL;AACH;;AAED,SAAK,SAAL,CAAe,QAAf,CAAwB,CAAxB,GAA4B,SAAS,CAAC,YAAV,CAAuB,CAAnD;AACA,SAAK,SAAL,CAAe,QAAf,CAAwB,CAAxB,GAA4B,SAAS,CAAC,YAAV,CAAuB,CAAnD;AACA,SAAK,SAAL,CAAe,QAAf,CAAwB,CAAxB,GAA4B,SAAS,CAAC,YAAV,CAAuB,CAAnD;AACH,GA3BO;AA6BR;;;;;AAGQ,EAAA,iBAAA,CAAA,SAAA,CAAA,aAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,UAAU,GAAG,KAAK,QAAL,CAAc,UAA/B;AACA,QAAI,UAAU,GAAG,KAAK,QAAL,CAAc,UAA/B;AACA,QAAI,YAAY,GAAG,KAAK,QAAL,CAAc,YAAjC;;AACA,QAAI,CAAC,KAAK,MAAL,CAAY,MAAb,IAAuB,KAAK,MAAL,CAAY,MAAZ,CAAmB,MAAnB,KAA8B,CAAzD,EAA4D;AAAE;AAC1D,aAAO;AAAE,QAAA,UAAU,EAAA,UAAZ;AAAc,QAAA,UAAU,EAAA,UAAxB;AAA0B,QAAA,YAAY,EAAA;AAAtC,OAAP;AACH;;AAED,QAAM,YAAY,GAAG,KAAK,MAAL,CAAY,eAAZ,CAA4B,UAAC,IAAD,EAAK;AAClD,aAAQ,IAAI,KAAK,KAAI,CAAC,OAAd,IAAyB,IAAI,KAAK,KAAI,CAAC,SAAvC,IAAoD,IAAI,KAAK,KAAI,CAAC,OAA1E;AACH,KAFoB,CAArB;;AAGA,QAAM,aAAa,GAAG,YAAY,CAAC,GAAb,CAAiB,QAAjB,CAA0B,YAAY,CAAC,GAAvC,CAAtB;;AAEA,QAAI,KAAK,QAAL,CAAc,QAAlB,EAA4B;AACxB,UAAI,KAAK,MAAL,CAAY,YAAZ,YAAoC,eAApC,IACA,KAAK,MAAL,CAAY,YAAZ,CAAyB,gBAD7B,EAC+C;AAC3C,QAAA,UAAU,GAAG,KAAK,MAAL,CAAY,YAAZ,CAAyB,gBAAzB,GAA4C,CAAzD;AACA,QAAA,UAAU,GAAG,UAAb;AACH;;AAED,UAAM,mBAAmB,GAAG,aAAa,CAAC,MAAd,EAA5B;;AACA,UAAI,mBAAmB,GAAG,UAA1B,EAAsC;AAClC,QAAA,UAAU,GAAG,mBAAmB,GAAG,CAAnC;AACA,QAAA,UAAU,GAAG,UAAb;AACH,OAXuB,CAaxB;;;AACA,MAAA,UAAU,IAAI,GAAd;AACA,MAAA,UAAU,IAAI,GAAd;AACA,MAAA,YAAY,GAAG,YAAY,CAAC,GAAb,CAAiB,GAAjB,CAAqB,aAAa,CAAC,KAAd,CAAoB,GAApB,CAArB,CAAf;AACA,MAAA,YAAY,CAAC,CAAb,GAAiB,YAAY,CAAC,GAAb,CAAiB,CAAjB,GAAqB,KAAK,QAAL,CAAc,WAApD;AACH;;AAED,WAAO;AAAE,MAAA,UAAU,EAAA,UAAZ;AAAc,MAAA,UAAU,EAAA,UAAxB;AAA0B,MAAA,YAAY,EAAA;AAAtC,KAAP;AACH,GAlCO;AAoCR;;;;;AAGQ,EAAA,iBAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,SAArB,EAA0C;AAA1C,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,CAAC,KAAK,OAAN,IAAiB,KAAK,OAAL,CAAa,UAAb,EAArB,EAAgD;AAC5C,WAAK,OAAL,GAAe,IAAI,CAAC,WAAL,CAAiB,iBAAjB,EAAoC,SAAS,CAAC,UAA9C,EAA0D,KAAK,MAA/D,CAAf;AACA,WAAK,OAAL,CAAa,QAAb,CAAsB,CAAtB,GAA0B,IAAI,CAAC,EAAL,GAAU,CAApC,CAF4C,CAEL;;AACvC,WAAK,OAAL,CAAa,MAAb,GAAsB,KAAK,SAA3B;;AACA,WAAK,OAAL,CAAa,mBAAb,CAAiC,GAAjC,CAAqC,YAAA;AAAQ,QAAA,KAAI,CAAC,OAAL,GAAe,IAAf;AAAsB,OAAnE;AACH;;AAED,SAAK,OAAL,CAAa,cAAb,GAA8B,KAAK,QAAL,CAAc,kBAA5C;AACH,GATO;AAWR;;;;;AAGQ,EAAA,iBAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,YAAA;AACI,QAAI,CAAC,KAAK,eAAV,EAA2B;AACvB,WAAK,eAAL,GAAuB,IAAI,kBAAJ,CAAuB,yBAAvB,EAAkD,KAAK,MAAvD,CAAvB;AACH;;AACD,SAAK,eAAL,CAAqB,KAArB,GAA6B,KAAK,QAAL,CAAc,aAA3C;AACA,SAAK,eAAL,CAAqB,SAArB,GAAiC,CAAjC;AACA,SAAK,eAAL,CAAqB,WAArB,GAAmC,KAAK,QAAL,CAAc,iBAAjD;AACA,SAAK,eAAL,CAAqB,YAArB,GAAoC,KAAK,QAAL,CAAc,WAAlD;AACA,SAAK,eAAL,CAAqB,WAArB,GAAmC,KAAnC;AACA,SAAK,eAAL,CAAqB,WAArB,GAAmC,IAAnC;;AAEA,QAAI,KAAK,OAAT,EAAkB;AACd,WAAK,OAAL,CAAa,QAAb,GAAwB,KAAK,eAA7B;AACH;AACJ,GAdO;AAgBR;;;;;AAGQ,EAAA,iBAAA,CAAA,SAAA,CAAA,0BAAA,GAAR,YAAA;AACI,QAAI,CAAC,KAAK,eAAV,EAA2B;AACvB;AACH;;AAED,QAAI,KAAK,cAAT,EAAyB;AACrB;AACH;;AAED,QAAI,KAAK,QAAL,CAAc,aAAd,YAAuC,WAA3C,EAAwD;AACpD,WAAK,eAAL,CAAqB,cAArB,GAAsC,KAAK,QAAL,CAAc,aAApD;AACA;AACH;;AAED,SAAK,cAAL,GAAsB,IAAI,OAAJ,CAAY,KAAK,QAAL,CAAc,aAA1B,EAAyC,KAAK,MAA9C,EAAsD,SAAtD,EAAiE,SAAjE,EAA4E,SAA5E,EAAuF,SAAvF,EAAkG,KAAK,aAAvG,CAAtB;AACA,SAAK,cAAL,CAAoB,UAApB,GAAiC,KAAjC;AACA,SAAK,cAAL,CAAoB,QAApB,GAA+B,IAA/B;AACA,SAAK,eAAL,CAAqB,cAArB,GAAsC,KAAK,cAA3C;AACH,GAlBO;AAoBR;;;;;AAGQ,EAAA,iBAAA,CAAA,SAAA,CAAA,yBAAA,GAAR,UAAkC,SAAlC,EAAuD;AACnD,QAAI,QAAQ,GAAG,OAAO,CAAC,iBAAvB;;AACA,QAAI,CAAC,KAAK,aAAV,EAAyB;AACrB,WAAK,aAAL,GAAqB,IAAI,aAAJ,CAAkB,8BAAlB,EACjB;AAAE,QAAA,KAAK,EAAE,KAAK,QAAL,CAAc;AAAvB,OADiB,EAEjB,KAAK,MAFY,EAGjB,KAHiB,EAIjB,KAAK,QAAL,CAAc,uBAJG,EAKjB,OAAO,CAAC,qBALS,EAMjB,IANiB,CAArB;AAOA,WAAK,aAAL,CAAmB,WAAnB,GAAiC,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,EAAiB,CAAjB,EAAoB,SAAS,CAAC,YAAV,CAAuB,CAA3C,CAAjC;AACA,WAAK,aAAL,CAAmB,yBAAnB,GAA+C,CAA/C;AACA,WAAK,aAAL,CAAmB,KAAnB,GAA2B,QAA3B;AACA,WAAK,aAAL,CAAmB,KAAnB,GAA2B,QAA3B;AACA,WAAK,aAAL,CAAmB,UAAnB,GAAgC,KAAhC;;AAEA,UAAI,KAAK,aAAL,CAAmB,UAAvB,EAAmC;AAC/B,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,MAAL,CAAY,MAAZ,CAAmB,MAAvC,EAA+C,CAAC,EAAhD,EAAoD;AAChD,cAAM,IAAI,GAAG,KAAK,MAAL,CAAY,MAAZ,CAAmB,CAAnB,CAAb;;AACA,cAAI,IAAI,KAAK,KAAK,OAAd,IACA,IAAI,KAAK,KAAK,OADd,IAEA,IAAI,KAAK,KAAK,SAFlB,EAE6B;AACzB,iBAAK,aAAL,CAAmB,UAAnB,CAA8B,IAA9B,CAAmC,IAAnC;AACH;AACJ;AACJ;AACJ;;AAED,SAAK,aAAL,CAAmB,UAAnB,GAAgC,IAAI,MAAJ,CAC5B,KAAK,QAAL,CAAc,WAAd,CAA0B,CADE,EAE5B,KAAK,QAAL,CAAc,WAAd,CAA0B,CAFE,EAG5B,KAAK,QAAL,CAAc,WAAd,CAA0B,CAHE,EAI5B,CAJ4B,CAAhC;AAKA,SAAK,aAAL,CAAmB,kBAAnB,GAAwC,KAAK,QAAL,CAAc,sBAAtD;AACH,GAlCO;AAoCR;;;;;AAGQ,EAAA,iBAAA,CAAA,SAAA,CAAA,4BAAA,GAAR,YAAA;AACI,QAAI,KAAK,eAAT,EAA0B;AACtB,WAAK,eAAL,CAAqB,iBAArB,GAAyC,KAAK,aAA9C;AACA,WAAK,eAAL,CAAqB,iBAArB,GAAyC,IAAzC;AACA,WAAK,eAAL,CAAqB,gBAArB,GAAwC,KAAK,QAAL,CAAc,kBAAtD;AACA,WAAK,eAAL,CAAqB,+BAArB,GAAuD,KAAK,QAAL,CAAc,yBAArE;AACA,WAAK,eAAL,CAAqB,yBAArB,GAAiD,KAAK,QAAL,CAAc,2BAA/D;AACH;AACJ,GARO;AAUR;;;;;AAGQ,EAAA,iBAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,SAArB,EAA0C;AAA1C,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,CAAC,KAAK,OAAN,IAAiB,KAAK,OAAL,CAAa,UAAb,EAArB,EAAgD;AAC5C,WAAK,OAAL,GAAe,IAAI,CAAC,SAAL,CAAe,kBAAf,EAAmC,SAAS,CAAC,UAA7C,EAAyD,KAAK,MAA9D,EAAsE,SAAtE,EAAiF,IAAI,CAAC,QAAtF,CAAf;;AACA,WAAK,OAAL,CAAa,mBAAb,CAAiC,GAAjC,CAAqC,YAAA;AAAQ,QAAA,KAAI,CAAC,OAAL,GAAe,IAAf;AAAsB,OAAnE;AACH;;AACD,SAAK,OAAL,CAAa,MAAb,GAAsB,KAAK,SAA3B;AACH,GANO;AAQR;;;;;AAGQ,EAAA,iBAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,YAAA;AACI,QAAI,CAAC,KAAK,OAAV,EAAmB;AACf;AACH;;AAED,QAAI,CAAC,KAAK,eAAV,EAA2B;AACvB,WAAK,eAAL,GAAuB,IAAI,kBAAJ,CAAuB,0BAAvB,EAAmD,KAAK,MAAxD,CAAvB;AACH;;AACD,SAAK,eAAL,CAAqB,WAArB,GAAmC,KAAnC;AACA,SAAK,eAAL,CAAqB,YAArB,GAAoC,KAAK,QAAL,CAAc,WAAlD;AACA,SAAK,eAAL,CAAqB,WAArB,GAAmC,IAAnC;AAEA,SAAK,OAAL,CAAa,QAAb,GAAwB,KAAK,eAA7B;AACH,GAbO;AAeR;;;;;AAGQ,EAAA,iBAAA,CAAA,SAAA,CAAA,6BAAA,GAAR,YAAA;AACI,QAAI,CAAC,KAAK,eAAV,EAA2B;AACvB;AACH;;AAED,QAAI,KAAK,cAAT,EAAyB;AACrB;AACH;;AAED,QAAI,KAAK,QAAL,CAAc,aAAd,YAAuC,WAA3C,EAAwD;AACpD,WAAK,eAAL,CAAqB,iBAArB,GAAyC,KAAK,QAAL,CAAc,aAAvD;AACA;AACH;;AAED,SAAK,cAAL,GAAsB,IAAI,WAAJ,CAAgB,KAAK,QAAL,CAAc,aAA9B,EAA6C,KAAK,MAAlD,EAA0D,SAA1D,EAAqE,SAArE,EAAgF,SAAhF,EAA2F,SAA3F,EAAsG,KAAK,aAA3G,CAAtB;AACA,SAAK,cAAL,CAAoB,eAApB,GAAsC,OAAO,CAAC,WAA9C;AACA,SAAK,cAAL,CAAoB,UAApB,GAAiC,KAAjC;AACA,SAAK,eAAL,CAAqB,iBAArB,GAAyC,KAAK,cAA9C;AACH,GAlBO;AAwBR;;;;;AAGO,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,QAAI,KAAK,eAAT,EAA0B;AACtB,WAAK,eAAL,CAAqB,OAArB,CAA6B,IAA7B,EAAmC,IAAnC;AACH;;AACD,QAAI,KAAK,eAAT,EAA0B;AACtB,WAAK,eAAL,CAAqB,OAArB,CAA6B,IAA7B,EAAmC,IAAnC;AACH;;AACD,SAAK,SAAL,CAAe,OAAf,CAAuB,KAAvB;AACH,GARM;AAzfP;;;;;AAGe,EAAA,iBAAA,CAAA,oBAAA,GAAuB,gEAAvB;AAEf;;;;AAGe,EAAA,iBAAA,CAAA,oBAAA,GAAuB,gEAAvB;AAEf;;;;AAGe,EAAA,iBAAA,CAAA,yBAAA,GAA4B,mEAA5B;AAqfnB,SAAA,iBAAA;AAAC,CApgBD,EAAA;;SAAa,iB","sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport { Nullable } from \"../types\";\r\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera\";\r\nimport { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from '../Maths/math.color';\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { MirrorTexture } from \"../Materials/Textures/mirrorTexture\";\r\nimport { CubeTexture } from \"../Materials/Textures/cubeTexture\";\r\nimport { BackgroundMaterial } from \"../Materials/Background/backgroundMaterial\";\r\n\r\n\r\nimport \"../Meshes/Builders/planeBuilder\";\r\nimport \"../Meshes/Builders/boxBuilder\";\r\nimport { Plane } from '../Maths/math.plane';\r\n\r\n/**\r\n * Represents the different options available during the creation of\r\n * a Environment helper.\r\n *\r\n * This can control the default ground, skybox and image processing setup of your scene.\r\n */\r\nexport interface IEnvironmentHelperOptions {\r\n    /**\r\n     * Specifies whether or not to create a ground.\r\n     * True by default.\r\n     */\r\n    createGround: boolean;\r\n    /**\r\n     * Specifies the ground size.\r\n     * 15 by default.\r\n     */\r\n    groundSize: number;\r\n    /**\r\n     * The texture used on the ground for the main color.\r\n     * Comes from the BabylonJS CDN by default.\r\n     *\r\n     * Remarks: Can be either a texture or a url.\r\n     */\r\n    groundTexture: string | BaseTexture;\r\n    /**\r\n     * The color mixed in the ground texture by default.\r\n     * BabylonJS clearColor by default.\r\n     */\r\n    groundColor: Color3;\r\n    /**\r\n     * Specifies the ground opacity.\r\n     * 1 by default.\r\n     */\r\n    groundOpacity: number;\r\n    /**\r\n     * Enables the ground to receive shadows.\r\n     * True by default.\r\n     */\r\n    enableGroundShadow: boolean;\r\n    /**\r\n     * Helps preventing the shadow to be fully black on the ground.\r\n     * 0.5 by default.\r\n     */\r\n    groundShadowLevel: number;\r\n    /**\r\n     * Creates a mirror texture attach to the ground.\r\n     * false by default.\r\n     */\r\n    enableGroundMirror: boolean;\r\n    /**\r\n     * Specifies the ground mirror size ratio.\r\n     * 0.3 by default as the default kernel is 64.\r\n     */\r\n    groundMirrorSizeRatio: number;\r\n    /**\r\n     * Specifies the ground mirror blur kernel size.\r\n     * 64 by default.\r\n     */\r\n    groundMirrorBlurKernel: number;\r\n    /**\r\n     * Specifies the ground mirror visibility amount.\r\n     * 1 by default\r\n     */\r\n    groundMirrorAmount: number;\r\n    /**\r\n     * Specifies the ground mirror reflectance weight.\r\n     * This uses the standard weight of the background material to setup the fresnel effect\r\n     * of the mirror.\r\n     * 1 by default.\r\n     */\r\n    groundMirrorFresnelWeight: number;\r\n    /**\r\n     * Specifies the ground mirror Falloff distance.\r\n     * This can helps reducing the size of the reflection.\r\n     * 0 by Default.\r\n     */\r\n    groundMirrorFallOffDistance: number;\r\n    /**\r\n     * Specifies the ground mirror texture type.\r\n     * Unsigned Int by Default.\r\n     */\r\n    groundMirrorTextureType: number;\r\n    /**\r\n     * Specifies a bias applied to the ground vertical position to prevent z-fighting with\r\n     * the shown objects.\r\n     */\r\n    groundYBias: number;\r\n\r\n    /**\r\n     * Specifies whether or not to create a skybox.\r\n     * True by default.\r\n     */\r\n    createSkybox: boolean;\r\n    /**\r\n     * Specifies the skybox size.\r\n     * 20 by default.\r\n     */\r\n    skyboxSize: number;\r\n    /**\r\n     * The texture used on the skybox for the main color.\r\n     * Comes from the BabylonJS CDN by default.\r\n     *\r\n     * Remarks: Can be either a texture or a url.\r\n     */\r\n    skyboxTexture: string | BaseTexture;\r\n    /**\r\n     * The color mixed in the skybox texture by default.\r\n     * BabylonJS clearColor by default.\r\n     */\r\n    skyboxColor: Color3;\r\n\r\n    /**\r\n     * The background rotation around the Y axis of the scene.\r\n     * This helps aligning the key lights of your scene with the background.\r\n     * 0 by default.\r\n     */\r\n    backgroundYRotation: number;\r\n\r\n    /**\r\n     * Compute automatically the size of the elements to best fit with the scene.\r\n     */\r\n    sizeAuto: boolean;\r\n\r\n    /**\r\n     * Default position of the rootMesh if autoSize is not true.\r\n     */\r\n    rootPosition: Vector3;\r\n\r\n    /**\r\n     * Sets up the image processing in the scene.\r\n     * true by default.\r\n     */\r\n    setupImageProcessing: boolean;\r\n\r\n    /**\r\n     * The texture used as your environment texture in the scene.\r\n     * Comes from the BabylonJS CDN by default and in use if setupImageProcessing is true.\r\n     *\r\n     * Remarks: Can be either a texture or a url.\r\n     */\r\n    environmentTexture: string | BaseTexture;\r\n\r\n    /**\r\n     * The value of the exposure to apply to the scene.\r\n     * 0.6 by default if setupImageProcessing is true.\r\n     */\r\n    cameraExposure: number;\r\n\r\n    /**\r\n     * The value of the contrast to apply to the scene.\r\n     * 1.6 by default if setupImageProcessing is true.\r\n     */\r\n    cameraContrast: number;\r\n\r\n    /**\r\n     * Specifies whether or not tonemapping should be enabled in the scene.\r\n     * true by default if setupImageProcessing is true.\r\n     */\r\n    toneMappingEnabled: boolean;\r\n}\r\n\r\ninterface ISceneSize {\r\n    groundSize: number;\r\n    skyboxSize: number;\r\n    rootPosition: Vector3;\r\n}\r\n\r\n/**\r\n * The Environment helper class can be used to add a fully featuread none expensive background to your scene.\r\n * It includes by default a skybox and a ground relying on the BackgroundMaterial.\r\n * It also helps with the default setup of your imageProcessing configuration.\r\n */\r\nexport class EnvironmentHelper {\r\n\r\n    /**\r\n     * Default ground texture URL.\r\n     */\r\n    private static _groundTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundGround.png\";\r\n\r\n    /**\r\n     * Default skybox texture URL.\r\n     */\r\n    private static _skyboxTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundSkybox.dds\";\r\n\r\n    /**\r\n     * Default environment texture URL.\r\n     */\r\n    private static _environmentTextureCDNUrl = \"https://assets.babylonjs.com/environments/environmentSpecular.env\";\r\n\r\n    /**\r\n     * Creates the default options for the helper.\r\n     */\r\n    private static _getDefaultOptions(): IEnvironmentHelperOptions {\r\n        return {\r\n            createGround: true,\r\n            groundSize: 15,\r\n            groundTexture: this._groundTextureCDNUrl,\r\n            groundColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\r\n            groundOpacity: 0.9,\r\n            enableGroundShadow: true,\r\n            groundShadowLevel: 0.5,\r\n\r\n            enableGroundMirror: false,\r\n            groundMirrorSizeRatio: 0.3,\r\n            groundMirrorBlurKernel: 64,\r\n            groundMirrorAmount: 1,\r\n            groundMirrorFresnelWeight: 1,\r\n            groundMirrorFallOffDistance: 0,\r\n            groundMirrorTextureType: 0,\r\n\r\n            groundYBias: 0.00001,\r\n\r\n            createSkybox: true,\r\n            skyboxSize: 20,\r\n            skyboxTexture: this._skyboxTextureCDNUrl,\r\n            skyboxColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\r\n\r\n            backgroundYRotation: 0,\r\n            sizeAuto: true,\r\n            rootPosition: Vector3.Zero(),\r\n\r\n            setupImageProcessing: true,\r\n            environmentTexture: this._environmentTextureCDNUrl,\r\n            cameraExposure: 0.8,\r\n            cameraContrast: 1.2,\r\n            toneMappingEnabled: true,\r\n        };\r\n    }\r\n\r\n    private _rootMesh: Mesh;\r\n    /**\r\n     * Gets the root mesh created by the helper.\r\n     */\r\n    public get rootMesh(): Mesh {\r\n        return this._rootMesh;\r\n    }\r\n\r\n    private _skybox: Nullable<Mesh>;\r\n    /**\r\n     * Gets the skybox created by the helper.\r\n     */\r\n    public get skybox(): Nullable<Mesh> {\r\n        return this._skybox;\r\n    }\r\n\r\n    private _skyboxTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Gets the skybox texture created by the helper.\r\n     */\r\n    public get skyboxTexture(): Nullable<BaseTexture> {\r\n        return this._skyboxTexture;\r\n    }\r\n\r\n    private _skyboxMaterial: Nullable<BackgroundMaterial>;\r\n    /**\r\n     * Gets the skybox material created by the helper.\r\n     */\r\n    public get skyboxMaterial(): Nullable<BackgroundMaterial> {\r\n        return this._skyboxMaterial;\r\n    }\r\n\r\n    private _ground: Nullable<Mesh>;\r\n    /**\r\n     * Gets the ground mesh created by the helper.\r\n     */\r\n    public get ground(): Nullable<Mesh> {\r\n        return this._ground;\r\n    }\r\n\r\n    private _groundTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Gets the ground texture created by the helper.\r\n     */\r\n    public get groundTexture(): Nullable<BaseTexture> {\r\n        return this._groundTexture;\r\n    }\r\n\r\n    private _groundMirror: Nullable<MirrorTexture>;\r\n    /**\r\n     * Gets the ground mirror created by the helper.\r\n     */\r\n    public get groundMirror(): Nullable<MirrorTexture> {\r\n        return this._groundMirror;\r\n    }\r\n\r\n    /**\r\n     * Gets the ground mirror render list to helps pushing the meshes\r\n     * you wish in the ground reflection.\r\n     */\r\n    public get groundMirrorRenderList(): Nullable<AbstractMesh[]> {\r\n        if (this._groundMirror) {\r\n            return this._groundMirror.renderList;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _groundMaterial: Nullable<BackgroundMaterial>;\r\n    /**\r\n     * Gets the ground material created by the helper.\r\n     */\r\n    public get groundMaterial(): Nullable<BackgroundMaterial> {\r\n        return this._groundMaterial;\r\n    }\r\n\r\n    /**\r\n     * Stores the creation options.\r\n     */\r\n    private readonly _scene: Scene;\r\n    private _options: IEnvironmentHelperOptions;\r\n\r\n    /**\r\n     * This observable will be notified with any error during the creation of the environment,\r\n     * mainly texture creation errors.\r\n     */\r\n    public onErrorObservable: Observable<{ message?: string, exception?: any }>;\r\n\r\n    /**\r\n     * constructor\r\n     * @param options Defines the options we want to customize the helper\r\n     * @param scene The scene to add the material to\r\n     */\r\n    constructor(options: Partial<IEnvironmentHelperOptions>, scene: Scene) {\r\n        this._options = {\r\n            ...EnvironmentHelper._getDefaultOptions(),\r\n            ...options\r\n        };\r\n        this._scene = scene;\r\n        this.onErrorObservable = new Observable();\r\n\r\n        this._setupBackground();\r\n        this._setupImageProcessing();\r\n    }\r\n\r\n    /**\r\n     * Updates the background according to the new options\r\n     * @param options\r\n     */\r\n    public updateOptions(options: Partial<IEnvironmentHelperOptions>) {\r\n        const newOptions = {\r\n            ...this._options,\r\n            ...options\r\n        };\r\n\r\n        if (this._ground && !newOptions.createGround) {\r\n            this._ground.dispose();\r\n            this._ground = null;\r\n        }\r\n\r\n        if (this._groundMaterial && !newOptions.createGround) {\r\n            this._groundMaterial.dispose();\r\n            this._groundMaterial = null;\r\n        }\r\n\r\n        if (this._groundTexture) {\r\n            if (this._options.groundTexture != newOptions.groundTexture) {\r\n                this._groundTexture.dispose();\r\n                this._groundTexture = null;\r\n            }\r\n        }\r\n\r\n        if (this._skybox && !newOptions.createSkybox) {\r\n            this._skybox.dispose();\r\n            this._skybox = null;\r\n        }\r\n\r\n        if (this._skyboxMaterial && !newOptions.createSkybox) {\r\n            this._skyboxMaterial.dispose();\r\n            this._skyboxMaterial = null;\r\n        }\r\n\r\n        if (this._skyboxTexture) {\r\n            if (this._options.skyboxTexture != newOptions.skyboxTexture) {\r\n                this._skyboxTexture.dispose();\r\n                this._skyboxTexture = null;\r\n            }\r\n        }\r\n\r\n        if (this._groundMirror && !newOptions.enableGroundMirror) {\r\n            this._groundMirror.dispose();\r\n            this._groundMirror = null;\r\n        }\r\n\r\n        if (this._scene.environmentTexture) {\r\n            if (this._options.environmentTexture != newOptions.environmentTexture) {\r\n                this._scene.environmentTexture.dispose();\r\n            }\r\n        }\r\n\r\n        this._options = newOptions;\r\n\r\n        this._setupBackground();\r\n        this._setupImageProcessing();\r\n    }\r\n\r\n    /**\r\n     * Sets the primary color of all the available elements.\r\n     * @param color the main color to affect to the ground and the background\r\n     */\r\n    public setMainColor(color: Color3): void {\r\n        if (this.groundMaterial) {\r\n            this.groundMaterial.primaryColor = color;\r\n        }\r\n\r\n        if (this.skyboxMaterial) {\r\n            this.skyboxMaterial.primaryColor = color;\r\n        }\r\n\r\n        if (this.groundMirror) {\r\n            this.groundMirror.clearColor = new Color4(color.r, color.g, color.b, 1.0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the image processing according to the specified options.\r\n     */\r\n    private _setupImageProcessing(): void {\r\n        if (this._options.setupImageProcessing) {\r\n            this._scene.imageProcessingConfiguration.contrast = this._options.cameraContrast;\r\n            this._scene.imageProcessingConfiguration.exposure = this._options.cameraExposure;\r\n            this._scene.imageProcessingConfiguration.toneMappingEnabled = this._options.toneMappingEnabled;\r\n            this._setupEnvironmentTexture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the environment texture according to the specified options.\r\n     */\r\n    private _setupEnvironmentTexture(): void {\r\n        if (this._scene.environmentTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.environmentTexture instanceof BaseTexture) {\r\n            this._scene.environmentTexture = this._options.environmentTexture;\r\n            return;\r\n        }\r\n\r\n        const environmentTexture = CubeTexture.CreateFromPrefilteredData(this._options.environmentTexture, this._scene);\r\n        this._scene.environmentTexture = environmentTexture;\r\n    }\r\n\r\n    /**\r\n     * Setup the background according to the specified options.\r\n     */\r\n    private _setupBackground(): void {\r\n        if (!this._rootMesh) {\r\n            this._rootMesh = new Mesh(\"BackgroundHelper\", this._scene);\r\n        }\r\n        this._rootMesh.rotation.y = this._options.backgroundYRotation;\r\n\r\n        const sceneSize = this._getSceneSize();\r\n        if (this._options.createGround) {\r\n            this._setupGround(sceneSize);\r\n            this._setupGroundMaterial();\r\n            this._setupGroundDiffuseTexture();\r\n\r\n            if (this._options.enableGroundMirror) {\r\n                this._setupGroundMirrorTexture(sceneSize);\r\n            }\r\n            this._setupMirrorInGroundMaterial();\r\n        }\r\n\r\n        if (this._options.createSkybox) {\r\n            this._setupSkybox(sceneSize);\r\n            this._setupSkyboxMaterial();\r\n            this._setupSkyboxReflectionTexture();\r\n        }\r\n\r\n        this._rootMesh.position.x = sceneSize.rootPosition.x;\r\n        this._rootMesh.position.z = sceneSize.rootPosition.z;\r\n        this._rootMesh.position.y = sceneSize.rootPosition.y;\r\n    }\r\n\r\n    /**\r\n     * Get the scene sizes according to the setup.\r\n     */\r\n    private _getSceneSize(): ISceneSize {\r\n        let groundSize = this._options.groundSize;\r\n        let skyboxSize = this._options.skyboxSize;\r\n        let rootPosition = this._options.rootPosition;\r\n        if (!this._scene.meshes || this._scene.meshes.length === 1) { // 1 only means the root of the helper.\r\n            return { groundSize, skyboxSize, rootPosition };\r\n        }\r\n\r\n        const sceneExtends = this._scene.getWorldExtends((mesh) => {\r\n            return (mesh !== this._ground && mesh !== this._rootMesh && mesh !== this._skybox);\r\n        });\r\n        const sceneDiagonal = sceneExtends.max.subtract(sceneExtends.min);\r\n\r\n        if (this._options.sizeAuto) {\r\n            if (this._scene.activeCamera instanceof ArcRotateCamera &&\r\n                this._scene.activeCamera.upperRadiusLimit) {\r\n                groundSize = this._scene.activeCamera.upperRadiusLimit * 2;\r\n                skyboxSize = groundSize;\r\n            }\r\n\r\n            const sceneDiagonalLenght = sceneDiagonal.length();\r\n            if (sceneDiagonalLenght > groundSize) {\r\n                groundSize = sceneDiagonalLenght * 2;\r\n                skyboxSize = groundSize;\r\n            }\r\n\r\n            // 10 % bigger.\r\n            groundSize *= 1.1;\r\n            skyboxSize *= 1.5;\r\n            rootPosition = sceneExtends.min.add(sceneDiagonal.scale(0.5));\r\n            rootPosition.y = sceneExtends.min.y - this._options.groundYBias;\r\n        }\r\n\r\n        return { groundSize, skyboxSize, rootPosition };\r\n    }\r\n\r\n    /**\r\n     * Setup the ground according to the specified options.\r\n     */\r\n    private _setupGround(sceneSize: ISceneSize): void {\r\n        if (!this._ground || this._ground.isDisposed()) {\r\n            this._ground = Mesh.CreatePlane(\"BackgroundPlane\", sceneSize.groundSize, this._scene);\r\n            this._ground.rotation.x = Math.PI / 2; // Face up by default.\r\n            this._ground.parent = this._rootMesh;\r\n            this._ground.onDisposeObservable.add(() => { this._ground = null; });\r\n        }\r\n\r\n        this._ground.receiveShadows = this._options.enableGroundShadow;\r\n    }\r\n\r\n    /**\r\n     * Setup the ground material according to the specified options.\r\n     */\r\n    private _setupGroundMaterial(): void {\r\n        if (!this._groundMaterial) {\r\n            this._groundMaterial = new BackgroundMaterial(\"BackgroundPlaneMaterial\", this._scene);\r\n        }\r\n        this._groundMaterial.alpha = this._options.groundOpacity;\r\n        this._groundMaterial.alphaMode = 8;\r\n        this._groundMaterial.shadowLevel = this._options.groundShadowLevel;\r\n        this._groundMaterial.primaryColor = this._options.groundColor;\r\n        this._groundMaterial.useRGBColor = false;\r\n        this._groundMaterial.enableNoise = true;\r\n\r\n        if (this._ground) {\r\n            this._ground.material = this._groundMaterial;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the ground diffuse texture according to the specified options.\r\n     */\r\n    private _setupGroundDiffuseTexture(): void {\r\n        if (!this._groundMaterial) {\r\n            return;\r\n        }\r\n\r\n        if (this._groundTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.groundTexture instanceof BaseTexture) {\r\n            this._groundMaterial.diffuseTexture = this._options.groundTexture;\r\n            return;\r\n        }\r\n\r\n        this._groundTexture = new Texture(this._options.groundTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\r\n        this._groundTexture.gammaSpace = false;\r\n        this._groundTexture.hasAlpha = true;\r\n        this._groundMaterial.diffuseTexture = this._groundTexture;\r\n    }\r\n\r\n    /**\r\n     * Setup the ground mirror texture according to the specified options.\r\n     */\r\n    private _setupGroundMirrorTexture(sceneSize: ISceneSize): void {\r\n        let wrapping = Texture.CLAMP_ADDRESSMODE;\r\n        if (!this._groundMirror) {\r\n            this._groundMirror = new MirrorTexture(\"BackgroundPlaneMirrorTexture\",\r\n                { ratio: this._options.groundMirrorSizeRatio },\r\n                this._scene,\r\n                false,\r\n                this._options.groundMirrorTextureType,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                true);\r\n            this._groundMirror.mirrorPlane = new Plane(0, -1, 0, sceneSize.rootPosition.y);\r\n            this._groundMirror.anisotropicFilteringLevel = 1;\r\n            this._groundMirror.wrapU = wrapping;\r\n            this._groundMirror.wrapV = wrapping;\r\n            this._groundMirror.gammaSpace = false;\r\n\r\n            if (this._groundMirror.renderList) {\r\n                for (let i = 0; i < this._scene.meshes.length; i++) {\r\n                    const mesh = this._scene.meshes[i];\r\n                    if (mesh !== this._ground &&\r\n                        mesh !== this._skybox &&\r\n                        mesh !== this._rootMesh) {\r\n                        this._groundMirror.renderList.push(mesh);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._groundMirror.clearColor = new Color4(\r\n            this._options.groundColor.r,\r\n            this._options.groundColor.g,\r\n            this._options.groundColor.b,\r\n            1);\r\n        this._groundMirror.adaptiveBlurKernel = this._options.groundMirrorBlurKernel;\r\n    }\r\n\r\n    /**\r\n     * Setup the ground to receive the mirror texture.\r\n     */\r\n    private _setupMirrorInGroundMaterial(): void {\r\n        if (this._groundMaterial) {\r\n            this._groundMaterial.reflectionTexture = this._groundMirror;\r\n            this._groundMaterial.reflectionFresnel = true;\r\n            this._groundMaterial.reflectionAmount = this._options.groundMirrorAmount;\r\n            this._groundMaterial.reflectionStandardFresnelWeight = this._options.groundMirrorFresnelWeight;\r\n            this._groundMaterial.reflectionFalloffDistance = this._options.groundMirrorFallOffDistance;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the skybox according to the specified options.\r\n     */\r\n    private _setupSkybox(sceneSize: ISceneSize): void {\r\n        if (!this._skybox || this._skybox.isDisposed()) {\r\n            this._skybox = Mesh.CreateBox(\"BackgroundSkybox\", sceneSize.skyboxSize, this._scene, undefined, Mesh.BACKSIDE);\r\n            this._skybox.onDisposeObservable.add(() => { this._skybox = null; });\r\n        }\r\n        this._skybox.parent = this._rootMesh;\r\n    }\r\n\r\n    /**\r\n     * Setup the skybox material according to the specified options.\r\n     */\r\n    private _setupSkyboxMaterial(): void {\r\n        if (!this._skybox) {\r\n            return;\r\n        }\r\n\r\n        if (!this._skyboxMaterial) {\r\n            this._skyboxMaterial = new BackgroundMaterial(\"BackgroundSkyboxMaterial\", this._scene);\r\n        }\r\n        this._skyboxMaterial.useRGBColor = false;\r\n        this._skyboxMaterial.primaryColor = this._options.skyboxColor;\r\n        this._skyboxMaterial.enableNoise = true;\r\n\r\n        this._skybox.material = this._skyboxMaterial;\r\n    }\r\n\r\n    /**\r\n     * Setup the skybox reflection texture according to the specified options.\r\n     */\r\n    private _setupSkyboxReflectionTexture(): void {\r\n        if (!this._skyboxMaterial) {\r\n            return;\r\n        }\r\n\r\n        if (this._skyboxTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.skyboxTexture instanceof BaseTexture) {\r\n            this._skyboxMaterial.reflectionTexture = this._options.skyboxTexture;\r\n            return;\r\n        }\r\n\r\n        this._skyboxTexture = new CubeTexture(this._options.skyboxTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\r\n        this._skyboxTexture.coordinatesMode = Texture.SKYBOX_MODE;\r\n        this._skyboxTexture.gammaSpace = false;\r\n        this._skyboxMaterial.reflectionTexture = this._skyboxTexture;\r\n    }\r\n\r\n    private _errorHandler = (message?: string, exception?: any) => {\r\n        this.onErrorObservable.notifyObservers({ message: message, exception: exception });\r\n    }\r\n\r\n    /**\r\n     * Dispose all the elements created by the Helper.\r\n     */\r\n    public dispose(): void {\r\n        if (this._groundMaterial) {\r\n            this._groundMaterial.dispose(true, true);\r\n        }\r\n        if (this._skyboxMaterial) {\r\n            this._skyboxMaterial.dispose(true, true);\r\n        }\r\n        this._rootMesh.dispose(false);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}