{"ast":null,"code":"/**\r\n * @hidden\r\n **/\nvar AlphaState =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes the state.\r\n   */\n  function AlphaState() {\n    this._isAlphaBlendDirty = false;\n    this._isBlendFunctionParametersDirty = false;\n    this._isBlendEquationParametersDirty = false;\n    this._isBlendConstantsDirty = false;\n    this._alphaBlend = false;\n    this._blendFunctionParameters = new Array(4);\n    this._blendEquationParameters = new Array(2);\n    this._blendConstants = new Array(4);\n    this.reset();\n  }\n\n  Object.defineProperty(AlphaState.prototype, \"isDirty\", {\n    get: function () {\n      return this._isAlphaBlendDirty || this._isBlendFunctionParametersDirty;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AlphaState.prototype, \"alphaBlend\", {\n    get: function () {\n      return this._alphaBlend;\n    },\n    set: function (value) {\n      if (this._alphaBlend === value) {\n        return;\n      }\n\n      this._alphaBlend = value;\n      this._isAlphaBlendDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AlphaState.prototype.setAlphaBlendConstants = function (r, g, b, a) {\n    if (this._blendConstants[0] === r && this._blendConstants[1] === g && this._blendConstants[2] === b && this._blendConstants[3] === a) {\n      return;\n    }\n\n    this._blendConstants[0] = r;\n    this._blendConstants[1] = g;\n    this._blendConstants[2] = b;\n    this._blendConstants[3] = a;\n    this._isBlendConstantsDirty = true;\n  };\n\n  AlphaState.prototype.setAlphaBlendFunctionParameters = function (value0, value1, value2, value3) {\n    if (this._blendFunctionParameters[0] === value0 && this._blendFunctionParameters[1] === value1 && this._blendFunctionParameters[2] === value2 && this._blendFunctionParameters[3] === value3) {\n      return;\n    }\n\n    this._blendFunctionParameters[0] = value0;\n    this._blendFunctionParameters[1] = value1;\n    this._blendFunctionParameters[2] = value2;\n    this._blendFunctionParameters[3] = value3;\n    this._isBlendFunctionParametersDirty = true;\n  };\n\n  AlphaState.prototype.setAlphaEquationParameters = function (rgb, alpha) {\n    if (this._blendEquationParameters[0] === rgb && this._blendEquationParameters[1] === alpha) {\n      return;\n    }\n\n    this._blendEquationParameters[0] = rgb;\n    this._blendEquationParameters[1] = alpha;\n    this._isBlendEquationParametersDirty = true;\n  };\n\n  AlphaState.prototype.reset = function () {\n    this._alphaBlend = false;\n    this._blendFunctionParameters[0] = null;\n    this._blendFunctionParameters[1] = null;\n    this._blendFunctionParameters[2] = null;\n    this._blendFunctionParameters[3] = null;\n    this._blendEquationParameters[0] = null;\n    this._blendEquationParameters[1] = null;\n    this._blendConstants[0] = null;\n    this._blendConstants[1] = null;\n    this._blendConstants[2] = null;\n    this._blendConstants[3] = null;\n    this._isAlphaBlendDirty = true;\n    this._isBlendFunctionParametersDirty = false;\n    this._isBlendEquationParametersDirty = false;\n    this._isBlendConstantsDirty = false;\n  };\n\n  AlphaState.prototype.apply = function (gl) {\n    if (!this.isDirty) {\n      return;\n    } // Alpha blend\n\n\n    if (this._isAlphaBlendDirty) {\n      if (this._alphaBlend) {\n        gl.enable(gl.BLEND);\n      } else {\n        gl.disable(gl.BLEND);\n      }\n\n      this._isAlphaBlendDirty = false;\n    } // Alpha function\n\n\n    if (this._isBlendFunctionParametersDirty) {\n      gl.blendFuncSeparate(this._blendFunctionParameters[0], this._blendFunctionParameters[1], this._blendFunctionParameters[2], this._blendFunctionParameters[3]);\n      this._isBlendFunctionParametersDirty = false;\n    } // Alpha equation\n\n\n    if (this._isBlendEquationParametersDirty) {\n      gl.blendEquationSeparate(this._blendEquationParameters[0], this._blendEquationParameters[1]);\n      this._isBlendEquationParametersDirty = false;\n    } // Constants\n\n\n    if (this._isBlendConstantsDirty) {\n      gl.blendColor(this._blendConstants[0], this._blendConstants[1], this._blendConstants[2], this._blendConstants[3]);\n      this._isBlendConstantsDirty = false;\n    }\n  };\n\n  return AlphaState;\n}();\n\nexport { AlphaState };","map":{"version":3,"sources":["../../../sourceES6/core/States/alphaCullingState.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\n\r\n/**\r\n * @hidden\r\n **/\r\nexport class AlphaState {\r\n    private _isAlphaBlendDirty = false;\r\n    private _isBlendFunctionParametersDirty = false;\r\n    private _isBlendEquationParametersDirty = false;\r\n    private _isBlendConstantsDirty = false;\r\n    private _alphaBlend = false;\r\n    private _blendFunctionParameters = new Array<Nullable<number>>(4);\r\n    private _blendEquationParameters = new Array<Nullable<number>>(2);\r\n    private _blendConstants = new Array<Nullable<number>>(4);\r\n\r\n    /**\r\n     * Initializes the state.\r\n     */\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public get isDirty(): boolean {\r\n        return this._isAlphaBlendDirty || this._isBlendFunctionParametersDirty;\r\n    }\r\n\r\n    public get alphaBlend(): boolean {\r\n        return this._alphaBlend;\r\n    }\r\n\r\n    public set alphaBlend(value: boolean) {\r\n        if (this._alphaBlend === value) {\r\n            return;\r\n        }\r\n\r\n        this._alphaBlend = value;\r\n        this._isAlphaBlendDirty = true;\r\n    }\r\n\r\n    public setAlphaBlendConstants(r: number, g: number, b: number, a: number): void {\r\n        if (\r\n            this._blendConstants[0] === r &&\r\n            this._blendConstants[1] === g &&\r\n            this._blendConstants[2] === b &&\r\n            this._blendConstants[3] === a\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this._blendConstants[0] = r;\r\n        this._blendConstants[1] = g;\r\n        this._blendConstants[2] = b;\r\n        this._blendConstants[3] = a;\r\n\r\n        this._isBlendConstantsDirty = true;\r\n    }\r\n\r\n    public setAlphaBlendFunctionParameters(value0: number, value1: number, value2: number, value3: number): void {\r\n        if (\r\n            this._blendFunctionParameters[0] === value0 &&\r\n            this._blendFunctionParameters[1] === value1 &&\r\n            this._blendFunctionParameters[2] === value2 &&\r\n            this._blendFunctionParameters[3] === value3\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this._blendFunctionParameters[0] = value0;\r\n        this._blendFunctionParameters[1] = value1;\r\n        this._blendFunctionParameters[2] = value2;\r\n        this._blendFunctionParameters[3] = value3;\r\n\r\n        this._isBlendFunctionParametersDirty = true;\r\n    }\r\n\r\n    public setAlphaEquationParameters(rgb: number, alpha: number): void {\r\n        if (\r\n            this._blendEquationParameters[0] === rgb &&\r\n            this._blendEquationParameters[1] === alpha\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this._blendEquationParameters[0] = rgb;\r\n        this._blendEquationParameters[1] = alpha;\r\n\r\n        this._isBlendEquationParametersDirty = true;\r\n    }\r\n\r\n    public reset() {\r\n        this._alphaBlend = false;\r\n        this._blendFunctionParameters[0] = null;\r\n        this._blendFunctionParameters[1] = null;\r\n        this._blendFunctionParameters[2] = null;\r\n        this._blendFunctionParameters[3] = null;\r\n\r\n        this._blendEquationParameters[0] = null;\r\n        this._blendEquationParameters[1] = null;\r\n\r\n        this._blendConstants[0] = null;\r\n        this._blendConstants[1] = null;\r\n        this._blendConstants[2] = null;\r\n        this._blendConstants[3] = null;\r\n\r\n        this._isAlphaBlendDirty = true;\r\n        this._isBlendFunctionParametersDirty = false;\r\n        this._isBlendEquationParametersDirty = false;\r\n        this._isBlendConstantsDirty = false;\r\n    }\r\n\r\n    public apply(gl: WebGLRenderingContext) {\r\n\r\n        if (!this.isDirty) {\r\n            return;\r\n        }\r\n\r\n        // Alpha blend\r\n        if (this._isAlphaBlendDirty) {\r\n            if (this._alphaBlend) {\r\n                gl.enable(gl.BLEND);\r\n            } else {\r\n                gl.disable(gl.BLEND);\r\n            }\r\n\r\n            this._isAlphaBlendDirty = false;\r\n        }\r\n\r\n        // Alpha function\r\n        if (this._isBlendFunctionParametersDirty) {\r\n            gl.blendFuncSeparate(<number>this._blendFunctionParameters[0], <number>this._blendFunctionParameters[1], <number>this._blendFunctionParameters[2], <number>this._blendFunctionParameters[3]);\r\n            this._isBlendFunctionParametersDirty = false;\r\n        }\r\n\r\n        // Alpha equation\r\n        if (this._isBlendEquationParametersDirty) {\r\n            gl.blendEquationSeparate(this._blendEquationParameters[0]!, this._blendEquationParameters[1]!);\r\n            this._isBlendEquationParametersDirty = false;\r\n        }\r\n\r\n        // Constants\r\n        if (this._isBlendConstantsDirty) {\r\n            gl.blendColor(<number>this._blendConstants[0], <number>this._blendConstants[1], <number>this._blendConstants[2], <number>this._blendConstants[3]);\r\n            this._isBlendConstantsDirty = false;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}