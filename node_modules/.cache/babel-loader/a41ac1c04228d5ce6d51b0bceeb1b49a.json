{"ast":null,"code":"import { Scene } from \"../scene\";\nimport { Mesh } from \"./mesh\";\nimport { SimplificationQueue, SimplificationType } from \"./meshSimplification\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nObject.defineProperty(Scene.prototype, \"simplificationQueue\", {\n  get: function () {\n    if (!this._simplificationQueue) {\n      this._simplificationQueue = new SimplificationQueue();\n\n      var component = this._getComponent(SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE);\n\n      if (!component) {\n        component = new SimplicationQueueSceneComponent(this);\n\n        this._addComponent(component);\n      }\n    }\n\n    return this._simplificationQueue;\n  },\n  set: function (value) {\n    this._simplificationQueue = value;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nMesh.prototype.simplify = function (settings, parallelProcessing, simplificationType, successCallback) {\n  if (parallelProcessing === void 0) {\n    parallelProcessing = true;\n  }\n\n  if (simplificationType === void 0) {\n    simplificationType = SimplificationType.QUADRATIC;\n  }\n\n  this.getScene().simplificationQueue.addTask({\n    settings: settings,\n    parallelProcessing: parallelProcessing,\n    mesh: this,\n    simplificationType: simplificationType,\n    successCallback: successCallback\n  });\n  return this;\n};\n/**\r\n * Defines the simplification queue scene component responsible to help scheduling the various simplification task\r\n * created in a scene\r\n */\n\n\nvar SimplicationQueueSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function SimplicationQueueSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE;\n    this.scene = scene;\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  SimplicationQueueSceneComponent.prototype.register = function () {\n    this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE, this, this._beforeCameraUpdate);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  SimplicationQueueSceneComponent.prototype.rebuild = function () {// Nothing to do for this component\n  };\n  /**\r\n   * Disposes the component and the associated ressources\r\n   */\n\n\n  SimplicationQueueSceneComponent.prototype.dispose = function () {// Nothing to do for this component\n  };\n\n  SimplicationQueueSceneComponent.prototype._beforeCameraUpdate = function () {\n    if (this.scene._simplificationQueue && !this.scene._simplificationQueue.running) {\n      this.scene._simplificationQueue.executeNext();\n    }\n  };\n\n  return SimplicationQueueSceneComponent;\n}();\n\nexport { SimplicationQueueSceneComponent };","map":{"version":3,"sources":["../../../sourceES6/core/Meshes/meshSimplificationSceneComponent.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,UAAtB;AACA,SAAS,IAAT,QAAqB,QAArB;AACA,SAAS,mBAAT,EAAuD,kBAAvD,QAAiF,sBAAjF;AACA,SAAS,uBAAT,QAAyD,mBAAzD;AAcA,MAAM,CAAC,cAAP,CAAsB,KAAK,CAAC,SAA5B,EAAuC,qBAAvC,EAA8D;AAC1D,EAAA,GAAG,EAAE,YAAA;AACD,QAAI,CAAC,KAAK,oBAAV,EAAgC;AAC5B,WAAK,oBAAL,GAA4B,IAAI,mBAAJ,EAA5B;;AACA,UAAI,SAAS,GAAG,KAAK,aAAL,CAAmB,uBAAuB,CAAC,wBAA3C,CAAhB;;AACA,UAAI,CAAC,SAAL,EAAgB;AACZ,QAAA,SAAS,GAAG,IAAI,+BAAJ,CAAoC,IAApC,CAAZ;;AACA,aAAK,aAAL,CAAmB,SAAnB;AACH;AACJ;;AACD,WAAO,KAAK,oBAAZ;AACH,GAXyD;AAY1D,EAAA,GAAG,EAAE,UAAsB,KAAtB,EAAgD;AACjD,SAAK,oBAAL,GAA4B,KAA5B;AACH,GAdyD;AAe1D,EAAA,UAAU,EAAE,IAf8C;AAgB1D,EAAA,YAAY,EAAE;AAhB4C,CAA9D;;AAkCA,IAAI,CAAC,SAAL,CAAe,QAAf,GAA0B,UAAS,QAAT,EAAmD,kBAAnD,EAAuF,kBAAvF,EAA8J,eAA9J,EAA4N;AAAzK,MAAA,kBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,kBAAA,GAAA,IAAA;AAAkC;;AAAE,MAAA,kBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,kBAAA,GAAyC,kBAAkB,CAAC,SAA5D;AAAqE;;AAClL,OAAK,QAAL,GAAgB,mBAAhB,CAAoC,OAApC,CAA4C;AACxC,IAAA,QAAQ,EAAE,QAD8B;AAExC,IAAA,kBAAkB,EAAE,kBAFoB;AAGxC,IAAA,IAAI,EAAE,IAHkC;AAIxC,IAAA,kBAAkB,EAAE,kBAJoB;AAKxC,IAAA,eAAe,EAAE;AALuB,GAA5C;AAOA,SAAO,IAAP;AACH,CATD;AAWA;;;;;;AAIA,IAAA,+BAAA;AAAA;AAAA,YAAA;AAWI;;;;AAIA,WAAA,+BAAA,CAAY,KAAZ,EAAwB;AAdxB;;;AAGgB,SAAA,IAAA,GAAO,uBAAuB,CAAC,wBAA/B;AAYZ,SAAK,KAAL,GAAa,KAAb;AACH;AAED;;;;;AAGO,EAAA,+BAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACI,SAAK,KAAL,CAAW,wBAAX,CAAoC,YAApC,CAAiD,uBAAuB,CAAC,2CAAzE,EAAsH,IAAtH,EAA4H,KAAK,mBAAjI;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,+BAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA,CACI;AACH,GAFM;AAIP;;;;;AAGO,EAAA,+BAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA,CACI;AACH,GAFM;;AAIC,EAAA,+BAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,YAAA;AACI,QAAI,KAAK,KAAL,CAAW,oBAAX,IAAmC,CAAC,KAAK,KAAL,CAAW,oBAAX,CAAgC,OAAxE,EAAiF;AAC7E,WAAK,KAAL,CAAW,oBAAX,CAAgC,WAAhC;AACH;AACJ,GAJO;;AAKZ,SAAA,+BAAA;AAAC,CA9CD,EAAA","sourcesContent":["import { Scene } from \"../scene\";\r\nimport { Mesh } from \"./mesh\";\r\nimport { SimplificationQueue, ISimplificationSettings, SimplificationType } from \"./meshSimplification\";\r\nimport { SceneComponentConstants, ISceneComponent } from \"../sceneComponent\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @hidden (Backing field) */\r\n        _simplificationQueue: SimplificationQueue;\r\n\r\n        /**\r\n         * Gets or sets the simplification queue attached to the scene\r\n         * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n         */\r\n        simplificationQueue: SimplificationQueue;\r\n    }\r\n}\r\nObject.defineProperty(Scene.prototype, \"simplificationQueue\", {\r\n    get: function(this: Scene) {\r\n        if (!this._simplificationQueue) {\r\n            this._simplificationQueue = new SimplificationQueue();\r\n            let component = this._getComponent(SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE) as SimplicationQueueSceneComponent;\r\n            if (!component) {\r\n                component = new SimplicationQueueSceneComponent(this);\r\n                this._addComponent(component);\r\n            }\r\n        }\r\n        return this._simplificationQueue;\r\n    },\r\n    set: function(this: Scene, value: SimplificationQueue) {\r\n        this._simplificationQueue = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\ndeclare module \"../Meshes/mesh\" {\r\n    export interface Mesh {\r\n        /**\r\n         * Simplify the mesh according to the given array of settings.\r\n         * Function will return immediately and will simplify async\r\n         * @param settings a collection of simplification settings\r\n         * @param parallelProcessing should all levels calculate parallel or one after the other\r\n         * @param simplificationType the type of simplification to run\r\n         * @param successCallback optional success callback to be called after the simplification finished processing all settings\r\n         * @returns the current mesh\r\n         */\r\n        simplify(settings: Array<ISimplificationSettings>, parallelProcessing?: boolean, simplificationType?: SimplificationType, successCallback?: (mesh?: Mesh, submeshIndex?: number) => void): Mesh;\r\n    }\r\n}\r\n\r\nMesh.prototype.simplify = function(settings: Array<ISimplificationSettings>, parallelProcessing: boolean = true, simplificationType: SimplificationType = SimplificationType.QUADRATIC, successCallback?: (mesh?: Mesh, submeshIndex?: number) => void): Mesh {\r\n    this.getScene().simplificationQueue.addTask({\r\n        settings: settings,\r\n        parallelProcessing: parallelProcessing,\r\n        mesh: this,\r\n        simplificationType: simplificationType,\r\n        successCallback: successCallback\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Defines the simplification queue scene component responsible to help scheduling the various simplification task\r\n * created in a scene\r\n */\r\nexport class SimplicationQueueSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE, this, this._beforeCameraUpdate);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated ressources\r\n     */\r\n    public dispose(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    private _beforeCameraUpdate(): void {\r\n        if (this.scene._simplificationQueue && !this.scene._simplificationQueue.running) {\r\n            this.scene._simplificationQueue.executeNext();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}