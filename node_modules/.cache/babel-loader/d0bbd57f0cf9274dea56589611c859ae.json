{"ast":null,"code":"import { Scalar } from './math.scalar';\nimport { ToLinearSpace, ToGammaSpace } from './math.constants';\nimport { ArrayTools } from '../Misc/arrayTools';\nimport { _TypeStore } from '../Misc/typeStore';\n/**\r\n * Class used to hold a RBG color\r\n */\n\nvar Color3 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Color3 object from red, green, blue values, all between 0 and 1\r\n   * @param r defines the red component (between 0 and 1, default is 0)\r\n   * @param g defines the green component (between 0 and 1, default is 0)\r\n   * @param b defines the blue component (between 0 and 1, default is 0)\r\n   */\n  function Color3(\n  /**\r\n   * Defines the red component (between 0 and 1, default is 0)\r\n   */\n  r,\n  /**\r\n   * Defines the green component (between 0 and 1, default is 0)\r\n   */\n  g,\n  /**\r\n   * Defines the blue component (between 0 and 1, default is 0)\r\n   */\n  b) {\n    if (r === void 0) {\n      r = 0;\n    }\n\n    if (g === void 0) {\n      g = 0;\n    }\n\n    if (b === void 0) {\n      b = 0;\n    }\n\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n  /**\r\n   * Creates a string with the Color3 current values\r\n   * @returns the string representation of the Color3 object\r\n   */\n\n\n  Color3.prototype.toString = function () {\n    return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \"}\";\n  };\n  /**\r\n   * Returns the string \"Color3\"\r\n   * @returns \"Color3\"\r\n   */\n\n\n  Color3.prototype.getClassName = function () {\n    return \"Color3\";\n  };\n  /**\r\n   * Compute the Color3 hash code\r\n   * @returns an unique number that can be used to hash Color3 objects\r\n   */\n\n\n  Color3.prototype.getHashCode = function () {\n    var hash = this.r * 255 | 0;\n    hash = hash * 397 ^ (this.g * 255 | 0);\n    hash = hash * 397 ^ (this.b * 255 | 0);\n    return hash;\n  }; // Operators\n\n  /**\r\n   * Stores in the given array from the given starting index the red, green, blue values as successive elements\r\n   * @param array defines the array where to store the r,g,b components\r\n   * @param index defines an optional index in the target array to define where to start storing values\r\n   * @returns the current Color3 object\r\n   */\n\n\n  Color3.prototype.toArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    array[index] = this.r;\n    array[index + 1] = this.g;\n    array[index + 2] = this.b;\n    return this;\n  };\n  /**\r\n   * Update the current color with values stored in an array from the starting index of the given array\r\n   * @param array defines the source array\r\n   * @param offset defines an offset in the source array\r\n   * @returns the current Color3 object\r\n   */\n\n\n  Color3.prototype.fromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    Color3.FromArrayToRef(array, offset, this);\n    return this;\n  };\n  /**\r\n   * Returns a new Color4 object from the current Color3 and the given alpha\r\n   * @param alpha defines the alpha component on the new Color4 object (default is 1)\r\n   * @returns a new Color4 object\r\n   */\n\n\n  Color3.prototype.toColor4 = function (alpha) {\n    if (alpha === void 0) {\n      alpha = 1;\n    }\n\n    return new Color4(this.r, this.g, this.b, alpha);\n  };\n  /**\r\n   * Returns a new array populated with 3 numeric elements : red, green and blue values\r\n   * @returns the new array\r\n   */\n\n\n  Color3.prototype.asArray = function () {\n    var result = new Array();\n    this.toArray(result, 0);\n    return result;\n  };\n  /**\r\n   * Returns the luminance value\r\n   * @returns a float value\r\n   */\n\n\n  Color3.prototype.toLuminance = function () {\n    return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\n  };\n  /**\r\n   * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\r\n   * @param otherColor defines the second operand\r\n   * @returns the new Color3 object\r\n   */\n\n\n  Color3.prototype.multiply = function (otherColor) {\n    return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\n  };\n  /**\r\n   * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\r\n   * @param otherColor defines the second operand\r\n   * @param result defines the Color3 object where to store the result\r\n   * @returns the current Color3\r\n   */\n\n\n  Color3.prototype.multiplyToRef = function (otherColor, result) {\n    result.r = this.r * otherColor.r;\n    result.g = this.g * otherColor.g;\n    result.b = this.b * otherColor.b;\n    return this;\n  };\n  /**\r\n   * Determines equality between Color3 objects\r\n   * @param otherColor defines the second operand\r\n   * @returns true if the rgb values are equal to the given ones\r\n   */\n\n\n  Color3.prototype.equals = function (otherColor) {\n    return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b;\n  };\n  /**\r\n   * Determines equality between the current Color3 object and a set of r,b,g values\r\n   * @param r defines the red component to check\r\n   * @param g defines the green component to check\r\n   * @param b defines the blue component to check\r\n   * @returns true if the rgb values are equal to the given ones\r\n   */\n\n\n  Color3.prototype.equalsFloats = function (r, g, b) {\n    return this.r === r && this.g === g && this.b === b;\n  };\n  /**\r\n   * Multiplies in place each rgb value by scale\r\n   * @param scale defines the scaling factor\r\n   * @returns the updated Color3\r\n   */\n\n\n  Color3.prototype.scale = function (scale) {\n    return new Color3(this.r * scale, this.g * scale, this.b * scale);\n  };\n  /**\r\n   * Multiplies the rgb values by scale and stores the result into \"result\"\r\n   * @param scale defines the scaling factor\r\n   * @param result defines the Color3 object where to store the result\r\n   * @returns the unmodified current Color3\r\n   */\n\n\n  Color3.prototype.scaleToRef = function (scale, result) {\n    result.r = this.r * scale;\n    result.g = this.g * scale;\n    result.b = this.b * scale;\n    return this;\n  };\n  /**\r\n   * Scale the current Color3 values by a factor and add the result to a given Color3\r\n   * @param scale defines the scale factor\r\n   * @param result defines color to store the result into\r\n   * @returns the unmodified current Color3\r\n   */\n\n\n  Color3.prototype.scaleAndAddToRef = function (scale, result) {\n    result.r += this.r * scale;\n    result.g += this.g * scale;\n    result.b += this.b * scale;\n    return this;\n  };\n  /**\r\n   * Clamps the rgb values by the min and max values and stores the result into \"result\"\r\n   * @param min defines minimum clamping value (default is 0)\r\n   * @param max defines maximum clamping value (default is 1)\r\n   * @param result defines color to store the result into\r\n   * @returns the original Color3\r\n   */\n\n\n  Color3.prototype.clampToRef = function (min, max, result) {\n    if (min === void 0) {\n      min = 0;\n    }\n\n    if (max === void 0) {\n      max = 1;\n    }\n\n    result.r = Scalar.Clamp(this.r, min, max);\n    result.g = Scalar.Clamp(this.g, min, max);\n    result.b = Scalar.Clamp(this.b, min, max);\n    return this;\n  };\n  /**\r\n   * Creates a new Color3 set with the added values of the current Color3 and of the given one\r\n   * @param otherColor defines the second operand\r\n   * @returns the new Color3\r\n   */\n\n\n  Color3.prototype.add = function (otherColor) {\n    return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\n  };\n  /**\r\n   * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\r\n   * @param otherColor defines the second operand\r\n   * @param result defines Color3 object to store the result into\r\n   * @returns the unmodified current Color3\r\n   */\n\n\n  Color3.prototype.addToRef = function (otherColor, result) {\n    result.r = this.r + otherColor.r;\n    result.g = this.g + otherColor.g;\n    result.b = this.b + otherColor.b;\n    return this;\n  };\n  /**\r\n   * Returns a new Color3 set with the subtracted values of the given one from the current Color3\r\n   * @param otherColor defines the second operand\r\n   * @returns the new Color3\r\n   */\n\n\n  Color3.prototype.subtract = function (otherColor) {\n    return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\n  };\n  /**\r\n   * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\r\n   * @param otherColor defines the second operand\r\n   * @param result defines Color3 object to store the result into\r\n   * @returns the unmodified current Color3\r\n   */\n\n\n  Color3.prototype.subtractToRef = function (otherColor, result) {\n    result.r = this.r - otherColor.r;\n    result.g = this.g - otherColor.g;\n    result.b = this.b - otherColor.b;\n    return this;\n  };\n  /**\r\n   * Copy the current object\r\n   * @returns a new Color3 copied the current one\r\n   */\n\n\n  Color3.prototype.clone = function () {\n    return new Color3(this.r, this.g, this.b);\n  };\n  /**\r\n   * Copies the rgb values from the source in the current Color3\r\n   * @param source defines the source Color3 object\r\n   * @returns the updated Color3 object\r\n   */\n\n\n  Color3.prototype.copyFrom = function (source) {\n    this.r = source.r;\n    this.g = source.g;\n    this.b = source.b;\n    return this;\n  };\n  /**\r\n   * Updates the Color3 rgb values from the given floats\r\n   * @param r defines the red component to read from\r\n   * @param g defines the green component to read from\r\n   * @param b defines the blue component to read from\r\n   * @returns the current Color3 object\r\n   */\n\n\n  Color3.prototype.copyFromFloats = function (r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    return this;\n  };\n  /**\r\n   * Updates the Color3 rgb values from the given floats\r\n   * @param r defines the red component to read from\r\n   * @param g defines the green component to read from\r\n   * @param b defines the blue component to read from\r\n   * @returns the current Color3 object\r\n   */\n\n\n  Color3.prototype.set = function (r, g, b) {\n    return this.copyFromFloats(r, g, b);\n  };\n  /**\r\n   * Compute the Color3 hexadecimal code as a string\r\n   * @returns a string containing the hexadecimal representation of the Color3 object\r\n   */\n\n\n  Color3.prototype.toHexString = function () {\n    var intR = this.r * 255 | 0;\n    var intG = this.g * 255 | 0;\n    var intB = this.b * 255 | 0;\n    return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB);\n  };\n  /**\r\n   * Computes a new Color3 converted from the current one to linear space\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.prototype.toLinearSpace = function () {\n    var convertedColor = new Color3();\n    this.toLinearSpaceToRef(convertedColor);\n    return convertedColor;\n  };\n  /**\r\n   * Converts current color in rgb space to HSV values\r\n   * @returns a new color3 representing the HSV values\r\n   */\n\n\n  Color3.prototype.toHSV = function () {\n    var result = new Color3();\n    this.toHSVToRef(result);\n    return result;\n  };\n  /**\r\n   * Converts current color in rgb space to HSV values\r\n   * @param result defines the Color3 where to store the HSV values\r\n   */\n\n\n  Color3.prototype.toHSVToRef = function (result) {\n    var r = this.r;\n    var g = this.g;\n    var b = this.b;\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var s = 0;\n    var v = max;\n    var dm = max - min;\n\n    if (max !== 0) {\n      s = dm / max;\n    }\n\n    if (max != min) {\n      if (max == r) {\n        h = (g - b) / dm;\n\n        if (g < b) {\n          h += 6;\n        }\n      } else if (max == g) {\n        h = (b - r) / dm + 2;\n      } else if (max == b) {\n        h = (r - g) / dm + 4;\n      }\n\n      h *= 60;\n    }\n\n    result.r = h;\n    result.g = s;\n    result.b = v;\n  };\n  /**\r\n   * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\r\n   * @param convertedColor defines the Color3 object where to store the linear space version\r\n   * @returns the unmodified Color3\r\n   */\n\n\n  Color3.prototype.toLinearSpaceToRef = function (convertedColor) {\n    convertedColor.r = Math.pow(this.r, ToLinearSpace);\n    convertedColor.g = Math.pow(this.g, ToLinearSpace);\n    convertedColor.b = Math.pow(this.b, ToLinearSpace);\n    return this;\n  };\n  /**\r\n   * Computes a new Color3 converted from the current one to gamma space\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.prototype.toGammaSpace = function () {\n    var convertedColor = new Color3();\n    this.toGammaSpaceToRef(convertedColor);\n    return convertedColor;\n  };\n  /**\r\n   * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\r\n   * @param convertedColor defines the Color3 object where to store the gamma space version\r\n   * @returns the unmodified Color3\r\n   */\n\n\n  Color3.prototype.toGammaSpaceToRef = function (convertedColor) {\n    convertedColor.r = Math.pow(this.r, ToGammaSpace);\n    convertedColor.g = Math.pow(this.g, ToGammaSpace);\n    convertedColor.b = Math.pow(this.b, ToGammaSpace);\n    return this;\n  };\n  /**\r\n   * Convert Hue, saturation and value to a Color3 (RGB)\r\n   * @param hue defines the hue\r\n   * @param saturation defines the saturation\r\n   * @param value defines the value\r\n   * @param result defines the Color3 where to store the RGB values\r\n   */\n\n\n  Color3.HSVtoRGBToRef = function (hue, saturation, value, result) {\n    var chroma = value * saturation;\n    var h = hue / 60;\n    var x = chroma * (1 - Math.abs(h % 2 - 1));\n    var r = 0;\n    var g = 0;\n    var b = 0;\n\n    if (h >= 0 && h <= 1) {\n      r = chroma;\n      g = x;\n    } else if (h >= 1 && h <= 2) {\n      r = x;\n      g = chroma;\n    } else if (h >= 2 && h <= 3) {\n      g = chroma;\n      b = x;\n    } else if (h >= 3 && h <= 4) {\n      g = x;\n      b = chroma;\n    } else if (h >= 4 && h <= 5) {\n      r = x;\n      b = chroma;\n    } else if (h >= 5 && h <= 6) {\n      r = chroma;\n      b = x;\n    }\n\n    var m = value - chroma;\n    result.set(r + m, g + m, b + m);\n  };\n  /**\r\n   * Creates a new Color3 from the string containing valid hexadecimal values\r\n   * @param hex defines a string containing valid hexadecimal values\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.FromHexString = function (hex) {\n    if (hex.substring(0, 1) !== \"#\" || hex.length !== 7) {\n      return new Color3(0, 0, 0);\n    }\n\n    var r = parseInt(hex.substring(1, 3), 16);\n    var g = parseInt(hex.substring(3, 5), 16);\n    var b = parseInt(hex.substring(5, 7), 16);\n    return Color3.FromInts(r, g, b);\n  };\n  /**\r\n   * Creates a new Color3 from the starting index of the given array\r\n   * @param array defines the source array\r\n   * @param offset defines an offset in the source array\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    return new Color3(array[offset], array[offset + 1], array[offset + 2]);\n  };\n  /**\r\n   * Creates a new Color3 from the starting index element of the given array\r\n   * @param array defines the source array to read from\r\n   * @param offset defines the offset in the source array\r\n   * @param result defines the target Color3 object\r\n   */\n\n\n  Color3.FromArrayToRef = function (array, offset, result) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    result.r = array[offset];\n    result.g = array[offset + 1];\n    result.b = array[offset + 2];\n  };\n  /**\r\n   * Creates a new Color3 from integer values (< 256)\r\n   * @param r defines the red component to read from (value between 0 and 255)\r\n   * @param g defines the green component to read from (value between 0 and 255)\r\n   * @param b defines the blue component to read from (value between 0 and 255)\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.FromInts = function (r, g, b) {\n    return new Color3(r / 255.0, g / 255.0, b / 255.0);\n  };\n  /**\r\n   * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\r\n   * @param start defines the start Color3 value\r\n   * @param end defines the end Color3 value\r\n   * @param amount defines the gradient value between start and end\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.Lerp = function (start, end, amount) {\n    var result = new Color3(0.0, 0.0, 0.0);\n    Color3.LerpToRef(start, end, amount, result);\n    return result;\n  };\n  /**\r\n   * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\r\n   * @param left defines the start value\r\n   * @param right defines the end value\r\n   * @param amount defines the gradient factor\r\n   * @param result defines the Color3 object where to store the result\r\n   */\n\n\n  Color3.LerpToRef = function (left, right, amount, result) {\n    result.r = left.r + (right.r - left.r) * amount;\n    result.g = left.g + (right.g - left.g) * amount;\n    result.b = left.b + (right.b - left.b) * amount;\n  };\n  /**\r\n   * Returns a Color3 value containing a red color\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.Red = function () {\n    return new Color3(1, 0, 0);\n  };\n  /**\r\n   * Returns a Color3 value containing a green color\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.Green = function () {\n    return new Color3(0, 1, 0);\n  };\n  /**\r\n   * Returns a Color3 value containing a blue color\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.Blue = function () {\n    return new Color3(0, 0, 1);\n  };\n  /**\r\n   * Returns a Color3 value containing a black color\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.Black = function () {\n    return new Color3(0, 0, 0);\n  };\n\n  Object.defineProperty(Color3, \"BlackReadOnly\", {\n    /**\r\n      * Gets a Color3 value containing a black color that must not be updated\r\n      */\n    get: function () {\n      return Color3._BlackReadOnly;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns a Color3 value containing a white color\r\n   * @returns a new Color3 object\r\n   */\n\n  Color3.White = function () {\n    return new Color3(1, 1, 1);\n  };\n  /**\r\n   * Returns a Color3 value containing a purple color\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.Purple = function () {\n    return new Color3(0.5, 0, 0.5);\n  };\n  /**\r\n   * Returns a Color3 value containing a magenta color\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.Magenta = function () {\n    return new Color3(1, 0, 1);\n  };\n  /**\r\n   * Returns a Color3 value containing a yellow color\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.Yellow = function () {\n    return new Color3(1, 1, 0);\n  };\n  /**\r\n   * Returns a Color3 value containing a gray color\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.Gray = function () {\n    return new Color3(0.5, 0.5, 0.5);\n  };\n  /**\r\n   * Returns a Color3 value containing a teal color\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.Teal = function () {\n    return new Color3(0, 1.0, 1.0);\n  };\n  /**\r\n   * Returns a Color3 value containing a random color\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color3.Random = function () {\n    return new Color3(Math.random(), Math.random(), Math.random());\n  }; // Statics\n\n\n  Color3._BlackReadOnly = Color3.Black();\n  return Color3;\n}();\n\nexport { Color3 };\n/**\r\n * Class used to hold a RBGA color\r\n */\n\nvar Color4 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Color4 object from red, green, blue values, all between 0 and 1\r\n   * @param r defines the red component (between 0 and 1, default is 0)\r\n   * @param g defines the green component (between 0 and 1, default is 0)\r\n   * @param b defines the blue component (between 0 and 1, default is 0)\r\n   * @param a defines the alpha component (between 0 and 1, default is 1)\r\n   */\n  function Color4(\n  /**\r\n   * Defines the red component (between 0 and 1, default is 0)\r\n   */\n  r,\n  /**\r\n   * Defines the green component (between 0 and 1, default is 0)\r\n   */\n  g,\n  /**\r\n   * Defines the blue component (between 0 and 1, default is 0)\r\n   */\n  b,\n  /**\r\n   * Defines the alpha component (between 0 and 1, default is 1)\r\n   */\n  a) {\n    if (r === void 0) {\n      r = 0;\n    }\n\n    if (g === void 0) {\n      g = 0;\n    }\n\n    if (b === void 0) {\n      b = 0;\n    }\n\n    if (a === void 0) {\n      a = 1;\n    }\n\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  } // Operators\n\n  /**\r\n   * Adds in place the given Color4 values to the current Color4 object\r\n   * @param right defines the second operand\r\n   * @returns the current updated Color4 object\r\n   */\n\n\n  Color4.prototype.addInPlace = function (right) {\n    this.r += right.r;\n    this.g += right.g;\n    this.b += right.b;\n    this.a += right.a;\n    return this;\n  };\n  /**\r\n   * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\r\n   * @returns the new array\r\n   */\n\n\n  Color4.prototype.asArray = function () {\n    var result = new Array();\n    this.toArray(result, 0);\n    return result;\n  };\n  /**\r\n   * Stores from the starting index in the given array the Color4 successive values\r\n   * @param array defines the array where to store the r,g,b components\r\n   * @param index defines an optional index in the target array to define where to start storing values\r\n   * @returns the current Color4 object\r\n   */\n\n\n  Color4.prototype.toArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    array[index] = this.r;\n    array[index + 1] = this.g;\n    array[index + 2] = this.b;\n    array[index + 3] = this.a;\n    return this;\n  };\n  /**\r\n   * Update the current color with values stored in an array from the starting index of the given array\r\n   * @param array defines the source array\r\n   * @param offset defines an offset in the source array\r\n   * @returns the current Color4 object\r\n   */\n\n\n  Color4.prototype.fromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    Color4.FromArrayToRef(array, offset, this);\n    return this;\n  };\n  /**\r\n   * Determines equality between Color4 objects\r\n   * @param otherColor defines the second operand\r\n   * @returns true if the rgba values are equal to the given ones\r\n   */\n\n\n  Color4.prototype.equals = function (otherColor) {\n    return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b && this.a === otherColor.a;\n  };\n  /**\r\n   * Creates a new Color4 set with the added values of the current Color4 and of the given one\r\n   * @param right defines the second operand\r\n   * @returns a new Color4 object\r\n   */\n\n\n  Color4.prototype.add = function (right) {\n    return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);\n  };\n  /**\r\n   * Creates a new Color4 set with the subtracted values of the given one from the current Color4\r\n   * @param right defines the second operand\r\n   * @returns a new Color4 object\r\n   */\n\n\n  Color4.prototype.subtract = function (right) {\n    return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);\n  };\n  /**\r\n   * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\r\n   * @param right defines the second operand\r\n   * @param result defines the Color4 object where to store the result\r\n   * @returns the current Color4 object\r\n   */\n\n\n  Color4.prototype.subtractToRef = function (right, result) {\n    result.r = this.r - right.r;\n    result.g = this.g - right.g;\n    result.b = this.b - right.b;\n    result.a = this.a - right.a;\n    return this;\n  };\n  /**\r\n   * Creates a new Color4 with the current Color4 values multiplied by scale\r\n   * @param scale defines the scaling factor to apply\r\n   * @returns a new Color4 object\r\n   */\n\n\n  Color4.prototype.scale = function (scale) {\n    return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\n  };\n  /**\r\n   * Multiplies the current Color4 values by scale and stores the result in \"result\"\r\n   * @param scale defines the scaling factor to apply\r\n   * @param result defines the Color4 object where to store the result\r\n   * @returns the current unmodified Color4\r\n   */\n\n\n  Color4.prototype.scaleToRef = function (scale, result) {\n    result.r = this.r * scale;\n    result.g = this.g * scale;\n    result.b = this.b * scale;\n    result.a = this.a * scale;\n    return this;\n  };\n  /**\r\n   * Scale the current Color4 values by a factor and add the result to a given Color4\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Color4 object where to store the result\r\n   * @returns the unmodified current Color4\r\n   */\n\n\n  Color4.prototype.scaleAndAddToRef = function (scale, result) {\n    result.r += this.r * scale;\n    result.g += this.g * scale;\n    result.b += this.b * scale;\n    result.a += this.a * scale;\n    return this;\n  };\n  /**\r\n   * Clamps the rgb values by the min and max values and stores the result into \"result\"\r\n   * @param min defines minimum clamping value (default is 0)\r\n   * @param max defines maximum clamping value (default is 1)\r\n   * @param result defines color to store the result into.\r\n   * @returns the cuurent Color4\r\n   */\n\n\n  Color4.prototype.clampToRef = function (min, max, result) {\n    if (min === void 0) {\n      min = 0;\n    }\n\n    if (max === void 0) {\n      max = 1;\n    }\n\n    result.r = Scalar.Clamp(this.r, min, max);\n    result.g = Scalar.Clamp(this.g, min, max);\n    result.b = Scalar.Clamp(this.b, min, max);\n    result.a = Scalar.Clamp(this.a, min, max);\n    return this;\n  };\n  /**\r\n    * Multipy an Color4 value by another and return a new Color4 object\r\n    * @param color defines the Color4 value to multiply by\r\n    * @returns a new Color4 object\r\n    */\n\n\n  Color4.prototype.multiply = function (color) {\n    return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\n  };\n  /**\r\n   * Multipy a Color4 value by another and push the result in a reference value\r\n   * @param color defines the Color4 value to multiply by\r\n   * @param result defines the Color4 to fill the result in\r\n   * @returns the result Color4\r\n   */\n\n\n  Color4.prototype.multiplyToRef = function (color, result) {\n    result.r = this.r * color.r;\n    result.g = this.g * color.g;\n    result.b = this.b * color.b;\n    result.a = this.a * color.a;\n    return result;\n  };\n  /**\r\n   * Creates a string with the Color4 current values\r\n   * @returns the string representation of the Color4 object\r\n   */\n\n\n  Color4.prototype.toString = function () {\n    return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \" A:\" + this.a + \"}\";\n  };\n  /**\r\n   * Returns the string \"Color4\"\r\n   * @returns \"Color4\"\r\n   */\n\n\n  Color4.prototype.getClassName = function () {\n    return \"Color4\";\n  };\n  /**\r\n   * Compute the Color4 hash code\r\n   * @returns an unique number that can be used to hash Color4 objects\r\n   */\n\n\n  Color4.prototype.getHashCode = function () {\n    var hash = this.r * 255 | 0;\n    hash = hash * 397 ^ (this.g * 255 | 0);\n    hash = hash * 397 ^ (this.b * 255 | 0);\n    hash = hash * 397 ^ (this.a * 255 | 0);\n    return hash;\n  };\n  /**\r\n   * Creates a new Color4 copied from the current one\r\n   * @returns a new Color4 object\r\n   */\n\n\n  Color4.prototype.clone = function () {\n    return new Color4(this.r, this.g, this.b, this.a);\n  };\n  /**\r\n   * Copies the given Color4 values into the current one\r\n   * @param source defines the source Color4 object\r\n   * @returns the current updated Color4 object\r\n   */\n\n\n  Color4.prototype.copyFrom = function (source) {\n    this.r = source.r;\n    this.g = source.g;\n    this.b = source.b;\n    this.a = source.a;\n    return this;\n  };\n  /**\r\n   * Copies the given float values into the current one\r\n   * @param r defines the red component to read from\r\n   * @param g defines the green component to read from\r\n   * @param b defines the blue component to read from\r\n   * @param a defines the alpha component to read from\r\n   * @returns the current updated Color4 object\r\n   */\n\n\n  Color4.prototype.copyFromFloats = function (r, g, b, a) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n    return this;\n  };\n  /**\r\n   * Copies the given float values into the current one\r\n   * @param r defines the red component to read from\r\n   * @param g defines the green component to read from\r\n   * @param b defines the blue component to read from\r\n   * @param a defines the alpha component to read from\r\n   * @returns the current updated Color4 object\r\n   */\n\n\n  Color4.prototype.set = function (r, g, b, a) {\n    return this.copyFromFloats(r, g, b, a);\n  };\n  /**\r\n   * Compute the Color4 hexadecimal code as a string\r\n   * @param returnAsColor3 defines if the string should only contains RGB values (off by default)\r\n   * @returns a string containing the hexadecimal representation of the Color4 object\r\n   */\n\n\n  Color4.prototype.toHexString = function (returnAsColor3) {\n    if (returnAsColor3 === void 0) {\n      returnAsColor3 = false;\n    }\n\n    var intR = this.r * 255 | 0;\n    var intG = this.g * 255 | 0;\n    var intB = this.b * 255 | 0;\n\n    if (returnAsColor3) {\n      return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB);\n    }\n\n    var intA = this.a * 255 | 0;\n    return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB) + Scalar.ToHex(intA);\n  };\n  /**\r\n   * Computes a new Color4 converted from the current one to linear space\r\n   * @returns a new Color4 object\r\n   */\n\n\n  Color4.prototype.toLinearSpace = function () {\n    var convertedColor = new Color4();\n    this.toLinearSpaceToRef(convertedColor);\n    return convertedColor;\n  };\n  /**\r\n   * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\r\n   * @param convertedColor defines the Color4 object where to store the linear space version\r\n   * @returns the unmodified Color4\r\n   */\n\n\n  Color4.prototype.toLinearSpaceToRef = function (convertedColor) {\n    convertedColor.r = Math.pow(this.r, ToLinearSpace);\n    convertedColor.g = Math.pow(this.g, ToLinearSpace);\n    convertedColor.b = Math.pow(this.b, ToLinearSpace);\n    convertedColor.a = this.a;\n    return this;\n  };\n  /**\r\n   * Computes a new Color4 converted from the current one to gamma space\r\n   * @returns a new Color4 object\r\n   */\n\n\n  Color4.prototype.toGammaSpace = function () {\n    var convertedColor = new Color4();\n    this.toGammaSpaceToRef(convertedColor);\n    return convertedColor;\n  };\n  /**\r\n   * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\r\n   * @param convertedColor defines the Color4 object where to store the gamma space version\r\n   * @returns the unmodified Color4\r\n   */\n\n\n  Color4.prototype.toGammaSpaceToRef = function (convertedColor) {\n    convertedColor.r = Math.pow(this.r, ToGammaSpace);\n    convertedColor.g = Math.pow(this.g, ToGammaSpace);\n    convertedColor.b = Math.pow(this.b, ToGammaSpace);\n    convertedColor.a = this.a;\n    return this;\n  }; // Statics\n\n  /**\r\n   * Creates a new Color4 from the string containing valid hexadecimal values\r\n   * @param hex defines a string containing valid hexadecimal values\r\n   * @returns a new Color4 object\r\n   */\n\n\n  Color4.FromHexString = function (hex) {\n    if (hex.substring(0, 1) !== \"#\" || hex.length !== 9) {\n      return new Color4(0.0, 0.0, 0.0, 0.0);\n    }\n\n    var r = parseInt(hex.substring(1, 3), 16);\n    var g = parseInt(hex.substring(3, 5), 16);\n    var b = parseInt(hex.substring(5, 7), 16);\n    var a = parseInt(hex.substring(7, 9), 16);\n    return Color4.FromInts(r, g, b, a);\n  };\n  /**\r\n   * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\r\n   * @param left defines the start value\r\n   * @param right defines the end value\r\n   * @param amount defines the gradient factor\r\n   * @returns a new Color4 object\r\n   */\n\n\n  Color4.Lerp = function (left, right, amount) {\n    var result = new Color4(0.0, 0.0, 0.0, 0.0);\n    Color4.LerpToRef(left, right, amount, result);\n    return result;\n  };\n  /**\r\n   * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\r\n   * @param left defines the start value\r\n   * @param right defines the end value\r\n   * @param amount defines the gradient factor\r\n   * @param result defines the Color4 object where to store data\r\n   */\n\n\n  Color4.LerpToRef = function (left, right, amount, result) {\n    result.r = left.r + (right.r - left.r) * amount;\n    result.g = left.g + (right.g - left.g) * amount;\n    result.b = left.b + (right.b - left.b) * amount;\n    result.a = left.a + (right.a - left.a) * amount;\n  };\n  /**\r\n   * Creates a new Color4 from a Color3 and an alpha value\r\n   * @param color3 defines the source Color3 to read from\r\n   * @param alpha defines the alpha component (1.0 by default)\r\n   * @returns a new Color4 object\r\n   */\n\n\n  Color4.FromColor3 = function (color3, alpha) {\n    if (alpha === void 0) {\n      alpha = 1.0;\n    }\n\n    return new Color4(color3.r, color3.g, color3.b, alpha);\n  };\n  /**\r\n   * Creates a new Color4 from the starting index element of the given array\r\n   * @param array defines the source array to read from\r\n   * @param offset defines the offset in the source array\r\n   * @returns a new Color4 object\r\n   */\n\n\n  Color4.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n  };\n  /**\r\n   * Creates a new Color4 from the starting index element of the given array\r\n   * @param array defines the source array to read from\r\n   * @param offset defines the offset in the source array\r\n   * @param result defines the target Color4 object\r\n   */\n\n\n  Color4.FromArrayToRef = function (array, offset, result) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    result.r = array[offset];\n    result.g = array[offset + 1];\n    result.b = array[offset + 2];\n    result.a = array[offset + 3];\n  };\n  /**\r\n   * Creates a new Color3 from integer values (< 256)\r\n   * @param r defines the red component to read from (value between 0 and 255)\r\n   * @param g defines the green component to read from (value between 0 and 255)\r\n   * @param b defines the blue component to read from (value between 0 and 255)\r\n   * @param a defines the alpha component to read from (value between 0 and 255)\r\n   * @returns a new Color3 object\r\n   */\n\n\n  Color4.FromInts = function (r, g, b, a) {\n    return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\n  };\n  /**\r\n   * Check the content of a given array and convert it to an array containing RGBA data\r\n   * If the original array was already containing count * 4 values then it is returned directly\r\n   * @param colors defines the array to check\r\n   * @param count defines the number of RGBA data to expect\r\n   * @returns an array containing count * 4 values (RGBA)\r\n   */\n\n\n  Color4.CheckColors4 = function (colors, count) {\n    // Check if color3 was used\n    if (colors.length === count * 3) {\n      var colors4 = [];\n\n      for (var index = 0; index < colors.length; index += 3) {\n        var newIndex = index / 3 * 4;\n        colors4[newIndex] = colors[index];\n        colors4[newIndex + 1] = colors[index + 1];\n        colors4[newIndex + 2] = colors[index + 2];\n        colors4[newIndex + 3] = 1.0;\n      }\n\n      return colors4;\n    }\n\n    return colors;\n  };\n\n  return Color4;\n}();\n\nexport { Color4 };\n/**\r\n * @hidden\r\n */\n\nvar TmpColors =\n/** @class */\nfunction () {\n  function TmpColors() {}\n\n  TmpColors.Color3 = ArrayTools.BuildArray(3, Color3.Black);\n  TmpColors.Color4 = ArrayTools.BuildArray(3, function () {\n    return new Color4(0, 0, 0, 0);\n  });\n  return TmpColors;\n}();\n\nexport { TmpColors };\n_TypeStore.RegisteredTypes[\"BABYLON.Color3\"] = Color3;\n_TypeStore.RegisteredTypes[\"BABYLON.Color4\"] = Color4;","map":{"version":3,"sources":["../../../sourceES6/core/Maths/math.color.ts"],"names":[],"mappings":"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","sourcesContent":["import { DeepImmutable, FloatArray } from '../types';\r\nimport { Scalar } from './math.scalar';\r\nimport { ToLinearSpace, ToGammaSpace } from './math.constants';\r\nimport { ArrayTools } from '../Misc/arrayTools';\r\nimport { _TypeStore } from '../Misc/typeStore';\r\n\r\n/**\r\n * Class used to hold a RBG color\r\n */\r\nexport class Color3 {\r\n\r\n    /**\r\n     * Creates a new Color3 object from red, green, blue values, all between 0 and 1\r\n     * @param r defines the red component (between 0 and 1, default is 0)\r\n     * @param g defines the green component (between 0 and 1, default is 0)\r\n     * @param b defines the blue component (between 0 and 1, default is 0)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the red component (between 0 and 1, default is 0)\r\n         */\r\n        public r: number = 0,\r\n        /**\r\n         * Defines the green component (between 0 and 1, default is 0)\r\n         */\r\n        public g: number = 0,\r\n        /**\r\n         * Defines the blue component (between 0 and 1, default is 0)\r\n         */\r\n        public b: number = 0) {\r\n    }\r\n\r\n    /**\r\n     * Creates a string with the Color3 current values\r\n     * @returns the string representation of the Color3 object\r\n     */\r\n    public toString(): string {\r\n        return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"Color3\"\r\n     * @returns \"Color3\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Color3\";\r\n    }\r\n\r\n    /**\r\n     * Compute the Color3 hash code\r\n     * @returns an unique number that can be used to hash Color3 objects\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = (this.r * 255) | 0;\r\n        hash = (hash * 397) ^ ((this.g * 255) | 0);\r\n        hash = (hash * 397) ^ ((this.b * 255) | 0);\r\n        return hash;\r\n    }\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Stores in the given array from the given starting index the red, green, blue values as successive elements\r\n     * @param array defines the array where to store the r,g,b components\r\n     * @param index defines an optional index in the target array to define where to start storing values\r\n     * @returns the current Color3 object\r\n     */\r\n    public toArray(array: FloatArray, index: number = 0): Color3 {\r\n        array[index] = this.r;\r\n        array[index + 1] = this.g;\r\n        array[index + 2] = this.b;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update the current color with values stored in an array from the starting index of the given array\r\n     * @param array defines the source array\r\n     * @param offset defines an offset in the source array\r\n     * @returns the current Color3 object\r\n     */\r\n    public fromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Color3 {\r\n        Color3.FromArrayToRef(array, offset, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color4 object from the current Color3 and the given alpha\r\n     * @param alpha defines the alpha component on the new Color4 object (default is 1)\r\n     * @returns a new Color4 object\r\n     */\r\n    public toColor4(alpha: number = 1): Color4 {\r\n        return new Color4(this.r, this.g, this.b, alpha);\r\n    }\r\n\r\n    /**\r\n     * Returns a new array populated with 3 numeric elements : red, green and blue values\r\n     * @returns the new array\r\n     */\r\n    public asArray(): number[] {\r\n        var result = new Array<number>();\r\n        this.toArray(result, 0);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns the luminance value\r\n     * @returns a float value\r\n     */\r\n    public toLuminance(): number {\r\n        return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\r\n    }\r\n\r\n    /**\r\n     * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\r\n     * @param otherColor defines the second operand\r\n     * @returns the new Color3 object\r\n     */\r\n    public multiply(otherColor: DeepImmutable<Color3>): Color3 {\r\n        return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\r\n    }\r\n\r\n    /**\r\n     * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines the Color3 object where to store the result\r\n     * @returns the current Color3\r\n     */\r\n    public multiplyToRef(otherColor: DeepImmutable<Color3>, result: Color3): Color3 {\r\n        result.r = this.r * otherColor.r;\r\n        result.g = this.g * otherColor.g;\r\n        result.b = this.b * otherColor.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between Color3 objects\r\n     * @param otherColor defines the second operand\r\n     * @returns true if the rgb values are equal to the given ones\r\n     */\r\n    public equals(otherColor: DeepImmutable<Color3>): boolean {\r\n        return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between the current Color3 object and a set of r,b,g values\r\n     * @param r defines the red component to check\r\n     * @param g defines the green component to check\r\n     * @param b defines the blue component to check\r\n     * @returns true if the rgb values are equal to the given ones\r\n     */\r\n    public equalsFloats(r: number, g: number, b: number): boolean {\r\n        return this.r === r && this.g === g && this.b === b;\r\n    }\r\n\r\n    /**\r\n     * Multiplies in place each rgb value by scale\r\n     * @param scale defines the scaling factor\r\n     * @returns the updated Color3\r\n     */\r\n    public scale(scale: number): Color3 {\r\n        return new Color3(this.r * scale, this.g * scale, this.b * scale);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the rgb values by scale and stores the result into \"result\"\r\n     * @param scale defines the scaling factor\r\n     * @param result defines the Color3 object where to store the result\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public scaleToRef(scale: number, result: Color3): Color3 {\r\n        result.r = this.r * scale;\r\n        result.g = this.g * scale;\r\n        result.b = this.b * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current Color3 values by a factor and add the result to a given Color3\r\n     * @param scale defines the scale factor\r\n     * @param result defines color to store the result into\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public scaleAndAddToRef(scale: number, result: Color3): Color3 {\r\n        result.r += this.r * scale;\r\n        result.g += this.g * scale;\r\n        result.b += this.b * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clamps the rgb values by the min and max values and stores the result into \"result\"\r\n     * @param min defines minimum clamping value (default is 0)\r\n     * @param max defines maximum clamping value (default is 1)\r\n     * @param result defines color to store the result into\r\n     * @returns the original Color3\r\n     */\r\n    public clampToRef(min: number = 0, max: number = 1, result: Color3): Color3 {\r\n        result.r = Scalar.Clamp(this.r, min, max);\r\n        result.g = Scalar.Clamp(this.g, min, max);\r\n        result.b = Scalar.Clamp(this.b, min, max);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 set with the added values of the current Color3 and of the given one\r\n     * @param otherColor defines the second operand\r\n     * @returns the new Color3\r\n     */\r\n    public add(otherColor: DeepImmutable<Color3>): Color3 {\r\n        return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\r\n    }\r\n\r\n    /**\r\n     * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines Color3 object to store the result into\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public addToRef(otherColor: DeepImmutable<Color3>, result: Color3): Color3 {\r\n        result.r = this.r + otherColor.r;\r\n        result.g = this.g + otherColor.g;\r\n        result.b = this.b + otherColor.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color3 set with the subtracted values of the given one from the current Color3\r\n     * @param otherColor defines the second operand\r\n     * @returns the new Color3\r\n     */\r\n    public subtract(otherColor: DeepImmutable<Color3>): Color3 {\r\n        return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\r\n    }\r\n\r\n    /**\r\n     * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines Color3 object to store the result into\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public subtractToRef(otherColor: DeepImmutable<Color3>, result: Color3): Color3 {\r\n        result.r = this.r - otherColor.r;\r\n        result.g = this.g - otherColor.g;\r\n        result.b = this.b - otherColor.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copy the current object\r\n     * @returns a new Color3 copied the current one\r\n     */\r\n    public clone(): Color3 {\r\n        return new Color3(this.r, this.g, this.b);\r\n    }\r\n\r\n    /**\r\n     * Copies the rgb values from the source in the current Color3\r\n     * @param source defines the source Color3 object\r\n     * @returns the updated Color3 object\r\n     */\r\n    public copyFrom(source: DeepImmutable<Color3>): Color3 {\r\n        this.r = source.r;\r\n        this.g = source.g;\r\n        this.b = source.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the Color3 rgb values from the given floats\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @returns the current Color3 object\r\n     */\r\n    public copyFromFloats(r: number, g: number, b: number): Color3 {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the Color3 rgb values from the given floats\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @returns the current Color3 object\r\n     */\r\n    public set(r: number, g: number, b: number): Color3 {\r\n        return this.copyFromFloats(r, g, b);\r\n    }\r\n\r\n    /**\r\n     * Compute the Color3 hexadecimal code as a string\r\n     * @returns a string containing the hexadecimal representation of the Color3 object\r\n     */\r\n    public toHexString(): string {\r\n        var intR = (this.r * 255) | 0;\r\n        var intG = (this.g * 255) | 0;\r\n        var intB = (this.b * 255) | 0;\r\n        return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB);\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color3 converted from the current one to linear space\r\n     * @returns a new Color3 object\r\n     */\r\n    public toLinearSpace(): Color3 {\r\n        var convertedColor = new Color3();\r\n        this.toLinearSpaceToRef(convertedColor);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts current color in rgb space to HSV values\r\n     * @returns a new color3 representing the HSV values\r\n     */\r\n    public toHSV(): Color3 {\r\n        let result = new Color3();\r\n\r\n        this.toHSVToRef(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Converts current color in rgb space to HSV values\r\n     * @param result defines the Color3 where to store the HSV values\r\n     */\r\n    public toHSVToRef(result: Color3) {\r\n        var r = this.r;\r\n        var g = this.g;\r\n        var b = this.b;\r\n\r\n        var max = Math.max(r, g, b);\r\n        var min = Math.min(r, g, b);\r\n        var h = 0;\r\n        var s = 0;\r\n        var v = max;\r\n\r\n        var dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color3 object where to store the linear space version\r\n     * @returns the unmodified Color3\r\n     */\r\n    public toLinearSpaceToRef(convertedColor: Color3): Color3 {\r\n        convertedColor.r = Math.pow(this.r, ToLinearSpace);\r\n        convertedColor.g = Math.pow(this.g, ToLinearSpace);\r\n        convertedColor.b = Math.pow(this.b, ToLinearSpace);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color3 converted from the current one to gamma space\r\n     * @returns a new Color3 object\r\n     */\r\n    public toGammaSpace(): Color3 {\r\n        var convertedColor = new Color3();\r\n        this.toGammaSpaceToRef(convertedColor);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color3 object where to store the gamma space version\r\n     * @returns the unmodified Color3\r\n     */\r\n    public toGammaSpaceToRef(convertedColor: Color3): Color3 {\r\n        convertedColor.r = Math.pow(this.r, ToGammaSpace);\r\n        convertedColor.g = Math.pow(this.g, ToGammaSpace);\r\n        convertedColor.b = Math.pow(this.b, ToGammaSpace);\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n\r\n    private static _BlackReadOnly = Color3.Black() as DeepImmutable<Color3>;\r\n\r\n    /**\r\n     * Convert Hue, saturation and value to a Color3 (RGB)\r\n     * @param hue defines the hue\r\n     * @param saturation defines the saturation\r\n     * @param value defines the value\r\n     * @param result defines the Color3 where to store the RGB values\r\n     */\r\n    public static HSVtoRGBToRef(hue: number, saturation: number, value: number, result: Color3) {\r\n        var chroma = value * saturation;\r\n        var h = hue / 60;\r\n        var x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        var r = 0;\r\n        var g = 0;\r\n        var b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        var m = value - chroma;\r\n        result.set((r + m), (g + m), (b + m));\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from the string containing valid hexadecimal values\r\n     * @param hex defines a string containing valid hexadecimal values\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromHexString(hex: string): Color3 {\r\n        if (hex.substring(0, 1) !== \"#\" || hex.length !== 7) {\r\n            return new Color3(0, 0, 0);\r\n        }\r\n\r\n        var r = parseInt(hex.substring(1, 3), 16);\r\n        var g = parseInt(hex.substring(3, 5), 16);\r\n        var b = parseInt(hex.substring(5, 7), 16);\r\n\r\n        return Color3.FromInts(r, g, b);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from the starting index of the given array\r\n     * @param array defines the source array\r\n     * @param offset defines an offset in the source array\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Color3 {\r\n        return new Color3(array[offset], array[offset + 1], array[offset + 2]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from the starting index element of the given array\r\n     * @param array defines the source array to read from\r\n     * @param offset defines the offset in the source array\r\n     * @param result defines the target Color3 object\r\n     */\r\n    public static FromArrayToRef(array: DeepImmutable<ArrayLike<number>>, offset: number = 0, result: Color3) {\r\n        result.r = array[offset];\r\n        result.g = array[offset + 1];\r\n        result.b = array[offset + 2];\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from integer values (< 256)\r\n     * @param r defines the red component to read from (value between 0 and 255)\r\n     * @param g defines the green component to read from (value between 0 and 255)\r\n     * @param b defines the blue component to read from (value between 0 and 255)\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromInts(r: number, g: number, b: number): Color3 {\r\n        return new Color3(r / 255.0, g / 255.0, b / 255.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\r\n     * @param start defines the start Color3 value\r\n     * @param end defines the end Color3 value\r\n     * @param amount defines the gradient value between start and end\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Lerp(start: DeepImmutable<Color3>, end: DeepImmutable<Color3>, amount: number): Color3 {\r\n        var result = new Color3(0.0, 0.0, 0.0);\r\n        Color3.LerpToRef(start, end, amount, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\r\n     * @param left defines the start value\r\n     * @param right defines the end value\r\n     * @param amount defines the gradient factor\r\n     * @param result defines the Color3 object where to store the result\r\n     */\r\n    public static LerpToRef(left: DeepImmutable<Color3>, right: DeepImmutable<Color3>, amount: number, result: Color3): void {\r\n        result.r = left.r + ((right.r - left.r) * amount);\r\n        result.g = left.g + ((right.g - left.g) * amount);\r\n        result.b = left.b + ((right.b - left.b) * amount);\r\n    }\r\n\r\n    /**\r\n     * Returns a Color3 value containing a red color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Red(): Color3 { return new Color3(1, 0, 0); }\r\n    /**\r\n     * Returns a Color3 value containing a green color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Green(): Color3 { return new Color3(0, 1, 0); }\r\n    /**\r\n     * Returns a Color3 value containing a blue color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Blue(): Color3 { return new Color3(0, 0, 1); }\r\n    /**\r\n     * Returns a Color3 value containing a black color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Black(): Color3 { return new Color3(0, 0, 0); }\r\n\r\n    /**\r\n      * Gets a Color3 value containing a black color that must not be updated\r\n      */\r\n    public static get BlackReadOnly(): DeepImmutable<Color3> {\r\n        return Color3._BlackReadOnly;\r\n    }\r\n\r\n    /**\r\n     * Returns a Color3 value containing a white color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static White(): Color3 { return new Color3(1, 1, 1); }\r\n    /**\r\n     * Returns a Color3 value containing a purple color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Purple(): Color3 { return new Color3(0.5, 0, 0.5); }\r\n    /**\r\n     * Returns a Color3 value containing a magenta color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Magenta(): Color3 { return new Color3(1, 0, 1); }\r\n    /**\r\n     * Returns a Color3 value containing a yellow color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Yellow(): Color3 { return new Color3(1, 1, 0); }\r\n    /**\r\n     * Returns a Color3 value containing a gray color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Gray(): Color3 { return new Color3(0.5, 0.5, 0.5); }\r\n    /**\r\n     * Returns a Color3 value containing a teal color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Teal(): Color3 { return new Color3(0, 1.0, 1.0); }\r\n    /**\r\n     * Returns a Color3 value containing a random color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Random(): Color3 { return new Color3(Math.random(), Math.random(), Math.random()); }\r\n}\r\n\r\n/**\r\n * Class used to hold a RBGA color\r\n */\r\nexport class Color4 {\r\n    /**\r\n     * Creates a new Color4 object from red, green, blue values, all between 0 and 1\r\n     * @param r defines the red component (between 0 and 1, default is 0)\r\n     * @param g defines the green component (between 0 and 1, default is 0)\r\n     * @param b defines the blue component (between 0 and 1, default is 0)\r\n     * @param a defines the alpha component (between 0 and 1, default is 1)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the red component (between 0 and 1, default is 0)\r\n         */\r\n        public r: number = 0,\r\n        /**\r\n         * Defines the green component (between 0 and 1, default is 0)\r\n         */\r\n        public g: number = 0,\r\n        /**\r\n         * Defines the blue component (between 0 and 1, default is 0)\r\n         */\r\n        public b: number = 0,\r\n        /**\r\n         * Defines the alpha component (between 0 and 1, default is 1)\r\n         */\r\n        public a: number = 1) {\r\n    }\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Adds in place the given Color4 values to the current Color4 object\r\n     * @param right defines the second operand\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public addInPlace(right: DeepImmutable<Color4>): Color4 {\r\n        this.r += right.r;\r\n        this.g += right.g;\r\n        this.b += right.b;\r\n        this.a += right.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\r\n     * @returns the new array\r\n     */\r\n    public asArray(): number[] {\r\n        var result = new Array<number>();\r\n        this.toArray(result, 0);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Stores from the starting index in the given array the Color4 successive values\r\n     * @param array defines the array where to store the r,g,b components\r\n     * @param index defines an optional index in the target array to define where to start storing values\r\n     * @returns the current Color4 object\r\n     */\r\n    public toArray(array: number[], index: number = 0): Color4 {\r\n        array[index] = this.r;\r\n        array[index + 1] = this.g;\r\n        array[index + 2] = this.b;\r\n        array[index + 3] = this.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update the current color with values stored in an array from the starting index of the given array\r\n     * @param array defines the source array\r\n     * @param offset defines an offset in the source array\r\n     * @returns the current Color4 object\r\n     */\r\n    public fromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Color4 {\r\n        Color4.FromArrayToRef(array, offset, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between Color4 objects\r\n     * @param otherColor defines the second operand\r\n     * @returns true if the rgba values are equal to the given ones\r\n     */\r\n    public equals(otherColor: DeepImmutable<Color4>): boolean {\r\n        return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b && this.a === otherColor.a;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 set with the added values of the current Color4 and of the given one\r\n     * @param right defines the second operand\r\n     * @returns a new Color4 object\r\n     */\r\n    public add(right: DeepImmutable<Color4>): Color4 {\r\n        return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 set with the subtracted values of the given one from the current Color4\r\n     * @param right defines the second operand\r\n     * @returns a new Color4 object\r\n     */\r\n    public subtract(right: DeepImmutable<Color4>): Color4 {\r\n        return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\r\n     * @param right defines the second operand\r\n     * @param result defines the Color4 object where to store the result\r\n     * @returns the current Color4 object\r\n     */\r\n    public subtractToRef(right: DeepImmutable<Color4>, result: Color4): Color4 {\r\n        result.r = this.r - right.r;\r\n        result.g = this.g - right.g;\r\n        result.b = this.b - right.b;\r\n        result.a = this.a - right.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 with the current Color4 values multiplied by scale\r\n     * @param scale defines the scaling factor to apply\r\n     * @returns a new Color4 object\r\n     */\r\n    public scale(scale: number): Color4 {\r\n        return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current Color4 values by scale and stores the result in \"result\"\r\n     * @param scale defines the scaling factor to apply\r\n     * @param result defines the Color4 object where to store the result\r\n     * @returns the current unmodified Color4\r\n     */\r\n    public scaleToRef(scale: number, result: Color4): Color4 {\r\n        result.r = this.r * scale;\r\n        result.g = this.g * scale;\r\n        result.b = this.b * scale;\r\n        result.a = this.a * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current Color4 values by a factor and add the result to a given Color4\r\n     * @param scale defines the scale factor\r\n     * @param result defines the Color4 object where to store the result\r\n     * @returns the unmodified current Color4\r\n     */\r\n    public scaleAndAddToRef(scale: number, result: Color4): Color4 {\r\n        result.r += this.r * scale;\r\n        result.g += this.g * scale;\r\n        result.b += this.b * scale;\r\n        result.a += this.a * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clamps the rgb values by the min and max values and stores the result into \"result\"\r\n     * @param min defines minimum clamping value (default is 0)\r\n     * @param max defines maximum clamping value (default is 1)\r\n     * @param result defines color to store the result into.\r\n     * @returns the cuurent Color4\r\n     */\r\n    public clampToRef(min: number = 0, max: number = 1, result: Color4): Color4 {\r\n        result.r = Scalar.Clamp(this.r, min, max);\r\n        result.g = Scalar.Clamp(this.g, min, max);\r\n        result.b = Scalar.Clamp(this.b, min, max);\r\n        result.a = Scalar.Clamp(this.a, min, max);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n      * Multipy an Color4 value by another and return a new Color4 object\r\n      * @param color defines the Color4 value to multiply by\r\n      * @returns a new Color4 object\r\n      */\r\n    public multiply(color: Color4): Color4 {\r\n        return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\r\n    }\r\n\r\n    /**\r\n     * Multipy a Color4 value by another and push the result in a reference value\r\n     * @param color defines the Color4 value to multiply by\r\n     * @param result defines the Color4 to fill the result in\r\n     * @returns the result Color4\r\n     */\r\n    public multiplyToRef(color: Color4, result: Color4): Color4 {\r\n        result.r = this.r * color.r;\r\n        result.g = this.g * color.g;\r\n        result.b = this.b * color.b;\r\n        result.a = this.a * color.a;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a string with the Color4 current values\r\n     * @returns the string representation of the Color4 object\r\n     */\r\n    public toString(): string {\r\n        return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \" A:\" + this.a + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"Color4\"\r\n     * @returns \"Color4\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Color4\";\r\n    }\r\n\r\n    /**\r\n     * Compute the Color4 hash code\r\n     * @returns an unique number that can be used to hash Color4 objects\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = (this.r * 255) | 0;\r\n        hash = (hash * 397) ^ ((this.g * 255) | 0);\r\n        hash = (hash * 397) ^ ((this.b * 255) | 0);\r\n        hash = (hash * 397) ^ ((this.a * 255) | 0);\r\n        return hash;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 copied from the current one\r\n     * @returns a new Color4 object\r\n     */\r\n    public clone(): Color4 {\r\n        return new Color4(this.r, this.g, this.b, this.a);\r\n    }\r\n\r\n    /**\r\n     * Copies the given Color4 values into the current one\r\n     * @param source defines the source Color4 object\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public copyFrom(source: Color4): Color4 {\r\n        this.r = source.r;\r\n        this.g = source.g;\r\n        this.b = source.b;\r\n        this.a = source.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given float values into the current one\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @param a defines the alpha component to read from\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public copyFromFloats(r: number, g: number, b: number, a: number): Color4 {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given float values into the current one\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @param a defines the alpha component to read from\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public set(r: number, g: number, b: number, a: number): Color4 {\r\n        return this.copyFromFloats(r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * Compute the Color4 hexadecimal code as a string\r\n     * @param returnAsColor3 defines if the string should only contains RGB values (off by default)\r\n     * @returns a string containing the hexadecimal representation of the Color4 object\r\n     */\r\n    public toHexString(returnAsColor3 = false): string {\r\n        var intR = (this.r * 255) | 0;\r\n        var intG = (this.g * 255) | 0;\r\n        var intB = (this.b * 255) | 0;\r\n\r\n        if (returnAsColor3) {\r\n            return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB);\r\n        }\r\n\r\n        var intA = (this.a * 255) | 0;\r\n        return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB) + Scalar.ToHex(intA);\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color4 converted from the current one to linear space\r\n     * @returns a new Color4 object\r\n     */\r\n    public toLinearSpace(): Color4 {\r\n        var convertedColor = new Color4();\r\n        this.toLinearSpaceToRef(convertedColor);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color4 object where to store the linear space version\r\n     * @returns the unmodified Color4\r\n     */\r\n    public toLinearSpaceToRef(convertedColor: Color4): Color4 {\r\n        convertedColor.r = Math.pow(this.r, ToLinearSpace);\r\n        convertedColor.g = Math.pow(this.g, ToLinearSpace);\r\n        convertedColor.b = Math.pow(this.b, ToLinearSpace);\r\n        convertedColor.a = this.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color4 converted from the current one to gamma space\r\n     * @returns a new Color4 object\r\n     */\r\n    public toGammaSpace(): Color4 {\r\n        var convertedColor = new Color4();\r\n        this.toGammaSpaceToRef(convertedColor);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color4 object where to store the gamma space version\r\n     * @returns the unmodified Color4\r\n     */\r\n    public toGammaSpaceToRef(convertedColor: Color4): Color4 {\r\n        convertedColor.r = Math.pow(this.r, ToGammaSpace);\r\n        convertedColor.g = Math.pow(this.g, ToGammaSpace);\r\n        convertedColor.b = Math.pow(this.b, ToGammaSpace);\r\n        convertedColor.a = this.a;\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new Color4 from the string containing valid hexadecimal values\r\n     * @param hex defines a string containing valid hexadecimal values\r\n     * @returns a new Color4 object\r\n     */\r\n    public static FromHexString(hex: string): Color4 {\r\n        if (hex.substring(0, 1) !== \"#\" || hex.length !== 9) {\r\n            return new Color4(0.0, 0.0, 0.0, 0.0);\r\n        }\r\n\r\n        var r = parseInt(hex.substring(1, 3), 16);\r\n        var g = parseInt(hex.substring(3, 5), 16);\r\n        var b = parseInt(hex.substring(5, 7), 16);\r\n        var a = parseInt(hex.substring(7, 9), 16);\r\n\r\n        return Color4.FromInts(r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\r\n     * @param left defines the start value\r\n     * @param right defines the end value\r\n     * @param amount defines the gradient factor\r\n     * @returns a new Color4 object\r\n     */\r\n    public static Lerp(left: DeepImmutable<Color4>, right: DeepImmutable<Color4>, amount: number): Color4 {\r\n        var result = new Color4(0.0, 0.0, 0.0, 0.0);\r\n        Color4.LerpToRef(left, right, amount, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\r\n     * @param left defines the start value\r\n     * @param right defines the end value\r\n     * @param amount defines the gradient factor\r\n     * @param result defines the Color4 object where to store data\r\n     */\r\n    public static LerpToRef(left: DeepImmutable<Color4>, right: DeepImmutable<Color4>, amount: number, result: Color4): void {\r\n        result.r = left.r + (right.r - left.r) * amount;\r\n        result.g = left.g + (right.g - left.g) * amount;\r\n        result.b = left.b + (right.b - left.b) * amount;\r\n        result.a = left.a + (right.a - left.a) * amount;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 from a Color3 and an alpha value\r\n     * @param color3 defines the source Color3 to read from\r\n     * @param alpha defines the alpha component (1.0 by default)\r\n     * @returns a new Color4 object\r\n     */\r\n    public static FromColor3(color3: DeepImmutable<Color3>, alpha: number = 1.0): Color4 {\r\n        return new Color4(color3.r, color3.g, color3.b, alpha);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 from the starting index element of the given array\r\n     * @param array defines the source array to read from\r\n     * @param offset defines the offset in the source array\r\n     * @returns a new Color4 object\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Color4 {\r\n        return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 from the starting index element of the given array\r\n     * @param array defines the source array to read from\r\n     * @param offset defines the offset in the source array\r\n     * @param result defines the target Color4 object\r\n     */\r\n    public static FromArrayToRef(array: DeepImmutable<ArrayLike<number>>, offset: number = 0, result: Color4) {\r\n        result.r = array[offset];\r\n        result.g = array[offset + 1];\r\n        result.b = array[offset + 2];\r\n        result.a = array[offset + 3];\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from integer values (< 256)\r\n     * @param r defines the red component to read from (value between 0 and 255)\r\n     * @param g defines the green component to read from (value between 0 and 255)\r\n     * @param b defines the blue component to read from (value between 0 and 255)\r\n     * @param a defines the alpha component to read from (value between 0 and 255)\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromInts(r: number, g: number, b: number, a: number): Color4 {\r\n        return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\r\n    }\r\n\r\n    /**\r\n     * Check the content of a given array and convert it to an array containing RGBA data\r\n     * If the original array was already containing count * 4 values then it is returned directly\r\n     * @param colors defines the array to check\r\n     * @param count defines the number of RGBA data to expect\r\n     * @returns an array containing count * 4 values (RGBA)\r\n     */\r\n    public static CheckColors4(colors: number[], count: number): number[] {\r\n        // Check if color3 was used\r\n        if (colors.length === count * 3) {\r\n            var colors4 = [];\r\n            for (var index = 0; index < colors.length; index += 3) {\r\n                var newIndex = (index / 3) * 4;\r\n                colors4[newIndex] = colors[index];\r\n                colors4[newIndex + 1] = colors[index + 1];\r\n                colors4[newIndex + 2] = colors[index + 2];\r\n                colors4[newIndex + 3] = 1.0;\r\n            }\r\n\r\n            return colors4;\r\n        }\r\n\r\n        return colors;\r\n    }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class TmpColors {\r\n    public static Color3: Color3[] = ArrayTools.BuildArray(3, Color3.Black);\r\n    public static Color4: Color4[] = ArrayTools.BuildArray(3, () => new Color4(0, 0, 0, 0));\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.Color3\"] = Color3;\r\n_TypeStore.RegisteredTypes[\"BABYLON.Color4\"] = Color4;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}