{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { WebVRController } from \"./webVRController\";\nimport { PoseEnabledControllerHelper } from \"./poseEnabledController\";\n/**\r\n * Generic Controller\r\n */\n\nvar GenericController =\n/** @class */\nfunction (_super) {\n  __extends(GenericController, _super);\n  /**\r\n   * Creates a new GenericController from a gamepad\r\n   * @param vrGamepad the gamepad that the controller should be created from\r\n   */\n\n\n  function GenericController(vrGamepad) {\n    return _super.call(this, vrGamepad) || this;\n  }\n  /**\r\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n   * @param scene scene in which to add meshes\r\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n   */\n\n\n  GenericController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    SceneLoader.ImportMesh(\"\", GenericController.MODEL_BASE_URL, GenericController.MODEL_FILENAME, scene, function (newMeshes) {\n      _this._defaultModel = newMeshes[1];\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n  /**\r\n   * Called once for each button that changed state since the last frame\r\n   * @param buttonIdx Which button index changed\r\n   * @param state New state of the button\r\n   * @param changes Which properties on the state changed since last frame\r\n   */\n\n\n  GenericController.prototype._handleButtonChange = function (buttonIdx, state, changes) {\n    console.log(\"Button id: \" + buttonIdx + \"state: \");\n    console.dir(state);\n  };\n  /**\r\n   * Base Url for the controller model.\r\n   */\n\n\n  GenericController.MODEL_BASE_URL = 'https://controllers.babylonjs.com/generic/';\n  /**\r\n   * File name for the controller model.\r\n   */\n\n  GenericController.MODEL_FILENAME = 'generic.babylon';\n  return GenericController;\n}(WebVRController);\n\nexport { GenericController };\n\nPoseEnabledControllerHelper._DefaultControllerFactory = function (gamepadInfo) {\n  return new GenericController(gamepadInfo);\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Gamepads/Controllers/genericController.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAA4B,2BAA5B;AAEA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAgC,2BAAhC,QAAmE,yBAAnE;AAGA;;;;AAGA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;AAUnC;;;;;;AAIA,WAAA,iBAAA,CAAY,SAAZ,EAA0B;WACtB,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,KAAgB,I;AACnB;AAED;;;;;;;AAKO,EAAA,iBAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,KAA1B,EAAwC,UAAxC,EAAiF;AAAjF,QAAA,KAAA,GAAA,IAAA;;AACI,IAAA,WAAW,CAAC,UAAZ,CAAuB,EAAvB,EAA2B,iBAAiB,CAAC,cAA7C,EAA6D,iBAAiB,CAAC,cAA/E,EAA+F,KAA/F,EAAsG,UAAC,SAAD,EAAU;AAC5G,MAAA,KAAI,CAAC,aAAL,GAAqB,SAAS,CAAC,CAAD,CAA9B;;AACA,MAAA,KAAI,CAAC,YAAL,CAAkB,KAAI,CAAC,aAAvB;;AACA,UAAI,UAAJ,EAAgB;AACZ,QAAA,UAAU,CAAC,KAAI,CAAC,aAAN,CAAV;AACH;AACJ,KAND;AAOH,GARM;AAUP;;;;;;;;AAMU,EAAA,iBAAA,CAAA,SAAA,CAAA,mBAAA,GAAV,UAA8B,SAA9B,EAAiD,KAAjD,EAA+E,OAA/E,EAA4G;AACxG,IAAA,OAAO,CAAC,GAAR,CAAY,gBAAgB,SAAhB,GAA4B,SAAxC;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,KAAZ;AACH,GAHS;AAtCV;;;;;AAGuB,EAAA,iBAAA,CAAA,cAAA,GAAyB,4CAAzB;AACvB;;;;AAGuB,EAAA,iBAAA,CAAA,cAAA,GAAyB,iBAAzB;AAmC3B,SAAA,iBAAA;AAAC,CA3CD,CAAuC,eAAvC,CAAA;;SAAa,iB;;AA6Cb,2BAA2B,CAAC,yBAA5B,GAAwD,UAAC,WAAD,EAAiB;AAAK,SAAA,IAAI,iBAAJ,CAAA,WAAA,CAAA;AAAkC,CAAhH","sourcesContent":["import { Scene } from \"../../scene\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\n\r\nimport { WebVRController } from \"./webVRController\";\r\nimport { ExtendedGamepadButton, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\nimport { GamepadButtonChanges } from \"../../Gamepads/gamepad\";\r\n\r\n/**\r\n * Generic Controller\r\n */\r\nexport class GenericController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static readonly MODEL_BASE_URL: string = 'https://controllers.babylonjs.com/generic/';\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static readonly MODEL_FILENAME: string = 'generic.babylon';\r\n\r\n    /**\r\n     * Creates a new GenericController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", GenericController.MODEL_BASE_URL, GenericController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            this._defaultModel = newMeshes[1];\r\n            this.attachToMesh(this._defaultModel);\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     * @param changes Which properties on the state changed since last frame\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton, changes: GamepadButtonChanges) {\r\n        console.log(\"Button id: \" + buttonIdx + \"state: \");\r\n        console.dir(state);\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._DefaultControllerFactory = (gamepadInfo: any) => new GenericController(gamepadInfo);\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}