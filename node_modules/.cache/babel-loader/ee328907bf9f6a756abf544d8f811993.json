{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * Gather the list of keyboard event types as constants.\r\n */\n\nvar KeyboardEventTypes =\n/** @class */\nfunction () {\n  function KeyboardEventTypes() {}\n  /**\r\n   * The keydown event is fired when a key becomes active (pressed).\r\n   */\n\n\n  KeyboardEventTypes.KEYDOWN = 0x01;\n  /**\r\n   * The keyup event is fired when a key has been released.\r\n   */\n\n  KeyboardEventTypes.KEYUP = 0x02;\n  return KeyboardEventTypes;\n}();\n\nexport { KeyboardEventTypes };\n/**\r\n * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n */\n\nvar KeyboardInfo =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new keyboard info.\r\n   * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n   * @param type Defines the type of event (KeyboardEventTypes)\r\n   * @param event Defines the related dom event\r\n   */\n  function KeyboardInfo(\n  /**\r\n   * Defines the type of event (KeyboardEventTypes)\r\n   */\n  type,\n  /**\r\n   * Defines the related dom event\r\n   */\n  event) {\n    this.type = type;\n    this.event = event;\n  }\n\n  return KeyboardInfo;\n}();\n\nexport { KeyboardInfo };\n/**\r\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\r\n */\n\nvar KeyboardInfoPre =\n/** @class */\nfunction (_super) {\n  __extends(KeyboardInfoPre, _super);\n  /**\r\n   * Instantiates a new keyboard pre info.\r\n   * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n   * @param type Defines the type of event (KeyboardEventTypes)\r\n   * @param event Defines the related dom event\r\n   */\n\n\n  function KeyboardInfoPre(\n  /**\r\n   * Defines the type of event (KeyboardEventTypes)\r\n   */\n  type,\n  /**\r\n   * Defines the related dom event\r\n   */\n  event) {\n    var _this = _super.call(this, type, event) || this;\n\n    _this.type = type;\n    _this.event = event;\n    _this.skipOnPointerObservable = false;\n    return _this;\n  }\n\n  return KeyboardInfoPre;\n}(KeyboardInfo);\n\nexport { KeyboardInfoPre };","map":{"version":3,"sources":["../../../sourceES6/core/Events/keyboardEvents.ts"],"names":[],"mappings":";AAAA;;;;AAGA,IAAA,kBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,kBAAA,GAAA,CASC;AARG;;;;;AAGuB,EAAA,kBAAA,CAAA,OAAA,GAAU,IAAV;AACvB;;;;AAGuB,EAAA,kBAAA,CAAA,KAAA,GAAQ,IAAR;AAC3B,SAAA,kBAAA;AAAC,CATD,EAAA;;SAAa,kB;AAWb;;;;AAGA,IAAA,YAAA;AAAA;AAAA,YAAA;AACI;;;;;;AAMA,WAAA,YAAA;AACI;;;AAGO,EAAA,IAJX;AAKI;;;AAGO,EAAA,KARX,EAQ+B;AAJpB,SAAA,IAAA,GAAA,IAAA;AAIA,SAAA,KAAA,GAAA,KAAA;AACV;;AACL,SAAA,YAAA;AAAC,CAjBD,EAAA;;;AAmBA;;;;;AAIA,IAAA,eAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqC,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;AAMjC;;;;;;;;AAMA,WAAA,eAAA;AACI;;;AAGO,EAAA,IAJX;AAKI;;;AAGO,EAAA,KARX,EAQ+B;AAR/B,QAAA,KAAA,GASI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,KAAZ,KAAkB,IATtB;;AAIW,IAAA,KAAA,CAAA,IAAA,GAAA,IAAA;AAIA,IAAA,KAAA,CAAA,KAAA,GAAA,KAAA;AAEP,IAAA,KAAI,CAAC,uBAAL,GAA+B,KAA/B;;AACH;;AACL,SAAA,eAAA;AAAC,CAxBD,CAAqC,YAArC,CAAA","sourcesContent":["/**\r\n * Gather the list of keyboard event types as constants.\r\n */\r\nexport class KeyboardEventTypes {\r\n    /**\r\n     * The keydown event is fired when a key becomes active (pressed).\r\n     */\r\n    public static readonly KEYDOWN = 0x01;\r\n    /**\r\n     * The keyup event is fired when a key has been released.\r\n     */\r\n    public static readonly KEYUP = 0x02;\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n */\r\nexport class KeyboardInfo {\r\n    /**\r\n     * Instantiates a new keyboard info.\r\n     * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: KeyboardEvent) {\r\n    }\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\r\n */\r\nexport class KeyboardInfoPre extends KeyboardInfo {\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     */\r\n    public skipOnPointerObservable: boolean;\r\n\r\n    /**\r\n     * Instantiates a new keyboard pre info.\r\n     * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: KeyboardEvent) {\r\n        super(type, event);\r\n        this.skipOnPointerObservable = false;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}