{"ast":null,"code":"import { EnvironmentTextureTools } from \"../../../Misc/environmentTextureTools\";\nimport { Engine } from \"../../../Engines/engine\";\nimport { StringTools } from '../../../Misc/stringTools';\n/**\r\n * Implementation of the ENV Texture Loader.\r\n * @hidden\r\n */\n\nvar _ENVTextureLoader =\n/** @class */\nfunction () {\n  function _ENVTextureLoader() {\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\n    this.supportCascades = false;\n  }\n  /**\r\n   * This returns if the loader support the current file information.\r\n   * @param extension defines the file extension of the file being loaded\r\n   * @returns true if the loader can load the specified file\r\n   */\n\n\n  _ENVTextureLoader.prototype.canLoad = function (extension) {\n    return StringTools.EndsWith(extension, \".env\");\n  };\n  /**\r\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param createPolynomials will be true if polynomials have been requested\r\n   * @param onLoad defines the callback to trigger once the texture is ready\r\n   * @param onError defines the callback to trigger in case of error\r\n   */\n\n\n  _ENVTextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {\n    if (Array.isArray(data)) {\n      return;\n    }\n\n    var info = EnvironmentTextureTools.GetEnvInfo(data);\n\n    if (info) {\n      texture.width = info.width;\n      texture.height = info.width;\n      EnvironmentTextureTools.UploadEnvSpherical(texture, info);\n      EnvironmentTextureTools.UploadEnvLevelsAsync(texture, data, info).then(function () {\n        texture.isReady = true;\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n\n        if (onLoad) {\n          onLoad();\n        }\n      });\n    } else if (onError) {\n      onError(\"Can not parse the environment file\", null);\n    }\n  };\n  /**\r\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param callback defines the method to call once ready to upload\r\n   */\n\n\n  _ENVTextureLoader.prototype.loadData = function (data, texture, callback) {\n    throw \".env not supported in 2d.\";\n  };\n\n  return _ENVTextureLoader;\n}();\n\nexport { _ENVTextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.push(new _ENVTextureLoader());","map":{"version":3,"sources":["../../../../../sourceES6/core/Materials/Textures/Loaders/envTextureLoader.ts"],"names":[],"mappings":"AAAA,SAAS,uBAAT,QAAwC,uCAAxC;AAEA,SAAS,MAAT,QAAuB,yBAAvB;AAGA,SAAS,WAAT,QAA4B,2BAA5B;AAEA;;;;;AAIA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA;AACI;;;AAGgB,SAAA,eAAA,GAAkB,KAAlB;AAsDnB;AApDG;;;;;;;AAKO,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,SAAf,EAAgC;AAC5B,WAAO,WAAW,CAAC,QAAZ,CAAqB,SAArB,EAAgC,MAAhC,CAAP;AACH,GAFM;AAIP;;;;;;;;;;AAQO,EAAA,iBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,IAApB,EAA+D,OAA/D,EAAyF,iBAAzF,EAAqH,MAArH,EAA6J,OAA7J,EAA2N;AACvN,QAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACrB;AACH;;AAED,QAAI,IAAI,GAAG,uBAAuB,CAAC,UAAxB,CAAmC,IAAnC,CAAX;;AACA,QAAI,IAAJ,EAAU;AACN,MAAA,OAAO,CAAC,KAAR,GAAgB,IAAI,CAAC,KAArB;AACA,MAAA,OAAO,CAAC,MAAR,GAAiB,IAAI,CAAC,KAAtB;AAEA,MAAA,uBAAuB,CAAC,kBAAxB,CAA2C,OAA3C,EAAoD,IAApD;AACA,MAAA,uBAAuB,CAAC,oBAAxB,CAA6C,OAA7C,EAAsD,IAAtD,EAA4D,IAA5D,EAAkE,IAAlE,CAAuE,YAAA;AACnE,QAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB;AACA,QAAA,OAAO,CAAC,kBAAR,CAA2B,eAA3B,CAA2C,OAA3C;AACA,QAAA,OAAO,CAAC,kBAAR,CAA2B,KAA3B;;AACA,YAAI,MAAJ,EAAY;AACR,UAAA,MAAM;AACT;AACJ,OAPD;AAQH,KAbD,MAcK,IAAI,OAAJ,EAAa;AACd,MAAA,OAAO,CAAC,oCAAD,EAAuC,IAAvC,CAAP;AACH;AACJ,GAvBM;AAyBP;;;;;;;;AAMO,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAAuC,OAAvC,EACI,QADJ,EACmH;AAC/G,UAAM,2BAAN;AACH,GAHM;;AAIX,SAAA,iBAAA;AAAC,CA1DD,EAAA;;8BA4DA;;AACA,MAAM,CAAC,eAAP,CAAuB,IAAvB,CAA4B,IAAI,iBAAJ,EAA5B","sourcesContent":["import { EnvironmentTextureTools } from \"../../../Misc/environmentTextureTools\";\r\nimport { Nullable } from \"../../../types\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { StringTools } from '../../../Misc/stringTools';\r\n\r\n/**\r\n * Implementation of the ENV Texture Loader.\r\n * @hidden\r\n */\r\nexport class _ENVTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string): boolean {\r\n        return StringTools.EndsWith(extension, \".env\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    public loadCubeData(data: ArrayBufferView | ArrayBufferView[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>, onError: Nullable<(message?: string, exception?: any) => void>): void {\r\n        if (Array.isArray(data)) {\r\n            return;\r\n        }\r\n\r\n        var info = EnvironmentTextureTools.GetEnvInfo(data);\r\n        if (info) {\r\n            texture.width = info.width;\r\n            texture.height = info.width;\r\n\r\n            EnvironmentTextureTools.UploadEnvSpherical(texture, info);\r\n            EnvironmentTextureTools.UploadEnvLevelsAsync(texture, data, info).then(() => {\r\n                texture.isReady = true;\r\n                texture.onLoadedObservable.notifyObservers(texture);\r\n                texture.onLoadedObservable.clear();\r\n                if (onLoad) {\r\n                    onLoad();\r\n                }\r\n            });\r\n        }\r\n        else if (onError) {\r\n            onError(\"Can not parse the environment file\", null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(data: ArrayBufferView, texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void): void {\r\n        throw \".env not supported in 2d.\";\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _ENVTextureLoader());\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}