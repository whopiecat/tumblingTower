{"ast":null,"code":"import { KhronosTextureContainer } from \"../../../Misc/khronosTextureContainer\";\nimport { KhronosTextureContainer2 } from \"../../../Misc/khronosTextureContainer2\";\nimport { Engine } from \"../../../Engines/engine\";\nimport { StringTools } from '../../../Misc/stringTools';\nimport { Logger } from '../../../Misc/logger';\n/**\r\n * Implementation of the KTX Texture Loader.\r\n * @hidden\r\n */\n\nvar _KTXTextureLoader =\n/** @class */\nfunction () {\n  function _KTXTextureLoader() {\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\n    this.supportCascades = false;\n  }\n  /**\r\n   * This returns if the loader support the current file information.\r\n   * @param extension defines the file extension of the file being loaded\r\n   * @param mimeType defines the optional mime type of the file being loaded\r\n   * @returns true if the loader can load the specified file\r\n   */\n\n\n  _KTXTextureLoader.prototype.canLoad = function (extension, mimeType) {\n    // The \".ktx2\" file extension is still up for debate: https://github.com/KhronosGroup/KTX-Specification/issues/18\n    return StringTools.EndsWith(extension, \".ktx\") || StringTools.EndsWith(extension, \".ktx2\") || mimeType === \"image/ktx\" || mimeType === \"image/ktx2\";\n  };\n  /**\r\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param createPolynomials will be true if polynomials have been requested\r\n   * @param onLoad defines the callback to trigger once the texture is ready\r\n   * @param onError defines the callback to trigger in case of error\r\n   */\n\n\n  _KTXTextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {\n    if (Array.isArray(data)) {\n      return;\n    } // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n\n\n    texture._invertVScale = !texture.invertY;\n    var engine = texture.getEngine();\n    var ktx = new KhronosTextureContainer(data, 6);\n    var loadMipmap = ktx.numberOfMipmapLevels > 1 && texture.generateMipMaps;\n\n    engine._unpackFlipY(true);\n\n    ktx.uploadLevels(texture, texture.generateMipMaps);\n    texture.width = ktx.pixelWidth;\n    texture.height = ktx.pixelHeight;\n\n    engine._setCubeMapTextureParams(texture, loadMipmap);\n\n    texture.isReady = true;\n    texture.onLoadedObservable.notifyObservers(texture);\n    texture.onLoadedObservable.clear();\n\n    if (onLoad) {\n      onLoad();\n    }\n  };\n  /**\r\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param callback defines the method to call once ready to upload\r\n   */\n\n\n  _KTXTextureLoader.prototype.loadData = function (data, texture, callback, options) {\n    if (KhronosTextureContainer.IsValid(data)) {\n      // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n      texture._invertVScale = !texture.invertY;\n      var ktx_1 = new KhronosTextureContainer(data, 1);\n      callback(ktx_1.pixelWidth, ktx_1.pixelHeight, texture.generateMipMaps, true, function () {\n        ktx_1.uploadLevels(texture, texture.generateMipMaps);\n      }, ktx_1.isInvalid);\n    } else if (KhronosTextureContainer2.IsValid(data)) {\n      var ktx2 = new KhronosTextureContainer2(texture.getEngine());\n      ktx2.uploadAsync(data, texture, options).then(function () {\n        callback(texture.width, texture.height, texture.generateMipMaps, true, function () {}, false);\n      }, function (error) {\n        Logger.Warn(\"Failed to load KTX2 texture data: \" + error.message);\n        callback(0, 0, false, false, function () {}, true);\n      });\n    } else {\n      Logger.Error(\"texture missing KTX identifier\");\n      callback(0, 0, false, false, function () {}, true);\n    }\n  };\n\n  return _KTXTextureLoader;\n}();\n\nexport { _KTXTextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.unshift(new _KTXTextureLoader());","map":{"version":3,"sources":["../../../../../sourceES6/core/Materials/Textures/Loaders/ktxTextureLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { KhronosTextureContainer } from \"../../../Misc/khronosTextureContainer\";\r\nimport { KhronosTextureContainer2 } from \"../../../Misc/khronosTextureContainer2\";\r\nimport { Nullable } from \"../../../types\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { StringTools } from '../../../Misc/stringTools';\r\nimport { Logger } from '../../../Misc/logger';\r\n\r\n/**\r\n * Implementation of the KTX Texture Loader.\r\n * @hidden\r\n */\r\nexport class _KTXTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @param mimeType defines the optional mime type of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string, mimeType?: string): boolean {\r\n        // The \".ktx2\" file extension is still up for debate: https://github.com/KhronosGroup/KTX-Specification/issues/18\r\n        return StringTools.EndsWith(extension, \".ktx\") || StringTools.EndsWith(extension, \".ktx2\") || mimeType === \"image/ktx\" || mimeType === \"image/ktx2\";\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    public loadCubeData(data: ArrayBufferView | ArrayBufferView[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>, onError: Nullable<(message?: string, exception?: any) => void>): void {\r\n        if (Array.isArray(data)) {\r\n            return;\r\n        }\r\n\r\n        // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\r\n        texture._invertVScale = !texture.invertY;\r\n        var engine = texture.getEngine() as Engine;\r\n        var ktx = new KhronosTextureContainer(data, 6);\r\n\r\n        var loadMipmap = ktx.numberOfMipmapLevels > 1 && texture.generateMipMaps;\r\n\r\n        engine._unpackFlipY(true);\r\n\r\n        ktx.uploadLevels(texture, texture.generateMipMaps);\r\n\r\n        texture.width = ktx.pixelWidth;\r\n        texture.height = ktx.pixelHeight;\r\n\r\n        engine._setCubeMapTextureParams(texture, loadMipmap);\r\n        texture.isReady = true;\r\n        texture.onLoadedObservable.notifyObservers(texture);\r\n        texture.onLoadedObservable.clear();\r\n\r\n        if (onLoad) {\r\n            onLoad();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(data: ArrayBufferView, texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void, loadFailed: boolean) => void, options?: any): void {\r\n        if (KhronosTextureContainer.IsValid(data)) {\r\n            // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\r\n            texture._invertVScale = !texture.invertY;\r\n            const ktx = new KhronosTextureContainer(data, 1);\r\n            callback(ktx.pixelWidth, ktx.pixelHeight, texture.generateMipMaps, true, () => {\r\n                ktx.uploadLevels(texture, texture.generateMipMaps);\r\n            }, ktx.isInvalid);\r\n        }\r\n        else if (KhronosTextureContainer2.IsValid(data)) {\r\n            const ktx2 = new KhronosTextureContainer2(texture.getEngine());\r\n            ktx2.uploadAsync(data, texture, options).then(() => {\r\n                callback(texture.width, texture.height, texture.generateMipMaps, true, () => {}, false);\r\n            }, (error) => {\r\n                Logger.Warn(`Failed to load KTX2 texture data: ${error.message}`);\r\n                callback(0, 0, false, false, () => {}, true);\r\n            });\r\n        }\r\n        else {\r\n            Logger.Error(\"texture missing KTX identifier\");\r\n            callback(0, 0, false, false, () => {}, true);\r\n        }\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.unshift(new _KTXTextureLoader());\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}