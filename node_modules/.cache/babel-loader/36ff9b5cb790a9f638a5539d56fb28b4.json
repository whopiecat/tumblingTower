{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsVector3 } from \"../Misc/decorators\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\nimport { Light } from \"./light\";\nimport { Axis } from '../Maths/math.axis';\n/**\r\n * Base implementation IShadowLight\r\n * It groups all the common behaviour in order to reduce dupplication and better follow the DRY pattern.\r\n */\n\nvar ShadowLight =\n/** @class */\nfunction (_super) {\n  __extends(ShadowLight, _super);\n\n  function ShadowLight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._needProjectionMatrixCompute = true;\n    return _this;\n  }\n\n  ShadowLight.prototype._setPosition = function (value) {\n    this._position = value;\n  };\n\n  Object.defineProperty(ShadowLight.prototype, \"position\", {\n    /**\r\n     * Sets the position the shadow will be casted from. Also use as the light position for both\r\n     * point and spot lights.\r\n     */\n    get: function () {\n      return this._position;\n    },\n\n    /**\r\n     * Sets the position the shadow will be casted from. Also use as the light position for both\r\n     * point and spot lights.\r\n     */\n    set: function (value) {\n      this._setPosition(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ShadowLight.prototype._setDirection = function (value) {\n    this._direction = value;\n  };\n\n  Object.defineProperty(ShadowLight.prototype, \"direction\", {\n    /**\r\n     * In 2d mode (needCube being false), gets the direction used to cast the shadow.\r\n     * Also use as the light direction on spot and directional lights.\r\n     */\n    get: function () {\n      return this._direction;\n    },\n\n    /**\r\n     * In 2d mode (needCube being false), sets the direction used to cast the shadow.\r\n     * Also use as the light direction on spot and directional lights.\r\n     */\n    set: function (value) {\n      this._setDirection(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ShadowLight.prototype, \"shadowMinZ\", {\n    /**\r\n     * Gets the shadow projection clipping minimum z value.\r\n     */\n    get: function () {\n      return this._shadowMinZ;\n    },\n\n    /**\r\n     * Sets the shadow projection clipping minimum z value.\r\n     */\n    set: function (value) {\n      this._shadowMinZ = value;\n      this.forceProjectionMatrixCompute();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ShadowLight.prototype, \"shadowMaxZ\", {\n    /**\r\n     * Sets the shadow projection clipping maximum z value.\r\n     */\n    get: function () {\n      return this._shadowMaxZ;\n    },\n\n    /**\r\n     * Gets the shadow projection clipping maximum z value.\r\n     */\n    set: function (value) {\n      this._shadowMaxZ = value;\n      this.forceProjectionMatrixCompute();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Computes the transformed information (transformedPosition and transformedDirection in World space) of the current light\r\n   * @returns true if the information has been computed, false if it does not need to (no parenting)\r\n   */\n\n  ShadowLight.prototype.computeTransformedInformation = function () {\n    if (this.parent && this.parent.getWorldMatrix) {\n      if (!this.transformedPosition) {\n        this.transformedPosition = Vector3.Zero();\n      }\n\n      Vector3.TransformCoordinatesToRef(this.position, this.parent.getWorldMatrix(), this.transformedPosition); // In case the direction is present.\n\n      if (this.direction) {\n        if (!this.transformedDirection) {\n          this.transformedDirection = Vector3.Zero();\n        }\n\n        Vector3.TransformNormalToRef(this.direction, this.parent.getWorldMatrix(), this.transformedDirection);\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Return the depth scale used for the shadow map.\r\n   * @returns the depth scale.\r\n   */\n\n\n  ShadowLight.prototype.getDepthScale = function () {\n    return 50.0;\n  };\n  /**\r\n   * Get the direction to use to render the shadow map. In case of cube texture, the face index can be passed.\r\n   * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n   * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n   */\n\n\n  ShadowLight.prototype.getShadowDirection = function (faceIndex) {\n    return this.transformedDirection ? this.transformedDirection : this.direction;\n  };\n  /**\r\n   * Returns the ShadowLight absolute position in the World.\r\n   * @returns the position vector in world space\r\n   */\n\n\n  ShadowLight.prototype.getAbsolutePosition = function () {\n    return this.transformedPosition ? this.transformedPosition : this.position;\n  };\n  /**\r\n   * Sets the ShadowLight direction toward the passed target.\r\n   * @param target The point to target in local space\r\n   * @returns the updated ShadowLight direction\r\n   */\n\n\n  ShadowLight.prototype.setDirectionToTarget = function (target) {\n    this.direction = Vector3.Normalize(target.subtract(this.position));\n    return this.direction;\n  };\n  /**\r\n   * Returns the light rotation in euler definition.\r\n   * @returns the x y z rotation in local space.\r\n   */\n\n\n  ShadowLight.prototype.getRotation = function () {\n    this.direction.normalize();\n    var xaxis = Vector3.Cross(this.direction, Axis.Y);\n    var yaxis = Vector3.Cross(xaxis, this.direction);\n    return Vector3.RotationFromAxis(xaxis, yaxis, this.direction);\n  };\n  /**\r\n   * Returns whether or not the shadow generation require a cube texture or a 2d texture.\r\n   * @returns true if a cube texture needs to be use\r\n   */\n\n\n  ShadowLight.prototype.needCube = function () {\n    return false;\n  };\n  /**\r\n   * Detects if the projection matrix requires to be recomputed this frame.\r\n   * @returns true if it requires to be recomputed otherwise, false.\r\n   */\n\n\n  ShadowLight.prototype.needProjectionMatrixCompute = function () {\n    return this._needProjectionMatrixCompute;\n  };\n  /**\r\n   * Forces the shadow generator to recompute the projection matrix even if position and direction did not changed.\r\n   */\n\n\n  ShadowLight.prototype.forceProjectionMatrixCompute = function () {\n    this._needProjectionMatrixCompute = true;\n  };\n  /** @hidden */\n\n\n  ShadowLight.prototype._initCache = function () {\n    _super.prototype._initCache.call(this);\n\n    this._cache.position = Vector3.Zero();\n  };\n  /** @hidden */\n\n\n  ShadowLight.prototype._isSynchronized = function () {\n    if (!this._cache.position.equals(this.position)) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Computes the world matrix of the node\r\n   * @param force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n   * @returns the world matrix\r\n   */\n\n\n  ShadowLight.prototype.computeWorldMatrix = function (force) {\n    if (!force && this.isSynchronized()) {\n      this._currentRenderId = this.getScene().getRenderId();\n      return this._worldMatrix;\n    }\n\n    this._updateCache();\n\n    this._cache.position.copyFrom(this.position);\n\n    if (!this._worldMatrix) {\n      this._worldMatrix = Matrix.Identity();\n    }\n\n    Matrix.TranslationToRef(this.position.x, this.position.y, this.position.z, this._worldMatrix);\n\n    if (this.parent && this.parent.getWorldMatrix) {\n      this._worldMatrix.multiplyToRef(this.parent.getWorldMatrix(), this._worldMatrix);\n\n      this._markSyncedWithParent();\n    } // Cache the determinant\n\n\n    this._worldMatrixDeterminantIsDirty = true;\n    return this._worldMatrix;\n  };\n  /**\r\n   * Gets the minZ used for shadow according to both the scene and the light.\r\n   * @param activeCamera The camera we are returning the min for\r\n   * @returns the depth min z\r\n   */\n\n\n  ShadowLight.prototype.getDepthMinZ = function (activeCamera) {\n    return this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\n  };\n  /**\r\n   * Gets the maxZ used for shadow according to both the scene and the light.\r\n   * @param activeCamera The camera we are returning the max for\r\n   * @returns the depth max z\r\n   */\n\n\n  ShadowLight.prototype.getDepthMaxZ = function (activeCamera) {\n    return this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\n  };\n  /**\r\n   * Sets the shadow projection matrix in parameter to the generated projection matrix.\r\n   * @param matrix The materix to updated with the projection information\r\n   * @param viewMatrix The transform matrix of the light\r\n   * @param renderList The list of mesh to render in the map\r\n   * @returns The current light\r\n   */\n\n\n  ShadowLight.prototype.setShadowProjectionMatrix = function (matrix, viewMatrix, renderList) {\n    if (this.customProjectionMatrixBuilder) {\n      this.customProjectionMatrixBuilder(viewMatrix, renderList, matrix);\n    } else {\n      this._setDefaultShadowProjectionMatrix(matrix, viewMatrix, renderList);\n    }\n\n    return this;\n  };\n\n  __decorate([serializeAsVector3()], ShadowLight.prototype, \"position\", null);\n\n  __decorate([serializeAsVector3()], ShadowLight.prototype, \"direction\", null);\n\n  __decorate([serialize()], ShadowLight.prototype, \"shadowMinZ\", null);\n\n  __decorate([serialize()], ShadowLight.prototype, \"shadowMaxZ\", null);\n\n  return ShadowLight;\n}(Light);\n\nexport { ShadowLight };","map":{"version":3,"sources":["../../../sourceES6/core/Lights/shadowLight.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,EAAoB,kBAApB,QAA8C,oBAA9C;AAGA,SAAS,MAAT,EAAiB,OAAjB,QAAgC,sBAAhC;AAEA,SAAS,KAAT,QAAsB,SAAtB;AACA,SAAS,IAAT,QAAqB,oBAArB;AAgHA;;;;;AAIA,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;;AAA1C,WAAA,WAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AA4FY,IAAA,KAAA,CAAA,4BAAA,GAAwC,IAAxC;;AAgLX;;AAvQa,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAV,UAAuB,KAAvB,EAAqC;AACjC,SAAK,SAAL,GAAiB,KAAjB;AACH,GAFS;;AAQV,EAAA,MAAA,CAAA,cAAA,CAAW,WAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;AALnB;;;;SAKA,YAAA;AACI,aAAO,KAAK,SAAZ;AACH,KAFkB;;AAGnB;;;;SAIA,UAAoB,KAApB,EAAkC;AAC9B,WAAK,YAAL,CAAkB,KAAlB;AACH,KATkB;qBAAA;;AAAA,GAAnB;;AAYU,EAAA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,KAAxB,EAAsC;AAClC,SAAK,UAAL,GAAkB,KAAlB;AACH,GAFS;;AAQV,EAAA,MAAA,CAAA,cAAA,CAAW,WAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AALpB;;;;SAKA,YAAA;AACI,aAAO,KAAK,UAAZ;AACH,KAFmB;;AAGpB;;;;SAIA,UAAqB,KAArB,EAAmC;AAC/B,WAAK,aAAL,CAAmB,KAAnB;AACH,KATmB;qBAAA;;AAAA,GAApB;AAgBA,EAAA,MAAA,CAAA,cAAA,CAAW,WAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AAJrB;;;SAIA,YAAA;AACI,aAAO,KAAK,WAAZ;AACH,KAFoB;;AAGrB;;;SAGA,UAAsB,KAAtB,EAAmC;AAC/B,WAAK,WAAL,GAAmB,KAAnB;AACA,WAAK,4BAAL;AACH,KAToB;qBAAA;;AAAA,GAArB;AAgBA,EAAA,MAAA,CAAA,cAAA,CAAW,WAAA,CAAA,SAAX,EAAW,YAAX,EAAqB;AAJrB;;;SAIA,YAAA;AACI,aAAO,KAAK,WAAZ;AACH,KAFoB;;AAGrB;;;SAGA,UAAsB,KAAtB,EAAmC;AAC/B,WAAK,WAAL,GAAmB,KAAnB;AACA,WAAK,4BAAL;AACH,KAToB;qBAAA;;AAAA,GAArB;AA6BA;;;;;AAIO,EAAA,WAAA,CAAA,SAAA,CAAA,6BAAA,GAAP,YAAA;AACI,QAAI,KAAK,MAAL,IAAe,KAAK,MAAL,CAAY,cAA/B,EAA+C;AAC3C,UAAI,CAAC,KAAK,mBAAV,EAA+B;AAC3B,aAAK,mBAAL,GAA2B,OAAO,CAAC,IAAR,EAA3B;AACH;;AACD,MAAA,OAAO,CAAC,yBAAR,CAAkC,KAAK,QAAvC,EAAiD,KAAK,MAAL,CAAY,cAAZ,EAAjD,EAA+E,KAAK,mBAApF,EAJ2C,CAM3C;;AACA,UAAI,KAAK,SAAT,EAAoB;AAChB,YAAI,CAAC,KAAK,oBAAV,EAAgC;AAC5B,eAAK,oBAAL,GAA4B,OAAO,CAAC,IAAR,EAA5B;AACH;;AACD,QAAA,OAAO,CAAC,oBAAR,CAA6B,KAAK,SAAlC,EAA6C,KAAK,MAAL,CAAY,cAAZ,EAA7C,EAA2E,KAAK,oBAAhF;AACH;;AACD,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GAjBM;AAmBP;;;;;;AAIO,EAAA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACI,WAAO,IAAP;AACH,GAFM;AAIP;;;;;;;AAKO,EAAA,WAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,SAA1B,EAA4C;AACxC,WAAO,KAAK,oBAAL,GAA4B,KAAK,oBAAjC,GAAwD,KAAK,SAApE;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,WAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,YAAA;AACI,WAAO,KAAK,mBAAL,GAA2B,KAAK,mBAAhC,GAAsD,KAAK,QAAlE;AACH,GAFM;AAIP;;;;;;;AAKO,EAAA,WAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,UAA4B,MAA5B,EAA2C;AACvC,SAAK,SAAL,GAAiB,OAAO,CAAC,SAAR,CAAkB,MAAM,CAAC,QAAP,CAAgB,KAAK,QAArB,CAAlB,CAAjB;AACA,WAAO,KAAK,SAAZ;AACH,GAHM;AAKP;;;;;;AAIO,EAAA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACI,SAAK,SAAL,CAAe,SAAf;AACA,QAAI,KAAK,GAAG,OAAO,CAAC,KAAR,CAAc,KAAK,SAAnB,EAA8B,IAAI,CAAC,CAAnC,CAAZ;AACA,QAAI,KAAK,GAAG,OAAO,CAAC,KAAR,CAAc,KAAd,EAAqB,KAAK,SAA1B,CAAZ;AACA,WAAO,OAAO,CAAC,gBAAR,CAAyB,KAAzB,EAAgC,KAAhC,EAAuC,KAAK,SAA5C,CAAP;AACH,GALM;AAOP;;;;;;AAIO,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACI,WAAO,KAAP;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,WAAA,CAAA,SAAA,CAAA,2BAAA,GAAP,YAAA;AACI,WAAO,KAAK,4BAAZ;AACH,GAFM;AAIP;;;;;AAGO,EAAA,WAAA,CAAA,SAAA,CAAA,4BAAA,GAAP,YAAA;AACI,SAAK,4BAAL,GAAoC,IAApC;AACH,GAFM;AAIP;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACI,IAAA,MAAA,CAAA,SAAA,CAAM,UAAN,CAAgB,IAAhB,CAAgB,IAAhB;;AAEA,SAAK,MAAL,CAAY,QAAZ,GAAuB,OAAO,CAAC,IAAR,EAAvB;AACH,GAJM;AAMP;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,eAAA,GAAP,YAAA;AACI,QAAI,CAAC,KAAK,MAAL,CAAY,QAAZ,CAAqB,MAArB,CAA4B,KAAK,QAAjC,CAAL,EAAiD;AAC7C,aAAO,KAAP;AACH;;AAED,WAAO,IAAP;AACH,GANM;AAQP;;;;;;;AAKO,EAAA,WAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,KAA1B,EAAyC;AACrC,QAAI,CAAC,KAAD,IAAU,KAAK,cAAL,EAAd,EAAqC;AACjC,WAAK,gBAAL,GAAwB,KAAK,QAAL,GAAgB,WAAhB,EAAxB;AACA,aAAO,KAAK,YAAZ;AACH;;AAED,SAAK,YAAL;;AACA,SAAK,MAAL,CAAY,QAAZ,CAAqB,QAArB,CAA8B,KAAK,QAAnC;;AAEA,QAAI,CAAC,KAAK,YAAV,EAAwB;AACpB,WAAK,YAAL,GAAoB,MAAM,CAAC,QAAP,EAApB;AACH;;AAED,IAAA,MAAM,CAAC,gBAAP,CAAwB,KAAK,QAAL,CAAc,CAAtC,EAAyC,KAAK,QAAL,CAAc,CAAvD,EAA0D,KAAK,QAAL,CAAc,CAAxE,EAA2E,KAAK,YAAhF;;AAEA,QAAI,KAAK,MAAL,IAAe,KAAK,MAAL,CAAY,cAA/B,EAA+C;AAC3C,WAAK,YAAL,CAAkB,aAAlB,CAAgC,KAAK,MAAL,CAAY,cAAZ,EAAhC,EAA8D,KAAK,YAAnE;;AAEA,WAAK,qBAAL;AACH,KAnBoC,CAqBrC;;;AACA,SAAK,8BAAL,GAAsC,IAAtC;AAEA,WAAO,KAAK,YAAZ;AACH,GAzBM;AA2BP;;;;;;;AAKO,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,YAApB,EAAwC;AACpC,WAAO,KAAK,UAAL,KAAoB,SAApB,GAAgC,KAAK,UAArC,GAAkD,YAAY,CAAC,IAAtE;AACH,GAFM;AAIP;;;;;;;AAKO,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,YAApB,EAAwC;AACpC,WAAO,KAAK,UAAL,KAAoB,SAApB,GAAgC,KAAK,UAArC,GAAkD,YAAY,CAAC,IAAtE;AACH,GAFM;AAIP;;;;;;;;;AAOO,EAAA,WAAA,CAAA,SAAA,CAAA,yBAAA,GAAP,UAAiC,MAAjC,EAAiD,UAAjD,EAAqE,UAArE,EAAoG;AAChG,QAAI,KAAK,6BAAT,EAAwC;AACpC,WAAK,6BAAL,CAAmC,UAAnC,EAA+C,UAA/C,EAA2D,MAA3D;AACH,KAFD,MAGK;AACD,WAAK,iCAAL,CAAuC,MAAvC,EAA+C,UAA/C,EAA2D,UAA3D;AACH;;AACD,WAAO,IAAP;AACH,GARM;;AAtPP,EAAA,UAAA,CAAA,CADC,kBAAkB,EACnB,CAAA,E,qBAAA,E,UAAA,EAEC,IAFD,CAAA;;AAoBA,EAAA,UAAA,CAAA,CADC,kBAAkB,EACnB,CAAA,E,qBAAA,E,WAAA,EAEC,IAFD,CAAA;;AAgBA,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,qBAAA,E,YAAA,EAEC,IAFD,CAAA;;AAgBA,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,qBAAA,E,YAAA,EAEC,IAFD,CAAA;;AA2MJ,SAAA,WAAA;AAAC,CA5QD,CAA0C,KAA1C,CAAA;;SAAsB,W","sourcesContent":["import { serialize, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { Axis } from '../Maths/math.axis';\r\n/**\r\n * Interface describing all the common properties and methods a shadow light needs to implement.\r\n * This helps both the shadow generator and materials to genrate the corresponding shadow maps\r\n * as well as binding the different shadow properties to the effects.\r\n */\r\nexport interface IShadowLight extends Light {\r\n    /**\r\n     * The light id in the scene (used in scene.findLighById for instance)\r\n     */\r\n    id: string;\r\n    /**\r\n     * The position the shdow will be casted from.\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * In 2d mode (needCube being false), the direction used to cast the shadow.\r\n     */\r\n    direction: Vector3;\r\n    /**\r\n     * The transformed position. Position of the light in world space taking parenting in account.\r\n     */\r\n    transformedPosition: Vector3;\r\n    /**\r\n     * The transformed direction. Direction of the light in world space taking parenting in account.\r\n     */\r\n    transformedDirection: Vector3;\r\n    /**\r\n     * The friendly name of the light in the scene.\r\n     */\r\n    name: string;\r\n    /**\r\n     * Defines the shadow projection clipping minimum z value.\r\n     */\r\n    shadowMinZ: number;\r\n    /**\r\n     * Defines the shadow projection clipping maximum z value.\r\n     */\r\n    shadowMaxZ: number;\r\n\r\n    /**\r\n     * Computes the transformed information (transformedPosition and transformedDirection in World space) of the current light\r\n     * @returns true if the information has been computed, false if it does not need to (no parenting)\r\n     */\r\n    computeTransformedInformation(): boolean;\r\n\r\n    /**\r\n     * Gets the scene the light belongs to.\r\n     * @returns The scene\r\n     */\r\n    getScene(): Scene;\r\n\r\n    /**\r\n     * Callback defining a custom Projection Matrix Builder.\r\n     * This can be used to override the default projection matrix computation.\r\n     */\r\n    customProjectionMatrixBuilder: (viewMatrix: Matrix, renderList: Array<AbstractMesh>, result: Matrix) => void;\r\n\r\n    /**\r\n     * Sets the shadow projection matrix in parameter to the generated projection matrix.\r\n     * @param matrix The materix to updated with the projection information\r\n     * @param viewMatrix The transform matrix of the light\r\n     * @param renderList The list of mesh to render in the map\r\n     * @returns The current light\r\n     */\r\n    setShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): IShadowLight;\r\n\r\n    /**\r\n     * Gets the current depth scale used in ESM.\r\n     * @returns The scale\r\n     */\r\n    getDepthScale(): number;\r\n\r\n    /**\r\n     * Returns whether or not the shadow generation require a cube texture or a 2d texture.\r\n     * @returns true if a cube texture needs to be use\r\n     */\r\n    needCube(): boolean;\r\n\r\n    /**\r\n     * Detects if the projection matrix requires to be recomputed this frame.\r\n     * @returns true if it requires to be recomputed otherwise, false.\r\n     */\r\n    needProjectionMatrixCompute(): boolean;\r\n\r\n    /**\r\n     * Forces the shadow generator to recompute the projection matrix even if position and direction did not changed.\r\n     */\r\n    forceProjectionMatrixCompute(): void;\r\n\r\n    /**\r\n     * Get the direction to use to render the shadow map. In case of cube texture, the face index can be passed.\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    getShadowDirection(faceIndex?: number): Vector3;\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the min for\r\n     * @returns the depth min z\r\n     */\r\n    getDepthMinZ(activeCamera: Camera): number;\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    getDepthMaxZ(activeCamera: Camera): number;\r\n}\r\n\r\n/**\r\n * Base implementation IShadowLight\r\n * It groups all the common behaviour in order to reduce dupplication and better follow the DRY pattern.\r\n */\r\nexport abstract class ShadowLight extends Light implements IShadowLight {\r\n\r\n    protected abstract _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void;\r\n\r\n    protected _position: Vector3;\r\n    protected _setPosition(value: Vector3) {\r\n        this._position = value;\r\n    }\r\n    /**\r\n     * Sets the position the shadow will be casted from. Also use as the light position for both\r\n     * point and spot lights.\r\n     */\r\n    @serializeAsVector3()\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n    /**\r\n     * Sets the position the shadow will be casted from. Also use as the light position for both\r\n     * point and spot lights.\r\n     */\r\n    public set position(value: Vector3) {\r\n        this._setPosition(value);\r\n    }\r\n\r\n    protected _direction: Vector3;\r\n    protected _setDirection(value: Vector3) {\r\n        this._direction = value;\r\n    }\r\n    /**\r\n     * In 2d mode (needCube being false), gets the direction used to cast the shadow.\r\n     * Also use as the light direction on spot and directional lights.\r\n     */\r\n    @serializeAsVector3()\r\n    public get direction(): Vector3 {\r\n        return this._direction;\r\n    }\r\n    /**\r\n     * In 2d mode (needCube being false), sets the direction used to cast the shadow.\r\n     * Also use as the light direction on spot and directional lights.\r\n     */\r\n    public set direction(value: Vector3) {\r\n        this._setDirection(value);\r\n    }\r\n\r\n    protected _shadowMinZ: number;\r\n    /**\r\n     * Gets the shadow projection clipping minimum z value.\r\n     */\r\n    @serialize()\r\n    public get shadowMinZ(): number {\r\n        return this._shadowMinZ;\r\n    }\r\n    /**\r\n     * Sets the shadow projection clipping minimum z value.\r\n     */\r\n    public set shadowMinZ(value: number) {\r\n        this._shadowMinZ = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    protected _shadowMaxZ: number;\r\n    /**\r\n     * Sets the shadow projection clipping maximum z value.\r\n     */\r\n    @serialize()\r\n    public get shadowMaxZ(): number {\r\n        return this._shadowMaxZ;\r\n    }\r\n    /**\r\n     * Gets the shadow projection clipping maximum z value.\r\n     */\r\n    public set shadowMaxZ(value: number) {\r\n        this._shadowMaxZ = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Callback defining a custom Projection Matrix Builder.\r\n     * This can be used to override the default projection matrix computation.\r\n     */\r\n    public customProjectionMatrixBuilder: (viewMatrix: Matrix, renderList: Array<AbstractMesh>, result: Matrix) => void;\r\n\r\n    /**\r\n     * The transformed position. Position of the light in world space taking parenting in account.\r\n     */\r\n    public transformedPosition: Vector3;\r\n\r\n    /**\r\n     * The transformed direction. Direction of the light in world space taking parenting in account.\r\n     */\r\n    public transformedDirection: Vector3;\r\n\r\n    private _needProjectionMatrixCompute: boolean = true;\r\n\r\n    /**\r\n     * Computes the transformed information (transformedPosition and transformedDirection in World space) of the current light\r\n     * @returns true if the information has been computed, false if it does not need to (no parenting)\r\n     */\r\n    public computeTransformedInformation(): boolean {\r\n        if (this.parent && this.parent.getWorldMatrix) {\r\n            if (!this.transformedPosition) {\r\n                this.transformedPosition = Vector3.Zero();\r\n            }\r\n            Vector3.TransformCoordinatesToRef(this.position, this.parent.getWorldMatrix(), this.transformedPosition);\r\n\r\n            // In case the direction is present.\r\n            if (this.direction) {\r\n                if (!this.transformedDirection) {\r\n                    this.transformedDirection = Vector3.Zero();\r\n                }\r\n                Vector3.TransformNormalToRef(this.direction, this.parent.getWorldMatrix(), this.transformedDirection);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Return the depth scale used for the shadow map.\r\n     * @returns the depth scale.\r\n     */\r\n    public getDepthScale(): number {\r\n        return 50.0;\r\n    }\r\n\r\n    /**\r\n     * Get the direction to use to render the shadow map. In case of cube texture, the face index can be passed.\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    public getShadowDirection(faceIndex?: number): Vector3 {\r\n        return this.transformedDirection ? this.transformedDirection : this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the ShadowLight absolute position in the World.\r\n     * @returns the position vector in world space\r\n     */\r\n    public getAbsolutePosition(): Vector3 {\r\n        return this.transformedPosition ? this.transformedPosition : this.position;\r\n    }\r\n\r\n    /**\r\n     * Sets the ShadowLight direction toward the passed target.\r\n     * @param target The point to target in local space\r\n     * @returns the updated ShadowLight direction\r\n     */\r\n    public setDirectionToTarget(target: Vector3): Vector3 {\r\n        this.direction = Vector3.Normalize(target.subtract(this.position));\r\n        return this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the light rotation in euler definition.\r\n     * @returns the x y z rotation in local space.\r\n     */\r\n    public getRotation(): Vector3 {\r\n        this.direction.normalize();\r\n        var xaxis = Vector3.Cross(this.direction, Axis.Y);\r\n        var yaxis = Vector3.Cross(xaxis, this.direction);\r\n        return Vector3.RotationFromAxis(xaxis, yaxis, this.direction);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the shadow generation require a cube texture or a 2d texture.\r\n     * @returns true if a cube texture needs to be use\r\n     */\r\n    public needCube(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Detects if the projection matrix requires to be recomputed this frame.\r\n     * @returns true if it requires to be recomputed otherwise, false.\r\n     */\r\n    public needProjectionMatrixCompute(): boolean {\r\n        return this._needProjectionMatrixCompute;\r\n    }\r\n\r\n    /**\r\n     * Forces the shadow generator to recompute the projection matrix even if position and direction did not changed.\r\n     */\r\n    public forceProjectionMatrixCompute(): void {\r\n        this._needProjectionMatrixCompute = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _initCache() {\r\n        super._initCache();\r\n\r\n        this._cache.position = Vector3.Zero();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _isSynchronized(): boolean {\r\n        if (!this._cache.position.equals(this.position)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @param force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n     * @returns the world matrix\r\n     */\r\n    public computeWorldMatrix(force?: boolean): Matrix {\r\n        if (!force && this.isSynchronized()) {\r\n            this._currentRenderId = this.getScene().getRenderId();\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        this._updateCache();\r\n        this._cache.position.copyFrom(this.position);\r\n\r\n        if (!this._worldMatrix) {\r\n            this._worldMatrix = Matrix.Identity();\r\n        }\r\n\r\n        Matrix.TranslationToRef(this.position.x, this.position.y, this.position.z, this._worldMatrix);\r\n\r\n        if (this.parent && this.parent.getWorldMatrix) {\r\n            this._worldMatrix.multiplyToRef(this.parent.getWorldMatrix(), this._worldMatrix);\r\n\r\n            this._markSyncedWithParent();\r\n        }\r\n\r\n        // Cache the determinant\r\n        this._worldMatrixDeterminantIsDirty = true;\r\n\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the min for\r\n     * @returns the depth min z\r\n     */\r\n    public getDepthMinZ(activeCamera: Camera): number {\r\n        return this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n    }\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     * @param activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    public getDepthMaxZ(activeCamera: Camera): number {\r\n        return this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n    }\r\n\r\n    /**\r\n     * Sets the shadow projection matrix in parameter to the generated projection matrix.\r\n     * @param matrix The materix to updated with the projection information\r\n     * @param viewMatrix The transform matrix of the light\r\n     * @param renderList The list of mesh to render in the map\r\n     * @returns The current light\r\n     */\r\n    public setShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): IShadowLight {\r\n        if (this.customProjectionMatrixBuilder) {\r\n            this.customProjectionMatrixBuilder(viewMatrix, renderList, matrix);\r\n        }\r\n        else {\r\n            this._setDefaultShadowProjectionMatrix(matrix, viewMatrix, renderList);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}