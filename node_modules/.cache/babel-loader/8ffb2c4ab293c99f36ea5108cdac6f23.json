{"ast":null,"code":"import { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { Quaternion } from \"../../Maths/math.vector\";\nimport { Tools } from \"../../Misc/tools\";\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager\";\nimport { Observable } from \"../../Misc/observable\";\n/**\r\n * Add orientation input support to the input manager.\r\n * @returns the current input manager\r\n */\n\nFreeCameraInputsManager.prototype.addDeviceOrientation = function () {\n  if (!this._deviceOrientationInput) {\n    this._deviceOrientationInput = new FreeCameraDeviceOrientationInput();\n    this.add(this._deviceOrientationInput);\n  }\n\n  return this;\n};\n/**\r\n * Takes information about the orientation of the device as reported by the deviceorientation event to orient the camera.\r\n * Screen rotation is taken into account.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\n\nvar FreeCameraDeviceOrientationInput =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new input\r\n   * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n   */\n  function FreeCameraDeviceOrientationInput() {\n    var _this = this;\n\n    this._screenOrientationAngle = 0;\n    this._screenQuaternion = new Quaternion();\n    this._alpha = 0;\n    this._beta = 0;\n    this._gamma = 0;\n    /**\r\n     * @hidden\r\n     */\n\n    this._onDeviceOrientationChangedObservable = new Observable();\n\n    this._orientationChanged = function () {\n      _this._screenOrientationAngle = window.orientation !== undefined ? +window.orientation : window.screen.orientation && window.screen.orientation[\"angle\"] ? window.screen.orientation.angle : 0;\n      _this._screenOrientationAngle = -Tools.ToRadians(_this._screenOrientationAngle / 2);\n\n      _this._screenQuaternion.copyFromFloats(0, Math.sin(_this._screenOrientationAngle), 0, Math.cos(_this._screenOrientationAngle));\n    };\n\n    this._deviceOrientation = function (evt) {\n      _this._alpha = evt.alpha !== null ? evt.alpha : 0;\n      _this._beta = evt.beta !== null ? evt.beta : 0;\n      _this._gamma = evt.gamma !== null ? evt.gamma : 0;\n\n      if (evt.alpha !== null) {\n        _this._onDeviceOrientationChangedObservable.notifyObservers();\n      }\n    };\n\n    this._constantTranform = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\n\n    this._orientationChanged();\n  }\n  /**\r\n   * Can be used to detect if a device orientation sensor is available on a device\r\n   * @param timeout amount of time in milliseconds to wait for a response from the sensor (default: infinite)\r\n   * @returns a promise that will resolve on orientation change\r\n   */\n\n\n  FreeCameraDeviceOrientationInput.WaitForOrientationChangeAsync = function (timeout) {\n    return new Promise(function (res, rej) {\n      var gotValue = false;\n\n      var eventHandler = function () {\n        window.removeEventListener(\"deviceorientation\", eventHandler);\n        gotValue = true;\n        res();\n      }; // If timeout is populated reject the promise\n\n\n      if (timeout) {\n        setTimeout(function () {\n          if (!gotValue) {\n            window.removeEventListener(\"deviceorientation\", eventHandler);\n            rej(\"WaitForOrientationChangeAsync timed out\");\n          }\n        }, timeout);\n      }\n\n      if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n        DeviceOrientationEvent.requestPermission().then(function (response) {\n          if (response == \"granted\") {\n            window.addEventListener(\"deviceorientation\", eventHandler);\n          } else {\n            Tools.Warn(\"Permission not granted.\");\n          }\n        }).catch(function (error) {\n          Tools.Error(error);\n        });\n      } else {\n        window.addEventListener(\"deviceorientation\", eventHandler);\n      }\n    });\n  };\n\n  Object.defineProperty(FreeCameraDeviceOrientationInput.prototype, \"camera\", {\n    /**\r\n     * Define the camera controlled by the input.\r\n     */\n    get: function () {\n      return this._camera;\n    },\n    set: function (camera) {\n      var _this = this;\n\n      this._camera = camera;\n\n      if (this._camera != null && !this._camera.rotationQuaternion) {\n        this._camera.rotationQuaternion = new Quaternion();\n      }\n\n      if (this._camera) {\n        this._camera.onDisposeObservable.add(function () {\n          _this._onDeviceOrientationChangedObservable.clear();\n        });\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   */\n\n  FreeCameraDeviceOrientationInput.prototype.attachControl = function () {\n    var _this = this;\n\n    var hostWindow = this.camera.getScene().getEngine().getHostWindow();\n\n    if (hostWindow) {\n      var eventHandler_1 = function () {\n        hostWindow.addEventListener(\"orientationchange\", _this._orientationChanged);\n        hostWindow.addEventListener(\"deviceorientation\", _this._deviceOrientation); //In certain cases, the attach control is called AFTER orientation was changed,\n        //So this is needed.\n\n        _this._orientationChanged();\n      };\n\n      if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n        DeviceOrientationEvent.requestPermission().then(function (response) {\n          if (response === \"granted\") {\n            eventHandler_1();\n          } else {\n            Tools.Warn(\"Permission not granted.\");\n          }\n        }).catch(function (error) {\n          Tools.Error(error);\n        });\n      } else {\n        eventHandler_1();\n      }\n    }\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FreeCameraDeviceOrientationInput.prototype.detachControl = function (ignored) {\n    window.removeEventListener(\"orientationchange\", this._orientationChanged);\n    window.removeEventListener(\"deviceorientation\", this._deviceOrientation);\n    this._alpha = 0;\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  FreeCameraDeviceOrientationInput.prototype.checkInputs = function () {\n    //if no device orientation provided, don't update the rotation.\n    //Only testing against alpha under the assumption thatnorientation will never be so exact when set.\n    if (!this._alpha) {\n      return;\n    }\n\n    Quaternion.RotationYawPitchRollToRef(Tools.ToRadians(this._alpha), Tools.ToRadians(this._beta), -Tools.ToRadians(this._gamma), this.camera.rotationQuaternion);\n\n    this._camera.rotationQuaternion.multiplyInPlace(this._screenQuaternion);\n\n    this._camera.rotationQuaternion.multiplyInPlace(this._constantTranform); //Mirror on XY Plane\n\n\n    this._camera.rotationQuaternion.z *= -1;\n    this._camera.rotationQuaternion.w *= -1;\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  FreeCameraDeviceOrientationInput.prototype.getClassName = function () {\n    return \"FreeCameraDeviceOrientationInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FreeCameraDeviceOrientationInput.prototype.getSimpleName = function () {\n    return \"deviceOrientation\";\n  };\n\n  return FreeCameraDeviceOrientationInput;\n}();\n\nexport { FreeCameraDeviceOrientationInput };\nCameraInputTypes[\"FreeCameraDeviceOrientationInput\"] = FreeCameraDeviceOrientationInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/freeCameraDeviceOrientationInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager\";\r\nimport { Observable } from \"../../Misc/observable\";\r\n\r\n// Module augmentation to abstract orientation inputs from camera.\r\ndeclare module \"../../Cameras/freeCameraInputsManager\" {\r\n    export interface FreeCameraInputsManager {\r\n        /**\r\n         * @hidden\r\n         */\r\n        _deviceOrientationInput: Nullable<FreeCameraDeviceOrientationInput>;\r\n        /**\r\n         * Add orientation input support to the input manager.\r\n         * @returns the current input manager\r\n         */\r\n        addDeviceOrientation(): FreeCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Add orientation input support to the input manager.\r\n * @returns the current input manager\r\n */\r\nFreeCameraInputsManager.prototype.addDeviceOrientation = function (): FreeCameraInputsManager {\r\n    if (!this._deviceOrientationInput) {\r\n        this._deviceOrientationInput = new FreeCameraDeviceOrientationInput();\r\n        this.add(this._deviceOrientationInput);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Takes information about the orientation of the device as reported by the deviceorientation event to orient the camera.\r\n * Screen rotation is taken into account.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FreeCameraDeviceOrientationInput implements ICameraInput<FreeCamera> {\r\n    private _camera: FreeCamera;\r\n\r\n    private _screenOrientationAngle: number = 0;\r\n\r\n    private _constantTranform: Quaternion;\r\n    private _screenQuaternion: Quaternion = new Quaternion();\r\n\r\n    private _alpha: number = 0;\r\n    private _beta: number = 0;\r\n    private _gamma: number = 0;\r\n\r\n    /**\r\n     * Can be used to detect if a device orientation sensor is available on a device\r\n     * @param timeout amount of time in milliseconds to wait for a response from the sensor (default: infinite)\r\n     * @returns a promise that will resolve on orientation change\r\n     */\r\n    public static WaitForOrientationChangeAsync(timeout?: number) {\r\n        return new Promise((res, rej) => {\r\n            var gotValue = false;\r\n            var eventHandler = () => {\r\n                window.removeEventListener(\"deviceorientation\", eventHandler);\r\n                gotValue = true;\r\n                res();\r\n            };\r\n\r\n            // If timeout is populated reject the promise\r\n            if (timeout) {\r\n                setTimeout(() => {\r\n                    if (!gotValue) {\r\n                        window.removeEventListener(\"deviceorientation\", eventHandler);\r\n                        rej(\"WaitForOrientationChangeAsync timed out\");\r\n                    }\r\n                }, timeout);\r\n            }\r\n\r\n            if (typeof DeviceOrientationEvent !== \"undefined\" && typeof (<any>DeviceOrientationEvent).requestPermission === \"function\") {\r\n                (<any>DeviceOrientationEvent)\r\n                    .requestPermission()\r\n                    .then((response: string) => {\r\n                        if (response == \"granted\") {\r\n                            window.addEventListener(\"deviceorientation\", eventHandler);\r\n                        } else {\r\n                            Tools.Warn(\"Permission not granted.\");\r\n                        }\r\n                    })\r\n                    .catch((error: any) => {\r\n                        Tools.Error(error);\r\n                    });\r\n            } else {\r\n                window.addEventListener(\"deviceorientation\", eventHandler);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _onDeviceOrientationChangedObservable = new Observable<void>();\r\n    /**\r\n     * Instantiates a new input\r\n     * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n     */\r\n    constructor() {\r\n        this._constantTranform = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\r\n        this._orientationChanged();\r\n    }\r\n\r\n    /**\r\n     * Define the camera controlled by the input.\r\n     */\r\n    public get camera(): FreeCamera {\r\n        return this._camera;\r\n    }\r\n\r\n    public set camera(camera: FreeCamera) {\r\n        this._camera = camera;\r\n        if (this._camera != null && !this._camera.rotationQuaternion) {\r\n            this._camera.rotationQuaternion = new Quaternion();\r\n        }\r\n        if (this._camera) {\r\n            this._camera.onDisposeObservable.add(() => {\r\n                this._onDeviceOrientationChangedObservable.clear();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     */\r\n    public attachControl(): void {\r\n        let hostWindow = this.camera.getScene().getEngine().getHostWindow();\r\n\r\n        if (hostWindow) {\r\n            const eventHandler = () => {\r\n                hostWindow!.addEventListener(\"orientationchange\", this._orientationChanged);\r\n                hostWindow!.addEventListener(\"deviceorientation\", this._deviceOrientation);\r\n                //In certain cases, the attach control is called AFTER orientation was changed,\r\n                //So this is needed.\r\n                this._orientationChanged();\r\n            };\r\n            if (typeof DeviceOrientationEvent !== \"undefined\" && typeof (<any>DeviceOrientationEvent).requestPermission === \"function\") {\r\n                (<any>DeviceOrientationEvent)\r\n                    .requestPermission()\r\n                    .then((response: string) => {\r\n                        if (response === \"granted\") {\r\n                            eventHandler();\r\n                        } else {\r\n                            Tools.Warn(\"Permission not granted.\");\r\n                        }\r\n                    })\r\n                    .catch((error: any) => {\r\n                        Tools.Error(error);\r\n                    });\r\n            } else {\r\n                eventHandler();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _orientationChanged = () => {\r\n        this._screenOrientationAngle = <any>window.orientation !== undefined ? +(<any>window.orientation) : (<any>window.screen).orientation && (<any>window.screen).orientation[\"angle\"] ? (<any>window.screen).orientation.angle : 0;\r\n        this._screenOrientationAngle = -Tools.ToRadians(this._screenOrientationAngle / 2);\r\n        this._screenQuaternion.copyFromFloats(0, Math.sin(this._screenOrientationAngle), 0, Math.cos(this._screenOrientationAngle));\r\n    };\r\n\r\n    private _deviceOrientation = (evt: DeviceOrientationEvent) => {\r\n        this._alpha = evt.alpha !== null ? evt.alpha : 0;\r\n        this._beta = evt.beta !== null ? evt.beta : 0;\r\n        this._gamma = evt.gamma !== null ? evt.gamma : 0;\r\n        if (evt.alpha !== null) {\r\n            this._onDeviceOrientationChangedObservable.notifyObservers();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        window.removeEventListener(\"orientationchange\", this._orientationChanged);\r\n        window.removeEventListener(\"deviceorientation\", this._deviceOrientation);\r\n        this._alpha = 0;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        //if no device orientation provided, don't update the rotation.\r\n        //Only testing against alpha under the assumption thatnorientation will never be so exact when set.\r\n        if (!this._alpha) {\r\n            return;\r\n        }\r\n        Quaternion.RotationYawPitchRollToRef(Tools.ToRadians(this._alpha), Tools.ToRadians(this._beta), -Tools.ToRadians(this._gamma), this.camera.rotationQuaternion);\r\n        this._camera.rotationQuaternion.multiplyInPlace(this._screenQuaternion);\r\n        this._camera.rotationQuaternion.multiplyInPlace(this._constantTranform);\r\n        //Mirror on XY Plane\r\n        this._camera.rotationQuaternion.z *= -1;\r\n        this._camera.rotationQuaternion.w *= -1;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraDeviceOrientationInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"deviceOrientation\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraDeviceOrientationInput\"] = FreeCameraDeviceOrientationInput;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}