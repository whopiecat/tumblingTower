{"ast":null,"code":"/**\r\n * A behavior that when attached to a mesh will allow the mesh to fade in and out\r\n */\nvar FadeInOutBehavior =\n/** @class */\nfunction () {\n  /**\r\n   * Instatiates the FadeInOutBehavior\r\n   */\n  function FadeInOutBehavior() {\n    var _this = this;\n    /**\r\n     * Time in milliseconds to delay before fading in (Default: 0)\r\n     */\n\n\n    this.delay = 0;\n    /**\r\n     * Time in milliseconds for the mesh to fade in (Default: 300)\r\n     */\n\n    this.fadeInTime = 300;\n    this._millisecondsPerFrame = 1000 / 60;\n    this._hovered = false;\n    this._hoverValue = 0;\n    this._ownerNode = null;\n\n    this._update = function () {\n      if (_this._ownerNode) {\n        _this._hoverValue += _this._hovered ? _this._millisecondsPerFrame : -_this._millisecondsPerFrame;\n\n        _this._setAllVisibility(_this._ownerNode, (_this._hoverValue - _this.delay) / _this.fadeInTime);\n\n        if (_this._ownerNode.visibility > 1) {\n          _this._setAllVisibility(_this._ownerNode, 1);\n\n          _this._hoverValue = _this.fadeInTime + _this.delay;\n          return;\n        } else if (_this._ownerNode.visibility < 0) {\n          _this._setAllVisibility(_this._ownerNode, 0);\n\n          if (_this._hoverValue < 0) {\n            _this._hoverValue = 0;\n            return;\n          }\n        }\n\n        setTimeout(_this._update, _this._millisecondsPerFrame);\n      }\n    };\n  }\n\n  Object.defineProperty(FadeInOutBehavior.prototype, \"name\", {\n    /**\r\n     *  The name of the behavior\r\n     */\n    get: function () {\n      return \"FadeInOut\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   *  Initializes the behavior\r\n   */\n\n  FadeInOutBehavior.prototype.init = function () {};\n  /**\r\n   * Attaches the fade behavior on the passed in mesh\r\n   * @param ownerNode The mesh that will be faded in/out once attached\r\n   */\n\n\n  FadeInOutBehavior.prototype.attach = function (ownerNode) {\n    this._ownerNode = ownerNode;\n\n    this._setAllVisibility(this._ownerNode, 0);\n  };\n  /**\r\n   *  Detaches the behavior from the mesh\r\n   */\n\n\n  FadeInOutBehavior.prototype.detach = function () {\n    this._ownerNode = null;\n  };\n  /**\r\n   * Triggers the mesh to begin fading in or out\r\n   * @param value if the object should fade in or out (true to fade in)\r\n   */\n\n\n  FadeInOutBehavior.prototype.fadeIn = function (value) {\n    this._hovered = value;\n\n    this._update();\n  };\n\n  FadeInOutBehavior.prototype._setAllVisibility = function (mesh, value) {\n    var _this = this;\n\n    mesh.visibility = value;\n    mesh.getChildMeshes().forEach(function (c) {\n      _this._setAllVisibility(c, value);\n    });\n  };\n\n  return FadeInOutBehavior;\n}();\n\nexport { FadeInOutBehavior };","map":{"version":3,"sources":["../../../../sourceES6/core/Behaviors/Meshes/fadeInOutBehavior.ts"],"names":[],"mappings":"AAKA;;;AAGA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAeI;;;AAGA,WAAA,iBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA;AAjBA;;;;;AAGO,SAAA,KAAA,GAAQ,CAAR;AACP;;;;AAGO,SAAA,UAAA,GAAa,GAAb;AAEC,SAAA,qBAAA,GAAwB,OAAO,EAA/B;AACA,SAAA,QAAA,GAAW,KAAX;AACA,SAAA,WAAA,GAAc,CAAd;AACA,SAAA,UAAA,GAA6B,IAA7B;;AA6CA,SAAA,OAAA,GAAU,YAAA;AACd,UAAI,KAAI,CAAC,UAAT,EAAqB;AACjB,QAAA,KAAI,CAAC,WAAL,IAAoB,KAAI,CAAC,QAAL,GAAgB,KAAI,CAAC,qBAArB,GAA6C,CAAC,KAAI,CAAC,qBAAvE;;AAEA,QAAA,KAAI,CAAC,iBAAL,CAAuB,KAAI,CAAC,UAA5B,EAAwC,CAAC,KAAI,CAAC,WAAL,GAAmB,KAAI,CAAC,KAAzB,IAAkC,KAAI,CAAC,UAA/E;;AAEA,YAAI,KAAI,CAAC,UAAL,CAAgB,UAAhB,GAA6B,CAAjC,EAAoC;AAChC,UAAA,KAAI,CAAC,iBAAL,CAAuB,KAAI,CAAC,UAA5B,EAAwC,CAAxC;;AACA,UAAA,KAAI,CAAC,WAAL,GAAmB,KAAI,CAAC,UAAL,GAAkB,KAAI,CAAC,KAA1C;AACA;AACH,SAJD,MAIO,IAAI,KAAI,CAAC,UAAL,CAAgB,UAAhB,GAA6B,CAAjC,EAAoC;AACvC,UAAA,KAAI,CAAC,iBAAL,CAAuB,KAAI,CAAC,UAA5B,EAAwC,CAAxC;;AACA,cAAI,KAAI,CAAC,WAAL,GAAmB,CAAvB,EAA0B;AACtB,YAAA,KAAI,CAAC,WAAL,GAAmB,CAAnB;AACA;AACH;AACJ;;AACD,QAAA,UAAU,CAAC,KAAI,CAAC,OAAN,EAAe,KAAI,CAAC,qBAApB,CAAV;AACH;AACJ,KAnBO;AAvCP;;AAKD,EAAA,MAAA,CAAA,cAAA,CAAW,iBAAA,CAAA,SAAX,EAAW,MAAX,EAAe;AAHf;;;SAGA,YAAA;AACI,aAAO,WAAP;AACH,KAFc;qBAAA;;AAAA,GAAf;AAIA;;;;AAGO,EAAA,iBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA,CACC,CADM;AAGP;;;;;;AAIO,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,SAAd,EAA6B;AACzB,SAAK,UAAL,GAAkB,SAAlB;;AACA,SAAK,iBAAL,CAAuB,KAAK,UAA5B,EAAwC,CAAxC;AACH,GAHM;AAIP;;;;;AAGO,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACI,SAAK,UAAL,GAAkB,IAAlB;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,KAAd,EAA4B;AACxB,SAAK,QAAL,GAAgB,KAAhB;;AACA,SAAK,OAAL;AACH,GAHM;;AA0BC,EAAA,iBAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,IAA1B,EAA8C,KAA9C,EAA2D;AAA3D,QAAA,KAAA,GAAA,IAAA;;AACI,IAAA,IAAI,CAAC,UAAL,GAAkB,KAAlB;AACA,IAAA,IAAI,CAAC,cAAL,GAAsB,OAAtB,CAA8B,UAAC,CAAD,EAAE;AAC5B,MAAA,KAAI,CAAC,iBAAL,CAAuB,CAAvB,EAA0B,KAA1B;AACH,KAFD;AAGH,GALO;;AAOZ,SAAA,iBAAA;AAAC,CAtFD,EAAA","sourcesContent":["import { Behavior } from \"../behavior\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { Nullable } from \"../../types\";\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to fade in and out\r\n */\r\nexport class FadeInOutBehavior implements Behavior<Mesh> {\r\n    /**\r\n     * Time in milliseconds to delay before fading in (Default: 0)\r\n     */\r\n    public delay = 0;\r\n    /**\r\n     * Time in milliseconds for the mesh to fade in (Default: 300)\r\n     */\r\n    public fadeInTime = 300;\r\n\r\n    private _millisecondsPerFrame = 1000 / 60;\r\n    private _hovered = false;\r\n    private _hoverValue = 0;\r\n    private _ownerNode: Nullable<Mesh> = null;\r\n\r\n    /**\r\n     * Instatiates the FadeInOutBehavior\r\n     */\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"FadeInOut\";\r\n    }\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {\r\n    }\r\n\r\n    /**\r\n     * Attaches the fade behavior on the passed in mesh\r\n     * @param ownerNode The mesh that will be faded in/out once attached\r\n     */\r\n    public attach(ownerNode: Mesh): void {\r\n        this._ownerNode = ownerNode;\r\n        this._setAllVisibility(this._ownerNode, 0);\r\n    }\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this._ownerNode = null;\r\n    }\r\n\r\n    /**\r\n     * Triggers the mesh to begin fading in or out\r\n     * @param value if the object should fade in or out (true to fade in)\r\n     */\r\n    public fadeIn(value: boolean) {\r\n        this._hovered = value;\r\n        this._update();\r\n    }\r\n\r\n    private _update = () => {\r\n        if (this._ownerNode) {\r\n            this._hoverValue += this._hovered ? this._millisecondsPerFrame : -this._millisecondsPerFrame;\r\n\r\n            this._setAllVisibility(this._ownerNode, (this._hoverValue - this.delay) / this.fadeInTime);\r\n\r\n            if (this._ownerNode.visibility > 1) {\r\n                this._setAllVisibility(this._ownerNode, 1);\r\n                this._hoverValue = this.fadeInTime + this.delay;\r\n                return;\r\n            } else if (this._ownerNode.visibility < 0) {\r\n                this._setAllVisibility(this._ownerNode, 0);\r\n                if (this._hoverValue < 0) {\r\n                    this._hoverValue = 0;\r\n                    return;\r\n                }\r\n            }\r\n            setTimeout(this._update, this._millisecondsPerFrame);\r\n        }\r\n    }\r\n\r\n    private _setAllVisibility(mesh: AbstractMesh, value: number) {\r\n        mesh.visibility = value;\r\n        mesh.getChildMeshes().forEach((c) => {\r\n            this._setAllVisibility(c, value);\r\n        });\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}