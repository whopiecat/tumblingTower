{"ast":null,"code":"import { Engine } from '../engine';\n\nfunction transformTextureUrl(url) {\n  var excludeFn = function (entry) {\n    var strRegExPattern = '\\\\b' + entry + '\\\\b';\n    return url && (url === entry || url.match(new RegExp(strRegExPattern, 'g')));\n  };\n\n  if (this._excludedCompressedTextures && this._excludedCompressedTextures.some(excludeFn)) {\n    return url;\n  }\n\n  var lastDot = url.lastIndexOf('.');\n  var lastQuestionMark = url.lastIndexOf('?');\n  var querystring = lastQuestionMark > -1 ? url.substring(lastQuestionMark, url.length) : '';\n  return (lastDot > -1 ? url.substring(0, lastDot) : url) + this._textureFormatInUse + querystring;\n}\n\nObject.defineProperty(Engine.prototype, \"texturesSupported\", {\n  get: function () {\n    // Intelligently add supported compressed formats in order to check for.\n    // Check for ASTC support first as it is most powerful and to be very cross platform.\n    // Next PVRTC & DXT, which are probably superior to ETC1/2.\n    // Likely no hardware which supports both PVR & DXT, so order matters little.\n    // ETC2 is newer and handles ETC1 (no alpha capability), so check for first.\n    var texturesSupported = new Array();\n\n    if (this._caps.astc) {\n      texturesSupported.push('-astc.ktx');\n    }\n\n    if (this._caps.s3tc) {\n      texturesSupported.push('-dxt.ktx');\n    }\n\n    if (this._caps.pvrtc) {\n      texturesSupported.push('-pvrtc.ktx');\n    }\n\n    if (this._caps.etc2) {\n      texturesSupported.push('-etc2.ktx');\n    }\n\n    if (this._caps.etc1) {\n      texturesSupported.push('-etc1.ktx');\n    }\n\n    return texturesSupported;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Engine.prototype, \"textureFormatInUse\", {\n  get: function () {\n    return this._textureFormatInUse || null;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nEngine.prototype.setCompressedTextureExclusions = function (skippedFiles) {\n  this._excludedCompressedTextures = skippedFiles;\n};\n\nEngine.prototype.setTextureFormatToUse = function (formatsAvailable) {\n  var texturesSupported = this.texturesSupported;\n\n  for (var i = 0, len1 = texturesSupported.length; i < len1; i++) {\n    for (var j = 0, len2 = formatsAvailable.length; j < len2; j++) {\n      if (texturesSupported[i] === formatsAvailable[j].toLowerCase()) {\n        this._transformTextureUrl = transformTextureUrl.bind(this);\n        return this._textureFormatInUse = texturesSupported[i];\n      }\n    }\n  } // actively set format to nothing, to allow this to be called more than once\n  // and possibly fail the 2nd time\n\n\n  this._textureFormatInUse = \"\";\n  this._transformTextureUrl = null;\n  return null;\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/Extensions/engine.textureSelector.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from '../../types';\r\nimport { Engine } from '../engine';\r\n\r\ndeclare module \"../../Engines/engine\" {\r\n    export interface Engine {\r\n        /** @hidden */\r\n        _excludedCompressedTextures: string[];\r\n\r\n        /** @hidden */\r\n        _textureFormatInUse: string;\r\n\r\n        /**\r\n         * Gets the list of texture formats supported\r\n         */\r\n        readonly texturesSupported: Array<string>;\r\n\r\n        /**\r\n         * Gets the texture format in use\r\n         */\r\n        readonly textureFormatInUse: Nullable<string>;\r\n\r\n        /**\r\n         * Set the compressed texture extensions or file names to skip.\r\n         *\r\n         * @param skippedFiles defines the list of those texture files you want to skip\r\n         * Example: [\".dds\", \".env\", \"myfile.png\"]\r\n         */\r\n        setCompressedTextureExclusions(skippedFiles: Array<string>): void;\r\n\r\n        /**\r\n         * Set the compressed texture format to use, based on the formats you have, and the formats\r\n         * supported by the hardware / browser.\r\n         *\r\n         * Khronos Texture Container (.ktx) files are used to support this.  This format has the\r\n         * advantage of being specifically designed for OpenGL.  Header elements directly correspond\r\n         * to API arguments needed to compressed textures.  This puts the burden on the container\r\n         * generator to house the arcane code for determining these for current & future formats.\r\n         *\r\n         * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\r\n         * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\r\n         *\r\n         * Note: The result of this call is not taken into account when a texture is base64.\r\n         *\r\n         * @param formatsAvailable defines the list of those format families you have created\r\n         * on your server.  Syntax: '-' + format family + '.ktx'.  (Case and order do not matter.)\r\n         *\r\n         * Current families are astc, dxt, pvrtc, etc2, & etc1.\r\n         * @returns The extension selected.\r\n         */\r\n        setTextureFormatToUse(formatsAvailable: Array<string>): Nullable<string>;\r\n    }\r\n}\r\n\r\nfunction transformTextureUrl(this: Engine, url: string): string {\r\n    const excludeFn = (entry: string) => {\r\n        const strRegExPattern: string = '\\\\b' + entry + '\\\\b';\r\n        return (url && (url === entry || url.match(new RegExp(strRegExPattern, 'g'))));\r\n    };\r\n\r\n    if (this._excludedCompressedTextures && this._excludedCompressedTextures.some(excludeFn)) {\r\n        return url;\r\n    }\r\n\r\n    const lastDot = url.lastIndexOf('.');\r\n    const lastQuestionMark = url.lastIndexOf('?');\r\n    const querystring = lastQuestionMark > -1 ? url.substring(lastQuestionMark, url.length) : '';\r\n    return (lastDot > -1 ? url.substring(0, lastDot) : url) + this._textureFormatInUse + querystring;\r\n}\r\n\r\nObject.defineProperty(Engine.prototype, \"texturesSupported\", {\r\n    get: function(this: Engine) {\r\n        // Intelligently add supported compressed formats in order to check for.\r\n        // Check for ASTC support first as it is most powerful and to be very cross platform.\r\n        // Next PVRTC & DXT, which are probably superior to ETC1/2.\r\n        // Likely no hardware which supports both PVR & DXT, so order matters little.\r\n        // ETC2 is newer and handles ETC1 (no alpha capability), so check for first.\r\n        const texturesSupported = new Array<string>();\r\n        if (this._caps.astc) { texturesSupported.push('-astc.ktx'); }\r\n        if (this._caps.s3tc) { texturesSupported.push('-dxt.ktx'); }\r\n        if (this._caps.pvrtc) { texturesSupported.push('-pvrtc.ktx'); }\r\n        if (this._caps.etc2) { texturesSupported.push('-etc2.ktx'); }\r\n        if (this._caps.etc1) { texturesSupported.push('-etc1.ktx'); }\r\n        return texturesSupported;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\nObject.defineProperty(Engine.prototype, \"textureFormatInUse\", {\r\n    get: function(this: Engine) {\r\n        return this._textureFormatInUse || null;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\nEngine.prototype.setCompressedTextureExclusions = function(skippedFiles: Array<string>): void {\r\n    this._excludedCompressedTextures = skippedFiles;\r\n};\r\n\r\nEngine.prototype.setTextureFormatToUse = function(formatsAvailable: Array<string>): Nullable<string> {\r\n    const texturesSupported = this.texturesSupported;\r\n    for (let i = 0, len1 = texturesSupported.length; i < len1; i++) {\r\n        for (let j = 0, len2 = formatsAvailable.length; j < len2; j++) {\r\n            if (texturesSupported[i] === formatsAvailable[j].toLowerCase()) {\r\n                this._transformTextureUrl = transformTextureUrl.bind(this);\r\n                return this._textureFormatInUse = texturesSupported[i];\r\n            }\r\n        }\r\n    }\r\n    // actively set format to nothing, to allow this to be called more than once\r\n    // and possibly fail the 2nd time\r\n    this._textureFormatInUse = \"\";\r\n    this._transformTextureUrl = null;\r\n    return null;\r\n};\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}