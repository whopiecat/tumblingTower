{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector\";\nimport { _DevTools } from '../Misc/devTools';\n/**\r\n * Class used to control physics engine\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar PhysicsEngine =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Physics Engine\r\n   * @param gravity defines the gravity vector used by the simulation\r\n   * @param _physicsPlugin defines the plugin to use (CannonJS by default)\r\n   */\n  function PhysicsEngine(gravity, _physicsPlugin) {\n    if (_physicsPlugin === void 0) {\n      _physicsPlugin = PhysicsEngine.DefaultPluginFactory();\n    }\n\n    this._physicsPlugin = _physicsPlugin;\n    this._impostors = [];\n    this._joints = [];\n    this._subTimeStep = 0;\n\n    if (!this._physicsPlugin.isSupported()) {\n      throw new Error(\"Physics Engine \" + this._physicsPlugin.name + \" cannot be found. \" + \"Please make sure it is included.\");\n    }\n\n    gravity = gravity || new Vector3(0, -9.807, 0);\n    this.setGravity(gravity);\n    this.setTimeStep();\n  }\n  /**\r\n   * Factory used to create the default physics plugin.\r\n   * @returns The default physics plugin\r\n   */\n\n\n  PhysicsEngine.DefaultPluginFactory = function () {\n    throw _DevTools.WarnImport(\"CannonJSPlugin\");\n  };\n  /**\r\n   * Sets the gravity vector used by the simulation\r\n   * @param gravity defines the gravity vector to use\r\n   */\n\n\n  PhysicsEngine.prototype.setGravity = function (gravity) {\n    this.gravity = gravity;\n\n    this._physicsPlugin.setGravity(this.gravity);\n  };\n  /**\r\n   * Set the time step of the physics engine.\r\n   * Default is 1/60.\r\n   * To slow it down, enter 1/600 for example.\r\n   * To speed it up, 1/30\r\n   * @param newTimeStep defines the new timestep to apply to this world.\r\n   */\n\n\n  PhysicsEngine.prototype.setTimeStep = function (newTimeStep) {\n    if (newTimeStep === void 0) {\n      newTimeStep = 1 / 60;\n    }\n\n    this._physicsPlugin.setTimeStep(newTimeStep);\n  };\n  /**\r\n   * Get the time step of the physics engine.\r\n   * @returns the current time step\r\n   */\n\n\n  PhysicsEngine.prototype.getTimeStep = function () {\n    return this._physicsPlugin.getTimeStep();\n  };\n  /**\r\n   * Set the sub time step of the physics engine.\r\n   * Default is 0 meaning there is no sub steps\r\n   * To increase physics resolution precision, set a small value (like 1 ms)\r\n   * @param subTimeStep defines the new sub timestep used for physics resolution.\r\n   */\n\n\n  PhysicsEngine.prototype.setSubTimeStep = function (subTimeStep) {\n    if (subTimeStep === void 0) {\n      subTimeStep = 0;\n    }\n\n    this._subTimeStep = subTimeStep;\n  };\n  /**\r\n   * Get the sub time step of the physics engine.\r\n   * @returns the current sub time step\r\n   */\n\n\n  PhysicsEngine.prototype.getSubTimeStep = function () {\n    return this._subTimeStep;\n  };\n  /**\r\n   * Release all resources\r\n   */\n\n\n  PhysicsEngine.prototype.dispose = function () {\n    this._impostors.forEach(function (impostor) {\n      impostor.dispose();\n    });\n\n    this._physicsPlugin.dispose();\n  };\n  /**\r\n   * Gets the name of the current physics plugin\r\n   * @returns the name of the plugin\r\n   */\n\n\n  PhysicsEngine.prototype.getPhysicsPluginName = function () {\n    return this._physicsPlugin.name;\n  };\n  /**\r\n   * Adding a new impostor for the impostor tracking.\r\n   * This will be done by the impostor itself.\r\n   * @param impostor the impostor to add\r\n   */\n\n\n  PhysicsEngine.prototype.addImpostor = function (impostor) {\n    impostor.uniqueId = this._impostors.push(impostor); //if no parent, generate the body\n\n    if (!impostor.parent) {\n      this._physicsPlugin.generatePhysicsBody(impostor);\n    }\n  };\n  /**\r\n   * Remove an impostor from the engine.\r\n   * This impostor and its mesh will not longer be updated by the physics engine.\r\n   * @param impostor the impostor to remove\r\n   */\n\n\n  PhysicsEngine.prototype.removeImpostor = function (impostor) {\n    var index = this._impostors.indexOf(impostor);\n\n    if (index > -1) {\n      var removed = this._impostors.splice(index, 1); //Is it needed?\n\n\n      if (removed.length) {\n        this.getPhysicsPlugin().removePhysicsBody(impostor);\n      }\n    }\n  };\n  /**\r\n   * Add a joint to the physics engine\r\n   * @param mainImpostor defines the main impostor to which the joint is added.\r\n   * @param connectedImpostor defines the impostor that is connected to the main impostor using this joint\r\n   * @param joint defines the joint that will connect both impostors.\r\n   */\n\n\n  PhysicsEngine.prototype.addJoint = function (mainImpostor, connectedImpostor, joint) {\n    var impostorJoint = {\n      mainImpostor: mainImpostor,\n      connectedImpostor: connectedImpostor,\n      joint: joint\n    };\n    joint.physicsPlugin = this._physicsPlugin;\n\n    this._joints.push(impostorJoint);\n\n    this._physicsPlugin.generateJoint(impostorJoint);\n  };\n  /**\r\n   * Removes a joint from the simulation\r\n   * @param mainImpostor defines the impostor used with the joint\r\n   * @param connectedImpostor defines the other impostor connected to the main one by the joint\r\n   * @param joint defines the joint to remove\r\n   */\n\n\n  PhysicsEngine.prototype.removeJoint = function (mainImpostor, connectedImpostor, joint) {\n    var matchingJoints = this._joints.filter(function (impostorJoint) {\n      return impostorJoint.connectedImpostor === connectedImpostor && impostorJoint.joint === joint && impostorJoint.mainImpostor === mainImpostor;\n    });\n\n    if (matchingJoints.length) {\n      this._physicsPlugin.removeJoint(matchingJoints[0]); //TODO remove it from the list as well\n\n    }\n  };\n  /**\r\n   * Called by the scene. No need to call it.\r\n   * @param delta defines the timespam between frames\r\n   */\n\n\n  PhysicsEngine.prototype._step = function (delta) {\n    var _this = this; //check if any mesh has no body / requires an update\n\n\n    this._impostors.forEach(function (impostor) {\n      if (impostor.isBodyInitRequired()) {\n        _this._physicsPlugin.generatePhysicsBody(impostor);\n      }\n    });\n\n    if (delta > 0.1) {\n      delta = 0.1;\n    } else if (delta <= 0) {\n      delta = 1.0 / 60.0;\n    }\n\n    this._physicsPlugin.executeStep(delta, this._impostors);\n  };\n  /**\r\n   * Gets the current plugin used to run the simulation\r\n   * @returns current plugin\r\n   */\n\n\n  PhysicsEngine.prototype.getPhysicsPlugin = function () {\n    return this._physicsPlugin;\n  };\n  /**\r\n   * Gets the list of physic impostors\r\n   * @returns an array of PhysicsImpostor\r\n   */\n\n\n  PhysicsEngine.prototype.getImpostors = function () {\n    return this._impostors;\n  };\n  /**\r\n   * Gets the impostor for a physics enabled object\r\n   * @param object defines the object impersonated by the impostor\r\n   * @returns the PhysicsImpostor or null if not found\r\n   */\n\n\n  PhysicsEngine.prototype.getImpostorForPhysicsObject = function (object) {\n    for (var i = 0; i < this._impostors.length; ++i) {\n      if (this._impostors[i].object === object) {\n        return this._impostors[i];\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Gets the impostor for a physics body object\r\n   * @param body defines physics body used by the impostor\r\n   * @returns the PhysicsImpostor or null if not found\r\n   */\n\n\n  PhysicsEngine.prototype.getImpostorWithPhysicsBody = function (body) {\n    for (var i = 0; i < this._impostors.length; ++i) {\n      if (this._impostors[i].physicsBody === body) {\n        return this._impostors[i];\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Does a raycast in the physics world\r\n   * @param from when should the ray start?\r\n   * @param to when should the ray end?\r\n   * @returns PhysicsRaycastResult\r\n   */\n\n\n  PhysicsEngine.prototype.raycast = function (from, to) {\n    return this._physicsPlugin.raycast(from, to);\n  };\n  /**\r\n   * Global value used to control the smallest number supported by the simulation\r\n   */\n\n\n  PhysicsEngine.Epsilon = 0.001;\n  return PhysicsEngine;\n}();\n\nexport { PhysicsEngine };","map":{"version":3,"sources":["../../../sourceES6/core/Physics/physicsEngine.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,QAAwB,sBAAxB;AAKA,SAAS,SAAT,QAA0B,kBAA1B;AAEA;;;;;AAIA,IAAA,aAAA;AAAA;AAAA,YAAA;AAuBI;;;;;AAKA,WAAA,aAAA,CAAY,OAAZ,EAAgD,cAAhD,EAA2H;AAA3E,QAAA,cAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,cAAA,GAAuC,aAAa,CAAC,oBAAd,EAAvC;AAA2E;;AAA3E,SAAA,cAAA,GAAA,cAAA;AAtBxC,SAAA,UAAA,GAAqC,EAArC;AACA,SAAA,OAAA,GAAuC,EAAvC;AACA,SAAA,YAAA,GAAuB,CAAvB;;AAqBJ,QAAI,CAAC,KAAK,cAAL,CAAoB,WAApB,EAAL,EAAwC;AACpC,YAAM,IAAI,KAAJ,CAAU,oBAAoB,KAAK,cAAL,CAAoB,IAAxC,GAA+C,oBAA/C,GACV,kCADA,CAAN;AAEH;;AACD,IAAA,OAAO,GAAG,OAAO,IAAI,IAAI,OAAJ,CAAY,CAAZ,EAAe,CAAC,KAAhB,EAAuB,CAAvB,CAArB;AACA,SAAK,UAAL,CAAgB,OAAhB;AACA,SAAK,WAAL;AACH;AArBD;;;;;;AAIc,EAAA,aAAA,CAAA,oBAAA,GAAd,YAAA;AACI,UAAM,SAAS,CAAC,UAAV,CAAqB,gBAArB,CAAN;AACH,GAFa;AAmBd;;;;;;AAIO,EAAA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,OAAlB,EAAkC;AAC9B,SAAK,OAAL,GAAe,OAAf;;AACA,SAAK,cAAL,CAAoB,UAApB,CAA+B,KAAK,OAApC;AACH,GAHM;AAKP;;;;;;;;;AAOO,EAAA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,WAAnB,EAA+C;AAA5B,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAsB,IAAI,EAA1B;AAA4B;;AAC3C,SAAK,cAAL,CAAoB,WAApB,CAAgC,WAAhC;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACI,WAAO,KAAK,cAAL,CAAoB,WAApB,EAAP;AACH,GAFM;AAIP;;;;;;;;AAMO,EAAA,aAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,WAAtB,EAA6C;AAAvB,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,CAAA;AAAuB;;AACzC,SAAK,YAAL,GAAoB,WAApB;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,aAAA,CAAA,SAAA,CAAA,cAAA,GAAP,YAAA;AACI,WAAO,KAAK,YAAZ;AACH,GAFM;AAIP;;;;;AAGO,EAAA,aAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,SAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAS,QAAT,EAAiB;AACrC,MAAA,QAAQ,CAAC,OAAT;AACH,KAFD;;AAGA,SAAK,cAAL,CAAoB,OAApB;AACH,GALM;AAOP;;;;;;AAIO,EAAA,aAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,YAAA;AACI,WAAO,KAAK,cAAL,CAAoB,IAA3B;AACH,GAFM;AAIP;;;;;;;AAKO,EAAA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,QAAnB,EAA4C;AACxC,IAAA,QAAQ,CAAC,QAAT,GAAoB,KAAK,UAAL,CAAgB,IAAhB,CAAqB,QAArB,CAApB,CADwC,CAExC;;AACA,QAAI,CAAC,QAAQ,CAAC,MAAd,EAAsB;AAClB,WAAK,cAAL,CAAoB,mBAApB,CAAwC,QAAxC;AACH;AACJ,GANM;AAQP;;;;;;;AAKO,EAAA,aAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,QAAtB,EAA+C;AAC3C,QAAI,KAAK,GAAG,KAAK,UAAL,CAAgB,OAAhB,CAAwB,QAAxB,CAAZ;;AACA,QAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ,UAAI,OAAO,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAuB,KAAvB,EAA8B,CAA9B,CAAd,CADY,CAEZ;;;AACA,UAAI,OAAO,CAAC,MAAZ,EAAoB;AAChB,aAAK,gBAAL,GAAwB,iBAAxB,CAA0C,QAA1C;AACH;AACJ;AACJ,GATM;AAWP;;;;;;;;AAMO,EAAA,aAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,YAAhB,EAA+C,iBAA/C,EAAmF,KAAnF,EAAsG;AAClG,QAAI,aAAa,GAAG;AAChB,MAAA,YAAY,EAAE,YADE;AAEhB,MAAA,iBAAiB,EAAE,iBAFH;AAGhB,MAAA,KAAK,EAAE;AAHS,KAApB;AAKA,IAAA,KAAK,CAAC,aAAN,GAAsB,KAAK,cAA3B;;AACA,SAAK,OAAL,CAAa,IAAb,CAAkB,aAAlB;;AACA,SAAK,cAAL,CAAoB,aAApB,CAAkC,aAAlC;AACH,GATM;AAWP;;;;;;;;AAMO,EAAA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,YAAnB,EAAkD,iBAAlD,EAAsF,KAAtF,EAAyG;AACrG,QAAI,cAAc,GAAG,KAAK,OAAL,CAAa,MAAb,CAAoB,UAAS,aAAT,EAAsB;AAC3D,aAAQ,aAAa,CAAC,iBAAd,KAAoC,iBAApC,IACD,aAAa,CAAC,KAAd,KAAwB,KADvB,IAED,aAAa,CAAC,YAAd,KAA+B,YAFtC;AAGH,KAJoB,CAArB;;AAKA,QAAI,cAAc,CAAC,MAAnB,EAA2B;AACvB,WAAK,cAAL,CAAoB,WAApB,CAAgC,cAAc,CAAC,CAAD,CAA9C,EADuB,CAEvB;;AAEH;AACJ,GAXM;AAaP;;;;;;AAIO,EAAA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,KAAb,EAA0B;AAA1B,QAAA,KAAA,GAAA,IAAA,CAA0B,CACtB;;;AACA,SAAK,UAAL,CAAgB,OAAhB,CAAwB,UAAC,QAAD,EAAS;AAE7B,UAAI,QAAQ,CAAC,kBAAT,EAAJ,EAAmC;AAC/B,QAAA,KAAI,CAAC,cAAL,CAAoB,mBAApB,CAAwC,QAAxC;AACH;AACJ,KALD;;AAOA,QAAI,KAAK,GAAG,GAAZ,EAAiB;AACb,MAAA,KAAK,GAAG,GAAR;AACH,KAFD,MAEO,IAAI,KAAK,IAAI,CAAb,EAAgB;AACnB,MAAA,KAAK,GAAG,MAAM,IAAd;AACH;;AAED,SAAK,cAAL,CAAoB,WAApB,CAAgC,KAAhC,EAAuC,KAAK,UAA5C;AACH,GAhBM;AAkBP;;;;;;AAIO,EAAA,aAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,YAAA;AACI,WAAO,KAAK,cAAZ;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,aAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,KAAK,UAAZ;AACH,GAFM;AAIP;;;;;;;AAKO,EAAA,aAAA,CAAA,SAAA,CAAA,2BAAA,GAAP,UAAmC,MAAnC,EAAgE;AAC5D,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,UAAL,CAAgB,MAApC,EAA4C,EAAE,CAA9C,EAAiD;AAC7C,UAAI,KAAK,UAAL,CAAgB,CAAhB,EAAmB,MAAnB,KAA8B,MAAlC,EAA0C;AACtC,eAAO,KAAK,UAAL,CAAgB,CAAhB,CAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH,GARM;AAUP;;;;;;;AAKO,EAAA,aAAA,CAAA,SAAA,CAAA,0BAAA,GAAP,UAAkC,IAAlC,EAA2C;AACvC,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,UAAL,CAAgB,MAApC,EAA4C,EAAE,CAA9C,EAAiD;AAC7C,UAAI,KAAK,UAAL,CAAgB,CAAhB,EAAmB,WAAnB,KAAmC,IAAvC,EAA6C;AACzC,eAAO,KAAK,UAAL,CAAgB,CAAhB,CAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH,GARM;AAUP;;;;;;;;AAMO,EAAA,aAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,IAAf,EAA8B,EAA9B,EAAyC;AACrC,WAAO,KAAK,cAAL,CAAoB,OAApB,CAA4B,IAA5B,EAAkC,EAAlC,CAAP;AACH,GAFM;AAhPP;;;;;AAGc,EAAA,aAAA,CAAA,OAAA,GAAU,KAAV;AAgPlB,SAAA,aAAA;AAAC,CApPD,EAAA;;SAAa,a","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { IPhysicsEngine, PhysicsImpostorJoint, IPhysicsEnginePlugin } from \"./IPhysicsEngine\";\r\nimport { PhysicsImpostor, IPhysicsEnabledObject } from \"./physicsImpostor\";\r\nimport { PhysicsJoint } from \"./physicsJoint\";\r\nimport { PhysicsRaycastResult } from \"./physicsRaycastResult\";\r\nimport { _DevTools } from '../Misc/devTools';\r\n\r\n/**\r\n * Class used to control physics engine\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class PhysicsEngine implements IPhysicsEngine {\r\n    /**\r\n     * Global value used to control the smallest number supported by the simulation\r\n     */\r\n    public static Epsilon = 0.001;\r\n\r\n    private _impostors: Array<PhysicsImpostor> = [];\r\n    private _joints: Array<PhysicsImpostorJoint> = [];\r\n    private _subTimeStep: number = 0;\r\n\r\n    /**\r\n     * Gets the gravity vector used by the simulation\r\n     */\r\n    public gravity: Vector3;\r\n\r\n    /**\r\n     * Factory used to create the default physics plugin.\r\n     * @returns The default physics plugin\r\n     */\r\n    public static DefaultPluginFactory(): IPhysicsEnginePlugin {\r\n        throw _DevTools.WarnImport(\"CannonJSPlugin\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new Physics Engine\r\n     * @param gravity defines the gravity vector used by the simulation\r\n     * @param _physicsPlugin defines the plugin to use (CannonJS by default)\r\n     */\r\n    constructor(gravity: Nullable<Vector3>, private _physicsPlugin: IPhysicsEnginePlugin = PhysicsEngine.DefaultPluginFactory()) {\r\n        if (!this._physicsPlugin.isSupported()) {\r\n            throw new Error(\"Physics Engine \" + this._physicsPlugin.name + \" cannot be found. \"\r\n                + \"Please make sure it is included.\");\r\n        }\r\n        gravity = gravity || new Vector3(0, -9.807, 0);\r\n        this.setGravity(gravity);\r\n        this.setTimeStep();\r\n    }\r\n\r\n    /**\r\n     * Sets the gravity vector used by the simulation\r\n     * @param gravity defines the gravity vector to use\r\n     */\r\n    public setGravity(gravity: Vector3): void {\r\n        this.gravity = gravity;\r\n        this._physicsPlugin.setGravity(this.gravity);\r\n    }\r\n\r\n    /**\r\n     * Set the time step of the physics engine.\r\n     * Default is 1/60.\r\n     * To slow it down, enter 1/600 for example.\r\n     * To speed it up, 1/30\r\n     * @param newTimeStep defines the new timestep to apply to this world.\r\n     */\r\n    public setTimeStep(newTimeStep: number = 1 / 60) {\r\n        this._physicsPlugin.setTimeStep(newTimeStep);\r\n    }\r\n\r\n    /**\r\n     * Get the time step of the physics engine.\r\n     * @returns the current time step\r\n     */\r\n    public getTimeStep(): number {\r\n        return this._physicsPlugin.getTimeStep();\r\n    }\r\n\r\n    /**\r\n     * Set the sub time step of the physics engine.\r\n     * Default is 0 meaning there is no sub steps\r\n     * To increase physics resolution precision, set a small value (like 1 ms)\r\n     * @param subTimeStep defines the new sub timestep used for physics resolution.\r\n     */\r\n    public setSubTimeStep(subTimeStep: number = 0) {\r\n        this._subTimeStep = subTimeStep;\r\n    }\r\n\r\n    /**\r\n     * Get the sub time step of the physics engine.\r\n     * @returns the current sub time step\r\n     */\r\n    public getSubTimeStep() {\r\n        return this._subTimeStep;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        this._impostors.forEach(function(impostor) {\r\n            impostor.dispose();\r\n        });\r\n        this._physicsPlugin.dispose();\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the current physics plugin\r\n     * @returns the name of the plugin\r\n     */\r\n    public getPhysicsPluginName(): string {\r\n        return this._physicsPlugin.name;\r\n    }\r\n\r\n    /**\r\n     * Adding a new impostor for the impostor tracking.\r\n     * This will be done by the impostor itself.\r\n     * @param impostor the impostor to add\r\n     */\r\n    public addImpostor(impostor: PhysicsImpostor) {\r\n        impostor.uniqueId = this._impostors.push(impostor);\r\n        //if no parent, generate the body\r\n        if (!impostor.parent) {\r\n            this._physicsPlugin.generatePhysicsBody(impostor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an impostor from the engine.\r\n     * This impostor and its mesh will not longer be updated by the physics engine.\r\n     * @param impostor the impostor to remove\r\n     */\r\n    public removeImpostor(impostor: PhysicsImpostor) {\r\n        var index = this._impostors.indexOf(impostor);\r\n        if (index > -1) {\r\n            var removed = this._impostors.splice(index, 1);\r\n            //Is it needed?\r\n            if (removed.length) {\r\n                this.getPhysicsPlugin().removePhysicsBody(impostor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a joint to the physics engine\r\n     * @param mainImpostor defines the main impostor to which the joint is added.\r\n     * @param connectedImpostor defines the impostor that is connected to the main impostor using this joint\r\n     * @param joint defines the joint that will connect both impostors.\r\n     */\r\n    public addJoint(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint) {\r\n        var impostorJoint = {\r\n            mainImpostor: mainImpostor,\r\n            connectedImpostor: connectedImpostor,\r\n            joint: joint\r\n        };\r\n        joint.physicsPlugin = this._physicsPlugin;\r\n        this._joints.push(impostorJoint);\r\n        this._physicsPlugin.generateJoint(impostorJoint);\r\n    }\r\n\r\n    /**\r\n     * Removes a joint from the simulation\r\n     * @param mainImpostor defines the impostor used with the joint\r\n     * @param connectedImpostor defines the other impostor connected to the main one by the joint\r\n     * @param joint defines the joint to remove\r\n     */\r\n    public removeJoint(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint) {\r\n        var matchingJoints = this._joints.filter(function(impostorJoint) {\r\n            return (impostorJoint.connectedImpostor === connectedImpostor\r\n                && impostorJoint.joint === joint\r\n                && impostorJoint.mainImpostor === mainImpostor);\r\n        });\r\n        if (matchingJoints.length) {\r\n            this._physicsPlugin.removeJoint(matchingJoints[0]);\r\n            //TODO remove it from the list as well\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called by the scene. No need to call it.\r\n     * @param delta defines the timespam between frames\r\n     */\r\n    public _step(delta: number) {\r\n        //check if any mesh has no body / requires an update\r\n        this._impostors.forEach((impostor) => {\r\n\r\n            if (impostor.isBodyInitRequired()) {\r\n                this._physicsPlugin.generatePhysicsBody(impostor);\r\n            }\r\n        });\r\n\r\n        if (delta > 0.1) {\r\n            delta = 0.1;\r\n        } else if (delta <= 0) {\r\n            delta = 1.0 / 60.0;\r\n        }\r\n\r\n        this._physicsPlugin.executeStep(delta, this._impostors);\r\n    }\r\n\r\n    /**\r\n     * Gets the current plugin used to run the simulation\r\n     * @returns current plugin\r\n     */\r\n    public getPhysicsPlugin(): IPhysicsEnginePlugin {\r\n        return this._physicsPlugin;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of physic impostors\r\n     * @returns an array of PhysicsImpostor\r\n     */\r\n    public getImpostors(): Array<PhysicsImpostor> {\r\n        return this._impostors;\r\n    }\r\n\r\n    /**\r\n     * Gets the impostor for a physics enabled object\r\n     * @param object defines the object impersonated by the impostor\r\n     * @returns the PhysicsImpostor or null if not found\r\n     */\r\n    public getImpostorForPhysicsObject(object: IPhysicsEnabledObject): Nullable<PhysicsImpostor> {\r\n        for (var i = 0; i < this._impostors.length; ++i) {\r\n            if (this._impostors[i].object === object) {\r\n                return this._impostors[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the impostor for a physics body object\r\n     * @param body defines physics body used by the impostor\r\n     * @returns the PhysicsImpostor or null if not found\r\n     */\r\n    public getImpostorWithPhysicsBody(body: any): Nullable<PhysicsImpostor> {\r\n        for (var i = 0; i < this._impostors.length; ++i) {\r\n            if (this._impostors[i].physicsBody === body) {\r\n                return this._impostors[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Does a raycast in the physics world\r\n     * @param from when should the ray start?\r\n     * @param to when should the ray end?\r\n     * @returns PhysicsRaycastResult\r\n     */\r\n    public raycast(from: Vector3, to: Vector3): PhysicsRaycastResult {\r\n        return this._physicsPlugin.raycast(from, to);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}