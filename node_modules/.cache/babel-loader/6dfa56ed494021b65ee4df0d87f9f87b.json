{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\nimport { ReflectionTextureBaseBlock } from '../Dual/reflectionTextureBaseBlock';\nimport { Texture } from '../../../Textures/texture';\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\nimport { Scalar } from '../../../../Maths/math.scalar';\n/**\r\n * Block used to implement the reflection module of the PBR material\r\n */\n\nvar ReflectionBlock =\n/** @class */\nfunction (_super) {\n  __extends(ReflectionBlock, _super);\n  /**\r\n   * Create a new ReflectionBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function ReflectionBlock(name) {\n    var _this = _super.call(this, name) || this;\n    /**\r\n     * Defines if the material uses spherical harmonics vs spherical polynomials for the\r\n     * diffuse part of the IBL.\r\n     */\n\n\n    _this.useSphericalHarmonics = true;\n    /**\r\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\r\n     */\n\n    _this.forceIrradianceInFragment = false;\n    _this._isUnique = true;\n\n    _this.registerInput(\"position\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"reflection\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"reflection\", _this, NodeMaterialConnectionPointDirection.Output, ReflectionBlock, \"ReflectionBlock\"));\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  ReflectionBlock.prototype.getClassName = function () {\n    return \"ReflectionBlock\";\n  };\n\n  Object.defineProperty(ReflectionBlock.prototype, \"position\", {\n    /**\r\n     * Gets the position input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"worldPosition\", {\n    /**\r\n     * Gets the world position input component\r\n     */\n    get: function () {\n      return this.worldPositionConnectionPoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"worldNormal\", {\n    /**\r\n     * Gets the world normal input component\r\n     */\n    get: function () {\n      return this.worldNormalConnectionPoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"world\", {\n    /**\r\n     * Gets the world input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"cameraPosition\", {\n    /**\r\n    * Gets the camera (or eye) position component\r\n    */\n    get: function () {\n      return this.cameraPositionConnectionPoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"view\", {\n    /**\r\n     * Gets the view input component\r\n     */\n    get: function () {\n      return this.viewConnectionPoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"color\", {\n    /**\r\n     * Gets the color input component\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"reflection\", {\n    /**\r\n     * Gets the reflection object output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"hasTexture\", {\n    /**\r\n     * Returns true if the block has a texture (either its own texture or the environment texture from the scene, if set)\r\n     */\n    get: function () {\n      return !!this._getTexture();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"reflectionColor\", {\n    /**\r\n     * Gets the reflection color (either the name of the variable if the color input is connected, else a default value)\r\n     */\n    get: function () {\n      return this.color.isConnected ? this.color.associatedVariableName : \"vec3(1., 1., 1.)\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ReflectionBlock.prototype._getTexture = function () {\n    if (this.texture) {\n      return this.texture;\n    }\n\n    return this._scene.environmentTexture;\n  };\n\n  ReflectionBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    _super.prototype.prepareDefines.call(this, mesh, nodeMaterial, defines);\n\n    var reflectionTexture = this._getTexture();\n\n    var reflection = reflectionTexture && reflectionTexture.getTextureMatrix;\n    defines.setValue(\"REFLECTION\", reflection, true);\n\n    if (!reflection) {\n      return;\n    }\n\n    defines.setValue(this._defineLODReflectionAlpha, reflectionTexture.lodLevelInAlpha, true);\n    defines.setValue(this._defineLinearSpecularReflection, reflectionTexture.linearSpecularLOD, true);\n    defines.setValue(this._defineOppositeZ, this._scene.useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ, true);\n    defines.setValue(\"SPHERICAL_HARMONICS\", this.useSphericalHarmonics, true);\n    defines.setValue(\"GAMMAREFLECTION\", reflectionTexture.gammaSpace, true);\n    defines.setValue(\"RGBDREFLECTION\", reflectionTexture.isRGBD, true);\n\n    if (reflectionTexture && reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\n      if (reflectionTexture.isCube) {\n        defines.setValue(\"USESPHERICALFROMREFLECTIONMAP\", true);\n        defines.setValue(\"USEIRRADIANCEMAP\", false);\n\n        if (this.forceIrradianceInFragment || this._scene.getEngine().getCaps().maxVaryingVectors <= 8) {\n          defines.setValue(\"USESPHERICALINVERTEX\", false);\n        } else {\n          defines.setValue(\"USESPHERICALINVERTEX\", true);\n        }\n      }\n    }\n  };\n\n  ReflectionBlock.prototype.bind = function (effect, nodeMaterial, mesh, subMesh) {\n    _super.prototype.bind.call(this, effect, nodeMaterial, mesh);\n\n    var reflectionTexture = this._getTexture();\n\n    if (!reflectionTexture || !subMesh) {\n      return;\n    }\n\n    if (reflectionTexture.isCube) {\n      effect.setTexture(this._cubeSamplerName, reflectionTexture);\n    } else {\n      effect.setTexture(this._2DSamplerName, reflectionTexture);\n    }\n\n    var width = reflectionTexture.getSize().width;\n    effect.setFloat3(this._vReflectionMicrosurfaceInfosName, width, reflectionTexture.lodGenerationScale, reflectionTexture.lodGenerationOffset);\n    effect.setFloat2(this._vReflectionFilteringInfoName, width, Scalar.Log2(width));\n    var defines = subMesh._materialDefines;\n    var polynomials = reflectionTexture.sphericalPolynomial;\n\n    if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\n      if (defines.SPHERICAL_HARMONICS) {\n        var preScaledHarmonics = polynomials.preScaledHarmonics;\n        effect.setVector3(\"vSphericalL00\", preScaledHarmonics.l00);\n        effect.setVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\n        effect.setVector3(\"vSphericalL10\", preScaledHarmonics.l10);\n        effect.setVector3(\"vSphericalL11\", preScaledHarmonics.l11);\n        effect.setVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\n        effect.setVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\n        effect.setVector3(\"vSphericalL20\", preScaledHarmonics.l20);\n        effect.setVector3(\"vSphericalL21\", preScaledHarmonics.l21);\n        effect.setVector3(\"vSphericalL22\", preScaledHarmonics.l22);\n      } else {\n        effect.setFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\n        effect.setFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\n        effect.setFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\n        effect.setFloat3(\"vSphericalXX_ZZ\", polynomials.xx.x - polynomials.zz.x, polynomials.xx.y - polynomials.zz.y, polynomials.xx.z - polynomials.zz.z);\n        effect.setFloat3(\"vSphericalYY_ZZ\", polynomials.yy.x - polynomials.zz.x, polynomials.yy.y - polynomials.zz.y, polynomials.yy.z - polynomials.zz.z);\n        effect.setFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\n        effect.setFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\n        effect.setFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\n        effect.setFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\n      }\n    }\n  };\n  /**\r\n   * Gets the code to inject in the vertex shader\r\n   * @param state current state of the node material building\r\n   * @returns the shader code\r\n   */\n\n\n  ReflectionBlock.prototype.handleVertexSide = function (state) {\n    var code = _super.prototype.handleVertexSide.call(this, state);\n\n    state._emitFunctionFromInclude(\"harmonicsFunctions\", \"//\" + this.name, {\n      replaceStrings: [{\n        search: /uniform vec3 vSphericalL00;[\\s\\S]*?uniform vec3 vSphericalL22;/g,\n        replace: \"\"\n      }, {\n        search: /uniform vec3 vSphericalX;[\\s\\S]*?uniform vec3 vSphericalZX;/g,\n        replace: \"\"\n      }]\n    });\n\n    var reflectionVectorName = state._getFreeVariableName(\"reflectionVector\");\n\n    this._vEnvironmentIrradianceName = state._getFreeVariableName(\"vEnvironmentIrradiance\");\n\n    state._emitVaryingFromString(this._vEnvironmentIrradianceName, \"vec3\", \"defined(USESPHERICALFROMREFLECTIONMAP) && defined(USESPHERICALINVERTEX)\");\n\n    state._emitUniformFromString(\"vSphericalL00\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL1_1\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL10\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL11\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL2_2\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL2_1\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL20\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL21\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL22\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalX\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalY\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalXX_ZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalYY_ZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalXY\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalYZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalZX\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    code += \"#if defined(USESPHERICALFROMREFLECTIONMAP) && defined(USESPHERICALINVERTEX)\\n                vec3 \" + reflectionVectorName + \" = vec3(\" + this._reflectionMatrixName + \" * vec4(normalize(\" + this.worldNormal.associatedVariableName + \").xyz, 0)).xyz;\\n                #ifdef \" + this._defineOppositeZ + \"\\n                    \" + reflectionVectorName + \".z *= -1.0;\\n                #endif\\n                \" + this._vEnvironmentIrradianceName + \" = computeEnvironmentIrradiance(\" + reflectionVectorName + \");\\n            #endif\\r\\n\";\n    return code;\n  };\n  /**\r\n   * Gets the main code of the block (fragment side)\r\n   * @param state current state of the node material building\r\n   * @param normalVarName name of the existing variable corresponding to the normal\r\n   * @returns the shader code\r\n   */\n\n\n  ReflectionBlock.prototype.getCode = function (state, normalVarName) {\n    var code = \"\";\n    this.handleFragmentSideInits(state);\n\n    state._emitFunctionFromInclude(\"harmonicsFunctions\", \"//\" + this.name, {\n      replaceStrings: [{\n        search: /uniform vec3 vSphericalL00;[\\s\\S]*?uniform vec3 vSphericalL22;/g,\n        replace: \"\"\n      }, {\n        search: /uniform vec3 vSphericalX;[\\s\\S]*?uniform vec3 vSphericalZX;/g,\n        replace: \"\"\n      }]\n    });\n\n    state._emitFunction(\"sampleReflection\", \"\\n            #ifdef \" + this._define3DName + \"\\n                #define sampleReflection(s, c) textureCube(s, c)\\n            #else\\n                #define sampleReflection(s, c) texture2D(s, c)\\n            #endif\\r\\n\", \"//\" + this.name);\n\n    state._emitFunction(\"sampleReflectionLod\", \"\\n            #ifdef \" + this._define3DName + \"\\n                #define sampleReflectionLod(s, c, l) textureCubeLodEXT(s, c, l)\\n            #else\\n                #define sampleReflectionLod(s, c, l) texture2DLodEXT(s, c, l)\\n            #endif\\r\\n\", \"//\" + this.name);\n\n    var computeReflectionCoordsFunc = \"\\n            vec3 computeReflectionCoordsPBR(vec4 worldPos, vec3 worldNormal) {\\n                \" + this.handleFragmentSideCodeReflectionCoords('worldNormal', 'worldPos', true) + \"\\n                return \" + this._reflectionVectorName + \";\\n            }\\r\\n\";\n\n    state._emitFunction(\"computeReflectionCoordsPBR\", computeReflectionCoordsFunc, \"//\" + this.name);\n\n    this._vReflectionMicrosurfaceInfosName = state._getFreeVariableName(\"vReflectionMicrosurfaceInfos\");\n\n    state._emitUniformFromString(this._vReflectionMicrosurfaceInfosName, \"vec3\");\n\n    this._vReflectionInfosName = state._getFreeVariableName(\"vReflectionInfos\");\n    this._vReflectionFilteringInfoName = state._getFreeVariableName(\"vReflectionFilteringInfo\");\n\n    state._emitUniformFromString(this._vReflectionFilteringInfoName, \"vec2\");\n\n    code += \"#ifdef REFLECTION\\n            vec2 \" + this._vReflectionInfosName + \" = vec2(1., 0.);\\n\\n            reflectionOutParams reflectionOut;\\n\\n            reflectionBlock(\\n                \" + (\"v_\" + this.worldPosition.associatedVariableName + \".xyz\") + \",\\n                \" + normalVarName + \",\\n                alphaG,\\n                \" + this._vReflectionMicrosurfaceInfosName + \",\\n                \" + this._vReflectionInfosName + \",\\n                \" + this.reflectionColor + \",\\n            #ifdef ANISOTROPIC\\n                anisotropicOut,\\n            #endif\\n            #if defined(\" + this._defineLODReflectionAlpha + \") && !defined(\" + this._defineSkyboxName + \")\\n                NdotVUnclamped,\\n            #endif\\n            #ifdef \" + this._defineLinearSpecularReflection + \"\\n                roughness,\\n            #endif\\n            #ifdef \" + this._define3DName + \"\\n                \" + this._cubeSamplerName + \",\\n            #else\\n                \" + this._2DSamplerName + \",\\n            #endif\\n            #if defined(NORMAL) && defined(USESPHERICALINVERTEX)\\n                \" + this._vEnvironmentIrradianceName + \",\\n            #endif\\n            #ifdef USESPHERICALFROMREFLECTIONMAP\\n                #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\\n                    \" + this._reflectionMatrixName + \",\\n                #endif\\n            #endif\\n            #ifdef USEIRRADIANCEMAP\\n                irradianceSampler, // ** not handled **\\n            #endif\\n            #ifndef LODBASEDMICROSFURACE\\n                #ifdef \" + this._define3DName + \"\\n                    \" + this._cubeSamplerName + \",\\n                    \" + this._cubeSamplerName + \",\\n                #else\\n                    \" + this._2DSamplerName + \",\\n                    \" + this._2DSamplerName + \",\\n                #endif\\n            #endif\\n            #ifdef REALTIME_FILTERING\\n                \" + this._vReflectionFilteringInfoName + \",\\n            #endif\\n                reflectionOut\\n            );\\n        #endif\\r\\n\";\n    return code;\n  };\n\n  ReflectionBlock.prototype._buildBlock = function (state) {\n    this._scene = state.sharedData.scene;\n\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      this._defineLODReflectionAlpha = state._getFreeDefineName(\"LODINREFLECTIONALPHA\");\n      this._defineLinearSpecularReflection = state._getFreeDefineName(\"LINEARSPECULARREFLECTION\");\n    }\n\n    return this;\n  };\n\n  ReflectionBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this);\n\n    if (this.texture) {\n      codeString += this._codeVariableName + \".texture.gammaSpace = \" + this.texture.gammaSpace + \");\\r\\n\";\n    }\n\n    codeString += this._codeVariableName + \".useSphericalHarmonics = \" + this.useSphericalHarmonics + \";\\r\\n\";\n    codeString += this._codeVariableName + \".forceIrradianceInFragment = \" + this.forceIrradianceInFragment + \";\\r\\n\";\n    return codeString;\n  };\n\n  ReflectionBlock.prototype.serialize = function () {\n    var _a, _b;\n\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.useSphericalHarmonics = this.useSphericalHarmonics;\n    serializationObject.forceIrradianceInFragment = this.forceIrradianceInFragment;\n    serializationObject.gammaSpace = (_b = (_a = this.texture) === null || _a === void 0 ? void 0 : _a.gammaSpace) !== null && _b !== void 0 ? _b : true;\n    return serializationObject;\n  };\n\n  ReflectionBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.useSphericalHarmonics = serializationObject.useSphericalHarmonics;\n    this.forceIrradianceInFragment = serializationObject.forceIrradianceInFragment;\n\n    if (this.texture) {\n      this.texture.gammaSpace = serializationObject.gammaSpace;\n    }\n  };\n\n  __decorate([editableInPropertyPage(\"Spherical Harmonics\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], ReflectionBlock.prototype, \"useSphericalHarmonics\", void 0);\n\n  __decorate([editableInPropertyPage(\"Force irradiance in fragment\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], ReflectionBlock.prototype, \"forceIrradianceInFragment\", void 0);\n\n  return ReflectionBlock;\n}(ReflectionTextureBaseBlock);\n\nexport { ReflectionBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.ReflectionBlock\"] = ReflectionBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/PBR/reflectionBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport { ReflectionTextureBaseBlock } from '../Dual/reflectionTextureBaseBlock';\r\nimport { AbstractMesh } from '../../../../Meshes/abstractMesh';\r\nimport { Nullable } from '../../../../types';\r\nimport { Texture } from '../../../Textures/texture';\r\nimport { BaseTexture } from '../../../Textures/baseTexture';\r\nimport { Mesh } from '../../../../Meshes/mesh';\r\nimport { SubMesh } from '../../../../Meshes/subMesh';\r\nimport { Effect } from '../../../effect';\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\nimport { Scene } from '../../../../scene';\r\nimport { Scalar } from '../../../../Maths/math.scalar';\r\n\r\n/**\r\n * Block used to implement the reflection module of the PBR material\r\n */\r\nexport class ReflectionBlock extends ReflectionTextureBaseBlock {\r\n\r\n    /** @hidden */\r\n    public _defineLODReflectionAlpha: string;\r\n    /** @hidden */\r\n    public _defineLinearSpecularReflection: string;\r\n    private _vEnvironmentIrradianceName: string;\r\n    /** @hidden */\r\n    public _vReflectionMicrosurfaceInfosName: string;\r\n    /** @hidden */\r\n    public _vReflectionInfosName: string;\r\n    /** @hidden */\r\n    public _vReflectionFilteringInfoName: string;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * The properties below are set by the main PBR block prior to calling methods of this class.\r\n     * This is to avoid having to add them as inputs here whereas they are already inputs of the main block, so already known.\r\n     * It's less burden on the user side in the editor part.\r\n    */\r\n\r\n    /** @hidden */\r\n    public worldPositionConnectionPoint: NodeMaterialConnectionPoint;\r\n    /** @hidden */\r\n    public worldNormalConnectionPoint: NodeMaterialConnectionPoint;\r\n    /** @hidden */\r\n    public cameraPositionConnectionPoint: NodeMaterialConnectionPoint;\r\n    /** @hidden */\r\n    public viewConnectionPoint: NodeMaterialConnectionPoint;\r\n\r\n    /**\r\n     * Defines if the material uses spherical harmonics vs spherical polynomials for the\r\n     * diffuse part of the IBL.\r\n     */\r\n    @editableInPropertyPage(\"Spherical Harmonics\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { \"notifiers\": { \"update\": true }})\r\n    public useSphericalHarmonics: boolean = true;\r\n\r\n    /**\r\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\r\n     */\r\n    @editableInPropertyPage(\"Force irradiance in fragment\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { \"notifiers\": { \"update\": true }})\r\n    public forceIrradianceInFragment: boolean = false;\r\n\r\n    /**\r\n     * Create a new ReflectionBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"position\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"reflection\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"reflection\", this, NodeMaterialConnectionPointDirection.Output, ReflectionBlock, \"ReflectionBlock\"));\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ReflectionBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the position input component\r\n     */\r\n    public get position(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this.worldPositionConnectionPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this.worldNormalConnectionPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the world input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n    * Gets the camera (or eye) position component\r\n    */\r\n    public get cameraPosition(): NodeMaterialConnectionPoint {\r\n        return this.cameraPositionConnectionPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the view input component\r\n     */\r\n    public get view(): NodeMaterialConnectionPoint {\r\n        return this.viewConnectionPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the reflection object output component\r\n     */\r\n    public get reflection(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Returns true if the block has a texture (either its own texture or the environment texture from the scene, if set)\r\n     */\r\n    public get hasTexture(): boolean {\r\n        return !!this._getTexture();\r\n    }\r\n\r\n    /**\r\n     * Gets the reflection color (either the name of the variable if the color input is connected, else a default value)\r\n     */\r\n    public get reflectionColor(): string {\r\n        return this.color.isConnected ? this.color.associatedVariableName : \"vec3(1., 1., 1.)\";\r\n    }\r\n\r\n    protected _getTexture(): Nullable<BaseTexture> {\r\n        if (this.texture) {\r\n            return this.texture;\r\n        }\r\n\r\n        return this._scene.environmentTexture;\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        super.prepareDefines(mesh, nodeMaterial, defines);\r\n\r\n        const reflectionTexture = this._getTexture();\r\n        const reflection = reflectionTexture && reflectionTexture.getTextureMatrix;\r\n\r\n        defines.setValue(\"REFLECTION\", reflection, true);\r\n\r\n        if (!reflection) {\r\n            return;\r\n        }\r\n\r\n        defines.setValue(this._defineLODReflectionAlpha, reflectionTexture!.lodLevelInAlpha, true);\r\n        defines.setValue(this._defineLinearSpecularReflection, reflectionTexture!.linearSpecularLOD, true);\r\n        defines.setValue(this._defineOppositeZ, this._scene.useRightHandedSystem ? !reflectionTexture!.invertZ : reflectionTexture!.invertZ, true);\r\n\r\n        defines.setValue(\"SPHERICAL_HARMONICS\", this.useSphericalHarmonics, true);\r\n        defines.setValue(\"GAMMAREFLECTION\", reflectionTexture!.gammaSpace, true);\r\n        defines.setValue(\"RGBDREFLECTION\", reflectionTexture!.isRGBD, true);\r\n\r\n        if (reflectionTexture && reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\r\n            if (reflectionTexture.isCube) {\r\n                defines.setValue(\"USESPHERICALFROMREFLECTIONMAP\", true);\r\n                defines.setValue(\"USEIRRADIANCEMAP\", false);\r\n                if (this.forceIrradianceInFragment || this._scene.getEngine().getCaps().maxVaryingVectors <= 8) {\r\n                    defines.setValue(\"USESPHERICALINVERTEX\", false);\r\n                }\r\n                else {\r\n                    defines.setValue(\"USESPHERICALINVERTEX\", true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh, subMesh?: SubMesh) {\r\n        super.bind(effect, nodeMaterial, mesh);\r\n\r\n        const reflectionTexture = this._getTexture();\r\n\r\n        if (!reflectionTexture || !subMesh) {\r\n            return;\r\n        }\r\n\r\n        if (reflectionTexture.isCube) {\r\n            effect.setTexture(this._cubeSamplerName, reflectionTexture);\r\n        } else {\r\n            effect.setTexture(this._2DSamplerName, reflectionTexture);\r\n        }\r\n\r\n        const width = reflectionTexture.getSize().width;\r\n\r\n        effect.setFloat3(this._vReflectionMicrosurfaceInfosName, width, reflectionTexture.lodGenerationScale, reflectionTexture.lodGenerationOffset);\r\n        effect.setFloat2(this._vReflectionFilteringInfoName, width, Scalar.Log2(width));\r\n\r\n        const defines = subMesh._materialDefines as  NodeMaterialDefines;\r\n\r\n        const polynomials = reflectionTexture.sphericalPolynomial;\r\n        if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\r\n            if (defines.SPHERICAL_HARMONICS) {\r\n                const preScaledHarmonics = polynomials.preScaledHarmonics;\r\n                effect.setVector3(\"vSphericalL00\", preScaledHarmonics.l00);\r\n                effect.setVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\r\n                effect.setVector3(\"vSphericalL10\", preScaledHarmonics.l10);\r\n                effect.setVector3(\"vSphericalL11\", preScaledHarmonics.l11);\r\n                effect.setVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\r\n                effect.setVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\r\n                effect.setVector3(\"vSphericalL20\", preScaledHarmonics.l20);\r\n                effect.setVector3(\"vSphericalL21\", preScaledHarmonics.l21);\r\n                effect.setVector3(\"vSphericalL22\", preScaledHarmonics.l22);\r\n            }\r\n            else {\r\n                effect.setFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\r\n                effect.setFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\r\n                effect.setFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\r\n                effect.setFloat3(\"vSphericalXX_ZZ\", polynomials.xx.x - polynomials.zz.x,\r\n                    polynomials.xx.y - polynomials.zz.y,\r\n                    polynomials.xx.z - polynomials.zz.z);\r\n                effect.setFloat3(\"vSphericalYY_ZZ\", polynomials.yy.x - polynomials.zz.x,\r\n                    polynomials.yy.y - polynomials.zz.y,\r\n                    polynomials.yy.z - polynomials.zz.z);\r\n                effect.setFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\r\n                effect.setFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\r\n                effect.setFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\r\n                effect.setFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the code to inject in the vertex shader\r\n     * @param state current state of the node material building\r\n     * @returns the shader code\r\n     */\r\n    public handleVertexSide(state: NodeMaterialBuildState): string {\r\n        let code = super.handleVertexSide(state);\r\n\r\n        state._emitFunctionFromInclude(\"harmonicsFunctions\", `//${this.name}`, {\r\n            replaceStrings: [\r\n                { search: /uniform vec3 vSphericalL00;[\\s\\S]*?uniform vec3 vSphericalL22;/g, replace: \"\" },\r\n                { search: /uniform vec3 vSphericalX;[\\s\\S]*?uniform vec3 vSphericalZX;/g, replace: \"\" },\r\n            ]\r\n        });\r\n\r\n        const reflectionVectorName = state._getFreeVariableName(\"reflectionVector\");\r\n\r\n        this._vEnvironmentIrradianceName = state._getFreeVariableName(\"vEnvironmentIrradiance\");\r\n\r\n        state._emitVaryingFromString(this._vEnvironmentIrradianceName, \"vec3\", \"defined(USESPHERICALFROMREFLECTIONMAP) && defined(USESPHERICALINVERTEX)\");\r\n\r\n        state._emitUniformFromString(\"vSphericalL00\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL1_1\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL10\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL11\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL2_2\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL2_1\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL20\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL21\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL22\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n\r\n        state._emitUniformFromString(\"vSphericalX\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalY\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalXX_ZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalYY_ZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalXY\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalYZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalZX\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n\r\n        code +=\r\n            `#if defined(USESPHERICALFROMREFLECTIONMAP) && defined(USESPHERICALINVERTEX)\r\n                vec3 ${reflectionVectorName} = vec3(${this._reflectionMatrixName} * vec4(normalize(${this.worldNormal.associatedVariableName}).xyz, 0)).xyz;\r\n                #ifdef ${this._defineOppositeZ}\r\n                    ${reflectionVectorName}.z *= -1.0;\r\n                #endif\r\n                ${this._vEnvironmentIrradianceName} = computeEnvironmentIrradiance(${reflectionVectorName});\r\n            #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    /**\r\n     * Gets the main code of the block (fragment side)\r\n     * @param state current state of the node material building\r\n     * @param normalVarName name of the existing variable corresponding to the normal\r\n     * @returns the shader code\r\n     */\r\n    public getCode(state: NodeMaterialBuildState, normalVarName: string): string {\r\n        let code = \"\";\r\n\r\n        this.handleFragmentSideInits(state);\r\n\r\n        state._emitFunctionFromInclude(\"harmonicsFunctions\", `//${this.name}`, {\r\n            replaceStrings: [\r\n                { search: /uniform vec3 vSphericalL00;[\\s\\S]*?uniform vec3 vSphericalL22;/g, replace: \"\" },\r\n                { search: /uniform vec3 vSphericalX;[\\s\\S]*?uniform vec3 vSphericalZX;/g, replace: \"\" },\r\n            ]\r\n        });\r\n\r\n        state._emitFunction(\"sampleReflection\", `\r\n            #ifdef ${this._define3DName}\r\n                #define sampleReflection(s, c) textureCube(s, c)\r\n            #else\r\n                #define sampleReflection(s, c) texture2D(s, c)\r\n            #endif\\r\\n`, `//${this.name}`);\r\n\r\n        state._emitFunction(\"sampleReflectionLod\", `\r\n            #ifdef ${this._define3DName}\r\n                #define sampleReflectionLod(s, c, l) textureCubeLodEXT(s, c, l)\r\n            #else\r\n                #define sampleReflectionLod(s, c, l) texture2DLodEXT(s, c, l)\r\n            #endif\\r\\n`, `//${this.name}`);\r\n\r\n        const computeReflectionCoordsFunc = `\r\n            vec3 computeReflectionCoordsPBR(vec4 worldPos, vec3 worldNormal) {\r\n                ${this.handleFragmentSideCodeReflectionCoords('worldNormal', 'worldPos', true)}\r\n                return ${this._reflectionVectorName};\r\n            }\\r\\n`;\r\n\r\n        state._emitFunction(\"computeReflectionCoordsPBR\", computeReflectionCoordsFunc, `//${this.name}`);\r\n\r\n        this._vReflectionMicrosurfaceInfosName = state._getFreeVariableName(\"vReflectionMicrosurfaceInfos\");\r\n\r\n        state._emitUniformFromString(this._vReflectionMicrosurfaceInfosName, \"vec3\");\r\n\r\n        this._vReflectionInfosName = state._getFreeVariableName(\"vReflectionInfos\");\r\n\r\n        this._vReflectionFilteringInfoName = state._getFreeVariableName(\"vReflectionFilteringInfo\");\r\n\r\n        state._emitUniformFromString(this._vReflectionFilteringInfoName, \"vec2\");\r\n\r\n        code += `#ifdef REFLECTION\r\n            vec2 ${this._vReflectionInfosName} = vec2(1., 0.);\r\n\r\n            reflectionOutParams reflectionOut;\r\n\r\n            reflectionBlock(\r\n                ${\"v_\" + this.worldPosition.associatedVariableName + \".xyz\"},\r\n                ${normalVarName},\r\n                alphaG,\r\n                ${this._vReflectionMicrosurfaceInfosName},\r\n                ${this._vReflectionInfosName},\r\n                ${this.reflectionColor},\r\n            #ifdef ANISOTROPIC\r\n                anisotropicOut,\r\n            #endif\r\n            #if defined(${this._defineLODReflectionAlpha}) && !defined(${this._defineSkyboxName})\r\n                NdotVUnclamped,\r\n            #endif\r\n            #ifdef ${this._defineLinearSpecularReflection}\r\n                roughness,\r\n            #endif\r\n            #ifdef ${this._define3DName}\r\n                ${this._cubeSamplerName},\r\n            #else\r\n                ${this._2DSamplerName},\r\n            #endif\r\n            #if defined(NORMAL) && defined(USESPHERICALINVERTEX)\r\n                ${this._vEnvironmentIrradianceName},\r\n            #endif\r\n            #ifdef USESPHERICALFROMREFLECTIONMAP\r\n                #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\r\n                    ${this._reflectionMatrixName},\r\n                #endif\r\n            #endif\r\n            #ifdef USEIRRADIANCEMAP\r\n                irradianceSampler, // ** not handled **\r\n            #endif\r\n            #ifndef LODBASEDMICROSFURACE\r\n                #ifdef ${this._define3DName}\r\n                    ${this._cubeSamplerName},\r\n                    ${this._cubeSamplerName},\r\n                #else\r\n                    ${this._2DSamplerName},\r\n                    ${this._2DSamplerName},\r\n                #endif\r\n            #endif\r\n            #ifdef REALTIME_FILTERING\r\n                ${this._vReflectionFilteringInfoName},\r\n            #endif\r\n                reflectionOut\r\n            );\r\n        #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        this._scene = state.sharedData.scene;\r\n\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            this._defineLODReflectionAlpha = state._getFreeDefineName(\"LODINREFLECTIONALPHA\");\r\n            this._defineLinearSpecularReflection = state._getFreeDefineName(\"LINEARSPECULARREFLECTION\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString: string = super._dumpPropertiesCode();\r\n\r\n        if (this.texture) {\r\n            codeString += `${this._codeVariableName}.texture.gammaSpace = ${this.texture.gammaSpace});\\r\\n`;\r\n        }\r\n        codeString += `${this._codeVariableName}.useSphericalHarmonics = ${this.useSphericalHarmonics};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.forceIrradianceInFragment = ${this.forceIrradianceInFragment};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        let serializationObject = super.serialize();\r\n\r\n        serializationObject.useSphericalHarmonics = this.useSphericalHarmonics;\r\n        serializationObject.forceIrradianceInFragment = this.forceIrradianceInFragment;\r\n        serializationObject.gammaSpace = this.texture?.gammaSpace ?? true;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.useSphericalHarmonics = serializationObject.useSphericalHarmonics;\r\n        this.forceIrradianceInFragment = serializationObject.forceIrradianceInFragment;\r\n        if (this.texture) {\r\n            this.texture.gammaSpace = serializationObject.gammaSpace;\r\n        }\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ReflectionBlock\"] = ReflectionBlock;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}