{"ast":null,"code":"import { Camera } from \"../camera\";\nimport { Matrix } from \"../../Maths/math.vector\";\nimport { VRDistortionCorrectionPostProcess } from \"../../PostProcesses/vrDistortionCorrectionPostProcess\";\nimport { VRMultiviewToSingleviewPostProcess } from '../../PostProcesses/vrMultiviewToSingleviewPostProcess';\nimport { VRCameraMetrics } from \"../VR/vrCameraMetrics\";\nimport { Logger } from '../../Misc/logger';\nimport { Viewport } from '../../Maths/math.viewport';\n\nCamera._setVRRigMode = function (camera, rigParams) {\n  var metrics = rigParams.vrCameraMetrics || VRCameraMetrics.GetDefault();\n  camera._rigCameras[0]._cameraRigParams.vrMetrics = metrics;\n  camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\n  camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\n  camera._rigCameras[0]._cameraRigParams.vrHMatrix = metrics.leftHMatrix;\n  camera._rigCameras[0]._cameraRigParams.vrPreViewMatrix = metrics.leftPreViewMatrix;\n  camera._rigCameras[0].getProjectionMatrix = camera._rigCameras[0]._getVRProjectionMatrix;\n  camera._rigCameras[1]._cameraRigParams.vrMetrics = metrics;\n  camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\n  camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\n  camera._rigCameras[1]._cameraRigParams.vrHMatrix = metrics.rightHMatrix;\n  camera._rigCameras[1]._cameraRigParams.vrPreViewMatrix = metrics.rightPreViewMatrix;\n  camera._rigCameras[1].getProjectionMatrix = camera._rigCameras[1]._getVRProjectionMatrix; // For multiview on a webVR camera\n  // First multiview will be rendered to camera._multiviewTexture\n  // Then this postprocess will run on each eye to copy the right texture to each eye\n\n  if (metrics.multiviewEnabled) {\n    if (!camera.getScene().getEngine().getCaps().multiview) {\n      Logger.Warn(\"Multiview is not supported, falling back to standard rendering\");\n      metrics.multiviewEnabled = false;\n    } else {\n      camera._useMultiviewToSingleView = true;\n      camera._rigPostProcess = new VRMultiviewToSingleviewPostProcess(\"VRMultiviewToSingleview\", camera, metrics.postProcessScaleFactor);\n    }\n  }\n\n  if (metrics.compensateDistortion) {\n    camera._rigCameras[0]._rigPostProcess = new VRDistortionCorrectionPostProcess(\"VR_Distort_Compensation_Left\", camera._rigCameras[0], false, metrics);\n    camera._rigCameras[1]._rigPostProcess = new VRDistortionCorrectionPostProcess(\"VR_Distort_Compensation_Right\", camera._rigCameras[1], true, metrics);\n  }\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/RigModes/vrRigMode.ts"],"names":[],"mappings":"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","sourcesContent":["import { Camera } from \"../camera\";\r\nimport { Matrix } from \"../../Maths/math.vector\";\r\nimport { VRDistortionCorrectionPostProcess } from \"../../PostProcesses/vrDistortionCorrectionPostProcess\";\r\nimport { VRMultiviewToSingleviewPostProcess } from '../../PostProcesses/vrMultiviewToSingleviewPostProcess';\r\nimport { VRCameraMetrics } from \"../VR/vrCameraMetrics\";\r\nimport { Logger } from '../../Misc/logger';\r\nimport { Viewport } from '../../Maths/math.viewport';\r\n\r\nCamera._setVRRigMode = function(camera: Camera, rigParams: any) {\r\n    var metrics = <VRCameraMetrics>rigParams.vrCameraMetrics || VRCameraMetrics.GetDefault();\r\n\r\n    camera._rigCameras[0]._cameraRigParams.vrMetrics = metrics;\r\n    camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\r\n    camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\r\n    camera._rigCameras[0]._cameraRigParams.vrHMatrix = metrics.leftHMatrix;\r\n    camera._rigCameras[0]._cameraRigParams.vrPreViewMatrix = metrics.leftPreViewMatrix;\r\n    camera._rigCameras[0].getProjectionMatrix = camera._rigCameras[0]._getVRProjectionMatrix;\r\n\r\n    camera._rigCameras[1]._cameraRigParams.vrMetrics = metrics;\r\n    camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\r\n    camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\r\n    camera._rigCameras[1]._cameraRigParams.vrHMatrix = metrics.rightHMatrix;\r\n    camera._rigCameras[1]._cameraRigParams.vrPreViewMatrix = metrics.rightPreViewMatrix;\r\n    camera._rigCameras[1].getProjectionMatrix = camera._rigCameras[1]._getVRProjectionMatrix;\r\n\r\n    // For multiview on a webVR camera\r\n    // First multiview will be rendered to camera._multiviewTexture\r\n    // Then this postprocess will run on each eye to copy the right texture to each eye\r\n    if (metrics.multiviewEnabled) {\r\n        if (!camera.getScene().getEngine().getCaps().multiview) {\r\n            Logger.Warn(\"Multiview is not supported, falling back to standard rendering\");\r\n            metrics.multiviewEnabled = false;\r\n        } else {\r\n            camera._useMultiviewToSingleView = true;\r\n            camera._rigPostProcess = new VRMultiviewToSingleviewPostProcess(\"VRMultiviewToSingleview\", camera, metrics.postProcessScaleFactor);\r\n        }\r\n    }\r\n\r\n    if (metrics.compensateDistortion) {\r\n        camera._rigCameras[0]._rigPostProcess = new VRDistortionCorrectionPostProcess(\"VR_Distort_Compensation_Left\", camera._rigCameras[0], false, metrics);\r\n        camera._rigCameras[1]._rigPostProcess = new VRDistortionCorrectionPostProcess(\"VR_Distort_Compensation_Right\", camera._rigCameras[1], true, metrics);\r\n    }\r\n};"],"sourceRoot":""},"metadata":{},"sourceType":"module"}