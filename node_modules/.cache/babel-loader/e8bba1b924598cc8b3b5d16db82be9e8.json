{"ast":null,"code":"import { Effect } from \"../Materials/effect\";\nvar name = 'spriteMapPixelShader';\nvar shader = \"precision highp float;\\nvarying vec3 vPosition;\\nvarying vec2 vUV;\\nvarying vec2 tUV;\\nuniform float time;\\nuniform float spriteCount;\\nuniform sampler2D spriteSheet;\\nuniform vec2 spriteMapSize;\\nuniform vec2 outputSize;\\nuniform vec2 stageSize;\\nuniform sampler2D frameMap;\\nuniform sampler2D tileMaps[LAYERS];\\nuniform sampler2D animationMap;\\nuniform vec3 colorMul;\\nfloat mt;\\nconst float fdStep=1./4.;\\nconst float aFrameSteps=1./MAX_ANIMATION_FRAMES;\\nmat4 getFrameData(float frameID){\\nfloat fX=frameID/spriteCount;\\nreturn mat4(\\ntexture2D(frameMap,vec2(fX,0.),0.),\\ntexture2D(frameMap,vec2(fX,fdStep*1.),0.),\\ntexture2D(frameMap,vec2(fX,fdStep*2.),0.),\\nvec4(0.)\\n);\\n}\\nvoid main(){\\nvec4 color=vec4(0.);\\nvec2 tileUV=fract(tUV);\\n#ifdef FLIPU\\ntileUV.y=1.0-tileUV.y;\\n#endif\\nvec2 tileID=floor(tUV);\\nvec2 sheetUnits=1./spriteMapSize;\\nfloat spriteUnits=1./spriteCount;\\nvec2 stageUnits=1./stageSize;\\nfor(int i=0; i<LAYERS; i++) {\\nfloat frameID;\\n#define LAYER_ID_SWITCH\\nvec4 animationData=texture2D(animationMap,vec2((frameID+0.5)/spriteCount,0.),0.);\\nif(animationData.y>0.) {\\nmt=mod(time*animationData.z,1.0);\\nfor(float f=0.; f<MAX_ANIMATION_FRAMES; f++){\\nif(animationData.y>mt){\\nframeID=animationData.x;\\nbreak;\\n}\\nanimationData=texture2D(animationMap,vec2((frameID+0.5)/spriteCount,aFrameSteps*f),0.);\\n}\\n}\\n\\nmat4 frameData=getFrameData(frameID+0.5);\\nvec2 frameSize=(frameData[0].wz)/spriteMapSize;\\nvec2 offset=frameData[0].xy*sheetUnits;\\nvec2 ratio=frameData[2].xy/frameData[0].wz;\\n\\nif (frameData[2].z == 1.){\\ntileUV.xy=tileUV.yx;\\n}\\nif (i == 0){\\ncolor=texture2D(spriteSheet,tileUV*frameSize+offset);\\n} else {\\nvec4 nc=texture2D(spriteSheet,tileUV*frameSize+offset);\\nfloat alpha=min(color.a+nc.a,1.0);\\nvec3 mixed=mix(color.xyz,nc.xyz,nc.a);\\ncolor=vec4(mixed,alpha);\\n}\\n}\\ncolor.xyz*=colorMul;\\ngl_FragColor=color;\\n}\";\nEffect.ShadersStore[name] = shader;\n/** @hidden */\n\nexport var spriteMapPixelShader = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"sources":["../../../sourceES6/core/Shaders/spriteMap.fragment.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,qBAAvB;AAEA,IAAI,IAAI,GAAG,sBAAX;AACA,IAAI,MAAM,GAAG,m0DAAb;AAwEA,MAAM,CAAC,YAAP,CAAoB,IAApB,IAA4B,MAA5B;AACA;;AACA,OAAO,IAAI,oBAAoB,GAAG;AAAE,EAAA,IAAI,EAAA,IAAN;AAAQ,EAAA,MAAM,EAAA;AAAd,CAA3B","sourcesContent":["import { Effect } from \"../Materials/effect\";\n\nlet name = 'spriteMapPixelShader';\nlet shader = `precision highp float;\nvarying vec3 vPosition;\nvarying vec2 vUV;\nvarying vec2 tUV;\nuniform float time;\nuniform float spriteCount;\nuniform sampler2D spriteSheet;\nuniform vec2 spriteMapSize;\nuniform vec2 outputSize;\nuniform vec2 stageSize;\nuniform sampler2D frameMap;\nuniform sampler2D tileMaps[LAYERS];\nuniform sampler2D animationMap;\nuniform vec3 colorMul;\nfloat mt;\nconst float fdStep=1./4.;\nconst float aFrameSteps=1./MAX_ANIMATION_FRAMES;\nmat4 getFrameData(float frameID){\nfloat fX=frameID/spriteCount;\nreturn mat4(\ntexture2D(frameMap,vec2(fX,0.),0.),\ntexture2D(frameMap,vec2(fX,fdStep*1.),0.),\ntexture2D(frameMap,vec2(fX,fdStep*2.),0.),\nvec4(0.)\n);\n}\nvoid main(){\nvec4 color=vec4(0.);\nvec2 tileUV=fract(tUV);\n#ifdef FLIPU\ntileUV.y=1.0-tileUV.y;\n#endif\nvec2 tileID=floor(tUV);\nvec2 sheetUnits=1./spriteMapSize;\nfloat spriteUnits=1./spriteCount;\nvec2 stageUnits=1./stageSize;\nfor(int i=0; i<LAYERS; i++) {\nfloat frameID;\n#define LAYER_ID_SWITCH\nvec4 animationData=texture2D(animationMap,vec2((frameID+0.5)/spriteCount,0.),0.);\nif(animationData.y>0.) {\nmt=mod(time*animationData.z,1.0);\nfor(float f=0.; f<MAX_ANIMATION_FRAMES; f++){\nif(animationData.y>mt){\nframeID=animationData.x;\nbreak;\n}\nanimationData=texture2D(animationMap,vec2((frameID+0.5)/spriteCount,aFrameSteps*f),0.);\n}\n}\n\nmat4 frameData=getFrameData(frameID+0.5);\nvec2 frameSize=(frameData[0].wz)/spriteMapSize;\nvec2 offset=frameData[0].xy*sheetUnits;\nvec2 ratio=frameData[2].xy/frameData[0].wz;\n\nif (frameData[2].z == 1.){\ntileUV.xy=tileUV.yx;\n}\nif (i == 0){\ncolor=texture2D(spriteSheet,tileUV*frameSize+offset);\n} else {\nvec4 nc=texture2D(spriteSheet,tileUV*frameSize+offset);\nfloat alpha=min(color.a+nc.a,1.0);\nvec3 mixed=mix(color.xyz,nc.xyz,nc.a);\ncolor=vec4(mixed,alpha);\n}\n}\ncolor.xyz*=colorMul;\ngl_FragColor=color;\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var spriteMapPixelShader = { name, shader };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}