{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable\";\n/**\r\n * Represents a gamepad control stick position\r\n */\n\nvar StickValues =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes the gamepad x and y control stick values\r\n   * @param x The x component of the gamepad control stick value\r\n   * @param y The y component of the gamepad control stick value\r\n   */\n  function StickValues(\n  /**\r\n   * The x component of the control stick\r\n   */\n  x,\n  /**\r\n   * The y component of the control stick\r\n   */\n  y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  return StickValues;\n}();\n\nexport { StickValues };\n/**\r\n * Represents a gamepad\r\n */\n\nvar Gamepad =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes the gamepad\r\n   * @param id The id of the gamepad\r\n   * @param index The index of the gamepad\r\n   * @param browserGamepad The browser gamepad\r\n   * @param leftStickX The x component of the left joystick\r\n   * @param leftStickY The y component of the left joystick\r\n   * @param rightStickX The x component of the right joystick\r\n   * @param rightStickY The y component of the right joystick\r\n   */\n  function Gamepad(\n  /**\r\n   * The id of the gamepad\r\n   */\n  id,\n  /**\r\n   * The index of the gamepad\r\n   */\n  index,\n  /**\r\n   * The browser gamepad\r\n   */\n  browserGamepad, leftStickX, leftStickY, rightStickX, rightStickY) {\n    if (leftStickX === void 0) {\n      leftStickX = 0;\n    }\n\n    if (leftStickY === void 0) {\n      leftStickY = 1;\n    }\n\n    if (rightStickX === void 0) {\n      rightStickX = 2;\n    }\n\n    if (rightStickY === void 0) {\n      rightStickY = 3;\n    }\n\n    this.id = id;\n    this.index = index;\n    this.browserGamepad = browserGamepad;\n    this._leftStick = {\n      x: 0,\n      y: 0\n    };\n    this._rightStick = {\n      x: 0,\n      y: 0\n    };\n    /** @hidden */\n\n    this._isConnected = true;\n    /**\r\n     * Specifies whether the left control stick should be Y-inverted\r\n     */\n\n    this._invertLeftStickY = false;\n    this.type = Gamepad.GAMEPAD;\n    this._leftStickAxisX = leftStickX;\n    this._leftStickAxisY = leftStickY;\n    this._rightStickAxisX = rightStickX;\n    this._rightStickAxisY = rightStickY;\n\n    if (this.browserGamepad.axes.length >= 2) {\n      this._leftStick = {\n        x: this.browserGamepad.axes[this._leftStickAxisX],\n        y: this.browserGamepad.axes[this._leftStickAxisY]\n      };\n    }\n\n    if (this.browserGamepad.axes.length >= 4) {\n      this._rightStick = {\n        x: this.browserGamepad.axes[this._rightStickAxisX],\n        y: this.browserGamepad.axes[this._rightStickAxisY]\n      };\n    }\n  }\n\n  Object.defineProperty(Gamepad.prototype, \"isConnected\", {\n    /**\r\n     * Specifies if the gamepad has been connected\r\n     */\n    get: function () {\n      return this._isConnected;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Callback triggered when the left joystick has changed\r\n   * @param callback\r\n   */\n\n  Gamepad.prototype.onleftstickchanged = function (callback) {\n    this._onleftstickchanged = callback;\n  };\n  /**\r\n   * Callback triggered when the right joystick has changed\r\n   * @param callback\r\n   */\n\n\n  Gamepad.prototype.onrightstickchanged = function (callback) {\n    this._onrightstickchanged = callback;\n  };\n\n  Object.defineProperty(Gamepad.prototype, \"leftStick\", {\n    /**\r\n     * Gets the left joystick\r\n     */\n    get: function () {\n      return this._leftStick;\n    },\n\n    /**\r\n     * Sets the left joystick values\r\n     */\n    set: function (newValues) {\n      if (this._onleftstickchanged && (this._leftStick.x !== newValues.x || this._leftStick.y !== newValues.y)) {\n        this._onleftstickchanged(newValues);\n      }\n\n      this._leftStick = newValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Gamepad.prototype, \"rightStick\", {\n    /**\r\n     * Gets the right joystick\r\n     */\n    get: function () {\n      return this._rightStick;\n    },\n\n    /**\r\n     * Sets the right joystick value\r\n     */\n    set: function (newValues) {\n      if (this._onrightstickchanged && (this._rightStick.x !== newValues.x || this._rightStick.y !== newValues.y)) {\n        this._onrightstickchanged(newValues);\n      }\n\n      this._rightStick = newValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Updates the gamepad joystick positions\r\n   */\n\n  Gamepad.prototype.update = function () {\n    if (this._leftStick) {\n      this.leftStick = {\n        x: this.browserGamepad.axes[this._leftStickAxisX],\n        y: this.browserGamepad.axes[this._leftStickAxisY]\n      };\n\n      if (this._invertLeftStickY) {\n        this.leftStick.y *= -1;\n      }\n    }\n\n    if (this._rightStick) {\n      this.rightStick = {\n        x: this.browserGamepad.axes[this._rightStickAxisX],\n        y: this.browserGamepad.axes[this._rightStickAxisY]\n      };\n    }\n  };\n  /**\r\n   * Disposes the gamepad\r\n   */\n\n\n  Gamepad.prototype.dispose = function () {};\n  /**\r\n   * Represents a gamepad controller\r\n   */\n\n\n  Gamepad.GAMEPAD = 0;\n  /**\r\n   * Represents a generic controller\r\n   */\n\n  Gamepad.GENERIC = 1;\n  /**\r\n   * Represents an XBox controller\r\n   */\n\n  Gamepad.XBOX = 2;\n  /**\r\n   * Represents a pose-enabled controller\r\n   */\n\n  Gamepad.POSE_ENABLED = 3;\n  /**\r\n   * Represents an Dual Shock controller\r\n   */\n\n  Gamepad.DUALSHOCK = 4;\n  return Gamepad;\n}();\n\nexport { Gamepad };\n/**\r\n * Represents a generic gamepad\r\n */\n\nvar GenericPad =\n/** @class */\nfunction (_super) {\n  __extends(GenericPad, _super);\n  /**\r\n   * Initializes the generic gamepad\r\n   * @param id The id of the generic gamepad\r\n   * @param index The index of the generic gamepad\r\n   * @param browserGamepad The browser gamepad\r\n   */\n\n\n  function GenericPad(id, index, browserGamepad) {\n    var _this = _super.call(this, id, index, browserGamepad) || this;\n    /**\r\n     * Observable triggered when a button has been pressed\r\n     */\n\n\n    _this.onButtonDownObservable = new Observable();\n    /**\r\n     * Observable triggered when a button has been released\r\n     */\n\n    _this.onButtonUpObservable = new Observable();\n    _this.type = Gamepad.GENERIC;\n    _this._buttons = new Array(browserGamepad.buttons.length);\n    return _this;\n  }\n  /**\r\n   * Callback triggered when a button has been pressed\r\n   * @param callback Called when a button has been pressed\r\n   */\n\n\n  GenericPad.prototype.onbuttondown = function (callback) {\n    this._onbuttondown = callback;\n  };\n  /**\r\n   * Callback triggered when a button has been released\r\n   * @param callback Called when a button has been released\r\n   */\n\n\n  GenericPad.prototype.onbuttonup = function (callback) {\n    this._onbuttonup = callback;\n  };\n\n  GenericPad.prototype._setButtonValue = function (newValue, currentValue, buttonIndex) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._onbuttondown) {\n          this._onbuttondown(buttonIndex);\n        }\n\n        this.onButtonDownObservable.notifyObservers(buttonIndex);\n      }\n\n      if (newValue === 0) {\n        if (this._onbuttonup) {\n          this._onbuttonup(buttonIndex);\n        }\n\n        this.onButtonUpObservable.notifyObservers(buttonIndex);\n      }\n    }\n\n    return newValue;\n  };\n  /**\r\n   * Updates the generic gamepad\r\n   */\n\n\n  GenericPad.prototype.update = function () {\n    _super.prototype.update.call(this);\n\n    for (var index = 0; index < this._buttons.length; index++) {\n      this._buttons[index] = this._setButtonValue(this.browserGamepad.buttons[index].value, this._buttons[index], index);\n    }\n  };\n  /**\r\n   * Disposes the generic gamepad\r\n   */\n\n\n  GenericPad.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onButtonDownObservable.clear();\n    this.onButtonUpObservable.clear();\n  };\n\n  return GenericPad;\n}(Gamepad);\n\nexport { GenericPad };","map":{"version":3,"sources":["../../../sourceES6/core/Gamepads/gamepad.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../Misc/observable\";\r\n\r\n/**\r\n * Represents a gamepad control stick position\r\n */\r\nexport class StickValues {\r\n    /**\r\n     * Initializes the gamepad x and y control stick values\r\n     * @param x The x component of the gamepad control stick value\r\n     * @param y The y component of the gamepad control stick value\r\n     */\r\n    constructor(\r\n        /**\r\n         * The x component of the control stick\r\n         */\r\n        public x: number,\r\n        /**\r\n         * The y component of the control stick\r\n         */\r\n        public y: number\r\n    ) {\r\n    }\r\n}\r\n\r\n/**\r\n * An interface which manages callbacks for gamepad button changes\r\n */\r\nexport interface GamepadButtonChanges {\r\n    /**\r\n     * Called when a gamepad has been changed\r\n     */\r\n    changed: boolean;\r\n    /**\r\n     * Called when a gamepad press event has been triggered\r\n     */\r\n    pressChanged: boolean;\r\n    /**\r\n     * Called when a touch event has been triggered\r\n     */\r\n    touchChanged: boolean;\r\n    /**\r\n     * Called when a value has changed\r\n     */\r\n    valueChanged: boolean;\r\n}\r\n\r\n/**\r\n * Represents a gamepad\r\n */\r\nexport class Gamepad {\r\n\r\n    /**\r\n     * Specifies what type of gamepad this represents\r\n     */\r\n    public type: number;\r\n\r\n    private _leftStick: StickValues = { x: 0, y: 0 };\r\n    private _rightStick: StickValues = { x: 0, y: 0 };\r\n\r\n    /** @hidden */\r\n    public _isConnected = true;\r\n\r\n    private _leftStickAxisX: number;\r\n    private _leftStickAxisY: number;\r\n    private _rightStickAxisX: number;\r\n    private _rightStickAxisY: number;\r\n\r\n    /**\r\n     * Triggered when the left control stick has been changed\r\n     */\r\n    private _onleftstickchanged: (values: StickValues) => void;\r\n\r\n    /**\r\n     * Triggered when the right control stick has been changed\r\n     */\r\n    private _onrightstickchanged: (values: StickValues) => void;\r\n\r\n    /**\r\n     * Represents a gamepad controller\r\n     */\r\n    public static GAMEPAD = 0;\r\n    /**\r\n     * Represents a generic controller\r\n     */\r\n    public static GENERIC = 1;\r\n    /**\r\n     * Represents an XBox controller\r\n     */\r\n    public static XBOX = 2;\r\n    /**\r\n     * Represents a pose-enabled controller\r\n     */\r\n    public static POSE_ENABLED = 3;\r\n    /**\r\n     * Represents an Dual Shock controller\r\n     */\r\n    public static DUALSHOCK = 4;\r\n\r\n    /**\r\n     * Specifies whether the left control stick should be Y-inverted\r\n     */\r\n    protected _invertLeftStickY: boolean = false;\r\n\r\n    /**\r\n     * Specifies if the gamepad has been connected\r\n     */\r\n    public get isConnected(): boolean {\r\n        return this._isConnected;\r\n    }\r\n\r\n    /**\r\n     * Initializes the gamepad\r\n     * @param id The id of the gamepad\r\n     * @param index The index of the gamepad\r\n     * @param browserGamepad The browser gamepad\r\n     * @param leftStickX The x component of the left joystick\r\n     * @param leftStickY The y component of the left joystick\r\n     * @param rightStickX The x component of the right joystick\r\n     * @param rightStickY The y component of the right joystick\r\n     */\r\n    constructor(\r\n        /**\r\n         * The id of the gamepad\r\n         */\r\n        public id: string,\r\n        /**\r\n         * The index of the gamepad\r\n         */\r\n        public index: number,\r\n        /**\r\n         * The browser gamepad\r\n         */\r\n        public browserGamepad: any,\r\n        leftStickX: number = 0, leftStickY: number = 1, rightStickX: number = 2, rightStickY: number = 3) {\r\n        this.type = Gamepad.GAMEPAD;\r\n        this._leftStickAxisX = leftStickX;\r\n        this._leftStickAxisY = leftStickY;\r\n        this._rightStickAxisX = rightStickX;\r\n        this._rightStickAxisY = rightStickY;\r\n        if (this.browserGamepad.axes.length >= 2) {\r\n            this._leftStick = { x: this.browserGamepad.axes[this._leftStickAxisX], y: this.browserGamepad.axes[this._leftStickAxisY] };\r\n        }\r\n        if (this.browserGamepad.axes.length >= 4) {\r\n            this._rightStick = { x: this.browserGamepad.axes[this._rightStickAxisX], y: this.browserGamepad.axes[this._rightStickAxisY] };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback triggered when the left joystick has changed\r\n     * @param callback\r\n     */\r\n    public onleftstickchanged(callback: (values: StickValues) => void) {\r\n        this._onleftstickchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Callback triggered when the right joystick has changed\r\n     * @param callback\r\n     */\r\n    public onrightstickchanged(callback: (values: StickValues) => void) {\r\n        this._onrightstickchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Gets the left joystick\r\n     */\r\n    public get leftStick(): StickValues {\r\n        return this._leftStick;\r\n    }\r\n    /**\r\n     * Sets the left joystick values\r\n     */\r\n    public set leftStick(newValues: StickValues) {\r\n        if (this._onleftstickchanged && (this._leftStick.x !== newValues.x || this._leftStick.y !== newValues.y)) {\r\n            this._onleftstickchanged(newValues);\r\n        }\r\n        this._leftStick = newValues;\r\n    }\r\n    /**\r\n     * Gets the right joystick\r\n     */\r\n    public get rightStick(): StickValues {\r\n        return this._rightStick;\r\n    }\r\n    /**\r\n     * Sets the right joystick value\r\n     */\r\n    public set rightStick(newValues: StickValues) {\r\n        if (this._onrightstickchanged && (this._rightStick.x !== newValues.x || this._rightStick.y !== newValues.y)) {\r\n            this._onrightstickchanged(newValues);\r\n        }\r\n        this._rightStick = newValues;\r\n    }\r\n\r\n    /**\r\n     * Updates the gamepad joystick positions\r\n     */\r\n\r\n    public update() {\r\n        if (this._leftStick) {\r\n            this.leftStick = { x: this.browserGamepad.axes[this._leftStickAxisX], y: this.browserGamepad.axes[this._leftStickAxisY] };\r\n            if (this._invertLeftStickY) {\r\n                this.leftStick.y *= -1;\r\n            }\r\n        }\r\n        if (this._rightStick) {\r\n            this.rightStick = { x: this.browserGamepad.axes[this._rightStickAxisX], y: this.browserGamepad.axes[this._rightStickAxisY] };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the gamepad\r\n     */\r\n    public dispose() {\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a generic gamepad\r\n */\r\nexport class GenericPad extends Gamepad {\r\n    private _buttons: Array<number>;\r\n    private _onbuttondown: (buttonPressed: number) => void;\r\n    private _onbuttonup: (buttonReleased: number) => void;\r\n\r\n    /**\r\n     * Observable triggered when a button has been pressed\r\n     */\r\n    public onButtonDownObservable = new Observable<number>();\r\n    /**\r\n     * Observable triggered when a button has been released\r\n     */\r\n    public onButtonUpObservable = new Observable<number>();\r\n\r\n    /**\r\n     * Callback triggered when a button has been pressed\r\n     * @param callback Called when a button has been pressed\r\n     */\r\n    public onbuttondown(callback: (buttonPressed: number) => void) {\r\n        this._onbuttondown = callback;\r\n    }\r\n    /**\r\n     * Callback triggered when a button has been released\r\n     * @param callback Called when a button has been released\r\n     */\r\n    public onbuttonup(callback: (buttonReleased: number) => void) {\r\n        this._onbuttonup = callback;\r\n    }\r\n\r\n    /**\r\n     * Initializes the generic gamepad\r\n     * @param id The id of the generic gamepad\r\n     * @param index The index of the generic gamepad\r\n     * @param browserGamepad The browser gamepad\r\n     */\r\n    constructor(id: string, index: number, browserGamepad: any) {\r\n        super(id, index, browserGamepad);\r\n        this.type = Gamepad.GENERIC;\r\n        this._buttons = new Array(browserGamepad.buttons.length);\r\n    }\r\n\r\n    private _setButtonValue(newValue: number, currentValue: number, buttonIndex: number): number {\r\n        if (newValue !== currentValue) {\r\n            if (newValue === 1) {\r\n                if (this._onbuttondown) {\r\n                    this._onbuttondown(buttonIndex);\r\n                }\r\n\r\n                this.onButtonDownObservable.notifyObservers(buttonIndex);\r\n            }\r\n            if (newValue === 0) {\r\n                if (this._onbuttonup) {\r\n                    this._onbuttonup(buttonIndex);\r\n                }\r\n\r\n                this.onButtonUpObservable.notifyObservers(buttonIndex);\r\n            }\r\n        }\r\n        return newValue;\r\n    }\r\n\r\n    /**\r\n     * Updates the generic gamepad\r\n     */\r\n    public update() {\r\n        super.update();\r\n        for (var index = 0; index < this._buttons.length; index++) {\r\n            this._buttons[index] = this._setButtonValue(this.browserGamepad.buttons[index].value, this._buttons[index], index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the generic gamepad\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onButtonDownObservable.clear();\r\n        this.onButtonUpObservable.clear();\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}