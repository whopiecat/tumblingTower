{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { BezierCurve } from \"../Maths/math.path\";\n/**\r\n * Base class used for every default easing function.\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar EasingFunction =\n/** @class */\nfunction () {\n  function EasingFunction() {\n    this._easingMode = EasingFunction.EASINGMODE_EASEIN;\n  }\n  /**\r\n   * Sets the easing mode of the current function.\r\n   * @param easingMode Defines the willing mode (EASINGMODE_EASEIN, EASINGMODE_EASEOUT or EASINGMODE_EASEINOUT)\r\n   */\n\n\n  EasingFunction.prototype.setEasingMode = function (easingMode) {\n    var n = Math.min(Math.max(easingMode, 0), 2);\n    this._easingMode = n;\n  };\n  /**\r\n   * Gets the current easing mode.\r\n   * @returns the easing mode\r\n   */\n\n\n  EasingFunction.prototype.getEasingMode = function () {\n    return this._easingMode;\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  EasingFunction.prototype.easeInCore = function (gradient) {\n    throw new Error('You must implement this method');\n  };\n  /**\r\n   * Given an input gradient between 0 and 1, this returns the corresponding value\r\n   * of the easing function.\r\n   * @param gradient Defines the value between 0 and 1 we want the easing value for\r\n   * @returns the corresponding value on the curve defined by the easing function\r\n   */\n\n\n  EasingFunction.prototype.ease = function (gradient) {\n    switch (this._easingMode) {\n      case EasingFunction.EASINGMODE_EASEIN:\n        return this.easeInCore(gradient);\n\n      case EasingFunction.EASINGMODE_EASEOUT:\n        return 1 - this.easeInCore(1 - gradient);\n    }\n\n    if (gradient >= 0.5) {\n      return (1 - this.easeInCore((1 - gradient) * 2)) * 0.5 + 0.5;\n    }\n\n    return this.easeInCore(gradient * 2) * 0.5;\n  };\n  /**\r\n   * Interpolation follows the mathematical formula associated with the easing function.\r\n   */\n\n\n  EasingFunction.EASINGMODE_EASEIN = 0;\n  /**\r\n   * Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.\r\n   */\n\n  EasingFunction.EASINGMODE_EASEOUT = 1;\n  /**\r\n   * Interpolation uses EaseIn for the first half of the animation and EaseOut for the second half.\r\n   */\n\n  EasingFunction.EASINGMODE_EASEINOUT = 2;\n  return EasingFunction;\n}();\n\nexport { EasingFunction };\n/**\r\n * Easing function with a circle shape (see link below).\r\n * @see https://easings.net/#easeInCirc\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar CircleEase =\n/** @class */\nfunction (_super) {\n  __extends(CircleEase, _super);\n\n  function CircleEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @hidden */\n\n\n  CircleEase.prototype.easeInCore = function (gradient) {\n    gradient = Math.max(0, Math.min(1, gradient));\n    return 1.0 - Math.sqrt(1.0 - gradient * gradient);\n  };\n\n  return CircleEase;\n}(EasingFunction);\n\nexport { CircleEase };\n/**\r\n * Easing function with a ease back shape (see link below).\r\n * @see https://easings.net/#easeInBack\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar BackEase =\n/** @class */\nfunction (_super) {\n  __extends(BackEase, _super);\n  /**\r\n   * Instantiates a back ease easing\r\n   * @see https://easings.net/#easeInBack\r\n   * @param amplitude Defines the amplitude of the function\r\n   */\n\n\n  function BackEase(\n  /** Defines the amplitude of the function */\n  amplitude) {\n    if (amplitude === void 0) {\n      amplitude = 1;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.amplitude = amplitude;\n    return _this;\n  }\n  /** @hidden */\n\n\n  BackEase.prototype.easeInCore = function (gradient) {\n    var num = Math.max(0, this.amplitude);\n    return Math.pow(gradient, 3.0) - gradient * num * Math.sin(3.1415926535897931 * gradient);\n  };\n\n  return BackEase;\n}(EasingFunction);\n\nexport { BackEase };\n/**\r\n * Easing function with a bouncing shape (see link below).\r\n * @see https://easings.net/#easeInBounce\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar BounceEase =\n/** @class */\nfunction (_super) {\n  __extends(BounceEase, _super);\n  /**\r\n   * Instantiates a bounce easing\r\n   * @see https://easings.net/#easeInBounce\r\n   * @param bounces Defines the number of bounces\r\n   * @param bounciness Defines the amplitude of the bounce\r\n   */\n\n\n  function BounceEase(\n  /** Defines the number of bounces */\n  bounces,\n  /** Defines the amplitude of the bounce */\n  bounciness) {\n    if (bounces === void 0) {\n      bounces = 3;\n    }\n\n    if (bounciness === void 0) {\n      bounciness = 2;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.bounces = bounces;\n    _this.bounciness = bounciness;\n    return _this;\n  }\n  /** @hidden */\n\n\n  BounceEase.prototype.easeInCore = function (gradient) {\n    var y = Math.max(0.0, this.bounces);\n    var bounciness = this.bounciness;\n\n    if (bounciness <= 1.0) {\n      bounciness = 1.001;\n    }\n\n    var num9 = Math.pow(bounciness, y);\n    var num5 = 1.0 - bounciness;\n    var num4 = (1.0 - num9) / num5 + num9 * 0.5;\n    var num15 = gradient * num4;\n    var num65 = Math.log(-num15 * (1.0 - bounciness) + 1.0) / Math.log(bounciness);\n    var num3 = Math.floor(num65);\n    var num13 = num3 + 1.0;\n    var num8 = (1.0 - Math.pow(bounciness, num3)) / (num5 * num4);\n    var num12 = (1.0 - Math.pow(bounciness, num13)) / (num5 * num4);\n    var num7 = (num8 + num12) * 0.5;\n    var num6 = gradient - num7;\n    var num2 = num7 - num8;\n    return -Math.pow(1.0 / bounciness, y - num3) / (num2 * num2) * (num6 - num2) * (num6 + num2);\n  };\n\n  return BounceEase;\n}(EasingFunction);\n\nexport { BounceEase };\n/**\r\n * Easing function with a power of 3 shape (see link below).\r\n * @see https://easings.net/#easeInCubic\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar CubicEase =\n/** @class */\nfunction (_super) {\n  __extends(CubicEase, _super);\n\n  function CubicEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @hidden */\n\n\n  CubicEase.prototype.easeInCore = function (gradient) {\n    return gradient * gradient * gradient;\n  };\n\n  return CubicEase;\n}(EasingFunction);\n\nexport { CubicEase };\n/**\r\n * Easing function with an elastic shape (see link below).\r\n * @see https://easings.net/#easeInElastic\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar ElasticEase =\n/** @class */\nfunction (_super) {\n  __extends(ElasticEase, _super);\n  /**\r\n   * Instantiates an elastic easing function\r\n   * @see https://easings.net/#easeInElastic\r\n   * @param oscillations Defines the number of oscillations\r\n   * @param springiness Defines the amplitude of the oscillations\r\n   */\n\n\n  function ElasticEase(\n  /** Defines the number of oscillations*/\n  oscillations,\n  /** Defines the amplitude of the oscillations*/\n  springiness) {\n    if (oscillations === void 0) {\n      oscillations = 3;\n    }\n\n    if (springiness === void 0) {\n      springiness = 3;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.oscillations = oscillations;\n    _this.springiness = springiness;\n    return _this;\n  }\n  /** @hidden */\n\n\n  ElasticEase.prototype.easeInCore = function (gradient) {\n    var num2;\n    var num3 = Math.max(0.0, this.oscillations);\n    var num = Math.max(0.0, this.springiness);\n\n    if (num == 0) {\n      num2 = gradient;\n    } else {\n      num2 = (Math.exp(num * gradient) - 1.0) / (Math.exp(num) - 1.0);\n    }\n\n    return num2 * Math.sin((6.2831853071795862 * num3 + 1.5707963267948966) * gradient);\n  };\n\n  return ElasticEase;\n}(EasingFunction);\n\nexport { ElasticEase };\n/**\r\n * Easing function with an exponential shape (see link below).\r\n * @see https://easings.net/#easeInExpo\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar ExponentialEase =\n/** @class */\nfunction (_super) {\n  __extends(ExponentialEase, _super);\n  /**\r\n   * Instantiates an exponential easing function\r\n   * @see https://easings.net/#easeInExpo\r\n   * @param exponent Defines the exponent of the function\r\n   */\n\n\n  function ExponentialEase(\n  /** Defines the exponent of the function */\n  exponent) {\n    if (exponent === void 0) {\n      exponent = 2;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.exponent = exponent;\n    return _this;\n  }\n  /** @hidden */\n\n\n  ExponentialEase.prototype.easeInCore = function (gradient) {\n    if (this.exponent <= 0) {\n      return gradient;\n    }\n\n    return (Math.exp(this.exponent * gradient) - 1.0) / (Math.exp(this.exponent) - 1.0);\n  };\n\n  return ExponentialEase;\n}(EasingFunction);\n\nexport { ExponentialEase };\n/**\r\n * Easing function with a power shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar PowerEase =\n/** @class */\nfunction (_super) {\n  __extends(PowerEase, _super);\n  /**\r\n   * Instantiates an power base easing function\r\n   * @see https://easings.net/#easeInQuad\r\n   * @param power Defines the power of the function\r\n   */\n\n\n  function PowerEase(\n  /** Defines the power of the function */\n  power) {\n    if (power === void 0) {\n      power = 2;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.power = power;\n    return _this;\n  }\n  /** @hidden */\n\n\n  PowerEase.prototype.easeInCore = function (gradient) {\n    var y = Math.max(0.0, this.power);\n    return Math.pow(gradient, y);\n  };\n\n  return PowerEase;\n}(EasingFunction);\n\nexport { PowerEase };\n/**\r\n * Easing function with a power of 2 shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar QuadraticEase =\n/** @class */\nfunction (_super) {\n  __extends(QuadraticEase, _super);\n\n  function QuadraticEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @hidden */\n\n\n  QuadraticEase.prototype.easeInCore = function (gradient) {\n    return gradient * gradient;\n  };\n\n  return QuadraticEase;\n}(EasingFunction);\n\nexport { QuadraticEase };\n/**\r\n * Easing function with a power of 4 shape (see link below).\r\n * @see https://easings.net/#easeInQuart\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar QuarticEase =\n/** @class */\nfunction (_super) {\n  __extends(QuarticEase, _super);\n\n  function QuarticEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @hidden */\n\n\n  QuarticEase.prototype.easeInCore = function (gradient) {\n    return gradient * gradient * gradient * gradient;\n  };\n\n  return QuarticEase;\n}(EasingFunction);\n\nexport { QuarticEase };\n/**\r\n * Easing function with a power of 5 shape (see link below).\r\n * @see https://easings.net/#easeInQuint\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar QuinticEase =\n/** @class */\nfunction (_super) {\n  __extends(QuinticEase, _super);\n\n  function QuinticEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @hidden */\n\n\n  QuinticEase.prototype.easeInCore = function (gradient) {\n    return gradient * gradient * gradient * gradient * gradient;\n  };\n\n  return QuinticEase;\n}(EasingFunction);\n\nexport { QuinticEase };\n/**\r\n * Easing function with a sin shape (see link below).\r\n * @see https://easings.net/#easeInSine\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar SineEase =\n/** @class */\nfunction (_super) {\n  __extends(SineEase, _super);\n\n  function SineEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @hidden */\n\n\n  SineEase.prototype.easeInCore = function (gradient) {\n    return 1.0 - Math.sin(1.5707963267948966 * (1.0 - gradient));\n  };\n\n  return SineEase;\n}(EasingFunction);\n\nexport { SineEase };\n/**\r\n * Easing function with a bezier shape (see link below).\r\n * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar BezierCurveEase =\n/** @class */\nfunction (_super) {\n  __extends(BezierCurveEase, _super);\n  /**\r\n   * Instantiates a bezier function\r\n   * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n   * @param x1 Defines the x component of the start tangent in the bezier curve\r\n   * @param y1 Defines the y component of the start tangent in the bezier curve\r\n   * @param x2 Defines the x component of the end tangent in the bezier curve\r\n   * @param y2 Defines the y component of the end tangent in the bezier curve\r\n   */\n\n\n  function BezierCurveEase(\n  /** Defines the x component of the start tangent in the bezier curve */\n  x1,\n  /** Defines the y component of the start tangent in the bezier curve */\n  y1,\n  /** Defines the x component of the end tangent in the bezier curve */\n  x2,\n  /** Defines the y component of the end tangent in the bezier curve */\n  y2) {\n    if (x1 === void 0) {\n      x1 = 0;\n    }\n\n    if (y1 === void 0) {\n      y1 = 0;\n    }\n\n    if (x2 === void 0) {\n      x2 = 1;\n    }\n\n    if (y2 === void 0) {\n      y2 = 1;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.x1 = x1;\n    _this.y1 = y1;\n    _this.x2 = x2;\n    _this.y2 = y2;\n    return _this;\n  }\n  /** @hidden */\n\n\n  BezierCurveEase.prototype.easeInCore = function (gradient) {\n    return BezierCurve.Interpolate(gradient, this.x1, this.y1, this.x2, this.y2);\n  };\n\n  return BezierCurveEase;\n}(EasingFunction);\n\nexport { BezierCurveEase };","map":{"version":3,"sources":["../../../sourceES6/core/Animations/easing.ts"],"names":[],"mappings":"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","sourcesContent":["import { BezierCurve } from \"../Maths/math.path\";\r\n\r\n/**\r\n * This represents the main contract an easing function should follow.\r\n * Easing functions are used throughout the animation system.\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport interface IEasingFunction {\r\n    /**\r\n     * Given an input gradient between 0 and 1, this returns the corrseponding value\r\n     * of the easing function.\r\n     * The link below provides some of the most common examples of easing functions.\r\n     * @see https://easings.net/\r\n     * @param gradient Defines the value between 0 and 1 we want the easing value for\r\n     * @returns the corresponding value on the curve defined by the easing function\r\n     */\r\n    ease(gradient: number): number;\r\n}\r\n\r\n/**\r\n * Base class used for every default easing function.\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Interpolation follows the mathematical formula associated with the easing function.\r\n     */\r\n    public static readonly EASINGMODE_EASEIN = 0;\r\n\r\n    /**\r\n     * Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.\r\n     */\r\n    public static readonly EASINGMODE_EASEOUT = 1;\r\n\r\n    /**\r\n     * Interpolation uses EaseIn for the first half of the animation and EaseOut for the second half.\r\n     */\r\n    public static readonly EASINGMODE_EASEINOUT = 2;\r\n\r\n    private _easingMode = EasingFunction.EASINGMODE_EASEIN;\r\n\r\n    /**\r\n     * Sets the easing mode of the current function.\r\n     * @param easingMode Defines the willing mode (EASINGMODE_EASEIN, EASINGMODE_EASEOUT or EASINGMODE_EASEINOUT)\r\n     */\r\n    public setEasingMode(easingMode: number) {\r\n        var n = Math.min(Math.max(easingMode, 0), 2);\r\n        this._easingMode = n;\r\n    }\r\n    /**\r\n     * Gets the current easing mode.\r\n     * @returns the easing mode\r\n     */\r\n    public getEasingMode(): number {\r\n        return this._easingMode;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        throw new Error('You must implement this method');\r\n    }\r\n\r\n    /**\r\n     * Given an input gradient between 0 and 1, this returns the corresponding value\r\n     * of the easing function.\r\n     * @param gradient Defines the value between 0 and 1 we want the easing value for\r\n     * @returns the corresponding value on the curve defined by the easing function\r\n     */\r\n    public ease(gradient: number): number {\r\n        switch (this._easingMode) {\r\n            case EasingFunction.EASINGMODE_EASEIN:\r\n                return this.easeInCore(gradient);\r\n            case EasingFunction.EASINGMODE_EASEOUT:\r\n                return (1 - this.easeInCore(1 - gradient));\r\n        }\r\n\r\n        if (gradient >= 0.5) {\r\n            return (((1 - this.easeInCore((1 - gradient) * 2)) * 0.5) + 0.5);\r\n        }\r\n\r\n        return (this.easeInCore(gradient * 2) * 0.5);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a circle shape (see link below).\r\n * @see https://easings.net/#easeInCirc\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class CircleEase extends EasingFunction implements IEasingFunction {\r\n    /** @hidden */\r\n    public easeInCore(gradient: number): number {\r\n        gradient = Math.max(0, Math.min(1, gradient));\r\n        return (1.0 - Math.sqrt(1.0 - (gradient * gradient)));\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a ease back shape (see link below).\r\n * @see https://easings.net/#easeInBack\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class BackEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a back ease easing\r\n     * @see https://easings.net/#easeInBack\r\n     * @param amplitude Defines the amplitude of the function\r\n     */\r\n    constructor(\r\n        /** Defines the amplitude of the function */\r\n        public amplitude: number = 1) {\r\n        super();\r\n    }\r\n\r\n    /** @hidden */\r\n    public easeInCore(gradient: number): number {\r\n        var num = Math.max(0, this.amplitude);\r\n        return (Math.pow(gradient, 3.0) - ((gradient * num) * Math.sin(3.1415926535897931 * gradient)));\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a bouncing shape (see link below).\r\n * @see https://easings.net/#easeInBounce\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class BounceEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a bounce easing\r\n     * @see https://easings.net/#easeInBounce\r\n     * @param bounces Defines the number of bounces\r\n     * @param bounciness Defines the amplitude of the bounce\r\n     */\r\n    constructor(\r\n        /** Defines the number of bounces */\r\n        public bounces: number = 3,\r\n        /** Defines the amplitude of the bounce */\r\n        public bounciness: number = 2) {\r\n        super();\r\n    }\r\n\r\n    /** @hidden */\r\n    public easeInCore(gradient: number): number {\r\n        var y = Math.max(0.0, this.bounces);\r\n        var bounciness = this.bounciness;\r\n        if (bounciness <= 1.0) {\r\n            bounciness = 1.001;\r\n        }\r\n        var num9 = Math.pow(bounciness, y);\r\n        var num5 = 1.0 - bounciness;\r\n        var num4 = ((1.0 - num9) / num5) + (num9 * 0.5);\r\n        var num15 = gradient * num4;\r\n        var num65 = Math.log((-num15 * (1.0 - bounciness)) + 1.0) / Math.log(bounciness);\r\n        var num3 = Math.floor(num65);\r\n        var num13 = num3 + 1.0;\r\n        var num8 = (1.0 - Math.pow(bounciness, num3)) / (num5 * num4);\r\n        var num12 = (1.0 - Math.pow(bounciness, num13)) / (num5 * num4);\r\n        var num7 = (num8 + num12) * 0.5;\r\n        var num6 = gradient - num7;\r\n        var num2 = num7 - num8;\r\n        return (((-Math.pow(1.0 / bounciness, y - num3) / (num2 * num2)) * (num6 - num2)) * (num6 + num2));\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 3 shape (see link below).\r\n * @see https://easings.net/#easeInCubic\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class CubicEase extends EasingFunction implements IEasingFunction {\r\n    /** @hidden */\r\n    public easeInCore(gradient: number): number {\r\n        return (gradient * gradient * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with an elastic shape (see link below).\r\n * @see https://easings.net/#easeInElastic\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class ElasticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an elastic easing function\r\n     * @see https://easings.net/#easeInElastic\r\n     * @param oscillations Defines the number of oscillations\r\n     * @param springiness Defines the amplitude of the oscillations\r\n     */\r\n    constructor(\r\n        /** Defines the number of oscillations*/\r\n        public oscillations: number = 3,\r\n        /** Defines the amplitude of the oscillations*/\r\n        public springiness: number = 3) {\r\n        super();\r\n    }\r\n\r\n    /** @hidden */\r\n    public easeInCore(gradient: number): number {\r\n        var num2;\r\n        var num3 = Math.max(0.0, this.oscillations);\r\n        var num = Math.max(0.0, this.springiness);\r\n\r\n        if (num == 0) {\r\n            num2 = gradient;\r\n        } else {\r\n            num2 = (Math.exp(num * gradient) - 1.0) / (Math.exp(num) - 1.0);\r\n        }\r\n        return (num2 * Math.sin(((6.2831853071795862 * num3) + 1.5707963267948966) * gradient));\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with an exponential shape (see link below).\r\n * @see https://easings.net/#easeInExpo\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class ExponentialEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an exponential easing function\r\n     * @see https://easings.net/#easeInExpo\r\n     * @param exponent Defines the exponent of the function\r\n     */\r\n    constructor(\r\n        /** Defines the exponent of the function */\r\n        public exponent: number = 2) {\r\n        super();\r\n    }\r\n\r\n    /** @hidden */\r\n    public easeInCore(gradient: number): number {\r\n        if (this.exponent <= 0) {\r\n            return gradient;\r\n        }\r\n\r\n        return ((Math.exp(this.exponent * gradient) - 1.0) / (Math.exp(this.exponent) - 1.0));\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class PowerEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an power base easing function\r\n     * @see https://easings.net/#easeInQuad\r\n     * @param power Defines the power of the function\r\n     */\r\n    constructor(\r\n        /** Defines the power of the function */\r\n        public power: number = 2) {\r\n        super();\r\n    }\r\n\r\n    /** @hidden */\r\n    public easeInCore(gradient: number): number {\r\n        var y = Math.max(0.0, this.power);\r\n        return Math.pow(gradient, y);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 2 shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class QuadraticEase extends EasingFunction implements IEasingFunction {\r\n    /** @hidden */\r\n    public easeInCore(gradient: number): number {\r\n        return (gradient * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 4 shape (see link below).\r\n * @see https://easings.net/#easeInQuart\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class QuarticEase extends EasingFunction implements IEasingFunction {\r\n    /** @hidden */\r\n    public easeInCore(gradient: number): number {\r\n        return (gradient * gradient * gradient * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 5 shape (see link below).\r\n * @see https://easings.net/#easeInQuint\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class QuinticEase extends EasingFunction implements IEasingFunction {\r\n    /** @hidden */\r\n    public easeInCore(gradient: number): number {\r\n        return (gradient * gradient * gradient * gradient * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a sin shape (see link below).\r\n * @see https://easings.net/#easeInSine\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class SineEase extends EasingFunction implements IEasingFunction {\r\n    /** @hidden */\r\n    public easeInCore(gradient: number): number {\r\n        return (1.0 - Math.sin(1.5707963267948966 * (1.0 - gradient)));\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a bezier shape (see link below).\r\n * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class BezierCurveEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a bezier function\r\n     * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n     * @param x1 Defines the x component of the start tangent in the bezier curve\r\n     * @param y1 Defines the y component of the start tangent in the bezier curve\r\n     * @param x2 Defines the x component of the end tangent in the bezier curve\r\n     * @param y2 Defines the y component of the end tangent in the bezier curve\r\n     */\r\n    constructor(\r\n        /** Defines the x component of the start tangent in the bezier curve */\r\n        public x1: number = 0,\r\n        /** Defines the y component of the start tangent in the bezier curve */\r\n        public y1: number = 0,\r\n        /** Defines the x component of the end tangent in the bezier curve */\r\n        public x2: number = 1,\r\n        /** Defines the y component of the end tangent in the bezier curve */\r\n        public y2: number = 1) {\r\n        super();\r\n    }\r\n\r\n    /** @hidden */\r\n    public easeInCore(gradient: number): number {\r\n        return BezierCurve.Interpolate(gradient, this.x1, this.y1, this.x2, this.y2);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}