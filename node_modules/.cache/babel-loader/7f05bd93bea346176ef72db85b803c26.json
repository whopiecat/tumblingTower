{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../Misc/decorators\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\nimport { Node } from \"../node\";\nimport { Light } from \"./light\";\nimport { ShadowLight } from \"./shadowLight\";\nNode.AddNodeConstructor(\"Light_Type_0\", function (name, scene) {\n  return function () {\n    return new PointLight(name, Vector3.Zero(), scene);\n  };\n});\n/**\r\n * A point light is a light defined by an unique point in world space.\r\n * The light is emitted in every direction from this point.\r\n * A good example of a point light is a standard light bulb.\r\n * Documentation: https://doc.babylonjs.com/babylon101/lights\r\n */\n\nvar PointLight =\n/** @class */\nfunction (_super) {\n  __extends(PointLight, _super);\n  /**\r\n   * Creates a PointLight object from the passed name and position (Vector3) and adds it in the scene.\r\n   * A PointLight emits the light in every direction.\r\n   * It can cast shadows.\r\n   * If the scene camera is already defined and you want to set your PointLight at the camera position, just set it :\r\n   * ```javascript\r\n   * var pointLight = new PointLight(\"pl\", camera.position, scene);\r\n   * ```\r\n   * Documentation : https://doc.babylonjs.com/babylon101/lights\r\n   * @param name The light friendly name\r\n   * @param position The position of the point light in the scene\r\n   * @param scene The scene the lights belongs to\r\n   */\n\n\n  function PointLight(name, position, scene) {\n    var _this = _super.call(this, name, scene) || this;\n\n    _this._shadowAngle = Math.PI / 2;\n    _this.position = position;\n    return _this;\n  }\n\n  Object.defineProperty(PointLight.prototype, \"shadowAngle\", {\n    /**\r\n     * Getter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\n    get: function () {\n      return this._shadowAngle;\n    },\n\n    /**\r\n     * Setter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\n    set: function (value) {\n      this._shadowAngle = value;\n      this.forceProjectionMatrixCompute();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PointLight.prototype, \"direction\", {\n    /**\r\n     * Gets the direction if it has been set.\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\n    get: function () {\n      return this._direction;\n    },\n\n    /**\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\n    set: function (value) {\n      var previousNeedCube = this.needCube();\n      this._direction = value;\n\n      if (this.needCube() !== previousNeedCube && this._shadowGenerator) {\n        this._shadowGenerator.recreateShadowMap();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the string \"PointLight\"\r\n   * @returns the class name\r\n   */\n\n  PointLight.prototype.getClassName = function () {\n    return \"PointLight\";\n  };\n  /**\r\n   * Returns the integer 0.\r\n   * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n   */\n\n\n  PointLight.prototype.getTypeID = function () {\n    return Light.LIGHTTYPEID_POINTLIGHT;\n  };\n  /**\r\n   * Specifies wether or not the shadowmap should be a cube texture.\r\n   * @returns true if the shadowmap needs to be a cube texture.\r\n   */\n\n\n  PointLight.prototype.needCube = function () {\n    return !this.direction;\n  };\n  /**\r\n   * Returns a new Vector3 aligned with the PointLight cube system according to the passed cube face index (integer).\r\n   * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n   * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n   */\n\n\n  PointLight.prototype.getShadowDirection = function (faceIndex) {\n    if (this.direction) {\n      return _super.prototype.getShadowDirection.call(this, faceIndex);\n    } else {\n      switch (faceIndex) {\n        case 0:\n          return new Vector3(1.0, 0.0, 0.0);\n\n        case 1:\n          return new Vector3(-1.0, 0.0, 0.0);\n\n        case 2:\n          return new Vector3(0.0, -1.0, 0.0);\n\n        case 3:\n          return new Vector3(0.0, 1.0, 0.0);\n\n        case 4:\n          return new Vector3(0.0, 0.0, 1.0);\n\n        case 5:\n          return new Vector3(0.0, 0.0, -1.0);\n      }\n    }\n\n    return Vector3.Zero();\n  };\n  /**\r\n   * Sets the passed matrix \"matrix\" as a left-handed perspective projection matrix with the following settings :\r\n   * - fov = PI / 2\r\n   * - aspect ratio : 1.0\r\n   * - z-near and far equal to the active camera minZ and maxZ.\r\n   * Returns the PointLight.\r\n   */\n\n\n  PointLight.prototype._setDefaultShadowProjectionMatrix = function (matrix, viewMatrix, renderList) {\n    var activeCamera = this.getScene().activeCamera;\n\n    if (!activeCamera) {\n      return;\n    }\n\n    Matrix.PerspectiveFovLHToRef(this.shadowAngle, 1.0, this.getDepthMinZ(activeCamera), this.getDepthMaxZ(activeCamera), matrix);\n  };\n\n  PointLight.prototype._buildUniformLayout = function () {\n    this._uniformBuffer.addUniform(\"vLightData\", 4);\n\n    this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\n\n    this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\n\n    this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\n\n    this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\n\n    this._uniformBuffer.addUniform(\"depthValues\", 2);\n\n    this._uniformBuffer.create();\n  };\n  /**\r\n   * Sets the passed Effect \"effect\" with the PointLight transformed position (or position, if none) and passed name (string).\r\n   * @param effect The effect to update\r\n   * @param lightIndex The index of the light in the effect to update\r\n   * @returns The point light\r\n   */\n\n\n  PointLight.prototype.transferToEffect = function (effect, lightIndex) {\n    if (this.computeTransformedInformation()) {\n      this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z, 0.0, lightIndex);\n    } else {\n      this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x, this.position.y, this.position.z, 0, lightIndex);\n    }\n\n    this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, 0, 0, lightIndex);\n\n    return this;\n  };\n\n  PointLight.prototype.transferToNodeMaterialEffect = function (effect, lightDataUniformName) {\n    if (this.computeTransformedInformation()) {\n      effect.setFloat3(lightDataUniformName, this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z);\n    } else {\n      effect.setFloat3(lightDataUniformName, this.position.x, this.position.y, this.position.z);\n    }\n\n    return this;\n  };\n  /**\r\n   * Prepares the list of defines specific to the light type.\r\n   * @param defines the list of defines\r\n   * @param lightIndex defines the index of the light for the effect\r\n   */\n\n\n  PointLight.prototype.prepareLightSpecificDefines = function (defines, lightIndex) {\n    defines[\"POINTLIGHT\" + lightIndex] = true;\n  };\n\n  __decorate([serialize()], PointLight.prototype, \"shadowAngle\", null);\n\n  return PointLight;\n}(ShadowLight);\n\nexport { PointLight };","map":{"version":3,"sources":["../../../sourceES6/core/Lights/pointLight.ts"],"names":[],"mappings":"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","sourcesContent":["import { serialize } from \"../Misc/decorators\";\r\nimport { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { ShadowLight } from \"./shadowLight\";\r\nimport { Effect } from \"../Materials/effect\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_0\", (name, scene) => {\r\n    return () => new PointLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * A point light is a light defined by an unique point in world space.\r\n * The light is emitted in every direction from this point.\r\n * A good example of a point light is a standard light bulb.\r\n * Documentation: https://doc.babylonjs.com/babylon101/lights\r\n */\r\nexport class PointLight extends ShadowLight {\r\n\r\n    private _shadowAngle = Math.PI / 2;\r\n    /**\r\n     * Getter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\r\n    @serialize()\r\n    public get shadowAngle(): number {\r\n        return this._shadowAngle;\r\n    }\r\n    /**\r\n     * Setter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\r\n    public set shadowAngle(value: number) {\r\n        this._shadowAngle = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Gets the direction if it has been set.\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\r\n    public get direction(): Vector3 {\r\n        return this._direction;\r\n    }\r\n\r\n    /**\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\r\n    public set direction(value: Vector3) {\r\n        var previousNeedCube = this.needCube();\r\n        this._direction = value;\r\n        if (this.needCube() !== previousNeedCube && this._shadowGenerator) {\r\n            this._shadowGenerator.recreateShadowMap();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a PointLight object from the passed name and position (Vector3) and adds it in the scene.\r\n     * A PointLight emits the light in every direction.\r\n     * It can cast shadows.\r\n     * If the scene camera is already defined and you want to set your PointLight at the camera position, just set it :\r\n     * ```javascript\r\n     * var pointLight = new PointLight(\"pl\", camera.position, scene);\r\n     * ```\r\n     * Documentation : https://doc.babylonjs.com/babylon101/lights\r\n     * @param name The light friendly name\r\n     * @param position The position of the point light in the scene\r\n     * @param scene The scene the lights belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene: Scene) {\r\n        super(name, scene);\r\n        this.position = position;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"PointLight\"\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"PointLight\";\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 0.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return Light.LIGHTTYPEID_POINTLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Specifies wether or not the shadowmap should be a cube texture.\r\n     * @returns true if the shadowmap needs to be a cube texture.\r\n     */\r\n    public needCube(): boolean {\r\n        return !this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 aligned with the PointLight cube system according to the passed cube face index (integer).\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    public getShadowDirection(faceIndex?: number): Vector3 {\r\n        if (this.direction) {\r\n            return super.getShadowDirection(faceIndex);\r\n        }\r\n        else {\r\n            switch (faceIndex) {\r\n                case 0:\r\n                    return new Vector3(1.0, 0.0, 0.0);\r\n                case 1:\r\n                    return new Vector3(-1.0, 0.0, 0.0);\r\n                case 2:\r\n                    return new Vector3(0.0, -1.0, 0.0);\r\n                case 3:\r\n                    return new Vector3(0.0, 1.0, 0.0);\r\n                case 4:\r\n                    return new Vector3(0.0, 0.0, 1.0);\r\n                case 5:\r\n                    return new Vector3(0.0, 0.0, -1.0);\r\n            }\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as a left-handed perspective projection matrix with the following settings :\r\n     * - fov = PI / 2\r\n     * - aspect ratio : 1.0\r\n     * - z-near and far equal to the active camera minZ and maxZ.\r\n     * Returns the PointLight.\r\n     */\r\n    protected _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        var activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        Matrix.PerspectiveFovLHToRef(this.shadowAngle, 1.0,\r\n            this.getDepthMinZ(activeCamera), this.getDepthMaxZ(activeCamera), matrix);\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the PointLight transformed position (or position, if none) and passed name (string).\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The point light\r\n     */\r\n    public transferToEffect(effect: Effect, lightIndex: string): PointLight {\r\n        if (this.computeTransformedInformation()) {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\",\r\n                this.transformedPosition.x,\r\n                this.transformedPosition.y,\r\n                this.transformedPosition.z,\r\n                0.0,\r\n                lightIndex);\r\n        }\r\n        else {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x, this.position.y, this.position.z, 0, lightIndex);\r\n        }\r\n\r\n        this._uniformBuffer.updateFloat4(\"vLightFalloff\",\r\n            this.range,\r\n            this._inverseSquaredRange,\r\n            0,\r\n            0,\r\n            lightIndex\r\n        );\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\r\n        if (this.computeTransformedInformation()) {\r\n            effect.setFloat3(lightDataUniformName, this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z);\r\n        }\r\n        else {\r\n            effect.setFloat3(lightDataUniformName, this.position.x, this.position.y, this.position.z);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"POINTLIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}