{"ast":null,"code":"import { DeepCopier } from \"../Misc/deepCopier\";\nimport { Color3 } from \"../Maths/math.color\";\nimport { Engine } from \"../Engines/engine\";\nimport { SerializationHelper } from \"../Misc/decorators\";\n/**\r\n * This represents all the required information to add a fresnel effect on a material:\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_fresnelparameters\r\n */\n\nvar FresnelParameters =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new FresnelParameters object.\r\n   *\r\n   * @param options provide your own settings to optionally to override defaults\r\n   */\n  function FresnelParameters(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._isEnabled = true;\n    this.bias = options.bias === undefined ? 0 : options.bias;\n    this.power = options.power === undefined ? 1 : options.power;\n    this.leftColor = options.leftColor || Color3.White();\n    this.rightColor = options.rightColor || Color3.Black();\n\n    if (options.isEnabled === false) {\n      this.isEnabled = false;\n    }\n  }\n\n  Object.defineProperty(FresnelParameters.prototype, \"isEnabled\", {\n    /**\r\n     * Define if the fresnel effect is enable or not.\r\n     */\n    get: function () {\n      return this._isEnabled;\n    },\n    set: function (value) {\n      if (this._isEnabled === value) {\n        return;\n      }\n\n      this._isEnabled = value;\n      Engine.MarkAllMaterialsAsDirty(4 | 16);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Clones the current fresnel and its valuues\r\n   * @returns a clone fresnel configuration\r\n   */\n\n  FresnelParameters.prototype.clone = function () {\n    var newFresnelParameters = new FresnelParameters();\n    DeepCopier.DeepCopy(this, newFresnelParameters);\n    return newFresnelParameters;\n  };\n  /**\r\n   * Determines equality between FresnelParameters objects\r\n   * @param otherFresnelParameters defines the second operand\r\n   * @returns true if the power, bias, leftColor, rightColor and isEnabled values are equal to the given ones\r\n   */\n\n\n  FresnelParameters.prototype.equals = function (otherFresnelParameters) {\n    return otherFresnelParameters && this.bias === otherFresnelParameters.bias && this.power === otherFresnelParameters.power && this.leftColor.equals(otherFresnelParameters.leftColor) && this.rightColor.equals(otherFresnelParameters.rightColor) && this.isEnabled === otherFresnelParameters.isEnabled;\n  };\n  /**\r\n   * Serializes the current fresnel parameters to a JSON representation.\r\n   * @return the JSON serialization\r\n   */\n\n\n  FresnelParameters.prototype.serialize = function () {\n    return {\n      isEnabled: this.isEnabled,\n      leftColor: this.leftColor.asArray(),\n      rightColor: this.rightColor.asArray(),\n      bias: this.bias,\n      power: this.power\n    };\n  };\n  /**\r\n   * Parse a JSON object and deserialize it to a new Fresnel parameter object.\r\n   * @param parsedFresnelParameters Define the JSON representation\r\n   * @returns the parsed parameters\r\n   */\n\n\n  FresnelParameters.Parse = function (parsedFresnelParameters) {\n    return new FresnelParameters({\n      isEnabled: parsedFresnelParameters.isEnabled,\n      leftColor: Color3.FromArray(parsedFresnelParameters.leftColor),\n      rightColor: Color3.FromArray(parsedFresnelParameters.rightColor),\n      bias: parsedFresnelParameters.bias,\n      power: parsedFresnelParameters.power || 1.0\n    });\n  };\n\n  return FresnelParameters;\n}();\n\nexport { FresnelParameters }; // References the dependencies.\n\nSerializationHelper._FresnelParametersParser = FresnelParameters.Parse;","map":{"version":3,"sources":["../../../sourceES6/core/Materials/fresnelParameters.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,oBAA3B;AAEA,SAAS,MAAT,QAAuB,qBAAvB;AACA,SAAS,MAAT,QAAuB,mBAAvB;AACA,SAAS,mBAAT,QAAoC,oBAApC;AA+DA;;;;;AAIA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAqCI;;;;;AAKA,WAAA,iBAAA,CAAmB,OAAnB,EAAkE;AAA/C,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA+C;;AAzC1D,SAAA,UAAA,GAAa,IAAb;AA0CJ,SAAK,IAAL,GAAa,OAAO,CAAC,IAAR,KAAiB,SAAlB,GAA+B,CAA/B,GAAmC,OAAO,CAAC,IAAvD;AACA,SAAK,KAAL,GAAc,OAAO,CAAC,KAAR,KAAkB,SAAnB,GAAgC,CAAhC,GAAoC,OAAO,CAAC,KAAzD;AACA,SAAK,SAAL,GAAiB,OAAO,CAAC,SAAR,IAAqB,MAAM,CAAC,KAAP,EAAtC;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,UAAR,IAAsB,MAAM,CAAC,KAAP,EAAxC;;AACA,QAAI,OAAO,CAAC,SAAR,KAAsB,KAA1B,EAAiC;AAC7B,WAAK,SAAL,GAAiB,KAAjB;AACH;AACJ;;AA7CD,EAAA,MAAA,CAAA,cAAA,CAAW,iBAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA,YAAA;AACI,aAAO,KAAK,UAAZ;AACH,KAFmB;SAGpB,UAAqB,KAArB,EAAmC;AAC/B,UAAI,KAAK,UAAL,KAAoB,KAAxB,EAA+B;AAC3B;AACH;;AAED,WAAK,UAAL,GAAkB,KAAlB;AACA,MAAA,MAAM,CAAC,uBAAP,CAA+B,IAAI,EAAnC;AACH,KAVmB;qBAAA;;AAAA,GAApB;AA+CA;;;;;AAIO,EAAA,iBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACI,QAAI,oBAAoB,GAAG,IAAI,iBAAJ,EAA3B;AAEA,IAAA,UAAU,CAAC,QAAX,CAAoB,IAApB,EAA0B,oBAA1B;AAEA,WAAO,oBAAP;AACH,GANM;AAQP;;;;;;;AAKO,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,sBAAd,EAAsE;AAClE,WAAO,sBAAsB,IACzB,KAAK,IAAL,KAAc,sBAAsB,CAAC,IADlC,IAEH,KAAK,KAAL,KAAe,sBAAsB,CAAC,KAFnC,IAGH,KAAK,SAAL,CAAe,MAAf,CAAsB,sBAAsB,CAAC,SAA7C,CAHG,IAIH,KAAK,UAAL,CAAgB,MAAhB,CAAuB,sBAAsB,CAAC,UAA9C,CAJG,IAKH,KAAK,SAAL,KAAmB,sBAAsB,CAAC,SAL9C;AAMH,GAPM;AASP;;;;;;AAIO,EAAA,iBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACI,WAAO;AACH,MAAA,SAAS,EAAE,KAAK,SADb;AAEH,MAAA,SAAS,EAAE,KAAK,SAAL,CAAe,OAAf,EAFR;AAGH,MAAA,UAAU,EAAE,KAAK,UAAL,CAAgB,OAAhB,EAHT;AAIH,MAAA,IAAI,EAAE,KAAK,IAJR;AAKH,MAAA,KAAK,EAAE,KAAK;AALT,KAAP;AAOH,GARM;AAUP;;;;;;;AAKc,EAAA,iBAAA,CAAA,KAAA,GAAd,UAAoB,uBAApB,EAAyE;AACrE,WAAO,IAAI,iBAAJ,CAAsB;AACzB,MAAA,SAAS,EAAE,uBAAuB,CAAC,SADV;AAEzB,MAAA,SAAS,EAAE,MAAM,CAAC,SAAP,CAAiB,uBAAuB,CAAC,SAAzC,CAFc;AAGzB,MAAA,UAAU,EAAE,MAAM,CAAC,SAAP,CAAiB,uBAAuB,CAAC,UAAzC,CAHa;AAIzB,MAAA,IAAI,EAAE,uBAAuB,CAAC,IAJL;AAKzB,MAAA,KAAK,EAAE,uBAAuB,CAAC,KAAxB,IAAiC;AALf,KAAtB,CAAP;AAOH,GARa;;AASlB,SAAA,iBAAA;AAAC,CA1GD,EAAA;;8BA4GA;;AACA,mBAAmB,CAAC,wBAApB,GAA+C,iBAAiB,CAAC,KAAjE","sourcesContent":["import { DeepCopier } from \"../Misc/deepCopier\";\r\nimport { DeepImmutable } from '../types';\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\n\r\n\r\n/**\r\n * Options to be used when creating a FresnelParameters.\r\n */\r\nexport type IFresnelParametersCreationOptions = {\r\n    /**\r\n     * Define the color used on edges (grazing angle)\r\n     */\r\n    leftColor?: Color3;\r\n\r\n    /**\r\n     * Define the color used on center\r\n     */\r\n    rightColor?: Color3;\r\n\r\n    /**\r\n     * Define bias applied to computed fresnel term\r\n     */\r\n    bias?: number;\r\n\r\n    /**\r\n     * Defined the power exponent applied to fresnel term\r\n     */\r\n    power?: number;\r\n\r\n    /**\r\n     * Define if the fresnel effect is enable or not.\r\n     */\r\n    isEnabled?: boolean;\r\n};\r\n\r\n/**\r\n * Serialized format for FresnelParameters.\r\n */\r\nexport type IFresnelParametersSerialized = {\r\n    /**\r\n     * Define the color used on edges (grazing angle) [as an array]\r\n     */\r\n    leftColor: number[];\r\n\r\n    /**\r\n     * Define the color used on center [as an array]\r\n     */\r\n    rightColor: number[];\r\n\r\n    /**\r\n     * Define bias applied to computed fresnel term\r\n     */\r\n    bias: number;\r\n\r\n    /**\r\n     * Defined the power exponent applied to fresnel term\r\n     */\r\n    power?: number;\r\n\r\n    /**\r\n     * Define if the fresnel effect is enable or not.\r\n     */\r\n    isEnabled: boolean;\r\n};\r\n\r\n/**\r\n * This represents all the required information to add a fresnel effect on a material:\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_fresnelparameters\r\n */\r\nexport class FresnelParameters {\r\n    private _isEnabled = true;\r\n    /**\r\n     * Define if the fresnel effect is enable or not.\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(4 | 16);\r\n    }\r\n\r\n    /**\r\n     * Define the color used on edges (grazing angle)\r\n     */\r\n    public leftColor: Color3;\r\n\r\n    /**\r\n     * Define the color used on center\r\n     */\r\n    public rightColor: Color3;\r\n\r\n    /**\r\n     * Define bias applied to computed fresnel term\r\n     */\r\n    public bias: number;\r\n\r\n    /**\r\n     * Defined the power exponent applied to fresnel term\r\n     */\r\n    public power: number;\r\n\r\n    /**\r\n     * Creates a new FresnelParameters object.\r\n     *\r\n     * @param options provide your own settings to optionally to override defaults\r\n     */\r\n    public constructor(options: IFresnelParametersCreationOptions = {}) {\r\n        this.bias = (options.bias === undefined) ? 0 : options.bias;\r\n        this.power = (options.power === undefined) ? 1 : options.power;\r\n        this.leftColor = options.leftColor || Color3.White();\r\n        this.rightColor = options.rightColor || Color3.Black();\r\n        if (options.isEnabled === false) {\r\n            this.isEnabled = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the current fresnel and its valuues\r\n     * @returns a clone fresnel configuration\r\n     */\r\n    public clone(): FresnelParameters {\r\n        var newFresnelParameters = new FresnelParameters();\r\n\r\n        DeepCopier.DeepCopy(this, newFresnelParameters);\r\n\r\n        return newFresnelParameters;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between FresnelParameters objects\r\n     * @param otherFresnelParameters defines the second operand\r\n     * @returns true if the power, bias, leftColor, rightColor and isEnabled values are equal to the given ones\r\n     */\r\n    public equals(otherFresnelParameters: DeepImmutable<FresnelParameters>): boolean {\r\n        return otherFresnelParameters &&\r\n            this.bias === otherFresnelParameters.bias &&\r\n            this.power === otherFresnelParameters.power &&\r\n            this.leftColor.equals(otherFresnelParameters.leftColor) &&\r\n            this.rightColor.equals(otherFresnelParameters.rightColor) &&\r\n            this.isEnabled === otherFresnelParameters.isEnabled;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current fresnel parameters to a JSON representation.\r\n     * @return the JSON serialization\r\n     */\r\n    public serialize(): IFresnelParametersSerialized {\r\n        return {\r\n            isEnabled: this.isEnabled,\r\n            leftColor: this.leftColor.asArray(),\r\n            rightColor: this.rightColor.asArray(),\r\n            bias: this.bias,\r\n            power: this.power\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Parse a JSON object and deserialize it to a new Fresnel parameter object.\r\n     * @param parsedFresnelParameters Define the JSON representation\r\n     * @returns the parsed parameters\r\n     */\r\n    public static Parse(parsedFresnelParameters: IFresnelParametersSerialized): FresnelParameters {\r\n        return new FresnelParameters({\r\n            isEnabled: parsedFresnelParameters.isEnabled,\r\n            leftColor: Color3.FromArray(parsedFresnelParameters.leftColor),\r\n            rightColor: Color3.FromArray(parsedFresnelParameters.rightColor),\r\n            bias: parsedFresnelParameters.bias,\r\n            power: parsedFresnelParameters.power || 1.0\r\n        });\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._FresnelParametersParser = FresnelParameters.Parse;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}