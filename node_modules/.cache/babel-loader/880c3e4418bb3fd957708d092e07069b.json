{"ast":null,"code":"import { Engine } from \"../Engines/engine\";\n/**\r\n * Class used to work with sound analyzer using fast fourier transform (FFT)\r\n * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n */\n\nvar Analyser =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new analyser\r\n   * @param scene defines hosting scene\r\n   */\n  function Analyser(scene) {\n    /**\r\n     * Gets or sets the smoothing\r\n     * @ignorenaming\r\n     */\n    this.SMOOTHING = 0.75;\n    /**\r\n     * Gets or sets the FFT table size\r\n     * @ignorenaming\r\n     */\n\n    this.FFT_SIZE = 512;\n    /**\r\n     * Gets or sets the bar graph amplitude\r\n     * @ignorenaming\r\n     */\n\n    this.BARGRAPHAMPLITUDE = 256;\n    /**\r\n     * Gets or sets the position of the debug canvas\r\n     * @ignorenaming\r\n     */\n\n    this.DEBUGCANVASPOS = {\n      x: 20,\n      y: 20\n    };\n    /**\r\n     * Gets or sets the debug canvas size\r\n     * @ignorenaming\r\n     */\n\n    this.DEBUGCANVASSIZE = {\n      width: 320,\n      height: 200\n    };\n    this._scene = scene;\n    this._audioEngine = Engine.audioEngine;\n\n    if (this._audioEngine.canUseWebAudio && this._audioEngine.audioContext) {\n      this._webAudioAnalyser = this._audioEngine.audioContext.createAnalyser();\n      this._webAudioAnalyser.minDecibels = -140;\n      this._webAudioAnalyser.maxDecibels = 0;\n      this._byteFreqs = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\n      this._byteTime = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\n      this._floatFreqs = new Float32Array(this._webAudioAnalyser.frequencyBinCount);\n    }\n  }\n  /**\r\n   * Get the number of data values you will have to play with for the visualization\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount\r\n   * @returns a number\r\n   */\n\n\n  Analyser.prototype.getFrequencyBinCount = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      return this._webAudioAnalyser.frequencyBinCount;\n    } else {\n      return 0;\n    }\n  };\n  /**\r\n   * Gets the current frequency data as a byte array\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\r\n   * @returns a Uint8Array\r\n   */\n\n\n  Analyser.prototype.getByteFrequencyData = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\n      this._webAudioAnalyser.fftSize = this.FFT_SIZE;\n\n      this._webAudioAnalyser.getByteFrequencyData(this._byteFreqs);\n    }\n\n    return this._byteFreqs;\n  };\n  /**\r\n   * Gets the current waveform as a byte array\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData\r\n   * @returns a Uint8Array\r\n   */\n\n\n  Analyser.prototype.getByteTimeDomainData = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\n      this._webAudioAnalyser.fftSize = this.FFT_SIZE;\n\n      this._webAudioAnalyser.getByteTimeDomainData(this._byteTime);\n    }\n\n    return this._byteTime;\n  };\n  /**\r\n   * Gets the current frequency data as a float array\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\r\n   * @returns a Float32Array\r\n   */\n\n\n  Analyser.prototype.getFloatFrequencyData = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\n      this._webAudioAnalyser.fftSize = this.FFT_SIZE;\n\n      this._webAudioAnalyser.getFloatFrequencyData(this._floatFreqs);\n    }\n\n    return this._floatFreqs;\n  };\n  /**\r\n   * Renders the debug canvas\r\n   */\n\n\n  Analyser.prototype.drawDebugCanvas = function () {\n    var _this = this;\n\n    if (this._audioEngine.canUseWebAudio) {\n      if (!this._debugCanvas) {\n        this._debugCanvas = document.createElement(\"canvas\");\n        this._debugCanvas.width = this.DEBUGCANVASSIZE.width;\n        this._debugCanvas.height = this.DEBUGCANVASSIZE.height;\n        this._debugCanvas.style.position = \"absolute\";\n        this._debugCanvas.style.top = this.DEBUGCANVASPOS.y + \"px\";\n        this._debugCanvas.style.left = this.DEBUGCANVASPOS.x + \"px\";\n        this._debugCanvasContext = this._debugCanvas.getContext(\"2d\");\n        document.body.appendChild(this._debugCanvas);\n\n        this._registerFunc = function () {\n          _this.drawDebugCanvas();\n        };\n\n        this._scene.registerBeforeRender(this._registerFunc);\n      }\n\n      if (this._registerFunc && this._debugCanvasContext) {\n        var workingArray = this.getByteFrequencyData();\n        this._debugCanvasContext.fillStyle = 'rgb(0, 0, 0)';\n\n        this._debugCanvasContext.fillRect(0, 0, this.DEBUGCANVASSIZE.width, this.DEBUGCANVASSIZE.height); // Draw the frequency domain chart.\n\n\n        for (var i = 0; i < this.getFrequencyBinCount(); i++) {\n          var value = workingArray[i];\n          var percent = value / this.BARGRAPHAMPLITUDE;\n          var height = this.DEBUGCANVASSIZE.height * percent;\n          var offset = this.DEBUGCANVASSIZE.height - height - 1;\n          var barWidth = this.DEBUGCANVASSIZE.width / this.getFrequencyBinCount();\n          var hue = i / this.getFrequencyBinCount() * 360;\n          this._debugCanvasContext.fillStyle = 'hsl(' + hue + ', 100%, 50%)';\n\n          this._debugCanvasContext.fillRect(i * barWidth, offset, barWidth, height);\n        }\n      }\n    }\n  };\n  /**\r\n   * Stops rendering the debug canvas and removes it\r\n   */\n\n\n  Analyser.prototype.stopDebugCanvas = function () {\n    if (this._debugCanvas) {\n      if (this._registerFunc) {\n        this._scene.unregisterBeforeRender(this._registerFunc);\n\n        this._registerFunc = null;\n      }\n\n      document.body.removeChild(this._debugCanvas);\n      this._debugCanvas = null;\n      this._debugCanvasContext = null;\n    }\n  };\n  /**\r\n   * Connects two audio nodes\r\n   * @param inputAudioNode defines first node to connect\r\n   * @param outputAudioNode defines second node to connect\r\n   */\n\n\n  Analyser.prototype.connectAudioNodes = function (inputAudioNode, outputAudioNode) {\n    if (this._audioEngine.canUseWebAudio) {\n      inputAudioNode.connect(this._webAudioAnalyser);\n\n      this._webAudioAnalyser.connect(outputAudioNode);\n    }\n  };\n  /**\r\n   * Releases all associated resources\r\n   */\n\n\n  Analyser.prototype.dispose = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.disconnect();\n    }\n  };\n\n  return Analyser;\n}();\n\nexport { Analyser };","map":{"version":3,"sources":["../../../sourceES6/core/Audio/analyser.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { IAudioEngine } from './Interfaces/IAudioEngine';\r\n\r\n/**\r\n * Class used to work with sound analyzer using fast fourier transform (FFT)\r\n * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n */\r\nexport class Analyser {\r\n    /**\r\n     * Gets or sets the smoothing\r\n     * @ignorenaming\r\n     */\r\n    public SMOOTHING = 0.75;\r\n    /**\r\n     * Gets or sets the FFT table size\r\n     * @ignorenaming\r\n     */\r\n    public FFT_SIZE = 512;\r\n    /**\r\n     * Gets or sets the bar graph amplitude\r\n     * @ignorenaming\r\n     */\r\n    public BARGRAPHAMPLITUDE = 256;\r\n    /**\r\n     * Gets or sets the position of the debug canvas\r\n     * @ignorenaming\r\n     */\r\n    public DEBUGCANVASPOS = { x: 20, y: 20 };\r\n    /**\r\n     * Gets or sets the debug canvas size\r\n     * @ignorenaming\r\n     */\r\n    public DEBUGCANVASSIZE = { width: 320, height: 200 };\r\n\r\n    private _byteFreqs: Uint8Array;\r\n    private _byteTime: Uint8Array;\r\n    private _floatFreqs: Float32Array;\r\n    private _webAudioAnalyser: AnalyserNode;\r\n    private _debugCanvas: Nullable<HTMLCanvasElement>;\r\n    private _debugCanvasContext: Nullable<CanvasRenderingContext2D>;\r\n    private _scene: Scene;\r\n    private _registerFunc: Nullable<() => void>;\r\n    private _audioEngine: IAudioEngine;\r\n\r\n    /**\r\n     * Creates a new analyser\r\n     * @param scene defines hosting scene\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n        this._audioEngine = Engine.audioEngine;\r\n        if (this._audioEngine.canUseWebAudio && this._audioEngine.audioContext) {\r\n            this._webAudioAnalyser = this._audioEngine.audioContext.createAnalyser();\r\n            this._webAudioAnalyser.minDecibels = -140;\r\n            this._webAudioAnalyser.maxDecibels = 0;\r\n            this._byteFreqs = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\r\n            this._byteTime = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\r\n            this._floatFreqs = new Float32Array(this._webAudioAnalyser.frequencyBinCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the number of data values you will have to play with for the visualization\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount\r\n     * @returns a number\r\n     */\r\n    public getFrequencyBinCount(): number {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            return this._webAudioAnalyser.frequencyBinCount;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current frequency data as a byte array\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\r\n     * @returns a Uint8Array\r\n     */\r\n    public getByteFrequencyData(): Uint8Array {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\r\n            this._webAudioAnalyser.fftSize = this.FFT_SIZE;\r\n            this._webAudioAnalyser.getByteFrequencyData(this._byteFreqs);\r\n        }\r\n        return this._byteFreqs;\r\n    }\r\n\r\n    /**\r\n     * Gets the current waveform as a byte array\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData\r\n     * @returns a Uint8Array\r\n     */\r\n    public getByteTimeDomainData(): Uint8Array {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\r\n            this._webAudioAnalyser.fftSize = this.FFT_SIZE;\r\n            this._webAudioAnalyser.getByteTimeDomainData(this._byteTime);\r\n        }\r\n        return this._byteTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the current frequency data as a float array\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\r\n     * @returns a Float32Array\r\n     */\r\n    public getFloatFrequencyData(): Float32Array {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\r\n            this._webAudioAnalyser.fftSize = this.FFT_SIZE;\r\n            this._webAudioAnalyser.getFloatFrequencyData(this._floatFreqs);\r\n        }\r\n        return this._floatFreqs;\r\n    }\r\n\r\n    /**\r\n     * Renders the debug canvas\r\n     */\r\n    public drawDebugCanvas() {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            if (!this._debugCanvas) {\r\n                this._debugCanvas = document.createElement(\"canvas\");\r\n                this._debugCanvas.width = this.DEBUGCANVASSIZE.width;\r\n                this._debugCanvas.height = this.DEBUGCANVASSIZE.height;\r\n                this._debugCanvas.style.position = \"absolute\";\r\n                this._debugCanvas.style.top = this.DEBUGCANVASPOS.y + \"px\";\r\n                this._debugCanvas.style.left = this.DEBUGCANVASPOS.x + \"px\";\r\n                this._debugCanvasContext = this._debugCanvas.getContext(\"2d\");\r\n                document.body.appendChild(this._debugCanvas);\r\n                this._registerFunc = () => {\r\n                    this.drawDebugCanvas();\r\n                };\r\n                this._scene.registerBeforeRender(this._registerFunc);\r\n            }\r\n            if (this._registerFunc && this._debugCanvasContext) {\r\n                var workingArray = this.getByteFrequencyData();\r\n\r\n                this._debugCanvasContext.fillStyle = 'rgb(0, 0, 0)';\r\n                this._debugCanvasContext.fillRect(0, 0, this.DEBUGCANVASSIZE.width, this.DEBUGCANVASSIZE.height);\r\n\r\n                // Draw the frequency domain chart.\r\n                for (var i = 0; i < this.getFrequencyBinCount(); i++) {\r\n                    var value = workingArray[i];\r\n                    var percent = value / this.BARGRAPHAMPLITUDE;\r\n                    var height = this.DEBUGCANVASSIZE.height * percent;\r\n                    var offset = this.DEBUGCANVASSIZE.height - height - 1;\r\n                    var barWidth = this.DEBUGCANVASSIZE.width / this.getFrequencyBinCount();\r\n                    var hue = i / this.getFrequencyBinCount() * 360;\r\n                    this._debugCanvasContext.fillStyle = 'hsl(' + hue + ', 100%, 50%)';\r\n                    this._debugCanvasContext.fillRect(i * barWidth, offset, barWidth, height);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops rendering the debug canvas and removes it\r\n     */\r\n    public stopDebugCanvas() {\r\n        if (this._debugCanvas) {\r\n            if (this._registerFunc) {\r\n                this._scene.unregisterBeforeRender(this._registerFunc);\r\n                this._registerFunc = null;\r\n            }\r\n            document.body.removeChild(this._debugCanvas);\r\n            this._debugCanvas = null;\r\n            this._debugCanvasContext = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connects two audio nodes\r\n     * @param inputAudioNode defines first node to connect\r\n     * @param outputAudioNode defines second node to connect\r\n     */\r\n    public connectAudioNodes(inputAudioNode: AudioNode, outputAudioNode: AudioNode) {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            inputAudioNode.connect(this._webAudioAnalyser);\r\n            this._webAudioAnalyser.connect(outputAudioNode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            this._webAudioAnalyser.disconnect();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}