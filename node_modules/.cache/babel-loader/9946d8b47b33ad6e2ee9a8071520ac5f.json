{"ast":null,"code":"/** @hidden */\nvar ShaderCodeCursor =\n/** @class */\nfunction () {\n  function ShaderCodeCursor() {}\n\n  Object.defineProperty(ShaderCodeCursor.prototype, \"currentLine\", {\n    get: function () {\n      return this._lines[this.lineIndex];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ShaderCodeCursor.prototype, \"canRead\", {\n    get: function () {\n      return this.lineIndex < this._lines.length - 1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ShaderCodeCursor.prototype, \"lines\", {\n    set: function (value) {\n      this._lines = [];\n\n      for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {\n        var line = value_1[_i]; // Prevent removing line break in macros.\n\n        if (line[0] === \"#\") {\n          this._lines.push(line);\n\n          continue;\n        }\n\n        var split = line.split(\";\");\n\n        for (var index = 0; index < split.length; index++) {\n          var subLine = split[index];\n          subLine = subLine.trim();\n\n          if (!subLine) {\n            continue;\n          }\n\n          this._lines.push(subLine + (index !== split.length - 1 ? \";\" : \"\"));\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ShaderCodeCursor;\n}();\n\nexport { ShaderCodeCursor };","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/Processors/shaderCodeCursor.ts"],"names":[],"mappings":"AAAA;AACA,IAAA,gBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,gBAAA,GAAA,CAoCC;;AAhCG,EAAA,MAAA,CAAA,cAAA,CAAI,gBAAA,CAAA,SAAJ,EAAI,aAAJ,EAAe;SAAf,YAAA;AACI,aAAO,KAAK,MAAL,CAAY,KAAK,SAAjB,CAAP;AACH,KAFc;qBAAA;;AAAA,GAAf;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,gBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;SAAX,YAAA;AACI,aAAO,KAAK,SAAL,GAAiB,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAA7C;AACH,KAFU;qBAAA;;AAAA,GAAX;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,gBAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;SAAT,UAAU,KAAV,EAAyB;AACrB,WAAK,MAAL,GAAc,EAAd;;AAEA,WAAiB,IAAA,EAAA,GAAA,CAAA,EAAA,OAAA,GAAA,KAAjB,EAAiB,EAAA,GAAA,OAAA,CAAA,MAAjB,EAAiB,EAAA,EAAjB,EAAwB;AAAnB,YAAI,IAAI,GAAA,OAAA,CAAA,EAAA,CAAR,CAAmB,CACpB;;AACA,YAAI,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACjB,eAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;;AACA;AACH;;AAED,YAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAd;;AAEA,aAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,GAAG,KAAK,CAAC,MAAlC,EAA0C,KAAK,EAA/C,EAAmD;AAC/C,cAAI,OAAO,GAAG,KAAK,CAAC,KAAD,CAAnB;AACA,UAAA,OAAO,GAAG,OAAO,CAAC,IAAR,EAAV;;AAEA,cAAI,CAAC,OAAL,EAAc;AACV;AACH;;AAED,eAAK,MAAL,CAAY,IAAZ,CAAiB,OAAO,IAAI,KAAK,KAAK,KAAK,CAAC,MAAN,GAAe,CAAzB,GAA6B,GAA7B,GAAmC,EAAvC,CAAxB;AACH;AACJ;AACJ,KAvBQ;qBAAA;;AAAA,GAAT;AAwBJ,SAAA,gBAAA;AAAC,CApCD,EAAA","sourcesContent":["/** @hidden */\r\nexport class ShaderCodeCursor {\r\n    private _lines: string[];\r\n    lineIndex: number;\r\n\r\n    get currentLine(): string {\r\n        return this._lines[this.lineIndex];\r\n    }\r\n\r\n    get canRead(): boolean {\r\n        return this.lineIndex < this._lines.length - 1;\r\n    }\r\n\r\n    set lines(value: string[]) {\r\n        this._lines = [];\r\n\r\n        for (var line of value) {\r\n            // Prevent removing line break in macros.\r\n            if (line[0] === \"#\") {\r\n                this._lines.push(line);\r\n                continue;\r\n            }\r\n\r\n            const split = line.split(\";\");\r\n\r\n            for (var index = 0; index < split.length; index++) {\r\n                let subLine = split[index];\r\n                subLine = subLine.trim();\r\n\r\n                if (!subLine) {\r\n                    continue;\r\n                }\r\n\r\n                this._lines.push(subLine + (index !== split.length - 1 ? \";\" : \"\"));\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}