{"ast":null,"code":"/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\nexport var InspectableType;\n\n(function (InspectableType) {\n  /**\r\n   * Checkbox for booleans\r\n   */\n  InspectableType[InspectableType[\"Checkbox\"] = 0] = \"Checkbox\";\n  /**\r\n   * Sliders for numbers\r\n   */\n\n  InspectableType[InspectableType[\"Slider\"] = 1] = \"Slider\";\n  /**\r\n   * Vector3\r\n   */\n\n  InspectableType[InspectableType[\"Vector3\"] = 2] = \"Vector3\";\n  /**\r\n   * Quaternions\r\n   */\n\n  InspectableType[InspectableType[\"Quaternion\"] = 3] = \"Quaternion\";\n  /**\r\n   * Color3\r\n   */\n\n  InspectableType[InspectableType[\"Color3\"] = 4] = \"Color3\";\n  /**\r\n   * String\r\n   */\n\n  InspectableType[InspectableType[\"String\"] = 5] = \"String\";\n})(InspectableType || (InspectableType = {}));","map":{"version":3,"sources":["../../../sourceES6/core/Misc/iInspectable.ts"],"names":[],"mappings":"AAAA;;;AAGA,OAAA,IAAY,eAAZ;;AAAA,CAAA,UAAY,eAAZ,EAA2B;AACvB;;;AAGA,EAAA,eAAA,CAAA,eAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA;;;;AAGA,EAAA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA;;;;AAGA,EAAA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA;;;;AAGA,EAAA,eAAA,CAAA,eAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACA;;;;AAGA,EAAA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA;;;;AAGA,EAAA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACH,CAzBD,EAAY,eAAe,KAAf,eAAe,GAAA,EAAA,CAA3B","sourcesContent":["/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum InspectableType {\r\n    /**\r\n     * Checkbox for booleans\r\n     */\r\n    Checkbox = 0,\r\n    /**\r\n     * Sliders for numbers\r\n     */\r\n    Slider = 1,\r\n    /**\r\n     * Vector3\r\n     */\r\n    Vector3 = 2,\r\n    /**\r\n     * Quaternions\r\n     */\r\n    Quaternion = 3,\r\n    /**\r\n     * Color3\r\n     */\r\n    Color3 = 4,\r\n    /**\r\n     * String\r\n     */\r\n    String = 5\r\n}\r\n\r\n/**\r\n * Interface used to define custom inspectable properties.\r\n * This interface is used by the inspector to display custom property grids\r\n * @see https://doc.babylonjs.com/how_to/debug_layer#extensibility\r\n */\r\nexport interface IInspectable {\r\n    /**\r\n     * Gets the label to display\r\n     */\r\n    label: string;\r\n    /**\r\n     * Gets the name of the property to edit\r\n     */\r\n    propertyName: string;\r\n    /**\r\n     * Gets the type of the editor to use\r\n     */\r\n    type: InspectableType;\r\n    /**\r\n     * Gets the minimum value of the property when using in \"slider\" mode\r\n     */\r\n    min?: number;\r\n    /**\r\n     * Gets the maximum value of the property when using in \"slider\" mode\r\n     */\r\n    max?: number;\r\n    /**\r\n     * Gets the setp to use when using in \"slider\" mode\r\n     */\r\n    step?: number;\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}