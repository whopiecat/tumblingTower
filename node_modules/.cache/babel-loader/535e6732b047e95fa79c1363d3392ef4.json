{"ast":null,"code":"import { Plane } from './math.plane';\n/**\r\n * Represents a camera frustum\r\n */\n\nvar Frustum =\n/** @class */\nfunction () {\n  function Frustum() {}\n  /**\r\n   * Gets the planes representing the frustum\r\n   * @param transform matrix to be applied to the returned planes\r\n   * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\r\n   */\n\n\n  Frustum.GetPlanes = function (transform) {\n    var frustumPlanes = [];\n\n    for (var index = 0; index < 6; index++) {\n      frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\n    }\n\n    Frustum.GetPlanesToRef(transform, frustumPlanes);\n    return frustumPlanes;\n  };\n  /**\r\n   * Gets the near frustum plane transformed by the transform matrix\r\n   * @param transform transformation matrix to be applied to the resulting frustum plane\r\n   * @param frustumPlane the resuling frustum plane\r\n   */\n\n\n  Frustum.GetNearPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] + m[2];\n    frustumPlane.normal.y = m[7] + m[6];\n    frustumPlane.normal.z = m[11] + m[10];\n    frustumPlane.d = m[15] + m[14];\n    frustumPlane.normalize();\n  };\n  /**\r\n   * Gets the far frustum plane transformed by the transform matrix\r\n   * @param transform transformation matrix to be applied to the resulting frustum plane\r\n   * @param frustumPlane the resuling frustum plane\r\n   */\n\n\n  Frustum.GetFarPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] - m[2];\n    frustumPlane.normal.y = m[7] - m[6];\n    frustumPlane.normal.z = m[11] - m[10];\n    frustumPlane.d = m[15] - m[14];\n    frustumPlane.normalize();\n  };\n  /**\r\n   * Gets the left frustum plane transformed by the transform matrix\r\n   * @param transform transformation matrix to be applied to the resulting frustum plane\r\n   * @param frustumPlane the resuling frustum plane\r\n   */\n\n\n  Frustum.GetLeftPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] + m[0];\n    frustumPlane.normal.y = m[7] + m[4];\n    frustumPlane.normal.z = m[11] + m[8];\n    frustumPlane.d = m[15] + m[12];\n    frustumPlane.normalize();\n  };\n  /**\r\n   * Gets the right frustum plane transformed by the transform matrix\r\n   * @param transform transformation matrix to be applied to the resulting frustum plane\r\n   * @param frustumPlane the resuling frustum plane\r\n   */\n\n\n  Frustum.GetRightPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] - m[0];\n    frustumPlane.normal.y = m[7] - m[4];\n    frustumPlane.normal.z = m[11] - m[8];\n    frustumPlane.d = m[15] - m[12];\n    frustumPlane.normalize();\n  };\n  /**\r\n   * Gets the top frustum plane transformed by the transform matrix\r\n   * @param transform transformation matrix to be applied to the resulting frustum plane\r\n   * @param frustumPlane the resuling frustum plane\r\n   */\n\n\n  Frustum.GetTopPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] - m[1];\n    frustumPlane.normal.y = m[7] - m[5];\n    frustumPlane.normal.z = m[11] - m[9];\n    frustumPlane.d = m[15] - m[13];\n    frustumPlane.normalize();\n  };\n  /**\r\n   * Gets the bottom frustum plane transformed by the transform matrix\r\n   * @param transform transformation matrix to be applied to the resulting frustum plane\r\n   * @param frustumPlane the resuling frustum plane\r\n   */\n\n\n  Frustum.GetBottomPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] + m[1];\n    frustumPlane.normal.y = m[7] + m[5];\n    frustumPlane.normal.z = m[11] + m[9];\n    frustumPlane.d = m[15] + m[13];\n    frustumPlane.normalize();\n  };\n  /**\r\n   * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\r\n   * @param transform transformation matrix to be applied to the resulting frustum planes\r\n   * @param frustumPlanes the resuling frustum planes\r\n   */\n\n\n  Frustum.GetPlanesToRef = function (transform, frustumPlanes) {\n    // Near\n    Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]); // Far\n\n    Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]); // Left\n\n    Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]); // Right\n\n    Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]); // Top\n\n    Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]); // Bottom\n\n    Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\n  };\n\n  return Frustum;\n}();\n\nexport { Frustum };","map":{"version":3,"sources":["../../../sourceES6/core/Maths/math.frustum.ts"],"names":[],"mappings":"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","sourcesContent":["import { Matrix } from './math.vector';\r\nimport { DeepImmutable } from '../types';\r\nimport { Plane } from './math.plane';\r\n\r\n/**\r\n * Represents a camera frustum\r\n */\r\nexport class Frustum {\r\n    /**\r\n     * Gets the planes representing the frustum\r\n     * @param transform matrix to be applied to the returned planes\r\n     * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\r\n     */\r\n    public static GetPlanes(transform: DeepImmutable<Matrix>): Plane[] {\r\n        var frustumPlanes = [];\r\n        for (var index = 0; index < 6; index++) {\r\n            frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\r\n        }\r\n        Frustum.GetPlanesToRef(transform, frustumPlanes);\r\n        return frustumPlanes;\r\n    }\r\n\r\n    /**\r\n     * Gets the near frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resuling frustum plane\r\n     */\r\n    public static GetNearPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[2];\r\n        frustumPlane.normal.y = m[7] + m[6];\r\n        frustumPlane.normal.z = m[11] + m[10];\r\n        frustumPlane.d = m[15] + m[14];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the far frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resuling frustum plane\r\n     */\r\n    public static GetFarPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[2];\r\n        frustumPlane.normal.y = m[7] - m[6];\r\n        frustumPlane.normal.z = m[11] - m[10];\r\n        frustumPlane.d = m[15] - m[14];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the left frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resuling frustum plane\r\n     */\r\n    public static GetLeftPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[0];\r\n        frustumPlane.normal.y = m[7] + m[4];\r\n        frustumPlane.normal.z = m[11] + m[8];\r\n        frustumPlane.d = m[15] + m[12];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the right frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resuling frustum plane\r\n     */\r\n    public static GetRightPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[0];\r\n        frustumPlane.normal.y = m[7] - m[4];\r\n        frustumPlane.normal.z = m[11] - m[8];\r\n        frustumPlane.d = m[15] - m[12];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the top frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resuling frustum plane\r\n     */\r\n    public static GetTopPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[1];\r\n        frustumPlane.normal.y = m[7] - m[5];\r\n        frustumPlane.normal.z = m[11] - m[9];\r\n        frustumPlane.d = m[15] - m[13];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the bottom frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resuling frustum plane\r\n     */\r\n    public static GetBottomPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[1];\r\n        frustumPlane.normal.y = m[7] + m[5];\r\n        frustumPlane.normal.z = m[11] + m[9];\r\n        frustumPlane.d = m[15] + m[13];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\r\n     * @param transform transformation matrix to be applied to the resulting frustum planes\r\n     * @param frustumPlanes the resuling frustum planes\r\n     */\r\n    public static GetPlanesToRef(transform: DeepImmutable<Matrix>, frustumPlanes: Plane[]): void {\r\n        // Near\r\n        Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\r\n\r\n        // Far\r\n        Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\r\n\r\n        // Left\r\n        Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\r\n\r\n        // Right\r\n        Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\r\n\r\n        // Top\r\n        Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\r\n\r\n        // Bottom\r\n        Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}