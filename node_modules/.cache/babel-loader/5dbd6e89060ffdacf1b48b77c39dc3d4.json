{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { WebVRController } from \"./webVRController\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\nimport { Engine } from '../../Engines/engine';\n/**\r\n * Oculus Touch Controller\r\n */\n\nvar OculusTouchController =\n/** @class */\nfunction (_super) {\n  __extends(OculusTouchController, _super);\n  /**\r\n   * Creates a new OculusTouchController from a gamepad\r\n   * @param vrGamepad the gamepad that the controller should be created from\r\n   */\n\n\n  function OculusTouchController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this;\n    /**\r\n     * Fired when the secondary trigger on this controller is modified\r\n     */\n\n\n    _this.onSecondaryTriggerStateChangedObservable = new Observable();\n    /**\r\n     * Fired when the thumb rest on this controller is modified\r\n     */\n\n    _this.onThumbRestChangedObservable = new Observable();\n    _this.controllerType = PoseEnabledControllerType.OCULUS;\n    return _this;\n  }\n  /**\r\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n   * @param scene scene in which to add meshes\r\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n   */\n\n\n  OculusTouchController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    var meshName; // Hand\n\n    if (this.hand === 'left') {\n      meshName = OculusTouchController.MODEL_LEFT_FILENAME;\n    } else {\n      // Right is the default if no hand is specified\n      meshName = OculusTouchController.MODEL_RIGHT_FILENAME;\n    }\n\n    SceneLoader.ImportMesh(\"\", OculusTouchController._IsQuest ? OculusTouchController.QUEST_MODEL_BASE_URL : OculusTouchController.MODEL_BASE_URL, meshName, scene, function (newMeshes) {\n      /*\r\n      Parent Mesh name: oculus_touch_left\r\n      - body\r\n      - trigger\r\n      - thumbstick\r\n      - grip\r\n      - button_y\r\n      - button_x\r\n      - button_enter\r\n      */\n      _this._defaultModel = OculusTouchController._IsQuest ? newMeshes[0] : newMeshes[1];\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n\n  Object.defineProperty(OculusTouchController.prototype, \"onAButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the A button on this controller is modified\r\n     */\n    get: function () {\n      if (this.hand === 'right') {\n        return this.onMainButtonStateChangedObservable;\n      } else {\n        throw new Error('No A button on left hand');\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OculusTouchController.prototype, \"onBButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the B button on this controller is modified\r\n     */\n    get: function () {\n      if (this.hand === 'right') {\n        return this.onSecondaryButtonStateChangedObservable;\n      } else {\n        throw new Error('No B button on left hand');\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OculusTouchController.prototype, \"onXButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the X button on this controller is modified\r\n     */\n    get: function () {\n      if (this.hand === 'left') {\n        return this.onMainButtonStateChangedObservable;\n      } else {\n        throw new Error('No X button on right hand');\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OculusTouchController.prototype, \"onYButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the Y button on this controller is modified\r\n     */\n    get: function () {\n      if (this.hand === 'left') {\n        return this.onSecondaryButtonStateChangedObservable;\n      } else {\n        throw new Error('No Y button on right hand');\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n    * Called once for each button that changed state since the last frame\r\n    * 0) thumb stick (touch, press, value = pressed (0,1)). value is in this.leftStick\r\n    * 1) index trigger (touch (?), press (only when value > 0.1), value 0 to 1)\r\n    * 2) secondary trigger (same)\r\n    * 3) A (right) X (left), touch, pressed = value\r\n    * 4) B / Y\r\n    * 5) thumb rest\r\n    * @param buttonIdx Which button index changed\r\n    * @param state New state of the button\r\n    * @param changes Which properties on the state changed since last frame\r\n    */\n\n  OculusTouchController.prototype._handleButtonChange = function (buttonIdx, state, changes) {\n    var notifyObject = state; //{ state: state, changes: changes };\n\n    var triggerDirection = this.hand === 'right' ? -1 : 1;\n\n    switch (buttonIdx) {\n      case 0:\n        this.onPadStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 1:\n        // index trigger\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          this._defaultModel.getChildren()[3].rotation.x = -notifyObject.value * 0.20;\n          this._defaultModel.getChildren()[3].position.y = -notifyObject.value * 0.005;\n          this._defaultModel.getChildren()[3].position.z = -notifyObject.value * 0.005;\n        }\n\n        this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 2:\n        // secondary trigger\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          this._defaultModel.getChildren()[4].position.x = triggerDirection * notifyObject.value * 0.0035;\n        }\n\n        this.onSecondaryTriggerStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 3:\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          if (notifyObject.pressed) {\n            this._defaultModel.getChildren()[1].position.y = -0.001;\n          } else {\n            this._defaultModel.getChildren()[1].position.y = 0;\n          }\n        }\n\n        this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 4:\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          if (notifyObject.pressed) {\n            this._defaultModel.getChildren()[2].position.y = -0.001;\n          } else {\n            this._defaultModel.getChildren()[2].position.y = 0;\n          }\n        }\n\n        this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 5:\n        this.onThumbRestChangedObservable.notifyObservers(notifyObject);\n        return;\n    }\n  };\n  /**\r\n   * Base Url for the controller model.\r\n   */\n\n\n  OculusTouchController.MODEL_BASE_URL = 'https://controllers.babylonjs.com/oculus/';\n  /**\r\n   * File name for the left controller model.\r\n   */\n\n  OculusTouchController.MODEL_LEFT_FILENAME = 'left.babylon';\n  /**\r\n   * File name for the right controller model.\r\n   */\n\n  OculusTouchController.MODEL_RIGHT_FILENAME = 'right.babylon';\n  /**\r\n   * Base Url for the Quest controller model.\r\n   */\n\n  OculusTouchController.QUEST_MODEL_BASE_URL = 'https://controllers.babylonjs.com/oculusQuest/';\n  /**\r\n   * @hidden\r\n   * If the controllers are running on a device that needs the updated Quest controller models\r\n   */\n\n  OculusTouchController._IsQuest = false;\n  return OculusTouchController;\n}(WebVRController);\n\nexport { OculusTouchController };\n\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: function (gamepadInfo) {\n    // If the headset reports being an Oculus Quest, use the Quest controller models\n    if (Engine.LastCreatedEngine && Engine.LastCreatedEngine._vrDisplay && Engine.LastCreatedEngine._vrDisplay.displayName === \"Oculus Quest\") {\n      OculusTouchController._IsQuest = true;\n    }\n\n    return gamepadInfo.id.indexOf('Oculus Touch') !== -1;\n  },\n  create: function (gamepadInfo) {\n    return new OculusTouchController(gamepadInfo);\n  }\n});","map":{"version":3,"sources":["../../../../sourceES6/core/Gamepads/Controllers/oculusTouchController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport { Scene } from \"../../scene\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { WebVRController } from \"./webVRController\";\r\nimport { PoseEnabledControllerType, ExtendedGamepadButton, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\nimport { GamepadButtonChanges } from \"../../Gamepads/gamepad\";\r\nimport { Engine } from '../../Engines/engine';\r\n/**\r\n * Oculus Touch Controller\r\n */\r\nexport class OculusTouchController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = 'https://controllers.babylonjs.com/oculus/';\r\n    /**\r\n     * File name for the left controller model.\r\n     */\r\n    public static MODEL_LEFT_FILENAME: string = 'left.babylon';\r\n    /**\r\n     * File name for the right controller model.\r\n     */\r\n    public static MODEL_RIGHT_FILENAME: string = 'right.babylon';\r\n\r\n    /**\r\n     * Base Url for the Quest controller model.\r\n     */\r\n    public static QUEST_MODEL_BASE_URL: string = 'https://controllers.babylonjs.com/oculusQuest/';\r\n\r\n    /**\r\n     * @hidden\r\n     * If the controllers are running on a device that needs the updated Quest controller models\r\n     */\r\n    public static _IsQuest = false;\r\n\r\n    /**\r\n     * Fired when the secondary trigger on this controller is modified\r\n     */\r\n    public onSecondaryTriggerStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n\r\n    /**\r\n     * Fired when the thumb rest on this controller is modified\r\n     */\r\n    public onThumbRestChangedObservable = new Observable<ExtendedGamepadButton>();\r\n\r\n    /**\r\n     * Creates a new OculusTouchController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.OCULUS;\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        let meshName;\r\n\r\n        // Hand\r\n        if (this.hand === 'left') {\r\n            meshName = OculusTouchController.MODEL_LEFT_FILENAME;\r\n        }\r\n        else { // Right is the default if no hand is specified\r\n            meshName = OculusTouchController.MODEL_RIGHT_FILENAME;\r\n        }\r\n\r\n        SceneLoader.ImportMesh(\"\",  OculusTouchController._IsQuest ? OculusTouchController.QUEST_MODEL_BASE_URL : OculusTouchController.MODEL_BASE_URL, meshName, scene, (newMeshes) => {\r\n            /*\r\n            Parent Mesh name: oculus_touch_left\r\n            - body\r\n            - trigger\r\n            - thumbstick\r\n            - grip\r\n            - button_y\r\n            - button_x\r\n            - button_enter\r\n            */\r\n\r\n            this._defaultModel = OculusTouchController._IsQuest ? newMeshes[0] : newMeshes[1];\r\n            this.attachToMesh(this._defaultModel);\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fired when the A button on this controller is modified\r\n     */\r\n    public get onAButtonStateChangedObservable() {\r\n        if (this.hand === 'right') {\r\n            return this.onMainButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error('No A button on left hand');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when the B button on this controller is modified\r\n     */\r\n    public get onBButtonStateChangedObservable() {\r\n        if (this.hand === 'right') {\r\n            return this.onSecondaryButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error('No B button on left hand');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when the X button on this controller is modified\r\n     */\r\n    public get onXButtonStateChangedObservable() {\r\n        if (this.hand === 'left') {\r\n            return this.onMainButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error('No X button on right hand');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when the Y button on this controller is modified\r\n     */\r\n    public get onYButtonStateChangedObservable() {\r\n        if (this.hand === 'left') {\r\n            return this.onSecondaryButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error('No Y button on right hand');\r\n        }\r\n    }\r\n\r\n    /**\r\n      * Called once for each button that changed state since the last frame\r\n      * 0) thumb stick (touch, press, value = pressed (0,1)). value is in this.leftStick\r\n      * 1) index trigger (touch (?), press (only when value > 0.1), value 0 to 1)\r\n      * 2) secondary trigger (same)\r\n      * 3) A (right) X (left), touch, pressed = value\r\n      * 4) B / Y\r\n      * 5) thumb rest\r\n      * @param buttonIdx Which button index changed\r\n      * @param state New state of the button\r\n      * @param changes Which properties on the state changed since last frame\r\n      */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton, changes: GamepadButtonChanges) {\r\n        let notifyObject = state; //{ state: state, changes: changes };\r\n        let triggerDirection = this.hand === 'right' ? -1 : 1;\r\n        switch (buttonIdx) {\r\n            case 0:\r\n                this.onPadStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 1: // index trigger\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    (<AbstractMesh>(this._defaultModel.getChildren()[3])).rotation.x = -notifyObject.value * 0.20;\r\n                    (<AbstractMesh>(this._defaultModel.getChildren()[3])).position.y = -notifyObject.value * 0.005;\r\n                    (<AbstractMesh>(this._defaultModel.getChildren()[3])).position.z = -notifyObject.value * 0.005;\r\n                }\r\n                this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 2:  // secondary trigger\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    (<AbstractMesh>(this._defaultModel.getChildren()[4])).position.x = triggerDirection * notifyObject.value * 0.0035;\r\n                }\r\n                this.onSecondaryTriggerStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 3:\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    if (notifyObject.pressed) {\r\n                        (<AbstractMesh>(this._defaultModel.getChildren()[1])).position.y = -0.001;\r\n                    }\r\n                    else {\r\n                        (<AbstractMesh>(this._defaultModel.getChildren()[1])).position.y = 0;\r\n                    }\r\n                }\r\n                this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 4:\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    if (notifyObject.pressed) {\r\n                        (<AbstractMesh>(this._defaultModel.getChildren()[2])).position.y = -0.001;\r\n                    }\r\n                    else {\r\n                        (<AbstractMesh>(this._defaultModel.getChildren()[2])).position.y = 0;\r\n                    }\r\n                }\r\n                this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 5:\r\n                this.onThumbRestChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        // If the headset reports being an Oculus Quest, use the Quest controller models\r\n        if (Engine.LastCreatedEngine && Engine.LastCreatedEngine._vrDisplay && Engine.LastCreatedEngine._vrDisplay.displayName === \"Oculus Quest\") {\r\n            OculusTouchController._IsQuest = true;\r\n        }\r\n        return gamepadInfo.id.indexOf('Oculus Touch') !== -1;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new OculusTouchController(gamepadInfo);\r\n    }\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}