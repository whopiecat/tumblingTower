{"ast":null,"code":"import { Logger } from \"../Misc/logger\";\nimport { SerializationHelper } from \"../Misc/decorators\";\nimport { Camera } from \"./camera\";\n/**\r\n * @ignore\r\n * This is a list of all the different input types that are available in the application.\r\n * Fo instance: ArcRotateCameraGamepadInput...\r\n */\n\nexport var CameraInputTypes = {};\n/**\r\n * This represents the input manager used within a camera.\r\n * It helps dealing with all the different kind of input attached to a camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar CameraInputsManager =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiate a new Camera Input Manager.\r\n   * @param camera Defines the camera the input manager blongs to\r\n   */\n  function CameraInputsManager(camera) {\n    /**\r\n     * Defines the dom element the camera is collecting inputs from.\r\n     * This is null if the controls have not been attached.\r\n     */\n    this.attachedToElement = false;\n    this.attached = {};\n    this.camera = camera;\n\n    this.checkInputs = function () {};\n  }\n  /**\r\n   * Add an input method to a camera\r\n   * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n   * @param input camera input method\r\n   */\n\n\n  CameraInputsManager.prototype.add = function (input) {\n    var type = input.getSimpleName();\n\n    if (this.attached[type]) {\n      Logger.Warn(\"camera input of type \" + type + \" already exists on camera\");\n      return;\n    }\n\n    this.attached[type] = input;\n    input.camera = this.camera; //for checkInputs, we are dynamically creating a function\n    //the goal is to avoid the performance penalty of looping for inputs in the render loop\n\n    if (input.checkInputs) {\n      this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\n    }\n\n    if (this.attachedToElement) {\n      input.attachControl();\n    }\n  };\n  /**\r\n   * Remove a specific input method from a camera\r\n   * example: camera.inputs.remove(camera.inputs.attached.mouse);\r\n   * @param inputToRemove camera input method\r\n   */\n\n\n  CameraInputsManager.prototype.remove = function (inputToRemove) {\n    for (var cam in this.attached) {\n      var input = this.attached[cam];\n\n      if (input === inputToRemove) {\n        input.detachControl();\n        input.camera = null;\n        delete this.attached[cam];\n        this.rebuildInputCheck();\n      }\n    }\n  };\n  /**\r\n   * Remove a specific input type from a camera\r\n   * example: camera.inputs.remove(\"ArcRotateCameraGamepadInput\");\r\n   * @param inputType the type of the input to remove\r\n   */\n\n\n  CameraInputsManager.prototype.removeByType = function (inputType) {\n    for (var cam in this.attached) {\n      var input = this.attached[cam];\n\n      if (input.getClassName() === inputType) {\n        input.detachControl();\n        input.camera = null;\n        delete this.attached[cam];\n        this.rebuildInputCheck();\n      }\n    }\n  };\n\n  CameraInputsManager.prototype._addCheckInputs = function (fn) {\n    var current = this.checkInputs;\n    return function () {\n      current();\n      fn();\n    };\n  };\n  /**\r\n   * Attach the input controls to the currently attached dom element to listen the events from.\r\n   * @param input Defines the input to attach\r\n   */\n\n\n  CameraInputsManager.prototype.attachInput = function (input) {\n    if (this.attachedToElement) {\n      input.attachControl(this.noPreventDefault);\n    }\n  };\n  /**\r\n   * Attach the current manager inputs controls to a specific dom element to listen the events from.\r\n   * @param element Defines the dom element to collect the events from\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  CameraInputsManager.prototype.attachElement = function (noPreventDefault) {\n    if (noPreventDefault === void 0) {\n      noPreventDefault = false;\n    }\n\n    if (this.attachedToElement) {\n      return;\n    }\n\n    noPreventDefault = Camera.ForceAttachControlToAlwaysPreventDefault ? false : noPreventDefault;\n    this.attachedToElement = true;\n    this.noPreventDefault = noPreventDefault;\n\n    for (var cam in this.attached) {\n      this.attached[cam].attachControl(noPreventDefault);\n    }\n  };\n  /**\r\n   * Detach the current manager inputs controls from a specific dom element.\r\n   * @param element Defines the dom element to collect the events from\r\n   * @param disconnect Defines whether the input should be removed from the current list of attached inputs\r\n   */\n\n\n  CameraInputsManager.prototype.detachElement = function (disconnect) {\n    if (disconnect === void 0) {\n      disconnect = false;\n    }\n\n    for (var cam in this.attached) {\n      this.attached[cam].detachControl();\n\n      if (disconnect) {\n        this.attached[cam].camera = null;\n      }\n    }\n\n    this.attachedToElement = false;\n  };\n  /**\r\n   * Rebuild the dynamic inputCheck function from the current list of\r\n   * defined inputs in the manager.\r\n   */\n\n\n  CameraInputsManager.prototype.rebuildInputCheck = function () {\n    this.checkInputs = function () {};\n\n    for (var cam in this.attached) {\n      var input = this.attached[cam];\n\n      if (input.checkInputs) {\n        this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\n      }\n    }\n  };\n  /**\r\n   * Remove all attached input methods from a camera\r\n   */\n\n\n  CameraInputsManager.prototype.clear = function () {\n    if (this.attachedToElement) {\n      this.detachElement(true);\n    }\n\n    this.attached = {};\n    this.attachedToElement = false;\n\n    this.checkInputs = function () {};\n  };\n  /**\r\n   * Serialize the current input manager attached to a camera.\r\n   * This ensures than once parsed,\r\n   * the input associated to the camera will be identical to the current ones\r\n   * @param serializedCamera Defines the camera serialization JSON the input serialization should write to\r\n   */\n\n\n  CameraInputsManager.prototype.serialize = function (serializedCamera) {\n    var inputs = {};\n\n    for (var cam in this.attached) {\n      var input = this.attached[cam];\n      var res = SerializationHelper.Serialize(input);\n      inputs[input.getClassName()] = res;\n    }\n\n    serializedCamera.inputsmgr = inputs;\n  };\n  /**\r\n   * Parses an input manager serialized JSON to restore the previous list of inputs\r\n   * and states associated to a camera.\r\n   * @param parsedCamera Defines the JSON to parse\r\n   */\n\n\n  CameraInputsManager.prototype.parse = function (parsedCamera) {\n    var parsedInputs = parsedCamera.inputsmgr;\n\n    if (parsedInputs) {\n      this.clear();\n\n      for (var n in parsedInputs) {\n        var construct = CameraInputTypes[n];\n\n        if (construct) {\n          var parsedinput = parsedInputs[n];\n          var input = SerializationHelper.Parse(function () {\n            return new construct();\n          }, parsedinput, null);\n          this.add(input);\n        }\n      }\n    } else {\n      //2016-03-08 this part is for managing backward compatibility\n      for (var n in this.attached) {\n        var construct = CameraInputTypes[this.attached[n].getClassName()];\n\n        if (construct) {\n          var input = SerializationHelper.Parse(function () {\n            return new construct();\n          }, parsedCamera, null);\n          this.remove(this.attached[n]);\n          this.add(input);\n        }\n      }\n    }\n  };\n\n  return CameraInputsManager;\n}();\n\nexport { CameraInputsManager };","map":{"version":3,"sources":["../../../sourceES6/core/Cameras/cameraInputsManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\nimport { Nullable } from \"../types\";\r\nimport { Camera } from \"./camera\";\r\n/**\r\n * @ignore\r\n * This is a list of all the different input types that are available in the application.\r\n * Fo instance: ArcRotateCameraGamepadInput...\r\n */\r\nexport var CameraInputTypes = {};\r\n\r\n/**\r\n * This is the contract to implement in order to create a new input class.\r\n * Inputs are dealing with listening to user actions and moving the camera accordingly.\r\n */\r\nexport interface ICameraInput<TCamera extends Camera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    camera: Nullable<TCamera>;\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    getClassName(): string;\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    getSimpleName(): string;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    detachControl(): void;\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    checkInputs?: () => void;\r\n}\r\n\r\n/**\r\n * Represents a map of input types to input instance or input index to input instance.\r\n */\r\nexport interface CameraInputsMap<TCamera extends Camera> {\r\n    /**\r\n     * Accessor to the input by input type.\r\n     */\r\n    [name: string]: ICameraInput<TCamera>;\r\n    /**\r\n     * Accessor to the input by input index.\r\n     */\r\n    [idx: number]: ICameraInput<TCamera>;\r\n}\r\n\r\n/**\r\n * This represents the input manager used within a camera.\r\n * It helps dealing with all the different kind of input attached to a camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class CameraInputsManager<TCamera extends Camera> {\r\n    /**\r\n     * Defines the list of inputs attahed to the camera.\r\n     */\r\n    public attached: CameraInputsMap<TCamera>;\r\n\r\n    /**\r\n     * Defines the dom element the camera is collecting inputs from.\r\n     * This is null if the controls have not been attached.\r\n     */\r\n    public attachedToElement: boolean = false;\r\n\r\n    /**\r\n     * Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public noPreventDefault: boolean;\r\n\r\n    /**\r\n     * Defined the camera the input manager belongs to.\r\n     */\r\n    public camera: TCamera;\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs: () => void;\r\n\r\n    /**\r\n     * Instantiate a new Camera Input Manager.\r\n     * @param camera Defines the camera the input manager blongs to\r\n     */\r\n    constructor(camera: TCamera) {\r\n        this.attached = {};\r\n        this.camera = camera;\r\n        this.checkInputs = () => {};\r\n    }\r\n\r\n    /**\r\n     * Add an input method to a camera\r\n     * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n     * @param input camera input method\r\n     */\r\n    public add(input: ICameraInput<TCamera>): void {\r\n        var type = input.getSimpleName();\r\n        if (this.attached[type]) {\r\n            Logger.Warn(\"camera input of type \" + type + \" already exists on camera\");\r\n            return;\r\n        }\r\n\r\n        this.attached[type] = input;\r\n\r\n        input.camera = this.camera;\r\n\r\n        //for checkInputs, we are dynamically creating a function\r\n        //the goal is to avoid the performance penalty of looping for inputs in the render loop\r\n        if (input.checkInputs) {\r\n            this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\r\n        }\r\n\r\n        if (this.attachedToElement) {\r\n            input.attachControl();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a specific input method from a camera\r\n     * example: camera.inputs.remove(camera.inputs.attached.mouse);\r\n     * @param inputToRemove camera input method\r\n     */\r\n    public remove(inputToRemove: ICameraInput<TCamera>): void {\r\n        for (var cam in this.attached) {\r\n            var input = this.attached[cam];\r\n            if (input === inputToRemove) {\r\n                input.detachControl();\r\n                input.camera = null;\r\n                delete this.attached[cam];\r\n                this.rebuildInputCheck();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a specific input type from a camera\r\n     * example: camera.inputs.remove(\"ArcRotateCameraGamepadInput\");\r\n     * @param inputType the type of the input to remove\r\n     */\r\n    public removeByType(inputType: string): void {\r\n        for (var cam in this.attached) {\r\n            var input = this.attached[cam];\r\n            if (input.getClassName() === inputType) {\r\n                input.detachControl();\r\n                input.camera = null;\r\n                delete this.attached[cam];\r\n                this.rebuildInputCheck();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _addCheckInputs(fn: () => void) {\r\n        var current = this.checkInputs;\r\n        return () => {\r\n            current();\r\n            fn();\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to the currently attached dom element to listen the events from.\r\n     * @param input Defines the input to attach\r\n     */\r\n    public attachInput(input: ICameraInput<TCamera>): void {\r\n        if (this.attachedToElement) {\r\n            input.attachControl(this.noPreventDefault);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach the current manager inputs controls to a specific dom element to listen the events from.\r\n     * @param element Defines the dom element to collect the events from\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachElement(noPreventDefault: boolean = false): void {\r\n        if (this.attachedToElement) {\r\n            return;\r\n        }\r\n\r\n        noPreventDefault = Camera.ForceAttachControlToAlwaysPreventDefault ? false : noPreventDefault;\r\n        this.attachedToElement = true;\r\n        this.noPreventDefault = noPreventDefault;\r\n\r\n        for (var cam in this.attached) {\r\n            this.attached[cam].attachControl(noPreventDefault);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current manager inputs controls from a specific dom element.\r\n     * @param element Defines the dom element to collect the events from\r\n     * @param disconnect Defines whether the input should be removed from the current list of attached inputs\r\n     */\r\n    public detachElement(disconnect = false): void {\r\n        for (var cam in this.attached) {\r\n            this.attached[cam].detachControl();\r\n\r\n            if (disconnect) {\r\n                this.attached[cam].camera = null;\r\n            }\r\n        }\r\n        this.attachedToElement = false;\r\n    }\r\n\r\n    /**\r\n     * Rebuild the dynamic inputCheck function from the current list of\r\n     * defined inputs in the manager.\r\n     */\r\n    public rebuildInputCheck(): void {\r\n        this.checkInputs = () => {};\r\n\r\n        for (var cam in this.attached) {\r\n            var input = this.attached[cam];\r\n            if (input.checkInputs) {\r\n                this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all attached input methods from a camera\r\n     */\r\n    public clear(): void {\r\n        if (this.attachedToElement) {\r\n            this.detachElement(true);\r\n        }\r\n        this.attached = {};\r\n        this.attachedToElement = false;\r\n        this.checkInputs = () => {};\r\n    }\r\n\r\n    /**\r\n     * Serialize the current input manager attached to a camera.\r\n     * This ensures than once parsed,\r\n     * the input associated to the camera will be identical to the current ones\r\n     * @param serializedCamera Defines the camera serialization JSON the input serialization should write to\r\n     */\r\n    public serialize(serializedCamera: any): void {\r\n        var inputs: { [key: string]: any } = {};\r\n        for (var cam in this.attached) {\r\n            var input = this.attached[cam];\r\n            var res = SerializationHelper.Serialize(input);\r\n            inputs[input.getClassName()] = res;\r\n        }\r\n\r\n        serializedCamera.inputsmgr = inputs;\r\n    }\r\n\r\n    /**\r\n     * Parses an input manager serialized JSON to restore the previous list of inputs\r\n     * and states associated to a camera.\r\n     * @param parsedCamera Defines the JSON to parse\r\n     */\r\n    public parse(parsedCamera: any): void {\r\n        var parsedInputs = parsedCamera.inputsmgr;\r\n        if (parsedInputs) {\r\n            this.clear();\r\n\r\n            for (var n in parsedInputs) {\r\n                var construct = (<any>CameraInputTypes)[n];\r\n                if (construct) {\r\n                    var parsedinput = parsedInputs[n];\r\n                    var input = SerializationHelper.Parse(\r\n                        () => {\r\n                            return new construct();\r\n                        },\r\n                        parsedinput,\r\n                        null\r\n                    );\r\n                    this.add(input as any);\r\n                }\r\n            }\r\n        } else {\r\n            //2016-03-08 this part is for managing backward compatibility\r\n            for (var n in this.attached) {\r\n                var construct = (<any>CameraInputTypes)[this.attached[n].getClassName()];\r\n                if (construct) {\r\n                    var input = SerializationHelper.Parse(\r\n                        () => {\r\n                            return new construct();\r\n                        },\r\n                        parsedCamera,\r\n                        null\r\n                    );\r\n                    this.remove(this.attached[n]);\r\n                    this.add(input as any);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}