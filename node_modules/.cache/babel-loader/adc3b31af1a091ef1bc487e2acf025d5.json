{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/filter.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serializeAsMatrix, SerializationHelper } from '../Misc/decorators';\n/**\r\n * Applies a kernel filter to the image\r\n */\n\nvar FilterPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(FilterPostProcess, _super);\n  /**\r\n   *\r\n   * @param name The name of the effect.\r\n   * @param kernelMatrix The matrix to be applied to the image\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   */\n\n\n  function FilterPostProcess(name, kernelMatrix, options, camera, samplingMode, engine, reusable) {\n    var _this = _super.call(this, name, \"filter\", [\"kernelMatrix\"], null, options, camera, samplingMode, engine, reusable) || this;\n\n    _this.kernelMatrix = kernelMatrix;\n\n    _this.onApply = function (effect) {\n      effect.setMatrix(\"kernelMatrix\", _this.kernelMatrix);\n    };\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"FilterPostProcess\" string\r\n   */\n\n\n  FilterPostProcess.prototype.getClassName = function () {\n    return \"FilterPostProcess\";\n  };\n  /** @hidden */\n\n\n  FilterPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new FilterPostProcess(parsedPostProcess.name, parsedPostProcess.kernelMatrix, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serializeAsMatrix()], FilterPostProcess.prototype, \"kernelMatrix\", void 0);\n\n  return FilterPostProcess;\n}(PostProcess);\n\nexport { FilterPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.FilterPostProcess\"] = FilterPostProcess;","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/filterPostProcess.ts"],"names":[],"mappings":";AAIA,SAAS,WAAT,QAAgD,eAAhD;AAGA,OAAO,4BAAP;AACA,SAAS,UAAT,QAA2B,mBAA3B;AACA,SAAS,iBAAT,EAA4B,mBAA5B,QAAuD,oBAAvD;AAIA;;;;AAGA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;AAanC;;;;;;;;;;;;AAUA,WAAA,iBAAA,CAAY,IAAZ,EACI,YADJ,EAEI,OAFJ,EAGI,MAHJ,EAII,YAJJ,EAKI,MALJ,EAMI,QANJ,EAMsB;AANtB,QAAA,KAAA,GAQI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,QAAZ,EAAsB,CAAC,cAAD,CAAtB,EAAwC,IAAxC,EAA8C,OAA9C,EAAuD,MAAvD,EAA+D,YAA/D,EAA6E,MAA7E,EAAqF,QAArF,KAA8F,IARlG;;AASI,IAAA,KAAI,CAAC,YAAL,GAAoB,YAApB;;AAEA,IAAA,KAAI,CAAC,OAAL,GAAe,UAAC,MAAD,EAAe;AAC1B,MAAA,MAAM,CAAC,SAAP,CAAiB,cAAjB,EAAiC,KAAI,CAAC,YAAtC;AACH,KAFD;;;AAGH;AAhCD;;;;;;AAIO,EAAA,iBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,mBAAP;AACH,GAFM;AA8BP;;;AACc,EAAA,iBAAA,CAAA,MAAA,GAAd,UAAqB,iBAArB,EAA6C,YAA7C,EAAmE,KAAnE,EAAiF,OAAjF,EAAgG;AAC5F,WAAO,mBAAmB,CAAC,KAApB,CAA0B,YAAA;AAC7B,aAAO,IAAI,iBAAJ,CACH,iBAAiB,CAAC,IADf,EACqB,iBAAiB,CAAC,YADvC,EAEH,iBAAiB,CAAC,OAFf,EAEwB,YAFxB,EAGH,iBAAiB,CAAC,wBAHf,EAIH,KAAK,CAAC,SAAN,EAJG,EAIgB,iBAAiB,CAAC,QAJlC,CAAP;AAKH,KANM,EAMJ,iBANI,EAMe,KANf,EAMsB,OANtB,CAAP;AAOH,GARa;;AArCd,EAAA,UAAA,CAAA,CADC,iBAAiB,EAClB,CAAA,E,2BAAA,E,cAAA,E,KAA4B,CAA5B,CAAA;;AA8CJ,SAAA,iBAAA;AAAC,CAjDD,CAAuC,WAAvC,CAAA;;SAAa,iB;AAmDb,UAAU,CAAC,eAAX,CAA2B,2BAA3B,IAA0D,iBAA1D","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Matrix } from \"../Maths/math.vector\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/filter.fragment\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { serializeAsMatrix, SerializationHelper } from '../Misc/decorators';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Applies a kernel filter to the image\r\n */\r\nexport class FilterPostProcess extends PostProcess {\r\n    /** The matrix to be applied to the image */\r\n    @serializeAsMatrix()\r\n    public kernelMatrix: Matrix;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"FilterPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"FilterPostProcess\";\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name The name of the effect.\r\n     * @param kernelMatrix The matrix to be applied to the image\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string,\r\n        kernelMatrix: Matrix,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean\r\n    ) {\r\n        super(name, \"filter\", [\"kernelMatrix\"], null, options, camera, samplingMode, engine, reusable);\r\n        this.kernelMatrix = kernelMatrix;\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setMatrix(\"kernelMatrix\", this.kernelMatrix);\r\n        };\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<FilterPostProcess> {\r\n        return SerializationHelper.Parse(() => {\r\n            return new FilterPostProcess(\r\n                parsedPostProcess.name, parsedPostProcess.kernelMatrix,\r\n                parsedPostProcess.options, targetCamera,\r\n                parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.reusable);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.FilterPostProcess\"] = FilterPostProcess;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}