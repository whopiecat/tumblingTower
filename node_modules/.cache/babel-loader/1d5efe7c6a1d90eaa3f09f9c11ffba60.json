{"ast":null,"code":"import { Logger } from \"../Misc/logger\";\nimport { ArrayTools } from \"../Misc/arrayTools\";\nimport { Vector3, Quaternion } from \"../Maths/math.vector\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\nimport { Mesh } from \"../Meshes/mesh\";\nimport { PhysicsJoint } from \"./physicsJoint\";\nimport { Space } from \"../Maths/math.axis\";\n\nMesh._PhysicsImpostorParser = function (scene, physicObject, jsonObject) {\n  return new PhysicsImpostor(physicObject, jsonObject.physicsImpostor, {\n    mass: jsonObject.physicsMass,\n    friction: jsonObject.physicsFriction,\n    restitution: jsonObject.physicsRestitution\n  }, scene);\n};\n/**\r\n * Represents a physics imposter\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\n\nvar PhysicsImpostor =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes the physics imposter\r\n   * @param object The physics-enabled object used as the physics imposter\r\n   * @param type The type of the physics imposter\r\n   * @param _options The options for the physics imposter\r\n   * @param _scene The Babylon scene\r\n   */\n  function PhysicsImpostor(\n  /**\r\n   * The physics-enabled object used as the physics imposter\r\n   */\n  object,\n  /**\r\n   * The type of the physics imposter\r\n   */\n  type, _options, _scene) {\n    var _this = this;\n\n    if (_options === void 0) {\n      _options = {\n        mass: 0\n      };\n    }\n\n    this.object = object;\n    this.type = type;\n    this._options = _options;\n    this._scene = _scene;\n    /** @hidden */\n\n    this._pluginData = {};\n    this._bodyUpdateRequired = false;\n    this._onBeforePhysicsStepCallbacks = new Array();\n    this._onAfterPhysicsStepCallbacks = new Array();\n    /** @hidden */\n\n    this._onPhysicsCollideCallbacks = [];\n    this._deltaPosition = Vector3.Zero();\n    this._isDisposed = false;\n    /**\r\n     * @hidden\r\n     */\n\n    this.soft = false;\n    /**\r\n     * @hidden\r\n     */\n\n    this.segments = 0; //temp variables for parent rotation calculations\n    //private _mats: Array<Matrix> = [new Matrix(), new Matrix()];\n\n    this._tmpQuat = new Quaternion();\n    this._tmpQuat2 = new Quaternion();\n    /**\r\n     * this function is executed by the physics engine.\r\n     */\n\n    this.beforeStep = function () {\n      if (!_this._physicsEngine) {\n        return;\n      }\n\n      _this.object.translate(_this._deltaPosition, -1);\n\n      _this._deltaRotationConjugated && _this.object.rotationQuaternion && _this.object.rotationQuaternion.multiplyToRef(_this._deltaRotationConjugated, _this.object.rotationQuaternion);\n\n      _this.object.computeWorldMatrix(false);\n\n      if (_this.object.parent && _this.object.rotationQuaternion) {\n        _this.getParentsRotation();\n\n        _this._tmpQuat.multiplyToRef(_this.object.rotationQuaternion, _this._tmpQuat);\n      } else {\n        _this._tmpQuat.copyFrom(_this.object.rotationQuaternion || new Quaternion());\n      }\n\n      if (!_this._options.disableBidirectionalTransformation) {\n        _this.object.rotationQuaternion && _this._physicsEngine.getPhysicsPlugin().setPhysicsBodyTransformation(_this,\n        /*bInfo.boundingBox.centerWorld*/\n        _this.object.getAbsolutePosition(), _this._tmpQuat);\n      }\n\n      _this._onBeforePhysicsStepCallbacks.forEach(function (func) {\n        func(_this);\n      });\n    };\n    /**\r\n     * this function is executed by the physics engine\r\n     */\n\n\n    this.afterStep = function () {\n      if (!_this._physicsEngine) {\n        return;\n      }\n\n      _this._onAfterPhysicsStepCallbacks.forEach(function (func) {\n        func(_this);\n      });\n\n      _this._physicsEngine.getPhysicsPlugin().setTransformationFromPhysicsBody(_this); // object has now its world rotation. needs to be converted to local.\n\n\n      if (_this.object.parent && _this.object.rotationQuaternion) {\n        _this.getParentsRotation();\n\n        _this._tmpQuat.conjugateInPlace();\n\n        _this._tmpQuat.multiplyToRef(_this.object.rotationQuaternion, _this.object.rotationQuaternion);\n      } // take the position set and make it the absolute position of this object.\n\n\n      _this.object.setAbsolutePosition(_this.object.position);\n\n      _this._deltaRotation && _this.object.rotationQuaternion && _this.object.rotationQuaternion.multiplyToRef(_this._deltaRotation, _this.object.rotationQuaternion);\n\n      _this.object.translate(_this._deltaPosition, 1);\n    };\n    /**\r\n     * Legacy collision detection event support\r\n     */\n\n\n    this.onCollideEvent = null;\n    /**\r\n     * event and body object due to cannon's event-based architecture.\r\n     */\n\n    this.onCollide = function (e) {\n      if (!_this._onPhysicsCollideCallbacks.length && !_this.onCollideEvent) {\n        return;\n      }\n\n      if (!_this._physicsEngine) {\n        return;\n      }\n\n      var otherImpostor = _this._physicsEngine.getImpostorWithPhysicsBody(e.body);\n\n      if (otherImpostor) {\n        // Legacy collision detection event support\n        if (_this.onCollideEvent) {\n          _this.onCollideEvent(_this, otherImpostor);\n        }\n\n        _this._onPhysicsCollideCallbacks.filter(function (obj) {\n          return obj.otherImpostors.indexOf(otherImpostor) !== -1;\n        }).forEach(function (obj) {\n          obj.callback(_this, otherImpostor, e.point);\n        });\n      }\n    }; //sanity check!\n\n\n    if (!this.object) {\n      Logger.Error(\"No object was provided. A physics object is obligatory\");\n      return;\n    }\n\n    if (this.object.parent && _options.mass !== 0) {\n      Logger.Warn(\"A physics impostor has been created for an object which has a parent. Babylon physics currently works in local space so unexpected issues may occur.\");\n    } // Legacy support for old syntax.\n\n\n    if (!this._scene && object.getScene) {\n      this._scene = object.getScene();\n    }\n\n    if (!this._scene) {\n      return;\n    }\n\n    if (this.type > 100) {\n      this.soft = true;\n    }\n\n    this._physicsEngine = this._scene.getPhysicsEngine();\n\n    if (!this._physicsEngine) {\n      Logger.Error(\"Physics not enabled. Please use scene.enablePhysics(...) before creating impostors.\");\n    } else {\n      //set the object's quaternion, if not set\n      if (!this.object.rotationQuaternion) {\n        if (this.object.rotation) {\n          this.object.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.object.rotation.y, this.object.rotation.x, this.object.rotation.z);\n        } else {\n          this.object.rotationQuaternion = new Quaternion();\n        }\n      } //default options params\n\n\n      this._options.mass = _options.mass === void 0 ? 0 : _options.mass;\n      this._options.friction = _options.friction === void 0 ? 0.2 : _options.friction;\n      this._options.restitution = _options.restitution === void 0 ? 0.2 : _options.restitution;\n\n      if (this.soft) {\n        //softbody mass must be above 0;\n        this._options.mass = this._options.mass > 0 ? this._options.mass : 1;\n        this._options.pressure = _options.pressure === void 0 ? 200 : _options.pressure;\n        this._options.stiffness = _options.stiffness === void 0 ? 1 : _options.stiffness;\n        this._options.velocityIterations = _options.velocityIterations === void 0 ? 20 : _options.velocityIterations;\n        this._options.positionIterations = _options.positionIterations === void 0 ? 20 : _options.positionIterations;\n        this._options.fixedPoints = _options.fixedPoints === void 0 ? 0 : _options.fixedPoints;\n        this._options.margin = _options.margin === void 0 ? 0 : _options.margin;\n        this._options.damping = _options.damping === void 0 ? 0 : _options.damping;\n        this._options.path = _options.path === void 0 ? null : _options.path;\n        this._options.shape = _options.shape === void 0 ? null : _options.shape;\n      }\n\n      this._joints = []; //If the mesh has a parent, don't initialize the physicsBody. Instead wait for the parent to do that.\n\n      if (!this.object.parent || this._options.ignoreParent) {\n        this._init();\n      } else if (this.object.parent.physicsImpostor) {\n        Logger.Warn(\"You must affect impostors to children before affecting impostor to parent.\");\n      }\n    }\n  }\n\n  Object.defineProperty(PhysicsImpostor.prototype, \"isDisposed\", {\n    /**\r\n     * Specifies if the physics imposter is disposed\r\n     */\n    get: function () {\n      return this._isDisposed;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"mass\", {\n    /**\r\n     * Gets the mass of the physics imposter\r\n     */\n    get: function () {\n      return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyMass(this) : 0;\n    },\n    set: function (value) {\n      this.setMass(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"friction\", {\n    /**\r\n     * Gets the coefficient of friction\r\n     */\n    get: function () {\n      return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyFriction(this) : 0;\n    },\n\n    /**\r\n     * Sets the coefficient of friction\r\n     */\n    set: function (value) {\n      if (!this._physicsEngine) {\n        return;\n      }\n\n      this._physicsEngine.getPhysicsPlugin().setBodyFriction(this, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"restitution\", {\n    /**\r\n     * Gets the coefficient of restitution\r\n     */\n    get: function () {\n      return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyRestitution(this) : 0;\n    },\n\n    /**\r\n     * Sets the coefficient of restitution\r\n     */\n    set: function (value) {\n      if (!this._physicsEngine) {\n        return;\n      }\n\n      this._physicsEngine.getPhysicsPlugin().setBodyRestitution(this, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"pressure\", {\n    /**\r\n     * Gets the pressure of a soft body; only supported by the AmmoJSPlugin\r\n     */\n    get: function () {\n      if (!this._physicsEngine) {\n        return 0;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.setBodyPressure) {\n        return 0;\n      }\n\n      return plugin.getBodyPressure(this);\n    },\n\n    /**\r\n     * Sets the pressure of a soft body; only supported by the AmmoJSPlugin\r\n     */\n    set: function (value) {\n      if (!this._physicsEngine) {\n        return;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.setBodyPressure) {\n        return;\n      }\n\n      plugin.setBodyPressure(this, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"stiffness\", {\n    /**\r\n     * Gets the stiffness of a soft body; only supported by the AmmoJSPlugin\r\n     */\n    get: function () {\n      if (!this._physicsEngine) {\n        return 0;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.getBodyStiffness) {\n        return 0;\n      }\n\n      return plugin.getBodyStiffness(this);\n    },\n\n    /**\r\n     * Sets the stiffness of a soft body; only supported by the AmmoJSPlugin\r\n     */\n    set: function (value) {\n      if (!this._physicsEngine) {\n        return;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.setBodyStiffness) {\n        return;\n      }\n\n      plugin.setBodyStiffness(this, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"velocityIterations\", {\n    /**\r\n     * Gets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\n    get: function () {\n      if (!this._physicsEngine) {\n        return 0;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.getBodyVelocityIterations) {\n        return 0;\n      }\n\n      return plugin.getBodyVelocityIterations(this);\n    },\n\n    /**\r\n     * Sets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\n    set: function (value) {\n      if (!this._physicsEngine) {\n        return;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.setBodyVelocityIterations) {\n        return;\n      }\n\n      plugin.setBodyVelocityIterations(this, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"positionIterations\", {\n    /**\r\n     * Gets the positionIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\n    get: function () {\n      if (!this._physicsEngine) {\n        return 0;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.getBodyPositionIterations) {\n        return 0;\n      }\n\n      return plugin.getBodyPositionIterations(this);\n    },\n\n    /**\r\n     * Sets the positionIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\n    set: function (value) {\n      if (!this._physicsEngine) {\n        return;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.setBodyPositionIterations) {\n        return;\n      }\n\n      plugin.setBodyPositionIterations(this, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * This function will completly initialize this impostor.\r\n   * It will create a new body - but only if this mesh has no parent.\r\n   * If it has, this impostor will not be used other than to define the impostor\r\n   * of the child mesh.\r\n   * @hidden\r\n   */\n\n  PhysicsImpostor.prototype._init = function () {\n    if (!this._physicsEngine) {\n      return;\n    }\n\n    this._physicsEngine.removeImpostor(this);\n\n    this.physicsBody = null;\n    this._parent = this._parent || this._getPhysicsParent();\n\n    if (!this._isDisposed && (!this.parent || this._options.ignoreParent)) {\n      this._physicsEngine.addImpostor(this);\n    }\n  };\n\n  PhysicsImpostor.prototype._getPhysicsParent = function () {\n    if (this.object.parent instanceof AbstractMesh) {\n      var parentMesh = this.object.parent;\n      return parentMesh.physicsImpostor;\n    }\n\n    return null;\n  };\n  /**\r\n   * Should a new body be generated.\r\n   * @returns boolean specifying if body initialization is required\r\n   */\n\n\n  PhysicsImpostor.prototype.isBodyInitRequired = function () {\n    return this._bodyUpdateRequired || !this._physicsBody && !this._parent;\n  };\n  /**\r\n   * Sets the updated scaling\r\n   * @param updated Specifies if the scaling is updated\r\n   */\n\n\n  PhysicsImpostor.prototype.setScalingUpdated = function () {\n    this.forceUpdate();\n  };\n  /**\r\n   * Force a regeneration of this or the parent's impostor's body.\r\n   * Use under cautious - This will remove all joints already implemented.\r\n   */\n\n\n  PhysicsImpostor.prototype.forceUpdate = function () {\n    this._init();\n\n    if (this.parent && !this._options.ignoreParent) {\n      this.parent.forceUpdate();\n    }\n  };\n\n  Object.defineProperty(PhysicsImpostor.prototype, \"physicsBody\", {\n    /*public get mesh(): AbstractMesh {\r\n        return this._mesh;\r\n    }*/\n\n    /**\r\n     * Gets the body that holds this impostor. Either its own, or its parent.\r\n     */\n    get: function () {\n      return this._parent && !this._options.ignoreParent ? this._parent.physicsBody : this._physicsBody;\n    },\n\n    /**\r\n     * Set the physics body. Used mainly by the physics engine/plugin\r\n     */\n    set: function (physicsBody) {\n      if (this._physicsBody && this._physicsEngine) {\n        this._physicsEngine.getPhysicsPlugin().removePhysicsBody(this);\n      }\n\n      this._physicsBody = physicsBody;\n      this.resetUpdateFlags();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"parent\", {\n    /**\r\n     * Get the parent of the physics imposter\r\n     * @returns Physics imposter or null\r\n     */\n    get: function () {\n      return !this._options.ignoreParent && this._parent ? this._parent : null;\n    },\n\n    /**\r\n     * Sets the parent of the physics imposter\r\n     */\n    set: function (value) {\n      this._parent = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Resets the update flags\r\n   */\n\n  PhysicsImpostor.prototype.resetUpdateFlags = function () {\n    this._bodyUpdateRequired = false;\n  };\n  /**\r\n   * Gets the object extend size\r\n   * @returns the object extend size\r\n   */\n\n\n  PhysicsImpostor.prototype.getObjectExtendSize = function () {\n    if (this.object.getBoundingInfo) {\n      var q = this.object.rotationQuaternion;\n      var scaling = this.object.scaling.clone(); //reset rotation\n\n      this.object.rotationQuaternion = PhysicsImpostor.IDENTITY_QUATERNION; //calculate the world matrix with no rotation\n\n      var worldMatrix = this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\n\n      if (worldMatrix) {\n        worldMatrix.decompose(scaling, undefined, undefined);\n      }\n\n      var boundingInfo = this.object.getBoundingInfo(); // get the global scaling of the object\n\n      var size = boundingInfo.boundingBox.extendSize.scale(2).multiplyInPlace(scaling); //bring back the rotation\n\n      this.object.rotationQuaternion = q; //calculate the world matrix with the new rotation\n\n      this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\n      return size;\n    } else {\n      return PhysicsImpostor.DEFAULT_OBJECT_SIZE;\n    }\n  };\n  /**\r\n   * Gets the object center\r\n   * @returns The object center\r\n   */\n\n\n  PhysicsImpostor.prototype.getObjectCenter = function () {\n    if (this.object.getBoundingInfo) {\n      var boundingInfo = this.object.getBoundingInfo();\n      return boundingInfo.boundingBox.centerWorld;\n    } else {\n      return this.object.position;\n    }\n  };\n  /**\r\n   * Get a specific parameter from the options parameters\r\n   * @param paramName The object parameter name\r\n   * @returns The object parameter\r\n   */\n\n\n  PhysicsImpostor.prototype.getParam = function (paramName) {\n    return this._options[paramName];\n  };\n  /**\r\n   * Sets a specific parameter in the options given to the physics plugin\r\n   * @param paramName The parameter name\r\n   * @param value The value of the parameter\r\n   */\n\n\n  PhysicsImpostor.prototype.setParam = function (paramName, value) {\n    this._options[paramName] = value;\n    this._bodyUpdateRequired = true;\n  };\n  /**\r\n   * Specifically change the body's mass option. Won't recreate the physics body object\r\n   * @param mass The mass of the physics imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.setMass = function (mass) {\n    if (this.getParam(\"mass\") !== mass) {\n      this.setParam(\"mass\", mass);\n    }\n\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().setBodyMass(this, mass);\n    }\n  };\n  /**\r\n   * Gets the linear velocity\r\n   * @returns  linear velocity or null\r\n   */\n\n\n  PhysicsImpostor.prototype.getLinearVelocity = function () {\n    return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getLinearVelocity(this) : Vector3.Zero();\n  };\n  /**\r\n   * Sets the linear velocity\r\n   * @param velocity  linear velocity or null\r\n   */\n\n\n  PhysicsImpostor.prototype.setLinearVelocity = function (velocity) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().setLinearVelocity(this, velocity);\n    }\n  };\n  /**\r\n   * Gets the angular velocity\r\n   * @returns angular velocity or null\r\n   */\n\n\n  PhysicsImpostor.prototype.getAngularVelocity = function () {\n    return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getAngularVelocity(this) : Vector3.Zero();\n  };\n  /**\r\n   * Sets the angular velocity\r\n   * @param velocity The velocity or null\r\n   */\n\n\n  PhysicsImpostor.prototype.setAngularVelocity = function (velocity) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().setAngularVelocity(this, velocity);\n    }\n  };\n  /**\r\n   * Execute a function with the physics plugin native code\r\n   * Provide a function the will have two variables - the world object and the physics body object\r\n   * @param func The function to execute with the physics plugin native code\r\n   */\n\n\n  PhysicsImpostor.prototype.executeNativeFunction = function (func) {\n    if (this._physicsEngine) {\n      func(this._physicsEngine.getPhysicsPlugin().world, this.physicsBody);\n    }\n  };\n  /**\r\n   * Register a function that will be executed before the physics world is stepping forward\r\n   * @param func The function to execute before the physics world is stepped forward\r\n   */\n\n\n  PhysicsImpostor.prototype.registerBeforePhysicsStep = function (func) {\n    this._onBeforePhysicsStepCallbacks.push(func);\n  };\n  /**\r\n   * Unregister a function that will be executed before the physics world is stepping forward\r\n   * @param func The function to execute before the physics world is stepped forward\r\n   */\n\n\n  PhysicsImpostor.prototype.unregisterBeforePhysicsStep = function (func) {\n    var index = this._onBeforePhysicsStepCallbacks.indexOf(func);\n\n    if (index > -1) {\n      this._onBeforePhysicsStepCallbacks.splice(index, 1);\n    } else {\n      Logger.Warn(\"Function to remove was not found\");\n    }\n  };\n  /**\r\n   * Register a function that will be executed after the physics step\r\n   * @param func The function to execute after physics step\r\n   */\n\n\n  PhysicsImpostor.prototype.registerAfterPhysicsStep = function (func) {\n    this._onAfterPhysicsStepCallbacks.push(func);\n  };\n  /**\r\n   * Unregisters a function that will be executed after the physics step\r\n   * @param func The function to execute after physics step\r\n   */\n\n\n  PhysicsImpostor.prototype.unregisterAfterPhysicsStep = function (func) {\n    var index = this._onAfterPhysicsStepCallbacks.indexOf(func);\n\n    if (index > -1) {\n      this._onAfterPhysicsStepCallbacks.splice(index, 1);\n    } else {\n      Logger.Warn(\"Function to remove was not found\");\n    }\n  };\n  /**\r\n   * register a function that will be executed when this impostor collides against a different body\r\n   * @param collideAgainst Physics imposter, or array of physics imposters to collide against\r\n   * @param func Callback that is executed on collision\r\n   */\n\n\n  PhysicsImpostor.prototype.registerOnPhysicsCollide = function (collideAgainst, func) {\n    var collidedAgainstList = collideAgainst instanceof Array ? collideAgainst : [collideAgainst];\n\n    this._onPhysicsCollideCallbacks.push({\n      callback: func,\n      otherImpostors: collidedAgainstList\n    });\n  };\n  /**\r\n   * Unregisters the physics imposter on contact\r\n   * @param collideAgainst The physics object to collide against\r\n   * @param func Callback to execute on collision\r\n   */\n\n\n  PhysicsImpostor.prototype.unregisterOnPhysicsCollide = function (collideAgainst, func) {\n    var collidedAgainstList = collideAgainst instanceof Array ? collideAgainst : [collideAgainst];\n    var index = -1;\n\n    var found = this._onPhysicsCollideCallbacks.some(function (cbDef, idx) {\n      if (cbDef.callback === func && cbDef.otherImpostors.length === collidedAgainstList.length) {\n        // chcek the arrays match\n        var sameList = cbDef.otherImpostors.every(function (impostor) {\n          return collidedAgainstList.indexOf(impostor) > -1;\n        });\n\n        if (sameList) {\n          index = idx;\n        }\n\n        return sameList;\n      }\n\n      return false;\n    });\n\n    if (found) {\n      this._onPhysicsCollideCallbacks.splice(index, 1);\n    } else {\n      Logger.Warn(\"Function to remove was not found\");\n    }\n  };\n  /**\r\n   * Get the parent rotation\r\n   * @returns The parent rotation\r\n   */\n\n\n  PhysicsImpostor.prototype.getParentsRotation = function () {\n    var parent = this.object.parent;\n\n    this._tmpQuat.copyFromFloats(0, 0, 0, 1);\n\n    while (parent) {\n      if (parent.rotationQuaternion) {\n        this._tmpQuat2.copyFrom(parent.rotationQuaternion);\n      } else {\n        Quaternion.RotationYawPitchRollToRef(parent.rotation.y, parent.rotation.x, parent.rotation.z, this._tmpQuat2);\n      }\n\n      this._tmpQuat.multiplyToRef(this._tmpQuat2, this._tmpQuat);\n\n      parent = parent.parent;\n    }\n\n    return this._tmpQuat;\n  };\n  /**\r\n   * Apply a force\r\n   * @param force The force to apply\r\n   * @param contactPoint The contact point for the force\r\n   * @returns The physics imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.applyForce = function (force, contactPoint) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().applyForce(this, force, contactPoint);\n    }\n\n    return this;\n  };\n  /**\r\n   * Apply an impulse\r\n   * @param force The impulse force\r\n   * @param contactPoint The contact point for the impulse force\r\n   * @returns The physics imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.applyImpulse = function (force, contactPoint) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().applyImpulse(this, force, contactPoint);\n    }\n\n    return this;\n  };\n  /**\r\n   * A help function to create a joint\r\n   * @param otherImpostor A physics imposter used to create a joint\r\n   * @param jointType The type of joint\r\n   * @param jointData The data for the joint\r\n   * @returns The physics imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.createJoint = function (otherImpostor, jointType, jointData) {\n    var joint = new PhysicsJoint(jointType, jointData);\n    this.addJoint(otherImpostor, joint);\n    return this;\n  };\n  /**\r\n   * Add a joint to this impostor with a different impostor\r\n   * @param otherImpostor A physics imposter used to add a joint\r\n   * @param joint The joint to add\r\n   * @returns The physics imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.addJoint = function (otherImpostor, joint) {\n    this._joints.push({\n      otherImpostor: otherImpostor,\n      joint: joint\n    });\n\n    if (this._physicsEngine) {\n      this._physicsEngine.addJoint(this, otherImpostor, joint);\n    }\n\n    return this;\n  };\n  /**\r\n   * Add an anchor to a cloth impostor\r\n   * @param otherImpostor rigid impostor to anchor to\r\n   * @param width ratio across width from 0 to 1\r\n   * @param height ratio up height from 0 to 1\r\n   * @param influence the elasticity between cloth impostor and anchor from 0, very stretchy to 1, little strech\r\n   * @param noCollisionBetweenLinkedBodies when true collisions between cloth impostor and anchor are ignored; default false\r\n   * @returns impostor the soft imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.addAnchor = function (otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies) {\n    if (!this._physicsEngine) {\n      return this;\n    }\n\n    var plugin = this._physicsEngine.getPhysicsPlugin();\n\n    if (!plugin.appendAnchor) {\n      return this;\n    }\n\n    if (this._physicsEngine) {\n      plugin.appendAnchor(this, otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies);\n    }\n\n    return this;\n  };\n  /**\r\n   * Add a hook to a rope impostor\r\n   * @param otherImpostor rigid impostor to anchor to\r\n   * @param length ratio across rope from 0 to 1\r\n   * @param influence the elasticity between rope impostor and anchor from 0, very stretchy to 1, little strech\r\n   * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\r\n   * @returns impostor the rope imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.addHook = function (otherImpostor, length, influence, noCollisionBetweenLinkedBodies) {\n    if (!this._physicsEngine) {\n      return this;\n    }\n\n    var plugin = this._physicsEngine.getPhysicsPlugin();\n\n    if (!plugin.appendAnchor) {\n      return this;\n    }\n\n    if (this._physicsEngine) {\n      plugin.appendHook(this, otherImpostor, length, influence, noCollisionBetweenLinkedBodies);\n    }\n\n    return this;\n  };\n  /**\r\n   * Will keep this body still, in a sleep mode.\r\n   * @returns the physics imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.sleep = function () {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().sleepBody(this);\n    }\n\n    return this;\n  };\n  /**\r\n   * Wake the body up.\r\n   * @returns The physics imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.wakeUp = function () {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().wakeUpBody(this);\n    }\n\n    return this;\n  };\n  /**\r\n   * Clones the physics imposter\r\n   * @param newObject The physics imposter clones to this physics-enabled object\r\n   * @returns A nullable physics imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.clone = function (newObject) {\n    if (!newObject) {\n      return null;\n    }\n\n    return new PhysicsImpostor(newObject, this.type, this._options, this._scene);\n  };\n  /**\r\n   * Disposes the physics imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.dispose = function ()\n  /*disposeChildren: boolean = true*/\n  {\n    var _this = this; //no dispose if no physics engine is available.\n\n\n    if (!this._physicsEngine) {\n      return;\n    }\n\n    this._joints.forEach(function (j) {\n      if (_this._physicsEngine) {\n        _this._physicsEngine.removeJoint(_this, j.otherImpostor, j.joint);\n      }\n    }); //dispose the physics body\n\n\n    this._physicsEngine.removeImpostor(this);\n\n    if (this.parent) {\n      this.parent.forceUpdate();\n    } else {\n      /*this._object.getChildMeshes().forEach(function(mesh) {\r\n          if (mesh.physicsImpostor) {\r\n              if (disposeChildren) {\r\n                  mesh.physicsImpostor.dispose();\r\n                  mesh.physicsImpostor = null;\r\n              }\r\n          }\r\n      })*/\n    }\n\n    this._isDisposed = true;\n  };\n  /**\r\n   * Sets the delta position\r\n   * @param position The delta position amount\r\n   */\n\n\n  PhysicsImpostor.prototype.setDeltaPosition = function (position) {\n    this._deltaPosition.copyFrom(position);\n  };\n  /**\r\n   * Sets the delta rotation\r\n   * @param rotation The delta rotation amount\r\n   */\n\n\n  PhysicsImpostor.prototype.setDeltaRotation = function (rotation) {\n    if (!this._deltaRotation) {\n      this._deltaRotation = new Quaternion();\n    }\n\n    this._deltaRotation.copyFrom(rotation);\n\n    this._deltaRotationConjugated = this._deltaRotation.conjugate();\n  };\n  /**\r\n   * Gets the box size of the physics imposter and stores the result in the input parameter\r\n   * @param result Stores the box size\r\n   * @returns The physics imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.getBoxSizeToRef = function (result) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().getBoxSizeToRef(this, result);\n    }\n\n    return this;\n  };\n  /**\r\n   * Gets the radius of the physics imposter\r\n   * @returns Radius of the physics imposter\r\n   */\n\n\n  PhysicsImpostor.prototype.getRadius = function () {\n    return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getRadius(this) : 0;\n  };\n  /**\r\n   * Sync a bone with this impostor\r\n   * @param bone The bone to sync to the impostor.\r\n   * @param boneMesh The mesh that the bone is influencing.\r\n   * @param jointPivot The pivot of the joint / bone in local space.\r\n   * @param distToJoint Optional distance from the impostor to the joint.\r\n   * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n   */\n\n\n  PhysicsImpostor.prototype.syncBoneWithImpostor = function (bone, boneMesh, jointPivot, distToJoint, adjustRotation) {\n    var tempVec = PhysicsImpostor._tmpVecs[0];\n    var mesh = this.object;\n\n    if (mesh.rotationQuaternion) {\n      if (adjustRotation) {\n        var tempQuat = PhysicsImpostor._tmpQuat;\n        mesh.rotationQuaternion.multiplyToRef(adjustRotation, tempQuat);\n        bone.setRotationQuaternion(tempQuat, Space.WORLD, boneMesh);\n      } else {\n        bone.setRotationQuaternion(mesh.rotationQuaternion, Space.WORLD, boneMesh);\n      }\n    }\n\n    tempVec.x = 0;\n    tempVec.y = 0;\n    tempVec.z = 0;\n\n    if (jointPivot) {\n      tempVec.x = jointPivot.x;\n      tempVec.y = jointPivot.y;\n      tempVec.z = jointPivot.z;\n      bone.getDirectionToRef(tempVec, boneMesh, tempVec);\n\n      if (distToJoint === undefined || distToJoint === null) {\n        distToJoint = jointPivot.length();\n      }\n\n      tempVec.x *= distToJoint;\n      tempVec.y *= distToJoint;\n      tempVec.z *= distToJoint;\n    }\n\n    if (bone.getParent()) {\n      tempVec.addInPlace(mesh.getAbsolutePosition());\n      bone.setAbsolutePosition(tempVec, boneMesh);\n    } else {\n      boneMesh.setAbsolutePosition(mesh.getAbsolutePosition());\n      boneMesh.position.x -= tempVec.x;\n      boneMesh.position.y -= tempVec.y;\n      boneMesh.position.z -= tempVec.z;\n    }\n  };\n  /**\r\n   * Sync impostor to a bone\r\n   * @param bone The bone that the impostor will be synced to.\r\n   * @param boneMesh The mesh that the bone is influencing.\r\n   * @param jointPivot The pivot of the joint / bone in local space.\r\n   * @param distToJoint Optional distance from the impostor to the joint.\r\n   * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n   * @param boneAxis Optional vector3 axis the bone is aligned with\r\n   */\n\n\n  PhysicsImpostor.prototype.syncImpostorWithBone = function (bone, boneMesh, jointPivot, distToJoint, adjustRotation, boneAxis) {\n    var mesh = this.object;\n\n    if (mesh.rotationQuaternion) {\n      if (adjustRotation) {\n        var tempQuat = PhysicsImpostor._tmpQuat;\n        bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, tempQuat);\n        tempQuat.multiplyToRef(adjustRotation, mesh.rotationQuaternion);\n      } else {\n        bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, mesh.rotationQuaternion);\n      }\n    }\n\n    var pos = PhysicsImpostor._tmpVecs[0];\n    var boneDir = PhysicsImpostor._tmpVecs[1];\n\n    if (!boneAxis) {\n      boneAxis = PhysicsImpostor._tmpVecs[2];\n      boneAxis.x = 0;\n      boneAxis.y = 1;\n      boneAxis.z = 0;\n    }\n\n    bone.getDirectionToRef(boneAxis, boneMesh, boneDir);\n    bone.getAbsolutePositionToRef(boneMesh, pos);\n\n    if ((distToJoint === undefined || distToJoint === null) && jointPivot) {\n      distToJoint = jointPivot.length();\n    }\n\n    if (distToJoint !== undefined && distToJoint !== null) {\n      pos.x += boneDir.x * distToJoint;\n      pos.y += boneDir.y * distToJoint;\n      pos.z += boneDir.z * distToJoint;\n    }\n\n    mesh.setAbsolutePosition(pos);\n  };\n  /**\r\n   * The default object size of the imposter\r\n   */\n\n\n  PhysicsImpostor.DEFAULT_OBJECT_SIZE = new Vector3(1, 1, 1);\n  /**\r\n   * The identity quaternion of the imposter\r\n   */\n\n  PhysicsImpostor.IDENTITY_QUATERNION = Quaternion.Identity();\n  PhysicsImpostor._tmpVecs = ArrayTools.BuildArray(3, Vector3.Zero);\n  PhysicsImpostor._tmpQuat = Quaternion.Identity(); //Impostor types\n\n  /**\r\n   * No-Imposter type\r\n   */\n\n  PhysicsImpostor.NoImpostor = 0;\n  /**\r\n   * Sphere-Imposter type\r\n   */\n\n  PhysicsImpostor.SphereImpostor = 1;\n  /**\r\n   * Box-Imposter type\r\n   */\n\n  PhysicsImpostor.BoxImpostor = 2;\n  /**\r\n   * Plane-Imposter type\r\n   */\n\n  PhysicsImpostor.PlaneImpostor = 3;\n  /**\r\n   * Mesh-imposter type\r\n   */\n\n  PhysicsImpostor.MeshImpostor = 4;\n  /**\r\n   * Capsule-Impostor type (Ammo.js plugin only)\r\n   */\n\n  PhysicsImpostor.CapsuleImpostor = 6;\n  /**\r\n   * Cylinder-Imposter type\r\n   */\n\n  PhysicsImpostor.CylinderImpostor = 7;\n  /**\r\n   * Particle-Imposter type\r\n   */\n\n  PhysicsImpostor.ParticleImpostor = 8;\n  /**\r\n   * Heightmap-Imposter type\r\n   */\n\n  PhysicsImpostor.HeightmapImpostor = 9;\n  /**\r\n   * ConvexHull-Impostor type (Ammo.js plugin only)\r\n   */\n\n  PhysicsImpostor.ConvexHullImpostor = 10;\n  /**\r\n   * Custom-Imposter type (Ammo.js plugin only)\r\n   */\n\n  PhysicsImpostor.CustomImpostor = 100;\n  /**\r\n   * Rope-Imposter type\r\n   */\n\n  PhysicsImpostor.RopeImpostor = 101;\n  /**\r\n   * Cloth-Imposter type\r\n   */\n\n  PhysicsImpostor.ClothImpostor = 102;\n  /**\r\n   * Softbody-Imposter type\r\n   */\n\n  PhysicsImpostor.SoftbodyImpostor = 103;\n  return PhysicsImpostor;\n}();\n\nexport { PhysicsImpostor };","map":{"version":3,"sources":["../../../sourceES6/core/Physics/physicsImpostor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable, IndicesArray } from \"../types\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport { Vector3, Matrix, Quaternion } from \"../Maths/math.vector\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Scene } from \"../scene\";\r\nimport { Bone } from \"../Bones/bone\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport { IPhysicsEngine } from \"./IPhysicsEngine\";\r\nimport { PhysicsJoint, PhysicsJointData } from \"./physicsJoint\";\r\nimport { Space } from \"../Maths/math.axis\";\r\n\r\n/**\r\n * The interface for the physics imposter parameters\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport interface PhysicsImpostorParameters {\r\n    /**\r\n     * The mass of the physics imposter\r\n     */\r\n    mass: number;\r\n    /**\r\n     * The friction of the physics imposter\r\n     */\r\n    friction?: number;\r\n    /**\r\n     * The coefficient of restitution of the physics imposter\r\n     */\r\n    restitution?: number;\r\n    /**\r\n     * The native options of the physics imposter\r\n     */\r\n    nativeOptions?: any;\r\n    /**\r\n     * Specifies if the parent should be ignored\r\n     */\r\n    ignoreParent?: boolean;\r\n    /**\r\n     * Specifies if bi-directional transformations should be disabled\r\n     */\r\n    disableBidirectionalTransformation?: boolean;\r\n    /**\r\n     * The pressure inside the physics imposter, soft object only\r\n     */\r\n    pressure?: number;\r\n    /**\r\n     * The stiffness the physics imposter, soft object only\r\n     */\r\n    stiffness?: number;\r\n    /**\r\n     * The number of iterations used in maintaining consistent vertex velocities, soft object only\r\n     */\r\n    velocityIterations?: number;\r\n    /**\r\n     * The number of iterations used in maintaining consistent vertex positions, soft object only\r\n     */\r\n    positionIterations?: number;\r\n    /**\r\n     * The number used to fix points on a cloth (0, 1, 2, 4, 8) or rope (0, 1, 2) only\r\n     * 0 None, 1, back left or top, 2, back right or bottom, 4, front left, 8, front right\r\n     * Add to fix multiple points\r\n     */\r\n    fixedPoints?: number;\r\n    /**\r\n     * The collision margin around a soft object\r\n     */\r\n    margin?: number;\r\n    /**\r\n     * The collision margin around a soft object\r\n     */\r\n    damping?: number;\r\n    /**\r\n     * The path for a rope based on an extrusion\r\n     */\r\n    path?: any;\r\n    /**\r\n     * The shape of an extrusion used for a rope based on an extrusion\r\n     */\r\n    shape?: any;\r\n}\r\n\r\n/**\r\n * Interface for a physics-enabled object\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport interface IPhysicsEnabledObject {\r\n    /**\r\n     * The position of the physics-enabled object\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * The rotation of the physics-enabled object\r\n     */\r\n    rotationQuaternion: Nullable<Quaternion>;\r\n    /**\r\n     * The scale of the physics-enabled object\r\n     */\r\n    scaling: Vector3;\r\n    /**\r\n     * The rotation of the physics-enabled object\r\n     */\r\n    rotation?: Vector3;\r\n    /**\r\n     * The parent of the physics-enabled object\r\n     */\r\n    parent?: any;\r\n    /**\r\n     * The bounding info of the physics-enabled object\r\n     * @returns The bounding info of the physics-enabled object\r\n     */\r\n    getBoundingInfo(): BoundingInfo;\r\n    /**\r\n     * Computes the world matrix\r\n     * @param force Specifies if the world matrix should be computed by force\r\n     * @returns A world matrix\r\n     */\r\n    computeWorldMatrix(force: boolean): Matrix;\r\n    /**\r\n     * Gets the world matrix\r\n     * @returns A world matrix\r\n     */\r\n    getWorldMatrix?(): Matrix;\r\n    /**\r\n     * Gets the child meshes\r\n     * @param directDescendantsOnly Specifies if only direct-descendants should be obtained\r\n     * @returns An array of abstract meshes\r\n     */\r\n    getChildMeshes?(directDescendantsOnly?: boolean): Array<AbstractMesh>;\r\n    /**\r\n     * Gets the vertex data\r\n     * @param kind The type of vertex data\r\n     * @returns A nullable array of numbers, or a float32 array\r\n     */\r\n    getVerticesData(kind: string): Nullable<Array<number> | Float32Array>;\r\n    /**\r\n     * Gets the indices from the mesh\r\n     * @returns A nullable array of index arrays\r\n     */\r\n    getIndices?(): Nullable<IndicesArray>;\r\n    /**\r\n     * Gets the scene from the mesh\r\n     * @returns the indices array or null\r\n     */\r\n    getScene?(): Scene;\r\n    /**\r\n     * Gets the absolute position from the mesh\r\n     * @returns the absolute position\r\n     */\r\n    getAbsolutePosition(): Vector3;\r\n    /**\r\n     * Gets the absolute pivot point from the mesh\r\n     * @returns the absolute pivot point\r\n     */\r\n    getAbsolutePivotPoint(): Vector3;\r\n    /**\r\n     * Rotates the mesh\r\n     * @param axis The axis of rotation\r\n     * @param amount The amount of rotation\r\n     * @param space The space of the rotation\r\n     * @returns The rotation transform node\r\n     */\r\n    rotate(axis: Vector3, amount: number, space?: Space): TransformNode;\r\n    /**\r\n     * Translates the mesh\r\n     * @param axis The axis of translation\r\n     * @param distance The distance of translation\r\n     * @param space The space of the translation\r\n     * @returns The transform node\r\n     */\r\n    translate(axis: Vector3, distance: number, space?: Space): TransformNode;\r\n    /**\r\n     * Sets the absolute position of the mesh\r\n     * @param absolutePosition The absolute position of the mesh\r\n     * @returns The transform node\r\n     */\r\n    setAbsolutePosition(absolutePosition: Vector3): TransformNode;\r\n    /**\r\n     * Gets the class name of the mesh\r\n     * @returns The class name\r\n     */\r\n    getClassName(): string;\r\n}\r\n\r\nMesh._PhysicsImpostorParser = function (scene: Scene, physicObject: IPhysicsEnabledObject, jsonObject: any): PhysicsImpostor {\r\n    return new PhysicsImpostor(\r\n        physicObject,\r\n        jsonObject.physicsImpostor,\r\n        {\r\n            mass: jsonObject.physicsMass,\r\n            friction: jsonObject.physicsFriction,\r\n            restitution: jsonObject.physicsRestitution,\r\n        },\r\n        scene\r\n    );\r\n};\r\n\r\n/**\r\n * Represents a physics imposter\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class PhysicsImpostor {\r\n    /**\r\n     * The default object size of the imposter\r\n     */\r\n    public static DEFAULT_OBJECT_SIZE: Vector3 = new Vector3(1, 1, 1);\r\n\r\n    /**\r\n     * The identity quaternion of the imposter\r\n     */\r\n    public static IDENTITY_QUATERNION = Quaternion.Identity();\r\n\r\n    /** @hidden */\r\n    public _pluginData: any = {};\r\n\r\n    private _physicsEngine: Nullable<IPhysicsEngine>;\r\n    //The native cannon/oimo/energy physics body object.\r\n    private _physicsBody: any;\r\n    private _bodyUpdateRequired: boolean = false;\r\n\r\n    private _onBeforePhysicsStepCallbacks = new Array<(impostor: PhysicsImpostor) => void>();\r\n    private _onAfterPhysicsStepCallbacks = new Array<(impostor: PhysicsImpostor) => void>();\r\n    /** @hidden */\r\n    public _onPhysicsCollideCallbacks: Array<{ callback: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor, point: Nullable<Vector3>) => void; otherImpostors: Array<PhysicsImpostor> }> = [];\r\n\r\n    private _deltaPosition: Vector3 = Vector3.Zero();\r\n    private _deltaRotation: Quaternion;\r\n    private _deltaRotationConjugated: Quaternion;\r\n\r\n    /** @hidden */\r\n    public _isFromLine: boolean;\r\n\r\n    //If set, this is this impostor's parent\r\n    private _parent: Nullable<PhysicsImpostor>;\r\n\r\n    private _isDisposed = false;\r\n\r\n    private static _tmpVecs: Vector3[] = ArrayTools.BuildArray(3, Vector3.Zero);\r\n    private static _tmpQuat: Quaternion = Quaternion.Identity();\r\n\r\n    /**\r\n     * Specifies if the physics imposter is disposed\r\n     */\r\n    get isDisposed(): boolean {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    /**\r\n     * Gets the mass of the physics imposter\r\n     */\r\n    get mass(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyMass(this) : 0;\r\n    }\r\n\r\n    set mass(value: number) {\r\n        this.setMass(value);\r\n    }\r\n\r\n    /**\r\n     * Gets the coefficient of friction\r\n     */\r\n    get friction(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyFriction(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coefficient of friction\r\n     */\r\n    set friction(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        this._physicsEngine.getPhysicsPlugin().setBodyFriction(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the coefficient of restitution\r\n     */\r\n    get restitution(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyRestitution(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coefficient of restitution\r\n     */\r\n    set restitution(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        this._physicsEngine.getPhysicsPlugin().setBodyRestitution(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the pressure of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get pressure(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPressure) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyPressure!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the pressure of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set pressure(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPressure) {\r\n            return;\r\n        }\r\n        plugin.setBodyPressure!(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the stiffness of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get stiffness(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyStiffness) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyStiffness!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the stiffness of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set stiffness(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyStiffness) {\r\n            return;\r\n        }\r\n        plugin.setBodyStiffness!(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get velocityIterations(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyVelocityIterations) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyVelocityIterations!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set velocityIterations(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyVelocityIterations) {\r\n            return;\r\n        }\r\n        plugin.setBodyVelocityIterations!(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the positionIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get positionIterations(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyPositionIterations) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyPositionIterations!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the positionIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set positionIterations(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPositionIterations) {\r\n            return;\r\n        }\r\n        plugin.setBodyPositionIterations!(this, value);\r\n    }\r\n\r\n    /**\r\n     * The unique id of the physics imposter\r\n     * set by the physics engine when adding this impostor to the array\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public soft: boolean = false;\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public segments: number = 0;\r\n\r\n    private _joints: Array<{\r\n        joint: PhysicsJoint;\r\n        otherImpostor: PhysicsImpostor;\r\n    }>;\r\n\r\n    /**\r\n     * Initializes the physics imposter\r\n     * @param object The physics-enabled object used as the physics imposter\r\n     * @param type The type of the physics imposter\r\n     * @param _options The options for the physics imposter\r\n     * @param _scene The Babylon scene\r\n     */\r\n    constructor(\r\n        /**\r\n         * The physics-enabled object used as the physics imposter\r\n         */\r\n        public object: IPhysicsEnabledObject,\r\n        /**\r\n         * The type of the physics imposter\r\n         */\r\n        public type: number,\r\n        private _options: PhysicsImpostorParameters = { mass: 0 },\r\n        private _scene?: Scene\r\n    ) {\r\n        //sanity check!\r\n        if (!this.object) {\r\n            Logger.Error(\"No object was provided. A physics object is obligatory\");\r\n            return;\r\n        }\r\n        if (this.object.parent && _options.mass !== 0) {\r\n            Logger.Warn(\"A physics impostor has been created for an object which has a parent. Babylon physics currently works in local space so unexpected issues may occur.\");\r\n        }\r\n\r\n        // Legacy support for old syntax.\r\n        if (!this._scene && object.getScene) {\r\n            this._scene = object.getScene();\r\n        }\r\n\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n\r\n        if (this.type > 100) {\r\n            this.soft = true;\r\n        }\r\n\r\n        this._physicsEngine = this._scene.getPhysicsEngine();\r\n        if (!this._physicsEngine) {\r\n            Logger.Error(\"Physics not enabled. Please use scene.enablePhysics(...) before creating impostors.\");\r\n        } else {\r\n            //set the object's quaternion, if not set\r\n            if (!this.object.rotationQuaternion) {\r\n                if (this.object.rotation) {\r\n                    this.object.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.object.rotation.y, this.object.rotation.x, this.object.rotation.z);\r\n                } else {\r\n                    this.object.rotationQuaternion = new Quaternion();\r\n                }\r\n            }\r\n            //default options params\r\n            this._options.mass = _options.mass === void 0 ? 0 : _options.mass;\r\n            this._options.friction = _options.friction === void 0 ? 0.2 : _options.friction;\r\n            this._options.restitution = _options.restitution === void 0 ? 0.2 : _options.restitution;\r\n            if (this.soft) {\r\n                //softbody mass must be above 0;\r\n                this._options.mass = this._options.mass > 0 ? this._options.mass : 1;\r\n                this._options.pressure = _options.pressure === void 0 ? 200 : _options.pressure;\r\n                this._options.stiffness = _options.stiffness === void 0 ? 1 : _options.stiffness;\r\n                this._options.velocityIterations = _options.velocityIterations === void 0 ? 20 : _options.velocityIterations;\r\n                this._options.positionIterations = _options.positionIterations === void 0 ? 20 : _options.positionIterations;\r\n                this._options.fixedPoints = _options.fixedPoints === void 0 ? 0 : _options.fixedPoints;\r\n                this._options.margin = _options.margin === void 0 ? 0 : _options.margin;\r\n                this._options.damping = _options.damping === void 0 ? 0 : _options.damping;\r\n                this._options.path = _options.path === void 0 ? null : _options.path;\r\n                this._options.shape = _options.shape === void 0 ? null : _options.shape;\r\n            }\r\n            this._joints = [];\r\n            //If the mesh has a parent, don't initialize the physicsBody. Instead wait for the parent to do that.\r\n            if (!this.object.parent || this._options.ignoreParent) {\r\n                this._init();\r\n            } else if (this.object.parent.physicsImpostor) {\r\n                Logger.Warn(\"You must affect impostors to children before affecting impostor to parent.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will completly initialize this impostor.\r\n     * It will create a new body - but only if this mesh has no parent.\r\n     * If it has, this impostor will not be used other than to define the impostor\r\n     * of the child mesh.\r\n     * @hidden\r\n     */\r\n    public _init() {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._physicsEngine.removeImpostor(this);\r\n        this.physicsBody = null;\r\n        this._parent = this._parent || this._getPhysicsParent();\r\n        if (!this._isDisposed && (!this.parent || this._options.ignoreParent)) {\r\n            this._physicsEngine.addImpostor(this);\r\n        }\r\n    }\r\n\r\n    private _getPhysicsParent(): Nullable<PhysicsImpostor> {\r\n        if (this.object.parent instanceof AbstractMesh) {\r\n            var parentMesh: AbstractMesh = <AbstractMesh>this.object.parent;\r\n            return parentMesh.physicsImpostor;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Should a new body be generated.\r\n     * @returns boolean specifying if body initialization is required\r\n     */\r\n    public isBodyInitRequired(): boolean {\r\n        return this._bodyUpdateRequired || (!this._physicsBody && !this._parent);\r\n    }\r\n\r\n    /**\r\n     * Sets the updated scaling\r\n     * @param updated Specifies if the scaling is updated\r\n     */\r\n    public setScalingUpdated() {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Force a regeneration of this or the parent's impostor's body.\r\n     * Use under cautious - This will remove all joints already implemented.\r\n     */\r\n    public forceUpdate() {\r\n        this._init();\r\n        if (this.parent && !this._options.ignoreParent) {\r\n            this.parent.forceUpdate();\r\n        }\r\n    }\r\n\r\n    /*public get mesh(): AbstractMesh {\r\n        return this._mesh;\r\n    }*/\r\n\r\n    /**\r\n     * Gets the body that holds this impostor. Either its own, or its parent.\r\n     */\r\n    public get physicsBody(): any {\r\n        return this._parent && !this._options.ignoreParent ? this._parent.physicsBody : this._physicsBody;\r\n    }\r\n\r\n    /**\r\n     * Get the parent of the physics imposter\r\n     * @returns Physics imposter or null\r\n     */\r\n    public get parent(): Nullable<PhysicsImpostor> {\r\n        return !this._options.ignoreParent && this._parent ? this._parent : null;\r\n    }\r\n\r\n    /**\r\n     * Sets the parent of the physics imposter\r\n     */\r\n    public set parent(value: Nullable<PhysicsImpostor>) {\r\n        this._parent = value;\r\n    }\r\n\r\n    /**\r\n     * Set the physics body. Used mainly by the physics engine/plugin\r\n     */\r\n    public set physicsBody(physicsBody: any) {\r\n        if (this._physicsBody && this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().removePhysicsBody(this);\r\n        }\r\n        this._physicsBody = physicsBody;\r\n        this.resetUpdateFlags();\r\n    }\r\n\r\n    /**\r\n     * Resets the update flags\r\n     */\r\n    public resetUpdateFlags() {\r\n        this._bodyUpdateRequired = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the object extend size\r\n     * @returns the object extend size\r\n     */\r\n    public getObjectExtendSize(): Vector3 {\r\n        if (this.object.getBoundingInfo) {\r\n            let q = this.object.rotationQuaternion;\r\n            const scaling = this.object.scaling.clone();\r\n            //reset rotation\r\n            this.object.rotationQuaternion = PhysicsImpostor.IDENTITY_QUATERNION;\r\n            //calculate the world matrix with no rotation\r\n            const worldMatrix = this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\r\n            if (worldMatrix) {\r\n                worldMatrix.decompose(scaling, undefined, undefined);\r\n            }\r\n            const boundingInfo = this.object.getBoundingInfo();\r\n            // get the global scaling of the object\r\n            const size = boundingInfo.boundingBox.extendSize.scale(2).multiplyInPlace(scaling);\r\n            //bring back the rotation\r\n            this.object.rotationQuaternion = q;\r\n            //calculate the world matrix with the new rotation\r\n            this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\r\n            return size;\r\n        } else {\r\n            return PhysicsImpostor.DEFAULT_OBJECT_SIZE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the object center\r\n     * @returns The object center\r\n     */\r\n    public getObjectCenter(): Vector3 {\r\n        if (this.object.getBoundingInfo) {\r\n            let boundingInfo = this.object.getBoundingInfo();\r\n            return boundingInfo.boundingBox.centerWorld;\r\n        } else {\r\n            return this.object.position;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a specific parameter from the options parameters\r\n     * @param paramName The object parameter name\r\n     * @returns The object parameter\r\n     */\r\n    public getParam(paramName: string): any {\r\n        return (<any>this._options)[paramName];\r\n    }\r\n\r\n    /**\r\n     * Sets a specific parameter in the options given to the physics plugin\r\n     * @param paramName The parameter name\r\n     * @param value The value of the parameter\r\n     */\r\n    public setParam(paramName: string, value: number) {\r\n        (<any>this._options)[paramName] = value;\r\n        this._bodyUpdateRequired = true;\r\n    }\r\n\r\n    /**\r\n     * Specifically change the body's mass option. Won't recreate the physics body object\r\n     * @param mass The mass of the physics imposter\r\n     */\r\n    public setMass(mass: number) {\r\n        if (this.getParam(\"mass\") !== mass) {\r\n            this.setParam(\"mass\", mass);\r\n        }\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setBodyMass(this, mass);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the linear velocity\r\n     * @returns  linear velocity or null\r\n     */\r\n    public getLinearVelocity(): Nullable<Vector3> {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getLinearVelocity(this) : Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the linear velocity\r\n     * @param velocity  linear velocity or null\r\n     */\r\n    public setLinearVelocity(velocity: Nullable<Vector3>) {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setLinearVelocity(this, velocity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the angular velocity\r\n     * @returns angular velocity or null\r\n     */\r\n    public getAngularVelocity(): Nullable<Vector3> {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getAngularVelocity(this) : Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the angular velocity\r\n     * @param velocity The velocity or null\r\n     */\r\n    public setAngularVelocity(velocity: Nullable<Vector3>) {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setAngularVelocity(this, velocity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a function with the physics plugin native code\r\n     * Provide a function the will have two variables - the world object and the physics body object\r\n     * @param func The function to execute with the physics plugin native code\r\n     */\r\n\r\n    public executeNativeFunction(func: (world: any, physicsBody: any) => void) {\r\n        if (this._physicsEngine) {\r\n            func(this._physicsEngine.getPhysicsPlugin().world, this.physicsBody);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a function that will be executed before the physics world is stepping forward\r\n     * @param func The function to execute before the physics world is stepped forward\r\n     */\r\n    public registerBeforePhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        this._onBeforePhysicsStepCallbacks.push(func);\r\n    }\r\n\r\n    /**\r\n     * Unregister a function that will be executed before the physics world is stepping forward\r\n     * @param func The function to execute before the physics world is stepped forward\r\n     */\r\n    public unregisterBeforePhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        var index = this._onBeforePhysicsStepCallbacks.indexOf(func);\r\n\r\n        if (index > -1) {\r\n            this._onBeforePhysicsStepCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a function that will be executed after the physics step\r\n     * @param func The function to execute after physics step\r\n     */\r\n    public registerAfterPhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        this._onAfterPhysicsStepCallbacks.push(func);\r\n    }\r\n\r\n    /**\r\n     * Unregisters a function that will be executed after the physics step\r\n     * @param func The function to execute after physics step\r\n     */\r\n    public unregisterAfterPhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        var index = this._onAfterPhysicsStepCallbacks.indexOf(func);\r\n\r\n        if (index > -1) {\r\n            this._onAfterPhysicsStepCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * register a function that will be executed when this impostor collides against a different body\r\n     * @param collideAgainst Physics imposter, or array of physics imposters to collide against\r\n     * @param func Callback that is executed on collision\r\n     */\r\n    public registerOnPhysicsCollide(collideAgainst: PhysicsImpostor | Array<PhysicsImpostor>, func: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor) => void): void {\r\n        var collidedAgainstList: Array<PhysicsImpostor> = collideAgainst instanceof Array ? <Array<PhysicsImpostor>>collideAgainst : [<PhysicsImpostor>collideAgainst];\r\n        this._onPhysicsCollideCallbacks.push({ callback: func, otherImpostors: collidedAgainstList });\r\n    }\r\n\r\n    /**\r\n     * Unregisters the physics imposter on contact\r\n     * @param collideAgainst The physics object to collide against\r\n     * @param func Callback to execute on collision\r\n     */\r\n    public unregisterOnPhysicsCollide(collideAgainst: PhysicsImpostor | Array<PhysicsImpostor>, func: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor | Array<PhysicsImpostor>) => void): void {\r\n        var collidedAgainstList: Array<PhysicsImpostor> = collideAgainst instanceof Array ? <Array<PhysicsImpostor>>collideAgainst : [<PhysicsImpostor>collideAgainst];\r\n        var index = -1;\r\n        let found = this._onPhysicsCollideCallbacks.some((cbDef, idx) => {\r\n            if (cbDef.callback === func && cbDef.otherImpostors.length === collidedAgainstList.length) {\r\n                // chcek the arrays match\r\n                let sameList = cbDef.otherImpostors.every((impostor) => {\r\n                    return collidedAgainstList.indexOf(impostor) > -1;\r\n                });\r\n                if (sameList) {\r\n                    index = idx;\r\n                }\r\n                return sameList;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        if (found) {\r\n            this._onPhysicsCollideCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    //temp variables for parent rotation calculations\r\n    //private _mats: Array<Matrix> = [new Matrix(), new Matrix()];\r\n    private _tmpQuat: Quaternion = new Quaternion();\r\n    private _tmpQuat2: Quaternion = new Quaternion();\r\n\r\n    /**\r\n     * Get the parent rotation\r\n     * @returns The parent rotation\r\n     */\r\n    public getParentsRotation(): Quaternion {\r\n        let parent = this.object.parent;\r\n        this._tmpQuat.copyFromFloats(0, 0, 0, 1);\r\n        while (parent) {\r\n            if (parent.rotationQuaternion) {\r\n                this._tmpQuat2.copyFrom(parent.rotationQuaternion);\r\n            } else {\r\n                Quaternion.RotationYawPitchRollToRef(parent.rotation.y, parent.rotation.x, parent.rotation.z, this._tmpQuat2);\r\n            }\r\n            this._tmpQuat.multiplyToRef(this._tmpQuat2, this._tmpQuat);\r\n            parent = parent.parent;\r\n        }\r\n        return this._tmpQuat;\r\n    }\r\n\r\n    /**\r\n     * this function is executed by the physics engine.\r\n     */\r\n    public beforeStep = () => {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this.object.translate(this._deltaPosition, -1);\r\n        this._deltaRotationConjugated && this.object.rotationQuaternion && this.object.rotationQuaternion.multiplyToRef(this._deltaRotationConjugated, this.object.rotationQuaternion);\r\n        this.object.computeWorldMatrix(false);\r\n        if (this.object.parent && this.object.rotationQuaternion) {\r\n            this.getParentsRotation();\r\n            this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this._tmpQuat);\r\n        } else {\r\n            this._tmpQuat.copyFrom(this.object.rotationQuaternion || new Quaternion());\r\n        }\r\n        if (!this._options.disableBidirectionalTransformation) {\r\n            this.object.rotationQuaternion && this._physicsEngine.getPhysicsPlugin().setPhysicsBodyTransformation(this, /*bInfo.boundingBox.centerWorld*/ this.object.getAbsolutePosition(), this._tmpQuat);\r\n        }\r\n\r\n        this._onBeforePhysicsStepCallbacks.forEach((func) => {\r\n            func(this);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * this function is executed by the physics engine\r\n     */\r\n    public afterStep = () => {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._onAfterPhysicsStepCallbacks.forEach((func) => {\r\n            func(this);\r\n        });\r\n\r\n        this._physicsEngine.getPhysicsPlugin().setTransformationFromPhysicsBody(this);\r\n        // object has now its world rotation. needs to be converted to local.\r\n        if (this.object.parent && this.object.rotationQuaternion) {\r\n            this.getParentsRotation();\r\n            this._tmpQuat.conjugateInPlace();\r\n            this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this.object.rotationQuaternion);\r\n        }\r\n        // take the position set and make it the absolute position of this object.\r\n        this.object.setAbsolutePosition(this.object.position);\r\n        this._deltaRotation && this.object.rotationQuaternion && this.object.rotationQuaternion.multiplyToRef(this._deltaRotation, this.object.rotationQuaternion);\r\n        this.object.translate(this._deltaPosition, 1);\r\n    };\r\n\r\n    /**\r\n     * Legacy collision detection event support\r\n     */\r\n    public onCollideEvent: Nullable<(collider: PhysicsImpostor, collidedWith: PhysicsImpostor) => void> = null;\r\n\r\n    /**\r\n     * event and body object due to cannon's event-based architecture.\r\n     */\r\n    public onCollide = (e: { body: any; point: Nullable<Vector3> }) => {\r\n        if (!this._onPhysicsCollideCallbacks.length && !this.onCollideEvent) {\r\n            return;\r\n        }\r\n\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        var otherImpostor = this._physicsEngine.getImpostorWithPhysicsBody(e.body);\r\n        if (otherImpostor) {\r\n            // Legacy collision detection event support\r\n            if (this.onCollideEvent) {\r\n                this.onCollideEvent(this, otherImpostor);\r\n            }\r\n            this._onPhysicsCollideCallbacks\r\n                .filter((obj) => {\r\n                    return obj.otherImpostors.indexOf(<PhysicsImpostor>otherImpostor) !== -1;\r\n                })\r\n                .forEach((obj) => {\r\n                    obj.callback(this, <PhysicsImpostor>otherImpostor, e.point);\r\n                });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Apply a force\r\n     * @param force The force to apply\r\n     * @param contactPoint The contact point for the force\r\n     * @returns The physics imposter\r\n     */\r\n    public applyForce(force: Vector3, contactPoint: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().applyForce(this, force, contactPoint);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Apply an impulse\r\n     * @param force The impulse force\r\n     * @param contactPoint The contact point for the impulse force\r\n     * @returns The physics imposter\r\n     */\r\n    public applyImpulse(force: Vector3, contactPoint: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().applyImpulse(this, force, contactPoint);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * A help function to create a joint\r\n     * @param otherImpostor A physics imposter used to create a joint\r\n     * @param jointType The type of joint\r\n     * @param jointData The data for the joint\r\n     * @returns The physics imposter\r\n     */\r\n    public createJoint(otherImpostor: PhysicsImpostor, jointType: number, jointData: PhysicsJointData): PhysicsImpostor {\r\n        var joint = new PhysicsJoint(jointType, jointData);\r\n        this.addJoint(otherImpostor, joint);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a joint to this impostor with a different impostor\r\n     * @param otherImpostor A physics imposter used to add a joint\r\n     * @param joint The joint to add\r\n     * @returns The physics imposter\r\n     */\r\n    public addJoint(otherImpostor: PhysicsImpostor, joint: PhysicsJoint): PhysicsImpostor {\r\n        this._joints.push({\r\n            otherImpostor: otherImpostor,\r\n            joint: joint,\r\n        });\r\n\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.addJoint(this, otherImpostor, joint);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add an anchor to a cloth impostor\r\n     * @param otherImpostor rigid impostor to anchor to\r\n     * @param width ratio across width from 0 to 1\r\n     * @param height ratio up height from 0 to 1\r\n     * @param influence the elasticity between cloth impostor and anchor from 0, very stretchy to 1, little strech\r\n     * @param noCollisionBetweenLinkedBodies when true collisions between cloth impostor and anchor are ignored; default false\r\n     * @returns impostor the soft imposter\r\n     */\r\n    public addAnchor(otherImpostor: PhysicsImpostor, width: number, height: number, influence: number, noCollisionBetweenLinkedBodies: boolean): PhysicsImpostor {\r\n        if (!this._physicsEngine) {\r\n            return this;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.appendAnchor) {\r\n            return this;\r\n        }\r\n        if (this._physicsEngine) {\r\n            plugin.appendAnchor!(this, otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a hook to a rope impostor\r\n     * @param otherImpostor rigid impostor to anchor to\r\n     * @param length ratio across rope from 0 to 1\r\n     * @param influence the elasticity between rope impostor and anchor from 0, very stretchy to 1, little strech\r\n     * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\r\n     * @returns impostor the rope imposter\r\n     */\r\n    public addHook(otherImpostor: PhysicsImpostor, length: number, influence: number, noCollisionBetweenLinkedBodies: boolean): PhysicsImpostor {\r\n        if (!this._physicsEngine) {\r\n            return this;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.appendAnchor) {\r\n            return this;\r\n        }\r\n        if (this._physicsEngine) {\r\n            plugin.appendHook!(this, otherImpostor, length, influence, noCollisionBetweenLinkedBodies);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Will keep this body still, in a sleep mode.\r\n     * @returns the physics imposter\r\n     */\r\n    public sleep(): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().sleepBody(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Wake the body up.\r\n     * @returns The physics imposter\r\n     */\r\n    public wakeUp(): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().wakeUpBody(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clones the physics imposter\r\n     * @param newObject The physics imposter clones to this physics-enabled object\r\n     * @returns A nullable physics imposter\r\n     */\r\n    public clone(newObject: IPhysicsEnabledObject): Nullable<PhysicsImpostor> {\r\n        if (!newObject) {\r\n            return null;\r\n        }\r\n        return new PhysicsImpostor(newObject, this.type, this._options, this._scene);\r\n    }\r\n\r\n    /**\r\n     * Disposes the physics imposter\r\n     */\r\n    public dispose(/*disposeChildren: boolean = true*/) {\r\n        //no dispose if no physics engine is available.\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._joints.forEach((j) => {\r\n            if (this._physicsEngine) {\r\n                this._physicsEngine.removeJoint(this, j.otherImpostor, j.joint);\r\n            }\r\n        });\r\n        //dispose the physics body\r\n        this._physicsEngine.removeImpostor(this);\r\n        if (this.parent) {\r\n            this.parent.forceUpdate();\r\n        } else {\r\n            /*this._object.getChildMeshes().forEach(function(mesh) {\r\n                if (mesh.physicsImpostor) {\r\n                    if (disposeChildren) {\r\n                        mesh.physicsImpostor.dispose();\r\n                        mesh.physicsImpostor = null;\r\n                    }\r\n                }\r\n            })*/\r\n        }\r\n\r\n        this._isDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the delta position\r\n     * @param position The delta position amount\r\n     */\r\n    public setDeltaPosition(position: Vector3) {\r\n        this._deltaPosition.copyFrom(position);\r\n    }\r\n\r\n    /**\r\n     * Sets the delta rotation\r\n     * @param rotation The delta rotation amount\r\n     */\r\n    public setDeltaRotation(rotation: Quaternion) {\r\n        if (!this._deltaRotation) {\r\n            this._deltaRotation = new Quaternion();\r\n        }\r\n        this._deltaRotation.copyFrom(rotation);\r\n        this._deltaRotationConjugated = this._deltaRotation.conjugate();\r\n    }\r\n\r\n    /**\r\n     * Gets the box size of the physics imposter and stores the result in the input parameter\r\n     * @param result Stores the box size\r\n     * @returns The physics imposter\r\n     */\r\n    public getBoxSizeToRef(result: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().getBoxSizeToRef(this, result);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the radius of the physics imposter\r\n     * @returns Radius of the physics imposter\r\n     */\r\n    public getRadius(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getRadius(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sync a bone with this impostor\r\n     * @param bone The bone to sync to the impostor.\r\n     * @param boneMesh The mesh that the bone is influencing.\r\n     * @param jointPivot The pivot of the joint / bone in local space.\r\n     * @param distToJoint Optional distance from the impostor to the joint.\r\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n     */\r\n    public syncBoneWithImpostor(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint?: number, adjustRotation?: Quaternion) {\r\n        var tempVec = PhysicsImpostor._tmpVecs[0];\r\n        var mesh = <AbstractMesh>this.object;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            if (adjustRotation) {\r\n                var tempQuat = PhysicsImpostor._tmpQuat;\r\n                mesh.rotationQuaternion.multiplyToRef(adjustRotation, tempQuat);\r\n                bone.setRotationQuaternion(tempQuat, Space.WORLD, boneMesh);\r\n            } else {\r\n                bone.setRotationQuaternion(mesh.rotationQuaternion, Space.WORLD, boneMesh);\r\n            }\r\n        }\r\n\r\n        tempVec.x = 0;\r\n        tempVec.y = 0;\r\n        tempVec.z = 0;\r\n\r\n        if (jointPivot) {\r\n            tempVec.x = jointPivot.x;\r\n            tempVec.y = jointPivot.y;\r\n            tempVec.z = jointPivot.z;\r\n\r\n            bone.getDirectionToRef(tempVec, boneMesh, tempVec);\r\n\r\n            if (distToJoint === undefined || distToJoint === null) {\r\n                distToJoint = jointPivot.length();\r\n            }\r\n\r\n            tempVec.x *= distToJoint;\r\n            tempVec.y *= distToJoint;\r\n            tempVec.z *= distToJoint;\r\n        }\r\n\r\n        if (bone.getParent()) {\r\n            tempVec.addInPlace(mesh.getAbsolutePosition());\r\n            bone.setAbsolutePosition(tempVec, boneMesh);\r\n        } else {\r\n            boneMesh.setAbsolutePosition(mesh.getAbsolutePosition());\r\n            boneMesh.position.x -= tempVec.x;\r\n            boneMesh.position.y -= tempVec.y;\r\n            boneMesh.position.z -= tempVec.z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sync impostor to a bone\r\n     * @param bone The bone that the impostor will be synced to.\r\n     * @param boneMesh The mesh that the bone is influencing.\r\n     * @param jointPivot The pivot of the joint / bone in local space.\r\n     * @param distToJoint Optional distance from the impostor to the joint.\r\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n     * @param boneAxis Optional vector3 axis the bone is aligned with\r\n     */\r\n    public syncImpostorWithBone(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint?: number, adjustRotation?: Quaternion, boneAxis?: Vector3) {\r\n        var mesh = <AbstractMesh>this.object;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            if (adjustRotation) {\r\n                var tempQuat = PhysicsImpostor._tmpQuat;\r\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, tempQuat);\r\n                tempQuat.multiplyToRef(adjustRotation, mesh.rotationQuaternion);\r\n            } else {\r\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, mesh.rotationQuaternion);\r\n            }\r\n        }\r\n\r\n        var pos = PhysicsImpostor._tmpVecs[0];\r\n        var boneDir = PhysicsImpostor._tmpVecs[1];\r\n\r\n        if (!boneAxis) {\r\n            boneAxis = PhysicsImpostor._tmpVecs[2];\r\n            boneAxis.x = 0;\r\n            boneAxis.y = 1;\r\n            boneAxis.z = 0;\r\n        }\r\n\r\n        bone.getDirectionToRef(boneAxis, boneMesh, boneDir);\r\n        bone.getAbsolutePositionToRef(boneMesh, pos);\r\n\r\n        if ((distToJoint === undefined || distToJoint === null) && jointPivot) {\r\n            distToJoint = jointPivot.length();\r\n        }\r\n\r\n        if (distToJoint !== undefined && distToJoint !== null) {\r\n            pos.x += boneDir.x * distToJoint;\r\n            pos.y += boneDir.y * distToJoint;\r\n            pos.z += boneDir.z * distToJoint;\r\n        }\r\n\r\n        mesh.setAbsolutePosition(pos);\r\n    }\r\n\r\n    //Impostor types\r\n    /**\r\n     * No-Imposter type\r\n     */\r\n    public static NoImpostor = 0;\r\n    /**\r\n     * Sphere-Imposter type\r\n     */\r\n    public static SphereImpostor = 1;\r\n    /**\r\n     * Box-Imposter type\r\n     */\r\n    public static BoxImpostor = 2;\r\n    /**\r\n     * Plane-Imposter type\r\n     */\r\n    public static PlaneImpostor = 3;\r\n    /**\r\n     * Mesh-imposter type\r\n     */\r\n    public static MeshImpostor = 4;\r\n    /**\r\n     * Capsule-Impostor type (Ammo.js plugin only)\r\n     */\r\n    public static CapsuleImpostor = 6;\r\n    /**\r\n     * Cylinder-Imposter type\r\n     */\r\n    public static CylinderImpostor = 7;\r\n    /**\r\n     * Particle-Imposter type\r\n     */\r\n    public static ParticleImpostor = 8;\r\n    /**\r\n     * Heightmap-Imposter type\r\n     */\r\n    public static HeightmapImpostor = 9;\r\n    /**\r\n     * ConvexHull-Impostor type (Ammo.js plugin only)\r\n     */\r\n    public static ConvexHullImpostor = 10;\r\n    /**\r\n     * Custom-Imposter type (Ammo.js plugin only)\r\n     */\r\n    public static CustomImpostor = 100;\r\n    /**\r\n     * Rope-Imposter type\r\n     */\r\n    public static RopeImpostor = 101;\r\n    /**\r\n     * Cloth-Imposter type\r\n     */\r\n    public static ClothImpostor = 102;\r\n    /**\r\n     * Softbody-Imposter type\r\n     */\r\n    public static SoftbodyImpostor = 103;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}