{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Tools } from '../../Misc/tools';\n/**\r\n * Listen to keyboard events to control the camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FlyCameraKeyboardInput =\n/** @class */\nfunction () {\n  function FlyCameraKeyboardInput() {\n    /**\r\n     * The list of keyboard keys used to control the forward move of the camera.\r\n     */\n    this.keysForward = [87];\n    /**\r\n     * The list of keyboard keys used to control the backward move of the camera.\r\n     */\n\n    this.keysBackward = [83];\n    /**\r\n     * The list of keyboard keys used to control the forward move of the camera.\r\n     */\n\n    this.keysUp = [69];\n    /**\r\n     * The list of keyboard keys used to control the backward move of the camera.\r\n     */\n\n    this.keysDown = [81];\n    /**\r\n     * The list of keyboard keys used to control the right strafe move of the camera.\r\n     */\n\n    this.keysRight = [68];\n    /**\r\n     * The list of keyboard keys used to control the left strafe move of the camera.\r\n     */\n\n    this.keysLeft = [65];\n    this._keys = new Array();\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  FlyCameraKeyboardInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this;\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n      _this._keys = [];\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n      var evt = info.event;\n\n      if (info.type === KeyboardEventTypes.KEYDOWN) {\n        if (_this.keysForward.indexOf(evt.keyCode) !== -1 || _this.keysBackward.indexOf(evt.keyCode) !== -1 || _this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1) {\n          var index = _this._keys.indexOf(evt.keyCode);\n\n          if (index === -1) {\n            _this._keys.push(evt.keyCode);\n          }\n\n          if (!noPreventDefault) {\n            evt.preventDefault();\n          }\n        }\n      } else {\n        if (_this.keysForward.indexOf(evt.keyCode) !== -1 || _this.keysBackward.indexOf(evt.keyCode) !== -1 || _this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1) {\n          var index = _this._keys.indexOf(evt.keyCode);\n\n          if (index >= 0) {\n            _this._keys.splice(index, 1);\n          }\n\n          if (!noPreventDefault) {\n            evt.preventDefault();\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FlyCameraKeyboardInput.prototype.detachControl = function (ignored) {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n\n    this._keys = [];\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  FlyCameraKeyboardInput.prototype.getClassName = function () {\n    return \"FlyCameraKeyboardInput\";\n  };\n  /** @hidden */\n\n\n  FlyCameraKeyboardInput.prototype._onLostFocus = function (e) {\n    this._keys = [];\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FlyCameraKeyboardInput.prototype.getSimpleName = function () {\n    return \"keyboard\";\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  FlyCameraKeyboardInput.prototype.checkInputs = function () {\n    if (this._onKeyboardObserver) {\n      var camera = this.camera; // Keyboard\n\n      for (var index = 0; index < this._keys.length; index++) {\n        var keyCode = this._keys[index];\n\n        var speed = camera._computeLocalCameraSpeed();\n\n        if (this.keysForward.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, speed);\n        } else if (this.keysBackward.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, -speed);\n        } else if (this.keysUp.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, speed, 0);\n        } else if (this.keysDown.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, -speed, 0);\n        } else if (this.keysRight.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(speed, 0, 0);\n        } else if (this.keysLeft.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(-speed, 0, 0);\n        }\n\n        if (camera.getScene().useRightHandedSystem) {\n          camera._localDirection.z *= -1;\n        }\n\n        camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\n        Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\n        camera.cameraDirection.addInPlace(camera._transformedDirection);\n      }\n    }\n  };\n\n  __decorate([serialize()], FlyCameraKeyboardInput.prototype, \"keysForward\", void 0);\n\n  __decorate([serialize()], FlyCameraKeyboardInput.prototype, \"keysBackward\", void 0);\n\n  __decorate([serialize()], FlyCameraKeyboardInput.prototype, \"keysUp\", void 0);\n\n  __decorate([serialize()], FlyCameraKeyboardInput.prototype, \"keysDown\", void 0);\n\n  __decorate([serialize()], FlyCameraKeyboardInput.prototype, \"keysRight\", void 0);\n\n  __decorate([serialize()], FlyCameraKeyboardInput.prototype, \"keysLeft\", void 0);\n\n  return FlyCameraKeyboardInput;\n}();\n\nexport { FlyCameraKeyboardInput };\nCameraInputTypes[\"FlyCameraKeyboardInput\"] = FlyCameraKeyboardInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/flyCameraKeyboardInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { Observer } from \"../../Misc/observable\";\r\nimport { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { FlyCamera } from \"../../Cameras/flyCamera\";\r\nimport { Engine } from \"../../Engines/engine\";\r\nimport { KeyboardInfo, KeyboardEventTypes } from \"../../Events/keyboardEvents\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Tools } from '../../Misc/tools';\r\n\r\n/**\r\n * Listen to keyboard events to control the camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FlyCameraKeyboardInput implements ICameraInput<FlyCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FlyCamera;\r\n\r\n    /**\r\n     * The list of keyboard keys used to control the forward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysForward = [87];\r\n\r\n    /**\r\n     * The list of keyboard keys used to control the backward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysBackward = [83];\r\n\r\n    /**\r\n     * The list of keyboard keys used to control the forward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysUp = [69];\r\n\r\n    /**\r\n     * The list of keyboard keys used to control the backward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysDown = [81];\r\n\r\n    /**\r\n     * The list of keyboard keys used to control the right strafe move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRight = [68];\r\n\r\n    /**\r\n     * The list of keyboard keys used to control the left strafe move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysLeft = [65];\r\n\r\n    private _keys = new Array<number>();\r\n    private _onCanvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\r\n    private _engine: Engine;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        if (this._onCanvasBlurObserver) {\r\n            return;\r\n        }\r\n\r\n        this._scene = this.camera.getScene();\r\n        this._engine = this._scene.getEngine();\r\n\r\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\r\n            this._keys = [];\r\n        });\r\n\r\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\r\n            let evt = info.event;\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                if (this.keysForward.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysBackward.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysRight.indexOf(evt.keyCode) !== -1) {\r\n                    var index = this._keys.indexOf(evt.keyCode);\r\n\r\n                    if (index === -1) {\r\n                        this._keys.push(evt.keyCode);\r\n                    }\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.keysForward.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysBackward.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysRight.indexOf(evt.keyCode) !== -1) {\r\n                    var index = this._keys.indexOf(evt.keyCode);\r\n\r\n                    if (index >= 0) {\r\n                        this._keys.splice(index, 1);\r\n                    }\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        if (this._scene) {\r\n            if (this._onKeyboardObserver) {\r\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\r\n            }\r\n\r\n            if (this._onCanvasBlurObserver) {\r\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\r\n            }\r\n            this._onKeyboardObserver = null;\r\n            this._onCanvasBlurObserver = null;\r\n        }\r\n        this._keys = [];\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FlyCameraKeyboardInput\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onLostFocus(e: FocusEvent): void {\r\n        this._keys = [];\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"keyboard\";\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._onKeyboardObserver) {\r\n            var camera = this.camera;\r\n            // Keyboard\r\n            for (var index = 0; index < this._keys.length; index++) {\r\n                var keyCode = this._keys[index];\r\n                var speed = camera._computeLocalCameraSpeed();\r\n\r\n                if (this.keysForward.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, speed);\r\n                } else\r\n                    if (this.keysBackward.indexOf(keyCode) !== -1) {\r\n                        camera._localDirection.copyFromFloats(0, 0, -speed);\r\n                    } else\r\n                        if (this.keysUp.indexOf(keyCode) !== -1) {\r\n                            camera._localDirection.copyFromFloats(0, speed, 0);\r\n                        } else\r\n                            if (this.keysDown.indexOf(keyCode) !== -1) {\r\n                                camera._localDirection.copyFromFloats(0, -speed, 0);\r\n                            } else\r\n                                if (this.keysRight.indexOf(keyCode) !== -1) {\r\n                                    camera._localDirection.copyFromFloats(speed, 0, 0);\r\n                                } else\r\n                                    if (this.keysLeft.indexOf(keyCode) !== -1) {\r\n                                        camera._localDirection.copyFromFloats(-speed, 0, 0);\r\n                                    }\r\n\r\n                if (camera.getScene().useRightHandedSystem) {\r\n                    camera._localDirection.z *= -1;\r\n                }\r\n\r\n                camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\r\n                Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\r\n                camera.cameraDirection.addInPlace(camera._transformedDirection);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FlyCameraKeyboardInput\"] = FlyCameraKeyboardInput;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}