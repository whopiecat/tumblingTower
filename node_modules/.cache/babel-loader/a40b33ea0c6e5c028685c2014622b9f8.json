{"ast":null,"code":"import { Logger } from \"../Misc/logger\";\n/**\r\n * Based on jsTGALoader - Javascript loader for TGA file\r\n * By Vincent Thibault\r\n * @see http://blog.robrowser.com/javascript-tga-loader.html\r\n */\n\nvar TGATools =\n/** @class */\nfunction () {\n  function TGATools() {}\n  /**\r\n   * Gets the header of a TGA file\r\n   * @param data defines the TGA data\r\n   * @returns the header\r\n   */\n\n\n  TGATools.GetTGAHeader = function (data) {\n    var offset = 0;\n    var header = {\n      id_length: data[offset++],\n      colormap_type: data[offset++],\n      image_type: data[offset++],\n      colormap_index: data[offset++] | data[offset++] << 8,\n      colormap_length: data[offset++] | data[offset++] << 8,\n      colormap_size: data[offset++],\n      origin: [data[offset++] | data[offset++] << 8, data[offset++] | data[offset++] << 8],\n      width: data[offset++] | data[offset++] << 8,\n      height: data[offset++] | data[offset++] << 8,\n      pixel_size: data[offset++],\n      flags: data[offset++]\n    };\n    return header;\n  };\n  /**\r\n   * Uploads TGA content to a Babylon Texture\r\n   * @hidden\r\n   */\n\n\n  TGATools.UploadContent = function (texture, data) {\n    // Not enough data to contain header ?\n    if (data.length < 19) {\n      Logger.Error(\"Unable to load TGA file - Not enough data to contain header\");\n      return;\n    } // Read Header\n\n\n    var offset = 18;\n    var header = TGATools.GetTGAHeader(data); // Assume it's a valid Targa file.\n\n    if (header.id_length + offset > data.length) {\n      Logger.Error(\"Unable to load TGA file - Not enough data\");\n      return;\n    } // Skip not needed data\n\n\n    offset += header.id_length;\n    var use_rle = false;\n    var use_pal = false;\n    var use_grey = false; // Get some informations.\n\n    switch (header.image_type) {\n      case TGATools._TYPE_RLE_INDEXED:\n        use_rle = true;\n\n      case TGATools._TYPE_INDEXED:\n        use_pal = true;\n        break;\n\n      case TGATools._TYPE_RLE_RGB:\n        use_rle = true;\n\n      case TGATools._TYPE_RGB:\n        // use_rgb = true;\n        break;\n\n      case TGATools._TYPE_RLE_GREY:\n        use_rle = true;\n\n      case TGATools._TYPE_GREY:\n        use_grey = true;\n        break;\n    }\n\n    var pixel_data; // var numAlphaBits = header.flags & 0xf;\n\n    var pixel_size = header.pixel_size >> 3;\n    var pixel_total = header.width * header.height * pixel_size; // Read palettes\n\n    var palettes;\n\n    if (use_pal) {\n      palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n    } // Read LRE\n\n\n    if (use_rle) {\n      pixel_data = new Uint8Array(pixel_total);\n      var c, count, i;\n      var localOffset = 0;\n      var pixels = new Uint8Array(pixel_size);\n\n      while (offset < pixel_total && localOffset < pixel_total) {\n        c = data[offset++];\n        count = (c & 0x7f) + 1; // RLE pixels\n\n        if (c & 0x80) {\n          // Bind pixel tmp array\n          for (i = 0; i < pixel_size; ++i) {\n            pixels[i] = data[offset++];\n          } // Copy pixel array\n\n\n          for (i = 0; i < count; ++i) {\n            pixel_data.set(pixels, localOffset + i * pixel_size);\n          }\n\n          localOffset += pixel_size * count;\n        } // Raw pixels\n        else {\n            count *= pixel_size;\n\n            for (i = 0; i < count; ++i) {\n              pixel_data[localOffset + i] = data[offset++];\n            }\n\n            localOffset += count;\n          }\n      }\n    } // RAW Pixels\n    else {\n        pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n      } // Load to texture\n\n\n    var x_start, y_start, x_step, y_step, y_end, x_end;\n\n    switch ((header.flags & TGATools._ORIGIN_MASK) >> TGATools._ORIGIN_SHIFT) {\n      default:\n      case TGATools._ORIGIN_UL:\n        x_start = 0;\n        x_step = 1;\n        x_end = header.width;\n        y_start = 0;\n        y_step = 1;\n        y_end = header.height;\n        break;\n\n      case TGATools._ORIGIN_BL:\n        x_start = 0;\n        x_step = 1;\n        x_end = header.width;\n        y_start = header.height - 1;\n        y_step = -1;\n        y_end = -1;\n        break;\n\n      case TGATools._ORIGIN_UR:\n        x_start = header.width - 1;\n        x_step = -1;\n        x_end = -1;\n        y_start = 0;\n        y_step = 1;\n        y_end = header.height;\n        break;\n\n      case TGATools._ORIGIN_BR:\n        x_start = header.width - 1;\n        x_step = -1;\n        x_end = -1;\n        y_start = header.height - 1;\n        y_step = -1;\n        y_end = -1;\n        break;\n    } // Load the specify method\n\n\n    var func = '_getImageData' + (use_grey ? 'Grey' : '') + header.pixel_size + 'bits';\n    var imageData = TGATools[func](header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end);\n    var engine = texture.getEngine();\n\n    engine._uploadDataToTextureDirectly(texture, imageData);\n  };\n  /** @hidden */\n\n\n  TGATools._getImageData8bits = function (header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n    var image = pixel_data,\n        colormap = palettes;\n    var width = header.width,\n        height = header.height;\n    var color,\n        i = 0,\n        x,\n        y;\n    var imageData = new Uint8Array(width * height * 4);\n\n    for (y = y_start; y !== y_end; y += y_step) {\n      for (x = x_start; x !== x_end; x += x_step, i++) {\n        color = image[i];\n        imageData[(x + width * y) * 4 + 3] = 255;\n        imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n        imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n        imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n      }\n    }\n\n    return imageData;\n  };\n  /** @hidden */\n\n\n  TGATools._getImageData16bits = function (header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n    var image = pixel_data;\n    var width = header.width,\n        height = header.height;\n    var color,\n        i = 0,\n        x,\n        y;\n    var imageData = new Uint8Array(width * height * 4);\n\n    for (y = y_start; y !== y_end; y += y_step) {\n      for (x = x_start; x !== x_end; x += x_step, i += 2) {\n        color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\n\n        var r = ((color & 0x7C00) >> 10) * 255 / 0x1F | 0;\n        var g = ((color & 0x03E0) >> 5) * 255 / 0x1F | 0;\n        var b = (color & 0x001F) * 255 / 0x1F | 0;\n        imageData[(x + width * y) * 4 + 0] = r;\n        imageData[(x + width * y) * 4 + 1] = g;\n        imageData[(x + width * y) * 4 + 2] = b;\n        imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\n      }\n    }\n\n    return imageData;\n  };\n  /** @hidden */\n\n\n  TGATools._getImageData24bits = function (header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n    var image = pixel_data;\n    var width = header.width,\n        height = header.height;\n    var i = 0,\n        x,\n        y;\n    var imageData = new Uint8Array(width * height * 4);\n\n    for (y = y_start; y !== y_end; y += y_step) {\n      for (x = x_start; x !== x_end; x += x_step, i += 3) {\n        imageData[(x + width * y) * 4 + 3] = 255;\n        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n        imageData[(x + width * y) * 4 + 1] = image[i + 1];\n        imageData[(x + width * y) * 4 + 0] = image[i + 2];\n      }\n    }\n\n    return imageData;\n  };\n  /** @hidden */\n\n\n  TGATools._getImageData32bits = function (header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n    var image = pixel_data;\n    var width = header.width,\n        height = header.height;\n    var i = 0,\n        x,\n        y;\n    var imageData = new Uint8Array(width * height * 4);\n\n    for (y = y_start; y !== y_end; y += y_step) {\n      for (x = x_start; x !== x_end; x += x_step, i += 4) {\n        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n        imageData[(x + width * y) * 4 + 1] = image[i + 1];\n        imageData[(x + width * y) * 4 + 0] = image[i + 2];\n        imageData[(x + width * y) * 4 + 3] = image[i + 3];\n      }\n    }\n\n    return imageData;\n  };\n  /** @hidden */\n\n\n  TGATools._getImageDataGrey8bits = function (header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n    var image = pixel_data;\n    var width = header.width,\n        height = header.height;\n    var color,\n        i = 0,\n        x,\n        y;\n    var imageData = new Uint8Array(width * height * 4);\n\n    for (y = y_start; y !== y_end; y += y_step) {\n      for (x = x_start; x !== x_end; x += x_step, i++) {\n        color = image[i];\n        imageData[(x + width * y) * 4 + 0] = color;\n        imageData[(x + width * y) * 4 + 1] = color;\n        imageData[(x + width * y) * 4 + 2] = color;\n        imageData[(x + width * y) * 4 + 3] = 255;\n      }\n    }\n\n    return imageData;\n  };\n  /** @hidden */\n\n\n  TGATools._getImageDataGrey16bits = function (header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n    var image = pixel_data;\n    var width = header.width,\n        height = header.height;\n    var i = 0,\n        x,\n        y;\n    var imageData = new Uint8Array(width * height * 4);\n\n    for (y = y_start; y !== y_end; y += y_step) {\n      for (x = x_start; x !== x_end; x += x_step, i += 2) {\n        imageData[(x + width * y) * 4 + 0] = image[i + 0];\n        imageData[(x + width * y) * 4 + 1] = image[i + 0];\n        imageData[(x + width * y) * 4 + 2] = image[i + 0];\n        imageData[(x + width * y) * 4 + 3] = image[i + 1];\n      }\n    }\n\n    return imageData;\n  }; //private static _TYPE_NO_DATA = 0;\n\n\n  TGATools._TYPE_INDEXED = 1;\n  TGATools._TYPE_RGB = 2;\n  TGATools._TYPE_GREY = 3;\n  TGATools._TYPE_RLE_INDEXED = 9;\n  TGATools._TYPE_RLE_RGB = 10;\n  TGATools._TYPE_RLE_GREY = 11;\n  TGATools._ORIGIN_MASK = 0x30;\n  TGATools._ORIGIN_SHIFT = 0x04;\n  TGATools._ORIGIN_BL = 0x00;\n  TGATools._ORIGIN_BR = 0x01;\n  TGATools._ORIGIN_UL = 0x02;\n  TGATools._ORIGIN_UR = 0x03;\n  return TGATools;\n}();\n\nexport { TGATools };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/tga.ts"],"names":[],"mappings":"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","sourcesContent":["import { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\n/**\r\n * Based on jsTGALoader - Javascript loader for TGA file\r\n * By Vincent Thibault\r\n * @see http://blog.robrowser.com/javascript-tga-loader.html\r\n */\r\nexport class TGATools {\r\n\r\n    //private static _TYPE_NO_DATA = 0;\r\n    private static _TYPE_INDEXED = 1;\r\n    private static _TYPE_RGB = 2;\r\n    private static _TYPE_GREY = 3;\r\n    private static _TYPE_RLE_INDEXED = 9;\r\n    private static _TYPE_RLE_RGB = 10;\r\n    private static _TYPE_RLE_GREY = 11;\r\n    private static _ORIGIN_MASK = 0x30;\r\n    private static _ORIGIN_SHIFT = 0x04;\r\n    private static _ORIGIN_BL = 0x00;\r\n    private static _ORIGIN_BR = 0x01;\r\n    private static _ORIGIN_UL = 0x02;\r\n    private static _ORIGIN_UR = 0x03;\r\n\r\n    /**\r\n     * Gets the header of a TGA file\r\n     * @param data defines the TGA data\r\n     * @returns the header\r\n     */\r\n    public static GetTGAHeader(data: Uint8Array): any {\r\n        var offset = 0;\r\n\r\n        var header = {\r\n            id_length: data[offset++],\r\n            colormap_type: data[offset++],\r\n            image_type: data[offset++],\r\n            colormap_index: data[offset++] | data[offset++] << 8,\r\n            colormap_length: data[offset++] | data[offset++] << 8,\r\n            colormap_size: data[offset++],\r\n            origin: [\r\n                data[offset++] | data[offset++] << 8,\r\n                data[offset++] | data[offset++] << 8\r\n            ],\r\n            width: data[offset++] | data[offset++] << 8,\r\n            height: data[offset++] | data[offset++] << 8,\r\n            pixel_size: data[offset++],\r\n            flags: data[offset++]\r\n        };\r\n\r\n        return header;\r\n    }\r\n\r\n    /**\r\n     * Uploads TGA content to a Babylon Texture\r\n     * @hidden\r\n     */\r\n    public static UploadContent(texture: InternalTexture, data: Uint8Array): void {\r\n        // Not enough data to contain header ?\r\n        if (data.length < 19) {\r\n            Logger.Error(\"Unable to load TGA file - Not enough data to contain header\");\r\n            return;\r\n        }\r\n\r\n        // Read Header\r\n        var offset = 18;\r\n        var header = TGATools.GetTGAHeader(data);\r\n\r\n        // Assume it's a valid Targa file.\r\n        if (header.id_length + offset > data.length) {\r\n            Logger.Error(\"Unable to load TGA file - Not enough data\");\r\n            return;\r\n        }\r\n\r\n        // Skip not needed data\r\n        offset += header.id_length;\r\n\r\n        var use_rle = false;\r\n        var use_pal = false;\r\n        var use_grey = false;\r\n\r\n        // Get some informations.\r\n        switch (header.image_type) {\r\n            case TGATools._TYPE_RLE_INDEXED:\r\n                use_rle = true;\r\n            case TGATools._TYPE_INDEXED:\r\n                use_pal = true;\r\n                break;\r\n\r\n            case TGATools._TYPE_RLE_RGB:\r\n                use_rle = true;\r\n            case TGATools._TYPE_RGB:\r\n                // use_rgb = true;\r\n                break;\r\n\r\n            case TGATools._TYPE_RLE_GREY:\r\n                use_rle = true;\r\n            case TGATools._TYPE_GREY:\r\n                use_grey = true;\r\n                break;\r\n        }\r\n\r\n        var pixel_data;\r\n\r\n        // var numAlphaBits = header.flags & 0xf;\r\n        var pixel_size = header.pixel_size >> 3;\r\n        var pixel_total = header.width * header.height * pixel_size;\r\n\r\n        // Read palettes\r\n        var palettes;\r\n\r\n        if (use_pal) {\r\n            palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\r\n        }\r\n\r\n        // Read LRE\r\n        if (use_rle) {\r\n            pixel_data = new Uint8Array(pixel_total);\r\n\r\n            var c, count, i;\r\n            var localOffset = 0;\r\n            var pixels = new Uint8Array(pixel_size);\r\n\r\n            while (offset < pixel_total && localOffset < pixel_total) {\r\n                c = data[offset++];\r\n                count = (c & 0x7f) + 1;\r\n\r\n                // RLE pixels\r\n                if (c & 0x80) {\r\n                    // Bind pixel tmp array\r\n                    for (i = 0; i < pixel_size; ++i) {\r\n                        pixels[i] = data[offset++];\r\n                    }\r\n\r\n                    // Copy pixel array\r\n                    for (i = 0; i < count; ++i) {\r\n                        pixel_data.set(pixels, localOffset + i * pixel_size);\r\n                    }\r\n\r\n                    localOffset += pixel_size * count;\r\n                }\r\n                // Raw pixels\r\n                else {\r\n                    count *= pixel_size;\r\n                    for (i = 0; i < count; ++i) {\r\n                        pixel_data[localOffset + i] = data[offset++];\r\n                    }\r\n                    localOffset += count;\r\n                }\r\n            }\r\n        }\r\n        // RAW Pixels\r\n        else {\r\n            pixel_data = data.subarray(\r\n                offset,\r\n                offset += (use_pal ? header.width * header.height : pixel_total)\r\n            );\r\n        }\r\n\r\n        // Load to texture\r\n        var x_start, y_start, x_step, y_step, y_end, x_end;\r\n\r\n        switch ((header.flags & TGATools._ORIGIN_MASK) >> TGATools._ORIGIN_SHIFT) {\r\n            default:\r\n            case TGATools._ORIGIN_UL:\r\n                x_start = 0;\r\n                x_step = 1;\r\n                x_end = header.width;\r\n                y_start = 0;\r\n                y_step = 1;\r\n                y_end = header.height;\r\n                break;\r\n\r\n            case TGATools._ORIGIN_BL:\r\n                x_start = 0;\r\n                x_step = 1;\r\n                x_end = header.width;\r\n                y_start = header.height - 1;\r\n                y_step = -1;\r\n                y_end = -1;\r\n                break;\r\n\r\n            case TGATools._ORIGIN_UR:\r\n                x_start = header.width - 1;\r\n                x_step = -1;\r\n                x_end = -1;\r\n                y_start = 0;\r\n                y_step = 1;\r\n                y_end = header.height;\r\n                break;\r\n\r\n            case TGATools._ORIGIN_BR:\r\n                x_start = header.width - 1;\r\n                x_step = -1;\r\n                x_end = -1;\r\n                y_start = header.height - 1;\r\n                y_step = -1;\r\n                y_end = -1;\r\n                break;\r\n        }\r\n\r\n        // Load the specify method\r\n        var func = '_getImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\r\n        var imageData = (<any>TGATools)[func](header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end);\r\n\r\n        const engine = texture.getEngine();\r\n        engine._uploadDataToTextureDirectly(texture, imageData);\r\n    }\r\n\r\n    /** @hidden */\r\n    static _getImageData8bits(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_end: number, x_start: number, x_step: number, x_end: number): Uint8Array {\r\n        var image = pixel_data, colormap = palettes;\r\n        var width = header.width, height = header.height;\r\n        var color, i = 0, x, y;\r\n\r\n        var imageData = new Uint8Array(width * height * 4);\r\n\r\n        for (y = y_start; y !== y_end; y += y_step) {\r\n            for (x = x_start; x !== x_end; x += x_step, i++) {\r\n                color = image[i];\r\n                imageData[(x + width * y) * 4 + 3] = 255;\r\n                imageData[(x + width * y) * 4 + 2] = colormap[(color * 3) + 0];\r\n                imageData[(x + width * y) * 4 + 1] = colormap[(color * 3) + 1];\r\n                imageData[(x + width * y) * 4 + 0] = colormap[(color * 3) + 2];\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n    /** @hidden */\r\n    static _getImageData16bits(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_end: number, x_start: number, x_step: number, x_end: number): Uint8Array {\r\n        var image = pixel_data;\r\n        var width = header.width, height = header.height;\r\n        var color, i = 0, x, y;\r\n\r\n        var imageData = new Uint8Array(width * height * 4);\r\n\r\n        for (y = y_start; y !== y_end; y += y_step) {\r\n            for (x = x_start; x !== x_end; x += x_step, i += 2) {\r\n                color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\r\n                let r = (((color & 0x7C00) >> 10) * 255) / 0x1F | 0;\r\n                let g = (((color & 0x03E0) >> 5) * 255) / 0x1F | 0;\r\n                let b = ((color & 0x001F) * 255) / 0x1F | 0;\r\n\r\n                imageData[(x + width * y) * 4 + 0] = r;\r\n                imageData[(x + width * y) * 4 + 1] = g;\r\n                imageData[(x + width * y) * 4 + 2] = b;\r\n                imageData[(x + width * y) * 4 + 3] = (color & 0x8000) ? 0 : 255;\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n    /** @hidden */\r\n    static _getImageData24bits(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_end: number, x_start: number, x_step: number, x_end: number): Uint8Array {\r\n        var image = pixel_data;\r\n        var width = header.width, height = header.height;\r\n        var i = 0, x, y;\r\n\r\n        var imageData = new Uint8Array(width * height * 4);\r\n\r\n        for (y = y_start; y !== y_end; y += y_step) {\r\n            for (x = x_start; x !== x_end; x += x_step, i += 3) {\r\n                imageData[(x + width * y) * 4 + 3] = 255;\r\n                imageData[(x + width * y) * 4 + 2] = image[i + 0];\r\n                imageData[(x + width * y) * 4 + 1] = image[i + 1];\r\n                imageData[(x + width * y) * 4 + 0] = image[i + 2];\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n    /** @hidden */\r\n    static _getImageData32bits(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_end: number, x_start: number, x_step: number, x_end: number): Uint8Array {\r\n        var image = pixel_data;\r\n        var width = header.width, height = header.height;\r\n        var i = 0, x, y;\r\n\r\n        var imageData = new Uint8Array(width * height * 4);\r\n\r\n        for (y = y_start; y !== y_end; y += y_step) {\r\n            for (x = x_start; x !== x_end; x += x_step, i += 4) {\r\n                imageData[(x + width * y) * 4 + 2] = image[i + 0];\r\n                imageData[(x + width * y) * 4 + 1] = image[i + 1];\r\n                imageData[(x + width * y) * 4 + 0] = image[i + 2];\r\n                imageData[(x + width * y) * 4 + 3] = image[i + 3];\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n    /** @hidden */\r\n    static _getImageDataGrey8bits(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_end: number, x_start: number, x_step: number, x_end: number): Uint8Array {\r\n        var image = pixel_data;\r\n        var width = header.width, height = header.height;\r\n        var color, i = 0, x, y;\r\n\r\n        var imageData = new Uint8Array(width * height * 4);\r\n\r\n        for (y = y_start; y !== y_end; y += y_step) {\r\n            for (x = x_start; x !== x_end; x += x_step, i++) {\r\n                color = image[i];\r\n                imageData[(x + width * y) * 4 + 0] = color;\r\n                imageData[(x + width * y) * 4 + 1] = color;\r\n                imageData[(x + width * y) * 4 + 2] = color;\r\n                imageData[(x + width * y) * 4 + 3] = 255;\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n    /** @hidden */\r\n    static _getImageDataGrey16bits(header: any, palettes: Uint8Array, pixel_data: Uint8Array, y_start: number, y_step: number, y_end: number, x_start: number, x_step: number, x_end: number): Uint8Array {\r\n        var image = pixel_data;\r\n        var width = header.width, height = header.height;\r\n        var i = 0, x, y;\r\n\r\n        var imageData = new Uint8Array(width * height * 4);\r\n\r\n        for (y = y_start; y !== y_end; y += y_step) {\r\n            for (x = x_start; x !== x_end; x += x_step, i += 2) {\r\n                imageData[(x + width * y) * 4 + 0] = image[i + 0];\r\n                imageData[(x + width * y) * 4 + 1] = image[i + 0];\r\n                imageData[(x + width * y) * 4 + 2] = image[i + 0];\r\n                imageData[(x + width * y) * 4 + 3] = image[i + 1];\r\n            }\r\n        }\r\n\r\n        return imageData;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}