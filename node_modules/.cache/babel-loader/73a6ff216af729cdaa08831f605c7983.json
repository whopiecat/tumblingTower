{"ast":null,"code":"import { Effect } from \"../Materials/effect\";\nvar name = 'colorCorrectionPixelShader';\nvar shader = \"\\nuniform sampler2D textureSampler;\\nuniform sampler2D colorTable;\\n\\nvarying vec2 vUV;\\n\\nconst float SLICE_COUNT=16.0;\\n\\nvec4 sampleAs3DTexture(sampler2D textureSampler,vec3 uv,float width) {\\nfloat sliceSize=1.0/width;\\nfloat slicePixelSize=sliceSize/width;\\nfloat sliceInnerSize=slicePixelSize*(width-1.0);\\nfloat zSlice0=min(floor(uv.z*width),width-1.0);\\nfloat zSlice1=min(zSlice0+1.0,width-1.0);\\nfloat xOffset=slicePixelSize*0.5+uv.x*sliceInnerSize;\\nfloat s0=xOffset+(zSlice0*sliceSize);\\nfloat s1=xOffset+(zSlice1*sliceSize);\\nvec4 slice0Color=texture2D(textureSampler,vec2(s0,uv.y));\\nvec4 slice1Color=texture2D(textureSampler,vec2(s1,uv.y));\\nfloat zOffset=mod(uv.z*width,1.0);\\nvec4 result=mix(slice0Color,slice1Color,zOffset);\\nreturn result;\\n}\\nvoid main(void)\\n{\\nvec4 screen_color=texture2D(textureSampler,vUV);\\ngl_FragColor=sampleAs3DTexture(colorTable,screen_color.rgb,SLICE_COUNT);\\n}\";\nEffect.ShadersStore[name] = shader;\n/** @hidden */\n\nexport var colorCorrectionPixelShader = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"sources":["../../../sourceES6/core/Shaders/colorCorrection.fragment.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,qBAAvB;AAEA,IAAI,IAAI,GAAG,4BAAX;AACA,IAAI,MAAM,GAAG,64BAAb;AA6BA,MAAM,CAAC,YAAP,CAAoB,IAApB,IAA4B,MAA5B;AACA;;AACA,OAAO,IAAI,0BAA0B,GAAG;AAAE,EAAA,IAAI,EAAA,IAAN;AAAQ,EAAA,MAAM,EAAA;AAAd,CAAjC","sourcesContent":["import { Effect } from \"../Materials/effect\";\n\nlet name = 'colorCorrectionPixelShader';\nlet shader = `\nuniform sampler2D textureSampler;\nuniform sampler2D colorTable;\n\nvarying vec2 vUV;\n\nconst float SLICE_COUNT=16.0;\n\nvec4 sampleAs3DTexture(sampler2D textureSampler,vec3 uv,float width) {\nfloat sliceSize=1.0/width;\nfloat slicePixelSize=sliceSize/width;\nfloat sliceInnerSize=slicePixelSize*(width-1.0);\nfloat zSlice0=min(floor(uv.z*width),width-1.0);\nfloat zSlice1=min(zSlice0+1.0,width-1.0);\nfloat xOffset=slicePixelSize*0.5+uv.x*sliceInnerSize;\nfloat s0=xOffset+(zSlice0*sliceSize);\nfloat s1=xOffset+(zSlice1*sliceSize);\nvec4 slice0Color=texture2D(textureSampler,vec2(s0,uv.y));\nvec4 slice1Color=texture2D(textureSampler,vec2(s1,uv.y));\nfloat zOffset=mod(uv.z*width,1.0);\nvec4 result=mix(slice0Color,slice1Color,zOffset);\nreturn result;\n}\nvoid main(void)\n{\nvec4 screen_color=texture2D(textureSampler,vUV);\ngl_FragColor=sampleAs3DTexture(colorTable,screen_color.rgb,SLICE_COUNT);\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var colorCorrectionPixelShader = { name, shader };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}