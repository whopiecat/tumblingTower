{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { InputBlock } from '../Input/inputBlock';\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentMainFunctions\";\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentFunctions\";\nimport \"../../../../Shaders/ShadersInclude/bumpFragment\";\n/**\r\n * Block used to pertub normals based on a normal map\r\n */\n\nvar PerturbNormalBlock =\n/** @class */\nfunction (_super) {\n  __extends(PerturbNormalBlock, _super);\n  /**\r\n   * Create a new PerturbNormalBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function PerturbNormalBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._tangentSpaceParameterName = \"\";\n    /** Gets or sets a boolean indicating that normal should be inverted on X axis */\n\n    _this.invertX = false;\n    /** Gets or sets a boolean indicating that normal should be inverted on Y axis */\n\n    _this.invertY = false; // Vertex\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\n\n    _this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\n\n    _this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n\n    _this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, false);\n\n    _this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, false);\n\n    _this.registerInput(\"strength\", NodeMaterialBlockConnectionPointTypes.Float, false); // Fragment\n\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  PerturbNormalBlock.prototype.getClassName = function () {\n    return \"PerturbNormalBlock\";\n  };\n\n  Object.defineProperty(PerturbNormalBlock.prototype, \"worldPosition\", {\n    /**\r\n     * Gets the world position input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"worldNormal\", {\n    /**\r\n     * Gets the world normal input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"worldTangent\", {\n    /**\r\n     * Gets the world tangent input component\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"uv\", {\n    /**\r\n     * Gets the uv input component\r\n     */\n    get: function () {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"normalMapColor\", {\n    /**\r\n    * Gets the normal map color input component\r\n    */\n    get: function () {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"strength\", {\n    /**\r\n    * Gets the strength input component\r\n    */\n    get: function () {\n      return this._inputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PerturbNormalBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    defines.setValue(\"BUMP\", true);\n  };\n\n  PerturbNormalBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    if (nodeMaterial.getScene()._mirroredCameraPosition) {\n      effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? 1.0 : -1.0, this.invertY ? 1.0 : -1.0);\n    } else {\n      effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? -1.0 : 1.0, this.invertY ? -1.0 : 1.0);\n    }\n  };\n\n  PerturbNormalBlock.prototype.autoConfigure = function (material) {\n    if (!this.uv.isConnected) {\n      var uvInput = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"uv\";\n      });\n\n      if (!uvInput) {\n        uvInput = new InputBlock(\"uv\");\n        uvInput.setAsAttribute();\n      }\n\n      uvInput.output.connectTo(this.uv);\n    }\n\n    if (!this.strength.isConnected) {\n      var strengthInput = new InputBlock(\"strength\");\n      strengthInput.value = 1.0;\n      strengthInput.output.connectTo(this.strength);\n    }\n  };\n\n  PerturbNormalBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var comments = \"//\" + this.name;\n    var uv = this.uv;\n    var worldPosition = this.worldPosition;\n    var worldNormal = this.worldNormal;\n    var worldTangent = this.worldTangent;\n    state.sharedData.blocksWithDefines.push(this);\n    state.sharedData.bindableBlocks.push(this);\n    this._tangentSpaceParameterName = state._getFreeDefineName(\"tangentSpaceParameter\");\n\n    state._emitUniformFromString(this._tangentSpaceParameterName, \"vec2\");\n\n    var replaceForBumpInfos = this.strength.isConnectedToInputBlock && this.strength.connectInputBlock.isConstant ? \"\" + state._emitFloat(1.0 / this.strength.connectInputBlock.value) : \"1.0 / \" + this.strength.associatedVariableName;\n\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\n\n    var tangentReplaceString = {\n      search: /defined\\(TANGENT\\)/g,\n      replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\"\n    };\n\n    if (worldTangent.isConnected) {\n      state.compilationString += \"vec3 tbnNormal = normalize(\" + worldNormal.associatedVariableName + \".xyz);\\r\\n\";\n      state.compilationString += \"vec3 tbnTangent = normalize(\" + worldTangent.associatedVariableName + \".xyz);\\r\\n\";\n      state.compilationString += \"vec3 tbnBitangent = cross(tbnNormal, tbnTangent);\\r\\n\";\n      state.compilationString += \"mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\r\\n\";\n    }\n\n    state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\n      replaceStrings: [tangentReplaceString]\n    });\n\n    state._emitFunctionFromInclude(\"bumpFragmentFunctions\", comments, {\n      replaceStrings: [{\n        search: /vBumpInfos.y/g,\n        replace: replaceForBumpInfos\n      }, {\n        search: /vTangentSpaceParams/g,\n        replace: this._tangentSpaceParameterName\n      }, {\n        search: /vPositionW/g,\n        replace: worldPosition.associatedVariableName + \".xyz\"\n      }]\n    });\n\n    state.compilationString += this._declareOutput(this.output, state) + \" = vec4(0.);\\r\\n\";\n    state.compilationString += state._emitCodeFromInclude(\"bumpFragment\", comments, {\n      replaceStrings: [{\n        search: /perturbNormal\\(TBN,vBumpUV\\+uvOffset\\)/g,\n        replace: \"perturbNormal(TBN, \" + this.normalMapColor.associatedVariableName + \")\"\n      }, {\n        search: /vBumpInfos.y/g,\n        replace: replaceForBumpInfos\n      }, {\n        search: /vBumpUV/g,\n        replace: uv.associatedVariableName\n      }, {\n        search: /vPositionW/g,\n        replace: worldPosition.associatedVariableName + \".xyz\"\n      }, {\n        search: /normalW=/g,\n        replace: this.output.associatedVariableName + \".xyz = \"\n      }, {\n        search: /mat3\\(normalMatrix\\)\\*normalW/g,\n        replace: \"mat3(normalMatrix) * \" + this.output.associatedVariableName + \".xyz\"\n      }, {\n        search: /normalW/g,\n        replace: worldNormal.associatedVariableName + \".xyz\"\n      }, tangentReplaceString]\n    });\n    return this;\n  };\n\n  PerturbNormalBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = this._codeVariableName + \".invertX = \" + this.invertX + \";\\r\\n\";\n    codeString += this._codeVariableName + \".invertY = \" + this.invertY + \";\\r\\n\";\n    return codeString;\n  };\n\n  PerturbNormalBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.invertX = this.invertX;\n    serializationObject.invertY = this.invertY;\n    return serializationObject;\n  };\n\n  PerturbNormalBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.invertX = serializationObject.invertX;\n    this.invertY = serializationObject.invertY;\n  };\n\n  __decorate([editableInPropertyPage(\"Invert X axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n    \"notifiers\": {\n      \"update\": false\n    }\n  })], PerturbNormalBlock.prototype, \"invertX\", void 0);\n\n  __decorate([editableInPropertyPage(\"Invert Y axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n    \"notifiers\": {\n      \"update\": false\n    }\n  })], PerturbNormalBlock.prototype, \"invertY\", void 0);\n\n  return PerturbNormalBlock;\n}(NodeMaterialBlock);\n\nexport { PerturbNormalBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.PerturbNormalBlock\"] = PerturbNormalBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Fragment/perturbNormalBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\nimport { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';\r\nimport { AbstractMesh } from '../../../../Meshes/abstractMesh';\r\nimport { InputBlock } from '../Input/inputBlock';\r\nimport { Effect } from '../../../effect';\r\nimport { Mesh } from '../../../../Meshes/mesh';\r\nimport { Scene } from '../../../../scene';\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\n\r\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentMainFunctions\";\r\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentFunctions\";\r\nimport \"../../../../Shaders/ShadersInclude/bumpFragment\";\r\n\r\n/**\r\n * Block used to pertub normals based on a normal map\r\n */\r\nexport class PerturbNormalBlock extends NodeMaterialBlock {\r\n    private _tangentSpaceParameterName = \"\";\r\n\r\n    /** Gets or sets a boolean indicating that normal should be inverted on X axis */\r\n    @editableInPropertyPage(\"Invert X axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { \"notifiers\": { \"update\": false }})\r\n    public invertX = false;\r\n    /** Gets or sets a boolean indicating that normal should be inverted on Y axis */\r\n    @editableInPropertyPage(\"Invert Y axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { \"notifiers\": { \"update\": false }})\r\n    public invertY = false;\r\n\r\n    /**\r\n     * Create a new PerturbNormalBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        // Vertex\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\r\n        this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, false);\r\n        this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, false);\r\n        this.registerInput(\"strength\", NodeMaterialBlockConnectionPointTypes.Float, false);\r\n\r\n        // Fragment\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"PerturbNormalBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the world tangent input component\r\n     */\r\n    public get worldTangent(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the uv input component\r\n     */\r\n    public get uv(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n    * Gets the normal map color input component\r\n    */\r\n    public get normalMapColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n    * Gets the strength input component\r\n    */\r\n    public get strength(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        defines.setValue(\"BUMP\", true);\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (nodeMaterial.getScene()._mirroredCameraPosition) {\r\n            effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? 1.0 : -1.0, this.invertY ? 1.0 : -1.0);\r\n        } else {\r\n            effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? -1.0 : 1.0, this.invertY ? -1.0 : 1.0);\r\n        }\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.uv.isConnected) {\r\n            let uvInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"uv\");\r\n\r\n            if (!uvInput) {\r\n                uvInput = new InputBlock(\"uv\");\r\n                uvInput.setAsAttribute();\r\n            }\r\n            uvInput.output.connectTo(this.uv);\r\n        }\r\n\r\n        if (!this.strength.isConnected) {\r\n            let strengthInput = new InputBlock(\"strength\");\r\n            strengthInput.value = 1.0;\r\n            strengthInput.output.connectTo(this.strength);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        let comments = `//${this.name}`;\r\n        let uv = this.uv;\r\n        let worldPosition = this.worldPosition;\r\n        let worldNormal = this.worldNormal;\r\n        let worldTangent = this.worldTangent;\r\n\r\n        state.sharedData.blocksWithDefines.push(this);\r\n        state.sharedData.bindableBlocks.push(this);\r\n\r\n        this._tangentSpaceParameterName = state._getFreeDefineName(\"tangentSpaceParameter\");\r\n\r\n        state._emitUniformFromString(this._tangentSpaceParameterName, \"vec2\");\r\n\r\n        let replaceForBumpInfos = this.strength.isConnectedToInputBlock && this.strength.connectInputBlock!.isConstant ? `${state._emitFloat(1.0 / this.strength.connectInputBlock!.value)}` : `1.0 / ${this.strength.associatedVariableName}`;\r\n\r\n        state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\r\n\r\n        let tangentReplaceString = { search: /defined\\(TANGENT\\)/g, replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\" };\r\n\r\n        if (worldTangent.isConnected) {\r\n            state.compilationString += `vec3 tbnNormal = normalize(${worldNormal.associatedVariableName}.xyz);\\r\\n`;\r\n            state.compilationString += `vec3 tbnTangent = normalize(${worldTangent.associatedVariableName}.xyz);\\r\\n`;\r\n            state.compilationString += `vec3 tbnBitangent = cross(tbnNormal, tbnTangent);\\r\\n`;\r\n            state.compilationString += `mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\r\\n`;\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\r\n            replaceStrings: [\r\n                tangentReplaceString,\r\n            ]\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"bumpFragmentFunctions\", comments, {\r\n            replaceStrings: [\r\n                { search: /vBumpInfos.y/g, replace: replaceForBumpInfos},\r\n                { search: /vTangentSpaceParams/g, replace: this._tangentSpaceParameterName},\r\n                { search: /vPositionW/g, replace: worldPosition.associatedVariableName + \".xyz\"},\r\n            ]\r\n        });\r\n\r\n        state.compilationString += this._declareOutput(this.output, state) + \" = vec4(0.);\\r\\n\";\r\n        state.compilationString += state._emitCodeFromInclude(\"bumpFragment\", comments, {\r\n            replaceStrings: [\r\n                { search: /perturbNormal\\(TBN,vBumpUV\\+uvOffset\\)/g, replace: `perturbNormal(TBN, ${this.normalMapColor.associatedVariableName})` },\r\n                { search: /vBumpInfos.y/g, replace: replaceForBumpInfos},\r\n                { search: /vBumpUV/g, replace: uv.associatedVariableName},\r\n                { search: /vPositionW/g, replace: worldPosition.associatedVariableName + \".xyz\"},\r\n                { search: /normalW=/g, replace: this.output.associatedVariableName + \".xyz = \" },\r\n                { search: /mat3\\(normalMatrix\\)\\*normalW/g, replace: \"mat3(normalMatrix) * \" + this.output.associatedVariableName + \".xyz\" },\r\n                { search: /normalW/g, replace: worldNormal.associatedVariableName + \".xyz\" },\r\n                tangentReplaceString\r\n            ]\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        var codeString = `${this._codeVariableName}.invertX = ${this.invertX};\\r\\n`;\r\n\r\n        codeString += `${this._codeVariableName}.invertY = ${this.invertY};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        let serializationObject = super.serialize();\r\n\r\n        serializationObject.invertX = this.invertX;\r\n        serializationObject.invertY = this.invertY;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.invertX = serializationObject.invertX;\r\n        this.invertY = serializationObject.invertY;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.PerturbNormalBlock\"] = PerturbNormalBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}