{"ast":null,"code":"import { Matrix } from \"../../Maths/math.vector\";\n/**\r\n * This represents all the required metrics to create a VR camera.\r\n * @see https://doc.babylonjs.com/babylon101/cameras#device-orientation-camera\r\n */\n\nvar VRCameraMetrics =\n/** @class */\nfunction () {\n  function VRCameraMetrics() {\n    /**\r\n     * Define if the current vr camera should compensate the distortion of the lense or not.\r\n     */\n    this.compensateDistortion = true;\n    /**\r\n     * Defines if multiview should be enabled when rendering (Default: false)\r\n     */\n\n    this.multiviewEnabled = false;\n  }\n\n  Object.defineProperty(VRCameraMetrics.prototype, \"aspectRatio\", {\n    /**\r\n     * Gets the rendering aspect ratio based on the provided resolutions.\r\n     */\n    get: function () {\n      return this.hResolution / (2 * this.vResolution);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRCameraMetrics.prototype, \"aspectRatioFov\", {\n    /**\r\n     * Gets the aspect ratio based on the FOV, scale factors, and real screen sizes.\r\n     */\n    get: function () {\n      return 2 * Math.atan(this.postProcessScaleFactor * this.vScreenSize / (2 * this.eyeToScreenDistance));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRCameraMetrics.prototype, \"leftHMatrix\", {\n    /**\r\n     * @hidden\r\n     */\n    get: function () {\n      var meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;\n      var h = 4 * meters / this.hScreenSize;\n      return Matrix.Translation(h, 0, 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRCameraMetrics.prototype, \"rightHMatrix\", {\n    /**\r\n     * @hidden\r\n     */\n    get: function () {\n      var meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;\n      var h = 4 * meters / this.hScreenSize;\n      return Matrix.Translation(-h, 0, 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRCameraMetrics.prototype, \"leftPreViewMatrix\", {\n    /**\r\n     * @hidden\r\n     */\n    get: function () {\n      return Matrix.Translation(0.5 * this.interpupillaryDistance, 0, 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRCameraMetrics.prototype, \"rightPreViewMatrix\", {\n    /**\r\n     * @hidden\r\n     */\n    get: function () {\n      return Matrix.Translation(-0.5 * this.interpupillaryDistance, 0, 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Get the default VRMetrics based on the most generic setup.\r\n   * @returns the default vr metrics\r\n   */\n\n  VRCameraMetrics.GetDefault = function () {\n    var result = new VRCameraMetrics();\n    result.hResolution = 1280;\n    result.vResolution = 800;\n    result.hScreenSize = 0.149759993;\n    result.vScreenSize = 0.0935999975;\n    result.vScreenCenter = 0.0467999987;\n    result.eyeToScreenDistance = 0.0410000011;\n    result.lensSeparationDistance = 0.0635000020;\n    result.interpupillaryDistance = 0.0640000030;\n    result.distortionK = [1.0, 0.219999999, 0.239999995, 0.0];\n    result.chromaAbCorrection = [0.995999992, -0.00400000019, 1.01400006, 0.0];\n    result.postProcessScaleFactor = 1.714605507808412;\n    result.lensCenterOffset = 0.151976421;\n    return result;\n  };\n\n  return VRCameraMetrics;\n}();\n\nexport { VRCameraMetrics };","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/VR/vrCameraMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["import { Matrix } from \"../../Maths/math.vector\";\r\n/**\r\n * This represents all the required metrics to create a VR camera.\r\n * @see https://doc.babylonjs.com/babylon101/cameras#device-orientation-camera\r\n */\r\nexport class VRCameraMetrics {\r\n    /**\r\n     * Define the horizontal resolution off the screen.\r\n     */\r\n    public hResolution: number;\r\n    /**\r\n     * Define the vertical resolution off the screen.\r\n     */\r\n    public vResolution: number;\r\n    /**\r\n     * Define the horizontal screen size.\r\n     */\r\n    public hScreenSize: number;\r\n    /**\r\n     * Define the vertical screen size.\r\n     */\r\n    public vScreenSize: number;\r\n    /**\r\n     * Define the vertical screen center position.\r\n     */\r\n    public vScreenCenter: number;\r\n    /**\r\n     * Define the distance of the eyes to the screen.\r\n     */\r\n    public eyeToScreenDistance: number;\r\n    /**\r\n     * Define the distance between both lenses\r\n     */\r\n    public lensSeparationDistance: number;\r\n    /**\r\n     * Define the distance between both viewer's eyes.\r\n     */\r\n    public interpupillaryDistance: number;\r\n    /**\r\n     * Define the distortion factor of the VR postprocess.\r\n     * Please, touch with care.\r\n     */\r\n    public distortionK: number[];\r\n    /**\r\n     * Define the chromatic aberration correction factors for the VR post process.\r\n     */\r\n    public chromaAbCorrection: number[];\r\n    /**\r\n     * Define the scale factor of the post process.\r\n     * The smaller the better but the slower.\r\n     */\r\n    public postProcessScaleFactor: number;\r\n    /**\r\n     * Define an offset for the lens center.\r\n     */\r\n    public lensCenterOffset: number;\r\n    /**\r\n     * Define if the current vr camera should compensate the distortion of the lense or not.\r\n     */\r\n    public compensateDistortion = true;\r\n\r\n    /**\r\n     * Defines if multiview should be enabled when rendering (Default: false)\r\n     */\r\n    public multiviewEnabled = false;\r\n\r\n    /**\r\n     * Gets the rendering aspect ratio based on the provided resolutions.\r\n     */\r\n    public get aspectRatio(): number {\r\n        return this.hResolution / (2 * this.vResolution);\r\n    }\r\n\r\n    /**\r\n     * Gets the aspect ratio based on the FOV, scale factors, and real screen sizes.\r\n     */\r\n    public get aspectRatioFov(): number {\r\n        return (2 * Math.atan((this.postProcessScaleFactor * this.vScreenSize) / (2 * this.eyeToScreenDistance)));\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public get leftHMatrix(): Matrix {\r\n        var meters = (this.hScreenSize / 4) - (this.lensSeparationDistance / 2);\r\n        var h = (4 * meters) / this.hScreenSize;\r\n\r\n        return Matrix.Translation(h, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public get rightHMatrix(): Matrix {\r\n        var meters = (this.hScreenSize / 4) - (this.lensSeparationDistance / 2);\r\n        var h = (4 * meters) / this.hScreenSize;\r\n\r\n        return Matrix.Translation(-h, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public get leftPreViewMatrix(): Matrix {\r\n        return Matrix.Translation(0.5 * this.interpupillaryDistance, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public get rightPreViewMatrix(): Matrix {\r\n        return Matrix.Translation(-0.5 * this.interpupillaryDistance, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Get the default VRMetrics based on the most generic setup.\r\n     * @returns the default vr metrics\r\n     */\r\n    public static GetDefault(): VRCameraMetrics {\r\n        var result = new VRCameraMetrics();\r\n\r\n        result.hResolution = 1280;\r\n        result.vResolution = 800;\r\n        result.hScreenSize = 0.149759993;\r\n        result.vScreenSize = 0.0935999975;\r\n        result.vScreenCenter = 0.0467999987;\r\n        result.eyeToScreenDistance = 0.0410000011;\r\n        result.lensSeparationDistance = 0.0635000020;\r\n        result.interpupillaryDistance = 0.0640000030;\r\n        result.distortionK = [1.0, 0.219999999, 0.239999995, 0.0];\r\n        result.chromaAbCorrection = [0.995999992, -0.00400000019, 1.01400006, 0.0];\r\n        result.postProcessScaleFactor = 1.714605507808412;\r\n        result.lensCenterOffset = 0.151976421;\r\n\r\n        return result;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}