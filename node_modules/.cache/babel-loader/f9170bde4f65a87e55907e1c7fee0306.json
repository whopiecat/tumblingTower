{"ast":null,"code":"import { DeviceInputSystem } from '../deviceInputSystem';\nimport { DeviceType } from './deviceEnums';\nimport { Observable } from '../../Misc/observable';\n/**\r\n * Class that handles all input for a specific device\r\n */\n\nvar DeviceSource =\n/** @class */\nfunction () {\n  /**\r\n   * Default Constructor\r\n   * @param deviceInputSystem Reference to DeviceInputSystem\r\n   * @param deviceType Type of device\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   */\n  function DeviceSource(deviceInputSystem,\n  /** Type of device */\n  deviceType,\n  /** \"Slot\" or index that device is referenced in */\n  deviceSlot) {\n    if (deviceSlot === void 0) {\n      deviceSlot = 0;\n    }\n\n    this.deviceType = deviceType;\n    this.deviceSlot = deviceSlot; // Public Members\n\n    /**\r\n     * Observable to handle device input changes per device\r\n     */\n\n    this.onInputChangedObservable = new Observable();\n    this._deviceInputSystem = deviceInputSystem;\n  }\n  /**\r\n   * Get input for specific input\r\n   * @param inputIndex index of specific input on device\r\n   * @returns Input value from DeviceInputSystem\r\n   */\n\n\n  DeviceSource.prototype.getInput = function (inputIndex) {\n    return this._deviceInputSystem.pollInput(this.deviceType, this.deviceSlot, inputIndex);\n  };\n\n  return DeviceSource;\n}();\n\nexport { DeviceSource };\n/**\r\n * Class to keep track of devices\r\n */\n\nvar DeviceSourceManager =\n/** @class */\nfunction () {\n  /**\r\n   * Default Constructor\r\n   * @param engine engine to pull input element from\r\n   */\n  function DeviceSourceManager(engine) {\n    var _this = this; // Public Members\n\n    /**\r\n     * Observable to be triggered when after a device is connected, any new observers added will be triggered against already connected devices\r\n     */\n\n\n    this.onDeviceConnectedObservable = new Observable(function (observer) {\n      _this.getDevices().forEach(function (device) {\n        _this.onDeviceConnectedObservable.notifyObserver(observer, device);\n      });\n    });\n    /**\r\n     * Observable to be triggered when after a device is disconnected\r\n     */\n\n    this.onDeviceDisconnectedObservable = new Observable();\n    var numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\n    this._devices = new Array(numberOfDeviceTypes);\n    this._firstDevice = new Array(numberOfDeviceTypes);\n    this._deviceInputSystem = DeviceInputSystem.Create(engine);\n\n    this._deviceInputSystem.onDeviceConnected = function (deviceType, deviceSlot) {\n      _this._addDevice(deviceType, deviceSlot);\n\n      _this.onDeviceConnectedObservable.notifyObservers(_this.getDeviceSource(deviceType, deviceSlot));\n    };\n\n    this._deviceInputSystem.onDeviceDisconnected = function (deviceType, deviceSlot) {\n      var device = _this.getDeviceSource(deviceType, deviceSlot); // Grab local reference to use before removing from devices\n\n\n      _this._removeDevice(deviceType, deviceSlot);\n\n      _this.onDeviceDisconnectedObservable.notifyObservers(device);\n    };\n\n    if (!this._deviceInputSystem.onInputChanged) {\n      this._deviceInputSystem.onInputChanged = function (deviceType, deviceSlot, inputIndex, previousState, currentState) {\n        var _a;\n\n        (_a = _this.getDeviceSource(deviceType, deviceSlot)) === null || _a === void 0 ? void 0 : _a.onInputChangedObservable.notifyObservers({\n          inputIndex: inputIndex,\n          previousState: previousState,\n          currentState: currentState\n        });\n      };\n    }\n  } // Public Functions\n\n  /**\r\n   * Gets a DeviceSource, given a type and slot\r\n   * @param deviceType Enum specifying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   * @returns DeviceSource object\r\n   */\n\n\n  DeviceSourceManager.prototype.getDeviceSource = function (deviceType, deviceSlot) {\n    if (deviceSlot === undefined) {\n      if (this._firstDevice[deviceType] === undefined) {\n        return null;\n      }\n\n      deviceSlot = this._firstDevice[deviceType];\n    }\n\n    if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\n      return null;\n    }\n\n    return this._devices[deviceType][deviceSlot];\n  };\n  /**\r\n   * Gets an array of DeviceSource objects for a given device type\r\n   * @param deviceType Enum specifying device type\r\n   * @returns Array of DeviceSource objects\r\n   */\n\n\n  DeviceSourceManager.prototype.getDeviceSources = function (deviceType) {\n    return this._devices[deviceType].filter(function (source) {\n      return !!source;\n    });\n  };\n  /**\r\n   * Returns a read-only list of all available devices\r\n   * @returns Read-only array with active devices\r\n   */\n\n\n  DeviceSourceManager.prototype.getDevices = function () {\n    var deviceArray = new Array();\n\n    this._devices.forEach(function (deviceSet) {\n      deviceArray.push.apply(deviceArray, deviceSet);\n    });\n\n    return deviceArray;\n  };\n  /**\r\n   * Dispose of DeviceInputSystem and other parts\r\n   */\n\n\n  DeviceSourceManager.prototype.dispose = function () {\n    this.onDeviceConnectedObservable.clear();\n    this.onDeviceDisconnectedObservable.clear();\n\n    this._deviceInputSystem.dispose();\n  }; // Private Functions\n\n  /**\r\n   * Function to add device name to device list\r\n   * @param deviceType Enum specifying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   */\n\n\n  DeviceSourceManager.prototype._addDevice = function (deviceType, deviceSlot) {\n    if (!this._devices[deviceType]) {\n      this._devices[deviceType] = new Array();\n    }\n\n    if (!this._devices[deviceType][deviceSlot]) {\n      this._devices[deviceType][deviceSlot] = new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\n\n      this._updateFirstDevices(deviceType);\n    }\n  };\n  /**\r\n   * Function to remove device name to device list\r\n   * @param deviceType Enum specifying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   */\n\n\n  DeviceSourceManager.prototype._removeDevice = function (deviceType, deviceSlot) {\n    delete this._devices[deviceType][deviceSlot];\n\n    this._updateFirstDevices(deviceType);\n  };\n  /**\r\n   * Updates array storing first connected device of each type\r\n   * @param type Type of Device\r\n   */\n\n\n  DeviceSourceManager.prototype._updateFirstDevices = function (type) {\n    switch (type) {\n      case DeviceType.Keyboard:\n      case DeviceType.Mouse:\n        this._firstDevice[type] = 0;\n        break;\n\n      case DeviceType.Touch:\n      case DeviceType.DualShock:\n      case DeviceType.Xbox:\n      case DeviceType.Switch:\n      case DeviceType.Generic:\n        var devices = this._devices[type];\n        delete this._firstDevice[type];\n\n        for (var i = 0; i < devices.length; i++) {\n          if (devices[i]) {\n            this._firstDevice[type] = i;\n            break;\n          }\n        }\n\n        break;\n    }\n  };\n\n  return DeviceSourceManager;\n}();\n\nexport { DeviceSourceManager };","map":{"version":3,"sources":["../../../../sourceES6/core/DeviceInput/InputDevices/deviceSourceManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { DeviceInputSystem } from '../deviceInputSystem';\r\nimport { Engine } from '../../Engines/engine';\r\nimport { IDisposable } from '../../scene';\r\nimport { DeviceType } from './deviceEnums';\r\nimport { Nullable } from '../../types';\r\nimport { Observable } from '../../Misc/observable';\r\nimport { DeviceInput } from './deviceTypes';\r\n\r\n/**\r\n * Class that handles all input for a specific device\r\n */\r\nexport class DeviceSource<T extends DeviceType> {\r\n    // Public Members\r\n    /**\r\n     * Observable to handle device input changes per device\r\n     */\r\n    public readonly onInputChangedObservable = new Observable<{ inputIndex: DeviceInput<T>, previousState: Nullable<number>, currentState: Nullable<number> }>();\r\n\r\n    // Private Members\r\n    private readonly _deviceInputSystem: DeviceInputSystem;\r\n\r\n    /**\r\n     * Default Constructor\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     */\r\n    constructor(deviceInputSystem: DeviceInputSystem,\r\n        /** Type of device */\r\n        public readonly deviceType: DeviceType,\r\n        /** \"Slot\" or index that device is referenced in */\r\n        public readonly deviceSlot: number = 0) {\r\n        this._deviceInputSystem = deviceInputSystem;\r\n    }\r\n\r\n    /**\r\n     * Get input for specific input\r\n     * @param inputIndex index of specific input on device\r\n     * @returns Input value from DeviceInputSystem\r\n     */\r\n    public getInput(inputIndex: DeviceInput<T>): number {\r\n        return this._deviceInputSystem.pollInput(this.deviceType, this.deviceSlot, inputIndex);\r\n    }\r\n}\r\n\r\n/**\r\n * Class to keep track of devices\r\n */\r\nexport class DeviceSourceManager implements IDisposable {\r\n    // Public Members\r\n    /**\r\n     * Observable to be triggered when after a device is connected, any new observers added will be triggered against already connected devices\r\n     */\r\n    public readonly onDeviceConnectedObservable = new Observable<DeviceSource<DeviceType>>((observer) => {\r\n        this.getDevices().forEach((device) => {\r\n            this.onDeviceConnectedObservable.notifyObserver(observer, device);\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Observable to be triggered when after a device is disconnected\r\n     */\r\n    public readonly onDeviceDisconnectedObservable = new Observable<DeviceSource<DeviceType>>();\r\n\r\n    // Private Members\r\n    private readonly _devices: Array<Array<DeviceSource<DeviceType>>>;\r\n    private readonly _firstDevice: Array<number>;\r\n    private readonly _deviceInputSystem: DeviceInputSystem;\r\n\r\n    /**\r\n     * Default Constructor\r\n     * @param engine engine to pull input element from\r\n     */\r\n    constructor(engine: Engine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array<Array<DeviceSource<DeviceType>>>(numberOfDeviceTypes);\r\n        this._firstDevice = new Array<number>(numberOfDeviceTypes);\r\n        this._deviceInputSystem = DeviceInputSystem.Create(engine);\r\n\r\n        this._deviceInputSystem.onDeviceConnected = (deviceType, deviceSlot) => {\r\n            this._addDevice(deviceType, deviceSlot);\r\n            this.onDeviceConnectedObservable.notifyObservers(this.getDeviceSource(deviceType, deviceSlot)!);\r\n        };\r\n        this._deviceInputSystem.onDeviceDisconnected = (deviceType, deviceSlot) => {\r\n            const device = this.getDeviceSource(deviceType, deviceSlot)!; // Grab local reference to use before removing from devices\r\n            this._removeDevice(deviceType, deviceSlot);\r\n            this.onDeviceDisconnectedObservable.notifyObservers(device);\r\n        };\r\n\r\n        if (!this._deviceInputSystem.onInputChanged) {\r\n            this._deviceInputSystem.onInputChanged = (deviceType, deviceSlot, inputIndex, previousState, currentState) => {\r\n                this.getDeviceSource(deviceType, deviceSlot)?.onInputChangedObservable.notifyObservers({ inputIndex, previousState, currentState });\r\n            };\r\n        }\r\n    }\r\n\r\n    // Public Functions\r\n    /**\r\n     * Gets a DeviceSource, given a type and slot\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @returns DeviceSource object\r\n     */\r\n    public getDeviceSource<T extends DeviceType>(deviceType: T, deviceSlot?: number): Nullable<DeviceSource<T>> {\r\n        if (deviceSlot === undefined) {\r\n            if (this._firstDevice[deviceType] === undefined) {\r\n                return null;\r\n            }\r\n\r\n            deviceSlot = this._firstDevice[deviceType];\r\n        }\r\n\r\n        if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\r\n            return null;\r\n        }\r\n\r\n        return this._devices[deviceType][deviceSlot];\r\n    }\r\n\r\n    /**\r\n     * Gets an array of DeviceSource objects for a given device type\r\n     * @param deviceType Enum specifying device type\r\n     * @returns Array of DeviceSource objects\r\n     */\r\n    public getDeviceSources<T extends DeviceType>(deviceType: T): ReadonlyArray<DeviceSource<T>> {\r\n        return this._devices[deviceType].filter((source) => { return !!source; });\r\n    }\r\n\r\n    /**\r\n     * Returns a read-only list of all available devices\r\n     * @returns Read-only array with active devices\r\n     */\r\n    public getDevices(): ReadonlyArray<DeviceSource<DeviceType>> {\r\n        const deviceArray = new Array<DeviceSource<DeviceType>>();\r\n        this._devices.forEach((deviceSet) => {\r\n            deviceArray.push.apply(deviceArray, deviceSet);\r\n        });\r\n\r\n        return deviceArray;\r\n    }\r\n\r\n    /**\r\n     * Dispose of DeviceInputSystem and other parts\r\n     */\r\n    public dispose() {\r\n        this.onDeviceConnectedObservable.clear();\r\n        this.onDeviceDisconnectedObservable.clear();\r\n        this._deviceInputSystem.dispose();\r\n    }\r\n\r\n    // Private Functions\r\n    /**\r\n     * Function to add device name to device list\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     */\r\n    private _addDevice(deviceType: DeviceType, deviceSlot: number) {\r\n        if (!this._devices[deviceType]) {\r\n            this._devices[deviceType] = new Array<DeviceSource<DeviceType>>();\r\n        }\r\n\r\n        if (!this._devices[deviceType][deviceSlot]) {\r\n            this._devices[deviceType][deviceSlot] = new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\r\n            this._updateFirstDevices(deviceType);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to remove device name to device list\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     */\r\n    private _removeDevice(deviceType: DeviceType, deviceSlot: number) {\r\n        delete this._devices[deviceType][deviceSlot];\r\n        this._updateFirstDevices(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Updates array storing first connected device of each type\r\n     * @param type Type of Device\r\n     */\r\n    private _updateFirstDevices(type: DeviceType) {\r\n        switch (type) {\r\n            case DeviceType.Keyboard:\r\n            case DeviceType.Mouse:\r\n                this._firstDevice[type] = 0;\r\n                break;\r\n            case DeviceType.Touch:\r\n            case DeviceType.DualShock:\r\n            case DeviceType.Xbox:\r\n            case DeviceType.Switch:\r\n            case DeviceType.Generic:\r\n                const devices = this._devices[type];\r\n                delete this._firstDevice[type];\r\n                for (let i = 0; i < devices.length; i++) {\r\n                    if (devices[i]) {\r\n                        this._firstDevice[type] = i;\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}