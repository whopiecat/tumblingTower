{"ast":null,"code":"import { Vector4 } from \"../../Maths/math.vector\";\nimport { Color4 } from '../../Maths/math.color';\nimport { Mesh } from \"../mesh\";\nimport { VertexData } from \"../mesh.vertexData\";\n\nVertexData.CreateBox = function (options) {\n  var nbFaces = 6;\n  var indices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];\n  var normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0];\n  var uvs = [];\n  var positions = [];\n  var width = options.width || options.size || 1;\n  var height = options.height || options.size || 1;\n  var depth = options.depth || options.size || 1;\n  var wrap = options.wrap || false;\n  var topBaseAt = options.topBaseAt === void 0 ? 1 : options.topBaseAt;\n  var bottomBaseAt = options.bottomBaseAt === void 0 ? 0 : options.bottomBaseAt;\n  topBaseAt = (topBaseAt + 4) % 4; // places values as 0 to 3\n\n  bottomBaseAt = (bottomBaseAt + 4) % 4; // places values as 0 to 3\n\n  var topOrder = [2, 0, 3, 1];\n  var bottomOrder = [2, 0, 1, 3];\n  var topIndex = topOrder[topBaseAt];\n  var bottomIndex = bottomOrder[bottomBaseAt];\n  var basePositions = [1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1];\n\n  if (wrap) {\n    indices = [2, 3, 0, 2, 0, 1, 4, 5, 6, 4, 6, 7, 9, 10, 11, 9, 11, 8, 12, 14, 15, 12, 13, 14];\n    basePositions = [-1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1];\n    var topFaceBase = [[1, 1, 1], [-1, 1, 1], [-1, 1, -1], [1, 1, -1]];\n    var bottomFaceBase = [[-1, -1, 1], [1, -1, 1], [1, -1, -1], [-1, -1, -1]];\n    var topFaceOrder = [17, 18, 19, 16];\n    var bottomFaceOrder = [22, 23, 20, 21];\n\n    while (topIndex > 0) {\n      topFaceBase.unshift(topFaceBase.pop());\n      topFaceOrder.unshift(topFaceOrder.pop());\n      topIndex--;\n    }\n\n    while (bottomIndex > 0) {\n      bottomFaceBase.unshift(bottomFaceBase.pop());\n      bottomFaceOrder.unshift(bottomFaceOrder.pop());\n      bottomIndex--;\n    }\n\n    topFaceBase = topFaceBase.flat();\n    bottomFaceBase = bottomFaceBase.flat();\n    basePositions = basePositions.concat(topFaceBase).concat(bottomFaceBase);\n    indices.push(topFaceOrder[0], topFaceOrder[2], topFaceOrder[3], topFaceOrder[0], topFaceOrder[1], topFaceOrder[2]);\n    indices.push(bottomFaceOrder[0], bottomFaceOrder[2], bottomFaceOrder[3], bottomFaceOrder[0], bottomFaceOrder[1], bottomFaceOrder[2]);\n  }\n\n  var scaleArray = [width / 2, height / 2, depth / 2];\n  positions = basePositions.reduce(function (accumulator, currentValue, currentIndex) {\n    return accumulator.concat(currentValue * scaleArray[currentIndex % 3]);\n  }, []);\n  var sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n  var faceUV = options.faceUV || new Array(6);\n  var faceColors = options.faceColors;\n  var colors = []; // default face colors and UV if undefined\n\n  for (var f = 0; f < 6; f++) {\n    if (faceUV[f] === undefined) {\n      faceUV[f] = new Vector4(0, 0, 1, 1);\n    }\n\n    if (faceColors && faceColors[f] === undefined) {\n      faceColors[f] = new Color4(1, 1, 1, 1);\n    }\n  } // Create each face in turn.\n\n\n  for (var index = 0; index < nbFaces; index++) {\n    uvs.push(faceUV[index].z, faceUV[index].w);\n    uvs.push(faceUV[index].x, faceUV[index].w);\n    uvs.push(faceUV[index].x, faceUV[index].y);\n    uvs.push(faceUV[index].z, faceUV[index].y);\n\n    if (faceColors) {\n      for (var c = 0; c < 4; c++) {\n        colors.push(faceColors[index].r, faceColors[index].g, faceColors[index].b, faceColors[index].a);\n      }\n    }\n  } // sides\n\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs); // Result\n\n\n  var vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n\n  if (faceColors) {\n    var totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\n    vertexData.colors = totalColors;\n  }\n\n  return vertexData;\n};\n\nMesh.CreateBox = function (name, size, scene, updatable, sideOrientation) {\n  if (scene === void 0) {\n    scene = null;\n  }\n\n  var options = {\n    size: size,\n    sideOrientation: sideOrientation,\n    updatable: updatable\n  };\n  return BoxBuilder.CreateBox(name, options, scene);\n};\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\n\n\nvar BoxBuilder =\n/** @class */\nfunction () {\n  function BoxBuilder() {}\n  /**\r\n   * Creates a box mesh\r\n   * * The parameter `size` sets the size (float) of each box side (default 1)\r\n   * * You can set some different box dimensions by using the parameters `width`, `height` and `depth` (all by default have the same value of `size`)\r\n   * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements)\r\n   * * Please read this tutorial : https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors\r\n   * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n   * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n   * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n   * @see https://doc.babylonjs.com/how_to/set_shapes#box\r\n   * @param name defines the name of the mesh\r\n   * @param options defines the options used to create the mesh\r\n   * @param scene defines the hosting scene\r\n   * @returns the box mesh\r\n   */\n\n\n  BoxBuilder.CreateBox = function (name, options, scene) {\n    if (scene === void 0) {\n      scene = null;\n    }\n\n    var box = new Mesh(name, scene);\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n    box._originalBuilderSideOrientation = options.sideOrientation;\n    var vertexData = VertexData.CreateBox(options);\n    vertexData.applyToMesh(box, options.updatable);\n    return box;\n  };\n\n  return BoxBuilder;\n}();\n\nexport { BoxBuilder };","map":{"version":3,"sources":["../../../../sourceES6/core/Meshes/Builders/boxBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from '../../Maths/math.color';\r\nimport { Mesh, _CreationDataStorage } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\n\r\nVertexData.CreateBox = function(options: { size?: number, width?: number, height?: number, depth?: number, faceUV?: Vector4[], faceColors?: Color4[], sideOrientation?: number, frontUVs?: Vector4, backUVs?: Vector4, wrap?: boolean, topBaseAt?: number, bottomBaseAt?: number }): VertexData {\r\n    var nbFaces = 6;\r\n    var indices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];\r\n    var normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0];\r\n    var uvs = [];\r\n    var positions = [];\r\n    var width = options.width || options.size || 1;\r\n    var height = options.height || options.size || 1;\r\n    var depth = options.depth || options.size || 1;\r\n    var wrap = options.wrap || false;\r\n    var topBaseAt = (options.topBaseAt === void 0) ? 1 : options.topBaseAt;\r\n    var bottomBaseAt = (options.bottomBaseAt === void 0) ? 0 : options.bottomBaseAt;\r\n    topBaseAt = (topBaseAt + 4) % 4; // places values as 0 to 3\r\n    bottomBaseAt = (bottomBaseAt + 4) % 4; // places values as 0 to 3\r\n    var topOrder = [2, 0, 3, 1];\r\n    var bottomOrder = [2, 0, 1, 3];\r\n    var topIndex = topOrder[topBaseAt];\r\n    var bottomIndex = bottomOrder[bottomBaseAt];\r\n    var basePositions = [1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1];\r\n    if (wrap) {\r\n        indices = [2, 3, 0, 2, 0, 1, 4, 5, 6, 4, 6, 7, 9, 10, 11, 9, 11, 8, 12, 14, 15, 12, 13, 14];\r\n        basePositions = [-1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1];\r\n        var topFaceBase: any = [[1, 1, 1], [-1, 1, 1], [-1, 1, -1], [1, 1, -1]];\r\n        var bottomFaceBase: any = [[-1, -1, 1], [1, -1, 1], [1, -1, -1], [-1, -1, -1]];\r\n        var topFaceOrder: any = [17, 18, 19, 16];\r\n        var bottomFaceOrder: any = [22, 23, 20, 21];\r\n        while (topIndex > 0) {\r\n            topFaceBase.unshift(topFaceBase.pop());\r\n            topFaceOrder.unshift(topFaceOrder.pop());\r\n            topIndex--;\r\n        }\r\n        while (bottomIndex > 0) {\r\n            bottomFaceBase.unshift(bottomFaceBase.pop());\r\n            bottomFaceOrder.unshift(bottomFaceOrder.pop());\r\n            bottomIndex--;\r\n        }\r\n        topFaceBase = topFaceBase.flat();\r\n        bottomFaceBase = bottomFaceBase.flat();\r\n        basePositions = basePositions.concat(topFaceBase).concat(bottomFaceBase);\r\n        indices.push(topFaceOrder[0], topFaceOrder[2], topFaceOrder[3], topFaceOrder[0], topFaceOrder[1], topFaceOrder[2]);\r\n        indices.push(bottomFaceOrder[0], bottomFaceOrder[2], bottomFaceOrder[3], bottomFaceOrder[0], bottomFaceOrder[1], bottomFaceOrder[2]);\r\n    }\r\n    var scaleArray = [width / 2, height / 2, depth / 2];\r\n    positions = basePositions.reduce(\r\n        (accumulator: Array<number>, currentValue, currentIndex) => accumulator.concat(currentValue * scaleArray[currentIndex % 3]),\r\n        []\r\n    );\r\n\r\n    var sideOrientation = (options.sideOrientation === 0) ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    var faceUV: Vector4[] = options.faceUV || new Array<Vector4>(6);\r\n    var faceColors = options.faceColors;\r\n    var colors = [];\r\n\r\n    // default face colors and UV if undefined\r\n    for (var f = 0; f < 6; f++) {\r\n        if (faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n\r\n    // Create each face in turn.\r\n    for (var index = 0; index < nbFaces; index++) {\r\n        uvs.push(faceUV[index].z, faceUV[index].w);\r\n        uvs.push(faceUV[index].x, faceUV[index].w);\r\n        uvs.push(faceUV[index].x, faceUV[index].y);\r\n        uvs.push(faceUV[index].z, faceUV[index].y);\r\n        if (faceColors) {\r\n            for (var c = 0; c < 4; c++) {\r\n                colors.push(faceColors[index].r, faceColors[index].g, faceColors[index].b, faceColors[index].a);\r\n            }\r\n        }\r\n    }\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    var vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    if (faceColors) {\r\n        var totalColors = (sideOrientation === VertexData.DOUBLESIDE) ? colors.concat(colors) : colors;\r\n        vertexData.colors = totalColors;\r\n    }\r\n\r\n    return vertexData;\r\n};\r\n\r\nMesh.CreateBox = (name: string, size: number, scene: Nullable<Scene> = null, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    var options = {\r\n        size: size,\r\n        sideOrientation: sideOrientation,\r\n        updatable: updatable\r\n    };\r\n\r\n    return BoxBuilder.CreateBox(name, options, scene);\r\n};\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\r\nexport class BoxBuilder {\r\n    /**\r\n     * Creates a box mesh\r\n     * * The parameter `size` sets the size (float) of each box side (default 1)\r\n     * * You can set some different box dimensions by using the parameters `width`, `height` and `depth` (all by default have the same value of `size`)\r\n     * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements)\r\n     * * Please read this tutorial : https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors\r\n     * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n     * @see https://doc.babylonjs.com/how_to/set_shapes#box\r\n     * @param name defines the name of the mesh\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns the box mesh\r\n     */\r\n    public static CreateBox(name: string, options: { size?: number, width?: number, height?: number, depth?: number, faceUV?: Vector4[], faceColors?: Color4[], sideOrientation?: number, frontUVs?: Vector4, backUVs?: Vector4, wrap?: boolean, topBaseAt?: number, bottomBaseAt?: number, updatable?: boolean }, scene: Nullable<Scene> = null): Mesh {\r\n        var box = new Mesh(name, scene);\r\n\r\n        options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n        box._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n        var vertexData = VertexData.CreateBox(options);\r\n\r\n        vertexData.applyToMesh(box, options.updatable);\r\n\r\n        return box;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}