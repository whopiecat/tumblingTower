{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\n/**\r\n  * Block used for the particle blend multiply section\r\n  */\n\nvar ParticleBlendMultiplyBlock =\n/** @class */\nfunction (_super) {\n  __extends(ParticleBlendMultiplyBlock, _super);\n  /**\r\n   * Create a new ParticleBlendMultiplyBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function ParticleBlendMultiplyBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._isUnique = true;\n\n    _this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"alphaTexture\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"alphaColor\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"blendColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  ParticleBlendMultiplyBlock.prototype.getClassName = function () {\n    return \"ParticleBlendMultiplyBlock\";\n  };\n\n  Object.defineProperty(ParticleBlendMultiplyBlock.prototype, \"color\", {\n    /**\r\n     * Gets the color input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticleBlendMultiplyBlock.prototype, \"alphaTexture\", {\n    /**\r\n     * Gets the alphaTexture input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticleBlendMultiplyBlock.prototype, \"alphaColor\", {\n    /**\r\n     * Gets the alphaColor input component\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticleBlendMultiplyBlock.prototype, \"blendColor\", {\n    /**\r\n     * Gets the blendColor output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n  ParticleBlendMultiplyBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"sourceAlpha\");\n  };\n\n  ParticleBlendMultiplyBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      return;\n    }\n\n    state.compilationString += \"\\n            #ifdef BLENDMULTIPLYMODE\\n                \" + this._declareOutput(this.blendColor, state) + \";\\n                float sourceAlpha = \" + this.alphaColor.associatedVariableName + \" * \" + this.alphaTexture.associatedVariableName + \";\\n                \" + this.blendColor.associatedVariableName + \".rgb = \" + this.color.associatedVariableName + \".rgb * sourceAlpha + vec3(1.0) * (1.0 - sourceAlpha);\\n                \" + this.blendColor.associatedVariableName + \".a = \" + this.color.associatedVariableName + \".a;\\n            #else\\n                \" + this._declareOutput(this.blendColor, state) + \" = \" + this.color.associatedVariableName + \";\\n            #endif\\n        \";\n    return this;\n  };\n\n  return ParticleBlendMultiplyBlock;\n}(NodeMaterialBlock);\n\nexport { ParticleBlendMultiplyBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.ParticleBlendMultiplyBlock\"] = ParticleBlendMultiplyBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Particle/particleBlendMultiplyBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\n\r\n/**\r\n  * Block used for the particle blend multiply section\r\n  */\r\nexport class ParticleBlendMultiplyBlock extends NodeMaterialBlock {\r\n\r\n    /**\r\n     * Create a new ParticleBlendMultiplyBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"alphaTexture\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"alphaColor\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"blendColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ParticleBlendMultiplyBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the alphaTexture input component\r\n     */\r\n    public get alphaTexture(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the alphaColor input component\r\n     */\r\n    public get alphaColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the blendColor output component\r\n     */\r\n    public get blendColor(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"sourceAlpha\");\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            return;\r\n        }\r\n\r\n        state.compilationString += `\r\n            #ifdef BLENDMULTIPLYMODE\r\n                ${this._declareOutput(this.blendColor, state)};\r\n                float sourceAlpha = ${this.alphaColor.associatedVariableName} * ${this.alphaTexture.associatedVariableName};\r\n                ${this.blendColor.associatedVariableName}.rgb = ${this.color.associatedVariableName}.rgb * sourceAlpha + vec3(1.0) * (1.0 - sourceAlpha);\r\n                ${this.blendColor.associatedVariableName}.a = ${this.color.associatedVariableName}.a;\r\n            #else\r\n                ${this._declareOutput(this.blendColor, state)} = ${this.color.associatedVariableName};\r\n            #endif\r\n        `;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ParticleBlendMultiplyBlock\"] = ParticleBlendMultiplyBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}