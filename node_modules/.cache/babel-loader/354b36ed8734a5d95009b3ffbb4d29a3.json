{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable\";\nimport { PoseEnabledController } from \"./poseEnabledController\";\n/**\r\n * Defines the WebVRController object that represents controllers tracked in 3D space\r\n */\n\nvar WebVRController =\n/** @class */\nfunction (_super) {\n  __extends(WebVRController, _super);\n  /**\r\n   * Creates a new WebVRController from a gamepad\r\n   * @param vrGamepad the gamepad that the WebVRController should be created from\r\n   */\n\n\n  function WebVRController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this; // Observables\n\n    /**\r\n     * Fired when the trigger state has changed\r\n     */\n\n\n    _this.onTriggerStateChangedObservable = new Observable();\n    /**\r\n     * Fired when the main button state has changed\r\n     */\n\n    _this.onMainButtonStateChangedObservable = new Observable();\n    /**\r\n     * Fired when the secondary button state has changed\r\n     */\n\n    _this.onSecondaryButtonStateChangedObservable = new Observable();\n    /**\r\n     * Fired when the pad state has changed\r\n     */\n\n    _this.onPadStateChangedObservable = new Observable();\n    /**\r\n     * Fired when controllers stick values have changed\r\n     */\n\n    _this.onPadValuesChangedObservable = new Observable();\n    /**\r\n     * X and Y axis corresponding to the controllers joystick\r\n     */\n\n    _this.pad = {\n      x: 0,\n      y: 0\n    }; // avoid GC, store state in a tmp object\n\n    _this._changes = {\n      pressChanged: false,\n      touchChanged: false,\n      valueChanged: false,\n      changed: false\n    };\n    _this._buttons = new Array(vrGamepad.buttons.length);\n    _this.hand = vrGamepad.hand;\n    return _this;\n  }\n  /**\r\n   * Fired when a controller button's state has changed\r\n   * @param callback the callback containing the button that was modified\r\n   */\n\n\n  WebVRController.prototype.onButtonStateChange = function (callback) {\n    this._onButtonStateChange = callback;\n  };\n\n  Object.defineProperty(WebVRController.prototype, \"defaultModel\", {\n    /**\r\n     * The default controller model for the controller\r\n     */\n    get: function () {\n      return this._defaultModel;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Updates the state of the controller and mesh based on the current position and rotation of the controller\r\n   */\n\n  WebVRController.prototype.update = function () {\n    _super.prototype.update.call(this);\n\n    for (var index = 0; index < this._buttons.length; index++) {\n      this._setButtonValue(this.browserGamepad.buttons[index], this._buttons[index], index);\n    }\n\n    if (this.leftStick.x !== this.pad.x || this.leftStick.y !== this.pad.y) {\n      this.pad.x = this.leftStick.x;\n      this.pad.y = this.leftStick.y;\n      this.onPadValuesChangedObservable.notifyObservers(this.pad);\n    }\n  };\n\n  WebVRController.prototype._setButtonValue = function (newState, currentState, buttonIndex) {\n    if (!newState) {\n      newState = {\n        pressed: false,\n        touched: false,\n        value: 0\n      };\n    }\n\n    if (!currentState) {\n      this._buttons[buttonIndex] = {\n        pressed: newState.pressed,\n        touched: newState.touched,\n        value: newState.value\n      };\n      return;\n    }\n\n    this._checkChanges(newState, currentState);\n\n    if (this._changes.changed) {\n      this._onButtonStateChange && this._onButtonStateChange(this.index, buttonIndex, newState);\n\n      this._handleButtonChange(buttonIndex, newState, this._changes);\n    }\n\n    this._buttons[buttonIndex].pressed = newState.pressed;\n    this._buttons[buttonIndex].touched = newState.touched; // oculus triggers are never 0, thou not touched.\n\n    this._buttons[buttonIndex].value = newState.value < 0.00000001 ? 0 : newState.value;\n  };\n\n  WebVRController.prototype._checkChanges = function (newState, currentState) {\n    this._changes.pressChanged = newState.pressed !== currentState.pressed;\n    this._changes.touchChanged = newState.touched !== currentState.touched;\n    this._changes.valueChanged = newState.value !== currentState.value;\n    this._changes.changed = this._changes.pressChanged || this._changes.touchChanged || this._changes.valueChanged;\n    return this._changes;\n  };\n  /**\r\n   * Disposes of th webVRCOntroller\r\n   */\n\n\n  WebVRController.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._defaultModel = null;\n    this.onTriggerStateChangedObservable.clear();\n    this.onMainButtonStateChangedObservable.clear();\n    this.onSecondaryButtonStateChangedObservable.clear();\n    this.onPadStateChangedObservable.clear();\n    this.onPadValuesChangedObservable.clear();\n  };\n\n  return WebVRController;\n}(PoseEnabledController);\n\nexport { WebVRController };","map":{"version":3,"sources":["../../../../sourceES6/core/Gamepads/Controllers/webVRController.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,uBAA3B;AAGA,SAAS,qBAAT,QAAmF,yBAAnF;AAIA;;;;AAGA,IAAA,eAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8C,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;AA4D1C;;;;;;AAIA,WAAA,eAAA,CAAY,SAAZ,EAA0B;AAA1B,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,KAAgB,IADpB,CAA0B,CA1D1B;;AACA;;;;;AAGO,IAAA,KAAA,CAAA,+BAAA,GAAkC,IAAI,UAAJ,EAAlC;AACP;;;;AAGO,IAAA,KAAA,CAAA,kCAAA,GAAqC,IAAI,UAAJ,EAArC;AACP;;;;AAGO,IAAA,KAAA,CAAA,uCAAA,GAA0C,IAAI,UAAJ,EAA1C;AACP;;;;AAGO,IAAA,KAAA,CAAA,2BAAA,GAA8B,IAAI,UAAJ,EAA9B;AACP;;;;AAGO,IAAA,KAAA,CAAA,4BAAA,GAA+B,IAAI,UAAJ,EAA/B;AAiBP;;;;AAGO,IAAA,KAAA,CAAA,GAAA,GAAmB;AAAE,MAAA,CAAC,EAAE,CAAL;AAAQ,MAAA,CAAC,EAAE;AAAX,KAAnB,CAkBmB,CA6D1B;;AACQ,IAAA,KAAA,CAAA,QAAA,GAAiC;AACrC,MAAA,YAAY,EAAE,KADuB;AAErC,MAAA,YAAY,EAAE,KAFuB;AAGrC,MAAA,YAAY,EAAE,KAHuB;AAIrC,MAAA,OAAO,EAAE;AAJ4B,KAAjC;AA5DJ,IAAA,KAAI,CAAC,QAAL,GAAgB,IAAI,KAAJ,CAAiC,SAAS,CAAC,OAAV,CAAkB,MAAnD,CAAhB;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,SAAS,CAAC,IAAtB;;AACH;AAjCD;;;;;;AAIO,EAAA,eAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,QAA3B,EAAyH;AACrH,SAAK,oBAAL,GAA4B,QAA5B;AACH,GAFM;;AAiBP,EAAA,MAAA,CAAA,cAAA,CAAW,eAAA,CAAA,SAAX,EAAW,cAAX,EAAuB;AAHvB;;;SAGA,YAAA;AACI,aAAO,KAAK,aAAZ;AACH,KAFsB;qBAAA;;AAAA,GAAvB;AAcA;;;;AAGO,EAAA,eAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACI,IAAA,MAAA,CAAA,SAAA,CAAM,MAAN,CAAY,IAAZ,CAAY,IAAZ;;AACA,SAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,GAAG,KAAK,QAAL,CAAc,MAA1C,EAAkD,KAAK,EAAvD,EAA2D;AACvD,WAAK,eAAL,CAAqB,KAAK,cAAL,CAAoB,OAApB,CAA4B,KAA5B,CAArB,EAAyD,KAAK,QAAL,CAAc,KAAd,CAAzD,EAA+E,KAA/E;AACH;;AACD,QAAI,KAAK,SAAL,CAAe,CAAf,KAAqB,KAAK,GAAL,CAAS,CAA9B,IAAmC,KAAK,SAAL,CAAe,CAAf,KAAqB,KAAK,GAAL,CAAS,CAArE,EAAwE;AACpE,WAAK,GAAL,CAAS,CAAT,GAAa,KAAK,SAAL,CAAe,CAA5B;AACA,WAAK,GAAL,CAAS,CAAT,GAAa,KAAK,SAAL,CAAe,CAA5B;AACA,WAAK,4BAAL,CAAkC,eAAlC,CAAkD,KAAK,GAAvD;AACH;AACJ,GAVM;;AAwBC,EAAA,eAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,QAAxB,EAAyD,YAAzD,EAA8F,WAA9F,EAAiH;AAC7G,QAAI,CAAC,QAAL,EAAe;AACX,MAAA,QAAQ,GAAG;AACP,QAAA,OAAO,EAAE,KADF;AAEP,QAAA,OAAO,EAAE,KAFF;AAGP,QAAA,KAAK,EAAE;AAHA,OAAX;AAKH;;AACD,QAAI,CAAC,YAAL,EAAmB;AACf,WAAK,QAAL,CAAc,WAAd,IAA6B;AACzB,QAAA,OAAO,EAAE,QAAQ,CAAC,OADO;AAEzB,QAAA,OAAO,EAAE,QAAQ,CAAC,OAFO;AAGzB,QAAA,KAAK,EAAE,QAAQ,CAAC;AAHS,OAA7B;AAKA;AACH;;AACD,SAAK,aAAL,CAAmB,QAAnB,EAA6B,YAA7B;;AACA,QAAI,KAAK,QAAL,CAAc,OAAlB,EAA2B;AACvB,WAAK,oBAAL,IAA6B,KAAK,oBAAL,CAA0B,KAAK,KAA/B,EAAsC,WAAtC,EAAmD,QAAnD,CAA7B;;AAEA,WAAK,mBAAL,CAAyB,WAAzB,EAAsC,QAAtC,EAAgD,KAAK,QAArD;AACH;;AACD,SAAK,QAAL,CAAc,WAAd,EAA2B,OAA3B,GAAqC,QAAQ,CAAC,OAA9C;AACA,SAAK,QAAL,CAAc,WAAd,EAA2B,OAA3B,GAAqC,QAAQ,CAAC,OAA9C,CAvB6G,CAwB7G;;AACA,SAAK,QAAL,CAAc,WAAd,EAA2B,KAA3B,GAAmC,QAAQ,CAAC,KAAT,GAAiB,UAAjB,GAA8B,CAA9B,GAAkC,QAAQ,CAAC,KAA9E;AACH,GA1BO;;AAoCA,EAAA,eAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,QAAtB,EAAuD,YAAvD,EAA0F;AACtF,SAAK,QAAL,CAAc,YAAd,GAA6B,QAAQ,CAAC,OAAT,KAAqB,YAAY,CAAC,OAA/D;AACA,SAAK,QAAL,CAAc,YAAd,GAA6B,QAAQ,CAAC,OAAT,KAAqB,YAAY,CAAC,OAA/D;AACA,SAAK,QAAL,CAAc,YAAd,GAA6B,QAAQ,CAAC,KAAT,KAAmB,YAAY,CAAC,KAA7D;AACA,SAAK,QAAL,CAAc,OAAd,GAAwB,KAAK,QAAL,CAAc,YAAd,IAA8B,KAAK,QAAL,CAAc,YAA5C,IAA4D,KAAK,QAAL,CAAc,YAAlG;AACA,WAAO,KAAK,QAAZ;AACH,GANO;AAQR;;;;;AAGO,EAAA,eAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AAEA,SAAK,aAAL,GAAqB,IAArB;AAEA,SAAK,+BAAL,CAAqC,KAArC;AACA,SAAK,kCAAL,CAAwC,KAAxC;AACA,SAAK,uCAAL,CAA6C,KAA7C;AACA,SAAK,2BAAL,CAAiC,KAAjC;AACA,SAAK,4BAAL,CAAkC,KAAlC;AACH,GAVM;;AAWX,SAAA,eAAA;AAAC,CA3JD,CAA8C,qBAA9C,CAAA","sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport { Scene } from \"../../scene\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { PoseEnabledController, ExtendedGamepadButton, MutableGamepadButton } from \"./poseEnabledController\";\r\nimport { StickValues, GamepadButtonChanges } from \"../../Gamepads/gamepad\";\r\nimport { Nullable } from '../../types';\r\n\r\n/**\r\n * Defines the WebVRController object that represents controllers tracked in 3D space\r\n */\r\nexport abstract class WebVRController extends PoseEnabledController {\r\n    /**\r\n     * Internal, the default controller model for the controller\r\n     */\r\n    protected _defaultModel: Nullable<AbstractMesh>;\r\n\r\n    // Observables\r\n    /**\r\n     * Fired when the trigger state has changed\r\n     */\r\n    public onTriggerStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when the main button state has changed\r\n     */\r\n    public onMainButtonStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when the secondary button state has changed\r\n     */\r\n    public onSecondaryButtonStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when the pad state has changed\r\n     */\r\n    public onPadStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when controllers stick values have changed\r\n     */\r\n    public onPadValuesChangedObservable = new Observable<StickValues>();\r\n\r\n    /**\r\n     * Array of button availible on the controller\r\n     */\r\n    protected _buttons: Array<MutableGamepadButton>;\r\n\r\n    private _onButtonStateChange: (controlledIndex: number, buttonIndex: number, state: ExtendedGamepadButton) => void;\r\n\r\n    /**\r\n     * Fired when a controller button's state has changed\r\n     * @param callback the callback containing the button that was modified\r\n     */\r\n    public onButtonStateChange(callback: (controlledIndex: number, buttonIndex: number, state: ExtendedGamepadButton) => void) {\r\n        this._onButtonStateChange = callback;\r\n    }\r\n\r\n    /**\r\n     * X and Y axis corresponding to the controllers joystick\r\n     */\r\n    public pad: StickValues = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * 'left' or 'right', see https://w3c.github.io/gamepad/extensions.html#gamepadhand-enum\r\n     */\r\n    public hand: string;\r\n\r\n    /**\r\n     * The default controller model for the controller\r\n     */\r\n    public get defaultModel(): Nullable<AbstractMesh> {\r\n        return this._defaultModel;\r\n    }\r\n\r\n    /**\r\n     * Creates a new WebVRController from a gamepad\r\n     * @param vrGamepad the gamepad that the WebVRController should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this._buttons = new Array<ExtendedGamepadButton>(vrGamepad.buttons.length);\r\n        this.hand = vrGamepad.hand;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the controller and mesh based on the current position and rotation of the controller\r\n     */\r\n    public update() {\r\n        super.update();\r\n        for (var index = 0; index < this._buttons.length; index++) {\r\n            this._setButtonValue(this.browserGamepad.buttons[index], this._buttons[index], index);\r\n        }\r\n        if (this.leftStick.x !== this.pad.x || this.leftStick.y !== this.pad.y) {\r\n            this.pad.x = this.leftStick.x;\r\n            this.pad.y = this.leftStick.y;\r\n            this.onPadValuesChangedObservable.notifyObservers(this.pad);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to be called when a button is modified\r\n     */\r\n    protected abstract _handleButtonChange(buttonIdx: number, value: ExtendedGamepadButton, changes: GamepadButtonChanges): void;\r\n\r\n    /**\r\n     * Loads a mesh and attaches it to the controller\r\n     * @param scene the scene the mesh should be added to\r\n     * @param meshLoaded callback for when the mesh has been loaded\r\n     */\r\n    public abstract initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void): void;\r\n\r\n    private _setButtonValue(newState: ExtendedGamepadButton, currentState: ExtendedGamepadButton, buttonIndex: number) {\r\n        if (!newState) {\r\n            newState = {\r\n                pressed: false,\r\n                touched: false,\r\n                value: 0\r\n            };\r\n        }\r\n        if (!currentState) {\r\n            this._buttons[buttonIndex] = {\r\n                pressed: newState.pressed,\r\n                touched: newState.touched,\r\n                value: newState.value\r\n            };\r\n            return;\r\n        }\r\n        this._checkChanges(newState, currentState);\r\n        if (this._changes.changed) {\r\n            this._onButtonStateChange && this._onButtonStateChange(this.index, buttonIndex, newState);\r\n\r\n            this._handleButtonChange(buttonIndex, newState, this._changes);\r\n        }\r\n        this._buttons[buttonIndex].pressed = newState.pressed;\r\n        this._buttons[buttonIndex].touched = newState.touched;\r\n        // oculus triggers are never 0, thou not touched.\r\n        this._buttons[buttonIndex].value = newState.value < 0.00000001 ? 0 : newState.value;\r\n    }\r\n\r\n    // avoid GC, store state in a tmp object\r\n    private _changes: GamepadButtonChanges = {\r\n        pressChanged: false,\r\n        touchChanged: false,\r\n        valueChanged: false,\r\n        changed: false\r\n    };\r\n\r\n    private _checkChanges(newState: ExtendedGamepadButton, currentState: ExtendedGamepadButton) {\r\n        this._changes.pressChanged = newState.pressed !== currentState.pressed;\r\n        this._changes.touchChanged = newState.touched !== currentState.touched;\r\n        this._changes.valueChanged = newState.value !== currentState.value;\r\n        this._changes.changed = this._changes.pressChanged || this._changes.touchChanged || this._changes.valueChanged;\r\n        return this._changes;\r\n    }\r\n\r\n    /**\r\n     * Disposes of th webVRCOntroller\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this._defaultModel = null;\r\n\r\n        this.onTriggerStateChangedObservable.clear();\r\n        this.onMainButtonStateChangedObservable.clear();\r\n        this.onSecondaryButtonStateChangedObservable.clear();\r\n        this.onPadStateChangedObservable.clear();\r\n        this.onPadValuesChangedObservable.clear();\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}