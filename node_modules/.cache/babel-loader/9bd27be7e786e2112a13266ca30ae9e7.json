{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper } from \"../../Misc/decorators\";\nimport { Observable } from \"../../Misc/observable\";\nimport { Matrix, TmpVectors, Vector3 } from \"../../Maths/math.vector\";\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\nimport { _TypeStore } from '../../Misc/typeStore';\nimport { _DevTools } from '../../Misc/devTools';\nimport { TimingTools } from '../../Misc/timingTools';\nimport { InstantiationTools } from '../../Misc/instantiationTools';\nimport { Plane } from '../../Maths/math.plane';\nimport { StringTools } from '../../Misc/stringTools';\nimport { CopyTools } from '../../Misc/copyTools';\n/**\r\n * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\r\n * @see https://doc.babylonjs.com/babylon101/materials#texture\r\n */\n\nvar Texture =\n/** @class */\nfunction (_super) {\n  __extends(Texture, _super);\n  /**\r\n   * Instantiates a new texture.\r\n   * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\r\n   * @see https://doc.babylonjs.com/babylon101/materials#texture\r\n   * @param url defines the url of the picture to load as a texture\r\n   * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n   * @param noMipmap defines if the texture will require mip maps or not\r\n   * @param invertY defines if the texture needs to be inverted on the y axis during loading\r\n   * @param samplingMode defines the sampling mode we want for the texture while fectching from it (Texture.NEAREST_SAMPLINGMODE...)\r\n   * @param onLoad defines a callback triggered when the texture has been loaded\r\n   * @param onError defines a callback triggered when an error occurred during the loading session\r\n   * @param buffer defines the buffer to load the texture from in case the texture is loaded from a buffer representation\r\n   * @param deleteBuffer defines if the buffer we are loading the texture from should be deleted after load\r\n   * @param format defines the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\r\n   * @param mimeType defines an optional mime type information\r\n   * @param loaderOptions options to be passed to the loader\r\n   */\n\n\n  function Texture(url, sceneOrEngine, noMipmap, invertY, samplingMode, onLoad, onError, buffer, deleteBuffer, format, mimeType, loaderOptions) {\n    if (noMipmap === void 0) {\n      noMipmap = false;\n    }\n\n    if (invertY === void 0) {\n      invertY = true;\n    }\n\n    if (samplingMode === void 0) {\n      samplingMode = Texture.TRILINEAR_SAMPLINGMODE;\n    }\n\n    if (onLoad === void 0) {\n      onLoad = null;\n    }\n\n    if (onError === void 0) {\n      onError = null;\n    }\n\n    if (buffer === void 0) {\n      buffer = null;\n    }\n\n    if (deleteBuffer === void 0) {\n      deleteBuffer = false;\n    }\n\n    var _this = _super.call(this, sceneOrEngine) || this;\n    /**\r\n     * Define the url of the texture.\r\n     */\n\n\n    _this.url = null;\n    /**\r\n     * Define an offset on the texture to offset the u coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/how_to/more_materials#offsetting\r\n     */\n\n    _this.uOffset = 0;\n    /**\r\n     * Define an offset on the texture to offset the v coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/how_to/more_materials#offsetting\r\n     */\n\n    _this.vOffset = 0;\n    /**\r\n     * Define an offset on the texture to scale the u coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/how_to/more_materials#tiling\r\n     */\n\n    _this.uScale = 1.0;\n    /**\r\n     * Define an offset on the texture to scale the v coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/how_to/more_materials#tiling\r\n     */\n\n    _this.vScale = 1.0;\n    /**\r\n     * Define an offset on the texture to rotate around the u coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/how_to/more_materials\r\n     */\n\n    _this.uAng = 0;\n    /**\r\n     * Define an offset on the texture to rotate around the v coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/how_to/more_materials\r\n     */\n\n    _this.vAng = 0;\n    /**\r\n     * Define an offset on the texture to rotate around the w coordinates of the UVs (in case of 3d texture)\r\n     * @see https://doc.babylonjs.com/how_to/more_materials\r\n     */\n\n    _this.wAng = 0;\n    /**\r\n     * Defines the center of rotation (U)\r\n     */\n\n    _this.uRotationCenter = 0.5;\n    /**\r\n     * Defines the center of rotation (V)\r\n     */\n\n    _this.vRotationCenter = 0.5;\n    /**\r\n     * Defines the center of rotation (W)\r\n     */\n\n    _this.wRotationCenter = 0.5;\n    /**\r\n     * Sets this property to true to avoid deformations when rotating the texture with non-uniform scaling\r\n     */\n\n    _this.homogeneousRotationInUVTransform = false;\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/how_to/debug_layer#extensibility\r\n     */\n\n    _this.inspectableCustomProperties = null;\n    _this._noMipmap = false;\n    /** @hidden */\n\n    _this._invertY = false;\n    _this._rowGenerationMatrix = null;\n    _this._cachedTextureMatrix = null;\n    _this._projectionModeMatrix = null;\n    _this._t0 = null;\n    _this._t1 = null;\n    _this._t2 = null;\n    _this._cachedUOffset = -1;\n    _this._cachedVOffset = -1;\n    _this._cachedUScale = 0;\n    _this._cachedVScale = 0;\n    _this._cachedUAng = -1;\n    _this._cachedVAng = -1;\n    _this._cachedWAng = -1;\n    _this._cachedProjectionMatrixId = -1;\n    _this._cachedURotationCenter = -1;\n    _this._cachedVRotationCenter = -1;\n    _this._cachedWRotationCenter = -1;\n    _this._cachedHomogeneousRotationInUVTransform = false;\n    _this._cachedCoordinatesMode = -1;\n    /** @hidden */\n\n    _this._initialSamplingMode = Texture.BILINEAR_SAMPLINGMODE;\n    /** @hidden */\n\n    _this._buffer = null;\n    _this._deleteBuffer = false;\n    _this._format = null;\n    _this._delayedOnLoad = null;\n    _this._delayedOnError = null;\n    /**\r\n     * Observable triggered once the texture has been loaded.\r\n     */\n\n    _this.onLoadObservable = new Observable();\n    _this._isBlocking = true;\n    _this.name = url || \"\";\n    _this.url = url;\n    _this._noMipmap = noMipmap;\n    _this._invertY = invertY;\n    _this._initialSamplingMode = samplingMode;\n    _this._buffer = buffer;\n    _this._deleteBuffer = deleteBuffer;\n    _this._mimeType = mimeType;\n    _this._loaderOptions = loaderOptions;\n\n    if (format) {\n      _this._format = format;\n    }\n\n    var scene = _this.getScene();\n\n    var engine = _this._getEngine();\n\n    if (!engine) {\n      return _this;\n    }\n\n    engine.onBeforeTextureInitObservable.notifyObservers(_this);\n\n    var load = function () {\n      if (_this._texture) {\n        if (_this._texture._invertVScale) {\n          _this.vScale *= -1;\n          _this.vOffset += 1;\n        } // Update texutre to match internal texture's wrapping\n\n\n        if (_this._texture._cachedWrapU !== null) {\n          _this.wrapU = _this._texture._cachedWrapU;\n          _this._texture._cachedWrapU = null;\n        }\n\n        if (_this._texture._cachedWrapV !== null) {\n          _this.wrapV = _this._texture._cachedWrapV;\n          _this._texture._cachedWrapV = null;\n        }\n\n        if (_this._texture._cachedWrapR !== null) {\n          _this.wrapR = _this._texture._cachedWrapR;\n          _this._texture._cachedWrapR = null;\n        }\n      }\n\n      if (_this.onLoadObservable.hasObservers()) {\n        _this.onLoadObservable.notifyObservers(_this);\n      }\n\n      if (onLoad) {\n        onLoad();\n      }\n\n      if (!_this.isBlocking && scene) {\n        scene.resetCachedMaterial();\n      }\n    };\n\n    if (!_this.url) {\n      _this._delayedOnLoad = load;\n      _this._delayedOnError = onError;\n      return _this;\n    }\n\n    _this._texture = _this._getFromCache(_this.url, noMipmap, samplingMode, invertY);\n\n    if (!_this._texture) {\n      if (!scene || !scene.useDelayedTextureLoading) {\n        _this._texture = engine.createTexture(_this.url, noMipmap, invertY, scene, samplingMode, load, onError, _this._buffer, undefined, _this._format, null, mimeType, loaderOptions);\n\n        if (deleteBuffer) {\n          _this._buffer = null;\n        }\n      } else {\n        _this.delayLoadState = 4;\n        _this._delayedOnLoad = load;\n        _this._delayedOnError = onError;\n      }\n    } else {\n      if (_this._texture.isReady) {\n        TimingTools.SetImmediate(function () {\n          return load();\n        });\n      } else {\n        _this._texture.onLoadedObservable.add(load);\n      }\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(Texture.prototype, \"noMipmap\", {\n    /**\r\n     * Are mip maps generated for this texture or not.\r\n     */\n    get: function () {\n      return this._noMipmap;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Texture.prototype, \"mimeType\", {\n    /** Returns the texture mime type if it was defined by a loader (undefined else) */\n    get: function () {\n      return this._mimeType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Texture.prototype, \"isBlocking\", {\n    get: function () {\n      return this._isBlocking;\n    },\n\n    /**\r\n     * Is the texture preventing material to render while loading.\r\n     * If false, a default texture will be used instead of the loading one during the preparation step.\r\n     */\n    set: function (value) {\n      this._isBlocking = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Texture.prototype, \"samplingMode\", {\n    /**\r\n     * Get the current sampling mode associated with the texture.\r\n     */\n    get: function () {\n      if (!this._texture) {\n        return this._initialSamplingMode;\n      }\n\n      return this._texture.samplingMode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Texture.prototype, \"invertY\", {\n    /**\r\n     * Gets a boolean indicating if the texture needs to be inverted on the y axis during loading\r\n     */\n    get: function () {\n      return this._invertY;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Update the url (and optional buffer) of this texture if url was null during construction.\r\n   * @param url the url of the texture\r\n   * @param buffer the buffer of the texture (defaults to null)\r\n   * @param onLoad callback called when the texture is loaded  (defaults to null)\r\n   */\n\n  Texture.prototype.updateURL = function (url, buffer, onLoad) {\n    if (buffer === void 0) {\n      buffer = null;\n    }\n\n    if (this.url) {\n      this.releaseInternalTexture();\n      this.getScene().markAllMaterialsAsDirty(1);\n    }\n\n    if (!this.name || StringTools.StartsWith(this.name, \"data:\")) {\n      this.name = url;\n    }\n\n    this.url = url;\n    this._buffer = buffer;\n    this.delayLoadState = 4;\n\n    if (onLoad) {\n      this._delayedOnLoad = onLoad;\n    }\n\n    this.delayLoad();\n  };\n  /**\r\n   * Finish the loading sequence of a texture flagged as delayed load.\r\n   * @hidden\r\n   */\n\n\n  Texture.prototype.delayLoad = function () {\n    if (this.delayLoadState !== 4) {\n      return;\n    }\n\n    var scene = this.getScene();\n\n    if (!scene) {\n      return;\n    }\n\n    this.delayLoadState = 1;\n    this._texture = this._getFromCache(this.url, this._noMipmap, this.samplingMode, this._invertY);\n\n    if (!this._texture) {\n      this._texture = scene.getEngine().createTexture(this.url, this._noMipmap, this._invertY, scene, this.samplingMode, this._delayedOnLoad, this._delayedOnError, this._buffer, null, this._format, null, this._mimeType, this._loaderOptions);\n\n      if (this._deleteBuffer) {\n        this._buffer = null;\n      }\n    } else {\n      if (this._delayedOnLoad) {\n        if (this._texture.isReady) {\n          TimingTools.SetImmediate(this._delayedOnLoad);\n        } else {\n          this._texture.onLoadedObservable.add(this._delayedOnLoad);\n        }\n      }\n    }\n\n    this._delayedOnLoad = null;\n    this._delayedOnError = null;\n  };\n\n  Texture.prototype._prepareRowForTextureGeneration = function (x, y, z, t) {\n    x *= this._cachedUScale;\n    y *= this._cachedVScale;\n    x -= this.uRotationCenter * this._cachedUScale;\n    y -= this.vRotationCenter * this._cachedVScale;\n    z -= this.wRotationCenter;\n    Vector3.TransformCoordinatesFromFloatsToRef(x, y, z, this._rowGenerationMatrix, t);\n    t.x += this.uRotationCenter * this._cachedUScale + this._cachedUOffset;\n    t.y += this.vRotationCenter * this._cachedVScale + this._cachedVOffset;\n    t.z += this.wRotationCenter;\n  };\n  /**\r\n   * Checks if the texture has the same transform matrix than another texture\r\n   * @param texture texture to check against\r\n   * @returns true if the transforms are the same, else false\r\n   */\n\n\n  Texture.prototype.checkTransformsAreIdentical = function (texture) {\n    return texture !== null && this.uOffset === texture.uOffset && this.vOffset === texture.vOffset && this.uScale === texture.uScale && this.vScale === texture.vScale && this.uAng === texture.uAng && this.vAng === texture.vAng && this.wAng === texture.wAng;\n  };\n  /**\r\n   * Get the current texture matrix which includes the requested offsetting, tiling and rotation components.\r\n   * @returns the transform matrix of the texture.\r\n   */\n\n\n  Texture.prototype.getTextureMatrix = function (uBase) {\n    var _this = this;\n\n    if (uBase === void 0) {\n      uBase = 1;\n    }\n\n    if (this.uOffset === this._cachedUOffset && this.vOffset === this._cachedVOffset && this.uScale * uBase === this._cachedUScale && this.vScale === this._cachedVScale && this.uAng === this._cachedUAng && this.vAng === this._cachedVAng && this.wAng === this._cachedWAng && this.uRotationCenter === this._cachedURotationCenter && this.vRotationCenter === this._cachedVRotationCenter && this.wRotationCenter === this._cachedWRotationCenter && this.homogeneousRotationInUVTransform === this._cachedHomogeneousRotationInUVTransform) {\n      return this._cachedTextureMatrix;\n    }\n\n    this._cachedUOffset = this.uOffset;\n    this._cachedVOffset = this.vOffset;\n    this._cachedUScale = this.uScale * uBase;\n    this._cachedVScale = this.vScale;\n    this._cachedUAng = this.uAng;\n    this._cachedVAng = this.vAng;\n    this._cachedWAng = this.wAng;\n    this._cachedURotationCenter = this.uRotationCenter;\n    this._cachedVRotationCenter = this.vRotationCenter;\n    this._cachedWRotationCenter = this.wRotationCenter;\n    this._cachedHomogeneousRotationInUVTransform = this.homogeneousRotationInUVTransform;\n\n    if (!this._cachedTextureMatrix || !this._rowGenerationMatrix) {\n      this._cachedTextureMatrix = Matrix.Zero();\n      this._rowGenerationMatrix = new Matrix();\n      this._t0 = Vector3.Zero();\n      this._t1 = Vector3.Zero();\n      this._t2 = Vector3.Zero();\n    }\n\n    Matrix.RotationYawPitchRollToRef(this.vAng, this.uAng, this.wAng, this._rowGenerationMatrix);\n\n    if (this.homogeneousRotationInUVTransform) {\n      Matrix.TranslationToRef(-this._cachedURotationCenter, -this._cachedVRotationCenter, -this._cachedWRotationCenter, TmpVectors.Matrix[0]);\n      Matrix.TranslationToRef(this._cachedURotationCenter, this._cachedVRotationCenter, this._cachedWRotationCenter, TmpVectors.Matrix[1]);\n      Matrix.ScalingToRef(this._cachedUScale, this._cachedVScale, 0, TmpVectors.Matrix[2]);\n      Matrix.TranslationToRef(this._cachedUOffset, this._cachedVOffset, 0, TmpVectors.Matrix[3]);\n      TmpVectors.Matrix[0].multiplyToRef(this._rowGenerationMatrix, this._cachedTextureMatrix);\n\n      this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[1], this._cachedTextureMatrix);\n\n      this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[2], this._cachedTextureMatrix);\n\n      this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[3], this._cachedTextureMatrix); // copy the translation row to the 3rd row of the matrix so that we don't need to update the shaders (which expects the translation to be on the 3rd row)\n\n\n      this._cachedTextureMatrix.setRowFromFloats(2, this._cachedTextureMatrix.m[12], this._cachedTextureMatrix.m[13], this._cachedTextureMatrix.m[14], 1);\n    } else {\n      this._prepareRowForTextureGeneration(0, 0, 0, this._t0);\n\n      this._prepareRowForTextureGeneration(1.0, 0, 0, this._t1);\n\n      this._prepareRowForTextureGeneration(0, 1.0, 0, this._t2);\n\n      this._t1.subtractInPlace(this._t0);\n\n      this._t2.subtractInPlace(this._t0);\n\n      Matrix.FromValuesToRef(this._t1.x, this._t1.y, this._t1.z, 0.0, this._t2.x, this._t2.y, this._t2.z, 0.0, this._t0.x, this._t0.y, this._t0.z, 0.0, 0.0, 0.0, 0.0, 1.0, this._cachedTextureMatrix);\n    }\n\n    var scene = this.getScene();\n\n    if (!scene) {\n      return this._cachedTextureMatrix;\n    }\n\n    scene.markAllMaterialsAsDirty(1, function (mat) {\n      return mat.hasTexture(_this);\n    });\n    return this._cachedTextureMatrix;\n  };\n  /**\r\n   * Get the current matrix used to apply reflection. This is useful to rotate an environment texture for instance.\r\n   * @returns The reflection texture transform\r\n   */\n\n\n  Texture.prototype.getReflectionTextureMatrix = function () {\n    var _this = this;\n\n    var scene = this.getScene();\n\n    if (!scene) {\n      return this._cachedTextureMatrix;\n    }\n\n    if (this.uOffset === this._cachedUOffset && this.vOffset === this._cachedVOffset && this.uScale === this._cachedUScale && this.vScale === this._cachedVScale && this.coordinatesMode === this._cachedCoordinatesMode) {\n      if (this.coordinatesMode === Texture.PROJECTION_MODE) {\n        if (this._cachedProjectionMatrixId === scene.getProjectionMatrix().updateFlag) {\n          return this._cachedTextureMatrix;\n        }\n      } else {\n        return this._cachedTextureMatrix;\n      }\n    }\n\n    if (!this._cachedTextureMatrix) {\n      this._cachedTextureMatrix = Matrix.Zero();\n    }\n\n    if (!this._projectionModeMatrix) {\n      this._projectionModeMatrix = Matrix.Zero();\n    }\n\n    this._cachedUOffset = this.uOffset;\n    this._cachedVOffset = this.vOffset;\n    this._cachedUScale = this.uScale;\n    this._cachedVScale = this.vScale;\n    this._cachedCoordinatesMode = this.coordinatesMode;\n\n    switch (this.coordinatesMode) {\n      case Texture.PLANAR_MODE:\n        Matrix.IdentityToRef(this._cachedTextureMatrix);\n        this._cachedTextureMatrix[0] = this.uScale;\n        this._cachedTextureMatrix[5] = this.vScale;\n        this._cachedTextureMatrix[12] = this.uOffset;\n        this._cachedTextureMatrix[13] = this.vOffset;\n        break;\n\n      case Texture.PROJECTION_MODE:\n        Matrix.FromValuesToRef(0.5, 0.0, 0.0, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 1.0, 1.0, this._projectionModeMatrix);\n        var projectionMatrix = scene.getProjectionMatrix();\n        this._cachedProjectionMatrixId = projectionMatrix.updateFlag;\n        projectionMatrix.multiplyToRef(this._projectionModeMatrix, this._cachedTextureMatrix);\n        break;\n\n      default:\n        Matrix.IdentityToRef(this._cachedTextureMatrix);\n        break;\n    }\n\n    scene.markAllMaterialsAsDirty(1, function (mat) {\n      return mat.getActiveTextures().indexOf(_this) !== -1;\n    });\n    return this._cachedTextureMatrix;\n  };\n  /**\r\n   * Clones the texture.\r\n   * @returns the cloned texture\r\n   */\n\n\n  Texture.prototype.clone = function () {\n    var _this = this;\n\n    return SerializationHelper.Clone(function () {\n      return new Texture(_this._texture ? _this._texture.url : null, _this.getScene(), _this._noMipmap, _this._invertY, _this.samplingMode, undefined, undefined, _this._texture ? _this._texture._buffer : undefined);\n    }, this);\n  };\n  /**\r\n   * Serialize the texture to a JSON representation we can easily use in the resepective Parse function.\r\n   * @returns The JSON representation of the texture\r\n   */\n\n\n  Texture.prototype.serialize = function () {\n    var savedName = this.name;\n\n    if (!Texture.SerializeBuffers) {\n      if (StringTools.StartsWith(this.name, \"data:\")) {\n        this.name = \"\";\n      }\n    }\n\n    if (StringTools.StartsWith(this.name, \"data:\") && this.url === this.name) {\n      this.url = \"\";\n    }\n\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    if (!serializationObject) {\n      return null;\n    }\n\n    if (Texture.SerializeBuffers || Texture.ForceSerializeBuffers) {\n      if (typeof this._buffer === \"string\" && this._buffer.substr(0, 5) === \"data:\") {\n        serializationObject.base64String = this._buffer;\n        serializationObject.name = serializationObject.name.replace(\"data:\", \"\");\n      } else if (this.url && StringTools.StartsWith(this.url, \"data:\") && this._buffer instanceof Uint8Array) {\n        serializationObject.base64String = \"data:image/png;base64,\" + StringTools.EncodeArrayBufferToBase64(this._buffer);\n      } else if (Texture.ForceSerializeBuffers) {\n        serializationObject.base64String = CopyTools.GenerateBase64StringFromTexture(this);\n      }\n    }\n\n    serializationObject.invertY = this._invertY;\n    serializationObject.samplingMode = this.samplingMode;\n    this.name = savedName;\n    return serializationObject;\n  };\n  /**\r\n   * Get the current class name of the texture useful for serialization or dynamic coding.\r\n   * @returns \"Texture\"\r\n   */\n\n\n  Texture.prototype.getClassName = function () {\n    return \"Texture\";\n  };\n  /**\r\n   * Dispose the texture and release its associated resources.\r\n   */\n\n\n  Texture.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onLoadObservable.clear();\n    this._delayedOnLoad = null;\n    this._delayedOnError = null;\n  };\n  /**\r\n   * Parse the JSON representation of a texture in order to recreate the texture in the given scene.\r\n   * @param parsedTexture Define the JSON representation of the texture\r\n   * @param scene Define the scene the parsed texture should be instantiated in\r\n   * @param rootUrl Define the root url of the parsing sequence in the case of relative dependencies\r\n   * @returns The parsed texture if successful\r\n   */\n\n\n  Texture.Parse = function (parsedTexture, scene, rootUrl) {\n    if (parsedTexture.customType) {\n      var customTexture = InstantiationTools.Instantiate(parsedTexture.customType); // Update Sampling Mode\n\n      var parsedCustomTexture = customTexture.Parse(parsedTexture, scene, rootUrl);\n\n      if (parsedTexture.samplingMode && parsedCustomTexture.updateSamplingMode && parsedCustomTexture._samplingMode) {\n        if (parsedCustomTexture._samplingMode !== parsedTexture.samplingMode) {\n          parsedCustomTexture.updateSamplingMode(parsedTexture.samplingMode);\n        }\n      }\n\n      return parsedCustomTexture;\n    }\n\n    if (parsedTexture.isCube && !parsedTexture.isRenderTarget) {\n      return Texture._CubeTextureParser(parsedTexture, scene, rootUrl);\n    }\n\n    if (!parsedTexture.name && !parsedTexture.isRenderTarget) {\n      return null;\n    }\n\n    var onLoaded = function () {\n      // Clear cache\n      if (texture && texture._texture) {\n        texture._texture._cachedWrapU = null;\n        texture._texture._cachedWrapV = null;\n        texture._texture._cachedWrapR = null;\n      } // Update Sampling Mode\n\n\n      if (parsedTexture.samplingMode) {\n        var sampling = parsedTexture.samplingMode;\n\n        if (texture && texture.samplingMode !== sampling) {\n          texture.updateSamplingMode(sampling);\n        }\n      } // Animations\n\n\n      if (texture && parsedTexture.animations) {\n        for (var animationIndex = 0; animationIndex < parsedTexture.animations.length; animationIndex++) {\n          var parsedAnimation = parsedTexture.animations[animationIndex];\n\n          var internalClass = _TypeStore.GetClass(\"BABYLON.Animation\");\n\n          if (internalClass) {\n            texture.animations.push(internalClass.Parse(parsedAnimation));\n          }\n        }\n      }\n    };\n\n    var texture = SerializationHelper.Parse(function () {\n      var generateMipMaps = true;\n\n      if (parsedTexture.noMipmap) {\n        generateMipMaps = false;\n      }\n\n      if (parsedTexture.mirrorPlane) {\n        var mirrorTexture = Texture._CreateMirror(parsedTexture.name, parsedTexture.renderTargetSize, scene, generateMipMaps);\n\n        mirrorTexture._waitingRenderList = parsedTexture.renderList;\n        mirrorTexture.mirrorPlane = Plane.FromArray(parsedTexture.mirrorPlane);\n        onLoaded();\n        return mirrorTexture;\n      } else if (parsedTexture.isRenderTarget) {\n        var renderTargetTexture = null;\n\n        if (parsedTexture.isCube) {\n          // Search for an existing reflection probe (which contains a cube render target texture)\n          if (scene.reflectionProbes) {\n            for (var index = 0; index < scene.reflectionProbes.length; index++) {\n              var probe = scene.reflectionProbes[index];\n\n              if (probe.name === parsedTexture.name) {\n                return probe.cubeTexture;\n              }\n            }\n          }\n        } else {\n          renderTargetTexture = Texture._CreateRenderTargetTexture(parsedTexture.name, parsedTexture.renderTargetSize, scene, generateMipMaps);\n          renderTargetTexture._waitingRenderList = parsedTexture.renderList;\n        }\n\n        onLoaded();\n        return renderTargetTexture;\n      } else {\n        var texture;\n\n        if (parsedTexture.base64String) {\n          texture = Texture.CreateFromBase64String(parsedTexture.base64String, parsedTexture.name, scene, !generateMipMaps, parsedTexture.invertY, undefined, onLoaded);\n        } else {\n          var url = void 0;\n\n          if (parsedTexture.name && parsedTexture.name.indexOf(\"://\") > 0) {\n            url = parsedTexture.name;\n          } else {\n            url = rootUrl + parsedTexture.name;\n          }\n\n          if (StringTools.StartsWith(parsedTexture.url, \"data:\") || Texture.UseSerializedUrlIfAny && parsedTexture.url) {\n            url = parsedTexture.url;\n          }\n\n          texture = new Texture(url, scene, !generateMipMaps, parsedTexture.invertY, undefined, onLoaded);\n        }\n\n        return texture;\n      }\n    }, parsedTexture, scene);\n    return texture;\n  };\n  /**\r\n   * Creates a texture from its base 64 representation.\r\n   * @param data Define the base64 payload without the data: prefix\r\n   * @param name Define the name of the texture in the scene useful fo caching purpose for instance\r\n   * @param scene Define the scene the texture should belong to\r\n   * @param noMipmap Forces the texture to not create mip map information if true\r\n   * @param invertY define if the texture needs to be inverted on the y axis during loading\r\n   * @param samplingMode define the sampling mode we want for the texture while fectching from it (Texture.NEAREST_SAMPLINGMODE...)\r\n   * @param onLoad define a callback triggered when the texture has been loaded\r\n   * @param onError define a callback triggered when an error occurred during the loading session\r\n   * @param format define the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\r\n   * @returns the created texture\r\n   */\n\n\n  Texture.CreateFromBase64String = function (data, name, scene, noMipmap, invertY, samplingMode, onLoad, onError, format) {\n    if (samplingMode === void 0) {\n      samplingMode = Texture.TRILINEAR_SAMPLINGMODE;\n    }\n\n    if (onLoad === void 0) {\n      onLoad = null;\n    }\n\n    if (onError === void 0) {\n      onError = null;\n    }\n\n    if (format === void 0) {\n      format = 5;\n    }\n\n    return new Texture(\"data:\" + name, scene, noMipmap, invertY, samplingMode, onLoad, onError, data, false, format);\n  };\n  /**\r\n   * Creates a texture from its data: representation. (data: will be added in case only the payload has been passed in)\r\n   * @param data Define the base64 payload without the data: prefix\r\n   * @param name Define the name of the texture in the scene useful fo caching purpose for instance\r\n   * @param buffer define the buffer to load the texture from in case the texture is loaded from a buffer representation\r\n   * @param scene Define the scene the texture should belong to\r\n   * @param deleteBuffer define if the buffer we are loading the texture from should be deleted after load\r\n   * @param noMipmap Forces the texture to not create mip map information if true\r\n   * @param invertY define if the texture needs to be inverted on the y axis during loading\r\n   * @param samplingMode define the sampling mode we want for the texture while fectching from it (Texture.NEAREST_SAMPLINGMODE...)\r\n   * @param onLoad define a callback triggered when the texture has been loaded\r\n   * @param onError define a callback triggered when an error occurred during the loading session\r\n   * @param format define the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\r\n   * @returns the created texture\r\n   */\n\n\n  Texture.LoadFromDataString = function (name, buffer, scene, deleteBuffer, noMipmap, invertY, samplingMode, onLoad, onError, format) {\n    if (deleteBuffer === void 0) {\n      deleteBuffer = false;\n    }\n\n    if (noMipmap === void 0) {\n      noMipmap = false;\n    }\n\n    if (invertY === void 0) {\n      invertY = true;\n    }\n\n    if (samplingMode === void 0) {\n      samplingMode = Texture.TRILINEAR_SAMPLINGMODE;\n    }\n\n    if (onLoad === void 0) {\n      onLoad = null;\n    }\n\n    if (onError === void 0) {\n      onError = null;\n    }\n\n    if (format === void 0) {\n      format = 5;\n    }\n\n    if (name.substr(0, 5) !== \"data:\") {\n      name = \"data:\" + name;\n    }\n\n    return new Texture(name, scene, noMipmap, invertY, samplingMode, onLoad, onError, buffer, deleteBuffer, format);\n  };\n  /**\r\n   * Gets or sets a general boolean used to indicate that textures containing direct data (buffers) must be saved as part of the serialization process\r\n   */\n\n\n  Texture.SerializeBuffers = true;\n  /**\r\n   * Gets or sets a general boolean used to indicate that texture buffers must be saved as part of the serialization process.\r\n   * If no buffer exists, one will be created as base64 string from the internal webgl data.\r\n   */\n\n  Texture.ForceSerializeBuffers = false;\n  /** @hidden */\n\n  Texture._CubeTextureParser = function (jsonTexture, scene, rootUrl) {\n    throw _DevTools.WarnImport(\"CubeTexture\");\n  };\n  /** @hidden */\n\n\n  Texture._CreateMirror = function (name, renderTargetSize, scene, generateMipMaps) {\n    throw _DevTools.WarnImport(\"MirrorTexture\");\n  };\n  /** @hidden */\n\n\n  Texture._CreateRenderTargetTexture = function (name, renderTargetSize, scene, generateMipMaps) {\n    throw _DevTools.WarnImport(\"RenderTargetTexture\");\n  };\n  /** nearest is mag = nearest and min = nearest and mip = linear */\n\n\n  Texture.NEAREST_SAMPLINGMODE = 1;\n  /** nearest is mag = nearest and min = nearest and mip = linear */\n\n  Texture.NEAREST_NEAREST_MIPLINEAR = 8; // nearest is mag = nearest and min = nearest and mip = linear\n\n  /** Bilinear is mag = linear and min = linear and mip = nearest */\n\n  Texture.BILINEAR_SAMPLINGMODE = 2;\n  /** Bilinear is mag = linear and min = linear and mip = nearest */\n\n  Texture.LINEAR_LINEAR_MIPNEAREST = 11; // Bilinear is mag = linear and min = linear and mip = nearest\n\n  /** Trilinear is mag = linear and min = linear and mip = linear */\n\n  Texture.TRILINEAR_SAMPLINGMODE = 3;\n  /** Trilinear is mag = linear and min = linear and mip = linear */\n\n  Texture.LINEAR_LINEAR_MIPLINEAR = 3; // Trilinear is mag = linear and min = linear and mip = linear\n\n  /** mag = nearest and min = nearest and mip = nearest */\n\n  Texture.NEAREST_NEAREST_MIPNEAREST = 4;\n  /** mag = nearest and min = linear and mip = nearest */\n\n  Texture.NEAREST_LINEAR_MIPNEAREST = 5;\n  /** mag = nearest and min = linear and mip = linear */\n\n  Texture.NEAREST_LINEAR_MIPLINEAR = 6;\n  /** mag = nearest and min = linear and mip = none */\n\n  Texture.NEAREST_LINEAR = 7;\n  /** mag = nearest and min = nearest and mip = none */\n\n  Texture.NEAREST_NEAREST = 1;\n  /** mag = linear and min = nearest and mip = nearest */\n\n  Texture.LINEAR_NEAREST_MIPNEAREST = 9;\n  /** mag = linear and min = nearest and mip = linear */\n\n  Texture.LINEAR_NEAREST_MIPLINEAR = 10;\n  /** mag = linear and min = linear and mip = none */\n\n  Texture.LINEAR_LINEAR = 2;\n  /** mag = linear and min = nearest and mip = none */\n\n  Texture.LINEAR_NEAREST = 12;\n  /** Explicit coordinates mode */\n\n  Texture.EXPLICIT_MODE = 0;\n  /** Spherical coordinates mode */\n\n  Texture.SPHERICAL_MODE = 1;\n  /** Planar coordinates mode */\n\n  Texture.PLANAR_MODE = 2;\n  /** Cubic coordinates mode */\n\n  Texture.CUBIC_MODE = 3;\n  /** Projection coordinates mode */\n\n  Texture.PROJECTION_MODE = 4;\n  /** Inverse Cubic coordinates mode */\n\n  Texture.SKYBOX_MODE = 5;\n  /** Inverse Cubic coordinates mode */\n\n  Texture.INVCUBIC_MODE = 6;\n  /** Equirectangular coordinates mode */\n\n  Texture.EQUIRECTANGULAR_MODE = 7;\n  /** Equirectangular Fixed coordinates mode */\n\n  Texture.FIXED_EQUIRECTANGULAR_MODE = 8;\n  /** Equirectangular Fixed Mirrored coordinates mode */\n\n  Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\n  /** Texture is not repeating outside of 0..1 UVs */\n\n  Texture.CLAMP_ADDRESSMODE = 0;\n  /** Texture is repeating outside of 0..1 UVs */\n\n  Texture.WRAP_ADDRESSMODE = 1;\n  /** Texture is repeating and mirrored */\n\n  Texture.MIRROR_ADDRESSMODE = 2;\n  /**\r\n   * Gets or sets a boolean which defines if the texture url must be build from the serialized URL instead of just using the name and loading them side by side with the scene file\r\n   */\n\n  Texture.UseSerializedUrlIfAny = false;\n\n  __decorate([serialize()], Texture.prototype, \"url\", void 0);\n\n  __decorate([serialize()], Texture.prototype, \"uOffset\", void 0);\n\n  __decorate([serialize()], Texture.prototype, \"vOffset\", void 0);\n\n  __decorate([serialize()], Texture.prototype, \"uScale\", void 0);\n\n  __decorate([serialize()], Texture.prototype, \"vScale\", void 0);\n\n  __decorate([serialize()], Texture.prototype, \"uAng\", void 0);\n\n  __decorate([serialize()], Texture.prototype, \"vAng\", void 0);\n\n  __decorate([serialize()], Texture.prototype, \"wAng\", void 0);\n\n  __decorate([serialize()], Texture.prototype, \"uRotationCenter\", void 0);\n\n  __decorate([serialize()], Texture.prototype, \"vRotationCenter\", void 0);\n\n  __decorate([serialize()], Texture.prototype, \"wRotationCenter\", void 0);\n\n  __decorate([serialize()], Texture.prototype, \"homogeneousRotationInUVTransform\", void 0);\n\n  __decorate([serialize()], Texture.prototype, \"isBlocking\", null);\n\n  return Texture;\n}(BaseTexture);\n\nexport { Texture }; // References the dependencies.\n\n_TypeStore.RegisteredTypes[\"BABYLON.Texture\"] = Texture;\nSerializationHelper._TextureParser = Texture.Parse;","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/Textures/texture.ts"],"names":[],"mappings":"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","sourcesContent":["import { serialize, SerializationHelper } from \"../../Misc/decorators\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Nullable } from \"../../types\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"../../Maths/math.vector\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\n\r\nimport { _TypeStore } from '../../Misc/typeStore';\r\nimport { _DevTools } from '../../Misc/devTools';\r\nimport { IInspectable } from '../../Misc/iInspectable';\r\nimport { ThinEngine } from '../../Engines/thinEngine';\r\nimport { TimingTools } from '../../Misc/timingTools';\r\nimport { InstantiationTools } from '../../Misc/instantiationTools';\r\nimport { Plane } from '../../Maths/math.plane';\r\nimport { StringTools } from '../../Misc/stringTools';\r\nimport { CopyTools } from '../../Misc/copyTools';\r\n\r\ndeclare type CubeTexture = import(\"../../Materials/Textures/cubeTexture\").CubeTexture;\r\ndeclare type MirrorTexture = import(\"../../Materials/Textures/mirrorTexture\").MirrorTexture;\r\ndeclare type RenderTargetTexture = import(\"../../Materials/Textures/renderTargetTexture\").RenderTargetTexture;\r\ndeclare type Scene = import(\"../../scene\").Scene;\r\n\r\n/**\r\n * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\r\n * @see https://doc.babylonjs.com/babylon101/materials#texture\r\n */\r\nexport class Texture extends BaseTexture {\r\n    /**\r\n     * Gets or sets a general boolean used to indicate that textures containing direct data (buffers) must be saved as part of the serialization process\r\n     */\r\n    public static SerializeBuffers = true;\r\n\r\n    /**\r\n     * Gets or sets a general boolean used to indicate that texture buffers must be saved as part of the serialization process.\r\n     * If no buffer exists, one will be created as base64 string from the internal webgl data.\r\n     */\r\n    public static ForceSerializeBuffers = false;\r\n\r\n    /** @hidden */\r\n    public static _CubeTextureParser = (jsonTexture: any, scene: Scene, rootUrl: string): CubeTexture => {\r\n        throw _DevTools.WarnImport(\"CubeTexture\");\r\n    }\r\n    /** @hidden */\r\n    public static _CreateMirror = (name: string, renderTargetSize: number, scene: Scene, generateMipMaps: boolean): MirrorTexture => {\r\n        throw _DevTools.WarnImport(\"MirrorTexture\");\r\n    }\r\n    /** @hidden */\r\n    public static _CreateRenderTargetTexture = (name: string, renderTargetSize: number, scene: Scene, generateMipMaps: boolean): RenderTargetTexture => {\r\n        throw _DevTools.WarnImport(\"RenderTargetTexture\");\r\n    }\r\n\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly NEAREST_SAMPLINGMODE = 1;\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly NEAREST_NEAREST_MIPLINEAR = 8; // nearest is mag = nearest and min = nearest and mip = linear\r\n\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly BILINEAR_SAMPLINGMODE = 2;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly LINEAR_LINEAR_MIPNEAREST = 11; // Bilinear is mag = linear and min = linear and mip = nearest\r\n\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TRILINEAR_SAMPLINGMODE = 3;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly LINEAR_LINEAR_MIPLINEAR = 3; // Trilinear is mag = linear and min = linear and mip = linear\r\n\r\n    /** mag = nearest and min = nearest and mip = nearest */\r\n    public static readonly NEAREST_NEAREST_MIPNEAREST = 4;\r\n    /** mag = nearest and min = linear and mip = nearest */\r\n    public static readonly NEAREST_LINEAR_MIPNEAREST = 5;\r\n    /** mag = nearest and min = linear and mip = linear */\r\n    public static readonly NEAREST_LINEAR_MIPLINEAR = 6;\r\n    /** mag = nearest and min = linear and mip = none */\r\n    public static readonly NEAREST_LINEAR = 7;\r\n    /** mag = nearest and min = nearest and mip = none */\r\n    public static readonly NEAREST_NEAREST = 1;\r\n    /** mag = linear and min = nearest and mip = nearest */\r\n    public static readonly LINEAR_NEAREST_MIPNEAREST = 9;\r\n    /** mag = linear and min = nearest and mip = linear */\r\n    public static readonly LINEAR_NEAREST_MIPLINEAR = 10;\r\n    /** mag = linear and min = linear and mip = none */\r\n    public static readonly LINEAR_LINEAR = 2;\r\n    /** mag = linear and min = nearest and mip = none */\r\n    public static readonly LINEAR_NEAREST = 12;\r\n\r\n    /** Explicit coordinates mode */\r\n    public static readonly EXPLICIT_MODE = 0;\r\n    /** Spherical coordinates mode */\r\n    public static readonly SPHERICAL_MODE = 1;\r\n    /** Planar coordinates mode */\r\n    public static readonly PLANAR_MODE = 2;\r\n    /** Cubic coordinates mode */\r\n    public static readonly CUBIC_MODE = 3;\r\n    /** Projection coordinates mode */\r\n    public static readonly PROJECTION_MODE = 4;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly SKYBOX_MODE = 5;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly INVCUBIC_MODE = 6;\r\n    /** Equirectangular coordinates mode */\r\n    public static readonly EQUIRECTANGULAR_MODE = 7;\r\n    /** Equirectangular Fixed coordinates mode */\r\n    public static readonly FIXED_EQUIRECTANGULAR_MODE = 8;\r\n    /** Equirectangular Fixed Mirrored coordinates mode */\r\n    public static readonly FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\r\n\r\n    /** Texture is not repeating outside of 0..1 UVs */\r\n    public static readonly CLAMP_ADDRESSMODE = 0;\r\n    /** Texture is repeating outside of 0..1 UVs */\r\n    public static readonly WRAP_ADDRESSMODE = 1;\r\n    /** Texture is repeating and mirrored */\r\n    public static readonly MIRROR_ADDRESSMODE = 2;\r\n\r\n    /**\r\n     * Gets or sets a boolean which defines if the texture url must be build from the serialized URL instead of just using the name and loading them side by side with the scene file\r\n     */\r\n    public static UseSerializedUrlIfAny = false;\r\n\r\n    /**\r\n     * Define the url of the texture.\r\n     */\r\n    @serialize()\r\n    public url: Nullable<string> = null;\r\n\r\n    /**\r\n     * Define an offset on the texture to offset the u coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/how_to/more_materials#offsetting\r\n     */\r\n    @serialize()\r\n    public uOffset = 0;\r\n\r\n    /**\r\n     * Define an offset on the texture to offset the v coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/how_to/more_materials#offsetting\r\n     */\r\n    @serialize()\r\n    public vOffset = 0;\r\n\r\n    /**\r\n     * Define an offset on the texture to scale the u coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/how_to/more_materials#tiling\r\n     */\r\n    @serialize()\r\n    public uScale = 1.0;\r\n\r\n    /**\r\n     * Define an offset on the texture to scale the v coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/how_to/more_materials#tiling\r\n     */\r\n    @serialize()\r\n    public vScale = 1.0;\r\n\r\n    /**\r\n     * Define an offset on the texture to rotate around the u coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/how_to/more_materials\r\n     */\r\n    @serialize()\r\n    public uAng = 0;\r\n\r\n    /**\r\n     * Define an offset on the texture to rotate around the v coordinates of the UVs\r\n     * @see https://doc.babylonjs.com/how_to/more_materials\r\n     */\r\n    @serialize()\r\n    public vAng = 0;\r\n\r\n    /**\r\n     * Define an offset on the texture to rotate around the w coordinates of the UVs (in case of 3d texture)\r\n     * @see https://doc.babylonjs.com/how_to/more_materials\r\n     */\r\n    @serialize()\r\n    public wAng = 0;\r\n\r\n    /**\r\n     * Defines the center of rotation (U)\r\n     */\r\n    @serialize()\r\n    public uRotationCenter = 0.5;\r\n\r\n    /**\r\n     * Defines the center of rotation (V)\r\n     */\r\n    @serialize()\r\n    public vRotationCenter = 0.5;\r\n\r\n    /**\r\n     * Defines the center of rotation (W)\r\n     */\r\n    @serialize()\r\n    public wRotationCenter = 0.5;\r\n\r\n    /**\r\n     * Sets this property to true to avoid deformations when rotating the texture with non-uniform scaling\r\n     */\r\n    @serialize()\r\n    public homogeneousRotationInUVTransform = false;\r\n\r\n    /**\r\n     * Are mip maps generated for this texture or not.\r\n     */\r\n    get noMipmap(): boolean {\r\n        return this._noMipmap;\r\n    }\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/how_to/debug_layer#extensibility\r\n     */\r\n    public inspectableCustomProperties: Nullable<IInspectable[]> = null;\r\n\r\n    private _noMipmap: boolean = false;\r\n    /** @hidden */\r\n    public _invertY: boolean = false;\r\n    private _rowGenerationMatrix: Nullable<Matrix> = null;\r\n    private _cachedTextureMatrix: Nullable<Matrix> = null;\r\n    private _projectionModeMatrix: Nullable<Matrix> = null;\r\n    private _t0: Nullable<Vector3> = null;\r\n    private _t1: Nullable<Vector3> = null;\r\n    private _t2: Nullable<Vector3> = null;\r\n\r\n    private _cachedUOffset: number = -1;\r\n    private _cachedVOffset: number = -1;\r\n    private _cachedUScale: number = 0;\r\n    private _cachedVScale: number = 0;\r\n    private _cachedUAng: number = -1;\r\n    private _cachedVAng: number = -1;\r\n    private _cachedWAng: number = -1;\r\n    private _cachedProjectionMatrixId: number = -1;\r\n    private _cachedURotationCenter: number = -1;\r\n    private _cachedVRotationCenter: number = -1;\r\n    private _cachedWRotationCenter: number = -1;\r\n    private _cachedHomogeneousRotationInUVTransform: boolean = false;\r\n    private _cachedCoordinatesMode: number = -1;\r\n\r\n    /** @hidden */\r\n    protected _initialSamplingMode = Texture.BILINEAR_SAMPLINGMODE;\r\n\r\n    /** @hidden */\r\n    public _buffer: Nullable<string | ArrayBuffer | ArrayBufferView | HTMLImageElement | Blob | ImageBitmap> = null;\r\n    private _deleteBuffer: boolean = false;\r\n    protected _format: Nullable<number> = null;\r\n    private _delayedOnLoad: Nullable<() => void> = null;\r\n    private _delayedOnError: Nullable<() => void> = null;\r\n    private _mimeType?: string;\r\n    private _loaderOptions?: any;\r\n\r\n    /** Returns the texture mime type if it was defined by a loader (undefined else) */\r\n    public get mimeType() {\r\n        return this._mimeType;\r\n    }\r\n\r\n    /**\r\n     * Observable triggered once the texture has been loaded.\r\n     */\r\n    public onLoadObservable: Observable<Texture> = new Observable<Texture>();\r\n\r\n    protected _isBlocking: boolean = true;\r\n    /**\r\n     * Is the texture preventing material to render while loading.\r\n     * If false, a default texture will be used instead of the loading one during the preparation step.\r\n     */\r\n    public set isBlocking(value: boolean) {\r\n        this._isBlocking = value;\r\n    }\r\n    @serialize()\r\n    public get isBlocking(): boolean {\r\n        return this._isBlocking;\r\n    }\r\n\r\n    /**\r\n     * Get the current sampling mode associated with the texture.\r\n     */\r\n    public get samplingMode(): number {\r\n        if (!this._texture) {\r\n            return this._initialSamplingMode;\r\n        }\r\n\r\n        return this._texture.samplingMode;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the texture needs to be inverted on the y axis during loading\r\n     */\r\n    public get invertY(): boolean {\r\n        return this._invertY;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new texture.\r\n     * This represents a texture in babylon. It can be easily loaded from a network, base64 or html input.\r\n     * @see https://doc.babylonjs.com/babylon101/materials#texture\r\n     * @param url defines the url of the picture to load as a texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param noMipmap defines if the texture will require mip maps or not\r\n     * @param invertY defines if the texture needs to be inverted on the y axis during loading\r\n     * @param samplingMode defines the sampling mode we want for the texture while fectching from it (Texture.NEAREST_SAMPLINGMODE...)\r\n     * @param onLoad defines a callback triggered when the texture has been loaded\r\n     * @param onError defines a callback triggered when an error occurred during the loading session\r\n     * @param buffer defines the buffer to load the texture from in case the texture is loaded from a buffer representation\r\n     * @param deleteBuffer defines if the buffer we are loading the texture from should be deleted after load\r\n     * @param format defines the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\r\n     * @param mimeType defines an optional mime type information\r\n     * @param loaderOptions options to be passed to the loader\r\n     */\r\n    constructor(url: Nullable<string>, sceneOrEngine: Nullable<Scene | ThinEngine>, noMipmap: boolean = false, invertY: boolean = true, samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n            onLoad: Nullable<() => void> = null, onError: Nullable<(message?: string, exception?: any) => void> = null, buffer: Nullable<string | ArrayBuffer | ArrayBufferView | HTMLImageElement | Blob | ImageBitmap> = null,\r\n            deleteBuffer: boolean = false, format?: number, mimeType?: string, loaderOptions?: any)\r\n    {\r\n        super(sceneOrEngine);\r\n\r\n        this.name = url || \"\";\r\n        this.url = url;\r\n        this._noMipmap = noMipmap;\r\n        this._invertY = invertY;\r\n        this._initialSamplingMode = samplingMode;\r\n        this._buffer = buffer;\r\n        this._deleteBuffer = deleteBuffer;\r\n        this._mimeType = mimeType;\r\n        this._loaderOptions = loaderOptions;\r\n        if (format) {\r\n            this._format = format;\r\n        }\r\n\r\n        var scene = this.getScene();\r\n        var engine = this._getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n\r\n        engine.onBeforeTextureInitObservable.notifyObservers(this);\r\n\r\n        let load = () => {\r\n            if (this._texture) {\r\n                if (this._texture._invertVScale) {\r\n                    this.vScale *= -1;\r\n                    this.vOffset += 1;\r\n                }\r\n\r\n                // Update texutre to match internal texture's wrapping\r\n                if (this._texture._cachedWrapU !== null) {\r\n                    this.wrapU = this._texture._cachedWrapU;\r\n                    this._texture._cachedWrapU = null;\r\n                }\r\n                if (this._texture._cachedWrapV !== null) {\r\n                    this.wrapV = this._texture._cachedWrapV;\r\n                    this._texture._cachedWrapV = null;\r\n                }\r\n                if (this._texture._cachedWrapR !== null) {\r\n                    this.wrapR = this._texture._cachedWrapR;\r\n                    this._texture._cachedWrapR = null;\r\n                }\r\n            }\r\n\r\n            if (this.onLoadObservable.hasObservers()) {\r\n                this.onLoadObservable.notifyObservers(this);\r\n            }\r\n            if (onLoad) {\r\n                onLoad();\r\n            }\r\n\r\n            if (!this.isBlocking && scene) {\r\n                scene.resetCachedMaterial();\r\n            }\r\n        };\r\n\r\n        if (!this.url) {\r\n            this._delayedOnLoad = load;\r\n            this._delayedOnError = onError;\r\n            return;\r\n        }\r\n\r\n        this._texture = this._getFromCache(this.url, noMipmap, samplingMode, invertY);\r\n\r\n        if (!this._texture) {\r\n            if (!scene || !scene.useDelayedTextureLoading) {\r\n                this._texture = engine.createTexture(this.url, noMipmap, invertY, scene, samplingMode, load, onError, this._buffer, undefined, this._format, null, mimeType, loaderOptions);\r\n                if (deleteBuffer) {\r\n                    this._buffer = null;\r\n                }\r\n            } else {\r\n                this.delayLoadState = 4;\r\n\r\n                this._delayedOnLoad = load;\r\n                this._delayedOnError = onError;\r\n            }\r\n        } else {\r\n            if (this._texture.isReady) {\r\n                TimingTools.SetImmediate(() => load());\r\n            } else {\r\n                this._texture.onLoadedObservable.add(load);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the url (and optional buffer) of this texture if url was null during construction.\r\n     * @param url the url of the texture\r\n     * @param buffer the buffer of the texture (defaults to null)\r\n     * @param onLoad callback called when the texture is loaded  (defaults to null)\r\n     */\r\n    public updateURL(url: string, buffer: Nullable<string | ArrayBuffer | ArrayBufferView | HTMLImageElement | Blob> = null, onLoad?: () => void): void {\r\n        if (this.url) {\r\n            this.releaseInternalTexture();\r\n            this.getScene()!.markAllMaterialsAsDirty(1);\r\n        }\r\n\r\n        if (!this.name || StringTools.StartsWith(this.name, \"data:\")) {\r\n            this.name = url;\r\n        }\r\n        this.url = url;\r\n        this._buffer = buffer;\r\n        this.delayLoadState = 4;\r\n\r\n        if (onLoad) {\r\n            this._delayedOnLoad = onLoad;\r\n        }\r\n        this.delayLoad();\r\n    }\r\n\r\n    /**\r\n     * Finish the loading sequence of a texture flagged as delayed load.\r\n     * @hidden\r\n     */\r\n    public delayLoad(): void {\r\n        if (this.delayLoadState !== 4) {\r\n            return;\r\n        }\r\n\r\n        let scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this.delayLoadState = 1;\r\n        this._texture = this._getFromCache(this.url, this._noMipmap, this.samplingMode, this._invertY);\r\n\r\n        if (!this._texture) {\r\n            this._texture = scene.getEngine().createTexture(this.url, this._noMipmap, this._invertY, scene, this.samplingMode, this._delayedOnLoad, this._delayedOnError, this._buffer, null, this._format, null, this._mimeType, this._loaderOptions);\r\n            if (this._deleteBuffer) {\r\n                this._buffer = null;\r\n            }\r\n        } else {\r\n            if (this._delayedOnLoad) {\r\n                if (this._texture.isReady) {\r\n                    TimingTools.SetImmediate(this._delayedOnLoad);\r\n                } else {\r\n                    this._texture.onLoadedObservable.add(this._delayedOnLoad);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._delayedOnLoad = null;\r\n        this._delayedOnError = null;\r\n    }\r\n\r\n    private _prepareRowForTextureGeneration(x: number, y: number, z: number, t: Vector3): void {\r\n        x *= this._cachedUScale;\r\n        y *= this._cachedVScale;\r\n\r\n        x -= this.uRotationCenter * this._cachedUScale;\r\n        y -= this.vRotationCenter * this._cachedVScale;\r\n        z -= this.wRotationCenter;\r\n\r\n        Vector3.TransformCoordinatesFromFloatsToRef(x, y, z, this._rowGenerationMatrix!, t);\r\n\r\n        t.x += this.uRotationCenter * this._cachedUScale + this._cachedUOffset;\r\n        t.y += this.vRotationCenter * this._cachedVScale + this._cachedVOffset;\r\n        t.z += this.wRotationCenter;\r\n    }\r\n\r\n    /**\r\n     * Checks if the texture has the same transform matrix than another texture\r\n     * @param texture texture to check against\r\n     * @returns true if the transforms are the same, else false\r\n     */\r\n    public checkTransformsAreIdentical(texture: Nullable<Texture>): boolean {\r\n        return texture !== null &&\r\n                this.uOffset === texture.uOffset &&\r\n                this.vOffset === texture.vOffset &&\r\n                this.uScale === texture.uScale &&\r\n                this.vScale === texture.vScale &&\r\n                this.uAng === texture.uAng &&\r\n                this.vAng === texture.vAng &&\r\n                this.wAng === texture.wAng;\r\n    }\r\n\r\n    /**\r\n     * Get the current texture matrix which includes the requested offsetting, tiling and rotation components.\r\n     * @returns the transform matrix of the texture.\r\n     */\r\n    public getTextureMatrix(uBase = 1): Matrix {\r\n        if (\r\n            this.uOffset === this._cachedUOffset &&\r\n            this.vOffset === this._cachedVOffset &&\r\n            this.uScale * uBase === this._cachedUScale &&\r\n            this.vScale === this._cachedVScale &&\r\n            this.uAng === this._cachedUAng &&\r\n            this.vAng === this._cachedVAng &&\r\n            this.wAng === this._cachedWAng &&\r\n            this.uRotationCenter === this._cachedURotationCenter &&\r\n            this.vRotationCenter === this._cachedVRotationCenter &&\r\n            this.wRotationCenter === this._cachedWRotationCenter &&\r\n            this.homogeneousRotationInUVTransform === this._cachedHomogeneousRotationInUVTransform) {\r\n            return this._cachedTextureMatrix!;\r\n        }\r\n\r\n        this._cachedUOffset = this.uOffset;\r\n        this._cachedVOffset = this.vOffset;\r\n        this._cachedUScale = this.uScale * uBase;\r\n        this._cachedVScale = this.vScale;\r\n        this._cachedUAng = this.uAng;\r\n        this._cachedVAng = this.vAng;\r\n        this._cachedWAng = this.wAng;\r\n        this._cachedURotationCenter = this.uRotationCenter;\r\n        this._cachedVRotationCenter = this.vRotationCenter;\r\n        this._cachedWRotationCenter = this.wRotationCenter;\r\n        this._cachedHomogeneousRotationInUVTransform = this.homogeneousRotationInUVTransform;\r\n\r\n        if (!this._cachedTextureMatrix || !this._rowGenerationMatrix) {\r\n            this._cachedTextureMatrix = Matrix.Zero();\r\n            this._rowGenerationMatrix = new Matrix();\r\n            this._t0 = Vector3.Zero();\r\n            this._t1 = Vector3.Zero();\r\n            this._t2 = Vector3.Zero();\r\n        }\r\n\r\n        Matrix.RotationYawPitchRollToRef(this.vAng, this.uAng, this.wAng, this._rowGenerationMatrix!);\r\n\r\n        if (this.homogeneousRotationInUVTransform) {\r\n            Matrix.TranslationToRef(-this._cachedURotationCenter, -this._cachedVRotationCenter, -this._cachedWRotationCenter, TmpVectors.Matrix[0]);\r\n            Matrix.TranslationToRef(this._cachedURotationCenter, this._cachedVRotationCenter, this._cachedWRotationCenter, TmpVectors.Matrix[1]);\r\n            Matrix.ScalingToRef(this._cachedUScale, this._cachedVScale, 0, TmpVectors.Matrix[2]);\r\n            Matrix.TranslationToRef(this._cachedUOffset, this._cachedVOffset, 0, TmpVectors.Matrix[3]);\r\n\r\n            TmpVectors.Matrix[0].multiplyToRef(this._rowGenerationMatrix!, this._cachedTextureMatrix);\r\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[1], this._cachedTextureMatrix);\r\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[2], this._cachedTextureMatrix);\r\n            this._cachedTextureMatrix.multiplyToRef(TmpVectors.Matrix[3], this._cachedTextureMatrix);\r\n\r\n            // copy the translation row to the 3rd row of the matrix so that we don't need to update the shaders (which expects the translation to be on the 3rd row)\r\n            this._cachedTextureMatrix.setRowFromFloats(2, this._cachedTextureMatrix.m[12], this._cachedTextureMatrix.m[13], this._cachedTextureMatrix.m[14], 1);\r\n        } else {\r\n            this._prepareRowForTextureGeneration(0, 0, 0, this._t0!);\r\n            this._prepareRowForTextureGeneration(1.0, 0, 0, this._t1!);\r\n            this._prepareRowForTextureGeneration(0, 1.0, 0, this._t2!);\r\n\r\n            this._t1!.subtractInPlace(this._t0!);\r\n            this._t2!.subtractInPlace(this._t0!);\r\n\r\n            Matrix.FromValuesToRef(\r\n                this._t1!.x, this._t1!.y, this._t1!.z, 0.0,\r\n                this._t2!.x, this._t2!.y, this._t2!.z, 0.0,\r\n                this._t0!.x, this._t0!.y, this._t0!.z, 0.0,\r\n                0.0, 0.0, 0.0, 1.0,\r\n                this._cachedTextureMatrix\r\n            );\r\n        }\r\n\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return this._cachedTextureMatrix;\r\n        }\r\n\r\n        scene.markAllMaterialsAsDirty(1, (mat) => {\r\n            return mat.hasTexture(this);\r\n        });\r\n\r\n        return this._cachedTextureMatrix;\r\n    }\r\n\r\n    /**\r\n     * Get the current matrix used to apply reflection. This is useful to rotate an environment texture for instance.\r\n     * @returns The reflection texture transform\r\n     */\r\n    public getReflectionTextureMatrix(): Matrix {\r\n        let scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return this._cachedTextureMatrix!;\r\n        }\r\n\r\n        if (\r\n            this.uOffset === this._cachedUOffset &&\r\n            this.vOffset === this._cachedVOffset &&\r\n            this.uScale === this._cachedUScale &&\r\n            this.vScale === this._cachedVScale &&\r\n            this.coordinatesMode === this._cachedCoordinatesMode) {\r\n            if (this.coordinatesMode === Texture.PROJECTION_MODE) {\r\n                if (this._cachedProjectionMatrixId === scene.getProjectionMatrix().updateFlag) {\r\n                    return this._cachedTextureMatrix!;\r\n                }\r\n            } else {\r\n                return this._cachedTextureMatrix!;\r\n            }\r\n        }\r\n\r\n        if (!this._cachedTextureMatrix) {\r\n            this._cachedTextureMatrix = Matrix.Zero();\r\n        }\r\n\r\n        if (!this._projectionModeMatrix) {\r\n            this._projectionModeMatrix = Matrix.Zero();\r\n        }\r\n\r\n        this._cachedUOffset = this.uOffset;\r\n        this._cachedVOffset = this.vOffset;\r\n        this._cachedUScale = this.uScale;\r\n        this._cachedVScale = this.vScale;\r\n        this._cachedCoordinatesMode = this.coordinatesMode;\r\n\r\n        switch (this.coordinatesMode) {\r\n            case Texture.PLANAR_MODE:\r\n                Matrix.IdentityToRef(this._cachedTextureMatrix);\r\n                (<any>this._cachedTextureMatrix)[0] = this.uScale;\r\n                (<any>this._cachedTextureMatrix)[5] = this.vScale;\r\n                (<any>this._cachedTextureMatrix)[12] = this.uOffset;\r\n                (<any>this._cachedTextureMatrix)[13] = this.vOffset;\r\n                break;\r\n            case Texture.PROJECTION_MODE:\r\n                Matrix.FromValuesToRef(\r\n                    0.5, 0.0, 0.0, 0.0,\r\n                    0.0, -0.5, 0.0, 0.0,\r\n                    0.0, 0.0, 0.0, 0.0,\r\n                    0.5, 0.5, 1.0, 1.0,\r\n                    this._projectionModeMatrix\r\n                );\r\n\r\n                let projectionMatrix = scene.getProjectionMatrix();\r\n                this._cachedProjectionMatrixId = projectionMatrix.updateFlag;\r\n                projectionMatrix.multiplyToRef(this._projectionModeMatrix, this._cachedTextureMatrix);\r\n                break;\r\n            default:\r\n                Matrix.IdentityToRef(this._cachedTextureMatrix);\r\n                break;\r\n        }\r\n\r\n        scene.markAllMaterialsAsDirty(1, (mat) => {\r\n            return (mat.getActiveTextures().indexOf(this) !== -1);\r\n        });\r\n\r\n        return this._cachedTextureMatrix;\r\n    }\r\n\r\n    /**\r\n     * Clones the texture.\r\n     * @returns the cloned texture\r\n     */\r\n    public clone(): Texture {\r\n        return SerializationHelper.Clone(() => {\r\n            return new Texture(this._texture ? this._texture.url : null, this.getScene(), this._noMipmap, this._invertY, this.samplingMode, undefined, undefined, this._texture ? this._texture._buffer : undefined);\r\n        }, this);\r\n    }\r\n\r\n    /**\r\n     * Serialize the texture to a JSON representation we can easily use in the resepective Parse function.\r\n     * @returns The JSON representation of the texture\r\n     */\r\n    public serialize(): any {\r\n        let savedName = this.name;\r\n\r\n        if (!Texture.SerializeBuffers) {\r\n            if (StringTools.StartsWith(this.name, \"data:\")) {\r\n                this.name = \"\";\r\n            }\r\n        }\r\n\r\n        if (StringTools.StartsWith(this.name, \"data:\") && this.url === this.name) {\r\n            this.url = \"\";\r\n        }\r\n\r\n        var serializationObject = super.serialize();\r\n\r\n        if (!serializationObject) {\r\n            return null;\r\n        }\r\n\r\n        if (Texture.SerializeBuffers || Texture.ForceSerializeBuffers) {\r\n            if (typeof this._buffer === \"string\" && (this._buffer as string).substr(0, 5) === \"data:\") {\r\n                serializationObject.base64String = this._buffer;\r\n                serializationObject.name = serializationObject.name.replace(\"data:\", \"\");\r\n            } else if (this.url && StringTools.StartsWith(this.url, \"data:\") && this._buffer instanceof Uint8Array) {\r\n                serializationObject.base64String = \"data:image/png;base64,\" + StringTools.EncodeArrayBufferToBase64(this._buffer);\r\n            } else if (Texture.ForceSerializeBuffers) {\r\n                serializationObject.base64String = CopyTools.GenerateBase64StringFromTexture(this);\r\n            }\r\n        }\r\n\r\n        serializationObject.invertY = this._invertY;\r\n        serializationObject.samplingMode = this.samplingMode;\r\n\r\n        this.name = savedName;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"Texture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Texture\";\r\n    }\r\n\r\n    /**\r\n     * Dispose the texture and release its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this.onLoadObservable.clear();\r\n\r\n        this._delayedOnLoad = null;\r\n        this._delayedOnError = null;\r\n    }\r\n\r\n    /**\r\n     * Parse the JSON representation of a texture in order to recreate the texture in the given scene.\r\n     * @param parsedTexture Define the JSON representation of the texture\r\n     * @param scene Define the scene the parsed texture should be instantiated in\r\n     * @param rootUrl Define the root url of the parsing sequence in the case of relative dependencies\r\n     * @returns The parsed texture if successful\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): Nullable<BaseTexture> {\r\n        if (parsedTexture.customType) {\r\n            var customTexture = InstantiationTools.Instantiate(parsedTexture.customType);\r\n            // Update Sampling Mode\r\n            var parsedCustomTexture: any = customTexture.Parse(parsedTexture, scene, rootUrl);\r\n            if (parsedTexture.samplingMode && parsedCustomTexture.updateSamplingMode && parsedCustomTexture._samplingMode) {\r\n                if (parsedCustomTexture._samplingMode !== parsedTexture.samplingMode) {\r\n                    parsedCustomTexture.updateSamplingMode(parsedTexture.samplingMode);\r\n                }\r\n            }\r\n            return parsedCustomTexture;\r\n        }\r\n\r\n        if (parsedTexture.isCube && !parsedTexture.isRenderTarget) {\r\n            return Texture._CubeTextureParser(parsedTexture, scene, rootUrl);\r\n        }\r\n\r\n        if (!parsedTexture.name && !parsedTexture.isRenderTarget) {\r\n            return null;\r\n        }\r\n\r\n        const onLoaded = () => {\r\n            // Clear cache\r\n            if (texture && texture._texture) {\r\n                texture._texture._cachedWrapU = null;\r\n                texture._texture._cachedWrapV = null;\r\n                texture._texture._cachedWrapR = null;\r\n            }\r\n\r\n            // Update Sampling Mode\r\n            if (parsedTexture.samplingMode) {\r\n                var sampling: number = parsedTexture.samplingMode;\r\n                if (texture && texture.samplingMode !== sampling) {\r\n                    texture.updateSamplingMode(sampling);\r\n                }\r\n            }\r\n            // Animations\r\n            if (texture && parsedTexture.animations) {\r\n                for (var animationIndex = 0; animationIndex < parsedTexture.animations.length; animationIndex++) {\r\n                    var parsedAnimation = parsedTexture.animations[animationIndex];\r\n                    const internalClass = _TypeStore.GetClass(\"BABYLON.Animation\");\r\n                    if (internalClass) {\r\n                        texture.animations.push(internalClass.Parse(parsedAnimation));\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        var texture = SerializationHelper.Parse(() => {\r\n            var generateMipMaps: boolean = true;\r\n            if (parsedTexture.noMipmap) {\r\n                generateMipMaps = false;\r\n            }\r\n            if (parsedTexture.mirrorPlane) {\r\n                var mirrorTexture = Texture._CreateMirror(parsedTexture.name, parsedTexture.renderTargetSize, scene, generateMipMaps);\r\n                mirrorTexture._waitingRenderList = parsedTexture.renderList;\r\n                mirrorTexture.mirrorPlane = Plane.FromArray(parsedTexture.mirrorPlane);\r\n                onLoaded();\r\n                return mirrorTexture;\r\n            } else if (parsedTexture.isRenderTarget) {\r\n                let renderTargetTexture: Nullable<RenderTargetTexture> = null;\r\n                if (parsedTexture.isCube) {\r\n                    // Search for an existing reflection probe (which contains a cube render target texture)\r\n                    if (scene.reflectionProbes) {\r\n                        for (var index = 0; index < scene.reflectionProbes.length; index++) {\r\n                            const probe = scene.reflectionProbes[index];\r\n                            if (probe.name === parsedTexture.name) {\r\n                                return probe.cubeTexture;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    renderTargetTexture = Texture._CreateRenderTargetTexture(parsedTexture.name, parsedTexture.renderTargetSize, scene, generateMipMaps);\r\n                    renderTargetTexture._waitingRenderList = parsedTexture.renderList;\r\n                }\r\n                onLoaded();\r\n                return renderTargetTexture;\r\n            } else {\r\n                var texture: Texture;\r\n                if (parsedTexture.base64String) {\r\n                    texture = Texture.CreateFromBase64String(parsedTexture.base64String, parsedTexture.name, scene, !generateMipMaps, parsedTexture.invertY, undefined, onLoaded);\r\n                } else {\r\n                    let url: string;\r\n                    if (parsedTexture.name && parsedTexture.name.indexOf(\"://\") > 0) {\r\n                        url = parsedTexture.name;\r\n                    }\r\n                    else {\r\n                        url = rootUrl + parsedTexture.name;\r\n                    }\r\n\r\n                    if (StringTools.StartsWith(parsedTexture.url, \"data:\") || (Texture.UseSerializedUrlIfAny && parsedTexture.url)) {\r\n                        url = parsedTexture.url;\r\n                    }\r\n                    texture = new Texture(url, scene, !generateMipMaps, parsedTexture.invertY, undefined, onLoaded);\r\n                }\r\n\r\n                return texture;\r\n            }\r\n        }, parsedTexture, scene);\r\n\r\n        return texture;\r\n    }\r\n\r\n    /**\r\n     * Creates a texture from its base 64 representation.\r\n     * @param data Define the base64 payload without the data: prefix\r\n     * @param name Define the name of the texture in the scene useful fo caching purpose for instance\r\n     * @param scene Define the scene the texture should belong to\r\n     * @param noMipmap Forces the texture to not create mip map information if true\r\n     * @param invertY define if the texture needs to be inverted on the y axis during loading\r\n     * @param samplingMode define the sampling mode we want for the texture while fectching from it (Texture.NEAREST_SAMPLINGMODE...)\r\n     * @param onLoad define a callback triggered when the texture has been loaded\r\n     * @param onError define a callback triggered when an error occurred during the loading session\r\n     * @param format define the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\r\n     * @returns the created texture\r\n     */\r\n    public static CreateFromBase64String(data: string, name: string, scene: Scene, noMipmap?: boolean, invertY?: boolean, samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        onLoad: Nullable<() => void> = null, onError: Nullable<() => void> = null, format: number = 5): Texture {\r\n        return new Texture(\"data:\" + name, scene, noMipmap, invertY, samplingMode, onLoad, onError, data, false, format);\r\n    }\r\n\r\n    /**\r\n     * Creates a texture from its data: representation. (data: will be added in case only the payload has been passed in)\r\n     * @param data Define the base64 payload without the data: prefix\r\n     * @param name Define the name of the texture in the scene useful fo caching purpose for instance\r\n     * @param buffer define the buffer to load the texture from in case the texture is loaded from a buffer representation\r\n     * @param scene Define the scene the texture should belong to\r\n     * @param deleteBuffer define if the buffer we are loading the texture from should be deleted after load\r\n     * @param noMipmap Forces the texture to not create mip map information if true\r\n     * @param invertY define if the texture needs to be inverted on the y axis during loading\r\n     * @param samplingMode define the sampling mode we want for the texture while fectching from it (Texture.NEAREST_SAMPLINGMODE...)\r\n     * @param onLoad define a callback triggered when the texture has been loaded\r\n     * @param onError define a callback triggered when an error occurred during the loading session\r\n     * @param format define the format of the texture we are trying to load (Engine.TEXTUREFORMAT_RGBA...)\r\n     * @returns the created texture\r\n     */\r\n    public static LoadFromDataString(name: string, buffer: any, scene: Scene, deleteBuffer: boolean = false, noMipmap: boolean = false, invertY: boolean = true, samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        onLoad: Nullable<() => void> = null, onError: Nullable<(message?: string, exception?: any) => void> = null, format: number = 5): Texture {\r\n        if (name.substr(0, 5) !== \"data:\") {\r\n            name = \"data:\" + name;\r\n        }\r\n\r\n        return new Texture(name, scene, noMipmap, invertY, samplingMode, onLoad, onError, buffer, deleteBuffer, format);\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\n_TypeStore.RegisteredTypes[\"BABYLON.Texture\"] = Texture;\r\nSerializationHelper._TextureParser = Texture.Parse;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}