{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * This is a holder class for the physics joint created by the physics plugin\r\n * It holds a set of functions to control the underlying joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar PhysicsJoint =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes the physics joint\r\n   * @param type The type of the physics joint\r\n   * @param jointData The data for the physics joint\r\n   */\n  function PhysicsJoint(\n  /**\r\n   * The type of the physics joint\r\n   */\n  type,\n  /**\r\n   * The data for the physics joint\r\n   */\n  jointData) {\n    this.type = type;\n    this.jointData = jointData;\n    jointData.nativeParams = jointData.nativeParams || {};\n  }\n\n  Object.defineProperty(PhysicsJoint.prototype, \"physicsJoint\", {\n    /**\r\n     * Gets the physics joint\r\n     */\n    get: function () {\n      return this._physicsJoint;\n    },\n\n    /**\r\n     * Sets the physics joint\r\n     */\n    set: function (newJoint) {\n      if (this._physicsJoint) {//remove from the wolrd\n      }\n\n      this._physicsJoint = newJoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsJoint.prototype, \"physicsPlugin\", {\n    /**\r\n     * Sets the physics plugin\r\n     */\n    set: function (physicsPlugin) {\n      this._physicsPlugin = physicsPlugin;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Execute a function that is physics-plugin specific.\r\n   * @param {Function} func the function that will be executed.\r\n   *                        It accepts two parameters: the physics world and the physics joint\r\n   */\n\n  PhysicsJoint.prototype.executeNativeFunction = function (func) {\n    func(this._physicsPlugin.world, this._physicsJoint);\n  }; //TODO check if the native joints are the same\n  //Joint Types\n\n  /**\r\n   * Distance-Joint type\r\n   */\n\n\n  PhysicsJoint.DistanceJoint = 0;\n  /**\r\n   * Hinge-Joint type\r\n   */\n\n  PhysicsJoint.HingeJoint = 1;\n  /**\r\n   * Ball-and-Socket joint type\r\n   */\n\n  PhysicsJoint.BallAndSocketJoint = 2;\n  /**\r\n   * Wheel-Joint type\r\n   */\n\n  PhysicsJoint.WheelJoint = 3;\n  /**\r\n   * Slider-Joint type\r\n   */\n\n  PhysicsJoint.SliderJoint = 4; //OIMO\n\n  /**\r\n   * Prismatic-Joint type\r\n   */\n\n  PhysicsJoint.PrismaticJoint = 5; //\n\n  /**\r\n   * Universal-Joint type\r\n   * ENERGY FTW! (compare with this - @see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions)\r\n   */\n\n  PhysicsJoint.UniversalJoint = 6;\n  /**\r\n   * Hinge-Joint 2 type\r\n   */\n\n  PhysicsJoint.Hinge2Joint = PhysicsJoint.WheelJoint; //Cannon\n\n  /**\r\n   * Point to Point Joint type.  Similar to a Ball-Joint.  Different in parameters\r\n   */\n\n  PhysicsJoint.PointToPointJoint = 8; //Cannon only at the moment\n\n  /**\r\n   * Spring-Joint type\r\n   */\n\n  PhysicsJoint.SpringJoint = 9;\n  /**\r\n   * Lock-Joint type\r\n   */\n\n  PhysicsJoint.LockJoint = 10;\n  return PhysicsJoint;\n}();\n\nexport { PhysicsJoint };\n/**\r\n * A class representing a physics distance joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar DistanceJoint =\n/** @class */\nfunction (_super) {\n  __extends(DistanceJoint, _super);\n  /**\r\n   *\r\n   * @param jointData The data for the Distance-Joint\r\n   */\n\n\n  function DistanceJoint(jointData) {\n    return _super.call(this, PhysicsJoint.DistanceJoint, jointData) || this;\n  }\n  /**\r\n   * Update the predefined distance.\r\n   * @param maxDistance The maximum preferred distance\r\n   * @param minDistance The minimum preferred distance\r\n   */\n\n\n  DistanceJoint.prototype.updateDistance = function (maxDistance, minDistance) {\n    this._physicsPlugin.updateDistanceJoint(this, maxDistance, minDistance);\n  };\n\n  return DistanceJoint;\n}(PhysicsJoint);\n\nexport { DistanceJoint };\n/**\r\n * Represents a Motor-Enabled Joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar MotorEnabledJoint =\n/** @class */\nfunction (_super) {\n  __extends(MotorEnabledJoint, _super);\n  /**\r\n   * Initializes the Motor-Enabled Joint\r\n   * @param type The type of the joint\r\n   * @param jointData The physica joint data for the joint\r\n   */\n\n\n  function MotorEnabledJoint(type, jointData) {\n    return _super.call(this, type, jointData) || this;\n  }\n  /**\r\n   * Set the motor values.\r\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n   * @param force the force to apply\r\n   * @param maxForce max force for this motor.\r\n   */\n\n\n  MotorEnabledJoint.prototype.setMotor = function (force, maxForce) {\n    this._physicsPlugin.setMotor(this, force || 0, maxForce);\n  };\n  /**\r\n   * Set the motor's limits.\r\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n   * @param upperLimit The upper limit of the motor\r\n   * @param lowerLimit The lower limit of the motor\r\n   */\n\n\n  MotorEnabledJoint.prototype.setLimit = function (upperLimit, lowerLimit) {\n    this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\n  };\n\n  return MotorEnabledJoint;\n}(PhysicsJoint);\n\nexport { MotorEnabledJoint };\n/**\r\n * This class represents a single physics Hinge-Joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar HingeJoint =\n/** @class */\nfunction (_super) {\n  __extends(HingeJoint, _super);\n  /**\r\n   * Initializes the Hinge-Joint\r\n   * @param jointData The joint data for the Hinge-Joint\r\n   */\n\n\n  function HingeJoint(jointData) {\n    return _super.call(this, PhysicsJoint.HingeJoint, jointData) || this;\n  }\n  /**\r\n   * Set the motor values.\r\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n   * @param {number} force the force to apply\r\n   * @param {number} maxForce max force for this motor.\r\n   */\n\n\n  HingeJoint.prototype.setMotor = function (force, maxForce) {\n    this._physicsPlugin.setMotor(this, force || 0, maxForce);\n  };\n  /**\r\n   * Set the motor's limits.\r\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n   * @param upperLimit The upper limit of the motor\r\n   * @param lowerLimit The lower limit of the motor\r\n   */\n\n\n  HingeJoint.prototype.setLimit = function (upperLimit, lowerLimit) {\n    this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\n  };\n\n  return HingeJoint;\n}(MotorEnabledJoint);\n\nexport { HingeJoint };\n/**\r\n * This class represents a dual hinge physics joint (same as wheel joint)\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar Hinge2Joint =\n/** @class */\nfunction (_super) {\n  __extends(Hinge2Joint, _super);\n  /**\r\n   * Initializes the Hinge2-Joint\r\n   * @param jointData The joint data for the Hinge2-Joint\r\n   */\n\n\n  function Hinge2Joint(jointData) {\n    return _super.call(this, PhysicsJoint.Hinge2Joint, jointData) || this;\n  }\n  /**\r\n  * Set the motor values.\r\n  * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n  * @param {number} targetSpeed the speed the motor is to reach\r\n  * @param {number} maxForce max force for this motor.\r\n  * @param {motorIndex} the motor's index, 0 or 1.\r\n  */\n\n\n  Hinge2Joint.prototype.setMotor = function (targetSpeed, maxForce, motorIndex) {\n    if (motorIndex === void 0) {\n      motorIndex = 0;\n    }\n\n    this._physicsPlugin.setMotor(this, targetSpeed || 0, maxForce, motorIndex);\n  };\n  /**\r\n   * Set the motor limits.\r\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n   * @param {number} upperLimit the upper limit\r\n   * @param {number} lowerLimit lower limit\r\n   * @param {motorIndex} the motor's index, 0 or 1.\r\n   */\n\n\n  Hinge2Joint.prototype.setLimit = function (upperLimit, lowerLimit, motorIndex) {\n    if (motorIndex === void 0) {\n      motorIndex = 0;\n    }\n\n    this._physicsPlugin.setLimit(this, upperLimit, lowerLimit, motorIndex);\n  };\n\n  return Hinge2Joint;\n}(MotorEnabledJoint);\n\nexport { Hinge2Joint };","map":{"version":3,"sources":["../../../sourceES6/core/Physics/physicsJoint.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector3 } from \"../Maths/math.vector\";\r\nimport { IPhysicsEnginePlugin } from \"./IPhysicsEngine\";\r\n/**\r\n * Interface for Physics-Joint data\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport interface PhysicsJointData {\r\n    //Important for some engines, optional!\r\n    /**\r\n     * The main pivot of the joint\r\n     */\r\n    mainPivot?: Vector3;\r\n    /**\r\n     * The connected pivot of the joint\r\n     */\r\n    connectedPivot?: Vector3;\r\n    /**\r\n     * The main axis of the joint\r\n     */\r\n    mainAxis?: Vector3;\r\n    /**\r\n     * The connected axis of the joint\r\n     */\r\n    connectedAxis?: Vector3;\r\n    /**\r\n     * The collision of the joint\r\n     */\r\n    collision?: boolean;\r\n    /**\r\n     * Native Oimo/Cannon/Energy data\r\n     */\r\n    nativeParams?: any;\r\n}\r\n\r\n/**\r\n * This is a holder class for the physics joint created by the physics plugin\r\n * It holds a set of functions to control the underlying joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class PhysicsJoint {\r\n\r\n    private _physicsJoint: any;\r\n    protected _physicsPlugin: IPhysicsEnginePlugin;\r\n\r\n    /**\r\n     * Initializes the physics joint\r\n     * @param type The type of the physics joint\r\n     * @param jointData The data for the physics joint\r\n     */\r\n    constructor(\r\n        /**\r\n         * The type of the physics joint\r\n         */\r\n        public type: number,\r\n        /**\r\n         * The data for the physics joint\r\n         */\r\n        public jointData: PhysicsJointData) {\r\n        jointData.nativeParams = jointData.nativeParams || {};\r\n    }\r\n\r\n    /**\r\n     * Gets the physics joint\r\n     */\r\n    public get physicsJoint(): any {\r\n        return this._physicsJoint;\r\n    }\r\n\r\n    /**\r\n     * Sets the physics joint\r\n     */\r\n    public set physicsJoint(newJoint: any) {\r\n\r\n        if (this._physicsJoint) {\r\n            //remove from the wolrd\r\n        }\r\n\r\n        this._physicsJoint = newJoint;\r\n    }\r\n\r\n    /**\r\n     * Sets the physics plugin\r\n     */\r\n    public set physicsPlugin(physicsPlugin: IPhysicsEnginePlugin) {\r\n        this._physicsPlugin = physicsPlugin;\r\n    }\r\n\r\n    /**\r\n     * Execute a function that is physics-plugin specific.\r\n     * @param {Function} func the function that will be executed.\r\n     *                        It accepts two parameters: the physics world and the physics joint\r\n     */\r\n    public executeNativeFunction(func: (world: any, physicsJoint: any) => void) {\r\n        func(this._physicsPlugin.world, this._physicsJoint);\r\n    }\r\n\r\n    //TODO check if the native joints are the same\r\n\r\n    //Joint Types\r\n    /**\r\n     * Distance-Joint type\r\n     */\r\n    public static DistanceJoint = 0;\r\n    /**\r\n     * Hinge-Joint type\r\n     */\r\n    public static HingeJoint = 1;\r\n    /**\r\n     * Ball-and-Socket joint type\r\n     */\r\n    public static BallAndSocketJoint = 2;\r\n    /**\r\n     * Wheel-Joint type\r\n     */\r\n    public static WheelJoint = 3;\r\n    /**\r\n     * Slider-Joint type\r\n     */\r\n    public static SliderJoint = 4;\r\n    //OIMO\r\n    /**\r\n     * Prismatic-Joint type\r\n     */\r\n    public static PrismaticJoint = 5;\r\n    //\r\n    /**\r\n     * Universal-Joint type\r\n     * ENERGY FTW! (compare with this - @see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions)\r\n     */\r\n    public static UniversalJoint = 6;\r\n    /**\r\n     * Hinge-Joint 2 type\r\n     */\r\n    public static Hinge2Joint = PhysicsJoint.WheelJoint;\r\n    //Cannon\r\n    /**\r\n     * Point to Point Joint type.  Similar to a Ball-Joint.  Different in parameters\r\n     */\r\n    public static PointToPointJoint = 8;\r\n    //Cannon only at the moment\r\n    /**\r\n     * Spring-Joint type\r\n     */\r\n    public static SpringJoint = 9;\r\n    /**\r\n     * Lock-Joint type\r\n     */\r\n    public static LockJoint = 10;\r\n}\r\n\r\n/**\r\n * A class representing a physics distance joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class DistanceJoint extends PhysicsJoint {\r\n    /**\r\n     *\r\n     * @param jointData The data for the Distance-Joint\r\n     */\r\n    constructor(jointData: DistanceJointData) {\r\n        super(PhysicsJoint.DistanceJoint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Update the predefined distance.\r\n     * @param maxDistance The maximum preferred distance\r\n     * @param minDistance The minimum preferred distance\r\n     */\r\n    public updateDistance(maxDistance: number, minDistance?: number) {\r\n        this._physicsPlugin.updateDistanceJoint(this, maxDistance, minDistance);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a Motor-Enabled Joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class MotorEnabledJoint extends PhysicsJoint implements IMotorEnabledJoint {\r\n\r\n    /**\r\n     * Initializes the Motor-Enabled Joint\r\n     * @param type The type of the joint\r\n     * @param jointData The physica joint data for the joint\r\n     */\r\n    constructor(type: number, jointData: PhysicsJointData) {\r\n        super(type, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param force the force to apply\r\n     * @param maxForce max force for this motor.\r\n     */\r\n    public setMotor(force?: number, maxForce?: number) {\r\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Set the motor's limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents a single physics Hinge-Joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class HingeJoint extends MotorEnabledJoint {\r\n\r\n    /**\r\n     * Initializes the Hinge-Joint\r\n     * @param jointData The joint data for the Hinge-Joint\r\n     */\r\n    constructor(jointData: PhysicsJointData) {\r\n        super(PhysicsJoint.HingeJoint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param {number} force the force to apply\r\n     * @param {number} maxForce max force for this motor.\r\n     */\r\n    public setMotor(force?: number, maxForce?: number) {\r\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Set the motor's limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents a dual hinge physics joint (same as wheel joint)\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class Hinge2Joint extends MotorEnabledJoint {\r\n\r\n    /**\r\n     * Initializes the Hinge2-Joint\r\n     * @param jointData The joint data for the Hinge2-Joint\r\n     */\r\n    constructor(jointData: PhysicsJointData) {\r\n        super(PhysicsJoint.Hinge2Joint, jointData);\r\n    }\r\n\r\n    /**\r\n    * Set the motor values.\r\n    * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n    * @param {number} targetSpeed the speed the motor is to reach\r\n    * @param {number} maxForce max force for this motor.\r\n    * @param {motorIndex} the motor's index, 0 or 1.\r\n    */\r\n    public setMotor(targetSpeed?: number, maxForce?: number, motorIndex: number = 0) {\r\n        this._physicsPlugin.setMotor(this, targetSpeed || 0, maxForce, motorIndex);\r\n    }\r\n\r\n    /**\r\n     * Set the motor limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param {number} upperLimit the upper limit\r\n     * @param {number} lowerLimit lower limit\r\n     * @param {motorIndex} the motor's index, 0 or 1.\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number, motorIndex: number = 0) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit, motorIndex);\r\n    }\r\n}\r\n\r\n/**\r\n * Interface for a motor enabled joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport interface IMotorEnabledJoint {\r\n    /**\r\n     * Physics joint\r\n     */\r\n    physicsJoint: any;\r\n    /**\r\n     * Sets the motor of the motor-enabled joint\r\n     * @param force The force of the motor\r\n     * @param maxForce The maximum force of the motor\r\n     * @param motorIndex The index of the motor\r\n     */\r\n    setMotor(force?: number, maxForce?: number, motorIndex?: number): void;\r\n    /**\r\n     * Sets the limit of the motor\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     * @param motorIndex The index of the motor\r\n     */\r\n    setLimit(upperLimit: number, lowerLimit?: number, motorIndex?: number): void;\r\n}\r\n\r\n/**\r\n * Joint data for a Distance-Joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport interface DistanceJointData extends PhysicsJointData {\r\n    /**\r\n     * Max distance the 2 joint objects can be apart\r\n     */\r\n    maxDistance: number;\r\n    //Oimo - minDistance\r\n    //Cannon - maxForce\r\n}\r\n\r\n/**\r\n * Joint data from a spring joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport interface SpringJointData extends PhysicsJointData {\r\n    /**\r\n     * Length of the spring\r\n     */\r\n    length: number;\r\n    /**\r\n     * Stiffness of the spring\r\n     */\r\n    stiffness: number;\r\n    /**\r\n     * Damping of the spring\r\n     */\r\n    damping: number;\r\n    /** this callback will be called when applying the force to the impostors. */\r\n    forceApplicationCallback: () => void;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}