{"ast":null,"code":"import { DeviceType } from './InputDevices/deviceEnums';\n/**\r\n * This class will take all inputs from Keyboard, Pointer, and\r\n * any Gamepads and provide a polling system that all devices\r\n * will use.  This class assumes that there will only be one\r\n * pointer device and one keyboard.\r\n */\n\nvar DeviceInputSystem =\n/** @class */\nfunction () {\n  function DeviceInputSystem(engine) {\n    /**\r\n     * Callback to be triggered when a device is disconnected\r\n     */\n    this.onDeviceDisconnected = function () {}; // Private Members\n\n\n    this._inputs = [];\n    this._keyboardActive = false;\n    this._pointerActive = false;\n\n    this._keyboardDownEvent = function (evt) {};\n\n    this._keyboardUpEvent = function (evt) {};\n\n    this._pointerMoveEvent = function (evt) {};\n\n    this._pointerDownEvent = function (evt) {};\n\n    this._pointerUpEvent = function (evt) {};\n\n    this._gamepadConnectedEvent = function (evt) {};\n\n    this._gamepadDisconnectedEvent = function (evt) {};\n\n    this._onDeviceConnected = function () {};\n\n    var inputElement = engine.getInputElement();\n\n    if (inputElement) {\n      this._elementToAttachTo = inputElement;\n\n      this._handleKeyActions();\n\n      this._handlePointerActions();\n\n      this._handleGamepadActions(); // Check for devices that are already connected but aren't registered. Currently, only checks for gamepads and mouse\n\n\n      this._checkForConnectedDevices();\n    }\n  }\n\n  Object.defineProperty(DeviceInputSystem.prototype, \"onDeviceConnected\", {\n    /**\r\n     * Returns onDeviceConnected callback property\r\n     * @returns Callback with function to execute when a device is connected\r\n     */\n    get: function () {\n      return this._onDeviceConnected;\n    },\n\n    /**\r\n     * Sets callback function when a device is connected and executes against all connected devices\r\n     * @param callback Function to execute when a device is connected\r\n     */\n    set: function (callback) {\n      this._onDeviceConnected = callback; // Iterate through each active device and rerun new callback\n\n      for (var deviceType = 0; deviceType < this._inputs.length; deviceType++) {\n        if (this._inputs[deviceType]) {\n          for (var deviceSlot = 0; deviceSlot < this._inputs[deviceType].length; deviceSlot++) {\n            if (this._inputs[deviceType][deviceSlot]) {\n              this._onDeviceConnected(deviceType, deviceSlot);\n            }\n          }\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Creates a new DeviceInputSystem instance\r\n   * @param engine Engine to pull input element from\r\n   * @returns The new instance\r\n   */\n\n  DeviceInputSystem.Create = function (engine) {\n    // If running in Babylon Native, then defer to the native input system, which has the same public contract\n    if (typeof _native !== 'undefined' && _native.DeviceInputSystem) {\n      return new _native.DeviceInputSystem(engine);\n    }\n\n    return new DeviceInputSystem(engine);\n  }; // Public functions\n\n  /**\r\n   * Checks for current device input value, given an id and input index\r\n   * @param deviceName Id of connected device\r\n   * @param inputIndex Index of device input\r\n   * @returns Current value of input\r\n   */\n\n  /**\r\n   * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n   * @param deviceType Enum specifiying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   * @param inputIndex Id of input to be checked\r\n   * @returns Current value of input\r\n   */\n\n\n  DeviceInputSystem.prototype.pollInput = function (deviceType, deviceSlot, inputIndex) {\n    var device = this._inputs[deviceType][deviceSlot];\n\n    if (!device) {\n      throw \"Unable to find device \" + DeviceType[deviceType];\n    }\n\n    this._updateDevice(deviceType, deviceSlot, inputIndex);\n\n    if (device[inputIndex] === undefined) {\n      throw \"Unable to find input \" + inputIndex + \" for device \" + DeviceType[deviceType] + \" in slot \" + deviceSlot;\n    }\n\n    return device[inputIndex];\n  };\n  /**\r\n   * Dispose of all the eventlisteners\r\n   */\n\n\n  DeviceInputSystem.prototype.dispose = function () {\n    // Keyboard Events\n    if (this._keyboardActive) {\n      window.removeEventListener(\"keydown\", this._keyboardDownEvent);\n      window.removeEventListener(\"keyup\", this._keyboardUpEvent);\n    } // Pointer Events\n\n\n    if (this._pointerActive) {\n      this._elementToAttachTo.removeEventListener(\"pointermove\", this._pointerMoveEvent);\n\n      this._elementToAttachTo.removeEventListener(\"pointerdown\", this._pointerDownEvent);\n\n      this._elementToAttachTo.removeEventListener(\"pointerup\", this._pointerUpEvent);\n    } // Gamepad Events\n\n\n    window.removeEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\n    window.removeEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\n  };\n  /**\r\n   * Checks for existing connections to devices and register them, if necessary\r\n   * Currently handles gamepads and mouse\r\n   */\n\n\n  DeviceInputSystem.prototype._checkForConnectedDevices = function () {\n    var gamepads = navigator.getGamepads();\n\n    for (var _i = 0, gamepads_1 = gamepads; _i < gamepads_1.length; _i++) {\n      var gamepad = gamepads_1[_i];\n\n      if (gamepad) {\n        this._addGamePad(gamepad);\n      }\n    } // If the device in use has mouse capabilities, pre-register mouse\n\n\n    if (matchMedia('(pointer:fine)').matches) {\n      // This will provide a dummy value for the cursor position and is expected to be overriden when the first mouse event happens.\n      // There isn't any good way to get the current position outside of a pointer event so that's why this was done.\n      this._addPointerDevice(DeviceType.Mouse, 0, 0, 0);\n    }\n  }; // Private functions\n\n  /**\r\n   * Add a gamepad to the DeviceInputSystem\r\n   * @param gamepad A single DOM Gamepad object\r\n   */\n\n\n  DeviceInputSystem.prototype._addGamePad = function (gamepad) {\n    var deviceType = this._getGamepadDeviceType(gamepad.id);\n\n    var deviceSlot = gamepad.index;\n\n    this._registerDevice(deviceType, deviceSlot, gamepad.buttons.length + gamepad.axes.length);\n\n    this._gamepads = this._gamepads || new Array(gamepad.index + 1);\n    this._gamepads[deviceSlot] = deviceType;\n  };\n  /**\r\n   * Add pointer device to DeviceInputSystem\r\n   * @param deviceType Type of Pointer to add\r\n   * @param deviceSlot Pointer ID (0 for mouse, pointerId for Touch)\r\n   * @param currentX Current X at point of adding\r\n   * @param currentY Current Y at point of adding\r\n   */\n\n\n  DeviceInputSystem.prototype._addPointerDevice = function (deviceType, deviceSlot, currentX, currentY) {\n    this._pointerActive = true;\n\n    this._registerDevice(deviceType, deviceSlot, DeviceInputSystem._MAX_POINTER_INPUTS);\n\n    var pointer = this._inputs[deviceType][deviceSlot];\n    /* initalize our pointer position immediately after registration */\n\n    pointer[0] = currentX;\n    pointer[1] = currentY;\n  };\n  /**\r\n   * Add device and inputs to device array\r\n   * @param deviceType Enum specifiying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   * @param numberOfInputs Number of input entries to create for given device\r\n   */\n\n\n  DeviceInputSystem.prototype._registerDevice = function (deviceType, deviceSlot, numberOfInputs) {\n    if (!this._inputs[deviceType]) {\n      this._inputs[deviceType] = [];\n    }\n\n    if (!this._inputs[deviceType][deviceSlot]) {\n      var device = new Array(numberOfInputs);\n\n      for (var i = 0; i < numberOfInputs; i++) {\n        device[i] = 0;\n        /* set device input as unpressed */\n      }\n\n      this._inputs[deviceType][deviceSlot] = device;\n      this.onDeviceConnected(deviceType, deviceSlot);\n    }\n  };\n  /**\r\n   * Given a specific device name, remove that device from the device map\r\n   * @param deviceType Enum specifiying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   */\n\n\n  DeviceInputSystem.prototype._unregisterDevice = function (deviceType, deviceSlot) {\n    if (this._inputs[deviceType][deviceSlot]) {\n      delete this._inputs[deviceType][deviceSlot];\n      this.onDeviceDisconnected(deviceType, deviceSlot);\n    }\n  };\n  /**\r\n   * Handle all actions that come from keyboard interaction\r\n   */\n\n\n  DeviceInputSystem.prototype._handleKeyActions = function () {\n    var _this = this;\n\n    this._keyboardDownEvent = function (evt) {\n      if (!_this._keyboardActive) {\n        _this._keyboardActive = true;\n\n        _this._registerDevice(DeviceType.Keyboard, 0, DeviceInputSystem._MAX_KEYCODES);\n      }\n\n      var kbKey = _this._inputs[DeviceType.Keyboard][0];\n\n      if (kbKey) {\n        if (_this.onInputChanged) {\n          _this.onInputChanged(DeviceType.Keyboard, 0, evt.keyCode, kbKey[evt.keyCode], 1);\n        }\n\n        kbKey[evt.keyCode] = 1;\n      }\n    };\n\n    this._keyboardUpEvent = function (evt) {\n      var kbKey = _this._inputs[DeviceType.Keyboard][0];\n\n      if (kbKey) {\n        if (_this.onInputChanged) {\n          _this.onInputChanged(DeviceType.Keyboard, 0, evt.keyCode, kbKey[evt.keyCode], 0);\n        }\n\n        kbKey[evt.keyCode] = 0;\n      }\n    };\n\n    window.addEventListener(\"keydown\", this._keyboardDownEvent);\n    window.addEventListener(\"keyup\", this._keyboardUpEvent);\n  };\n  /**\r\n   * Handle all actions that come from pointer interaction\r\n   */\n\n\n  DeviceInputSystem.prototype._handlePointerActions = function () {\n    var _this = this;\n\n    this._pointerMoveEvent = function (evt) {\n      var deviceType = evt.pointerType == \"mouse\" ? DeviceType.Mouse : DeviceType.Touch;\n      var deviceSlot = evt.pointerType == \"mouse\" ? 0 : evt.pointerId;\n\n      if (!_this._inputs[deviceType]) {\n        _this._inputs[deviceType] = [];\n      }\n\n      if (!_this._inputs[deviceType][deviceSlot]) {\n        _this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\n      }\n\n      var pointer = _this._inputs[deviceType][deviceSlot];\n\n      if (pointer) {\n        if (_this.onInputChanged) {\n          _this.onInputChanged(deviceType, deviceSlot, 0, pointer[0], evt.clientX);\n\n          _this.onInputChanged(deviceType, deviceSlot, 1, pointer[1], evt.clientY);\n        }\n\n        pointer[0] = evt.clientX;\n        pointer[1] = evt.clientY;\n      }\n    };\n\n    this._pointerDownEvent = function (evt) {\n      var deviceType = evt.pointerType == \"mouse\" ? DeviceType.Mouse : DeviceType.Touch;\n      var deviceSlot = evt.pointerType == \"mouse\" ? 0 : evt.pointerId;\n\n      if (!_this._inputs[deviceType]) {\n        _this._inputs[deviceType] = [];\n      }\n\n      if (!_this._inputs[deviceType][deviceSlot]) {\n        _this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\n      }\n\n      var pointer = _this._inputs[deviceType][deviceSlot];\n\n      if (pointer) {\n        if (_this.onInputChanged) {\n          _this.onInputChanged(deviceType, deviceSlot, 0, pointer[0], evt.clientX);\n\n          _this.onInputChanged(deviceType, deviceSlot, 1, pointer[1], evt.clientY);\n\n          _this.onInputChanged(deviceType, deviceSlot, evt.button + 2, pointer[evt.button + 2], 1);\n        }\n\n        pointer[0] = evt.clientX;\n        pointer[1] = evt.clientY;\n        pointer[evt.button + 2] = 1;\n      }\n    };\n\n    this._pointerUpEvent = function (evt) {\n      var deviceType = evt.pointerType == \"mouse\" ? DeviceType.Mouse : DeviceType.Touch;\n      var deviceSlot = evt.pointerType == \"mouse\" ? 0 : evt.pointerId;\n      var pointer = _this._inputs[deviceType][deviceSlot];\n\n      if (pointer) {\n        if (_this.onInputChanged) {\n          _this.onInputChanged(deviceType, deviceSlot, evt.button + 2, pointer[evt.button + 2], 0);\n        }\n\n        pointer[0] = evt.clientX;\n        pointer[1] = evt.clientY;\n        pointer[evt.button + 2] = 0;\n      } // We don't want to unregister the mouse because we may miss input data when a mouse is moving after a click\n\n\n      if (evt.pointerType != \"mouse\") {\n        _this._unregisterDevice(deviceType, deviceSlot);\n      }\n    };\n\n    this._elementToAttachTo.addEventListener(\"pointermove\", this._pointerMoveEvent);\n\n    this._elementToAttachTo.addEventListener(\"pointerdown\", this._pointerDownEvent);\n\n    this._elementToAttachTo.addEventListener(\"pointerup\", this._pointerUpEvent);\n  };\n  /**\r\n   * Handle all actions that come from gamepad interaction\r\n   */\n\n\n  DeviceInputSystem.prototype._handleGamepadActions = function () {\n    var _this = this;\n\n    this._gamepadConnectedEvent = function (evt) {\n      _this._addGamePad(evt.gamepad);\n    };\n\n    this._gamepadDisconnectedEvent = function (evt) {\n      if (_this._gamepads) {\n        var deviceType = _this._getGamepadDeviceType(evt.gamepad.id);\n\n        var deviceSlot = evt.gamepad.index;\n\n        _this._unregisterDevice(deviceType, deviceSlot);\n\n        delete _this._gamepads[deviceSlot];\n      }\n    };\n\n    window.addEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\n    window.addEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\n  };\n  /**\r\n   * Update all non-event based devices with each frame\r\n   * @param deviceType Enum specifiying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   * @param inputIndex Id of input to be checked\r\n   */\n\n\n  DeviceInputSystem.prototype._updateDevice = function (deviceType, deviceSlot, inputIndex) {\n    // Gamepads\n    var gp = navigator.getGamepads()[deviceSlot];\n\n    if (gp && deviceType == this._gamepads[deviceSlot]) {\n      var device = this._inputs[deviceType][deviceSlot];\n\n      if (inputIndex >= gp.buttons.length) {\n        device[inputIndex] = gp.axes[inputIndex - gp.buttons.length].valueOf();\n      } else {\n        device[inputIndex] = gp.buttons[inputIndex].value;\n      }\n    }\n  };\n  /**\r\n   * Gets DeviceType from the device name\r\n   * @param deviceName Name of Device from DeviceInputSystem\r\n   * @returns DeviceType enum value\r\n   */\n\n\n  DeviceInputSystem.prototype._getGamepadDeviceType = function (deviceName) {\n    if (deviceName.indexOf(\"054c\") !== -1) {\n      // DualShock 4 Gamepad\n      return DeviceType.DualShock;\n    } else if (deviceName.indexOf(\"Xbox One\") !== -1 || deviceName.search(\"Xbox 360\") !== -1 || deviceName.search(\"xinput\") !== -1) {\n      // Xbox Gamepad\n      return DeviceType.Xbox;\n    } else if (deviceName.indexOf(\"057e\") !== -1) {\n      // Switch Gamepad\n      return DeviceType.Switch;\n    }\n\n    return DeviceType.Generic;\n  };\n\n  DeviceInputSystem._MAX_KEYCODES = 255;\n  DeviceInputSystem._MAX_POINTER_INPUTS = 7;\n  return DeviceInputSystem;\n}();\n\nexport { DeviceInputSystem };","map":{"version":3,"sources":["../../../sourceES6/core/DeviceInput/deviceInputSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import { Engine } from '../Engines/engine';\r\nimport { IDisposable } from '../scene';\r\nimport { Nullable } from '../types';\r\nimport { DeviceType } from './InputDevices/deviceEnums';\r\n\r\n/** @hidden */\r\ndeclare const _native: any;\r\n\r\n/**\r\n * This class will take all inputs from Keyboard, Pointer, and\r\n * any Gamepads and provide a polling system that all devices\r\n * will use.  This class assumes that there will only be one\r\n * pointer device and one keyboard.\r\n */\r\nexport class DeviceInputSystem implements IDisposable {\r\n\r\n    /**\r\n     * Returns onDeviceConnected callback property\r\n     * @returns Callback with function to execute when a device is connected\r\n     */\r\n    public get onDeviceConnected() { return this._onDeviceConnected; }\r\n\r\n    /**\r\n     * Sets callback function when a device is connected and executes against all connected devices\r\n     * @param callback Function to execute when a device is connected\r\n     */\r\n    public set onDeviceConnected(callback) {\r\n        this._onDeviceConnected = callback;\r\n\r\n        // Iterate through each active device and rerun new callback\r\n        for (let deviceType = 0; deviceType < this._inputs.length; deviceType++) {\r\n            if (this._inputs[deviceType]) {\r\n                for (let deviceSlot = 0; deviceSlot < this._inputs[deviceType].length; deviceSlot++) {\r\n                    if (this._inputs[deviceType][deviceSlot]) {\r\n                        this._onDeviceConnected(deviceType, deviceSlot);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback to be triggered when a device is disconnected\r\n     */\r\n    public onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void = () => { };\r\n\r\n    /**\r\n     * Callback to be triggered when event driven input is updated\r\n     */\r\n    public onInputChanged: (deviceType: DeviceType, deviceSlot: number, inputIndex: number, previousState: Nullable<number>, currentState: Nullable<number>) => void;\r\n\r\n    // Private Members\r\n    private _inputs: Array<Array<Array<number>>> = [];\r\n    private _gamepads: Array<DeviceType>;\r\n    private _keyboardActive: boolean = false;\r\n    private _pointerActive: boolean = false;\r\n    private _elementToAttachTo: HTMLElement;\r\n\r\n    private _keyboardDownEvent = (evt: any) => { };\r\n    private _keyboardUpEvent = (evt: any) => { };\r\n\r\n    private _pointerMoveEvent = (evt: any) => { };\r\n    private _pointerDownEvent = (evt: any) => { };\r\n    private _pointerUpEvent = (evt: any) => { };\r\n\r\n    private _gamepadConnectedEvent = (evt: any) => { };\r\n    private _gamepadDisconnectedEvent = (evt: any) => { };\r\n\r\n    private _onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void = () => { };\r\n\r\n    private static _MAX_KEYCODES: number = 255;\r\n    private static _MAX_POINTER_INPUTS: number = 7;\r\n\r\n    private constructor(engine: Engine) {\r\n        const inputElement = engine.getInputElement();\r\n\r\n        if (inputElement) {\r\n            this._elementToAttachTo = inputElement;\r\n            this._handleKeyActions();\r\n            this._handlePointerActions();\r\n            this._handleGamepadActions();\r\n\r\n            // Check for devices that are already connected but aren't registered. Currently, only checks for gamepads and mouse\r\n            this._checkForConnectedDevices();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new DeviceInputSystem instance\r\n     * @param engine Engine to pull input element from\r\n     * @returns The new instance\r\n     */\r\n    public static Create(engine: Engine): DeviceInputSystem {\r\n        // If running in Babylon Native, then defer to the native input system, which has the same public contract\r\n        if (typeof _native !== 'undefined' && _native.DeviceInputSystem) {\r\n            return new _native.DeviceInputSystem(engine);\r\n        }\r\n\r\n        return new DeviceInputSystem(engine);\r\n    }\r\n\r\n    // Public functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index\r\n     * @param deviceName Id of connected device\r\n     * @param inputIndex Index of device input\r\n     * @returns Current value of input\r\n     */\r\n\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifiying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    public pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number {\r\n        const device = this._inputs[deviceType][deviceSlot];\r\n\r\n        if (!device) {\r\n            throw `Unable to find device ${DeviceType[deviceType]}`;\r\n        }\r\n\r\n        this._updateDevice(deviceType, deviceSlot, inputIndex);\r\n\r\n        if (device[inputIndex] === undefined) {\r\n            throw `Unable to find input ${inputIndex} for device ${DeviceType[deviceType]} in slot ${deviceSlot}`;\r\n        }\r\n\r\n        return device[inputIndex];\r\n    }\r\n\r\n    /**\r\n     * Dispose of all the eventlisteners\r\n     */\r\n    public dispose() {\r\n        // Keyboard Events\r\n        if (this._keyboardActive) {\r\n            window.removeEventListener(\"keydown\", this._keyboardDownEvent);\r\n            window.removeEventListener(\"keyup\", this._keyboardUpEvent);\r\n        }\r\n\r\n        // Pointer Events\r\n        if (this._pointerActive) {\r\n            this._elementToAttachTo.removeEventListener(\"pointermove\", this._pointerMoveEvent);\r\n            this._elementToAttachTo.removeEventListener(\"pointerdown\", this._pointerDownEvent);\r\n            this._elementToAttachTo.removeEventListener(\"pointerup\", this._pointerUpEvent);\r\n        }\r\n\r\n        // Gamepad Events\r\n        window.removeEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\r\n        window.removeEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\r\n    }\r\n\r\n    /**\r\n     * Checks for existing connections to devices and register them, if necessary\r\n     * Currently handles gamepads and mouse\r\n     */\r\n    private _checkForConnectedDevices() {\r\n        const gamepads = navigator.getGamepads();\r\n\r\n        for (const gamepad of gamepads) {\r\n            if (gamepad) {\r\n                this._addGamePad(gamepad);\r\n            }\r\n        }\r\n\r\n        // If the device in use has mouse capabilities, pre-register mouse\r\n        if (matchMedia('(pointer:fine)').matches) {\r\n            // This will provide a dummy value for the cursor position and is expected to be overriden when the first mouse event happens.\r\n            // There isn't any good way to get the current position outside of a pointer event so that's why this was done.\r\n            this._addPointerDevice(DeviceType.Mouse, 0, 0, 0);\r\n        }\r\n    }\r\n\r\n    // Private functions\r\n    /**\r\n     * Add a gamepad to the DeviceInputSystem\r\n     * @param gamepad A single DOM Gamepad object\r\n     */\r\n    private _addGamePad(gamepad: any) {\r\n        const deviceType = this._getGamepadDeviceType(gamepad.id);\r\n        const deviceSlot = gamepad.index;\r\n\r\n        this._registerDevice(deviceType, deviceSlot, gamepad.buttons.length + gamepad.axes.length);\r\n        this._gamepads = this._gamepads || new Array<DeviceType>(gamepad.index + 1);\r\n        this._gamepads[deviceSlot] = deviceType;\r\n    }\r\n\r\n    /**\r\n     * Add pointer device to DeviceInputSystem\r\n     * @param deviceType Type of Pointer to add\r\n     * @param deviceSlot Pointer ID (0 for mouse, pointerId for Touch)\r\n     * @param currentX Current X at point of adding\r\n     * @param currentY Current Y at point of adding\r\n     */\r\n    private _addPointerDevice(deviceType: DeviceType, deviceSlot: number, currentX: number, currentY: number) {\r\n        this._pointerActive = true;\r\n        this._registerDevice(deviceType, deviceSlot, DeviceInputSystem._MAX_POINTER_INPUTS);\r\n        const pointer = this._inputs[deviceType][deviceSlot]; /* initalize our pointer position immediately after registration */\r\n        pointer[0] = currentX;\r\n        pointer[1] = currentY;\r\n    }\r\n\r\n    /**\r\n     * Add device and inputs to device array\r\n     * @param deviceType Enum specifiying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param numberOfInputs Number of input entries to create for given device\r\n     */\r\n    private _registerDevice(deviceType: DeviceType, deviceSlot: number, numberOfInputs: number) {\r\n        if (!this._inputs[deviceType]) {\r\n            this._inputs[deviceType] = [];\r\n        }\r\n\r\n        if (!this._inputs[deviceType][deviceSlot]) {\r\n            const device = new Array<number>(numberOfInputs);\r\n\r\n            for (let i = 0; i < numberOfInputs; i++) {\r\n                device[i] = 0; /* set device input as unpressed */\r\n            }\r\n\r\n            this._inputs[deviceType][deviceSlot] = device;\r\n            this.onDeviceConnected(deviceType, deviceSlot);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a specific device name, remove that device from the device map\r\n     * @param deviceType Enum specifiying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     */\r\n    private _unregisterDevice(deviceType: DeviceType, deviceSlot: number) {\r\n        if (this._inputs[deviceType][deviceSlot]) {\r\n            delete this._inputs[deviceType][deviceSlot];\r\n            this.onDeviceDisconnected(deviceType, deviceSlot);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from keyboard interaction\r\n     */\r\n    private _handleKeyActions() {\r\n        this._keyboardDownEvent = ((evt) => {\r\n            if (!this._keyboardActive) {\r\n                this._keyboardActive = true;\r\n                this._registerDevice(DeviceType.Keyboard, 0, DeviceInputSystem._MAX_KEYCODES);\r\n            }\r\n\r\n            const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n            if (kbKey) {\r\n                if (this.onInputChanged) {\r\n                    this.onInputChanged(DeviceType.Keyboard, 0, evt.keyCode, kbKey[evt.keyCode], 1);\r\n                }\r\n                kbKey[evt.keyCode] = 1;\r\n            }\r\n        });\r\n\r\n        this._keyboardUpEvent = ((evt) => {\r\n            const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n            if (kbKey) {\r\n                if (this.onInputChanged) {\r\n                    this.onInputChanged(DeviceType.Keyboard, 0, evt.keyCode, kbKey[evt.keyCode], 0);\r\n                }\r\n                kbKey[evt.keyCode] = 0;\r\n            }\r\n        });\r\n\r\n        window.addEventListener(\"keydown\", this._keyboardDownEvent);\r\n        window.addEventListener(\"keyup\", this._keyboardUpEvent);\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from pointer interaction\r\n     */\r\n    private _handlePointerActions() {\r\n        this._pointerMoveEvent = ((evt) => {\r\n            const deviceType = (evt.pointerType == \"mouse\") ? DeviceType.Mouse : DeviceType.Touch;\r\n            const deviceSlot = (evt.pointerType == \"mouse\") ? 0 : evt.pointerId;\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = [];\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                if (this.onInputChanged) {\r\n                    this.onInputChanged(deviceType, deviceSlot, 0, pointer[0], evt.clientX);\r\n                    this.onInputChanged(deviceType, deviceSlot, 1, pointer[1], evt.clientY);\r\n                }\r\n                pointer[0] = evt.clientX;\r\n                pointer[1] = evt.clientY;\r\n            }\r\n        });\r\n\r\n        this._pointerDownEvent = ((evt) => {\r\n            const deviceType = (evt.pointerType == \"mouse\") ? DeviceType.Mouse : DeviceType.Touch;\r\n            const deviceSlot = (evt.pointerType == \"mouse\") ? 0 : evt.pointerId;\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = [];\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                if (this.onInputChanged) {\r\n                    this.onInputChanged(deviceType, deviceSlot, 0, pointer[0], evt.clientX);\r\n                    this.onInputChanged(deviceType, deviceSlot, 1, pointer[1], evt.clientY);\r\n                    this.onInputChanged(deviceType, deviceSlot, evt.button + 2, pointer[evt.button + 2], 1);\r\n                }\r\n                pointer[0] = evt.clientX;\r\n                pointer[1] = evt.clientY;\r\n                pointer[evt.button + 2] = 1;\r\n            }\r\n        });\r\n\r\n        this._pointerUpEvent = ((evt) => {\r\n            const deviceType = (evt.pointerType == \"mouse\") ? DeviceType.Mouse : DeviceType.Touch;\r\n            const deviceSlot = (evt.pointerType == \"mouse\") ? 0 : evt.pointerId;\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                if (this.onInputChanged) {\r\n                    this.onInputChanged(deviceType, deviceSlot, evt.button + 2, pointer[evt.button + 2], 0);\r\n                }\r\n\r\n                pointer[0] = evt.clientX;\r\n                pointer[1] = evt.clientY;\r\n                pointer[evt.button + 2] = 0;\r\n            }\r\n            // We don't want to unregister the mouse because we may miss input data when a mouse is moving after a click\r\n            if (evt.pointerType != \"mouse\") {\r\n                this._unregisterDevice(deviceType, deviceSlot);\r\n            }\r\n\r\n        });\r\n\r\n        this._elementToAttachTo.addEventListener(\"pointermove\", this._pointerMoveEvent);\r\n        this._elementToAttachTo.addEventListener(\"pointerdown\", this._pointerDownEvent);\r\n        this._elementToAttachTo.addEventListener(\"pointerup\", this._pointerUpEvent);\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from gamepad interaction\r\n     */\r\n    private _handleGamepadActions() {\r\n        this._gamepadConnectedEvent = ((evt: any) => {\r\n            this._addGamePad(evt.gamepad);\r\n        });\r\n\r\n        this._gamepadDisconnectedEvent = ((evt: any) => {\r\n            if (this._gamepads) {\r\n                const deviceType = this._getGamepadDeviceType(evt.gamepad.id);\r\n                const deviceSlot = evt.gamepad.index;\r\n\r\n                this._unregisterDevice(deviceType, deviceSlot);\r\n                delete this._gamepads[deviceSlot];\r\n            }\r\n        });\r\n\r\n        window.addEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\r\n        window.addEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\r\n    }\r\n\r\n    /**\r\n     * Update all non-event based devices with each frame\r\n     * @param deviceType Enum specifiying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     */\r\n    private _updateDevice(deviceType: DeviceType, deviceSlot: number, inputIndex: number) {\r\n        // Gamepads\r\n        const gp = navigator.getGamepads()[deviceSlot];\r\n\r\n        if (gp && deviceType == this._gamepads[deviceSlot]) {\r\n            const device = this._inputs[deviceType][deviceSlot];\r\n\r\n            if (inputIndex >= gp.buttons.length) {\r\n                device[inputIndex] = gp.axes[inputIndex - gp.buttons.length].valueOf();\r\n            }\r\n            else {\r\n                device[inputIndex] = gp.buttons[inputIndex].value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets DeviceType from the device name\r\n     * @param deviceName Name of Device from DeviceInputSystem\r\n     * @returns DeviceType enum value\r\n     */\r\n    private _getGamepadDeviceType(deviceName: string): DeviceType {\r\n        if (deviceName.indexOf(\"054c\") !== -1) { // DualShock 4 Gamepad\r\n            return DeviceType.DualShock;\r\n        }\r\n        else if (deviceName.indexOf(\"Xbox One\") !== -1 || deviceName.search(\"Xbox 360\") !== -1 || deviceName.search(\"xinput\") !== -1) { // Xbox Gamepad\r\n            return DeviceType.Xbox;\r\n        }\r\n        else if (deviceName.indexOf(\"057e\") !== -1) { // Switch Gamepad\r\n            return DeviceType.Switch;\r\n        }\r\n\r\n        return DeviceType.Generic;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}