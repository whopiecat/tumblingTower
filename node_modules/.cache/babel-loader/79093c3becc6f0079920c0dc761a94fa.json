{"ast":null,"code":"import { Scene } from \"../scene\";\nimport { VertexBuffer } from \"../Meshes/buffer\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\nimport { Matrix } from \"../Maths/math.vector\";\nimport { SmartArray } from \"../Misc/smartArray\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { Material } from \"../Materials/material\";\nimport { ShaderMaterial } from \"../Materials/shaderMaterial\";\nimport \"../Meshes/Builders/boxBuilder\";\nimport \"../Shaders/color.fragment\";\nimport \"../Shaders/color.vertex\";\nimport { Color3 } from '../Maths/math.color';\nimport { Observable } from '../Misc/observable';\nObject.defineProperty(Scene.prototype, \"forceShowBoundingBoxes\", {\n  get: function () {\n    return this._forceShowBoundingBoxes || false;\n  },\n  set: function (value) {\n    this._forceShowBoundingBoxes = value; // Lazyly creates a BB renderer if needed.\n\n    if (value) {\n      this.getBoundingBoxRenderer();\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\n\nScene.prototype.getBoundingBoxRenderer = function () {\n  if (!this._boundingBoxRenderer) {\n    this._boundingBoxRenderer = new BoundingBoxRenderer(this);\n  }\n\n  return this._boundingBoxRenderer;\n};\n\nObject.defineProperty(AbstractMesh.prototype, \"showBoundingBox\", {\n  get: function () {\n    return this._showBoundingBox || false;\n  },\n  set: function (value) {\n    this._showBoundingBox = value; // Lazyly creates a BB renderer if needed.\n\n    if (value) {\n      this.getScene().getBoundingBoxRenderer();\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\r\n * Component responsible of rendering the bounding box of the meshes in a scene.\r\n * This is usually used through the mesh.showBoundingBox or the scene.forceShowBoundingBoxes properties\r\n */\n\nvar BoundingBoxRenderer =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new bounding box renderer in a scene.\r\n   * @param scene the scene the  renderer renders in\r\n   */\n  function BoundingBoxRenderer(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_BOUNDINGBOXRENDERER;\n    /**\r\n     * Color of the bounding box lines placed in front of an object\r\n     */\n\n    this.frontColor = new Color3(1, 1, 1);\n    /**\r\n     * Color of the bounding box lines placed behind an object\r\n     */\n\n    this.backColor = new Color3(0.1, 0.1, 0.1);\n    /**\r\n     * Defines if the renderer should show the back lines or not\r\n     */\n\n    this.showBackLines = true;\n    /**\r\n     * Observable raised before rendering a bounding box\r\n     */\n\n    this.onBeforeBoxRenderingObservable = new Observable();\n    /**\r\n     * Observable raised after rendering a bounding box\r\n     */\n\n    this.onAfterBoxRenderingObservable = new Observable();\n    /**\r\n     * Observable raised after resources are created\r\n     */\n\n    this.onResourcesReadyObservable = new Observable();\n    /**\r\n     * When false, no bounding boxes will be rendered\r\n     */\n\n    this.enabled = true;\n    /**\r\n     * @hidden\r\n     */\n\n    this.renderList = new SmartArray(32);\n    this._vertexBuffers = {};\n    this._fillIndexBuffer = null;\n    this._fillIndexData = null;\n    this.scene = scene;\n\n    scene._addComponent(this);\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  BoundingBoxRenderer.prototype.register = function () {\n    this.scene._beforeEvaluateActiveMeshStage.registerStep(SceneComponentConstants.STEP_BEFOREEVALUATEACTIVEMESH_BOUNDINGBOXRENDERER, this, this.reset);\n\n    this.scene._preActiveMeshStage.registerStep(SceneComponentConstants.STEP_PREACTIVEMESH_BOUNDINGBOXRENDERER, this, this._preActiveMesh);\n\n    this.scene._evaluateSubMeshStage.registerStep(SceneComponentConstants.STEP_EVALUATESUBMESH_BOUNDINGBOXRENDERER, this, this._evaluateSubMesh);\n\n    this.scene._afterRenderingGroupDrawStage.registerStep(SceneComponentConstants.STEP_AFTERRENDERINGGROUPDRAW_BOUNDINGBOXRENDERER, this, this.render);\n  };\n\n  BoundingBoxRenderer.prototype._evaluateSubMesh = function (mesh, subMesh) {\n    if (mesh.showSubMeshesBoundingBox) {\n      var boundingInfo = subMesh.getBoundingInfo();\n\n      if (boundingInfo !== null && boundingInfo !== undefined) {\n        boundingInfo.boundingBox._tag = mesh.renderingGroupId;\n        this.renderList.push(boundingInfo.boundingBox);\n      }\n    }\n  };\n\n  BoundingBoxRenderer.prototype._preActiveMesh = function (mesh) {\n    if (mesh.showBoundingBox || this.scene.forceShowBoundingBoxes) {\n      var boundingInfo = mesh.getBoundingInfo();\n      boundingInfo.boundingBox._tag = mesh.renderingGroupId;\n      this.renderList.push(boundingInfo.boundingBox);\n    }\n  };\n\n  BoundingBoxRenderer.prototype._prepareResources = function () {\n    if (this._colorShader) {\n      return;\n    }\n\n    this._colorShader = new ShaderMaterial(\"colorShader\", this.scene, \"color\", {\n      attributes: [VertexBuffer.PositionKind],\n      uniforms: [\"world\", \"viewProjection\", \"color\"]\n    });\n    this._colorShader.reservedDataStore = {\n      hidden: true\n    };\n    var engine = this.scene.getEngine();\n    var boxdata = VertexData.CreateBox({\n      size: 1.0\n    });\n    this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(engine, boxdata.positions, VertexBuffer.PositionKind, false);\n\n    this._createIndexBuffer();\n\n    this._fillIndexData = boxdata.indices;\n    this.onResourcesReadyObservable.notifyObservers(this);\n  };\n\n  BoundingBoxRenderer.prototype._createIndexBuffer = function () {\n    var engine = this.scene.getEngine();\n    this._indexBuffer = engine.createIndexBuffer([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4]);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  BoundingBoxRenderer.prototype.rebuild = function () {\n    var vb = this._vertexBuffers[VertexBuffer.PositionKind];\n\n    if (vb) {\n      vb._rebuild();\n    }\n\n    this._createIndexBuffer();\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  BoundingBoxRenderer.prototype.reset = function () {\n    this.renderList.reset();\n  };\n  /**\r\n   * Render the bounding boxes of a specific rendering group\r\n   * @param renderingGroupId defines the rendering group to render\r\n   */\n\n\n  BoundingBoxRenderer.prototype.render = function (renderingGroupId) {\n    if (this.renderList.length === 0 || !this.enabled) {\n      return;\n    }\n\n    this._prepareResources();\n\n    if (!this._colorShader.isReady()) {\n      return;\n    }\n\n    var engine = this.scene.getEngine();\n    engine.setDepthWrite(false);\n\n    this._colorShader._preBind();\n\n    for (var boundingBoxIndex = 0; boundingBoxIndex < this.renderList.length; boundingBoxIndex++) {\n      var boundingBox = this.renderList.data[boundingBoxIndex];\n\n      if (boundingBox._tag !== renderingGroupId) {\n        continue;\n      }\n\n      this.onBeforeBoxRenderingObservable.notifyObservers(boundingBox);\n      var min = boundingBox.minimum;\n      var max = boundingBox.maximum;\n      var diff = max.subtract(min);\n      var median = min.add(diff.scale(0.5));\n      var worldMatrix = Matrix.Scaling(diff.x, diff.y, diff.z).multiply(Matrix.Translation(median.x, median.y, median.z)).multiply(boundingBox.getWorldMatrix()); // VBOs\n\n      engine.bindBuffers(this._vertexBuffers, this._indexBuffer, this._colorShader.getEffect());\n\n      if (this.showBackLines) {\n        // Back\n        engine.setDepthFunctionToGreaterOrEqual();\n        this.scene.resetCachedMaterial();\n\n        this._colorShader.setColor4(\"color\", this.backColor.toColor4());\n\n        this._colorShader.bind(worldMatrix); // Draw order\n\n\n        engine.drawElementsType(Material.LineListDrawMode, 0, 24);\n      } // Front\n\n\n      engine.setDepthFunctionToLess();\n      this.scene.resetCachedMaterial();\n\n      this._colorShader.setColor4(\"color\", this.frontColor.toColor4());\n\n      this._colorShader.bind(worldMatrix); // Draw order\n\n\n      engine.drawElementsType(Material.LineListDrawMode, 0, 24);\n      this.onAfterBoxRenderingObservable.notifyObservers(boundingBox);\n    }\n\n    this._colorShader.unbind();\n\n    engine.setDepthFunctionToLessOrEqual();\n    engine.setDepthWrite(true);\n  };\n  /**\r\n   * In case of occlusion queries, we can render the occlusion bounding box through this method\r\n   * @param mesh Define the mesh to render the occlusion bounding box for\r\n   */\n\n\n  BoundingBoxRenderer.prototype.renderOcclusionBoundingBox = function (mesh) {\n    this._prepareResources();\n\n    if (!this._colorShader.isReady() || !mesh._boundingInfo) {\n      return;\n    }\n\n    var engine = this.scene.getEngine();\n\n    if (!this._fillIndexBuffer) {\n      this._fillIndexBuffer = engine.createIndexBuffer(this._fillIndexData);\n    }\n\n    engine.setDepthWrite(false);\n    engine.setColorWrite(false);\n\n    this._colorShader._preBind();\n\n    var boundingBox = mesh._boundingInfo.boundingBox;\n    var min = boundingBox.minimum;\n    var max = boundingBox.maximum;\n    var diff = max.subtract(min);\n    var median = min.add(diff.scale(0.5));\n    var worldMatrix = Matrix.Scaling(diff.x, diff.y, diff.z).multiply(Matrix.Translation(median.x, median.y, median.z)).multiply(boundingBox.getWorldMatrix());\n    engine.bindBuffers(this._vertexBuffers, this._fillIndexBuffer, this._colorShader.getEffect());\n    engine.setDepthFunctionToLess();\n    this.scene.resetCachedMaterial();\n\n    this._colorShader.bind(worldMatrix);\n\n    engine.drawElementsType(Material.TriangleFillMode, 0, 36);\n\n    this._colorShader.unbind();\n\n    engine.setDepthFunctionToLessOrEqual();\n    engine.setDepthWrite(true);\n    engine.setColorWrite(true);\n  };\n  /**\r\n   * Dispose and release the resources attached to this renderer.\r\n   */\n\n\n  BoundingBoxRenderer.prototype.dispose = function () {\n    if (!this._colorShader) {\n      return;\n    }\n\n    this.onBeforeBoxRenderingObservable.clear();\n    this.onAfterBoxRenderingObservable.clear();\n    this.onResourcesReadyObservable.clear();\n    this.renderList.dispose();\n\n    this._colorShader.dispose();\n\n    var buffer = this._vertexBuffers[VertexBuffer.PositionKind];\n\n    if (buffer) {\n      buffer.dispose();\n      this._vertexBuffers[VertexBuffer.PositionKind] = null;\n    }\n\n    this.scene.getEngine()._releaseBuffer(this._indexBuffer);\n\n    if (this._fillIndexBuffer) {\n      this.scene.getEngine()._releaseBuffer(this._fillIndexBuffer);\n\n      this._fillIndexBuffer = null;\n    }\n  };\n\n  return BoundingBoxRenderer;\n}();\n\nexport { BoundingBoxRenderer };","map":{"version":3,"sources":["../../../sourceES6/core/Rendering/boundingBoxRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene } from \"../scene\";\r\nimport { VertexBuffer } from \"../Meshes/buffer\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { Matrix } from \"../Maths/math.vector\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport { Nullable, FloatArray, IndicesArray } from \"../types\";\r\nimport { ISceneComponent, SceneComponentConstants } from \"../sceneComponent\";\r\nimport { BoundingBox } from \"../Culling/boundingBox\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { ShaderMaterial } from \"../Materials/shaderMaterial\";\r\n\r\nimport \"../Meshes/Builders/boxBuilder\";\r\n\r\nimport \"../Shaders/color.fragment\";\r\nimport \"../Shaders/color.vertex\";\r\nimport { DataBuffer } from '../Meshes/dataBuffer';\r\nimport { Color3 } from '../Maths/math.color';\r\nimport { Observable } from '../Misc/observable';\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @hidden (Backing field) */\r\n        _boundingBoxRenderer: BoundingBoxRenderer;\r\n\r\n        /** @hidden (Backing field) */\r\n        _forceShowBoundingBoxes: boolean;\r\n\r\n        /**\r\n         * Gets or sets a boolean indicating if all bounding boxes must be rendered\r\n         */\r\n        forceShowBoundingBoxes: boolean;\r\n\r\n        /**\r\n         * Gets the bounding box renderer associated with the scene\r\n         * @returns a BoundingBoxRenderer\r\n         */\r\n        getBoundingBoxRenderer(): BoundingBoxRenderer;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"forceShowBoundingBoxes\", {\r\n    get: function(this: Scene) {\r\n        return this._forceShowBoundingBoxes || false;\r\n    },\r\n    set: function(this: Scene, value: boolean) {\r\n        this._forceShowBoundingBoxes = value;\r\n        // Lazyly creates a BB renderer if needed.\r\n        if (value) {\r\n            this.getBoundingBoxRenderer();\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\nScene.prototype.getBoundingBoxRenderer = function(): BoundingBoxRenderer {\r\n\r\n    if (!this._boundingBoxRenderer) {\r\n        this._boundingBoxRenderer = new BoundingBoxRenderer(this);\r\n    }\r\n\r\n    return this._boundingBoxRenderer;\r\n};\r\n\r\ndeclare module \"../Meshes/abstractMesh\" {\r\n    export interface AbstractMesh {\r\n        /** @hidden (Backing field) */\r\n        _showBoundingBox: boolean;\r\n\r\n        /**\r\n         * Gets or sets a boolean indicating if the bounding box must be rendered as well (false by default)\r\n         */\r\n        showBoundingBox: boolean;\r\n    }\r\n}\r\n\r\nObject.defineProperty(AbstractMesh.prototype, \"showBoundingBox\", {\r\n    get: function(this: AbstractMesh) {\r\n        return this._showBoundingBox || false;\r\n    },\r\n    set: function(this: AbstractMesh, value: boolean) {\r\n        this._showBoundingBox = value;\r\n        // Lazyly creates a BB renderer if needed.\r\n        if (value) {\r\n            this.getScene().getBoundingBoxRenderer();\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\n/**\r\n * Component responsible of rendering the bounding box of the meshes in a scene.\r\n * This is usually used through the mesh.showBoundingBox or the scene.forceShowBoundingBoxes properties\r\n */\r\nexport class BoundingBoxRenderer implements ISceneComponent {\r\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_BOUNDINGBOXRENDERER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Color of the bounding box lines placed in front of an object\r\n     */\r\n    public frontColor = new Color3(1, 1, 1);\r\n    /**\r\n     * Color of the bounding box lines placed behind an object\r\n     */\r\n    public backColor = new Color3(0.1, 0.1, 0.1);\r\n    /**\r\n     * Defines if the renderer should show the back lines or not\r\n     */\r\n    public showBackLines = true;\r\n\r\n    /**\r\n     * Observable raised before rendering a bounding box\r\n     */\r\n    public onBeforeBoxRenderingObservable = new Observable<BoundingBox>();\r\n\r\n    /**\r\n     * Observable raised after rendering a bounding box\r\n     */\r\n    public onAfterBoxRenderingObservable = new Observable<BoundingBox>();\r\n\r\n    /**\r\n     * Observable raised after resources are created\r\n     */\r\n    public onResourcesReadyObservable = new Observable<BoundingBoxRenderer>();\r\n\r\n    /**\r\n     * When false, no bounding boxes will be rendered\r\n     */\r\n    public enabled = true;\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public renderList = new SmartArray<BoundingBox>(32);\r\n\r\n    private _colorShader: ShaderMaterial;\r\n    private _vertexBuffers: { [key: string]: Nullable<VertexBuffer> } = {};\r\n    private _indexBuffer: DataBuffer;\r\n    private _fillIndexBuffer: Nullable<DataBuffer> = null;\r\n    private _fillIndexData: Nullable<IndicesArray> = null;\r\n\r\n    /**\r\n     * Instantiates a new bounding box renderer in a scene.\r\n     * @param scene the scene the  renderer renders in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n        scene._addComponent(this);\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeEvaluateActiveMeshStage.registerStep(SceneComponentConstants.STEP_BEFOREEVALUATEACTIVEMESH_BOUNDINGBOXRENDERER, this, this.reset);\r\n\r\n        this.scene._preActiveMeshStage.registerStep(SceneComponentConstants.STEP_PREACTIVEMESH_BOUNDINGBOXRENDERER, this, this._preActiveMesh);\r\n\r\n        this.scene._evaluateSubMeshStage.registerStep(SceneComponentConstants.STEP_EVALUATESUBMESH_BOUNDINGBOXRENDERER, this, this._evaluateSubMesh);\r\n\r\n        this.scene._afterRenderingGroupDrawStage.registerStep(SceneComponentConstants.STEP_AFTERRENDERINGGROUPDRAW_BOUNDINGBOXRENDERER, this, this.render);\r\n    }\r\n\r\n    private _evaluateSubMesh(mesh: AbstractMesh, subMesh: SubMesh): void {\r\n        if (mesh.showSubMeshesBoundingBox) {\r\n            const boundingInfo = subMesh.getBoundingInfo();\r\n            if (boundingInfo !== null && boundingInfo !== undefined) {\r\n                boundingInfo.boundingBox._tag = mesh.renderingGroupId;\r\n                this.renderList.push(boundingInfo.boundingBox);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _preActiveMesh(mesh: AbstractMesh): void {\r\n        if (mesh.showBoundingBox || this.scene.forceShowBoundingBoxes) {\r\n            let boundingInfo = mesh.getBoundingInfo();\r\n            boundingInfo.boundingBox._tag = mesh.renderingGroupId;\r\n            this.renderList.push(boundingInfo.boundingBox);\r\n        }\r\n    }\r\n\r\n    private _prepareResources(): void {\r\n        if (this._colorShader) {\r\n            return;\r\n        }\r\n\r\n        this._colorShader = new ShaderMaterial(\"colorShader\", this.scene, \"color\",\r\n            {\r\n                attributes: [VertexBuffer.PositionKind],\r\n                uniforms: [\"world\", \"viewProjection\", \"color\"]\r\n            });\r\n\r\n        this._colorShader.reservedDataStore = {\r\n            hidden: true\r\n        };\r\n        var engine = this.scene.getEngine();\r\n        var boxdata = VertexData.CreateBox({ size: 1.0 });\r\n        this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(engine, <FloatArray>boxdata.positions, VertexBuffer.PositionKind, false);\r\n        this._createIndexBuffer();\r\n        this._fillIndexData = boxdata.indices;\r\n        this.onResourcesReadyObservable.notifyObservers(this);\r\n    }\r\n\r\n    private _createIndexBuffer(): void {\r\n        var engine = this.scene.getEngine();\r\n        this._indexBuffer = engine.createIndexBuffer([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4]);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        let vb = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (vb) {\r\n            vb._rebuild();\r\n        }\r\n        this._createIndexBuffer();\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public reset(): void {\r\n        this.renderList.reset();\r\n    }\r\n\r\n    /**\r\n     * Render the bounding boxes of a specific rendering group\r\n     * @param renderingGroupId defines the rendering group to render\r\n     */\r\n    public render(renderingGroupId: number): void {\r\n        if (this.renderList.length === 0 || !this.enabled) {\r\n            return;\r\n        }\r\n\r\n        this._prepareResources();\r\n\r\n        if (!this._colorShader.isReady()) {\r\n            return;\r\n        }\r\n\r\n        var engine = this.scene.getEngine();\r\n        engine.setDepthWrite(false);\r\n        this._colorShader._preBind();\r\n\r\n        for (var boundingBoxIndex = 0; boundingBoxIndex < this.renderList.length; boundingBoxIndex++) {\r\n            var boundingBox = this.renderList.data[boundingBoxIndex];\r\n            if (boundingBox._tag !== renderingGroupId) {\r\n                continue;\r\n            }\r\n\r\n            this.onBeforeBoxRenderingObservable.notifyObservers(boundingBox);\r\n\r\n            var min = boundingBox.minimum;\r\n            var max = boundingBox.maximum;\r\n            var diff = max.subtract(min);\r\n            var median = min.add(diff.scale(0.5));\r\n\r\n            var worldMatrix = Matrix.Scaling(diff.x, diff.y, diff.z)\r\n                .multiply(Matrix.Translation(median.x, median.y, median.z))\r\n                .multiply(boundingBox.getWorldMatrix());\r\n\r\n            // VBOs\r\n            engine.bindBuffers(this._vertexBuffers, this._indexBuffer, <Effect>this._colorShader.getEffect());\r\n\r\n            if (this.showBackLines) {\r\n                // Back\r\n                engine.setDepthFunctionToGreaterOrEqual();\r\n                this.scene.resetCachedMaterial();\r\n                this._colorShader.setColor4(\"color\", this.backColor.toColor4());\r\n                this._colorShader.bind(worldMatrix);\r\n\r\n                // Draw order\r\n                engine.drawElementsType(Material.LineListDrawMode, 0, 24);\r\n            }\r\n\r\n            // Front\r\n            engine.setDepthFunctionToLess();\r\n            this.scene.resetCachedMaterial();\r\n            this._colorShader.setColor4(\"color\", this.frontColor.toColor4());\r\n            this._colorShader.bind(worldMatrix);\r\n\r\n            // Draw order\r\n            engine.drawElementsType(Material.LineListDrawMode, 0, 24);\r\n\r\n            this.onAfterBoxRenderingObservable.notifyObservers(boundingBox);\r\n        }\r\n        this._colorShader.unbind();\r\n        engine.setDepthFunctionToLessOrEqual();\r\n        engine.setDepthWrite(true);\r\n    }\r\n\r\n    /**\r\n     * In case of occlusion queries, we can render the occlusion bounding box through this method\r\n     * @param mesh Define the mesh to render the occlusion bounding box for\r\n     */\r\n    public renderOcclusionBoundingBox(mesh: AbstractMesh): void {\r\n\r\n        this._prepareResources();\r\n\r\n        if (!this._colorShader.isReady() || !mesh._boundingInfo) {\r\n            return;\r\n        }\r\n\r\n        var engine = this.scene.getEngine();\r\n        if (!this._fillIndexBuffer) {\r\n            this._fillIndexBuffer = engine.createIndexBuffer(this._fillIndexData!);\r\n        }\r\n\r\n        engine.setDepthWrite(false);\r\n        engine.setColorWrite(false);\r\n        this._colorShader._preBind();\r\n\r\n        var boundingBox = mesh._boundingInfo.boundingBox;\r\n        var min = boundingBox.minimum;\r\n        var max = boundingBox.maximum;\r\n        var diff = max.subtract(min);\r\n        var median = min.add(diff.scale(0.5));\r\n\r\n        var worldMatrix = Matrix.Scaling(diff.x, diff.y, diff.z)\r\n            .multiply(Matrix.Translation(median.x, median.y, median.z))\r\n            .multiply(boundingBox.getWorldMatrix());\r\n\r\n        engine.bindBuffers(this._vertexBuffers, this._fillIndexBuffer, <Effect>this._colorShader.getEffect());\r\n\r\n        engine.setDepthFunctionToLess();\r\n        this.scene.resetCachedMaterial();\r\n        this._colorShader.bind(worldMatrix);\r\n\r\n        engine.drawElementsType(Material.TriangleFillMode, 0, 36);\r\n\r\n        this._colorShader.unbind();\r\n        engine.setDepthFunctionToLessOrEqual();\r\n        engine.setDepthWrite(true);\r\n        engine.setColorWrite(true);\r\n    }\r\n\r\n    /**\r\n     * Dispose and release the resources attached to this renderer.\r\n     */\r\n    public dispose(): void {\r\n        if (!this._colorShader) {\r\n            return;\r\n        }\r\n\r\n        this.onBeforeBoxRenderingObservable.clear();\r\n        this.onAfterBoxRenderingObservable.clear();\r\n        this.onResourcesReadyObservable.clear();\r\n\r\n        this.renderList.dispose();\r\n\r\n        this._colorShader.dispose();\r\n\r\n        var buffer = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (buffer) {\r\n            buffer.dispose();\r\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\r\n        }\r\n        this.scene.getEngine()._releaseBuffer(this._indexBuffer);\r\n\r\n        if (this._fillIndexBuffer) {\r\n            this.scene.getEngine()._releaseBuffer(this._fillIndexBuffer);\r\n            this._fillIndexBuffer = null;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}