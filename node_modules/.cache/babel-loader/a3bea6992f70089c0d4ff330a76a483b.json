{"ast":null,"code":"import { PerfCounter } from \"../Misc/perfCounter\";\n/**\r\n * This class can be used to get instrumentation data from a Babylon engine\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n */\n\nvar EngineInstrumentation =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new engine instrumentation.\r\n   * This class can be used to get instrumentation data from a Babylon engine\r\n   * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n   * @param engine Defines the engine to instrument\r\n   */\n  function EngineInstrumentation(\n  /**\r\n   * Define the instrumented engine.\r\n   */\n  engine) {\n    this.engine = engine;\n    this._captureGPUFrameTime = false;\n    this._gpuFrameTime = new PerfCounter();\n    this._captureShaderCompilationTime = false;\n    this._shaderCompilationTime = new PerfCounter(); // Observers\n\n    this._onBeginFrameObserver = null;\n    this._onEndFrameObserver = null;\n    this._onBeforeShaderCompilationObserver = null;\n    this._onAfterShaderCompilationObserver = null;\n  }\n\n  Object.defineProperty(EngineInstrumentation.prototype, \"gpuFrameTimeCounter\", {\n    // Properties\n\n    /**\r\n     * Gets the perf counter used for GPU frame time\r\n     */\n    get: function () {\n      return this._gpuFrameTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EngineInstrumentation.prototype, \"captureGPUFrameTime\", {\n    /**\r\n     * Gets the GPU frame time capture status\r\n     */\n    get: function () {\n      return this._captureGPUFrameTime;\n    },\n\n    /**\r\n     * Enable or disable the GPU frame time capture\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (value === this._captureGPUFrameTime) {\n        return;\n      }\n\n      this._captureGPUFrameTime = value;\n\n      if (value) {\n        this._onBeginFrameObserver = this.engine.onBeginFrameObservable.add(function () {\n          if (!_this._gpuFrameTimeToken) {\n            _this._gpuFrameTimeToken = _this.engine.startTimeQuery();\n          }\n        });\n        this._onEndFrameObserver = this.engine.onEndFrameObservable.add(function () {\n          if (!_this._gpuFrameTimeToken) {\n            return;\n          }\n\n          var time = _this.engine.endTimeQuery(_this._gpuFrameTimeToken);\n\n          if (time > -1) {\n            _this._gpuFrameTimeToken = null;\n\n            _this._gpuFrameTime.fetchNewFrame();\n\n            _this._gpuFrameTime.addCount(time, true);\n          }\n        });\n      } else {\n        this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\n        this._onBeginFrameObserver = null;\n        this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\n        this._onEndFrameObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EngineInstrumentation.prototype, \"shaderCompilationTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for shader compilation time\r\n     */\n    get: function () {\n      return this._shaderCompilationTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EngineInstrumentation.prototype, \"captureShaderCompilationTime\", {\n    /**\r\n     * Gets the shader compilation time capture status\r\n     */\n    get: function () {\n      return this._captureShaderCompilationTime;\n    },\n\n    /**\r\n     * Enable or disable the shader compilation time capture\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (value === this._captureShaderCompilationTime) {\n        return;\n      }\n\n      this._captureShaderCompilationTime = value;\n\n      if (value) {\n        this._onBeforeShaderCompilationObserver = this.engine.onBeforeShaderCompilationObservable.add(function () {\n          _this._shaderCompilationTime.fetchNewFrame();\n\n          _this._shaderCompilationTime.beginMonitoring();\n        });\n        this._onAfterShaderCompilationObserver = this.engine.onAfterShaderCompilationObservable.add(function () {\n          _this._shaderCompilationTime.endMonitoring();\n        });\n      } else {\n        this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\n        this._onBeforeShaderCompilationObserver = null;\n        this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\n        this._onAfterShaderCompilationObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Dispose and release associated resources.\r\n   */\n\n  EngineInstrumentation.prototype.dispose = function () {\n    this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\n    this._onBeginFrameObserver = null;\n    this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\n    this._onEndFrameObserver = null;\n    this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\n    this._onBeforeShaderCompilationObserver = null;\n    this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\n    this._onAfterShaderCompilationObserver = null;\n    this.engine = null;\n  };\n\n  return EngineInstrumentation;\n}();\n\nexport { EngineInstrumentation };","map":{"version":3,"sources":["../../../sourceES6/core/Instrumentation/engineInstrumentation.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observer } from \"../Misc/observable\";\r\nimport { PerfCounter } from \"../Misc/perfCounter\";\r\nimport { Nullable } from \"../types\";\r\nimport { IDisposable } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { _TimeToken } from \"../Instrumentation/timeToken\";\r\n/**\r\n * This class can be used to get instrumentation data from a Babylon engine\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n */\r\nexport class EngineInstrumentation implements IDisposable {\r\n    private _captureGPUFrameTime = false;\r\n    private _gpuFrameTimeToken: Nullable<_TimeToken>;\r\n    private _gpuFrameTime = new PerfCounter();\r\n\r\n    private _captureShaderCompilationTime = false;\r\n    private _shaderCompilationTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginFrameObserver: Nullable<Observer<Engine>> = null;\r\n    private _onEndFrameObserver: Nullable<Observer<Engine>> = null;\r\n    private _onBeforeShaderCompilationObserver: Nullable<Observer<Engine>> = null;\r\n    private _onAfterShaderCompilationObserver: Nullable<Observer<Engine>> = null;\r\n\r\n    // Properties\r\n    /**\r\n     * Gets the perf counter used for GPU frame time\r\n     */\r\n    public get gpuFrameTimeCounter(): PerfCounter {\r\n        return this._gpuFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the GPU frame time capture status\r\n     */\r\n    public get captureGPUFrameTime(): boolean {\r\n        return this._captureGPUFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the GPU frame time capture\r\n     */\r\n    public set captureGPUFrameTime(value: boolean) {\r\n        if (value === this._captureGPUFrameTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureGPUFrameTime = value;\r\n\r\n        if (value) {\r\n            this._onBeginFrameObserver = this.engine.onBeginFrameObservable.add(() => {\r\n                if (!this._gpuFrameTimeToken) {\r\n                    this._gpuFrameTimeToken = this.engine.startTimeQuery();\r\n                }\r\n            });\r\n\r\n            this._onEndFrameObserver = this.engine.onEndFrameObservable.add(() => {\r\n                if (!this._gpuFrameTimeToken) {\r\n                    return;\r\n                }\r\n                let time = this.engine.endTimeQuery(this._gpuFrameTimeToken);\r\n\r\n                if (time > -1) {\r\n                    this._gpuFrameTimeToken = null;\r\n                    this._gpuFrameTime.fetchNewFrame();\r\n                    this._gpuFrameTime.addCount(time, true);\r\n                }\r\n            });\r\n        } else {\r\n            this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\r\n            this._onBeginFrameObserver = null;\r\n            this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\r\n            this._onEndFrameObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for shader compilation time\r\n     */\r\n    public get shaderCompilationTimeCounter(): PerfCounter {\r\n        return this._shaderCompilationTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the shader compilation time capture status\r\n     */\r\n    public get captureShaderCompilationTime(): boolean {\r\n        return this._captureShaderCompilationTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the shader compilation time capture\r\n     */\r\n    public set captureShaderCompilationTime(value: boolean) {\r\n        if (value === this._captureShaderCompilationTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureShaderCompilationTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeShaderCompilationObserver = this.engine.onBeforeShaderCompilationObservable.add(() => {\r\n                this._shaderCompilationTime.fetchNewFrame();\r\n                this._shaderCompilationTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterShaderCompilationObserver = this.engine.onAfterShaderCompilationObservable.add(() => {\r\n                this._shaderCompilationTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\r\n            this._onBeforeShaderCompilationObserver = null;\r\n            this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\r\n            this._onAfterShaderCompilationObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new engine instrumentation.\r\n     * This class can be used to get instrumentation data from a Babylon engine\r\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n     * @param engine Defines the engine to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented engine.\r\n         */\r\n        public engine: Engine) {\r\n    }\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\r\n        this._onBeginFrameObserver = null;\r\n\r\n        this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\r\n        this._onEndFrameObserver = null;\r\n\r\n        this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\r\n        this._onBeforeShaderCompilationObserver = null;\r\n\r\n        this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\r\n        this._onAfterShaderCompilationObserver = null;\r\n\r\n        (<any>this.engine) = null;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}