{"ast":null,"code":"import { Mesh } from \"../mesh\";\nimport { SphereBuilder } from '../Builders/sphereBuilder';\n/**\r\n * Creates a hemispheric light\r\n */\n\nMesh.CreateHemisphere = function (name, segments, diameter, scene) {\n  var options = {\n    segments: segments,\n    diameter: diameter\n  };\n  return HemisphereBuilder.CreateHemisphere(name, options, scene);\n};\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\n\n\nvar HemisphereBuilder =\n/** @class */\nfunction () {\n  function HemisphereBuilder() {}\n  /**\r\n   * Creates a hemisphere mesh\r\n   * @param name defines the name of the mesh\r\n   * @param options defines the options used to create the mesh\r\n   * @param scene defines the hosting scene\r\n   * @returns the hemisphere mesh\r\n   */\n\n\n  HemisphereBuilder.CreateHemisphere = function (name, options, scene) {\n    if (!options.diameter) {\n      options.diameter = 1;\n    }\n\n    if (!options.segments) {\n      options.segments = 16;\n    }\n\n    var halfSphere = SphereBuilder.CreateSphere(\"\", {\n      slice: 0.5,\n      diameter: options.diameter,\n      segments: options.segments\n    }, scene);\n    var disc = Mesh.CreateDisc(\"\", options.diameter / 2, options.segments * 3 + (4 - options.segments), scene);\n    disc.rotation.x = -Math.PI / 2;\n    disc.parent = halfSphere;\n    var merged = Mesh.MergeMeshes([disc, halfSphere], true);\n    merged.name = name;\n    return merged;\n  };\n\n  return HemisphereBuilder;\n}();\n\nexport { HemisphereBuilder };","map":{"version":3,"sources":["../../../../sourceES6/core/Meshes/Builders/hemisphereBuilder.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAA2C,SAA3C;AAEA,SAAS,aAAT,QAA8B,2BAA9B;AAEA;;;;AAGA,IAAI,CAAC,gBAAL,GAAwB,UAAC,IAAD,EAAe,QAAf,EAAiC,QAAjC,EAAmD,KAAnD,EAAgE;AACpF,MAAI,OAAO,GAAG;AACV,IAAA,QAAQ,EAAE,QADA;AAEV,IAAA,QAAQ,EAAE;AAFA,GAAd;AAKA,SAAO,iBAAiB,CAAC,gBAAlB,CAAmC,IAAnC,EAAyC,OAAzC,EAAkD,KAAlD,CAAP;AACH,CAPD;AASA;;;;;AAGA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA,CA0BC;AAzBG;;;;;;;;;AAOc,EAAA,iBAAA,CAAA,gBAAA,GAAd,UAA+B,IAA/B,EAA6C,OAA7C,EAA0H,KAA1H,EAAoI;AAChI,QAAI,CAAC,OAAO,CAAC,QAAb,EAAuB;AACnB,MAAA,OAAO,CAAC,QAAR,GAAmB,CAAnB;AACH;;AACD,QAAI,CAAC,OAAO,CAAC,QAAb,EAAuB;AACnB,MAAA,OAAO,CAAC,QAAR,GAAmB,EAAnB;AACH;;AAED,QAAI,UAAU,GAAG,aAAa,CAAC,YAAd,CAA2B,EAA3B,EAA+B;AAAC,MAAA,KAAK,EAAE,GAAR;AAAa,MAAA,QAAQ,EAAE,OAAO,CAAC,QAA/B;AAAyC,MAAA,QAAQ,EAAE,OAAO,CAAC;AAA3D,KAA/B,EAAqG,KAArG,CAAjB;AACA,QAAI,IAAI,GAAG,IAAI,CAAC,UAAL,CAAgB,EAAhB,EAAoB,OAAO,CAAC,QAAR,GAAmB,CAAvC,EAA2C,OAAO,CAAC,QAAR,GAAmB,CAApB,IAA0B,IAAI,OAAO,CAAC,QAAtC,CAA1C,EAA2F,KAA3F,CAAX;AACA,IAAA,IAAI,CAAC,QAAL,CAAc,CAAd,GAAkB,CAAC,IAAI,CAAC,EAAN,GAAW,CAA7B;AACA,IAAA,IAAI,CAAC,MAAL,GAAc,UAAd;AAEA,QAAI,MAAM,GAAS,IAAI,CAAC,WAAL,CAAiB,CAAC,IAAD,EAAO,UAAP,CAAjB,EAAqC,IAArC,CAAnB;AACA,IAAA,MAAM,CAAC,IAAP,GAAc,IAAd;AAEA,WAAO,MAAP;AACH,GAjBa;;AAkBlB,SAAA,iBAAA;AAAC,CA1BD,EAAA","sourcesContent":["import { Mesh, _CreationDataStorage } from \"../mesh\";\r\nimport { Scene } from \"../../scene\";\r\nimport { SphereBuilder } from '../Builders/sphereBuilder';\r\n\r\n/**\r\n * Creates a hemispheric light\r\n */\r\nMesh.CreateHemisphere = (name: string, segments: number, diameter: number, scene?: Scene): Mesh => {\r\n    var options = {\r\n        segments: segments,\r\n        diameter: diameter\r\n    };\r\n\r\n    return HemisphereBuilder.CreateHemisphere(name, options, scene);\r\n};\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\r\nexport class HemisphereBuilder {\r\n    /**\r\n     * Creates a hemisphere mesh\r\n     * @param name defines the name of the mesh\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns the hemisphere mesh\r\n     */\r\n    public static CreateHemisphere(name: string, options: { segments?: number, diameter?: number, sideOrientation?: number }, scene: any): Mesh {\r\n        if (!options.diameter) {\r\n            options.diameter = 1;\r\n        }\r\n        if (!options.segments) {\r\n            options.segments = 16;\r\n        }\r\n\r\n        var halfSphere = SphereBuilder.CreateSphere(\"\", {slice: 0.5, diameter: options.diameter, segments: options.segments}, scene);\r\n        var disc = Mesh.CreateDisc(\"\", options.diameter / 2, (options.segments * 3) + (4 - options.segments), scene);\r\n        disc.rotation.x = -Math.PI / 2;\r\n        disc.parent = halfSphere;\r\n\r\n        var merged = <Mesh>Mesh.MergeMeshes([disc, halfSphere], true);\r\n        merged.name = name;\r\n\r\n        return merged;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}