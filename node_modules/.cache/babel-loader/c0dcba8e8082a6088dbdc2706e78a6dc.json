{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators\";\nimport { PBRBaseSimpleMaterial } from \"./pbrBaseSimpleMaterial\";\nimport { _TypeStore } from '../../Misc/typeStore';\n/**\r\n * The PBR material of BJS following the metal roughness convention.\r\n *\r\n * This fits to the PBR convention in the GLTF definition:\r\n * https://github.com/KhronosGroup/glTF/tree/2.0/specification/2.0\r\n */\n\nvar PBRMetallicRoughnessMaterial =\n/** @class */\nfunction (_super) {\n  __extends(PBRMetallicRoughnessMaterial, _super);\n  /**\r\n   * Instantiates a new PBRMetalRoughnessMaterial instance.\r\n   *\r\n   * @param name The material name\r\n   * @param scene The scene the material will be use in.\r\n   */\n\n\n  function PBRMetallicRoughnessMaterial(name, scene) {\n    var _this = _super.call(this, name, scene) || this;\n\n    _this._useRoughnessFromMetallicTextureAlpha = false;\n    _this._useRoughnessFromMetallicTextureGreen = true;\n    _this._useMetallnessFromMetallicTextureBlue = true;\n    _this.metallic = 1.0;\n    _this.roughness = 1.0;\n    return _this;\n  }\n  /**\r\n   * Return the currrent class name of the material.\r\n   */\n\n\n  PBRMetallicRoughnessMaterial.prototype.getClassName = function () {\n    return \"PBRMetallicRoughnessMaterial\";\n  };\n  /**\r\n   * Makes a duplicate of the current material.\r\n   * @param name - name to use for the new material.\r\n   */\n\n\n  PBRMetallicRoughnessMaterial.prototype.clone = function (name) {\n    var _this = this;\n\n    var clone = SerializationHelper.Clone(function () {\n      return new PBRMetallicRoughnessMaterial(name, _this.getScene());\n    }, this);\n    clone.id = name;\n    clone.name = name;\n    this.clearCoat.copyTo(clone.clearCoat);\n    this.anisotropy.copyTo(clone.anisotropy);\n    this.brdf.copyTo(clone.brdf);\n    this.sheen.copyTo(clone.sheen);\n    this.subSurface.copyTo(clone.subSurface);\n    return clone;\n  };\n  /**\r\n   * Serialize the material to a parsable JSON object.\r\n   */\n\n\n  PBRMetallicRoughnessMaterial.prototype.serialize = function () {\n    var serializationObject = SerializationHelper.Serialize(this);\n    serializationObject.customType = \"BABYLON.PBRMetallicRoughnessMaterial\";\n    serializationObject.clearCoat = this.clearCoat.serialize();\n    serializationObject.anisotropy = this.anisotropy.serialize();\n    serializationObject.brdf = this.brdf.serialize();\n    serializationObject.sheen = this.sheen.serialize();\n    serializationObject.subSurface = this.subSurface.serialize();\n    return serializationObject;\n  };\n  /**\r\n   * Parses a JSON object correponding to the serialize function.\r\n   */\n\n\n  PBRMetallicRoughnessMaterial.Parse = function (source, scene, rootUrl) {\n    var material = SerializationHelper.Parse(function () {\n      return new PBRMetallicRoughnessMaterial(source.name, scene);\n    }, source, scene, rootUrl);\n\n    if (source.clearCoat) {\n      material.clearCoat.parse(source.clearCoat, scene, rootUrl);\n    }\n\n    if (source.anisotropy) {\n      material.anisotropy.parse(source.anisotropy, scene, rootUrl);\n    }\n\n    if (source.brdf) {\n      material.brdf.parse(source.brdf, scene, rootUrl);\n    }\n\n    if (source.sheen) {\n      material.sheen.parse(source.sheen, scene, rootUrl);\n    }\n\n    if (source.subSurface) {\n      material.subSurface.parse(source.subSurface, scene, rootUrl);\n    }\n\n    return material;\n  };\n\n  __decorate([serializeAsColor3(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoColor\")], PBRMetallicRoughnessMaterial.prototype, \"baseColor\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoTexture\")], PBRMetallicRoughnessMaterial.prototype, \"baseTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRMetallicRoughnessMaterial.prototype, \"metallic\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRMetallicRoughnessMaterial.prototype, \"roughness\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_metallicTexture\")], PBRMetallicRoughnessMaterial.prototype, \"metallicRoughnessTexture\", void 0);\n\n  return PBRMetallicRoughnessMaterial;\n}(PBRBaseSimpleMaterial);\n\nexport { PBRMetallicRoughnessMaterial };\n_TypeStore.RegisteredTypes[\"BABYLON.PBRMetallicRoughnessMaterial\"] = PBRMetallicRoughnessMaterial;","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/PBR/pbrMetallicRoughnessMaterial.ts"],"names":[],"mappings":"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","sourcesContent":["import { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { PBRBaseSimpleMaterial } from \"./pbrBaseSimpleMaterial\";\r\nimport { _TypeStore } from '../../Misc/typeStore';\r\n\r\n/**\r\n * The PBR material of BJS following the metal roughness convention.\r\n *\r\n * This fits to the PBR convention in the GLTF definition:\r\n * https://github.com/KhronosGroup/glTF/tree/2.0/specification/2.0\r\n */\r\nexport class PBRMetallicRoughnessMaterial extends PBRBaseSimpleMaterial {\r\n\r\n    /**\r\n     * The base color has two different interpretations depending on the value of metalness.\r\n     * When the material is a metal, the base color is the specific measured reflectance value\r\n     * at normal incidence (F0). For a non-metal the base color represents the reflected diffuse color\r\n     * of the material.\r\n     */\r\n    @serializeAsColor3()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoColor\")\r\n    public baseColor: Color3;\r\n\r\n    /**\r\n     * Base texture of the metallic workflow. It contains both the baseColor information in RGB as\r\n     * well as opacity information in the alpha channel.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoTexture\")\r\n    public baseTexture: BaseTexture;\r\n\r\n    /**\r\n     * Specifies the metallic scalar value of the material.\r\n     * Can also be used to scale the metalness values of the metallic texture.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public metallic: number;\r\n\r\n    /**\r\n     * Specifies the roughness scalar value of the material.\r\n     * Can also be used to scale the roughness values of the metallic texture.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public roughness: number;\r\n\r\n    /**\r\n     * Texture containing both the metallic value in the B channel and the\r\n     * roughness value in the G channel to keep better precision.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_metallicTexture\")\r\n    public metallicRoughnessTexture: BaseTexture;\r\n\r\n    /**\r\n     * Instantiates a new PBRMetalRoughnessMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     */\r\n    constructor(name: string, scene: Scene) {\r\n        super(name, scene);\r\n        this._useRoughnessFromMetallicTextureAlpha = false;\r\n        this._useRoughnessFromMetallicTextureGreen = true;\r\n        this._useMetallnessFromMetallicTextureBlue = true;\r\n        this.metallic = 1.0;\r\n        this.roughness = 1.0;\r\n    }\r\n\r\n    /**\r\n     * Return the currrent class name of the material.\r\n     */\r\n    public getClassName(): string {\r\n        return \"PBRMetallicRoughnessMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current material.\r\n     * @param name - name to use for the new material.\r\n     */\r\n    public clone(name: string): PBRMetallicRoughnessMaterial {\r\n        var clone = SerializationHelper.Clone(() => new PBRMetallicRoughnessMaterial(name, this.getScene()), this);\r\n\r\n        clone.id = name;\r\n        clone.name = name;\r\n\r\n        this.clearCoat.copyTo(clone.clearCoat);\r\n        this.anisotropy.copyTo(clone.anisotropy);\r\n        this.brdf.copyTo(clone.brdf);\r\n        this.sheen.copyTo(clone.sheen);\r\n        this.subSurface.copyTo(clone.subSurface);\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Serialize the material to a parsable JSON object.\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.PBRMetallicRoughnessMaterial\";\r\n\r\n        serializationObject.clearCoat = this.clearCoat.serialize();\r\n        serializationObject.anisotropy = this.anisotropy.serialize();\r\n        serializationObject.brdf = this.brdf.serialize();\r\n        serializationObject.sheen = this.sheen.serialize();\r\n        serializationObject.subSurface = this.subSurface.serialize();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a JSON object correponding to the serialize function.\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): PBRMetallicRoughnessMaterial {\r\n        const material = SerializationHelper.Parse(() => new PBRMetallicRoughnessMaterial(source.name, scene), source, scene, rootUrl);\r\n        if (source.clearCoat) {\r\n            material.clearCoat.parse(source.clearCoat, scene, rootUrl);\r\n        }\r\n        if (source.anisotropy) {\r\n            material.anisotropy.parse(source.anisotropy, scene, rootUrl);\r\n        }\r\n        if (source.brdf) {\r\n            material.brdf.parse(source.brdf, scene, rootUrl);\r\n        }\r\n        if (source.sheen) {\r\n            material.sheen.parse(source.sheen, scene, rootUrl);\r\n        }\r\n        if (source.subSurface) {\r\n            material.subSurface.parse(source.subSurface, scene, rootUrl);\r\n        }\r\n        return material;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.PBRMetallicRoughnessMaterial\"] = PBRMetallicRoughnessMaterial;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}