{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockConnectionPointMode } from '../../Enums/nodeMaterialBlockConnectionPointMode';\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\nimport { Matrix, Vector2, Vector3, Vector4 } from '../../../../Maths/math.vector';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { Color3, Color4, TmpColors } from '../../../../Maths/math';\nimport { AnimatedInputBlockTypes } from './animatedInputBlockTypes';\nimport { Observable } from '../../../../Misc/observable';\nimport { MaterialHelper } from '../../../../Materials/materialHelper';\nvar remapAttributeName = {\n  \"position2d\": \"position\",\n  \"particle_uv\": \"vUV\",\n  \"particle_color\": \"vColor\",\n  \"particle_texturemask\": \"textureMask\",\n  \"particle_positionw\": \"vPositionW\"\n};\nvar attributeInFragmentOnly = {\n  \"particle_uv\": true,\n  \"particle_color\": true,\n  \"particle_texturemask\": true,\n  \"particle_positionw\": true\n};\nvar attributeAsUniform = {\n  \"particle_texturemask\": true\n};\n/**\r\n * Block used to expose an input value\r\n */\n\nvar InputBlock =\n/** @class */\nfunction (_super) {\n  __extends(InputBlock, _super);\n  /**\r\n   * Creates a new InputBlock\r\n   * @param name defines the block name\r\n   * @param target defines the target of that block (Vertex by default)\r\n   * @param type defines the type of the input (can be set to NodeMaterialBlockConnectionPointTypes.AutoDetect)\r\n   */\n\n\n  function InputBlock(name, target, type) {\n    if (target === void 0) {\n      target = NodeMaterialBlockTargets.Vertex;\n    }\n\n    if (type === void 0) {\n      type = NodeMaterialBlockConnectionPointTypes.AutoDetect;\n    }\n\n    var _this = _super.call(this, name, target, false, true) || this;\n\n    _this._mode = NodeMaterialBlockConnectionPointMode.Undefined;\n    _this._animationType = AnimatedInputBlockTypes.None;\n    /** Gets or set a value used to limit the range of float values */\n\n    _this.min = 0;\n    /** Gets or set a value used to limit the range of float values */\n\n    _this.max = 0;\n    /** Gets or set a value indicating that this input can only get 0 and 1 values */\n\n    _this.isBoolean = false;\n    /** Gets or sets a value used by the Node Material editor to determine how to configure the current value if it is a matrix */\n\n    _this.matrixMode = 0;\n    /** @hidden */\n\n    _this._systemValue = null;\n    /** Gets or sets a boolean indicating that the value of this input will not change after a build */\n\n    _this.isConstant = false;\n    /** Gets or sets the group to use to display this block in the Inspector */\n\n    _this.groupInInspector = \"\";\n    /** Gets an observable raised when the value is changed */\n\n    _this.onValueChangedObservable = new Observable();\n    /** Gets or sets a boolean indicating if content needs to be converted to gamma space (for color3/4 only) */\n\n    _this.convertToGammaSpace = false;\n    /** Gets or sets a boolean indicating if content needs to be converted to linear space (for color3/4 only) */\n\n    _this.convertToLinearSpace = false;\n    _this._type = type;\n\n    _this.setDefaultValue();\n\n    _this.registerOutput(\"output\", type);\n\n    return _this;\n  }\n\n  Object.defineProperty(InputBlock.prototype, \"type\", {\n    /**\r\n     * Gets or sets the connection point type (default is float)\r\n     */\n    get: function () {\n      if (this._type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\n        if (this.isUniform && this.value != null) {\n          if (!isNaN(this.value)) {\n            this._type = NodeMaterialBlockConnectionPointTypes.Float;\n            return this._type;\n          }\n\n          switch (this.value.getClassName()) {\n            case \"Vector2\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\n              return this._type;\n\n            case \"Vector3\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\n              return this._type;\n\n            case \"Vector4\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\n              return this._type;\n\n            case \"Color3\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Color3;\n              return this._type;\n\n            case \"Color4\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Color4;\n              return this._type;\n\n            case \"Matrix\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\n              return this._type;\n          }\n        }\n\n        if (this.isAttribute) {\n          switch (this.name) {\n            case \"position\":\n            case \"normal\":\n            case \"tangent\":\n            case \"particle_positionw\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\n              return this._type;\n\n            case \"uv\":\n            case \"uv2\":\n            case \"position2d\":\n            case \"particle_uv\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\n              return this._type;\n\n            case \"matricesIndices\":\n            case \"matricesWeights\":\n            case \"world0\":\n            case \"world1\":\n            case \"world2\":\n            case \"world3\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\n              return this._type;\n\n            case \"color\":\n            case \"particle_color\":\n            case \"particle_texturemask\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Color4;\n              return this._type;\n          }\n        }\n\n        if (this.isSystemValue) {\n          switch (this._systemValue) {\n            case NodeMaterialSystemValues.World:\n            case NodeMaterialSystemValues.WorldView:\n            case NodeMaterialSystemValues.WorldViewProjection:\n            case NodeMaterialSystemValues.View:\n            case NodeMaterialSystemValues.ViewProjection:\n            case NodeMaterialSystemValues.Projection:\n              this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\n              return this._type;\n\n            case NodeMaterialSystemValues.CameraPosition:\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\n              return this._type;\n\n            case NodeMaterialSystemValues.FogColor:\n              this._type = NodeMaterialBlockConnectionPointTypes.Color3;\n              return this._type;\n\n            case NodeMaterialSystemValues.DeltaTime:\n              this._type = NodeMaterialBlockConnectionPointTypes.Float;\n              return this._type;\n          }\n        }\n      }\n\n      return this._type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n  * Validates if a name is a reserve word.\r\n  * @param newName the new name to be given to the node.\r\n  * @returns false if the name is a reserve word, else true.\r\n  */\n\n  InputBlock.prototype.validateBlockName = function (newName) {\n    if (!this.isAttribute) {\n      return _super.prototype.validateBlockName.call(this, newName);\n    }\n\n    return true;\n  };\n\n  Object.defineProperty(InputBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Set the source of this connection point to a vertex attribute\r\n   * @param attributeName defines the attribute name (position, uv, normal, etc...). If not specified it will take the connection point name\r\n   * @returns the current connection point\r\n   */\n\n  InputBlock.prototype.setAsAttribute = function (attributeName) {\n    this._mode = NodeMaterialBlockConnectionPointMode.Attribute;\n\n    if (attributeName) {\n      this.name = attributeName;\n    }\n\n    return this;\n  };\n  /**\r\n   * Set the source of this connection point to a system value\r\n   * @param value define the system value to use (world, view, etc...) or null to switch to manual value\r\n   * @returns the current connection point\r\n   */\n\n\n  InputBlock.prototype.setAsSystemValue = function (value) {\n    this.systemValue = value;\n    return this;\n  };\n\n  Object.defineProperty(InputBlock.prototype, \"value\", {\n    /**\r\n     * Gets or sets the value of that point.\r\n     * Please note that this value will be ignored if valueCallback is defined\r\n     */\n    get: function () {\n      return this._storedValue;\n    },\n    set: function (value) {\n      if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\n        if (this.isBoolean) {\n          value = value ? 1 : 0;\n        } else if (this.min !== this.max) {\n          value = Math.max(this.min, value);\n          value = Math.min(this.max, value);\n        }\n      }\n\n      this._storedValue = value;\n      this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\n      this.onValueChangedObservable.notifyObservers(this);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"valueCallback\", {\n    /**\r\n     * Gets or sets a callback used to get the value of that point.\r\n     * Please note that setting this value will force the connection point to ignore the value property\r\n     */\n    get: function () {\n      return this._valueCallback;\n    },\n    set: function (value) {\n      this._valueCallback = value;\n      this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"associatedVariableName\", {\n    /**\r\n     * Gets or sets the associated variable name in the shader\r\n     */\n    get: function () {\n      return this._associatedVariableName;\n    },\n    set: function (value) {\n      this._associatedVariableName = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"animationType\", {\n    /** Gets or sets the type of animation applied to the input */\n    get: function () {\n      return this._animationType;\n    },\n    set: function (value) {\n      this._animationType = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"isUndefined\", {\n    /**\r\n     * Gets a boolean indicating that this connection point not defined yet\r\n     */\n    get: function () {\n      return this._mode === NodeMaterialBlockConnectionPointMode.Undefined;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"isUniform\", {\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is coming from an uniform.\r\n     * In this case the connection point name must be the name of the uniform to use.\r\n     * Can only be set on inputs\r\n     */\n    get: function () {\n      return this._mode === NodeMaterialBlockConnectionPointMode.Uniform;\n    },\n    set: function (value) {\n      this._mode = value ? NodeMaterialBlockConnectionPointMode.Uniform : NodeMaterialBlockConnectionPointMode.Undefined;\n      this.associatedVariableName = \"\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"isAttribute\", {\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is coming from an attribute.\r\n     * In this case the connection point name must be the name of the attribute to use\r\n     * Can only be set on inputs\r\n     */\n    get: function () {\n      return this._mode === NodeMaterialBlockConnectionPointMode.Attribute;\n    },\n    set: function (value) {\n      this._mode = value ? NodeMaterialBlockConnectionPointMode.Attribute : NodeMaterialBlockConnectionPointMode.Undefined;\n      this.associatedVariableName = \"\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"isVarying\", {\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is generating a varying variable.\r\n     * Can only be set on exit points\r\n     */\n    get: function () {\n      return this._mode === NodeMaterialBlockConnectionPointMode.Varying;\n    },\n    set: function (value) {\n      this._mode = value ? NodeMaterialBlockConnectionPointMode.Varying : NodeMaterialBlockConnectionPointMode.Undefined;\n      this.associatedVariableName = \"\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"isSystemValue\", {\n    /**\r\n     * Gets a boolean indicating that the current connection point is a system value\r\n     */\n    get: function () {\n      return this._systemValue != null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"systemValue\", {\n    /**\r\n     * Gets or sets the current well known value or null if not defined as a system value\r\n     */\n    get: function () {\n      return this._systemValue;\n    },\n    set: function (value) {\n      this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\n      this.associatedVariableName = \"\";\n      this._systemValue = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n  InputBlock.prototype.getClassName = function () {\n    return \"InputBlock\";\n  };\n  /**\r\n   * Animate the input if animationType !== None\r\n   * @param scene defines the rendering scene\r\n   */\n\n\n  InputBlock.prototype.animate = function (scene) {\n    switch (this._animationType) {\n      case AnimatedInputBlockTypes.Time:\n        {\n          if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\n            this.value += scene.getAnimationRatio() * 0.01;\n          }\n\n          break;\n        }\n    }\n  };\n\n  InputBlock.prototype._emitDefine = function (define) {\n    if (define[0] === \"!\") {\n      return \"#ifndef \" + define.substring(1) + \"\\r\\n\";\n    }\n\n    return \"#ifdef \" + define + \"\\r\\n\";\n  };\n\n  InputBlock.prototype.initialize = function (state) {\n    this.associatedVariableName = \"\";\n  };\n  /**\r\n   * Set the input block to its default value (based on its type)\r\n   */\n\n\n  InputBlock.prototype.setDefaultValue = function () {\n    switch (this.type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        this.value = 0;\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        this.value = Vector2.Zero();\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        this.value = Vector3.Zero();\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        this.value = Vector4.Zero();\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n        this.value = Color3.White();\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n        this.value = new Color4(1, 1, 1, 1);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Matrix:\n        this.value = Matrix.Identity();\n        break;\n    }\n  };\n\n  InputBlock.prototype._emitConstant = function (state) {\n    switch (this.type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        return \"\" + state._emitFloat(this.value);\n\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        return \"vec2(\" + this.value.x + \", \" + this.value.y + \")\";\n\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        return \"vec3(\" + this.value.x + \", \" + this.value.y + \", \" + this.value.z + \")\";\n\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        return \"vec4(\" + this.value.x + \", \" + this.value.y + \", \" + this.value.z + \", \" + this.value.w + \")\";\n\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n        TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\n\n        if (this.convertToGammaSpace) {\n          TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0]);\n        }\n\n        if (this.convertToLinearSpace) {\n          TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0]);\n        }\n\n        return \"vec3(\" + TmpColors.Color3[0].r + \", \" + TmpColors.Color3[0].g + \", \" + TmpColors.Color3[0].b + \")\";\n\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n        TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\n\n        if (this.convertToGammaSpace) {\n          TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0]);\n        }\n\n        if (this.convertToLinearSpace) {\n          TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0]);\n        }\n\n        return \"vec4(\" + TmpColors.Color4[0].r + \", \" + TmpColors.Color4[0].g + \", \" + TmpColors.Color4[0].b + \", \" + TmpColors.Color4[0].a + \")\";\n    }\n\n    return \"\";\n  };\n\n  Object.defineProperty(InputBlock.prototype, \"_noContextSwitch\", {\n    /** @hidden */\n    get: function () {\n      return attributeInFragmentOnly[this.name];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  InputBlock.prototype._emit = function (state, define) {\n    var _a; // Uniforms\n\n\n    if (this.isUniform) {\n      if (!this.associatedVariableName) {\n        this.associatedVariableName = state._getFreeVariableName(\"u_\" + this.name);\n      }\n\n      if (this.isConstant) {\n        if (state.constants.indexOf(this.associatedVariableName) !== -1) {\n          return;\n        }\n\n        state.constants.push(this.associatedVariableName);\n        state._constantDeclaration += this._declareOutput(this.output, state) + (\" = \" + this._emitConstant(state) + \";\\r\\n\");\n        return;\n      }\n\n      if (state.uniforms.indexOf(this.associatedVariableName) !== -1) {\n        return;\n      }\n\n      state.uniforms.push(this.associatedVariableName);\n\n      if (define) {\n        state._uniformDeclaration += this._emitDefine(define);\n      }\n\n      state._uniformDeclaration += \"uniform \" + state._getGLType(this.type) + \" \" + this.associatedVariableName + \";\\r\\n\";\n\n      if (define) {\n        state._uniformDeclaration += \"#endif\\r\\n\";\n      } // well known\n\n\n      var hints = state.sharedData.hints;\n\n      if (this._systemValue !== null && this._systemValue !== undefined) {\n        switch (this._systemValue) {\n          case NodeMaterialSystemValues.WorldView:\n            hints.needWorldViewMatrix = true;\n            break;\n\n          case NodeMaterialSystemValues.WorldViewProjection:\n            hints.needWorldViewProjectionMatrix = true;\n            break;\n        }\n      } else {\n        if (this._animationType !== AnimatedInputBlockTypes.None) {\n          state.sharedData.animatedInputs.push(this);\n        }\n      }\n\n      return;\n    } // Attribute\n\n\n    if (this.isAttribute) {\n      this.associatedVariableName = (_a = remapAttributeName[this.name]) !== null && _a !== void 0 ? _a : this.name;\n\n      if (this.target === NodeMaterialBlockTargets.Vertex && state._vertexState) {\n        // Attribute for fragment need to be carried over by varyings\n        if (attributeInFragmentOnly[this.name]) {\n          if (attributeAsUniform[this.name]) {\n            state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\n          } else {\n            state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\n          }\n        } else {\n          this._emit(state._vertexState, define);\n        }\n\n        return;\n      }\n\n      if (state.attributes.indexOf(this.associatedVariableName) !== -1) {\n        return;\n      }\n\n      state.attributes.push(this.associatedVariableName);\n\n      if (attributeInFragmentOnly[this.name]) {\n        if (attributeAsUniform[this.name]) {\n          state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\n        } else {\n          state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\n        }\n      } else {\n        if (define) {\n          state._attributeDeclaration += this._emitDefine(define);\n        }\n\n        state._attributeDeclaration += \"attribute \" + state._getGLType(this.type) + \" \" + this.associatedVariableName + \";\\r\\n\";\n\n        if (define) {\n          state._attributeDeclaration += \"#endif\\r\\n\";\n        }\n      }\n    }\n  };\n  /** @hidden */\n\n\n  InputBlock.prototype._transmitWorld = function (effect, world, worldView, worldViewProjection) {\n    if (!this._systemValue) {\n      return;\n    }\n\n    var variableName = this.associatedVariableName;\n\n    switch (this._systemValue) {\n      case NodeMaterialSystemValues.World:\n        effect.setMatrix(variableName, world);\n        break;\n\n      case NodeMaterialSystemValues.WorldView:\n        effect.setMatrix(variableName, worldView);\n        break;\n\n      case NodeMaterialSystemValues.WorldViewProjection:\n        effect.setMatrix(variableName, worldViewProjection);\n        break;\n    }\n  };\n  /** @hidden */\n\n\n  InputBlock.prototype._transmit = function (effect, scene) {\n    if (this.isAttribute) {\n      return;\n    }\n\n    var variableName = this.associatedVariableName;\n\n    if (this._systemValue) {\n      switch (this._systemValue) {\n        case NodeMaterialSystemValues.World:\n        case NodeMaterialSystemValues.WorldView:\n        case NodeMaterialSystemValues.WorldViewProjection:\n          return;\n\n        case NodeMaterialSystemValues.View:\n          effect.setMatrix(variableName, scene.getViewMatrix());\n          break;\n\n        case NodeMaterialSystemValues.Projection:\n          effect.setMatrix(variableName, scene.getProjectionMatrix());\n          break;\n\n        case NodeMaterialSystemValues.ViewProjection:\n          effect.setMatrix(variableName, scene.getTransformMatrix());\n          break;\n\n        case NodeMaterialSystemValues.CameraPosition:\n          MaterialHelper.BindEyePosition(effect, scene, variableName);\n          break;\n\n        case NodeMaterialSystemValues.FogColor:\n          effect.setColor3(variableName, scene.fogColor);\n          break;\n\n        case NodeMaterialSystemValues.DeltaTime:\n          effect.setFloat(variableName, scene.deltaTime / 1000.0);\n      }\n\n      return;\n    }\n\n    var value = this._valueCallback ? this._valueCallback() : this._storedValue;\n\n    if (value === null) {\n      return;\n    }\n\n    switch (this.type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        effect.setFloat(variableName, value);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Int:\n        effect.setInt(variableName, value);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n        TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\n\n        if (this.convertToGammaSpace) {\n          TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0]);\n        }\n\n        if (this.convertToLinearSpace) {\n          TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0]);\n        }\n\n        effect.setColor3(variableName, TmpColors.Color3[0]);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n        TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\n\n        if (this.convertToGammaSpace) {\n          TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0]);\n        }\n\n        if (this.convertToLinearSpace) {\n          TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0]);\n        }\n\n        effect.setDirectColor4(variableName, TmpColors.Color4[0]);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        effect.setVector2(variableName, value);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        effect.setVector3(variableName, value);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        effect.setVector4(variableName, value);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Matrix:\n        effect.setMatrix(variableName, value);\n        break;\n    }\n  };\n\n  InputBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (this.isUniform || this.isSystemValue) {\n      state.sharedData.inputBlocks.push(this);\n    }\n\n    this._emit(state);\n  };\n\n  InputBlock.prototype._dumpPropertiesCode = function () {\n    var variableName = this._codeVariableName;\n\n    if (this.isAttribute) {\n      return variableName + \".setAsAttribute(\\\"\" + this.name + \"\\\");\\r\\n\";\n    }\n\n    if (this.isSystemValue) {\n      return variableName + \".setAsSystemValue(BABYLON.NodeMaterialSystemValues.\" + NodeMaterialSystemValues[this._systemValue] + \");\\r\\n\";\n    }\n\n    if (this.isUniform) {\n      var codes = [];\n      var valueString = \"\";\n\n      switch (this.type) {\n        case NodeMaterialBlockConnectionPointTypes.Float:\n          valueString = \"\" + this.value;\n          break;\n\n        case NodeMaterialBlockConnectionPointTypes.Vector2:\n          valueString = \"new BABYLON.Vector2(\" + this.value.x + \", \" + this.value.y + \")\";\n          break;\n\n        case NodeMaterialBlockConnectionPointTypes.Vector3:\n          valueString = \"new BABYLON.Vector3(\" + this.value.x + \", \" + this.value.y + \", \" + this.value.z + \")\";\n          break;\n\n        case NodeMaterialBlockConnectionPointTypes.Vector4:\n          valueString = \"new BABYLON.Vector4(\" + this.value.x + \", \" + this.value.y + \", \" + this.value.z + \", \" + this.value.w + \")\";\n          break;\n\n        case NodeMaterialBlockConnectionPointTypes.Color3:\n          valueString = \"new BABYLON.Color3(\" + this.value.r + \", \" + this.value.g + \", \" + this.value.b + \")\";\n\n          if (this.convertToGammaSpace) {\n            valueString += \".toGammaSpace()\";\n          }\n\n          if (this.convertToLinearSpace) {\n            valueString += \".toLinearSpace()\";\n          }\n\n          break;\n\n        case NodeMaterialBlockConnectionPointTypes.Color4:\n          valueString = \"new BABYLON.Color4(\" + this.value.r + \", \" + this.value.g + \", \" + this.value.b + \", \" + this.value.a + \")\";\n\n          if (this.convertToGammaSpace) {\n            valueString += \".toGammaSpace()\";\n          }\n\n          if (this.convertToLinearSpace) {\n            valueString += \".toLinearSpace()\";\n          }\n\n          break;\n\n        case NodeMaterialBlockConnectionPointTypes.Matrix:\n          valueString = \"BABYLON.Matrix.FromArray([\" + this.value.m + \"])\";\n          break;\n      } // Common Property \"Value\"\n\n\n      codes.push(variableName + \".value = \" + valueString); // Float-Value-Specific Properties\n\n      if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\n        codes.push(variableName + \".min = \" + this.min, variableName + \".max = \" + this.max, variableName + \".isBoolean = \" + this.isBoolean, variableName + \".matrixMode = \" + this.matrixMode, variableName + \".animationType = BABYLON.AnimatedInputBlockTypes.\" + AnimatedInputBlockTypes[this.animationType]);\n      } // Common Property \"Type\"\n\n\n      codes.push(variableName + \".isConstant = \" + this.isConstant);\n      codes.push('');\n      return codes.join(';\\r\\n');\n    }\n\n    return \"\";\n  };\n\n  InputBlock.prototype.dispose = function () {\n    this.onValueChangedObservable.clear();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  InputBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.type = this.type;\n    serializationObject.mode = this._mode;\n    serializationObject.systemValue = this._systemValue;\n    serializationObject.animationType = this._animationType;\n    serializationObject.min = this.min;\n    serializationObject.max = this.max;\n    serializationObject.isBoolean = this.isBoolean;\n    serializationObject.matrixMode = this.matrixMode;\n    serializationObject.isConstant = this.isConstant;\n    serializationObject.groupInInspector = this.groupInInspector;\n    serializationObject.convertToGammaSpace = this.convertToGammaSpace;\n    serializationObject.convertToLinearSpace = this.convertToLinearSpace;\n\n    if (this._storedValue != null && this._mode === NodeMaterialBlockConnectionPointMode.Uniform) {\n      if (this._storedValue.asArray) {\n        serializationObject.valueType = \"BABYLON.\" + this._storedValue.getClassName();\n        serializationObject.value = this._storedValue.asArray();\n      } else {\n        serializationObject.valueType = \"number\";\n        serializationObject.value = this._storedValue;\n      }\n    }\n\n    return serializationObject;\n  };\n\n  InputBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    this._mode = serializationObject.mode;\n\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this._type = serializationObject.type;\n    this._systemValue = serializationObject.systemValue || serializationObject.wellKnownValue;\n    this._animationType = serializationObject.animationType;\n    this.min = serializationObject.min || 0;\n    this.max = serializationObject.max || 0;\n    this.isBoolean = !!serializationObject.isBoolean;\n    this.matrixMode = serializationObject.matrixMode || 0;\n    this.isConstant = !!serializationObject.isConstant;\n    this.groupInInspector = serializationObject.groupInInspector || \"\";\n    this.convertToGammaSpace = !!serializationObject.convertToGammaSpace;\n    this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\n\n    if (!serializationObject.valueType) {\n      return;\n    }\n\n    if (serializationObject.valueType === \"number\") {\n      this._storedValue = serializationObject.value;\n    } else {\n      var valueType = _TypeStore.GetClass(serializationObject.valueType);\n\n      if (valueType) {\n        this._storedValue = valueType.FromArray(serializationObject.value);\n      }\n    }\n  };\n\n  return InputBlock;\n}(NodeMaterialBlock);\n\nexport { InputBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.InputBlock\"] = InputBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Input/inputBlock.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAT,QAAkC,yBAAlC;AACA,SAAS,qCAAT,QAAsD,mDAAtD;AACA,SAAS,oCAAT,QAAqD,kDAArD;AACA,SAAS,wBAAT,QAAyC,sCAAzC;AAGA,SAAS,MAAT,EAAiB,OAAjB,EAA0B,OAA1B,EAAmC,OAAnC,QAAkD,+BAAlD;AAIA,SAAS,wBAAT,QAAyC,sCAAzC;AACA,SAAS,UAAT,QAA2B,4BAA3B;AACA,SAAS,MAAT,EAAiB,MAAjB,EAAyB,SAAzB,QAA0C,wBAA1C;AACA,SAAS,uBAAT,QAAwC,2BAAxC;AACA,SAAS,UAAT,QAA2B,6BAA3B;AACA,SAAS,cAAT,QAA+B,sCAA/B;AAEA,IAAM,kBAAkB,GAAgC;AACpD,gBAAc,UADsC;AAEpD,iBAAe,KAFqC;AAGpD,oBAAkB,QAHkC;AAIpD,0BAAwB,aAJ4B;AAKpD,wBAAsB;AAL8B,CAAxD;AAQA,IAAM,uBAAuB,GAAiC;AAC1D,iBAAe,IAD2C;AAE1D,oBAAkB,IAFwC;AAG1D,0BAAwB,IAHkC;AAI1D,wBAAsB;AAJoC,CAA9D;AAOA,IAAM,kBAAkB,GAAiC;AACrD,0BAAwB;AAD6B,CAAzD;AAIA;;;;AAGA,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;AA+H5B;;;;;;;;AAMA,WAAA,UAAA,CAAmB,IAAnB,EAAiC,MAAjC,EAA2E,IAA3E,EAAyK;AAAxI,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAS,wBAAwB,CAAC,MAAlC;AAAwC;;AAAE,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAA8C,qCAAqC,CAAC,UAApF;AAA8F;;AAAzK,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,MAAZ,EAAoB,KAApB,EAA2B,IAA3B,KAAgC,IADpC;;AApIQ,IAAA,KAAA,CAAA,KAAA,GAAQ,oCAAoC,CAAC,SAA7C;AAKA,IAAA,KAAA,CAAA,cAAA,GAAiB,uBAAuB,CAAC,IAAzC;AAER;;AACO,IAAA,KAAA,CAAA,GAAA,GAAc,CAAd;AAEP;;AACO,IAAA,KAAA,CAAA,GAAA,GAAc,CAAd;AAEP;;AACO,IAAA,KAAA,CAAA,SAAA,GAAqB,KAArB;AAEP;;AACO,IAAA,KAAA,CAAA,UAAA,GAAqB,CAArB;AAEP;;AACO,IAAA,KAAA,CAAA,YAAA,GAAmD,IAAnD;AAEP;;AACO,IAAA,KAAA,CAAA,UAAA,GAAa,KAAb;AAEP;;AACO,IAAA,KAAA,CAAA,gBAAA,GAAmB,EAAnB;AAEP;;AACO,IAAA,KAAA,CAAA,wBAAA,GAA2B,IAAI,UAAJ,EAA3B;AAEP;;AACO,IAAA,KAAA,CAAA,mBAAA,GAAsB,KAAtB;AAEP;;AACO,IAAA,KAAA,CAAA,oBAAA,GAAuB,KAAvB;AAoGH,IAAA,KAAI,CAAC,KAAL,GAAa,IAAb;;AAEA,IAAA,KAAI,CAAC,eAAL;;AAEA,IAAA,KAAI,CAAC,cAAL,CAAoB,QAApB,EAA8B,IAA9B;;;AACH;;AApGD,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,MAAX,EAAe;AAHf;;;SAGA,YAAA;AACI,UAAI,KAAK,KAAL,KAAe,qCAAqC,CAAC,UAAzD,EAAqE;AACjE,YAAI,KAAK,SAAL,IAAkB,KAAK,KAAL,IAAc,IAApC,EAA0C;AACtC,cAAI,CAAC,KAAK,CAAC,KAAK,KAAN,CAAV,EAAwB;AACpB,iBAAK,KAAL,GAAa,qCAAqC,CAAC,KAAnD;AACA,mBAAO,KAAK,KAAZ;AACH;;AAED,kBAAQ,KAAK,KAAL,CAAW,YAAX,EAAR;AACI,iBAAK,SAAL;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,OAAnD;AACA,qBAAO,KAAK,KAAZ;;AACJ,iBAAK,SAAL;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,OAAnD;AACA,qBAAO,KAAK,KAAZ;;AACJ,iBAAK,SAAL;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,OAAnD;AACA,qBAAO,KAAK,KAAZ;;AACJ,iBAAK,QAAL;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,MAAnD;AACA,qBAAO,KAAK,KAAZ;;AACJ,iBAAK,QAAL;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,MAAnD;AACA,qBAAO,KAAK,KAAZ;;AACJ,iBAAK,QAAL;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,MAAnD;AACA,qBAAO,KAAK,KAAZ;AAlBR;AAoBH;;AAED,YAAI,KAAK,WAAT,EAAsB;AAClB,kBAAQ,KAAK,IAAb;AACI,iBAAK,UAAL;AACA,iBAAK,QAAL;AACA,iBAAK,SAAL;AACA,iBAAK,oBAAL;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,OAAnD;AACA,qBAAO,KAAK,KAAZ;;AACJ,iBAAK,IAAL;AACA,iBAAK,KAAL;AACA,iBAAK,YAAL;AACA,iBAAK,aAAL;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,OAAnD;AACA,qBAAO,KAAK,KAAZ;;AACJ,iBAAK,iBAAL;AACA,iBAAK,iBAAL;AACA,iBAAK,QAAL;AACA,iBAAK,QAAL;AACA,iBAAK,QAAL;AACA,iBAAK,QAAL;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,OAAnD;AACA,qBAAO,KAAK,KAAZ;;AACJ,iBAAK,OAAL;AACA,iBAAK,gBAAL;AACA,iBAAK,sBAAL;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,MAAnD;AACA,qBAAO,KAAK,KAAZ;AAzBR;AA2BH;;AAED,YAAI,KAAK,aAAT,EAAwB;AACpB,kBAAQ,KAAK,YAAb;AACI,iBAAK,wBAAwB,CAAC,KAA9B;AACA,iBAAK,wBAAwB,CAAC,SAA9B;AACA,iBAAK,wBAAwB,CAAC,mBAA9B;AACA,iBAAK,wBAAwB,CAAC,IAA9B;AACA,iBAAK,wBAAwB,CAAC,cAA9B;AACA,iBAAK,wBAAwB,CAAC,UAA9B;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,MAAnD;AACA,qBAAO,KAAK,KAAZ;;AACJ,iBAAK,wBAAwB,CAAC,cAA9B;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,OAAnD;AACA,qBAAO,KAAK,KAAZ;;AACJ,iBAAK,wBAAwB,CAAC,QAA9B;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,MAAnD;AACA,qBAAO,KAAK,KAAZ;;AACJ,iBAAK,wBAAwB,CAAC,SAA9B;AACI,mBAAK,KAAL,GAAa,qCAAqC,CAAC,KAAnD;AACA,qBAAO,KAAK,KAAZ;AAjBR;AAmBH;AACJ;;AAED,aAAO,KAAK,KAAZ;AACH,KApFc;qBAAA;;AAAA,GAAf;AAsGA;;;;;;AAKO,EAAA,UAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,OAAzB,EAAwC;AACpC,QAAI,CAAC,KAAK,WAAV,EAAuB;AACnB,aAAO,MAAA,CAAA,SAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,EAAwB,OAAxB,CAAP;AACH;;AACD,WAAO,IAAP;AACH,GALM;;AAUP,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAHjB;;;SAGA,YAAA;AACI,aAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACH,KAFgB;qBAAA;;AAAA,GAAjB;AAIA;;;;;;AAKO,EAAA,UAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,aAAtB,EAA4C;AACxC,SAAK,KAAL,GAAa,oCAAoC,CAAC,SAAlD;;AACA,QAAI,aAAJ,EAAmB;AACf,WAAK,IAAL,GAAY,aAAZ;AACH;;AACD,WAAO,IAAP;AACH,GANM;AAQP;;;;;;;AAKO,EAAA,UAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,KAAxB,EAAiE;AAC7D,SAAK,WAAL,GAAmB,KAAnB;AACA,WAAO,IAAP;AACH,GAHM;;AASP,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;AAJhB;;;;SAIA,YAAA;AACI,aAAO,KAAK,YAAZ;AACH,KAFe;SAIhB,UAAiB,KAAjB,EAA2B;AACvB,UAAI,KAAK,IAAL,KAAc,qCAAqC,CAAC,KAAxD,EAA+D;AAC3D,YAAI,KAAK,SAAT,EAAoB;AAChB,UAAA,KAAK,GAAG,KAAK,GAAG,CAAH,GAAO,CAApB;AACH,SAFD,MAGK,IAAI,KAAK,GAAL,KAAa,KAAK,GAAtB,EAA2B;AAC5B,UAAA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,GAAd,EAAmB,KAAnB,CAAR;AACA,UAAA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,GAAd,EAAmB,KAAnB,CAAR;AACH;AACJ;;AAED,WAAK,YAAL,GAAoB,KAApB;AACA,WAAK,KAAL,GAAa,oCAAoC,CAAC,OAAlD;AAEA,WAAK,wBAAL,CAA8B,eAA9B,CAA8C,IAA9C;AACH,KAnBe;qBAAA;;AAAA,GAAhB;AAyBA,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;AAJxB;;;;SAIA,YAAA;AACI,aAAO,KAAK,cAAZ;AACH,KAFuB;SAIxB,UAAyB,KAAzB,EAAyC;AACrC,WAAK,cAAL,GAAsB,KAAtB;AACA,WAAK,KAAL,GAAa,oCAAoC,CAAC,OAAlD;AACH,KAPuB;qBAAA;;AAAA,GAAxB;AAYA,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,wBAAX,EAAiC;AAHjC;;;SAGA,YAAA;AACI,aAAO,KAAK,uBAAZ;AACH,KAFgC;SAIjC,UAAkC,KAAlC,EAA+C;AAC3C,WAAK,uBAAL,GAA+B,KAA/B;AACH,KANgC;qBAAA;;AAAA,GAAjC;AASA,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;AADxB;SACA,YAAA;AACI,aAAO,KAAK,cAAZ;AACH,KAFuB;SAIxB,UAAyB,KAAzB,EAAuD;AACnD,WAAK,cAAL,GAAsB,KAAtB;AACH,KANuB;qBAAA;;AAAA,GAAxB;AAWA,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AAHtB;;;SAGA,YAAA;AACI,aAAO,KAAK,KAAL,KAAe,oCAAoC,CAAC,SAA3D;AACH,KAFqB;qBAAA;;AAAA,GAAtB;AASA,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AALpB;;;;;SAKA,YAAA;AACI,aAAO,KAAK,KAAL,KAAe,oCAAoC,CAAC,OAA3D;AACH,KAFmB;SAIpB,UAAqB,KAArB,EAAmC;AAC/B,WAAK,KAAL,GAAa,KAAK,GAAG,oCAAoC,CAAC,OAAxC,GAAkD,oCAAoC,CAAC,SAAzG;AACA,WAAK,sBAAL,GAA8B,EAA9B;AACH,KAPmB;qBAAA;;AAAA,GAApB;AAcA,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AALtB;;;;;SAKA,YAAA;AACI,aAAO,KAAK,KAAL,KAAe,oCAAoC,CAAC,SAA3D;AACH,KAFqB;SAItB,UAAuB,KAAvB,EAAqC;AACjC,WAAK,KAAL,GAAa,KAAK,GAAG,oCAAoC,CAAC,SAAxC,GAAoD,oCAAoC,CAAC,SAA3G;AACA,WAAK,sBAAL,GAA8B,EAA9B;AACH,KAPqB;qBAAA;;AAAA,GAAtB;AAaA,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAJpB;;;;SAIA,YAAA;AACI,aAAO,KAAK,KAAL,KAAe,oCAAoC,CAAC,OAA3D;AACH,KAFmB;SAIpB,UAAqB,KAArB,EAAmC;AAC/B,WAAK,KAAL,GAAa,KAAK,GAAG,oCAAoC,CAAC,OAAxC,GAAkD,oCAAoC,CAAC,SAAzG;AACA,WAAK,sBAAL,GAA8B,EAA9B;AACH,KAPmB;qBAAA;;AAAA,GAApB;AAYA,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;AAHxB;;;SAGA,YAAA;AACI,aAAO,KAAK,YAAL,IAAqB,IAA5B;AACH,KAFuB;qBAAA;;AAAA,GAAxB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AAHtB;;;SAGA,YAAA;AACI,aAAO,KAAK,YAAZ;AACH,KAFqB;SAItB,UAAuB,KAAvB,EAAgE;AAC5D,WAAK,KAAL,GAAa,oCAAoC,CAAC,OAAlD;AACA,WAAK,sBAAL,GAA8B,EAA9B;AACA,WAAK,YAAL,GAAoB,KAApB;AACH,KARqB;qBAAA;;AAAA,GAAtB;AAUA;;;;;AAIO,EAAA,UAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,YAAP;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,KAAf,EAA2B;AACvB,YAAQ,KAAK,cAAb;AACI,WAAK,uBAAuB,CAAC,IAA7B;AAAmC;AAC/B,cAAI,KAAK,IAAL,KAAc,qCAAqC,CAAC,KAAxD,EAA+D;AAC3D,iBAAK,KAAL,IAAc,KAAK,CAAC,iBAAN,KAA4B,IAA1C;AACH;;AACD;AACH;AANL;AAQH,GATM;;AAWC,EAAA,UAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,MAApB,EAAkC;AAC9B,QAAI,MAAM,CAAC,CAAD,CAAN,KAAc,GAAlB,EAAuB;AACnB,aAAO,aAAW,MAAM,CAAC,SAAP,CAAiB,CAAjB,CAAX,GAA8B,MAArC;AACH;;AAED,WAAO,YAAU,MAAV,GAAgB,MAAvB;AACH,GANO;;AAQD,EAAA,UAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,KAAlB,EAA+C;AAC3C,SAAK,sBAAL,GAA8B,EAA9B;AACH,GAFM;AAIP;;;;;AAGO,EAAA,UAAA,CAAA,SAAA,CAAA,eAAA,GAAP,YAAA;AACI,YAAQ,KAAK,IAAb;AACI,WAAK,qCAAqC,CAAC,KAA3C;AACI,aAAK,KAAL,GAAa,CAAb;AACA;;AACJ,WAAK,qCAAqC,CAAC,OAA3C;AACI,aAAK,KAAL,GAAa,OAAO,CAAC,IAAR,EAAb;AACA;;AACJ,WAAK,qCAAqC,CAAC,OAA3C;AACI,aAAK,KAAL,GAAa,OAAO,CAAC,IAAR,EAAb;AACA;;AACJ,WAAK,qCAAqC,CAAC,OAA3C;AACI,aAAK,KAAL,GAAa,OAAO,CAAC,IAAR,EAAb;AACA;;AACJ,WAAK,qCAAqC,CAAC,MAA3C;AACI,aAAK,KAAL,GAAa,MAAM,CAAC,KAAP,EAAb;AACA;;AACJ,WAAK,qCAAqC,CAAC,MAA3C;AACI,aAAK,KAAL,GAAa,IAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,CAAb;AACA;;AACJ,WAAK,qCAAqC,CAAC,MAA3C;AACI,aAAK,KAAL,GAAa,MAAM,CAAC,QAAP,EAAb;AACA;AArBR;AAuBH,GAxBM;;AA0BC,EAAA,UAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,KAAtB,EAAmD;AAC/C,YAAQ,KAAK,IAAb;AACI,WAAK,qCAAqC,CAAC,KAA3C;AACI,eAAO,KAAG,KAAK,CAAC,UAAN,CAAiB,KAAK,KAAtB,CAAV;;AACJ,WAAK,qCAAqC,CAAC,OAA3C;AACI,eAAO,UAAQ,KAAK,KAAL,CAAW,CAAnB,GAAoB,IAApB,GAAyB,KAAK,KAAL,CAAW,CAApC,GAAqC,GAA5C;;AACJ,WAAK,qCAAqC,CAAC,OAA3C;AACI,eAAO,UAAQ,KAAK,KAAL,CAAW,CAAnB,GAAoB,IAApB,GAAyB,KAAK,KAAL,CAAW,CAApC,GAAqC,IAArC,GAA0C,KAAK,KAAL,CAAW,CAArD,GAAsD,GAA7D;;AACJ,WAAK,qCAAqC,CAAC,OAA3C;AACI,eAAO,UAAQ,KAAK,KAAL,CAAW,CAAnB,GAAoB,IAApB,GAAyB,KAAK,KAAL,CAAW,CAApC,GAAqC,IAArC,GAA0C,KAAK,KAAL,CAAW,CAArD,GAAsD,IAAtD,GAA2D,KAAK,KAAL,CAAW,CAAtE,GAAuE,GAA9E;;AACJ,WAAK,qCAAqC,CAAC,MAA3C;AACI,QAAA,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,GAApB,CAAwB,KAAK,KAAL,CAAW,CAAnC,EAAsC,KAAK,KAAL,CAAW,CAAjD,EAAoD,KAAK,KAAL,CAAW,CAA/D;;AACA,YAAI,KAAK,mBAAT,EAA8B;AAC1B,UAAA,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,iBAApB,CAAsC,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAAtC;AACH;;AACD,YAAI,KAAK,oBAAT,EAA+B;AAC3B,UAAA,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,kBAApB,CAAuC,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAAvC;AACH;;AACD,eAAO,UAAQ,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,CAA5B,GAA6B,IAA7B,GAAkC,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,CAAtD,GAAuD,IAAvD,GAA4D,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,CAAhF,GAAiF,GAAxF;;AACJ,WAAK,qCAAqC,CAAC,MAA3C;AACI,QAAA,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,GAApB,CAAwB,KAAK,KAAL,CAAW,CAAnC,EAAsC,KAAK,KAAL,CAAW,CAAjD,EAAoD,KAAK,KAAL,CAAW,CAA/D,EAAkE,KAAK,KAAL,CAAW,CAA7E;;AACA,YAAI,KAAK,mBAAT,EAA8B;AAC1B,UAAA,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,iBAApB,CAAsC,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAAtC;AACH;;AACD,YAAI,KAAK,oBAAT,EAA+B;AAC3B,UAAA,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,kBAApB,CAAuC,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAAvC;AACH;;AACD,eAAO,UAAQ,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,CAA5B,GAA6B,IAA7B,GAAkC,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,CAAtD,GAAuD,IAAvD,GAA4D,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,CAAhF,GAAiF,IAAjF,GAAsF,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,CAA1G,GAA2G,GAAlH;AA1BR;;AA6BA,WAAO,EAAP;AACH,GA/BO;;AAkCR,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,kBAAX,EAA2B;AAD3B;SACA,YAAA;AACI,aAAO,uBAAuB,CAAC,KAAK,IAAN,CAA9B;AACH,KAF0B;qBAAA;;AAAA,GAA3B;;AAIQ,EAAA,UAAA,CAAA,SAAA,CAAA,KAAA,GAAR,UAAc,KAAd,EAA6C,MAA7C,EAA4D;WAAA,CACxD;;;AACA,QAAI,KAAK,SAAT,EAAoB;AAChB,UAAI,CAAC,KAAK,sBAAV,EAAkC;AAC9B,aAAK,sBAAL,GAA8B,KAAK,CAAC,oBAAN,CAA2B,OAAO,KAAK,IAAvC,CAA9B;AACH;;AAED,UAAI,KAAK,UAAT,EAAqB;AACjB,YAAI,KAAK,CAAC,SAAN,CAAgB,OAAhB,CAAwB,KAAK,sBAA7B,MAAyD,CAAC,CAA9D,EAAiE;AAC7D;AACH;;AACD,QAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB,CAAqB,KAAK,sBAA1B;AACA,QAAA,KAAK,CAAC,oBAAN,IAA8B,KAAK,cAAL,CAAoB,KAAK,MAAzB,EAAiC,KAAjC,KAA0C,QAAM,KAAK,aAAL,CAAmB,KAAnB,CAAN,GAA+B,OAAzE,CAA9B;AACA;AACH;;AAED,UAAI,KAAK,CAAC,QAAN,CAAe,OAAf,CAAuB,KAAK,sBAA5B,MAAwD,CAAC,CAA7D,EAAgE;AAC5D;AACH;;AAED,MAAA,KAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,KAAK,sBAAzB;;AACA,UAAI,MAAJ,EAAY;AACR,QAAA,KAAK,CAAC,mBAAN,IAA6B,KAAK,WAAL,CAAiB,MAAjB,CAA7B;AACH;;AACD,MAAA,KAAK,CAAC,mBAAN,IAA6B,aAAW,KAAK,CAAC,UAAN,CAAiB,KAAK,IAAtB,CAAX,GAAsC,GAAtC,GAA0C,KAAK,sBAA/C,GAAqE,OAAlG;;AACA,UAAI,MAAJ,EAAY;AACR,QAAA,KAAK,CAAC,mBAAN,IAA6B,YAA7B;AACH,OAzBe,CA2BhB;;;AACA,UAAI,KAAK,GAAG,KAAK,CAAC,UAAN,CAAiB,KAA7B;;AACA,UAAI,KAAK,YAAL,KAAsB,IAAtB,IAA8B,KAAK,YAAL,KAAsB,SAAxD,EAAmE;AAC/D,gBAAQ,KAAK,YAAb;AACI,eAAK,wBAAwB,CAAC,SAA9B;AACI,YAAA,KAAK,CAAC,mBAAN,GAA4B,IAA5B;AACA;;AACJ,eAAK,wBAAwB,CAAC,mBAA9B;AACI,YAAA,KAAK,CAAC,6BAAN,GAAsC,IAAtC;AACA;AANR;AAQH,OATD,MASO;AACH,YAAI,KAAK,cAAL,KAAwB,uBAAuB,CAAC,IAApD,EAA0D;AACtD,UAAA,KAAK,CAAC,UAAN,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,IAArC;AACH;AACJ;;AAED;AACH,KA/CuD,CAiDxD;;;AACA,QAAI,KAAK,WAAT,EAAsB;AAClB,WAAK,sBAAL,GAA2B,CAAA,EAAA,GAAG,kBAAkB,CAAC,KAAK,IAAN,CAArB,MAAgC,IAAhC,IAAgC,EAAA,KAAA,KAAA,CAAhC,GAAgC,EAAhC,GAAoC,KAAK,IAApE;;AAEA,UAAI,KAAK,MAAL,KAAgB,wBAAwB,CAAC,MAAzC,IAAmD,KAAK,CAAC,YAA7D,EAA2E;AAAE;AACzE,YAAI,uBAAuB,CAAC,KAAK,IAAN,CAA3B,EAAwC;AACpC,cAAI,kBAAkB,CAAC,KAAK,IAAN,CAAtB,EAAmC;AAC/B,YAAA,KAAK,CAAC,sBAAN,CAA6B,KAAK,sBAAlC,EAA0D,KAAK,CAAC,UAAN,CAAiB,KAAK,IAAtB,CAA1D,EAAuF,MAAvF;AACH,WAFD,MAEO;AACH,YAAA,KAAK,CAAC,sBAAN,CAA6B,KAAK,sBAAlC,EAA0D,KAAK,CAAC,UAAN,CAAiB,KAAK,IAAtB,CAA1D,EAAuF,MAAvF;AACH;AACJ,SAND,MAMO;AACH,eAAK,KAAL,CAAW,KAAK,CAAC,YAAjB,EAA+B,MAA/B;AACH;;AACD;AACH;;AAED,UAAI,KAAK,CAAC,UAAN,CAAiB,OAAjB,CAAyB,KAAK,sBAA9B,MAA0D,CAAC,CAA/D,EAAkE;AAC9D;AACH;;AAED,MAAA,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAsB,KAAK,sBAA3B;;AAEA,UAAI,uBAAuB,CAAC,KAAK,IAAN,CAA3B,EAAwC;AACpC,YAAI,kBAAkB,CAAC,KAAK,IAAN,CAAtB,EAAmC;AAC/B,UAAA,KAAK,CAAC,sBAAN,CAA6B,KAAK,sBAAlC,EAA0D,KAAK,CAAC,UAAN,CAAiB,KAAK,IAAtB,CAA1D,EAAuF,MAAvF;AACH,SAFD,MAEO;AACH,UAAA,KAAK,CAAC,sBAAN,CAA6B,KAAK,sBAAlC,EAA0D,KAAK,CAAC,UAAN,CAAiB,KAAK,IAAtB,CAA1D,EAAuF,MAAvF;AACH;AACJ,OAND,MAMO;AACH,YAAI,MAAJ,EAAY;AACR,UAAA,KAAK,CAAC,qBAAN,IAA+B,KAAK,WAAL,CAAiB,MAAjB,CAA/B;AACH;;AACD,QAAA,KAAK,CAAC,qBAAN,IAA+B,eAAa,KAAK,CAAC,UAAN,CAAiB,KAAK,IAAtB,CAAb,GAAwC,GAAxC,GAA4C,KAAK,sBAAjD,GAAuE,OAAtG;;AACA,YAAI,MAAJ,EAAY;AACR,UAAA,KAAK,CAAC,qBAAN,IAA+B,YAA/B;AACH;AACJ;AACJ;AACJ,GAxFO;AA0FR;;;AACO,EAAA,UAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,MAAtB,EAAsC,KAAtC,EAAqD,SAArD,EAAwE,mBAAxE,EAAmG;AAC/F,QAAI,CAAC,KAAK,YAAV,EAAwB;AACpB;AACH;;AAED,QAAI,YAAY,GAAG,KAAK,sBAAxB;;AACA,YAAQ,KAAK,YAAb;AACI,WAAK,wBAAwB,CAAC,KAA9B;AACI,QAAA,MAAM,CAAC,SAAP,CAAiB,YAAjB,EAA+B,KAA/B;AACA;;AACJ,WAAK,wBAAwB,CAAC,SAA9B;AACI,QAAA,MAAM,CAAC,SAAP,CAAiB,YAAjB,EAA+B,SAA/B;AACA;;AACJ,WAAK,wBAAwB,CAAC,mBAA9B;AACI,QAAA,MAAM,CAAC,SAAP,CAAiB,YAAjB,EAA+B,mBAA/B;AACA;AATR;AAWH,GAjBM;AAmBP;;;AACO,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,MAAjB,EAAiC,KAAjC,EAA6C;AACzC,QAAI,KAAK,WAAT,EAAsB;AAClB;AACH;;AAED,QAAI,YAAY,GAAG,KAAK,sBAAxB;;AACA,QAAI,KAAK,YAAT,EAAuB;AACnB,cAAQ,KAAK,YAAb;AACI,aAAK,wBAAwB,CAAC,KAA9B;AACA,aAAK,wBAAwB,CAAC,SAA9B;AACA,aAAK,wBAAwB,CAAC,mBAA9B;AACI;;AACJ,aAAK,wBAAwB,CAAC,IAA9B;AACI,UAAA,MAAM,CAAC,SAAP,CAAiB,YAAjB,EAA+B,KAAK,CAAC,aAAN,EAA/B;AACA;;AACJ,aAAK,wBAAwB,CAAC,UAA9B;AACI,UAAA,MAAM,CAAC,SAAP,CAAiB,YAAjB,EAA+B,KAAK,CAAC,mBAAN,EAA/B;AACA;;AACJ,aAAK,wBAAwB,CAAC,cAA9B;AACI,UAAA,MAAM,CAAC,SAAP,CAAiB,YAAjB,EAA+B,KAAK,CAAC,kBAAN,EAA/B;AACA;;AACJ,aAAK,wBAAwB,CAAC,cAA9B;AACI,UAAA,cAAc,CAAC,eAAf,CAA+B,MAA/B,EAAuC,KAAvC,EAA8C,YAA9C;AACA;;AACJ,aAAK,wBAAwB,CAAC,QAA9B;AACI,UAAA,MAAM,CAAC,SAAP,CAAiB,YAAjB,EAA+B,KAAK,CAAC,QAArC;AACA;;AACJ,aAAK,wBAAwB,CAAC,SAA9B;AACI,UAAA,MAAM,CAAC,QAAP,CAAgB,YAAhB,EAA8B,KAAK,CAAC,SAAN,GAAkB,MAAhD;AArBR;;AAuBA;AACH;;AAED,QAAI,KAAK,GAAG,KAAK,cAAL,GAAsB,KAAK,cAAL,EAAtB,GAA8C,KAAK,YAA/D;;AAEA,QAAI,KAAK,KAAK,IAAd,EAAoB;AAChB;AACH;;AAED,YAAQ,KAAK,IAAb;AACI,WAAK,qCAAqC,CAAC,KAA3C;AACI,QAAA,MAAM,CAAC,QAAP,CAAgB,YAAhB,EAA8B,KAA9B;AACA;;AACJ,WAAK,qCAAqC,CAAC,GAA3C;AACI,QAAA,MAAM,CAAC,MAAP,CAAc,YAAd,EAA4B,KAA5B;AACA;;AACJ,WAAK,qCAAqC,CAAC,MAA3C;AACI,QAAA,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,GAApB,CAAwB,KAAK,KAAL,CAAW,CAAnC,EAAsC,KAAK,KAAL,CAAW,CAAjD,EAAoD,KAAK,KAAL,CAAW,CAA/D;;AACA,YAAI,KAAK,mBAAT,EAA8B;AAC1B,UAAA,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,iBAApB,CAAsC,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAAtC;AACH;;AACD,YAAI,KAAK,oBAAT,EAA+B;AAC3B,UAAA,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,kBAApB,CAAuC,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAAvC;AACH;;AACD,QAAA,MAAM,CAAC,SAAP,CAAiB,YAAjB,EAA+B,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAA/B;AACA;;AACJ,WAAK,qCAAqC,CAAC,MAA3C;AACI,QAAA,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,GAApB,CAAwB,KAAK,KAAL,CAAW,CAAnC,EAAsC,KAAK,KAAL,CAAW,CAAjD,EAAoD,KAAK,KAAL,CAAW,CAA/D,EAAkE,KAAK,KAAL,CAAW,CAA7E;;AACA,YAAI,KAAK,mBAAT,EAA8B;AAC1B,UAAA,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,iBAApB,CAAsC,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAAtC;AACH;;AACD,YAAI,KAAK,oBAAT,EAA+B;AAC3B,UAAA,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,kBAApB,CAAuC,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAAvC;AACH;;AACD,QAAA,MAAM,CAAC,eAAP,CAAuB,YAAvB,EAAqC,SAAS,CAAC,MAAV,CAAiB,CAAjB,CAArC;AACA;;AACJ,WAAK,qCAAqC,CAAC,OAA3C;AACI,QAAA,MAAM,CAAC,UAAP,CAAkB,YAAlB,EAAgC,KAAhC;AACA;;AACJ,WAAK,qCAAqC,CAAC,OAA3C;AACI,QAAA,MAAM,CAAC,UAAP,CAAkB,YAAlB,EAAgC,KAAhC;AACA;;AACJ,WAAK,qCAAqC,CAAC,OAA3C;AACI,QAAA,MAAM,CAAC,UAAP,CAAkB,YAAlB,EAAgC,KAAhC;AACA;;AACJ,WAAK,qCAAqC,CAAC,MAA3C;AACI,QAAA,MAAM,CAAC,SAAP,CAAiB,YAAjB,EAA+B,KAA/B;AACA;AAtCR;AAwCH,GA/EM;;AAiFG,EAAA,UAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,KAAtB,EAAmD;AAC/C,IAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,KAAlB;;AAEA,QAAI,KAAK,SAAL,IAAkB,KAAK,aAA3B,EAA0C;AACtC,MAAA,KAAK,CAAC,UAAN,CAAiB,WAAjB,CAA6B,IAA7B,CAAkC,IAAlC;AACH;;AAED,SAAK,KAAL,CAAW,KAAX;AACH,GARS;;AAUA,EAAA,UAAA,CAAA,SAAA,CAAA,mBAAA,GAAV,YAAA;AACI,QAAI,YAAY,GAAG,KAAK,iBAAxB;;AAEA,QAAI,KAAK,WAAT,EAAsB;AAClB,aAAU,YAAY,GAAA,oBAAZ,GAAgC,KAAK,IAArC,GAAyC,UAAnD;AACH;;AACD,QAAI,KAAK,aAAT,EAAwB;AACpB,aAAU,YAAY,GAAA,qDAAZ,GAAkE,wBAAwB,CAAC,KAAK,YAAN,CAA1F,GAA8G,QAAxH;AACH;;AACD,QAAI,KAAK,SAAT,EAAoB;AAChB,UAAM,KAAK,GAAa,EAAxB;AAEA,UAAI,WAAW,GAAG,EAAlB;;AAEA,cAAQ,KAAK,IAAb;AACI,aAAK,qCAAqC,CAAC,KAA3C;AACI,UAAA,WAAW,GAAG,KAAG,KAAK,KAAtB;AACA;;AACJ,aAAK,qCAAqC,CAAC,OAA3C;AACI,UAAA,WAAW,GAAG,yBAAuB,KAAK,KAAL,CAAW,CAAlC,GAAmC,IAAnC,GAAwC,KAAK,KAAL,CAAW,CAAnD,GAAoD,GAAlE;AACA;;AACJ,aAAK,qCAAqC,CAAC,OAA3C;AACI,UAAA,WAAW,GAAG,yBAAuB,KAAK,KAAL,CAAW,CAAlC,GAAmC,IAAnC,GAAwC,KAAK,KAAL,CAAW,CAAnD,GAAoD,IAApD,GAAyD,KAAK,KAAL,CAAW,CAApE,GAAqE,GAAnF;AACA;;AACJ,aAAK,qCAAqC,CAAC,OAA3C;AACI,UAAA,WAAW,GAAG,yBAAuB,KAAK,KAAL,CAAW,CAAlC,GAAmC,IAAnC,GAAwC,KAAK,KAAL,CAAW,CAAnD,GAAoD,IAApD,GAAyD,KAAK,KAAL,CAAW,CAApE,GAAqE,IAArE,GAA0E,KAAK,KAAL,CAAW,CAArF,GAAsF,GAApG;AACA;;AACJ,aAAK,qCAAqC,CAAC,MAA3C;AACI,UAAA,WAAW,GAAG,wBAAsB,KAAK,KAAL,CAAW,CAAjC,GAAkC,IAAlC,GAAuC,KAAK,KAAL,CAAW,CAAlD,GAAmD,IAAnD,GAAwD,KAAK,KAAL,CAAW,CAAnE,GAAoE,GAAlF;;AACA,cAAI,KAAK,mBAAT,EAA8B;AAC1B,YAAA,WAAW,IAAI,iBAAf;AACH;;AACD,cAAI,KAAK,oBAAT,EAA+B;AAC3B,YAAA,WAAW,IAAI,kBAAf;AACH;;AACD;;AACJ,aAAK,qCAAqC,CAAC,MAA3C;AACI,UAAA,WAAW,GAAG,wBAAsB,KAAK,KAAL,CAAW,CAAjC,GAAkC,IAAlC,GAAuC,KAAK,KAAL,CAAW,CAAlD,GAAmD,IAAnD,GAAwD,KAAK,KAAL,CAAW,CAAnE,GAAoE,IAApE,GAAyE,KAAK,KAAL,CAAW,CAApF,GAAqF,GAAnG;;AACA,cAAI,KAAK,mBAAT,EAA8B;AAC1B,YAAA,WAAW,IAAI,iBAAf;AACH;;AACD,cAAI,KAAK,oBAAT,EAA+B;AAC3B,YAAA,WAAW,IAAI,kBAAf;AACH;;AACD;;AACJ,aAAK,qCAAqC,CAAC,MAA3C;AACI,UAAA,WAAW,GAAG,+BAA8B,KAAK,KAAL,CAAsB,CAApD,GAAqD,IAAnE;AACA;AAjCR,OALgB,CAyChB;;;AACA,MAAA,KAAK,CAAC,IAAN,CAAc,YAAY,GAAA,WAAZ,GAAwB,WAAtC,EA1CgB,CA4ChB;;AACA,UAAI,KAAK,IAAL,KAAc,qCAAqC,CAAC,KAAxD,EAA+D;AAC3D,QAAA,KAAK,CAAC,IAAN,CACO,YAAY,GAAA,SAAZ,GAAsB,KAAK,GADlC,EAEO,YAAY,GAAA,SAAZ,GAAsB,KAAK,GAFlC,EAGO,YAAY,GAAA,eAAZ,GAA4B,KAAK,SAHxC,EAIO,YAAY,GAAA,gBAAZ,GAA6B,KAAK,UAJzC,EAKO,YAAY,GAAA,mDAAZ,GAAgE,uBAAuB,CAAC,KAAK,aAAN,CAL9F;AAOH,OArDe,CAuDhB;;;AACA,MAAA,KAAK,CAAC,IAAN,CACO,YAAY,GAAA,gBAAZ,GAA6B,KAAK,UADzC;AAIA,MAAA,KAAK,CAAC,IAAN,CAAW,EAAX;AAEA,aAAO,KAAK,CAAC,IAAN,CAAW,OAAX,CAAP;AACH;;AACD,WAAO,EAAP;AACH,GA1ES;;AA4EH,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,SAAK,wBAAL,CAA8B,KAA9B;;AAEA,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;AACH,GAJM;;AAMA,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACI,QAAI,mBAAmB,GAAG,MAAA,CAAA,SAAA,CAAM,SAAN,CAAe,IAAf,CAAe,IAAf,CAA1B;;AAEA,IAAA,mBAAmB,CAAC,IAApB,GAA2B,KAAK,IAAhC;AACA,IAAA,mBAAmB,CAAC,IAApB,GAA2B,KAAK,KAAhC;AACA,IAAA,mBAAmB,CAAC,WAApB,GAAkC,KAAK,YAAvC;AACA,IAAA,mBAAmB,CAAC,aAApB,GAAoC,KAAK,cAAzC;AACA,IAAA,mBAAmB,CAAC,GAApB,GAA0B,KAAK,GAA/B;AACA,IAAA,mBAAmB,CAAC,GAApB,GAA0B,KAAK,GAA/B;AACA,IAAA,mBAAmB,CAAC,SAApB,GAAgC,KAAK,SAArC;AACA,IAAA,mBAAmB,CAAC,UAApB,GAAiC,KAAK,UAAtC;AACA,IAAA,mBAAmB,CAAC,UAApB,GAAiC,KAAK,UAAtC;AACA,IAAA,mBAAmB,CAAC,gBAApB,GAAuC,KAAK,gBAA5C;AACA,IAAA,mBAAmB,CAAC,mBAApB,GAA0C,KAAK,mBAA/C;AACA,IAAA,mBAAmB,CAAC,oBAApB,GAA2C,KAAK,oBAAhD;;AAEA,QAAI,KAAK,YAAL,IAAqB,IAArB,IAA6B,KAAK,KAAL,KAAe,oCAAoC,CAAC,OAArF,EAA8F;AAC1F,UAAI,KAAK,YAAL,CAAkB,OAAtB,EAA+B;AAC3B,QAAA,mBAAmB,CAAC,SAApB,GAAgC,aAAa,KAAK,YAAL,CAAkB,YAAlB,EAA7C;AACA,QAAA,mBAAmB,CAAC,KAApB,GAA4B,KAAK,YAAL,CAAkB,OAAlB,EAA5B;AACH,OAHD,MAGO;AACH,QAAA,mBAAmB,CAAC,SAApB,GAAgC,QAAhC;AACA,QAAA,mBAAmB,CAAC,KAApB,GAA4B,KAAK,YAAjC;AACH;AACJ;;AAED,WAAO,mBAAP;AACH,GA3BM;;AA6BA,EAAA,UAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,mBAApB,EAA8C,KAA9C,EAA4D,OAA5D,EAA2E;AACvE,SAAK,KAAL,GAAa,mBAAmB,CAAC,IAAjC;;AACA,IAAA,MAAA,CAAA,SAAA,CAAM,YAAN,CAAkB,IAAlB,CAAkB,IAAlB,EAAmB,mBAAnB,EAAwC,KAAxC,EAA+C,OAA/C;;AAEA,SAAK,KAAL,GAAa,mBAAmB,CAAC,IAAjC;AAEA,SAAK,YAAL,GAAoB,mBAAmB,CAAC,WAApB,IAAmC,mBAAmB,CAAC,cAA3E;AACA,SAAK,cAAL,GAAsB,mBAAmB,CAAC,aAA1C;AACA,SAAK,GAAL,GAAW,mBAAmB,CAAC,GAApB,IAA2B,CAAtC;AACA,SAAK,GAAL,GAAW,mBAAmB,CAAC,GAApB,IAA2B,CAAtC;AACA,SAAK,SAAL,GAAiB,CAAC,CAAC,mBAAmB,CAAC,SAAvC;AACA,SAAK,UAAL,GAAkB,mBAAmB,CAAC,UAApB,IAAkC,CAApD;AACA,SAAK,UAAL,GAAkB,CAAC,CAAC,mBAAmB,CAAC,UAAxC;AACA,SAAK,gBAAL,GAAwB,mBAAmB,CAAC,gBAApB,IAAwC,EAAhE;AACA,SAAK,mBAAL,GAA2B,CAAC,CAAC,mBAAmB,CAAC,mBAAjD;AACA,SAAK,oBAAL,GAA4B,CAAC,CAAC,mBAAmB,CAAC,oBAAlD;;AAEA,QAAI,CAAC,mBAAmB,CAAC,SAAzB,EAAoC;AAChC;AACH;;AAED,QAAI,mBAAmB,CAAC,SAApB,KAAkC,QAAtC,EAAgD;AAC5C,WAAK,YAAL,GAAoB,mBAAmB,CAAC,KAAxC;AACH,KAFD,MAEO;AACH,UAAI,SAAS,GAAG,UAAU,CAAC,QAAX,CAAoB,mBAAmB,CAAC,SAAxC,CAAhB;;AAEA,UAAI,SAAJ,EAAe;AACX,aAAK,YAAL,GAAoB,SAAS,CAAC,SAAV,CAAoB,mBAAmB,CAAC,KAAxC,CAApB;AACH;AACJ;AACJ,GA9BM;;AA+BX,SAAA,UAAA;AAAC,CArvBD,CAAgC,iBAAhC,CAAA;;;AAuvBA,UAAU,CAAC,eAAX,CAA2B,oBAA3B,IAAmD,UAAnD","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBlockConnectionPointMode } from '../../Enums/nodeMaterialBlockConnectionPointMode';\r\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\r\nimport { Nullable } from '../../../../types';\r\nimport { Effect } from '../../../../Materials/effect';\r\nimport { Matrix, Vector2, Vector3, Vector4 } from '../../../../Maths/math.vector';\r\nimport { Scene } from '../../../../scene';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\nimport { Color3, Color4, TmpColors } from '../../../../Maths/math';\r\nimport { AnimatedInputBlockTypes } from './animatedInputBlockTypes';\r\nimport { Observable } from '../../../../Misc/observable';\r\nimport { MaterialHelper } from '../../../../Materials/materialHelper';\r\n\r\nconst remapAttributeName: { [name: string]: string }  = {\r\n    \"position2d\": \"position\",\r\n    \"particle_uv\": \"vUV\",\r\n    \"particle_color\": \"vColor\",\r\n    \"particle_texturemask\": \"textureMask\",\r\n    \"particle_positionw\": \"vPositionW\",\r\n};\r\n\r\nconst attributeInFragmentOnly: { [name: string]: boolean }  = {\r\n    \"particle_uv\": true,\r\n    \"particle_color\": true,\r\n    \"particle_texturemask\": true,\r\n    \"particle_positionw\": true,\r\n};\r\n\r\nconst attributeAsUniform: { [name: string]: boolean }  = {\r\n    \"particle_texturemask\": true,\r\n};\r\n\r\n/**\r\n * Block used to expose an input value\r\n */\r\nexport class InputBlock extends NodeMaterialBlock {\r\n    private _mode = NodeMaterialBlockConnectionPointMode.Undefined;\r\n    private _associatedVariableName: string;\r\n    private _storedValue: any;\r\n    private _valueCallback: () => any;\r\n    private _type: NodeMaterialBlockConnectionPointTypes;\r\n    private _animationType = AnimatedInputBlockTypes.None;\r\n\r\n    /** Gets or set a value used to limit the range of float values */\r\n    public min: number = 0;\r\n\r\n    /** Gets or set a value used to limit the range of float values */\r\n    public max: number = 0;\r\n\r\n    /** Gets or set a value indicating that this input can only get 0 and 1 values */\r\n    public isBoolean: boolean = false;\r\n\r\n    /** Gets or sets a value used by the Node Material editor to determine how to configure the current value if it is a matrix */\r\n    public matrixMode: number = 0;\r\n\r\n    /** @hidden */\r\n    public _systemValue: Nullable<NodeMaterialSystemValues> = null;\r\n\r\n    /** Gets or sets a boolean indicating that the value of this input will not change after a build */\r\n    public isConstant = false;\r\n\r\n    /** Gets or sets the group to use to display this block in the Inspector */\r\n    public groupInInspector = \"\";\r\n\r\n    /** Gets an observable raised when the value is changed */\r\n    public onValueChangedObservable = new Observable<InputBlock>();\r\n\r\n    /** Gets or sets a boolean indicating if content needs to be converted to gamma space (for color3/4 only) */\r\n    public convertToGammaSpace = false;\r\n\r\n    /** Gets or sets a boolean indicating if content needs to be converted to linear space (for color3/4 only) */\r\n    public convertToLinearSpace = false;\r\n\r\n    /**\r\n     * Gets or sets the connection point type (default is float)\r\n     */\r\n    public get type(): NodeMaterialBlockConnectionPointTypes {\r\n        if (this._type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\r\n            if (this.isUniform && this.value != null) {\r\n                if (!isNaN(this.value)) {\r\n                    this._type = NodeMaterialBlockConnectionPointTypes.Float;\r\n                    return this._type;\r\n                }\r\n\r\n                switch (this.value.getClassName()) {\r\n                    case \"Vector2\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\r\n                        return this._type;\r\n                    case \"Vector3\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case \"Vector4\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n                        return this._type;\r\n                    case \"Color3\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color3;\r\n                        return this._type;\r\n                    case \"Color4\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color4;\r\n                        return this._type;\r\n                    case \"Matrix\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\r\n                        return this._type;\r\n                }\r\n            }\r\n\r\n            if (this.isAttribute) {\r\n                switch (this.name) {\r\n                    case \"position\":\r\n                    case \"normal\":\r\n                    case \"tangent\":\r\n                    case \"particle_positionw\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case \"uv\":\r\n                    case \"uv2\":\r\n                    case \"position2d\":\r\n                    case \"particle_uv\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\r\n                        return this._type;\r\n                    case \"matricesIndices\":\r\n                    case \"matricesWeights\":\r\n                    case \"world0\":\r\n                    case \"world1\":\r\n                    case \"world2\":\r\n                    case \"world3\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n                        return this._type;\r\n                    case \"color\":\r\n                    case \"particle_color\":\r\n                    case \"particle_texturemask\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color4;\r\n                        return this._type;\r\n                }\r\n            }\r\n\r\n            if (this.isSystemValue) {\r\n                switch (this._systemValue) {\r\n                    case NodeMaterialSystemValues.World:\r\n                    case NodeMaterialSystemValues.WorldView:\r\n                    case NodeMaterialSystemValues.WorldViewProjection:\r\n                    case NodeMaterialSystemValues.View:\r\n                    case NodeMaterialSystemValues.ViewProjection:\r\n                    case NodeMaterialSystemValues.Projection:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.CameraPosition:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.FogColor:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color3;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.DeltaTime:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Float;\r\n                        return this._type;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputBlock\r\n     * @param name defines the block name\r\n     * @param target defines the target of that block (Vertex by default)\r\n     * @param type defines the type of the input (can be set to NodeMaterialBlockConnectionPointTypes.AutoDetect)\r\n     */\r\n    public constructor(name: string, target = NodeMaterialBlockTargets.Vertex, type: NodeMaterialBlockConnectionPointTypes = NodeMaterialBlockConnectionPointTypes.AutoDetect) {\r\n        super(name, target, false, true);\r\n\r\n        this._type = type;\r\n\r\n        this.setDefaultValue();\r\n\r\n        this.registerOutput(\"output\", type);\r\n    }\r\n\r\n    /**\r\n    * Validates if a name is a reserve word.\r\n    * @param newName the new name to be given to the node.\r\n    * @returns false if the name is a reserve word, else true.\r\n    */\r\n    public validateBlockName(newName: string) {\r\n        if (!this.isAttribute) {\r\n            return super.validateBlockName(newName);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Set the source of this connection point to a vertex attribute\r\n     * @param attributeName defines the attribute name (position, uv, normal, etc...). If not specified it will take the connection point name\r\n     * @returns the current connection point\r\n     */\r\n    public setAsAttribute(attributeName?: string): InputBlock {\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Attribute;\r\n        if (attributeName) {\r\n            this.name = attributeName;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the source of this connection point to a system value\r\n     * @param value define the system value to use (world, view, etc...) or null to switch to manual value\r\n     * @returns the current connection point\r\n     */\r\n    public setAsSystemValue(value: Nullable<NodeMaterialSystemValues>): InputBlock {\r\n        this.systemValue = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the value of that point.\r\n     * Please note that this value will be ignored if valueCallback is defined\r\n     */\r\n    public get value(): any {\r\n        return this._storedValue;\r\n    }\r\n\r\n    public set value(value: any) {\r\n        if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n            if (this.isBoolean) {\r\n                value = value ? 1 : 0;\r\n            }\r\n            else if (this.min !== this.max) {\r\n                value = Math.max(this.min, value);\r\n                value = Math.min(this.max, value);\r\n            }\r\n        }\r\n\r\n        this._storedValue = value;\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\r\n\r\n        this.onValueChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a callback used to get the value of that point.\r\n     * Please note that setting this value will force the connection point to ignore the value property\r\n     */\r\n    public get valueCallback(): () => any {\r\n        return this._valueCallback;\r\n    }\r\n\r\n    public set valueCallback(value: () => any) {\r\n        this._valueCallback = value;\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the associated variable name in the shader\r\n     */\r\n    public get associatedVariableName(): string {\r\n        return this._associatedVariableName;\r\n    }\r\n\r\n    public set associatedVariableName(value: string) {\r\n        this._associatedVariableName = value;\r\n    }\r\n\r\n    /** Gets or sets the type of animation applied to the input */\r\n    public get animationType() {\r\n        return this._animationType;\r\n    }\r\n\r\n    public set animationType(value: AnimatedInputBlockTypes) {\r\n        this._animationType = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that this connection point not defined yet\r\n     */\r\n    public get isUndefined(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is coming from an uniform.\r\n     * In this case the connection point name must be the name of the uniform to use.\r\n     * Can only be set on inputs\r\n     */\r\n    public get isUniform(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Uniform;\r\n    }\r\n\r\n    public set isUniform(value: boolean) {\r\n        this._mode = value ? NodeMaterialBlockConnectionPointMode.Uniform : NodeMaterialBlockConnectionPointMode.Undefined;\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is coming from an attribute.\r\n     * In this case the connection point name must be the name of the attribute to use\r\n     * Can only be set on inputs\r\n     */\r\n    public get isAttribute(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Attribute;\r\n    }\r\n\r\n    public set isAttribute(value: boolean) {\r\n        this._mode = value ? NodeMaterialBlockConnectionPointMode.Attribute : NodeMaterialBlockConnectionPointMode.Undefined;\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is generating a varying variable.\r\n     * Can only be set on exit points\r\n     */\r\n    public get isVarying(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Varying;\r\n    }\r\n\r\n    public set isVarying(value: boolean) {\r\n        this._mode = value ? NodeMaterialBlockConnectionPointMode.Varying : NodeMaterialBlockConnectionPointMode.Undefined;\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the current connection point is a system value\r\n     */\r\n    public get isSystemValue(): boolean {\r\n        return this._systemValue != null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current well known value or null if not defined as a system value\r\n     */\r\n    public get systemValue(): Nullable<NodeMaterialSystemValues> {\r\n        return this._systemValue;\r\n    }\r\n\r\n    public set systemValue(value: Nullable<NodeMaterialSystemValues>) {\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\r\n        this.associatedVariableName = \"\";\r\n        this._systemValue = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"InputBlock\";\r\n    }\r\n\r\n    /**\r\n     * Animate the input if animationType !== None\r\n     * @param scene defines the rendering scene\r\n     */\r\n    public animate(scene: Scene) {\r\n        switch (this._animationType) {\r\n            case AnimatedInputBlockTypes.Time: {\r\n                if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                    this.value += scene.getAnimationRatio() * 0.01;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _emitDefine(define: string): string {\r\n        if (define[0] === \"!\") {\r\n            return `#ifndef ${define.substring(1)}\\r\\n`;\r\n        }\r\n\r\n        return `#ifdef ${define}\\r\\n`;\r\n    }\r\n\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Set the input block to its default value (based on its type)\r\n     */\r\n    public setDefaultValue() {\r\n        switch (this.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                this.value = 0;\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                this.value = Vector2.Zero();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                this.value = Vector3.Zero();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                this.value = Vector4.Zero();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                this.value = Color3.White();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                this.value = new Color4(1, 1, 1, 1);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                this.value = Matrix.Identity();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _emitConstant(state: NodeMaterialBuildState) {\r\n        switch (this.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                return `${state._emitFloat(this.value)}`;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                return `vec2(${this.value.x}, ${this.value.y})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                return `vec3(${this.value.x}, ${this.value.y}, ${this.value.z})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                return `vec4(${this.value.x}, ${this.value.y}, ${this.value.z}, ${this.value.w})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0]);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0]);\r\n                }\r\n                return `vec3(${TmpColors.Color3[0].r}, ${TmpColors.Color3[0].g}, ${TmpColors.Color3[0].b})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0]);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0]);\r\n                }\r\n                return `vec4(${TmpColors.Color4[0].r}, ${TmpColors.Color4[0].g}, ${TmpColors.Color4[0].b}, ${TmpColors.Color4[0].a})`;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _noContextSwitch(): boolean {\r\n        return attributeInFragmentOnly[this.name];\r\n    }\r\n\r\n    private _emit(state: NodeMaterialBuildState, define?: string) {\r\n        // Uniforms\r\n        if (this.isUniform) {\r\n            if (!this.associatedVariableName) {\r\n                this.associatedVariableName = state._getFreeVariableName(\"u_\" + this.name);\r\n            }\r\n\r\n            if (this.isConstant) {\r\n                if (state.constants.indexOf(this.associatedVariableName) !== -1) {\r\n                    return;\r\n                }\r\n                state.constants.push(this.associatedVariableName);\r\n                state._constantDeclaration += this._declareOutput(this.output, state) + ` = ${this._emitConstant(state)};\\r\\n`;\r\n                return;\r\n            }\r\n\r\n            if (state.uniforms.indexOf(this.associatedVariableName) !== -1) {\r\n                return;\r\n            }\r\n\r\n            state.uniforms.push(this.associatedVariableName);\r\n            if (define) {\r\n                state._uniformDeclaration += this._emitDefine(define);\r\n            }\r\n            state._uniformDeclaration += `uniform ${state._getGLType(this.type)} ${this.associatedVariableName};\\r\\n`;\r\n            if (define) {\r\n                state._uniformDeclaration += `#endif\\r\\n`;\r\n            }\r\n\r\n            // well known\r\n            let hints = state.sharedData.hints;\r\n            if (this._systemValue !== null && this._systemValue !== undefined) {\r\n                switch (this._systemValue) {\r\n                    case NodeMaterialSystemValues.WorldView:\r\n                        hints.needWorldViewMatrix = true;\r\n                        break;\r\n                    case NodeMaterialSystemValues.WorldViewProjection:\r\n                        hints.needWorldViewProjectionMatrix = true;\r\n                        break;\r\n                }\r\n            } else {\r\n                if (this._animationType !== AnimatedInputBlockTypes.None) {\r\n                    state.sharedData.animatedInputs.push(this);\r\n                }\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Attribute\r\n        if (this.isAttribute) {\r\n            this.associatedVariableName = remapAttributeName[this.name] ?? this.name;\r\n\r\n            if (this.target === NodeMaterialBlockTargets.Vertex && state._vertexState) { // Attribute for fragment need to be carried over by varyings\r\n                if (attributeInFragmentOnly[this.name]) {\r\n                    if (attributeAsUniform[this.name]) {\r\n                        state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                    } else {\r\n                        state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                    }\r\n                } else {\r\n                    this._emit(state._vertexState, define);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (state.attributes.indexOf(this.associatedVariableName) !== -1) {\r\n                return;\r\n            }\r\n\r\n            state.attributes.push(this.associatedVariableName);\r\n\r\n            if (attributeInFragmentOnly[this.name]) {\r\n                if (attributeAsUniform[this.name]) {\r\n                    state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                } else {\r\n                    state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                }\r\n            } else {\r\n                if (define) {\r\n                    state._attributeDeclaration += this._emitDefine(define);\r\n                }\r\n                state._attributeDeclaration += `attribute ${state._getGLType(this.type)} ${this.associatedVariableName};\\r\\n`;\r\n                if (define) {\r\n                    state._attributeDeclaration += `#endif\\r\\n`;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _transmitWorld(effect: Effect, world: Matrix, worldView: Matrix, worldViewProjection: Matrix) {\r\n        if (!this._systemValue) {\r\n            return;\r\n        }\r\n\r\n        let variableName = this.associatedVariableName;\r\n        switch (this._systemValue) {\r\n            case NodeMaterialSystemValues.World:\r\n                effect.setMatrix(variableName, world);\r\n                break;\r\n            case NodeMaterialSystemValues.WorldView:\r\n                effect.setMatrix(variableName, worldView);\r\n                break;\r\n            case NodeMaterialSystemValues.WorldViewProjection:\r\n                effect.setMatrix(variableName, worldViewProjection);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _transmit(effect: Effect, scene: Scene) {\r\n        if (this.isAttribute) {\r\n            return;\r\n        }\r\n\r\n        let variableName = this.associatedVariableName;\r\n        if (this._systemValue) {\r\n            switch (this._systemValue) {\r\n                case NodeMaterialSystemValues.World:\r\n                case NodeMaterialSystemValues.WorldView:\r\n                case NodeMaterialSystemValues.WorldViewProjection:\r\n                    return;\r\n                case NodeMaterialSystemValues.View:\r\n                    effect.setMatrix(variableName, scene.getViewMatrix());\r\n                    break;\r\n                case NodeMaterialSystemValues.Projection:\r\n                    effect.setMatrix(variableName, scene.getProjectionMatrix());\r\n                    break;\r\n                case NodeMaterialSystemValues.ViewProjection:\r\n                    effect.setMatrix(variableName, scene.getTransformMatrix());\r\n                    break;\r\n                case NodeMaterialSystemValues.CameraPosition:\r\n                    MaterialHelper.BindEyePosition(effect, scene, variableName);\r\n                    break;\r\n                case NodeMaterialSystemValues.FogColor:\r\n                    effect.setColor3(variableName, scene.fogColor);\r\n                    break;\r\n                case NodeMaterialSystemValues.DeltaTime:\r\n                    effect.setFloat(variableName, scene.deltaTime / 1000.0);\r\n            }\r\n            return;\r\n        }\r\n\r\n        let value = this._valueCallback ? this._valueCallback() : this._storedValue;\r\n\r\n        if (value === null) {\r\n            return;\r\n        }\r\n\r\n        switch (this.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                effect.setFloat(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Int:\r\n                effect.setInt(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0]);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0]);\r\n                }\r\n                effect.setColor3(variableName, TmpColors.Color3[0]);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0]);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0]);\r\n                }\r\n                effect.setDirectColor4(variableName, TmpColors.Color4[0]);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                effect.setVector2(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                effect.setVector3(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                effect.setVector4(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                effect.setMatrix(variableName, value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (this.isUniform || this.isSystemValue) {\r\n            state.sharedData.inputBlocks.push(this);\r\n        }\r\n\r\n        this._emit(state);\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let variableName = this._codeVariableName;\r\n\r\n        if (this.isAttribute) {\r\n            return `${variableName}.setAsAttribute(\"${this.name}\");\\r\\n`;\r\n        }\r\n        if (this.isSystemValue) {\r\n            return `${variableName}.setAsSystemValue(BABYLON.NodeMaterialSystemValues.${NodeMaterialSystemValues[this._systemValue!]});\\r\\n`;\r\n        }\r\n        if (this.isUniform) {\r\n            const codes: string[] = [];\r\n\r\n            let valueString = \"\";\r\n\r\n            switch (this.type) {\r\n                case NodeMaterialBlockConnectionPointTypes.Float:\r\n                    valueString = `${this.value}`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                    valueString = `new BABYLON.Vector2(${this.value.x}, ${this.value.y})`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                    valueString = `new BABYLON.Vector3(${this.value.x}, ${this.value.y}, ${this.value.z})`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                    valueString = `new BABYLON.Vector4(${this.value.x}, ${this.value.y}, ${this.value.z}, ${this.value.w})`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                    valueString = `new BABYLON.Color3(${this.value.r}, ${this.value.g}, ${this.value.b})`;\r\n                    if (this.convertToGammaSpace) {\r\n                        valueString += \".toGammaSpace()\";\r\n                    }\r\n                    if (this.convertToLinearSpace) {\r\n                        valueString += \".toLinearSpace()\";\r\n                    }\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                    valueString = `new BABYLON.Color4(${this.value.r}, ${this.value.g}, ${this.value.b}, ${this.value.a})`;\r\n                    if (this.convertToGammaSpace) {\r\n                        valueString += \".toGammaSpace()\";\r\n                    }\r\n                    if (this.convertToLinearSpace) {\r\n                        valueString += \".toLinearSpace()\";\r\n                    }\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                    valueString = `BABYLON.Matrix.FromArray([${(this.value as Matrix).m}])`;\r\n                    break;\r\n            }\r\n\r\n            // Common Property \"Value\"\r\n            codes.push(`${variableName}.value = ${valueString}`);\r\n\r\n            // Float-Value-Specific Properties\r\n            if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                codes.push(\r\n                    `${variableName}.min = ${this.min}`,\r\n                    `${variableName}.max = ${this.max}`,\r\n                    `${variableName}.isBoolean = ${this.isBoolean}`,\r\n                    `${variableName}.matrixMode = ${this.matrixMode}`,\r\n                    `${variableName}.animationType = BABYLON.AnimatedInputBlockTypes.${AnimatedInputBlockTypes[this.animationType]}`\r\n                );\r\n            }\r\n\r\n            // Common Property \"Type\"\r\n            codes.push(\r\n                `${variableName}.isConstant = ${this.isConstant}`,\r\n            );\r\n\r\n            codes.push('');\r\n\r\n            return codes.join(';\\r\\n');\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    public dispose() {\r\n        this.onValueChangedObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    public serialize(): any {\r\n        let serializationObject = super.serialize();\r\n\r\n        serializationObject.type = this.type;\r\n        serializationObject.mode = this._mode;\r\n        serializationObject.systemValue = this._systemValue;\r\n        serializationObject.animationType = this._animationType;\r\n        serializationObject.min = this.min;\r\n        serializationObject.max = this.max;\r\n        serializationObject.isBoolean = this.isBoolean;\r\n        serializationObject.matrixMode = this.matrixMode;\r\n        serializationObject.isConstant = this.isConstant;\r\n        serializationObject.groupInInspector = this.groupInInspector;\r\n        serializationObject.convertToGammaSpace = this.convertToGammaSpace;\r\n        serializationObject.convertToLinearSpace = this.convertToLinearSpace;\r\n\r\n        if (this._storedValue != null && this._mode === NodeMaterialBlockConnectionPointMode.Uniform) {\r\n            if (this._storedValue.asArray) {\r\n                serializationObject.valueType = \"BABYLON.\" + this._storedValue.getClassName();\r\n                serializationObject.value = this._storedValue.asArray();\r\n            } else {\r\n                serializationObject.valueType = \"number\";\r\n                serializationObject.value = this._storedValue;\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        this._mode = serializationObject.mode;\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this._type = serializationObject.type;\r\n\r\n        this._systemValue = serializationObject.systemValue || serializationObject.wellKnownValue;\r\n        this._animationType = serializationObject.animationType;\r\n        this.min = serializationObject.min || 0;\r\n        this.max = serializationObject.max || 0;\r\n        this.isBoolean = !!serializationObject.isBoolean;\r\n        this.matrixMode = serializationObject.matrixMode || 0;\r\n        this.isConstant = !!serializationObject.isConstant;\r\n        this.groupInInspector = serializationObject.groupInInspector || \"\";\r\n        this.convertToGammaSpace = !!serializationObject.convertToGammaSpace;\r\n        this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\r\n\r\n        if (!serializationObject.valueType) {\r\n            return;\r\n        }\r\n\r\n        if (serializationObject.valueType === \"number\") {\r\n            this._storedValue = serializationObject.value;\r\n        } else {\r\n            let valueType = _TypeStore.GetClass(serializationObject.valueType);\r\n\r\n            if (valueType) {\r\n                this._storedValue = valueType.FromArray(serializationObject.value);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.InputBlock\"] = InputBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}