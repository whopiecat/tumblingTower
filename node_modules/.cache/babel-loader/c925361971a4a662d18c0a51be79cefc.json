{"ast":null,"code":"import { SphericalPolynomial } from \"../../../Maths/sphericalPolynomial\";\nimport { Engine } from \"../../../Engines/engine\";\nimport { DDSTools } from \"../../../Misc/dds\";\nimport { StringTools } from '../../../Misc/stringTools';\n/**\r\n * Implementation of the DDS Texture Loader.\r\n * @hidden\r\n */\n\nvar _DDSTextureLoader =\n/** @class */\nfunction () {\n  function _DDSTextureLoader() {\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\n    this.supportCascades = true;\n  }\n  /**\r\n   * This returns if the loader support the current file information.\r\n   * @param extension defines the file extension of the file being loaded\r\n   * @returns true if the loader can load the specified file\r\n   */\n\n\n  _DDSTextureLoader.prototype.canLoad = function (extension) {\n    return StringTools.EndsWith(extension, \".dds\");\n  };\n  /**\r\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param createPolynomials will be true if polynomials have been requested\r\n   * @param onLoad defines the callback to trigger once the texture is ready\r\n   * @param onError defines the callback to trigger in case of error\r\n   */\n\n\n  _DDSTextureLoader.prototype.loadCubeData = function (imgs, texture, createPolynomials, onLoad, onError) {\n    var engine = texture.getEngine();\n    var info;\n    var loadMipmap = false;\n\n    if (Array.isArray(imgs)) {\n      for (var index = 0; index < imgs.length; index++) {\n        var data_1 = imgs[index];\n        info = DDSTools.GetDDSInfo(data_1);\n        texture.width = info.width;\n        texture.height = info.height;\n        loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\n\n        engine._unpackFlipY(info.isCompressed);\n\n        DDSTools.UploadDDSLevels(engine, texture, data_1, info, loadMipmap, 6, -1, index);\n\n        if (!info.isFourCC && info.mipmapCount === 1) {\n          engine.generateMipMapsForCubemap(texture);\n        }\n      }\n    } else {\n      var data = imgs;\n      info = DDSTools.GetDDSInfo(data);\n      texture.width = info.width;\n      texture.height = info.height;\n\n      if (createPolynomials) {\n        info.sphericalPolynomial = new SphericalPolynomial();\n      }\n\n      loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\n\n      engine._unpackFlipY(info.isCompressed);\n\n      DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6);\n\n      if (!info.isFourCC && info.mipmapCount === 1) {\n        // Do not unbind as we still need to set the parameters.\n        engine.generateMipMapsForCubemap(texture, false);\n      }\n    }\n\n    engine._setCubeMapTextureParams(texture, loadMipmap);\n\n    texture.isReady = true;\n    texture.onLoadedObservable.notifyObservers(texture);\n    texture.onLoadedObservable.clear();\n\n    if (onLoad) {\n      onLoad({\n        isDDS: true,\n        width: texture.width,\n        info: info,\n        data: imgs,\n        texture: texture\n      });\n    }\n  };\n  /**\r\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param callback defines the method to call once ready to upload\r\n   */\n\n\n  _DDSTextureLoader.prototype.loadData = function (data, texture, callback) {\n    var info = DDSTools.GetDDSInfo(data);\n    var loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps && info.width >> info.mipmapCount - 1 === 1;\n    callback(info.width, info.height, loadMipmap, info.isFourCC, function () {\n      DDSTools.UploadDDSLevels(texture.getEngine(), texture, data, info, loadMipmap, 1);\n    });\n  };\n\n  return _DDSTextureLoader;\n}();\n\nexport { _DDSTextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.push(new _DDSTextureLoader());","map":{"version":3,"sources":["../../../../../sourceES6/core/Materials/Textures/Loaders/ddsTextureLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../../types\";\r\nimport { SphericalPolynomial } from \"../../../Maths/sphericalPolynomial\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { DDSTools, DDSInfo } from \"../../../Misc/dds\";\r\nimport { StringTools } from '../../../Misc/stringTools';\r\n/**\r\n * Implementation of the DDS Texture Loader.\r\n * @hidden\r\n */\r\nexport class _DDSTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = true;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string): boolean {\r\n        return StringTools.EndsWith(extension, \".dds\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    public loadCubeData(imgs: ArrayBufferView | ArrayBufferView[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>, onError: Nullable<(message?: string, exception?: any) => void>): void {\r\n        var engine = texture.getEngine() as Engine;\r\n        var info: DDSInfo | undefined;\r\n        var loadMipmap: boolean = false;\r\n        if (Array.isArray(imgs)) {\r\n            for (let index = 0; index < imgs.length; index++) {\r\n                let data = imgs[index];\r\n                info = DDSTools.GetDDSInfo(data);\r\n\r\n                texture.width = info.width;\r\n                texture.height = info.height;\r\n\r\n                loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\r\n\r\n                engine._unpackFlipY(info.isCompressed);\r\n\r\n                DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6, -1, index);\r\n\r\n                if (!info.isFourCC && info.mipmapCount === 1) {\r\n                    engine.generateMipMapsForCubemap(texture);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var data = imgs;\r\n            info = DDSTools.GetDDSInfo(data);\r\n\r\n            texture.width = info.width;\r\n            texture.height = info.height;\r\n\r\n            if (createPolynomials) {\r\n                info.sphericalPolynomial = new SphericalPolynomial();\r\n            }\r\n\r\n            loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\r\n            engine._unpackFlipY(info.isCompressed);\r\n\r\n            DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6);\r\n\r\n            if (!info.isFourCC && info.mipmapCount === 1) {\r\n                // Do not unbind as we still need to set the parameters.\r\n                engine.generateMipMapsForCubemap(texture, false);\r\n            }\r\n        }\r\n        engine._setCubeMapTextureParams(texture, loadMipmap);\r\n        texture.isReady = true;\r\n        texture.onLoadedObservable.notifyObservers(texture);\r\n        texture.onLoadedObservable.clear();\r\n\r\n        if (onLoad) {\r\n            onLoad({ isDDS: true, width: texture.width, info, data: imgs, texture });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(data: ArrayBufferView, texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void): void {\r\n        var info = DDSTools.GetDDSInfo(data);\r\n\r\n        var loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps && ((info.width >> (info.mipmapCount - 1)) === 1);\r\n        callback(info.width, info.height, loadMipmap, info.isFourCC, () => {\r\n            DDSTools.UploadDDSLevels(texture.getEngine(), texture, data, info, loadMipmap, 1);\r\n        });\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _DDSTextureLoader());\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}