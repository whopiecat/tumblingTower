{"ast":null,"code":"/**\r\n * States of the webXR experience\r\n */\nexport var WebXRState;\n\n(function (WebXRState) {\n  /**\r\n   * Transitioning to being in XR mode\r\n   */\n  WebXRState[WebXRState[\"ENTERING_XR\"] = 0] = \"ENTERING_XR\";\n  /**\r\n   * Transitioning to non XR mode\r\n   */\n\n  WebXRState[WebXRState[\"EXITING_XR\"] = 1] = \"EXITING_XR\";\n  /**\r\n   * In XR mode and presenting\r\n   */\n\n  WebXRState[WebXRState[\"IN_XR\"] = 2] = \"IN_XR\";\n  /**\r\n   * Not entered XR mode\r\n   */\n\n  WebXRState[WebXRState[\"NOT_IN_XR\"] = 3] = \"NOT_IN_XR\";\n})(WebXRState || (WebXRState = {}));\n/**\r\n * The state of the XR camera's tracking\r\n */\n\n\nexport var WebXRTrackingState;\n\n(function (WebXRTrackingState) {\n  /**\r\n   * No transformation received, device is not being tracked\r\n   */\n  WebXRTrackingState[WebXRTrackingState[\"NOT_TRACKING\"] = 0] = \"NOT_TRACKING\";\n  /**\r\n   * Tracking lost - using emulated position\r\n   */\n\n  WebXRTrackingState[WebXRTrackingState[\"TRACKING_LOST\"] = 1] = \"TRACKING_LOST\";\n  /**\r\n   * Transformation tracking works normally\r\n   */\n\n  WebXRTrackingState[WebXRTrackingState[\"TRACKING\"] = 2] = \"TRACKING\";\n})(WebXRTrackingState || (WebXRTrackingState = {}));","map":{"version":3,"sources":["../../../sourceES6/core/XR/webXRTypes.ts"],"names":[],"mappings":"AAGA;;;AAGA,OAAA,IAAY,UAAZ;;AAAA,CAAA,UAAY,UAAZ,EAAsB;AAClB;;;AAGA,EAAA,UAAA,CAAA,UAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACA;;;;AAGA,EAAA,UAAA,CAAA,UAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACA;;;;AAGA,EAAA,UAAA,CAAA,UAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA;;;;AAGA,EAAA,UAAA,CAAA,UAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACH,CAjBD,EAAY,UAAU,KAAV,UAAU,GAAA,EAAA,CAAtB;AAmBA;;;;;AAGA,OAAA,IAAY,kBAAZ;;AAAA,CAAA,UAAY,kBAAZ,EAA8B;AAC1B;;;AAGA,EAAA,kBAAA,CAAA,kBAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;AACA;;;;AAGA,EAAA,kBAAA,CAAA,kBAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA;AACA;;;;AAGA,EAAA,kBAAA,CAAA,kBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACH,CAbD,EAAY,kBAAkB,KAAlB,kBAAkB,GAAA,EAAA,CAA9B","sourcesContent":["import { Nullable } from \"../types\";\nimport { IDisposable } from \"../scene\";\n\n/**\n * States of the webXR experience\n */\nexport enum WebXRState {\n    /**\n     * Transitioning to being in XR mode\n     */\n    ENTERING_XR,\n    /**\n     * Transitioning to non XR mode\n     */\n    EXITING_XR,\n    /**\n     * In XR mode and presenting\n     */\n    IN_XR,\n    /**\n     * Not entered XR mode\n     */\n    NOT_IN_XR,\n}\n\n/**\n * The state of the XR camera's tracking\n */\nexport enum WebXRTrackingState {\n    /**\n     * No transformation received, device is not being tracked\n     */\n    NOT_TRACKING,\n    /**\n     * Tracking lost - using emulated position\n     */\n    TRACKING_LOST,\n    /**\n     * Transformation tracking works normally\n     */\n    TRACKING\n}\n\n/**\n * Abstraction of the XR render target\n */\nexport interface WebXRRenderTarget extends IDisposable {\n    /**\n     * xrpresent context of the canvas which can be used to display/mirror xr content\n     */\n    canvasContext: WebGLRenderingContext;\n\n    /**\n     * xr layer for the canvas\n     */\n    xrLayer: Nullable<XRWebGLLayer>;\n\n    /**\n     * Initializes the xr layer for the session\n     * @param xrSession xr session\n     * @returns a promise that will resolve once the XR Layer has been created\n     */\n    initializeXRLayerAsync(xrSession: XRSession): Promise<XRWebGLLayer>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}