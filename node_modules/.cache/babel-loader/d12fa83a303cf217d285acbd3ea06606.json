{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Vector2 } from \"../Maths/math.vector\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/chromaticAberration.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, SerializationHelper } from '../Misc/decorators';\n/**\r\n * The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen\r\n */\n\nvar ChromaticAberrationPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ChromaticAberrationPostProcess, _super);\n  /**\r\n   * Creates a new instance ChromaticAberrationPostProcess\r\n   * @param name The name of the effect.\r\n   * @param screenWidth The width of the screen to apply the effect on.\r\n   * @param screenHeight The height of the screen to apply the effect on.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function ChromaticAberrationPostProcess(name, screenWidth, screenHeight, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n    /**\r\n     * The amount of seperation of rgb channels (default: 30)\r\n     */\n\n\n    _this.aberrationAmount = 30;\n    /**\r\n     * The amount the effect will increase for pixels closer to the edge of the screen. (default: 0)\r\n     */\n\n    _this.radialIntensity = 0;\n    /**\r\n     * The normilized direction in which the rgb channels should be seperated. If set to 0,0 radial direction will be used. (default: Vector2(0.707,0.707))\r\n     */\n\n    _this.direction = new Vector2(0.707, 0.707);\n    /**\r\n     * The center position where the radialIntensity should be around. [0.5,0.5 is center of screen, 1,1 is top right corder] (default: Vector2(0.5 ,0.5))\r\n     */\n\n    _this.centerPosition = new Vector2(0.5, 0.5);\n    _this.screenWidth = screenWidth;\n    _this.screenHeight = screenHeight;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setFloat('chromatic_aberration', _this.aberrationAmount);\n      effect.setFloat('screen_width', screenWidth);\n      effect.setFloat('screen_height', screenHeight);\n      effect.setFloat('radialIntensity', _this.radialIntensity);\n      effect.setFloat2('direction', _this.direction.x, _this.direction.y);\n      effect.setFloat2('centerPosition', _this.centerPosition.x, _this.centerPosition.y);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"ChromaticAberrationPostProcess\" string\r\n   */\n\n\n  ChromaticAberrationPostProcess.prototype.getClassName = function () {\n    return \"ChromaticAberrationPostProcess\";\n  };\n  /** @hidden */\n\n\n  ChromaticAberrationPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new ChromaticAberrationPostProcess(parsedPostProcess.name, parsedPostProcess.screenWidth, parsedPostProcess.screenHeight, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, false);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"aberrationAmount\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"radialIntensity\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"direction\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"centerPosition\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"screenWidth\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"screenHeight\", void 0);\n\n  return ChromaticAberrationPostProcess;\n}(PostProcess);\n\nexport { ChromaticAberrationPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.ChromaticAberrationPostProcess\"] = ChromaticAberrationPostProcess;","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/chromaticAberrationPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector2 } from \"../Maths/math.vector\";\r\nimport { Nullable } from \"../types\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\n\r\nimport \"../Shaders/chromaticAberration.fragment\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { serialize, SerializationHelper } from '../Misc/decorators';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen\r\n */\r\nexport class ChromaticAberrationPostProcess extends PostProcess {\r\n    /**\r\n     * The amount of seperation of rgb channels (default: 30)\r\n     */\r\n    @serialize()\r\n    aberrationAmount = 30;\r\n\r\n    /**\r\n     * The amount the effect will increase for pixels closer to the edge of the screen. (default: 0)\r\n     */\r\n    @serialize()\r\n    radialIntensity = 0;\r\n\r\n    /**\r\n     * The normilized direction in which the rgb channels should be seperated. If set to 0,0 radial direction will be used. (default: Vector2(0.707,0.707))\r\n     */\r\n    @serialize()\r\n    direction = new Vector2(0.707, 0.707);\r\n\r\n    /**\r\n     * The center position where the radialIntensity should be around. [0.5,0.5 is center of screen, 1,1 is top right corder] (default: Vector2(0.5 ,0.5))\r\n     */\r\n    @serialize()\r\n    centerPosition = new Vector2(0.5, 0.5);\r\n\r\n    /** The width of the screen to apply the effect on */\r\n    @serialize()\r\n    screenWidth: number;\r\n\r\n    /** The height of the screen to apply the effect on */\r\n    @serialize()\r\n    screenHeight: number;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ChromaticAberrationPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ChromaticAberrationPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ChromaticAberrationPostProcess\r\n     * @param name The name of the effect.\r\n     * @param screenWidth The width of the screen to apply the effect on.\r\n     * @param screenHeight The height of the screen to apply the effect on.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string, screenWidth: number, screenHeight: number, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0, blockCompilation = false) {\r\n        super(name, \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\r\n\r\n        this.screenWidth = screenWidth;\r\n        this.screenHeight = screenHeight;\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat('chromatic_aberration', this.aberrationAmount);\r\n            effect.setFloat('screen_width', screenWidth);\r\n            effect.setFloat('screen_height', screenHeight);\r\n            effect.setFloat('radialIntensity', this.radialIntensity);\r\n            effect.setFloat2('direction', this.direction.x, this.direction.y);\r\n            effect.setFloat2('centerPosition', this.centerPosition.x, this.centerPosition.y);\r\n        });\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<ChromaticAberrationPostProcess> {\r\n        return SerializationHelper.Parse(() => {\r\n            return new ChromaticAberrationPostProcess(\r\n                parsedPostProcess.name,\r\n                parsedPostProcess.screenWidth, parsedPostProcess.screenHeight,\r\n                parsedPostProcess.options, targetCamera,\r\n                parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.reusable,\r\n                parsedPostProcess.textureType, false);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ChromaticAberrationPostProcess\"] = ChromaticAberrationPostProcess;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}