{"ast":null,"code":"import { Observable } from \"../Misc/observable\";\nimport { Logger } from \"../Misc/logger\";\nimport { Engine } from \"../Engines/engine\"; // Sets the default audio engine to Babylon.js\n\nEngine.AudioEngineFactory = function (hostElement) {\n  return new AudioEngine(hostElement);\n};\n/**\r\n * This represents the default audio engine used in babylon.\r\n * It is responsible to play, synchronize and analyse sounds throughout the  application.\r\n * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n */\n\n\nvar AudioEngine =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new audio engine.\r\n   *\r\n   * There should be only one per page as some browsers restrict the number\r\n   * of audio contexts you can create.\r\n   * @param hostElement defines the host element where to display the mute icon if necessary\r\n   */\n  function AudioEngine(hostElement) {\n    var _this = this;\n\n    if (hostElement === void 0) {\n      hostElement = null;\n    }\n\n    this._audioContext = null;\n    this._audioContextInitialized = false;\n    this._muteButton = null;\n    /**\r\n     * Gets whether the current host supports Web Audio and thus could create AudioContexts.\r\n     */\n\n    this.canUseWebAudio = false;\n    /**\r\n     * Defines if Babylon should emit a warning if WebAudio is not supported.\r\n     * @ignoreNaming\r\n     */\n\n    this.WarnedWebAudioUnsupported = false;\n    /**\r\n     * Gets whether or not mp3 are supported by your browser.\r\n     */\n\n    this.isMP3supported = false;\n    /**\r\n     * Gets whether or not ogg are supported by your browser.\r\n     */\n\n    this.isOGGsupported = false;\n    /**\r\n     * Gets whether audio has been unlocked on the device.\r\n     * Some Browsers have strong restrictions about Audio and won t autoplay unless\r\n     * a user interaction has happened.\r\n     */\n\n    this.unlocked = true;\n    /**\r\n     * Defines if the audio engine relies on a custom unlocked button.\r\n     * In this case, the embedded button will not be displayed.\r\n     */\n\n    this.useCustomUnlockedButton = false;\n    /**\r\n     * Event raised when audio has been unlocked on the browser.\r\n     */\n\n    this.onAudioUnlockedObservable = new Observable();\n    /**\r\n     * Event raised when audio has been locked on the browser.\r\n     */\n\n    this.onAudioLockedObservable = new Observable();\n    this._tryToRun = false;\n\n    this._onResize = function () {\n      _this._moveButtonToTopLeft();\n    };\n\n    if (typeof window.AudioContext !== 'undefined' || typeof window.webkitAudioContext !== 'undefined') {\n      window.AudioContext = window.AudioContext || window.webkitAudioContext;\n      this.canUseWebAudio = true;\n    }\n\n    var audioElem = document.createElement('audio');\n    this._hostElement = hostElement;\n\n    try {\n      if (audioElem && !!audioElem.canPlayType && (audioElem.canPlayType('audio/mpeg; codecs=\"mp3\"').replace(/^no$/, '') || audioElem.canPlayType('audio/mp3').replace(/^no$/, ''))) {\n        this.isMP3supported = true;\n      }\n    } catch (e) {// protect error during capability check.\n    }\n\n    try {\n      if (audioElem && !!audioElem.canPlayType && audioElem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')) {\n        this.isOGGsupported = true;\n      }\n    } catch (e) {// protect error during capability check.\n    }\n  }\n\n  Object.defineProperty(AudioEngine.prototype, \"audioContext\", {\n    /**\r\n     * Gets the current AudioContext if available.\r\n     */\n    get: function () {\n      if (!this._audioContextInitialized) {\n        this._initializeAudioContext();\n      } else {\n        if (!this.unlocked && !this._muteButton) {\n          this._displayMuteButton();\n        }\n      }\n\n      return this._audioContext;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Flags the audio engine in Locked state.\r\n   * This happens due to new browser policies preventing audio to autoplay.\r\n   */\n\n  AudioEngine.prototype.lock = function () {\n    this._triggerSuspendedState();\n  };\n  /**\r\n   * Unlocks the audio engine once a user action has been done on the dom.\r\n   * This is helpful to resume play once browser policies have been satisfied.\r\n   */\n\n\n  AudioEngine.prototype.unlock = function () {\n    this._triggerRunningState();\n  };\n\n  AudioEngine.prototype._resumeAudioContext = function () {\n    var result;\n\n    if (this._audioContext.resume !== undefined) {\n      result = this._audioContext.resume();\n    }\n\n    return result || Promise.resolve();\n  };\n\n  AudioEngine.prototype._initializeAudioContext = function () {\n    try {\n      if (this.canUseWebAudio) {\n        this._audioContext = new AudioContext(); // create a global volume gain node\n\n        this.masterGain = this._audioContext.createGain();\n        this.masterGain.gain.value = 1;\n        this.masterGain.connect(this._audioContext.destination);\n        this._audioContextInitialized = true;\n\n        if (this._audioContext.state === \"running\") {\n          // Do not wait for the promise to unlock.\n          this._triggerRunningState();\n        }\n      }\n    } catch (e) {\n      this.canUseWebAudio = false;\n      Logger.Error(\"Web Audio: \" + e.message);\n    }\n  };\n\n  AudioEngine.prototype._triggerRunningState = function () {\n    var _this = this;\n\n    if (this._tryToRun) {\n      return;\n    }\n\n    this._tryToRun = true;\n\n    this._resumeAudioContext().then(function () {\n      _this._tryToRun = false;\n\n      if (_this._muteButton) {\n        _this._hideMuteButton();\n      } // Notify users that the audio stack is unlocked/unmuted\n\n\n      _this.unlocked = true;\n\n      _this.onAudioUnlockedObservable.notifyObservers(_this);\n    }).catch(function () {\n      _this._tryToRun = false;\n      _this.unlocked = false;\n    });\n  };\n\n  AudioEngine.prototype._triggerSuspendedState = function () {\n    this.unlocked = false;\n    this.onAudioLockedObservable.notifyObservers(this);\n\n    this._displayMuteButton();\n  };\n\n  AudioEngine.prototype._displayMuteButton = function () {\n    var _this = this;\n\n    if (this.useCustomUnlockedButton || this._muteButton) {\n      return;\n    }\n\n    this._muteButton = document.createElement(\"BUTTON\");\n    this._muteButton.className = \"babylonUnmuteIcon\";\n    this._muteButton.id = \"babylonUnmuteIconBtn\";\n    this._muteButton.title = \"Unmute\";\n    var imageUrl = !window.SVGSVGElement ? \"https://cdn.babylonjs.com/Assets/audio.png\" : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2239%22%20height%3D%2232%22%20viewBox%3D%220%200%2039%2032%22%3E%3Cpath%20fill%3D%22white%22%20d%3D%22M9.625%2018.938l-0.031%200.016h-4.953q-0.016%200-0.031-0.016v-12.453q0-0.016%200.031-0.016h4.953q0.031%200%200.031%200.016v12.453zM12.125%207.688l8.719-8.703v27.453l-8.719-8.719-0.016-0.047v-9.938zM23.359%207.875l1.406-1.406%204.219%204.203%204.203-4.203%201.422%201.406-4.219%204.219%204.219%204.203-1.484%201.359-4.141-4.156-4.219%204.219-1.406-1.422%204.219-4.203z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\";\n    var css = \".babylonUnmuteIcon { position: absolute; left: 20px; top: 20px; height: 40px; width: 60px; background-color: rgba(51,51,51,0.7); background-image: url(\" + imageUrl + \");  background-size: 80%; background-repeat:no-repeat; background-position: center; background-position-y: 4px; border: none; outline: none; transition: transform 0.125s ease-out; cursor: pointer; z-index: 9999; } .babylonUnmuteIcon:hover { transform: scale(1.05) } .babylonUnmuteIcon:active { background-color: rgba(51,51,51,1) }\";\n    var style = document.createElement('style');\n    style.appendChild(document.createTextNode(css));\n    document.getElementsByTagName('head')[0].appendChild(style);\n    document.body.appendChild(this._muteButton);\n\n    this._moveButtonToTopLeft();\n\n    this._muteButton.addEventListener('touchend', function () {\n      _this._triggerRunningState();\n    }, true);\n\n    this._muteButton.addEventListener('click', function () {\n      _this._triggerRunningState();\n    }, true);\n\n    window.addEventListener(\"resize\", this._onResize);\n  };\n\n  AudioEngine.prototype._moveButtonToTopLeft = function () {\n    if (this._hostElement && this._muteButton) {\n      this._muteButton.style.top = this._hostElement.offsetTop + 20 + \"px\";\n      this._muteButton.style.left = this._hostElement.offsetLeft + 20 + \"px\";\n    }\n  };\n\n  AudioEngine.prototype._hideMuteButton = function () {\n    if (this._muteButton) {\n      document.body.removeChild(this._muteButton);\n      this._muteButton = null;\n    }\n  };\n  /**\r\n   * Destroy and release the resources associated with the audio ccontext.\r\n   */\n\n\n  AudioEngine.prototype.dispose = function () {\n    if (this.canUseWebAudio && this._audioContextInitialized) {\n      if (this._connectedAnalyser && this._audioContext) {\n        this._connectedAnalyser.stopDebugCanvas();\n\n        this._connectedAnalyser.dispose();\n\n        this.masterGain.disconnect();\n        this.masterGain.connect(this._audioContext.destination);\n        this._connectedAnalyser = null;\n      }\n\n      this.masterGain.gain.value = 1;\n    }\n\n    this.WarnedWebAudioUnsupported = false;\n\n    this._hideMuteButton();\n\n    window.removeEventListener(\"resize\", this._onResize);\n    this.onAudioUnlockedObservable.clear();\n    this.onAudioLockedObservable.clear();\n  };\n  /**\r\n   * Gets the global volume sets on the master gain.\r\n   * @returns the global volume if set or -1 otherwise\r\n   */\n\n\n  AudioEngine.prototype.getGlobalVolume = function () {\n    if (this.canUseWebAudio && this._audioContextInitialized) {\n      return this.masterGain.gain.value;\n    } else {\n      return -1;\n    }\n  };\n  /**\r\n   * Sets the global volume of your experience (sets on the master gain).\r\n   * @param newVolume Defines the new global volume of the application\r\n   */\n\n\n  AudioEngine.prototype.setGlobalVolume = function (newVolume) {\n    if (this.canUseWebAudio && this._audioContextInitialized) {\n      this.masterGain.gain.value = newVolume;\n    }\n  };\n  /**\r\n   * Connect the audio engine to an audio analyser allowing some amazing\r\n   * synchornization between the sounds/music and your visualization (VuMeter for instance).\r\n   * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-the-analyser\r\n   * @param analyser The analyser to connect to the engine\r\n   */\n\n\n  AudioEngine.prototype.connectToAnalyser = function (analyser) {\n    if (this._connectedAnalyser) {\n      this._connectedAnalyser.stopDebugCanvas();\n    }\n\n    if (this.canUseWebAudio && this._audioContextInitialized && this._audioContext) {\n      this._connectedAnalyser = analyser;\n      this.masterGain.disconnect();\n\n      this._connectedAnalyser.connectAudioNodes(this.masterGain, this._audioContext.destination);\n    }\n  };\n\n  return AudioEngine;\n}();\n\nexport { AudioEngine };","map":{"version":3,"sources":["../../../sourceES6/core/Audio/audioEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import { Analyser } from \"./analyser\";\n\nimport { Nullable } from \"../types\";\nimport { Observable } from \"../Misc/observable\";\nimport { Logger } from \"../Misc/logger\";\nimport { Engine } from \"../Engines/engine\";\nimport { IAudioEngine } from './Interfaces/IAudioEngine';\n\n// Sets the default audio engine to Babylon.js\nEngine.AudioEngineFactory = (hostElement: Nullable<HTMLElement>) => { return new AudioEngine(hostElement); };\n\n/**\n * This represents the default audio engine used in babylon.\n * It is responsible to play, synchronize and analyse sounds throughout the  application.\n * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\n */\nexport class AudioEngine implements IAudioEngine {\n    private _audioContext: Nullable<AudioContext> = null;\n    private _audioContextInitialized = false;\n    private _muteButton: Nullable<HTMLButtonElement> = null;\n    private _hostElement: Nullable<HTMLElement>;\n\n    /**\n     * Gets whether the current host supports Web Audio and thus could create AudioContexts.\n     */\n    public canUseWebAudio: boolean = false;\n\n    /**\n     * The master gain node defines the global audio volume of your audio engine.\n     */\n    public masterGain: GainNode;\n\n    /**\n     * Defines if Babylon should emit a warning if WebAudio is not supported.\n     * @ignoreNaming\n     */\n    public WarnedWebAudioUnsupported: boolean = false;\n\n    /**\n     * Gets whether or not mp3 are supported by your browser.\n     */\n    public isMP3supported: boolean = false;\n\n    /**\n     * Gets whether or not ogg are supported by your browser.\n     */\n    public isOGGsupported: boolean = false;\n\n    /**\n     * Gets whether audio has been unlocked on the device.\n     * Some Browsers have strong restrictions about Audio and won t autoplay unless\n     * a user interaction has happened.\n     */\n    public unlocked: boolean = true;\n\n    /**\n     * Defines if the audio engine relies on a custom unlocked button.\n     * In this case, the embedded button will not be displayed.\n     */\n    public useCustomUnlockedButton: boolean = false;\n\n    /**\n     * Event raised when audio has been unlocked on the browser.\n     */\n    public onAudioUnlockedObservable = new Observable<IAudioEngine>();\n\n    /**\n     * Event raised when audio has been locked on the browser.\n     */\n    public onAudioLockedObservable = new Observable<IAudioEngine>();\n\n    /**\n     * Gets the current AudioContext if available.\n     */\n    public get audioContext(): Nullable<AudioContext> {\n        if (!this._audioContextInitialized) {\n            this._initializeAudioContext();\n        }\n        else {\n            if (!this.unlocked && !this._muteButton) {\n                this._displayMuteButton();\n            }\n        }\n        return this._audioContext;\n    }\n\n    private _connectedAnalyser: Nullable<Analyser>;\n\n    /**\n     * Instantiates a new audio engine.\n     *\n     * There should be only one per page as some browsers restrict the number\n     * of audio contexts you can create.\n     * @param hostElement defines the host element where to display the mute icon if necessary\n     */\n    constructor(hostElement: Nullable<HTMLElement> = null) {\n        if (typeof window.AudioContext !== 'undefined' || typeof window.webkitAudioContext !== 'undefined') {\n            window.AudioContext = window.AudioContext || window.webkitAudioContext;\n            this.canUseWebAudio = true;\n        }\n\n        var audioElem = document.createElement('audio');\n        this._hostElement = hostElement;\n\n        try {\n            if (audioElem && !!audioElem.canPlayType && (audioElem.canPlayType('audio/mpeg; codecs=\"mp3\"').replace(/^no$/, '') ||\n                audioElem.canPlayType('audio/mp3').replace(/^no$/, ''))) {\n                this.isMP3supported = true;\n            }\n        }\n        catch (e) {\n            // protect error during capability check.\n        }\n\n        try {\n            if (audioElem && !!audioElem.canPlayType && audioElem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')) {\n                this.isOGGsupported = true;\n            }\n        }\n        catch (e) {\n            // protect error during capability check.\n        }\n    }\n\n    /**\n     * Flags the audio engine in Locked state.\n     * This happens due to new browser policies preventing audio to autoplay.\n     */\n    public lock() {\n        this._triggerSuspendedState();\n    }\n\n    /**\n     * Unlocks the audio engine once a user action has been done on the dom.\n     * This is helpful to resume play once browser policies have been satisfied.\n     */\n    public unlock() {\n        this._triggerRunningState();\n    }\n\n    private _resumeAudioContext(): Promise<void> {\n        let result: Promise<void>;\n        if (this._audioContext!.resume !== undefined) {\n            result = this._audioContext!.resume();\n        }\n        return result! || Promise.resolve();\n    }\n\n    private _initializeAudioContext() {\n        try {\n            if (this.canUseWebAudio) {\n                this._audioContext = new AudioContext();\n                // create a global volume gain node\n                this.masterGain = this._audioContext.createGain();\n                this.masterGain.gain.value = 1;\n                this.masterGain.connect(this._audioContext.destination);\n                this._audioContextInitialized = true;\n                if (this._audioContext.state === \"running\") {\n                    // Do not wait for the promise to unlock.\n                    this._triggerRunningState();\n                }\n            }\n        }\n        catch (e) {\n            this.canUseWebAudio = false;\n            Logger.Error(\"Web Audio: \" + e.message);\n        }\n    }\n\n    private _tryToRun = false;\n    private _triggerRunningState() {\n        if (this._tryToRun) {\n            return;\n        }\n        this._tryToRun = true;\n\n        this._resumeAudioContext()\n            .then(() => {\n                this._tryToRun = false;\n                if (this._muteButton) {\n                    this._hideMuteButton();\n                }\n                // Notify users that the audio stack is unlocked/unmuted\n                this.unlocked = true;\n                this.onAudioUnlockedObservable.notifyObservers(this);\n            }).catch(() => {\n                this._tryToRun = false;\n                this.unlocked = false;\n            });\n    }\n\n    private _triggerSuspendedState() {\n        this.unlocked = false;\n        this.onAudioLockedObservable.notifyObservers(this);\n        this._displayMuteButton();\n    }\n\n    private _displayMuteButton() {\n        if (this.useCustomUnlockedButton || this._muteButton) {\n            return;\n        }\n\n        this._muteButton = <HTMLButtonElement>document.createElement(\"BUTTON\");\n        this._muteButton.className = \"babylonUnmuteIcon\";\n        this._muteButton.id = \"babylonUnmuteIconBtn\";\n        this._muteButton.title = \"Unmute\";\n        const imageUrl = !window.SVGSVGElement ? \"https://cdn.babylonjs.com/Assets/audio.png\" : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2239%22%20height%3D%2232%22%20viewBox%3D%220%200%2039%2032%22%3E%3Cpath%20fill%3D%22white%22%20d%3D%22M9.625%2018.938l-0.031%200.016h-4.953q-0.016%200-0.031-0.016v-12.453q0-0.016%200.031-0.016h4.953q0.031%200%200.031%200.016v12.453zM12.125%207.688l8.719-8.703v27.453l-8.719-8.719-0.016-0.047v-9.938zM23.359%207.875l1.406-1.406%204.219%204.203%204.203-4.203%201.422%201.406-4.219%204.219%204.219%204.203-1.484%201.359-4.141-4.156-4.219%204.219-1.406-1.422%204.219-4.203z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\";\n\n        var css = \".babylonUnmuteIcon { position: absolute; left: 20px; top: 20px; height: 40px; width: 60px; background-color: rgba(51,51,51,0.7); background-image: url(\" + imageUrl + \");  background-size: 80%; background-repeat:no-repeat; background-position: center; background-position-y: 4px; border: none; outline: none; transition: transform 0.125s ease-out; cursor: pointer; z-index: 9999; } .babylonUnmuteIcon:hover { transform: scale(1.05) } .babylonUnmuteIcon:active { background-color: rgba(51,51,51,1) }\";\n\n        var style = document.createElement('style');\n        style.appendChild(document.createTextNode(css));\n        document.getElementsByTagName('head')[0].appendChild(style);\n\n        document.body.appendChild(this._muteButton);\n\n        this._moveButtonToTopLeft();\n\n        this._muteButton.addEventListener('touchend', () => {\n            this._triggerRunningState();\n        }, true);\n        this._muteButton.addEventListener('click', () => {\n            this._triggerRunningState();\n        }, true);\n\n        window.addEventListener(\"resize\", this._onResize);\n    }\n\n    private _moveButtonToTopLeft() {\n        if (this._hostElement && this._muteButton) {\n            this._muteButton.style.top = this._hostElement.offsetTop + 20 + \"px\";\n            this._muteButton.style.left = this._hostElement.offsetLeft + 20 + \"px\";\n        }\n    }\n\n    private _onResize = () => {\n        this._moveButtonToTopLeft();\n    }\n\n    private _hideMuteButton() {\n        if (this._muteButton) {\n            document.body.removeChild(this._muteButton);\n            this._muteButton = null;\n        }\n    }\n\n    /**\n     * Destroy and release the resources associated with the audio ccontext.\n     */\n    public dispose(): void {\n        if (this.canUseWebAudio && this._audioContextInitialized) {\n            if (this._connectedAnalyser && this._audioContext) {\n                this._connectedAnalyser.stopDebugCanvas();\n                this._connectedAnalyser.dispose();\n                this.masterGain.disconnect();\n                this.masterGain.connect(this._audioContext.destination);\n                this._connectedAnalyser = null;\n            }\n            this.masterGain.gain.value = 1;\n        }\n        this.WarnedWebAudioUnsupported = false;\n        this._hideMuteButton();\n        window.removeEventListener(\"resize\", this._onResize);\n\n        this.onAudioUnlockedObservable.clear();\n        this.onAudioLockedObservable.clear();\n    }\n\n    /**\n     * Gets the global volume sets on the master gain.\n     * @returns the global volume if set or -1 otherwise\n     */\n    public getGlobalVolume(): number {\n        if (this.canUseWebAudio && this._audioContextInitialized) {\n            return this.masterGain.gain.value;\n        }\n        else {\n            return -1;\n        }\n    }\n\n    /**\n     * Sets the global volume of your experience (sets on the master gain).\n     * @param newVolume Defines the new global volume of the application\n     */\n    public setGlobalVolume(newVolume: number): void {\n        if (this.canUseWebAudio && this._audioContextInitialized) {\n            this.masterGain.gain.value = newVolume;\n        }\n    }\n\n    /**\n     * Connect the audio engine to an audio analyser allowing some amazing\n     * synchornization between the sounds/music and your visualization (VuMeter for instance).\n     * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-the-analyser\n     * @param analyser The analyser to connect to the engine\n     */\n    public connectToAnalyser(analyser: Analyser): void {\n        if (this._connectedAnalyser) {\n            this._connectedAnalyser.stopDebugCanvas();\n        }\n        if (this.canUseWebAudio && this._audioContextInitialized && this._audioContext) {\n            this._connectedAnalyser = analyser;\n            this.masterGain.disconnect();\n            this._connectedAnalyser.connectAudioNodes(this.masterGain, this._audioContext.destination);\n        }\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}