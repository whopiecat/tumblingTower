{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators\";\nimport { Observable } from \"../Misc/observable\";\nimport { Tools } from \"../Misc/tools\";\nimport { Color4 } from \"../Maths/math.color\";\nimport { MaterialDefines } from \"../Materials/materialDefines\";\nimport { ColorCurves } from \"../Materials/colorCurves\";\n/**\r\n * @hidden\r\n */\n\nvar ImageProcessingConfigurationDefines =\n/** @class */\nfunction (_super) {\n  __extends(ImageProcessingConfigurationDefines, _super);\n\n  function ImageProcessingConfigurationDefines() {\n    var _this = _super.call(this) || this;\n\n    _this.IMAGEPROCESSING = false;\n    _this.VIGNETTE = false;\n    _this.VIGNETTEBLENDMODEMULTIPLY = false;\n    _this.VIGNETTEBLENDMODEOPAQUE = false;\n    _this.TONEMAPPING = false;\n    _this.TONEMAPPING_ACES = false;\n    _this.CONTRAST = false;\n    _this.COLORCURVES = false;\n    _this.COLORGRADING = false;\n    _this.COLORGRADING3D = false;\n    _this.SAMPLER3DGREENDEPTH = false;\n    _this.SAMPLER3DBGRMAP = false;\n    _this.IMAGEPROCESSINGPOSTPROCESS = false;\n    _this.EXPOSURE = false;\n\n    _this.rebuild();\n\n    return _this;\n  }\n\n  return ImageProcessingConfigurationDefines;\n}(MaterialDefines);\n\nexport { ImageProcessingConfigurationDefines };\n/**\r\n * This groups together the common properties used for image processing either in direct forward pass\r\n * or through post processing effect depending on the use of the image processing pipeline in your scene\r\n * or not.\r\n */\n\nvar ImageProcessingConfiguration =\n/** @class */\nfunction () {\n  function ImageProcessingConfiguration() {\n    /**\r\n     * Color curves setup used in the effect if colorCurvesEnabled is set to true\r\n     */\n    this.colorCurves = new ColorCurves();\n    this._colorCurvesEnabled = false;\n    this._colorGradingEnabled = false;\n    this._colorGradingWithGreenDepth = true;\n    this._colorGradingBGR = true;\n    /** @hidden */\n\n    this._exposure = 1.0;\n    this._toneMappingEnabled = false;\n    this._toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\n    this._contrast = 1.0;\n    /**\r\n     * Vignette stretch size.\r\n     */\n\n    this.vignetteStretch = 0;\n    /**\r\n     * Vignette centre X Offset.\r\n     */\n\n    this.vignetteCentreX = 0;\n    /**\r\n     * Vignette centre Y Offset.\r\n     */\n\n    this.vignetteCentreY = 0;\n    /**\r\n     * Vignette weight or intensity of the vignette effect.\r\n     */\n\n    this.vignetteWeight = 1.5;\n    /**\r\n     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\n\n    this.vignetteColor = new Color4(0, 0, 0, 0);\n    /**\r\n     * Camera field of view used by the Vignette effect.\r\n     */\n\n    this.vignetteCameraFov = 0.5;\n    this._vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\n    this._vignetteEnabled = false;\n    this._applyByPostProcess = false;\n    this._isEnabled = true;\n    /**\r\n    * An event triggered when the configuration changes and requires Shader to Update some parameters.\r\n    */\n\n    this.onUpdateParameters = new Observable();\n  }\n\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorCurvesEnabled\", {\n    /**\r\n     * Gets wether the color curves effect is enabled.\r\n     */\n    get: function () {\n      return this._colorCurvesEnabled;\n    },\n\n    /**\r\n     * Sets wether the color curves effect is enabled.\r\n     */\n    set: function (value) {\n      if (this._colorCurvesEnabled === value) {\n        return;\n      }\n\n      this._colorCurvesEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingTexture\", {\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\n    get: function () {\n      return this._colorGradingTexture;\n    },\n\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\n    set: function (value) {\n      if (this._colorGradingTexture === value) {\n        return;\n      }\n\n      this._colorGradingTexture = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingEnabled\", {\n    /**\r\n     * Gets wether the color grading effect is enabled.\r\n     */\n    get: function () {\n      return this._colorGradingEnabled;\n    },\n\n    /**\r\n     * Sets wether the color grading effect is enabled.\r\n     */\n    set: function (value) {\n      if (this._colorGradingEnabled === value) {\n        return;\n      }\n\n      this._colorGradingEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingWithGreenDepth\", {\n    /**\r\n     * Gets wether the color grading effect is using a green depth for the 3d Texture.\r\n     */\n    get: function () {\n      return this._colorGradingWithGreenDepth;\n    },\n\n    /**\r\n     * Sets wether the color grading effect is using a green depth for the 3d Texture.\r\n     */\n    set: function (value) {\n      if (this._colorGradingWithGreenDepth === value) {\n        return;\n      }\n\n      this._colorGradingWithGreenDepth = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingBGR\", {\n    /**\r\n     * Gets wether the color grading texture contains BGR values.\r\n     */\n    get: function () {\n      return this._colorGradingBGR;\n    },\n\n    /**\r\n     * Sets wether the color grading texture contains BGR values.\r\n     */\n    set: function (value) {\n      if (this._colorGradingBGR === value) {\n        return;\n      }\n\n      this._colorGradingBGR = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"exposure\", {\n    /**\r\n     * Gets the Exposure used in the effect.\r\n     */\n    get: function () {\n      return this._exposure;\n    },\n\n    /**\r\n     * Sets the Exposure used in the effect.\r\n     */\n    set: function (value) {\n      if (this._exposure === value) {\n        return;\n      }\n\n      this._exposure = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"toneMappingEnabled\", {\n    /**\r\n     * Gets wether the tone mapping effect is enabled.\r\n     */\n    get: function () {\n      return this._toneMappingEnabled;\n    },\n\n    /**\r\n     * Sets wether the tone mapping effect is enabled.\r\n     */\n    set: function (value) {\n      if (this._toneMappingEnabled === value) {\n        return;\n      }\n\n      this._toneMappingEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"toneMappingType\", {\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\n    get: function () {\n      return this._toneMappingType;\n    },\n\n    /**\r\n     * Sets the type of tone mapping effect used in BabylonJS.\r\n     */\n    set: function (value) {\n      if (this._toneMappingType === value) {\n        return;\n      }\n\n      this._toneMappingType = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"contrast\", {\n    /**\r\n     * Gets the contrast used in the effect.\r\n     */\n    get: function () {\n      return this._contrast;\n    },\n\n    /**\r\n     * Sets the contrast used in the effect.\r\n     */\n    set: function (value) {\n      if (this._contrast === value) {\n        return;\n      }\n\n      this._contrast = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"vignetteBlendMode\", {\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\n    get: function () {\n      return this._vignetteBlendMode;\n    },\n\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\n    set: function (value) {\n      if (this._vignetteBlendMode === value) {\n        return;\n      }\n\n      this._vignetteBlendMode = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"vignetteEnabled\", {\n    /**\r\n     * Gets wether the vignette effect is enabled.\r\n     */\n    get: function () {\n      return this._vignetteEnabled;\n    },\n\n    /**\r\n     * Sets wether the vignette effect is enabled.\r\n     */\n    set: function (value) {\n      if (this._vignetteEnabled === value) {\n        return;\n      }\n\n      this._vignetteEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"applyByPostProcess\", {\n    /**\r\n     * Gets wether the image processing is applied through a post process or not.\r\n     */\n    get: function () {\n      return this._applyByPostProcess;\n    },\n\n    /**\r\n     * Sets wether the image processing is applied through a post process or not.\r\n     */\n    set: function (value) {\n      if (this._applyByPostProcess === value) {\n        return;\n      }\n\n      this._applyByPostProcess = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"isEnabled\", {\n    /**\r\n     * Gets wether the image processing is enabled or not.\r\n     */\n    get: function () {\n      return this._isEnabled;\n    },\n\n    /**\r\n     * Sets wether the image processing is enabled or not.\r\n     */\n    set: function (value) {\n      if (this._isEnabled === value) {\n        return;\n      }\n\n      this._isEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Method called each time the image processing information changes requires to recompile the effect.\r\n   */\n\n  ImageProcessingConfiguration.prototype._updateParameters = function () {\n    this.onUpdateParameters.notifyObservers(this);\n  };\n  /**\r\n   * Gets the current class name.\r\n   * @return \"ImageProcessingConfiguration\"\r\n   */\n\n\n  ImageProcessingConfiguration.prototype.getClassName = function () {\n    return \"ImageProcessingConfiguration\";\n  };\n  /**\r\n   * Prepare the list of uniforms associated with the Image Processing effects.\r\n   * @param uniforms The list of uniforms used in the effect\r\n   * @param defines the list of defines currently in use\r\n   */\n\n\n  ImageProcessingConfiguration.PrepareUniforms = function (uniforms, defines) {\n    if (defines.EXPOSURE) {\n      uniforms.push(\"exposureLinear\");\n    }\n\n    if (defines.CONTRAST) {\n      uniforms.push(\"contrast\");\n    }\n\n    if (defines.COLORGRADING) {\n      uniforms.push(\"colorTransformSettings\");\n    }\n\n    if (defines.VIGNETTE) {\n      uniforms.push(\"vInverseScreenSize\");\n      uniforms.push(\"vignetteSettings1\");\n      uniforms.push(\"vignetteSettings2\");\n    }\n\n    if (defines.COLORCURVES) {\n      ColorCurves.PrepareUniforms(uniforms);\n    }\n  };\n  /**\r\n   * Prepare the list of samplers associated with the Image Processing effects.\r\n   * @param samplersList The list of uniforms used in the effect\r\n   * @param defines the list of defines currently in use\r\n   */\n\n\n  ImageProcessingConfiguration.PrepareSamplers = function (samplersList, defines) {\n    if (defines.COLORGRADING) {\n      samplersList.push(\"txColorTransform\");\n    }\n  };\n  /**\r\n   * Prepare the list of defines associated to the shader.\r\n   * @param defines the list of defines to complete\r\n   * @param forPostProcess Define if we are currently in post process mode or not\r\n   */\n\n\n  ImageProcessingConfiguration.prototype.prepareDefines = function (defines, forPostProcess) {\n    if (forPostProcess === void 0) {\n      forPostProcess = false;\n    }\n\n    if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\n      defines.VIGNETTE = false;\n      defines.TONEMAPPING = false;\n      defines.TONEMAPPING_ACES = false;\n      defines.CONTRAST = false;\n      defines.EXPOSURE = false;\n      defines.COLORCURVES = false;\n      defines.COLORGRADING = false;\n      defines.COLORGRADING3D = false;\n      defines.IMAGEPROCESSING = false;\n      defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\n      return;\n    }\n\n    defines.VIGNETTE = this.vignetteEnabled;\n    defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\n    defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\n    defines.TONEMAPPING = this.toneMappingEnabled;\n\n    switch (this._toneMappingType) {\n      case ImageProcessingConfiguration.TONEMAPPING_ACES:\n        defines.TONEMAPPING_ACES = true;\n        break;\n\n      default:\n        defines.TONEMAPPING_ACES = false;\n        break;\n    }\n\n    defines.CONTRAST = this.contrast !== 1.0;\n    defines.EXPOSURE = this.exposure !== 1.0;\n    defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\n    defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\n\n    if (defines.COLORGRADING) {\n      defines.COLORGRADING3D = this.colorGradingTexture.is3D;\n    } else {\n      defines.COLORGRADING3D = false;\n    }\n\n    defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\n    defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\n    defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\n    defines.IMAGEPROCESSING = defines.VIGNETTE || defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING;\n  };\n  /**\r\n   * Returns true if all the image processing information are ready.\r\n   * @returns True if ready, otherwise, false\r\n   */\n\n\n  ImageProcessingConfiguration.prototype.isReady = function () {\n    // Color Grading texure can not be none blocking.\n    return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\n  };\n  /**\r\n   * Binds the image processing to the shader.\r\n   * @param effect The effect to bind to\r\n   * @param overrideAspectRatio Override the aspect ratio of the effect\r\n   */\n\n\n  ImageProcessingConfiguration.prototype.bind = function (effect, overrideAspectRatio) {\n    // Color Curves\n    if (this._colorCurvesEnabled && this.colorCurves) {\n      ColorCurves.Bind(this.colorCurves, effect);\n    } // Vignette\n\n\n    if (this._vignetteEnabled) {\n      var inverseWidth = 1 / effect.getEngine().getRenderWidth();\n      var inverseHeight = 1 / effect.getEngine().getRenderHeight();\n      effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\n      var aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\n      var vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\n      var vignetteScaleX = vignetteScaleY * aspectRatio;\n      var vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\n      vignetteScaleX = Tools.Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\n      vignetteScaleY = Tools.Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\n      effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCentreX, -vignetteScaleY * this.vignetteCentreY);\n      var vignettePower = -2.0 * this.vignetteWeight;\n      effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\n    } // Exposure\n\n\n    effect.setFloat(\"exposureLinear\", this.exposure); // Contrast\n\n    effect.setFloat(\"contrast\", this.contrast); // Color transform settings\n\n    if (this.colorGradingTexture) {\n      effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\n      var textureSize = this.colorGradingTexture.getSize().height;\n      effect.setFloat4(\"colorTransformSettings\", (textureSize - 1) / textureSize, // textureScale\n      0.5 / textureSize, // textureOffset\n      textureSize, // textureSize\n      this.colorGradingTexture.level // weight\n      );\n    }\n  };\n  /**\r\n   * Clones the current image processing instance.\r\n   * @return The cloned image processing\r\n   */\n\n\n  ImageProcessingConfiguration.prototype.clone = function () {\n    return SerializationHelper.Clone(function () {\n      return new ImageProcessingConfiguration();\n    }, this);\n  };\n  /**\r\n   * Serializes the current image processing instance to a json representation.\r\n   * @return a JSON representation\r\n   */\n\n\n  ImageProcessingConfiguration.prototype.serialize = function () {\n    return SerializationHelper.Serialize(this);\n  };\n  /**\r\n   * Parses the image processing from a json representation.\r\n   * @param source the JSON source to parse\r\n   * @return The parsed image processing\r\n   */\n\n\n  ImageProcessingConfiguration.Parse = function (source) {\n    return SerializationHelper.Parse(function () {\n      return new ImageProcessingConfiguration();\n    }, source, null, null);\n  };\n\n  Object.defineProperty(ImageProcessingConfiguration, \"VIGNETTEMODE_MULTIPLY\", {\n    /**\r\n     * Used to apply the vignette as a mix with the pixel color.\r\n     */\n    get: function () {\n      return this._VIGNETTEMODE_MULTIPLY;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration, \"VIGNETTEMODE_OPAQUE\", {\n    /**\r\n     * Used to apply the vignette as a replacement of the pixel color.\r\n     */\n    get: function () {\n      return this._VIGNETTEMODE_OPAQUE;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Default tone mapping applied in BabylonJS.\r\n   */\n\n  ImageProcessingConfiguration.TONEMAPPING_STANDARD = 0;\n  /**\r\n   * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\r\n   * to other engines rendering to increase portability.\r\n   */\n\n  ImageProcessingConfiguration.TONEMAPPING_ACES = 1; // Static constants associated to the image processing.\n\n  ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY = 0;\n  ImageProcessingConfiguration._VIGNETTEMODE_OPAQUE = 1;\n\n  __decorate([serializeAsColorCurves()], ImageProcessingConfiguration.prototype, \"colorCurves\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorCurvesEnabled\", void 0);\n\n  __decorate([serializeAsTexture(\"colorGradingTexture\")], ImageProcessingConfiguration.prototype, \"_colorGradingTexture\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorGradingEnabled\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorGradingWithGreenDepth\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorGradingBGR\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_exposure\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_toneMappingEnabled\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_toneMappingType\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_contrast\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteStretch\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteCentreX\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteCentreY\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteWeight\", void 0);\n\n  __decorate([serializeAsColor4()], ImageProcessingConfiguration.prototype, \"vignetteColor\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteCameraFov\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_vignetteBlendMode\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_vignetteEnabled\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_applyByPostProcess\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_isEnabled\", void 0);\n\n  return ImageProcessingConfiguration;\n}();\n\nexport { ImageProcessingConfiguration }; // References the dependencies.\n\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;","map":{"version":3,"sources":["../../../sourceES6/core/Materials/imageProcessingConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["import { serialize, SerializationHelper, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Nullable } from \"../types\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { ColorCurves } from \"../Materials/colorCurves\";\r\n\r\n/**\r\n * Interface to follow in your material defines to integrate easily the\r\n * Image proccessing functions.\r\n * @hidden\r\n */\r\nexport interface IImageProcessingConfigurationDefines {\r\n    IMAGEPROCESSING: boolean;\r\n    VIGNETTE: boolean;\r\n    VIGNETTEBLENDMODEMULTIPLY: boolean;\r\n    VIGNETTEBLENDMODEOPAQUE: boolean;\r\n    TONEMAPPING: boolean;\r\n    TONEMAPPING_ACES: boolean;\r\n    CONTRAST: boolean;\r\n    EXPOSURE: boolean;\r\n    COLORCURVES: boolean;\r\n    COLORGRADING: boolean;\r\n    COLORGRADING3D: boolean;\r\n    SAMPLER3DGREENDEPTH: boolean;\r\n    SAMPLER3DBGRMAP: boolean;\r\n    IMAGEPROCESSINGPOSTPROCESS: boolean;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class ImageProcessingConfigurationDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public EXPOSURE = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * This groups together the common properties used for image processing either in direct forward pass\r\n * or through post processing effect depending on the use of the image processing pipeline in your scene\r\n * or not.\r\n */\r\nexport class ImageProcessingConfiguration {\r\n\r\n    /**\r\n     * Default tone mapping applied in BabylonJS.\r\n     */\r\n    public static readonly TONEMAPPING_STANDARD = 0;\r\n\r\n    /**\r\n     * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\r\n     * to other engines rendering to increase portability.\r\n     */\r\n    public static readonly TONEMAPPING_ACES = 1;\r\n\r\n    /**\r\n     * Color curves setup used in the effect if colorCurvesEnabled is set to true\r\n     */\r\n    @serializeAsColorCurves()\r\n    public colorCurves: Nullable<ColorCurves> = new ColorCurves();\r\n\r\n    @serialize()\r\n    private _colorCurvesEnabled = false;\r\n    /**\r\n     * Gets wether the color curves effect is enabled.\r\n     */\r\n    public get colorCurvesEnabled(): boolean {\r\n        return this._colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets wether the color curves effect is enabled.\r\n     */\r\n    public set colorCurvesEnabled(value: boolean) {\r\n        if (this._colorCurvesEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorCurvesEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serializeAsTexture(\"colorGradingTexture\")\r\n    private _colorGradingTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public get colorGradingTexture(): Nullable<BaseTexture> {\r\n        return this._colorGradingTexture;\r\n    }\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public set colorGradingTexture(value: Nullable<BaseTexture>) {\r\n        if (this._colorGradingTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingTexture = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingEnabled = false;\r\n    /**\r\n     * Gets wether the color grading effect is enabled.\r\n     */\r\n    public get colorGradingEnabled(): boolean {\r\n        return this._colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Sets wether the color grading effect is enabled.\r\n     */\r\n    public set colorGradingEnabled(value: boolean) {\r\n        if (this._colorGradingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingWithGreenDepth = true;\r\n    /**\r\n     * Gets wether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public get colorGradingWithGreenDepth(): boolean {\r\n        return this._colorGradingWithGreenDepth;\r\n    }\r\n    /**\r\n     * Sets wether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public set colorGradingWithGreenDepth(value: boolean) {\r\n        if (this._colorGradingWithGreenDepth === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingWithGreenDepth = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingBGR = true;\r\n    /**\r\n     * Gets wether the color grading texture contains BGR values.\r\n     */\r\n    public get colorGradingBGR(): boolean {\r\n        return this._colorGradingBGR;\r\n    }\r\n    /**\r\n     * Sets wether the color grading texture contains BGR values.\r\n     */\r\n    public set colorGradingBGR(value: boolean) {\r\n        if (this._colorGradingBGR === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingBGR = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @hidden */\r\n    @serialize()\r\n    public _exposure = 1.0;\r\n    /**\r\n     * Gets the Exposure used in the effect.\r\n     */\r\n    public get exposure(): number {\r\n        return this._exposure;\r\n    }\r\n    /**\r\n     * Sets the Exposure used in the effect.\r\n     */\r\n    public set exposure(value: number) {\r\n        if (this._exposure === value) {\r\n            return;\r\n        }\r\n\r\n        this._exposure = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingEnabled = false;\r\n    /**\r\n     * Gets wether the tone mapping effect is enabled.\r\n     */\r\n    public get toneMappingEnabled(): boolean {\r\n        return this._toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets wether the tone mapping effect is enabled.\r\n     */\r\n    public set toneMappingEnabled(value: boolean) {\r\n        if (this._toneMappingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\r\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\r\n    public get toneMappingType(): number {\r\n        return this._toneMappingType;\r\n    }\r\n    /**\r\n     * Sets the type of tone mapping effect used in BabylonJS.\r\n     */\r\n    public set toneMappingType(value: number) {\r\n        if (this._toneMappingType === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingType = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    protected _contrast = 1.0;\r\n    /**\r\n     * Gets the contrast used in the effect.\r\n     */\r\n    public get contrast(): number {\r\n        return this._contrast;\r\n    }\r\n    /**\r\n     * Sets the contrast used in the effect.\r\n     */\r\n    public set contrast(value: number) {\r\n        if (this._contrast === value) {\r\n            return;\r\n        }\r\n\r\n        this._contrast = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * Vignette stretch size.\r\n     */\r\n    @serialize()\r\n    public vignetteStretch = 0;\r\n\r\n    /**\r\n     * Vignette centre X Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCentreX = 0;\r\n\r\n    /**\r\n     * Vignette centre Y Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCentreY = 0;\r\n\r\n    /**\r\n     * Vignette weight or intensity of the vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteWeight = 1.5;\r\n\r\n    /**\r\n     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    @serializeAsColor4()\r\n    public vignetteColor: Color4 = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Camera field of view used by the Vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteCameraFov = 0.5;\r\n\r\n    @serialize()\r\n    private _vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\r\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public get vignetteBlendMode(): number {\r\n        return this._vignetteBlendMode;\r\n    }\r\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public set vignetteBlendMode(value: number) {\r\n        if (this._vignetteBlendMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteBlendMode = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _vignetteEnabled = false;\r\n    /**\r\n     * Gets wether the vignette effect is enabled.\r\n     */\r\n    public get vignetteEnabled(): boolean {\r\n        return this._vignetteEnabled;\r\n    }\r\n    /**\r\n     * Sets wether the vignette effect is enabled.\r\n     */\r\n    public set vignetteEnabled(value: boolean) {\r\n        if (this._vignetteEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _applyByPostProcess = false;\r\n    /**\r\n     * Gets wether the image processing is applied through a post process or not.\r\n     */\r\n    public get applyByPostProcess(): boolean {\r\n        return this._applyByPostProcess;\r\n    }\r\n    /**\r\n     * Sets wether the image processing is applied through a post process or not.\r\n     */\r\n    public set applyByPostProcess(value: boolean) {\r\n        if (this._applyByPostProcess === value) {\r\n            return;\r\n        }\r\n\r\n        this._applyByPostProcess = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _isEnabled = true;\r\n    /**\r\n     * Gets wether the image processing is enabled or not.\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    /**\r\n     * Sets wether the image processing is enabled or not.\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n    * An event triggered when the configuration changes and requires Shader to Update some parameters.\r\n    */\r\n    public onUpdateParameters = new Observable<ImageProcessingConfiguration>();\r\n\r\n    /**\r\n     * Method called each time the image processing information changes requires to recompile the effect.\r\n     */\r\n    protected _updateParameters(): void {\r\n        this.onUpdateParameters.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name.\r\n     * @return \"ImageProcessingConfiguration\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ImageProcessingConfiguration\";\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of uniforms associated with the Image Processing effects.\r\n     * @param uniforms The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareUniforms(uniforms: string[], defines: IImageProcessingConfigurationDefines): void {\r\n        if (defines.EXPOSURE) {\r\n            uniforms.push(\"exposureLinear\");\r\n        }\r\n        if (defines.CONTRAST) {\r\n            uniforms.push(\"contrast\");\r\n        }\r\n        if (defines.COLORGRADING) {\r\n            uniforms.push(\"colorTransformSettings\");\r\n        }\r\n        if (defines.VIGNETTE) {\r\n            uniforms.push(\"vInverseScreenSize\");\r\n            uniforms.push(\"vignetteSettings1\");\r\n            uniforms.push(\"vignetteSettings2\");\r\n        }\r\n        if (defines.COLORCURVES) {\r\n            ColorCurves.PrepareUniforms(uniforms);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of samplers associated with the Image Processing effects.\r\n     * @param samplersList The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareSamplers(samplersList: string[], defines: IImageProcessingConfigurationDefines): void {\r\n        if (defines.COLORGRADING) {\r\n            samplersList.push(\"txColorTransform\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of defines associated to the shader.\r\n     * @param defines the list of defines to complete\r\n     * @param forPostProcess Define if we are currently in post process mode or not\r\n     */\r\n    public prepareDefines(defines: IImageProcessingConfigurationDefines, forPostProcess: boolean = false): void {\r\n        if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\r\n            defines.VIGNETTE = false;\r\n            defines.TONEMAPPING = false;\r\n            defines.TONEMAPPING_ACES = false;\r\n            defines.CONTRAST = false;\r\n            defines.EXPOSURE = false;\r\n            defines.COLORCURVES = false;\r\n            defines.COLORGRADING = false;\r\n            defines.COLORGRADING3D = false;\r\n            defines.IMAGEPROCESSING = false;\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\r\n            return;\r\n        }\r\n\r\n        defines.VIGNETTE = this.vignetteEnabled;\r\n        defines.VIGNETTEBLENDMODEMULTIPLY = (this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY);\r\n        defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\r\n\r\n        defines.TONEMAPPING = this.toneMappingEnabled;\r\n        switch (this._toneMappingType) {\r\n            case ImageProcessingConfiguration.TONEMAPPING_ACES:\r\n                defines.TONEMAPPING_ACES = true;\r\n                break;\r\n            default:\r\n                defines.TONEMAPPING_ACES = false;\r\n                break;\r\n        }\r\n\r\n        defines.CONTRAST = (this.contrast !== 1.0);\r\n        defines.EXPOSURE = (this.exposure !== 1.0);\r\n        defines.COLORCURVES = (this.colorCurvesEnabled && !!this.colorCurves);\r\n        defines.COLORGRADING = (this.colorGradingEnabled && !!this.colorGradingTexture);\r\n        if (defines.COLORGRADING) {\r\n            defines.COLORGRADING3D = this.colorGradingTexture!.is3D;\r\n        } else {\r\n            defines.COLORGRADING3D = false;\r\n        }\r\n        defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\r\n        defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\r\n        defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\r\n        defines.IMAGEPROCESSING = defines.VIGNETTE || defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING;\r\n    }\r\n\r\n    /**\r\n     * Returns true if all the image processing information are ready.\r\n     * @returns True if ready, otherwise, false\r\n     */\r\n    public isReady() {\r\n        // Color Grading texure can not be none blocking.\r\n        return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\r\n    }\r\n\r\n    /**\r\n     * Binds the image processing to the shader.\r\n     * @param effect The effect to bind to\r\n     * @param overrideAspectRatio Override the aspect ratio of the effect\r\n     */\r\n    public bind(effect: Effect, overrideAspectRatio?: number): void {\r\n        // Color Curves\r\n        if (this._colorCurvesEnabled && this.colorCurves) {\r\n            ColorCurves.Bind(this.colorCurves, effect);\r\n        }\r\n\r\n        // Vignette\r\n        if (this._vignetteEnabled) {\r\n            var inverseWidth = 1 / effect.getEngine().getRenderWidth();\r\n            var inverseHeight = 1 / effect.getEngine().getRenderHeight();\r\n            effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\r\n\r\n            let aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : (inverseHeight / inverseWidth);\r\n\r\n            let vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\r\n            let vignetteScaleX = vignetteScaleY * aspectRatio;\r\n\r\n            let vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\r\n            vignetteScaleX = Tools.Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\r\n            vignetteScaleY = Tools.Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\r\n\r\n            effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCentreX, -vignetteScaleY * this.vignetteCentreY);\r\n\r\n            let vignettePower = -2.0 * this.vignetteWeight;\r\n            effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\r\n        }\r\n\r\n        // Exposure\r\n        effect.setFloat(\"exposureLinear\", this.exposure);\r\n\r\n        // Contrast\r\n        effect.setFloat(\"contrast\", this.contrast);\r\n\r\n        // Color transform settings\r\n        if (this.colorGradingTexture) {\r\n            effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\r\n            let textureSize = this.colorGradingTexture.getSize().height;\r\n\r\n            effect.setFloat4(\"colorTransformSettings\",\r\n                (textureSize - 1) / textureSize, // textureScale\r\n                0.5 / textureSize, // textureOffset\r\n                textureSize, // textureSize\r\n                this.colorGradingTexture.level // weight\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the current image processing instance.\r\n     * @return The cloned image processing\r\n     */\r\n    public clone(): ImageProcessingConfiguration {\r\n        return SerializationHelper.Clone(() => new ImageProcessingConfiguration(), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current image processing instance to a json representation.\r\n     * @return a JSON representation\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses the image processing from a json representation.\r\n     * @param source the JSON source to parse\r\n     * @return The parsed image processing\r\n     */\r\n    public static Parse(source: any): ImageProcessingConfiguration {\r\n        return SerializationHelper.Parse(() => new ImageProcessingConfiguration(), source, null, null);\r\n    }\r\n\r\n    // Static constants associated to the image processing.\r\n    private static _VIGNETTEMODE_MULTIPLY = 0;\r\n    private static _VIGNETTEMODE_OPAQUE = 1;\r\n\r\n    /**\r\n     * Used to apply the vignette as a mix with the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_MULTIPLY(): number {\r\n        return this._VIGNETTEMODE_MULTIPLY;\r\n    }\r\n\r\n    /**\r\n     * Used to apply the vignette as a replacement of the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_OPAQUE(): number {\r\n        return this._VIGNETTEMODE_OPAQUE;\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}