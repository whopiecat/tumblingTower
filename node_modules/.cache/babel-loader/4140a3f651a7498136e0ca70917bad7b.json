{"ast":null,"code":"import { SceneComponentConstants } from \"../../sceneComponent\";\nimport { PostProcessRenderPipelineManager } from \"./postProcessRenderPipelineManager\";\nimport { Scene } from \"../../scene\";\nObject.defineProperty(Scene.prototype, \"postProcessRenderPipelineManager\", {\n  get: function () {\n    if (!this._postProcessRenderPipelineManager) {\n      // Register the G Buffer component to the scene.\n      var component = this._getComponent(SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER);\n\n      if (!component) {\n        component = new PostProcessRenderPipelineManagerSceneComponent(this);\n\n        this._addComponent(component);\n      }\n\n      this._postProcessRenderPipelineManager = new PostProcessRenderPipelineManager();\n    }\n\n    return this._postProcessRenderPipelineManager;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\r\n * Defines the Render Pipeline scene component responsible to rendering pipelines\r\n */\n\nvar PostProcessRenderPipelineManagerSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function PostProcessRenderPipelineManagerSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER;\n    this.scene = scene;\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  PostProcessRenderPipelineManagerSceneComponent.prototype.register = function () {\n    this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER, this, this._gatherRenderTargets);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  PostProcessRenderPipelineManagerSceneComponent.prototype.rebuild = function () {\n    if (this.scene._postProcessRenderPipelineManager) {\n      this.scene._postProcessRenderPipelineManager._rebuild();\n    }\n  };\n  /**\r\n   * Disposes the component and the associated ressources\r\n   */\n\n\n  PostProcessRenderPipelineManagerSceneComponent.prototype.dispose = function () {\n    if (this.scene._postProcessRenderPipelineManager) {\n      this.scene._postProcessRenderPipelineManager.dispose();\n    }\n  };\n\n  PostProcessRenderPipelineManagerSceneComponent.prototype._gatherRenderTargets = function () {\n    if (this.scene._postProcessRenderPipelineManager) {\n      this.scene._postProcessRenderPipelineManager.update();\n    }\n  };\n\n  return PostProcessRenderPipelineManagerSceneComponent;\n}();\n\nexport { PostProcessRenderPipelineManagerSceneComponent };","map":{"version":3,"sources":["../../../../sourceES6/core/PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.ts"],"names":[],"mappings":"AAAA,SAA0B,uBAA1B,QAAyD,sBAAzD;AACA,SAAS,gCAAT,QAAiD,oCAAjD;AACA,SAAS,KAAT,QAAsB,aAAtB;AAgBA,MAAM,CAAC,cAAP,CAAsB,KAAK,CAAC,SAA5B,EAAuC,kCAAvC,EAA2E;AACvE,EAAA,GAAG,EAAE,YAAA;AACD,QAAI,CAAC,KAAK,iCAAV,EAA6C;AACzC;AACA,UAAI,SAAS,GAAG,KAAK,aAAL,CAAmB,uBAAuB,CAAC,qCAA3C,CAAhB;;AACA,UAAI,CAAC,SAAL,EAAgB;AACZ,QAAA,SAAS,GAAG,IAAI,8CAAJ,CAAmD,IAAnD,CAAZ;;AACA,aAAK,aAAL,CAAmB,SAAnB;AACH;;AACD,WAAK,iCAAL,GAAyC,IAAI,gCAAJ,EAAzC;AACH;;AAED,WAAO,KAAK,iCAAZ;AACH,GAbsE;AAcvE,EAAA,UAAU,EAAE,IAd2D;AAevE,EAAA,YAAY,EAAE;AAfyD,CAA3E;AAkBA;;;;AAGA,IAAA,8CAAA;AAAA;AAAA,YAAA;AAWI;;;;AAIA,WAAA,8CAAA,CAAY,KAAZ,EAAwB;AAdxB;;;AAGgB,SAAA,IAAA,GAAO,uBAAuB,CAAC,qCAA/B;AAYZ,SAAK,KAAL,GAAa,KAAb;AACH;AAED;;;;;AAGO,EAAA,8CAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACI,SAAK,KAAL,CAAW,yBAAX,CAAqC,YAArC,CAAkD,uBAAuB,CAAC,yDAA1E,EAAqI,IAArI,EAA2I,KAAK,oBAAhJ;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,8CAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,QAAI,KAAK,KAAL,CAAW,iCAAf,EAAkD;AAC9C,WAAK,KAAL,CAAW,iCAAX,CAA6C,QAA7C;AACH;AACJ,GAJM;AAMP;;;;;AAGO,EAAA,8CAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,QAAI,KAAK,KAAL,CAAW,iCAAf,EAAkD;AAC9C,WAAK,KAAL,CAAW,iCAAX,CAA6C,OAA7C;AACH;AACJ,GAJM;;AAMC,EAAA,8CAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,YAAA;AACI,QAAI,KAAK,KAAL,CAAW,iCAAf,EAAkD;AAC9C,WAAK,KAAL,CAAW,iCAAX,CAA6C,MAA7C;AACH;AACJ,GAJO;;AAKZ,SAAA,8CAAA;AAAC,CAlDD,EAAA","sourcesContent":["import { ISceneComponent, SceneComponentConstants } from \"../../sceneComponent\";\r\nimport { PostProcessRenderPipelineManager } from \"./postProcessRenderPipelineManager\";\r\nimport { Scene } from \"../../scene\";\r\n\r\ndeclare module \"../../scene\" {\r\n    export interface Scene {\r\n        /** @hidden (Backing field) */\r\n        _postProcessRenderPipelineManager: PostProcessRenderPipelineManager;\r\n\r\n        /**\r\n         * Gets the postprocess render pipeline manager\r\n         * @see https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline\r\n         * @see https://doc.babylonjs.com/how_to/using_default_rendering_pipeline\r\n         */\r\n        readonly postProcessRenderPipelineManager: PostProcessRenderPipelineManager;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"postProcessRenderPipelineManager\", {\r\n    get: function(this: Scene) {\r\n        if (!this._postProcessRenderPipelineManager) {\r\n            // Register the G Buffer component to the scene.\r\n            let component = this._getComponent(SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER) as PostProcessRenderPipelineManagerSceneComponent;\r\n            if (!component) {\r\n                component = new PostProcessRenderPipelineManagerSceneComponent(this);\r\n                this._addComponent(component);\r\n            }\r\n            this._postProcessRenderPipelineManager = new PostProcessRenderPipelineManager();\r\n        }\r\n\r\n        return this._postProcessRenderPipelineManager;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\n/**\r\n * Defines the Render Pipeline scene component responsible to rendering pipelines\r\n */\r\nexport class PostProcessRenderPipelineManagerSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER, this, this._gatherRenderTargets);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        if (this.scene._postProcessRenderPipelineManager) {\r\n            this.scene._postProcessRenderPipelineManager._rebuild();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated ressources\r\n     */\r\n    public dispose(): void {\r\n        if (this.scene._postProcessRenderPipelineManager) {\r\n            this.scene._postProcessRenderPipelineManager.dispose();\r\n        }\r\n    }\r\n\r\n    private _gatherRenderTargets(): void {\r\n        if (this.scene._postProcessRenderPipelineManager) {\r\n            this.scene._postProcessRenderPipelineManager.update();\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}