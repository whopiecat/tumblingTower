{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../Misc/typeStore';\nimport { Vector2 } from '../../../Maths/math.vector';\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../nodeMaterialDecorator\";\n/**\r\n * Block used to remap a float from a range to a new one\r\n */\n\nvar RemapBlock =\n/** @class */\nfunction (_super) {\n  __extends(RemapBlock, _super);\n  /**\r\n   * Creates a new RemapBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function RemapBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n    /**\r\n     * Gets or sets the source range\r\n     */\n\n\n    _this.sourceRange = new Vector2(-1, 1);\n    /**\r\n     * Gets or sets the target range\r\n     */\n\n    _this.targetRange = new Vector2(0, 1);\n\n    _this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerInput(\"sourceMin\", NodeMaterialBlockConnectionPointTypes.Float, true);\n\n    _this.registerInput(\"sourceMax\", NodeMaterialBlockConnectionPointTypes.Float, true);\n\n    _this.registerInput(\"targetMin\", NodeMaterialBlockConnectionPointTypes.Float, true);\n\n    _this.registerInput(\"targetMax\", NodeMaterialBlockConnectionPointTypes.Float, true);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n\n    _this._outputs[0]._typeConnectionSource = _this._inputs[0];\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  RemapBlock.prototype.getClassName = function () {\n    return \"RemapBlock\";\n  };\n\n  Object.defineProperty(RemapBlock.prototype, \"input\", {\n    /**\r\n     * Gets the input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RemapBlock.prototype, \"sourceMin\", {\n    /**\r\n     * Gets the source min input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RemapBlock.prototype, \"sourceMax\", {\n    /**\r\n     * Gets the source max input component\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RemapBlock.prototype, \"targetMin\", {\n    /**\r\n     * Gets the target min input component\r\n     */\n    get: function () {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RemapBlock.prototype, \"targetMax\", {\n    /**\r\n     * Gets the target max input component\r\n     */\n    get: function () {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RemapBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  RemapBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var output = this._outputs[0];\n    var sourceMin = this.sourceMin.isConnected ? this.sourceMin.associatedVariableName : this._writeFloat(this.sourceRange.x);\n    var sourceMax = this.sourceMax.isConnected ? this.sourceMax.associatedVariableName : this._writeFloat(this.sourceRange.y);\n    var targetMin = this.targetMin.isConnected ? this.targetMin.associatedVariableName : this._writeFloat(this.targetRange.x);\n    var targetMax = this.targetMax.isConnected ? this.targetMax.associatedVariableName : this._writeFloat(this.targetRange.y);\n    state.compilationString += this._declareOutput(output, state) + (\" = \" + targetMin + \" + (\" + this._inputs[0].associatedVariableName + \" - \" + sourceMin + \") * (\" + targetMax + \" - \" + targetMin + \") / (\" + sourceMax + \" - \" + sourceMin + \");\\r\\n\");\n    return this;\n  };\n\n  RemapBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = this._codeVariableName + \".sourceRange = new BABYLON.Vector2(\" + this.sourceRange.x + \", \" + this.sourceRange.y + \");\\r\\n\";\n    codeString += this._codeVariableName + \".targetRange = new BABYLON.Vector2(\" + this.targetRange.x + \", \" + this.targetRange.y + \");\\r\\n\";\n    return codeString;\n  };\n\n  RemapBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.sourceRange = this.sourceRange.asArray();\n    serializationObject.targetRange = this.targetRange.asArray();\n    return serializationObject;\n  };\n\n  RemapBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.sourceRange = Vector2.FromArray(serializationObject.sourceRange);\n    this.targetRange = Vector2.FromArray(serializationObject.targetRange);\n  };\n\n  __decorate([editableInPropertyPage(\"From\", PropertyTypeForEdition.Vector2)], RemapBlock.prototype, \"sourceRange\", void 0);\n\n  __decorate([editableInPropertyPage(\"To\", PropertyTypeForEdition.Vector2)], RemapBlock.prototype, \"targetRange\", void 0);\n\n  return RemapBlock;\n}(NodeMaterialBlock);\n\nexport { RemapBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.RemapBlock\"] = RemapBlock;","map":{"version":3,"sources":["../../../../../sourceES6/core/Materials/Node/Blocks/remapBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../nodeMaterialBuildState';\r\nimport { NodeMaterialConnectionPoint } from '../nodeMaterialBlockConnectionPoint';\r\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\r\nimport { _TypeStore } from '../../../Misc/typeStore';\r\nimport { Vector2 } from '../../../Maths/math.vector';\r\nimport { Scene } from '../../../scene';\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../nodeMaterialDecorator\";\r\n/**\r\n * Block used to remap a float from a range to a new one\r\n */\r\nexport class RemapBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the source range\r\n     */\r\n    @editableInPropertyPage(\"From\", PropertyTypeForEdition.Vector2)\r\n    public sourceRange = new Vector2(-1, 1);\r\n\r\n    /**\r\n     * Gets or sets the target range\r\n     */\r\n    @editableInPropertyPage(\"To\", PropertyTypeForEdition.Vector2)\r\n    public targetRange = new Vector2(0, 1);\r\n\r\n    /**\r\n     * Creates a new RemapBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"sourceMin\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"sourceMax\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"targetMin\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"targetMax\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"RemapBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the source min input component\r\n     */\r\n    public get sourceMin(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the source max input component\r\n     */\r\n    public get sourceMax(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the target min input component\r\n     */\r\n    public get targetMin(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the target max input component\r\n     */\r\n    public get targetMax(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        let output = this._outputs[0];\r\n\r\n        let sourceMin = this.sourceMin.isConnected ? this.sourceMin.associatedVariableName : this._writeFloat(this.sourceRange.x);\r\n        let sourceMax = this.sourceMax.isConnected ? this.sourceMax.associatedVariableName : this._writeFloat(this.sourceRange.y);\r\n\r\n        let targetMin = this.targetMin.isConnected ? this.targetMin.associatedVariableName : this._writeFloat(this.targetRange.x);\r\n        let targetMax = this.targetMax.isConnected ? this.targetMax.associatedVariableName : this._writeFloat(this.targetRange.y);\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${targetMin} + (${this._inputs[0].associatedVariableName} - ${sourceMin}) * (${targetMax} - ${targetMin}) / (${sourceMax} - ${sourceMin});\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        var codeString = `${this._codeVariableName}.sourceRange = new BABYLON.Vector2(${this.sourceRange.x}, ${this.sourceRange.y});\\r\\n`;\r\n\r\n        codeString += `${this._codeVariableName}.targetRange = new BABYLON.Vector2(${this.targetRange.x}, ${this.targetRange.y});\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        let serializationObject = super.serialize();\r\n\r\n        serializationObject.sourceRange = this.sourceRange.asArray();\r\n        serializationObject.targetRange = this.targetRange.asArray();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.sourceRange = Vector2.FromArray(serializationObject.sourceRange);\r\n        this.targetRange = Vector2.FromArray(serializationObject.targetRange);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.RemapBlock\"] = RemapBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}