{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\n/**\r\n * Block used to output the final color\r\n */\n\nvar FragmentOutputBlock =\n/** @class */\nfunction (_super) {\n  __extends(FragmentOutputBlock, _super);\n  /**\r\n   * Create a new FragmentOutputBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function FragmentOutputBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment, true) || this;\n\n    _this.registerInput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, true);\n\n    _this.registerInput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, true);\n\n    _this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, true);\n\n    _this.rgb.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  FragmentOutputBlock.prototype.getClassName = function () {\n    return \"FragmentOutputBlock\";\n  };\n\n  Object.defineProperty(FragmentOutputBlock.prototype, \"rgba\", {\n    /**\r\n     * Gets the rgba input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FragmentOutputBlock.prototype, \"rgb\", {\n    /**\r\n     * Gets the rgb input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FragmentOutputBlock.prototype, \"a\", {\n    /**\r\n     * Gets the a input component\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FragmentOutputBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var rgba = this.rgba;\n    var rgb = this.rgb;\n    var a = this.a;\n    state.sharedData.hints.needAlphaBlending = rgba.isConnected || a.isConnected;\n\n    if (rgba.connectedPoint) {\n      if (a.isConnected) {\n        state.compilationString += \"gl_FragColor = vec4(\" + rgba.associatedVariableName + \".rgb, \" + a.associatedVariableName + \");\\r\\n\";\n      } else {\n        state.compilationString += \"gl_FragColor = \" + rgba.associatedVariableName + \";\\r\\n\";\n      }\n    } else if (rgb.connectedPoint) {\n      var aValue = \"1.0\";\n\n      if (a.connectedPoint) {\n        aValue = a.associatedVariableName;\n      }\n\n      if (rgb.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Float) {\n        state.compilationString += \"gl_FragColor = vec4(\" + rgb.associatedVariableName + \", \" + rgb.associatedVariableName + \", \" + rgb.associatedVariableName + \", \" + aValue + \");\\r\\n\";\n      } else {\n        state.compilationString += \"gl_FragColor = vec4(\" + rgb.associatedVariableName + \", \" + aValue + \");\\r\\n\";\n      }\n    } else {\n      state.sharedData.checks.notConnectedNonOptionalInputs.push(rgba);\n    }\n\n    return this;\n  };\n\n  return FragmentOutputBlock;\n}(NodeMaterialBlock);\n\nexport { FragmentOutputBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.FragmentOutputBlock\"] = FragmentOutputBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Fragment/fragmentOutputBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\n\r\n/**\r\n * Block used to output the final color\r\n */\r\nexport class FragmentOutputBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new FragmentOutputBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment, true);\r\n\r\n        this.registerInput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, true);\r\n        this.registerInput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, true);\r\n        this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n\r\n        this.rgb.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"FragmentOutputBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba input component\r\n     */\r\n    public get rgba(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb input component\r\n     */\r\n    public get rgb(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the a input component\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        let rgba = this.rgba;\r\n        let rgb = this.rgb;\r\n        let a = this.a;\r\n        state.sharedData.hints.needAlphaBlending = rgba.isConnected || a.isConnected;\r\n\r\n        if (rgba.connectedPoint) {\r\n            if (a.isConnected) {\r\n                state.compilationString += `gl_FragColor = vec4(${rgba.associatedVariableName}.rgb, ${a.associatedVariableName});\\r\\n`;\r\n            } else {\r\n                state.compilationString += `gl_FragColor = ${rgba.associatedVariableName};\\r\\n`;\r\n            }\r\n        } else if (rgb.connectedPoint) {\r\n            let aValue = \"1.0\";\r\n\r\n            if (a.connectedPoint) {\r\n                aValue = a.associatedVariableName;\r\n            }\r\n\r\n            if (rgb.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                state.compilationString += `gl_FragColor = vec4(${rgb.associatedVariableName}, ${rgb.associatedVariableName}, ${rgb.associatedVariableName}, ${aValue});\\r\\n`;\r\n            } else {\r\n                state.compilationString += `gl_FragColor = vec4(${rgb.associatedVariableName}, ${aValue});\\r\\n`;\r\n            }\r\n        } else {\r\n            state.sharedData.checks.notConnectedNonOptionalInputs.push(rgba);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.FragmentOutputBlock\"] = FragmentOutputBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}