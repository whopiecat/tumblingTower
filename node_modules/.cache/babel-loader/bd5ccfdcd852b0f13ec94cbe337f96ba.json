{"ast":null,"code":"import { Mesh } from \"../Meshes/mesh\";\nimport { MultiMaterial } from \"../Materials/multiMaterial\";\nimport { SerializationHelper } from \"./decorators\";\nvar serializedGeometries = [];\n\nvar serializeGeometry = function (geometry, serializationGeometries) {\n  if (serializedGeometries[geometry.id]) {\n    return;\n  }\n\n  if (geometry.doNotSerialize) {\n    return;\n  }\n\n  serializationGeometries.vertexData.push(geometry.serializeVerticeData());\n  serializedGeometries[geometry.id] = true;\n};\n\nvar serializeMesh = function (mesh, serializationScene) {\n  var serializationObject = {}; // Geometry\n\n  var geometry = mesh._geometry;\n\n  if (geometry) {\n    if (!mesh.getScene().getGeometryByID(geometry.id)) {\n      // Geometry was in the memory but not added to the scene, nevertheless it's better to serialize to be able to reload the mesh with its geometry\n      serializeGeometry(geometry, serializationScene.geometries);\n    }\n  } // Custom\n\n\n  if (mesh.serialize) {\n    mesh.serialize(serializationObject);\n  }\n\n  return serializationObject;\n};\n\nvar finalizeSingleMesh = function (mesh, serializationObject) {\n  //only works if the mesh is already loaded\n  if (mesh.delayLoadState === 1 || mesh.delayLoadState === 0) {\n    //serialize material\n    if (mesh.material && !mesh.material.doNotSerialize) {\n      if (mesh.material instanceof MultiMaterial) {\n        serializationObject.multiMaterials = serializationObject.multiMaterials || [];\n        serializationObject.materials = serializationObject.materials || [];\n\n        if (!serializationObject.multiMaterials.some(function (mat) {\n          return mat.id === mesh.material.id;\n        })) {\n          serializationObject.multiMaterials.push(mesh.material.serialize());\n\n          var _loop_1 = function (submaterial) {\n            if (submaterial) {\n              if (!serializationObject.materials.some(function (mat) {\n                return mat.id === submaterial.id;\n              })) {\n                serializationObject.materials.push(submaterial.serialize());\n              }\n            }\n          };\n\n          for (var _i = 0, _a = mesh.material.subMaterials; _i < _a.length; _i++) {\n            var submaterial = _a[_i];\n\n            _loop_1(submaterial);\n          }\n        }\n      } else {\n        serializationObject.materials = serializationObject.materials || [];\n\n        if (!serializationObject.materials.some(function (mat) {\n          return mat.id === mesh.material.id;\n        })) {\n          serializationObject.materials.push(mesh.material.serialize());\n        }\n      }\n    } //serialize geometry\n\n\n    var geometry = mesh._geometry;\n\n    if (geometry) {\n      if (!serializationObject.geometries) {\n        serializationObject.geometries = {};\n        serializationObject.geometries.boxes = [];\n        serializationObject.geometries.spheres = [];\n        serializationObject.geometries.cylinders = [];\n        serializationObject.geometries.toruses = [];\n        serializationObject.geometries.grounds = [];\n        serializationObject.geometries.planes = [];\n        serializationObject.geometries.torusKnots = [];\n        serializationObject.geometries.vertexData = [];\n      }\n\n      serializeGeometry(geometry, serializationObject.geometries);\n    } // Skeletons\n\n\n    if (mesh.skeleton && !mesh.skeleton.doNotSerialize) {\n      serializationObject.skeletons = serializationObject.skeletons || [];\n      serializationObject.skeletons.push(mesh.skeleton.serialize());\n    } //serialize the actual mesh\n\n\n    serializationObject.meshes = serializationObject.meshes || [];\n    serializationObject.meshes.push(serializeMesh(mesh, serializationObject));\n  }\n};\n/**\r\n * Class used to serialize a scene into a string\r\n */\n\n\nvar SceneSerializer =\n/** @class */\nfunction () {\n  function SceneSerializer() {}\n  /**\r\n   * Clear cache used by a previous serialization\r\n   */\n\n\n  SceneSerializer.ClearCache = function () {\n    serializedGeometries = [];\n  };\n  /**\r\n   * Serialize a scene into a JSON compatible object\r\n   * @param scene defines the scene to serialize\r\n   * @returns a JSON compatible object\r\n   */\n\n\n  SceneSerializer.Serialize = function (scene) {\n    var serializationObject = {};\n    SceneSerializer.ClearCache(); // Scene\n\n    serializationObject.useDelayedTextureLoading = scene.useDelayedTextureLoading;\n    serializationObject.autoClear = scene.autoClear;\n    serializationObject.clearColor = scene.clearColor.asArray();\n    serializationObject.ambientColor = scene.ambientColor.asArray();\n    serializationObject.gravity = scene.gravity.asArray();\n    serializationObject.collisionsEnabled = scene.collisionsEnabled; // Fog\n\n    if (scene.fogMode && scene.fogMode !== 0) {\n      serializationObject.fogMode = scene.fogMode;\n      serializationObject.fogColor = scene.fogColor.asArray();\n      serializationObject.fogStart = scene.fogStart;\n      serializationObject.fogEnd = scene.fogEnd;\n      serializationObject.fogDensity = scene.fogDensity;\n    } //Physics\n\n\n    if (scene.isPhysicsEnabled()) {\n      var physicEngine = scene.getPhysicsEngine();\n\n      if (physicEngine) {\n        serializationObject.physicsEnabled = true;\n        serializationObject.physicsGravity = physicEngine.gravity.asArray();\n        serializationObject.physicsEngine = physicEngine.getPhysicsPluginName();\n      }\n    } // Metadata\n\n\n    if (scene.metadata) {\n      serializationObject.metadata = scene.metadata;\n    } // Morph targets\n\n\n    serializationObject.morphTargetManagers = [];\n\n    for (var _i = 0, _a = scene.meshes; _i < _a.length; _i++) {\n      var abstractMesh = _a[_i];\n      var manager = abstractMesh.morphTargetManager;\n\n      if (manager) {\n        serializationObject.morphTargetManagers.push(manager.serialize());\n      }\n    } // Lights\n\n\n    serializationObject.lights = [];\n    var index;\n    var light;\n\n    for (index = 0; index < scene.lights.length; index++) {\n      light = scene.lights[index];\n\n      if (!light.doNotSerialize) {\n        serializationObject.lights.push(light.serialize());\n      }\n    } // Cameras\n\n\n    serializationObject.cameras = [];\n\n    for (index = 0; index < scene.cameras.length; index++) {\n      var camera = scene.cameras[index];\n\n      if (!camera.doNotSerialize) {\n        serializationObject.cameras.push(camera.serialize());\n      }\n    }\n\n    if (scene.activeCamera) {\n      serializationObject.activeCameraID = scene.activeCamera.id;\n    } // Animations\n\n\n    SerializationHelper.AppendSerializedAnimations(scene, serializationObject); // Animation Groups\n\n    if (scene.animationGroups && scene.animationGroups.length > 0) {\n      serializationObject.animationGroups = [];\n\n      for (var animationGroupIndex = 0; animationGroupIndex < scene.animationGroups.length; animationGroupIndex++) {\n        var animationGroup = scene.animationGroups[animationGroupIndex];\n        serializationObject.animationGroups.push(animationGroup.serialize());\n      }\n    } // Reflection probes\n\n\n    if (scene.reflectionProbes && scene.reflectionProbes.length > 0) {\n      serializationObject.reflectionProbes = [];\n\n      for (index = 0; index < scene.reflectionProbes.length; index++) {\n        var reflectionProbe = scene.reflectionProbes[index];\n        serializationObject.reflectionProbes.push(reflectionProbe.serialize());\n      }\n    } // Materials\n\n\n    serializationObject.materials = [];\n    serializationObject.multiMaterials = [];\n    var material;\n\n    for (index = 0; index < scene.materials.length; index++) {\n      material = scene.materials[index];\n\n      if (!material.doNotSerialize) {\n        serializationObject.materials.push(material.serialize());\n      }\n    } // MultiMaterials\n\n\n    serializationObject.multiMaterials = [];\n\n    for (index = 0; index < scene.multiMaterials.length; index++) {\n      var multiMaterial = scene.multiMaterials[index];\n      serializationObject.multiMaterials.push(multiMaterial.serialize());\n    } // Environment texture\n\n\n    if (scene.environmentTexture) {\n      serializationObject.environmentTexture = scene.environmentTexture.name;\n    } // Environment Intensity\n\n\n    serializationObject.environmentIntensity = scene.environmentIntensity; // Skeletons\n\n    serializationObject.skeletons = [];\n\n    for (index = 0; index < scene.skeletons.length; index++) {\n      var skeleton = scene.skeletons[index];\n\n      if (!skeleton.doNotSerialize) {\n        serializationObject.skeletons.push(skeleton.serialize());\n      }\n    } // Transform nodes\n\n\n    serializationObject.transformNodes = [];\n\n    for (index = 0; index < scene.transformNodes.length; index++) {\n      if (!scene.transformNodes[index].doNotSerialize) {\n        serializationObject.transformNodes.push(scene.transformNodes[index].serialize());\n      }\n    } // Geometries\n\n\n    serializationObject.geometries = {};\n    serializationObject.geometries.boxes = [];\n    serializationObject.geometries.spheres = [];\n    serializationObject.geometries.cylinders = [];\n    serializationObject.geometries.toruses = [];\n    serializationObject.geometries.grounds = [];\n    serializationObject.geometries.planes = [];\n    serializationObject.geometries.torusKnots = [];\n    serializationObject.geometries.vertexData = [];\n    serializedGeometries = [];\n    var geometries = scene.getGeometries();\n\n    for (index = 0; index < geometries.length; index++) {\n      var geometry = geometries[index];\n\n      if (geometry.isReady()) {\n        serializeGeometry(geometry, serializationObject.geometries);\n      }\n    } // Meshes\n\n\n    serializationObject.meshes = [];\n\n    for (index = 0; index < scene.meshes.length; index++) {\n      var abstractMesh = scene.meshes[index];\n\n      if (abstractMesh instanceof Mesh) {\n        var mesh = abstractMesh;\n\n        if (!mesh.doNotSerialize) {\n          if (mesh.delayLoadState === 1 || mesh.delayLoadState === 0) {\n            serializationObject.meshes.push(serializeMesh(mesh, serializationObject));\n          }\n        }\n      }\n    } // Particles Systems\n\n\n    serializationObject.particleSystems = [];\n\n    for (index = 0; index < scene.particleSystems.length; index++) {\n      serializationObject.particleSystems.push(scene.particleSystems[index].serialize(false));\n    } // Post processes\n\n\n    serializationObject.postProcesses = [];\n\n    for (index = 0; index < scene.postProcesses.length; index++) {\n      serializationObject.postProcesses.push(scene.postProcesses[index].serialize());\n    } // Action Manager\n\n\n    if (scene.actionManager) {\n      serializationObject.actions = scene.actionManager.serialize(\"scene\");\n    } // Components\n\n\n    for (var _b = 0, _c = scene._serializableComponents; _b < _c.length; _b++) {\n      var component = _c[_b];\n      component.serialize(serializationObject);\n    }\n\n    return serializationObject;\n  };\n  /**\r\n   * Serialize a mesh into a JSON compatible object\r\n   * @param toSerialize defines the mesh to serialize\r\n   * @param withParents defines if parents must be serialized as well\r\n   * @param withChildren defines if children must be serialized as well\r\n   * @returns a JSON compatible object\r\n   */\n\n\n  SceneSerializer.SerializeMesh = function (toSerialize\n  /* Mesh || Mesh[] */\n  , withParents, withChildren) {\n    if (withParents === void 0) {\n      withParents = false;\n    }\n\n    if (withChildren === void 0) {\n      withChildren = false;\n    }\n\n    var serializationObject = {};\n    SceneSerializer.ClearCache();\n    toSerialize = toSerialize instanceof Array ? toSerialize : [toSerialize];\n\n    if (withParents || withChildren) {\n      //deliberate for loop! not for each, appended should be processed as well.\n      for (var i = 0; i < toSerialize.length; ++i) {\n        if (withChildren) {\n          toSerialize[i].getDescendants().forEach(function (node) {\n            if (node instanceof Mesh && toSerialize.indexOf(node) < 0 && !node.doNotSerialize) {\n              toSerialize.push(node);\n            }\n          });\n        } //make sure the array doesn't contain the object already\n\n\n        if (withParents && toSerialize[i].parent && toSerialize.indexOf(toSerialize[i].parent) < 0 && !toSerialize[i].parent.doNotSerialize) {\n          toSerialize.push(toSerialize[i].parent);\n        }\n      }\n    }\n\n    toSerialize.forEach(function (mesh) {\n      finalizeSingleMesh(mesh, serializationObject);\n    });\n    return serializationObject;\n  };\n\n  return SceneSerializer;\n}();\n\nexport { SceneSerializer };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/sceneSerializer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Geometry } from \"../Meshes/geometry\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\n\r\nimport { MultiMaterial } from \"../Materials/multiMaterial\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { Scene } from \"../scene\";\r\nimport { Light } from \"../Lights/light\";\r\nimport { SerializationHelper } from \"./decorators\";\r\n\r\nvar serializedGeometries: Geometry[] = [];\r\nvar serializeGeometry = (geometry: Geometry, serializationGeometries: any): any => {\r\n    if ((<any>serializedGeometries)[geometry.id]) {\r\n        return;\r\n    }\r\n\r\n    if (geometry.doNotSerialize) {\r\n        return;\r\n    }\r\n\r\n    serializationGeometries.vertexData.push(geometry.serializeVerticeData());\r\n\r\n    (<any>serializedGeometries)[geometry.id] = true;\r\n};\r\n\r\nvar serializeMesh = (mesh: Mesh, serializationScene: any): any => {\r\n    var serializationObject: any = {};\r\n\r\n    // Geometry\r\n    var geometry = mesh._geometry;\r\n    if (geometry) {\r\n        if (!mesh.getScene().getGeometryByID(geometry.id)) {\r\n            // Geometry was in the memory but not added to the scene, nevertheless it's better to serialize to be able to reload the mesh with its geometry\r\n            serializeGeometry(geometry, serializationScene.geometries);\r\n        }\r\n    }\r\n\r\n    // Custom\r\n    if (mesh.serialize) {\r\n        mesh.serialize(serializationObject);\r\n    }\r\n\r\n    return serializationObject;\r\n};\r\n\r\nvar finalizeSingleMesh = (mesh: Mesh, serializationObject: any) => {\r\n    //only works if the mesh is already loaded\r\n    if (mesh.delayLoadState === 1 || mesh.delayLoadState === 0) {\r\n        //serialize material\r\n        if (mesh.material && !mesh.material.doNotSerialize) {\r\n            if (mesh.material instanceof MultiMaterial) {\r\n                serializationObject.multiMaterials = serializationObject.multiMaterials || [];\r\n                serializationObject.materials = serializationObject.materials || [];\r\n                if (!serializationObject.multiMaterials.some((mat: Material) => (mat.id === (<Material>mesh.material).id))) {\r\n                    serializationObject.multiMaterials.push(mesh.material.serialize());\r\n                    for (let submaterial of mesh.material.subMaterials) {\r\n                        if (submaterial) {\r\n                            if (!serializationObject.materials.some((mat: Material) => (mat.id === (<Material>submaterial).id))) {\r\n                                serializationObject.materials.push(submaterial.serialize());\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                serializationObject.materials = serializationObject.materials || [];\r\n                if (!serializationObject.materials.some((mat: Material) => (mat.id === (<Material>mesh.material).id))) {\r\n                    serializationObject.materials.push(mesh.material.serialize());\r\n                }\r\n            }\r\n        }\r\n        //serialize geometry\r\n        var geometry = mesh._geometry;\r\n        if (geometry) {\r\n            if (!serializationObject.geometries) {\r\n                serializationObject.geometries = {};\r\n\r\n                serializationObject.geometries.boxes = [];\r\n                serializationObject.geometries.spheres = [];\r\n                serializationObject.geometries.cylinders = [];\r\n                serializationObject.geometries.toruses = [];\r\n                serializationObject.geometries.grounds = [];\r\n                serializationObject.geometries.planes = [];\r\n                serializationObject.geometries.torusKnots = [];\r\n                serializationObject.geometries.vertexData = [];\r\n            }\r\n\r\n            serializeGeometry(geometry, serializationObject.geometries);\r\n        }\r\n        // Skeletons\r\n        if (mesh.skeleton && !mesh.skeleton.doNotSerialize) {\r\n            serializationObject.skeletons = serializationObject.skeletons || [];\r\n            serializationObject.skeletons.push(mesh.skeleton.serialize());\r\n        }\r\n\r\n        //serialize the actual mesh\r\n        serializationObject.meshes = serializationObject.meshes || [];\r\n        serializationObject.meshes.push(serializeMesh(mesh, serializationObject));\r\n    }\r\n};\r\n\r\n/**\r\n * Class used to serialize a scene into a string\r\n */\r\nexport class SceneSerializer {\r\n    /**\r\n     * Clear cache used by a previous serialization\r\n     */\r\n    public static ClearCache(): void {\r\n        serializedGeometries = [];\r\n    }\r\n\r\n    /**\r\n     * Serialize a scene into a JSON compatible object\r\n     * @param scene defines the scene to serialize\r\n     * @returns a JSON compatible object\r\n     */\r\n    public static Serialize(scene: Scene): any {\r\n        var serializationObject: any = {};\r\n\r\n        SceneSerializer.ClearCache();\r\n\r\n        // Scene\r\n        serializationObject.useDelayedTextureLoading = scene.useDelayedTextureLoading;\r\n        serializationObject.autoClear = scene.autoClear;\r\n        serializationObject.clearColor = scene.clearColor.asArray();\r\n        serializationObject.ambientColor = scene.ambientColor.asArray();\r\n        serializationObject.gravity = scene.gravity.asArray();\r\n        serializationObject.collisionsEnabled = scene.collisionsEnabled;\r\n\r\n        // Fog\r\n        if (scene.fogMode && scene.fogMode !== 0) {\r\n            serializationObject.fogMode = scene.fogMode;\r\n            serializationObject.fogColor = scene.fogColor.asArray();\r\n            serializationObject.fogStart = scene.fogStart;\r\n            serializationObject.fogEnd = scene.fogEnd;\r\n            serializationObject.fogDensity = scene.fogDensity;\r\n        }\r\n\r\n        //Physics\r\n        if (scene.isPhysicsEnabled()) {\r\n            let physicEngine = scene.getPhysicsEngine();\r\n\r\n            if (physicEngine) {\r\n                serializationObject.physicsEnabled = true;\r\n                serializationObject.physicsGravity = physicEngine.gravity.asArray();\r\n                serializationObject.physicsEngine = physicEngine.getPhysicsPluginName();\r\n            }\r\n        }\r\n\r\n        // Metadata\r\n        if (scene.metadata) {\r\n            serializationObject.metadata = scene.metadata;\r\n        }\r\n\r\n        // Morph targets\r\n        serializationObject.morphTargetManagers = [];\r\n        for (var abstractMesh of scene.meshes) {\r\n            var manager = (<Mesh>abstractMesh).morphTargetManager;\r\n\r\n            if (manager) {\r\n                serializationObject.morphTargetManagers.push(manager.serialize());\r\n            }\r\n        }\r\n\r\n        // Lights\r\n        serializationObject.lights = [];\r\n        var index: number;\r\n        var light: Light;\r\n        for (index = 0; index < scene.lights.length; index++) {\r\n            light = scene.lights[index];\r\n\r\n            if (!light.doNotSerialize) {\r\n                serializationObject.lights.push(light.serialize());\r\n            }\r\n        }\r\n\r\n        // Cameras\r\n        serializationObject.cameras = [];\r\n        for (index = 0; index < scene.cameras.length; index++) {\r\n            var camera = scene.cameras[index];\r\n\r\n            if (!camera.doNotSerialize) {\r\n                serializationObject.cameras.push(camera.serialize());\r\n            }\r\n        }\r\n\r\n        if (scene.activeCamera) {\r\n            serializationObject.activeCameraID = scene.activeCamera.id;\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(scene, serializationObject);\r\n\r\n        // Animation Groups\r\n        if (scene.animationGroups && scene.animationGroups.length > 0) {\r\n            serializationObject.animationGroups = [];\r\n            for (var animationGroupIndex = 0; animationGroupIndex < scene.animationGroups.length; animationGroupIndex++) {\r\n                var animationGroup = scene.animationGroups[animationGroupIndex];\r\n\r\n                serializationObject.animationGroups.push(animationGroup.serialize());\r\n            }\r\n        }\r\n\r\n        // Reflection probes\r\n        if (scene.reflectionProbes && scene.reflectionProbes.length > 0) {\r\n            serializationObject.reflectionProbes = [];\r\n\r\n            for (index = 0; index < scene.reflectionProbes.length; index++) {\r\n                var reflectionProbe = scene.reflectionProbes[index];\r\n                serializationObject.reflectionProbes.push(reflectionProbe.serialize());\r\n            }\r\n        }\r\n\r\n        // Materials\r\n        serializationObject.materials = [];\r\n        serializationObject.multiMaterials = [];\r\n        var material: Material;\r\n        for (index = 0; index < scene.materials.length; index++) {\r\n            material = scene.materials[index];\r\n            if (!material.doNotSerialize) {\r\n                serializationObject.materials.push(material.serialize());\r\n            }\r\n        }\r\n\r\n        // MultiMaterials\r\n        serializationObject.multiMaterials = [];\r\n        for (index = 0; index < scene.multiMaterials.length; index++) {\r\n            var multiMaterial = scene.multiMaterials[index];\r\n            serializationObject.multiMaterials.push(multiMaterial.serialize());\r\n        }\r\n\r\n        // Environment texture\r\n        if (scene.environmentTexture) {\r\n            serializationObject.environmentTexture = scene.environmentTexture.name;\r\n        }\r\n\r\n        // Environment Intensity\r\n        serializationObject.environmentIntensity = scene.environmentIntensity;\r\n\r\n        // Skeletons\r\n        serializationObject.skeletons = [];\r\n        for (index = 0; index < scene.skeletons.length; index++) {\r\n            let skeleton = scene.skeletons[index];\r\n            if (!skeleton.doNotSerialize) {\r\n                serializationObject.skeletons.push(skeleton.serialize());\r\n            }\r\n        }\r\n\r\n        // Transform nodes\r\n        serializationObject.transformNodes = [];\r\n        for (index = 0; index < scene.transformNodes.length; index++) {\r\n            if (!scene.transformNodes[index].doNotSerialize) {\r\n                serializationObject.transformNodes.push(scene.transformNodes[index].serialize());\r\n            }\r\n        }\r\n\r\n        // Geometries\r\n        serializationObject.geometries = {};\r\n\r\n        serializationObject.geometries.boxes = [];\r\n        serializationObject.geometries.spheres = [];\r\n        serializationObject.geometries.cylinders = [];\r\n        serializationObject.geometries.toruses = [];\r\n        serializationObject.geometries.grounds = [];\r\n        serializationObject.geometries.planes = [];\r\n        serializationObject.geometries.torusKnots = [];\r\n        serializationObject.geometries.vertexData = [];\r\n\r\n        serializedGeometries = [];\r\n        var geometries = scene.getGeometries();\r\n        for (index = 0; index < geometries.length; index++) {\r\n            var geometry = geometries[index];\r\n\r\n            if (geometry.isReady()) {\r\n                serializeGeometry(geometry, serializationObject.geometries);\r\n            }\r\n        }\r\n\r\n        // Meshes\r\n        serializationObject.meshes = [];\r\n        for (index = 0; index < scene.meshes.length; index++) {\r\n            var abstractMesh = scene.meshes[index];\r\n\r\n            if (abstractMesh instanceof Mesh) {\r\n                var mesh = abstractMesh;\r\n                if (!mesh.doNotSerialize) {\r\n                    if (mesh.delayLoadState === 1 || mesh.delayLoadState === 0) {\r\n                        serializationObject.meshes.push(serializeMesh(mesh, serializationObject));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Particles Systems\r\n        serializationObject.particleSystems = [];\r\n        for (index = 0; index < scene.particleSystems.length; index++) {\r\n            serializationObject.particleSystems.push(scene.particleSystems[index].serialize(false));\r\n        }\r\n\r\n        // Post processes\r\n        serializationObject.postProcesses = [];\r\n        for (index = 0; index < scene.postProcesses.length; index++) {\r\n            serializationObject.postProcesses.push(scene.postProcesses[index].serialize());\r\n        }\r\n\r\n        // Action Manager\r\n        if (scene.actionManager) {\r\n            serializationObject.actions = scene.actionManager.serialize(\"scene\");\r\n        }\r\n\r\n        // Components\r\n        for (let component of scene._serializableComponents) {\r\n            component.serialize(serializationObject);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Serialize a mesh into a JSON compatible object\r\n     * @param toSerialize defines the mesh to serialize\r\n     * @param withParents defines if parents must be serialized as well\r\n     * @param withChildren defines if children must be serialized as well\r\n     * @returns a JSON compatible object\r\n     */\r\n    public static SerializeMesh(toSerialize: any /* Mesh || Mesh[] */, withParents: boolean = false, withChildren: boolean = false): any {\r\n        var serializationObject: any = {};\r\n\r\n        SceneSerializer.ClearCache();\r\n\r\n        toSerialize = (toSerialize instanceof Array) ? toSerialize : [toSerialize];\r\n\r\n        if (withParents || withChildren) {\r\n            //deliberate for loop! not for each, appended should be processed as well.\r\n            for (var i = 0; i < toSerialize.length; ++i) {\r\n                if (withChildren) {\r\n                    toSerialize[i].getDescendants().forEach((node: Node) => {\r\n                        if (node instanceof Mesh && (toSerialize.indexOf(node) < 0) && !node.doNotSerialize) {\r\n                            toSerialize.push(node);\r\n                        }\r\n                    });\r\n                }\r\n                //make sure the array doesn't contain the object already\r\n                if (withParents && toSerialize[i].parent && (toSerialize.indexOf(toSerialize[i].parent) < 0) && !toSerialize[i].parent.doNotSerialize) {\r\n                    toSerialize.push(toSerialize[i].parent);\r\n                }\r\n            }\r\n        }\r\n\r\n        toSerialize.forEach((mesh: Mesh) => {\r\n            finalizeSingleMesh(mesh, serializationObject);\r\n        });\r\n\r\n        return serializationObject;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}