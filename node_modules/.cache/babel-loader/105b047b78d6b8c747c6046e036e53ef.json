{"ast":null,"code":"/** @hidden */\nfunction createXMLHttpRequest() {\n  // If running in Babylon Native, then defer to the native XMLHttpRequest, which has the same public contract\n  if (typeof _native !== 'undefined' && _native.XMLHttpRequest) {\n    return new _native.XMLHttpRequest();\n  } else {\n    return new XMLHttpRequest();\n  }\n}\n/**\r\n * Extended version of XMLHttpRequest with support for customizations (headers, ...)\r\n */\n\n\nvar WebRequest =\n/** @class */\nfunction () {\n  function WebRequest() {\n    this._xhr = createXMLHttpRequest();\n  }\n\n  WebRequest.prototype._injectCustomRequestHeaders = function () {\n    for (var key in WebRequest.CustomRequestHeaders) {\n      var val = WebRequest.CustomRequestHeaders[key];\n\n      if (val) {\n        this._xhr.setRequestHeader(key, val);\n      }\n    }\n  };\n\n  Object.defineProperty(WebRequest.prototype, \"onprogress\", {\n    /**\r\n     * Gets or sets a function to be called when loading progress changes\r\n     */\n    get: function () {\n      return this._xhr.onprogress;\n    },\n    set: function (value) {\n      this._xhr.onprogress = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"readyState\", {\n    /**\r\n     * Returns client's state\r\n     */\n    get: function () {\n      return this._xhr.readyState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"status\", {\n    /**\r\n     * Returns client's status\r\n     */\n    get: function () {\n      return this._xhr.status;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"statusText\", {\n    /**\r\n     * Returns client's status as a text\r\n     */\n    get: function () {\n      return this._xhr.statusText;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"response\", {\n    /**\r\n     * Returns client's response\r\n     */\n    get: function () {\n      return this._xhr.response;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"responseURL\", {\n    /**\r\n     * Returns client's response url\r\n     */\n    get: function () {\n      return this._xhr.responseURL;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"responseText\", {\n    /**\r\n     * Returns client's response as text\r\n     */\n    get: function () {\n      return this._xhr.responseText;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"responseType\", {\n    /**\r\n     * Gets or sets the expected response type\r\n     */\n    get: function () {\n      return this._xhr.responseType;\n    },\n    set: function (value) {\n      this._xhr.responseType = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebRequest.prototype.addEventListener = function (type, listener, options) {\n    this._xhr.addEventListener(type, listener, options);\n  };\n\n  WebRequest.prototype.removeEventListener = function (type, listener, options) {\n    this._xhr.removeEventListener(type, listener, options);\n  };\n  /**\r\n   * Cancels any network activity\r\n   */\n\n\n  WebRequest.prototype.abort = function () {\n    this._xhr.abort();\n  };\n  /**\r\n   * Initiates the request. The optional argument provides the request body. The argument is ignored if request method is GET or HEAD\r\n   * @param body defines an optional request body\r\n   */\n\n\n  WebRequest.prototype.send = function (body) {\n    if (WebRequest.CustomRequestHeaders) {\n      this._injectCustomRequestHeaders();\n    }\n\n    this._xhr.send(body);\n  };\n  /**\r\n   * Sets the request method, request URL\r\n   * @param method defines the method to use (GET, POST, etc..)\r\n   * @param url defines the url to connect with\r\n   */\n\n\n  WebRequest.prototype.open = function (method, url) {\n    for (var _i = 0, _a = WebRequest.CustomRequestModifiers; _i < _a.length; _i++) {\n      var update = _a[_i];\n      update(this._xhr, url);\n    } // Clean url\n\n\n    url = url.replace(\"file:http:\", \"http:\");\n    url = url.replace(\"file:https:\", \"https:\");\n    return this._xhr.open(method, url, true);\n  };\n  /**\r\n   * Sets the value of a request header.\r\n   * @param name The name of the header whose value is to be set\r\n   * @param value The value to set as the body of the header\r\n   */\n\n\n  WebRequest.prototype.setRequestHeader = function (name, value) {\n    this._xhr.setRequestHeader(name, value);\n  };\n  /**\r\n   * Get the string containing the text of a particular header's value.\r\n   * @param name The name of the header\r\n   * @returns The string containing the text of the given header name\r\n   */\n\n\n  WebRequest.prototype.getResponseHeader = function (name) {\n    return this._xhr.getResponseHeader(name);\n  };\n  /**\r\n   * Custom HTTP Request Headers to be sent with XMLHttpRequests\r\n   * i.e. when loading files, where the server/service expects an Authorization header\r\n   */\n\n\n  WebRequest.CustomRequestHeaders = {};\n  /**\r\n   * Add callback functions in this array to update all the requests before they get sent to the network\r\n   */\n\n  WebRequest.CustomRequestModifiers = new Array();\n  return WebRequest;\n}();\n\nexport { WebRequest };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/webRequest.ts"],"names":[],"mappings":"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","sourcesContent":["import { IWebRequest } from './interfaces/iWebRequest';\r\nimport { Nullable } from '../types';\r\n\r\n/** @hidden */\r\ndeclare const _native: any;\r\n\r\n/** @hidden */\r\nfunction createXMLHttpRequest(): XMLHttpRequest {\r\n    // If running in Babylon Native, then defer to the native XMLHttpRequest, which has the same public contract\r\n    if (typeof _native !== 'undefined' && _native.XMLHttpRequest) {\r\n        return new _native.XMLHttpRequest();\r\n    } else {\r\n        return new XMLHttpRequest();\r\n    }\r\n}\r\n\r\n/**\r\n * Extended version of XMLHttpRequest with support for customizations (headers, ...)\r\n */\r\nexport class WebRequest implements IWebRequest {\r\n    private readonly _xhr = createXMLHttpRequest();\r\n\r\n    /**\r\n     * Custom HTTP Request Headers to be sent with XMLHttpRequests\r\n     * i.e. when loading files, where the server/service expects an Authorization header\r\n     */\r\n    public static CustomRequestHeaders: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Add callback functions in this array to update all the requests before they get sent to the network\r\n     */\r\n    public static CustomRequestModifiers = new Array<(request: XMLHttpRequest, url: string) => void>();\r\n\r\n    private _injectCustomRequestHeaders(): void {\r\n        for (let key in WebRequest.CustomRequestHeaders) {\r\n            const val = WebRequest.CustomRequestHeaders[key];\r\n            if (val) {\r\n                this._xhr.setRequestHeader(key, val);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a function to be called when loading progress changes\r\n     */\r\n    public get onprogress(): ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null {\r\n        return this._xhr.onprogress;\r\n    }\r\n\r\n    public set onprogress(value: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null) {\r\n        this._xhr.onprogress = value;\r\n    }\r\n\r\n    /**\r\n     * Returns client's state\r\n     */\r\n    public get readyState(): number {\r\n        return this._xhr.readyState;\r\n    }\r\n\r\n    /**\r\n     * Returns client's status\r\n     */\r\n    public get status(): number {\r\n        return this._xhr.status;\r\n    }\r\n\r\n    /**\r\n     * Returns client's status as a text\r\n     */\r\n    public get statusText(): string {\r\n        return this._xhr.statusText;\r\n    }\r\n\r\n    /**\r\n     * Returns client's response\r\n     */\r\n    public get response(): any {\r\n        return this._xhr.response;\r\n    }\r\n\r\n    /**\r\n     * Returns client's response url\r\n     */\r\n    public get responseURL(): string {\r\n        return this._xhr.responseURL;\r\n    }\r\n\r\n    /**\r\n     * Returns client's response as text\r\n     */\r\n    public get responseText(): string {\r\n        return this._xhr.responseText;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the expected response type\r\n     */\r\n    public get responseType(): XMLHttpRequestResponseType {\r\n        return this._xhr.responseType;\r\n    }\r\n\r\n    public set responseType(value: XMLHttpRequestResponseType) {\r\n        this._xhr.responseType = value;\r\n    }\r\n\r\n    /** @hidden */\r\n    public addEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;\r\n    public addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        this._xhr.addEventListener(type, listener, options);\r\n    }\r\n\r\n    /** @hidden */\r\n    public removeEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;\r\n    public removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void {\r\n        this._xhr.removeEventListener(type, listener, options);\r\n    }\r\n\r\n    /**\r\n     * Cancels any network activity\r\n     */\r\n    public abort() {\r\n        this._xhr.abort();\r\n    }\r\n\r\n    /**\r\n     * Initiates the request. The optional argument provides the request body. The argument is ignored if request method is GET or HEAD\r\n     * @param body defines an optional request body\r\n     */\r\n    public send(body?: Document | BodyInit | null): void {\r\n        if (WebRequest.CustomRequestHeaders) {\r\n            this._injectCustomRequestHeaders();\r\n        }\r\n\r\n        this._xhr.send(body);\r\n    }\r\n\r\n    /**\r\n     * Sets the request method, request URL\r\n     * @param method defines the method to use (GET, POST, etc..)\r\n     * @param url defines the url to connect with\r\n     */\r\n    public open(method: string, url: string): void {\r\n        for (var update of WebRequest.CustomRequestModifiers) {\r\n            update(this._xhr, url);\r\n        }\r\n\r\n        // Clean url\r\n        url = url.replace(\"file:http:\", \"http:\");\r\n        url = url.replace(\"file:https:\", \"https:\");\r\n\r\n        return this._xhr.open(method, url, true);\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a request header.\r\n     * @param name The name of the header whose value is to be set\r\n     * @param value The value to set as the body of the header\r\n     */\r\n    setRequestHeader(name: string, value: string): void {\r\n        this._xhr.setRequestHeader(name, value);\r\n    }\r\n\r\n    /**\r\n     * Get the string containing the text of a particular header's value.\r\n     * @param name The name of the header\r\n     * @returns The string containing the text of the given header name\r\n     */\r\n    getResponseHeader(name: string): Nullable<string> {\r\n        return this._xhr.getResponseHeader(name);\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}