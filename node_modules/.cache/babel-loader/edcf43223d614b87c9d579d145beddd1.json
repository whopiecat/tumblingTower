{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera\";\nimport { GamepadCamera } from \"../../Cameras/gamepadCamera\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Node } from \"../../node\"; // Side effect import to define the stereoscopic mode.\n\nimport \"../RigModes/stereoscopicRigMode\";\nNode.AddNodeConstructor(\"StereoscopicGamepadCamera\", function (name, scene, options) {\n  return function () {\n    return new StereoscopicGamepadCamera(name, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene);\n  };\n});\n/**\r\n * Camera used to simulate stereoscopic rendering (based on GamepadCamera)\r\n * @see https://doc.babylonjs.com/features/cameras\r\n */\n\nvar StereoscopicGamepadCamera =\n/** @class */\nfunction (_super) {\n  __extends(StereoscopicGamepadCamera, _super);\n  /**\r\n   * Creates a new StereoscopicGamepadCamera\r\n   * @param name defines camera name\r\n   * @param position defines initial position\r\n   * @param interaxialDistance defines distance between each color axis\r\n   * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\r\n   * @param scene defines the hosting scene\r\n   */\n\n\n  function StereoscopicGamepadCamera(name, position, interaxialDistance, isStereoscopicSideBySide, scene) {\n    var _this = _super.call(this, name, position, scene) || this;\n\n    _this.interaxialDistance = interaxialDistance;\n    _this.isStereoscopicSideBySide = isStereoscopicSideBySide;\n\n    _this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\n      interaxialDistance: interaxialDistance\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets camera class name\r\n   * @returns StereoscopicGamepadCamera\r\n   */\n\n\n  StereoscopicGamepadCamera.prototype.getClassName = function () {\n    return \"StereoscopicGamepadCamera\";\n  };\n\n  return StereoscopicGamepadCamera;\n}(GamepadCamera);\n\nexport { StereoscopicGamepadCamera };","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Stereoscopic/stereoscopicGamepadCamera.ts"],"names":[],"mappings":";AAAA,SAAS,MAAT,QAAuB,sBAAvB;AACA,SAAS,aAAT,QAA8B,6BAA9B;AAEA,SAAS,OAAT,QAAwB,yBAAxB;AACA,SAAS,IAAT,QAAqB,YAArB,C,CAEA;;AACA,OAAO,iCAAP;AAEA,IAAI,CAAC,kBAAL,CAAwB,2BAAxB,EAAqD,UAAC,IAAD,EAAO,KAAP,EAAc,OAAd,EAAqB;AACtE,SAAO,YAAA;AAAM,WAAA,IAAI,yBAAJ,CAA8B,IAA9B,EAAoC,OAAO,CAAC,IAAR,EAApC,EAAoD,OAAO,CAAC,mBAA5D,EAAiF,OAAO,CAAC,wBAAzF,EAAA,KAAA,CAAA;AAAyH,GAAtI;AACH,CAFD;AAIA;;;;;AAIA,IAAA,yBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+C,EAAA,SAAA,CAAA,yBAAA,EAAA,MAAA,CAAA;AAC3C;;;;;;;;;;AAQA,WAAA,yBAAA,CAAY,IAAZ,EAA0B,QAA1B,EAA6C,kBAA7C,EAAyE,wBAAzE,EAA4G,KAA5G,EAAwH;AAAxH,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,QAAZ,EAAsB,KAAtB,KAA4B,IADhC;;AAEI,IAAA,KAAI,CAAC,kBAAL,GAA0B,kBAA1B;AACA,IAAA,KAAI,CAAC,wBAAL,GAAgC,wBAAhC;;AACA,IAAA,KAAI,CAAC,gBAAL,CAAsB,wBAAwB,GAAG,MAAM,CAAC,yCAAV,GAAsD,MAAM,CAAC,+BAA3G,EAA4I;AAAE,MAAA,kBAAkB,EAAE;AAAtB,KAA5I;;;AACH;AAED;;;;;;AAIO,EAAA,yBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,2BAAP;AACH,GAFM;;AAGX,SAAA,yBAAA;AAAC,CAvBD,CAA+C,aAA/C,CAAA","sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { GamepadCamera } from \"../../Cameras/gamepadCamera\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\n\r\n// Side effect import to define the stereoscopic mode.\r\nimport \"../RigModes/stereoscopicRigMode\";\r\n\r\nNode.AddNodeConstructor(\"StereoscopicGamepadCamera\", (name, scene, options) => {\r\n    return () => new StereoscopicGamepadCamera(name, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate stereoscopic rendering (based on GamepadCamera)\r\n * @see https://doc.babylonjs.com/features/cameras\r\n */\r\nexport class StereoscopicGamepadCamera extends GamepadCamera {\r\n    /**\r\n     * Creates a new StereoscopicGamepadCamera\r\n     * @param name defines camera name\r\n     * @param position defines initial position\r\n     * @param interaxialDistance defines distance between each color axis\r\n     * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, position: Vector3, interaxialDistance: number, isStereoscopicSideBySide: boolean, scene: Scene) {\r\n        super(name, position, scene);\r\n        this.interaxialDistance = interaxialDistance;\r\n        this.isStereoscopicSideBySide = isStereoscopicSideBySide;\r\n        this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, { interaxialDistance: interaxialDistance });\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns StereoscopicGamepadCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"StereoscopicGamepadCamera\";\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}