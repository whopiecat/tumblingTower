{"ast":null,"code":"import { Mesh } from \"../Meshes/mesh\";\nimport { BoxBuilder } from \"../Meshes/Builders/boxBuilder\";\nimport { SphereBuilder } from \"../Meshes/Builders/sphereBuilder\";\nimport { Quaternion, Vector3 } from \"../Maths/math.vector\";\nimport { Color3 } from '../Maths/math.color';\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\nimport { PhysicsImpostor } from \"../Physics/physicsImpostor\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\nimport { CylinderBuilder } from '../Meshes/Builders/cylinderBuilder';\n/**\r\n     * Used to show the physics impostor around the specific mesh\r\n     */\n\nvar PhysicsViewer =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new PhysicsViewer\r\n   * @param scene defines the hosting scene\r\n   */\n  function PhysicsViewer(scene) {\n    /** @hidden */\n    this._impostors = [];\n    /** @hidden */\n\n    this._meshes = [];\n    /** @hidden */\n\n    this._numMeshes = 0;\n    this._debugMeshMeshes = new Array();\n    this._scene = scene || EngineStore.LastCreatedScene;\n\n    var physicEngine = this._scene.getPhysicsEngine();\n\n    if (physicEngine) {\n      this._physicsEnginePlugin = physicEngine.getPhysicsPlugin();\n    }\n\n    this._utilityLayer = new UtilityLayerRenderer(this._scene, false);\n    this._utilityLayer.pickUtilitySceneFirst = false;\n    this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = true;\n  }\n  /** @hidden */\n\n\n  PhysicsViewer.prototype._updateDebugMeshes = function () {\n    var plugin = this._physicsEnginePlugin;\n\n    for (var i = 0; i < this._numMeshes; i++) {\n      var impostor = this._impostors[i];\n\n      if (!impostor) {\n        continue;\n      }\n\n      if (impostor.isDisposed) {\n        this.hideImpostor(this._impostors[i--]);\n      } else {\n        if (impostor.type === PhysicsImpostor.MeshImpostor) {\n          continue;\n        }\n\n        var mesh = this._meshes[i];\n\n        if (mesh && plugin) {\n          plugin.syncMeshWithImpostor(mesh, impostor);\n        }\n      }\n    }\n  };\n  /**\r\n   * Renders a specified physic impostor\r\n   * @param impostor defines the impostor to render\r\n   * @param targetMesh defines the mesh represented by the impostor\r\n   * @returns the new debug mesh used to render the impostor\r\n   */\n\n\n  PhysicsViewer.prototype.showImpostor = function (impostor, targetMesh) {\n    if (!this._scene) {\n      return null;\n    }\n\n    for (var i = 0; i < this._numMeshes; i++) {\n      if (this._impostors[i] == impostor) {\n        return null;\n      }\n    }\n\n    var debugMesh = this._getDebugMesh(impostor, targetMesh);\n\n    if (debugMesh) {\n      this._impostors[this._numMeshes] = impostor;\n      this._meshes[this._numMeshes] = debugMesh;\n\n      if (this._numMeshes === 0) {\n        this._renderFunction = this._updateDebugMeshes.bind(this);\n\n        this._scene.registerBeforeRender(this._renderFunction);\n      }\n\n      this._numMeshes++;\n    }\n\n    return debugMesh;\n  };\n  /**\r\n   * Hides a specified physic impostor\r\n   * @param impostor defines the impostor to hide\r\n   */\n\n\n  PhysicsViewer.prototype.hideImpostor = function (impostor) {\n    if (!impostor || !this._scene || !this._utilityLayer) {\n      return;\n    }\n\n    var removed = false;\n    var utilityLayerScene = this._utilityLayer.utilityLayerScene;\n\n    for (var i = 0; i < this._numMeshes; i++) {\n      if (this._impostors[i] == impostor) {\n        var mesh = this._meshes[i];\n\n        if (!mesh) {\n          continue;\n        }\n\n        utilityLayerScene.removeMesh(mesh);\n        mesh.dispose();\n\n        var index = this._debugMeshMeshes.indexOf(mesh);\n\n        if (index > -1) {\n          this._debugMeshMeshes.splice(index, 1);\n        }\n\n        this._numMeshes--;\n\n        if (this._numMeshes > 0) {\n          this._meshes[i] = this._meshes[this._numMeshes];\n          this._impostors[i] = this._impostors[this._numMeshes];\n          this._meshes[this._numMeshes] = null;\n          this._impostors[this._numMeshes] = null;\n        } else {\n          this._meshes[0] = null;\n          this._impostors[0] = null;\n        }\n\n        removed = true;\n        break;\n      }\n    }\n\n    if (removed && this._numMeshes === 0) {\n      this._scene.unregisterBeforeRender(this._renderFunction);\n    }\n  };\n\n  PhysicsViewer.prototype._getDebugMaterial = function (scene) {\n    if (!this._debugMaterial) {\n      this._debugMaterial = new StandardMaterial('', scene);\n      this._debugMaterial.wireframe = true;\n      this._debugMaterial.emissiveColor = Color3.White();\n      this._debugMaterial.disableLighting = true;\n    }\n\n    return this._debugMaterial;\n  };\n\n  PhysicsViewer.prototype._getDebugBoxMesh = function (scene) {\n    if (!this._debugBoxMesh) {\n      this._debugBoxMesh = BoxBuilder.CreateBox('physicsBodyBoxViewMesh', {\n        size: 1\n      }, scene);\n      this._debugBoxMesh.rotationQuaternion = Quaternion.Identity();\n      this._debugBoxMesh.material = this._getDebugMaterial(scene);\n\n      this._debugBoxMesh.setEnabled(false);\n    }\n\n    return this._debugBoxMesh.createInstance('physicsBodyBoxViewInstance');\n  };\n\n  PhysicsViewer.prototype._getDebugSphereMesh = function (scene) {\n    if (!this._debugSphereMesh) {\n      this._debugSphereMesh = SphereBuilder.CreateSphere('physicsBodySphereViewMesh', {\n        diameter: 1\n      }, scene);\n      this._debugSphereMesh.rotationQuaternion = Quaternion.Identity();\n      this._debugSphereMesh.material = this._getDebugMaterial(scene);\n\n      this._debugSphereMesh.setEnabled(false);\n    }\n\n    return this._debugSphereMesh.createInstance('physicsBodyBoxViewInstance');\n  };\n\n  PhysicsViewer.prototype._getDebugCylinderMesh = function (scene) {\n    if (!this._debugCylinderMesh) {\n      this._debugCylinderMesh = CylinderBuilder.CreateCylinder('physicsBodyCylinderViewMesh', {\n        diameterTop: 1,\n        diameterBottom: 1,\n        height: 1\n      }, scene);\n      this._debugCylinderMesh.rotationQuaternion = Quaternion.Identity();\n      this._debugCylinderMesh.material = this._getDebugMaterial(scene);\n\n      this._debugCylinderMesh.setEnabled(false);\n    }\n\n    return this._debugCylinderMesh.createInstance('physicsBodyBoxViewInstance');\n  };\n\n  PhysicsViewer.prototype._getDebugMeshMesh = function (mesh, scene) {\n    var wireframeOver = new Mesh(mesh.name, scene, null, mesh);\n    wireframeOver.position = Vector3.Zero();\n    wireframeOver.setParent(mesh);\n    wireframeOver.material = this._getDebugMaterial(scene);\n\n    this._debugMeshMeshes.push(wireframeOver);\n\n    return wireframeOver;\n  };\n\n  PhysicsViewer.prototype._getDebugMesh = function (impostor, targetMesh) {\n    var _this = this;\n\n    if (!this._utilityLayer) {\n      return null;\n    } // Only create child impostor debug meshes when evaluating the parent\n\n\n    if (targetMesh && targetMesh.parent && targetMesh.parent.physicsImpostor) {\n      return null;\n    }\n\n    var mesh = null;\n    var utilityLayerScene = this._utilityLayer.utilityLayerScene;\n\n    switch (impostor.type) {\n      case PhysicsImpostor.BoxImpostor:\n        mesh = this._getDebugBoxMesh(utilityLayerScene);\n        impostor.getBoxSizeToRef(mesh.scaling);\n        break;\n\n      case PhysicsImpostor.SphereImpostor:\n        mesh = this._getDebugSphereMesh(utilityLayerScene);\n        var radius = impostor.getRadius();\n        mesh.scaling.x = radius * 2;\n        mesh.scaling.y = radius * 2;\n        mesh.scaling.z = radius * 2;\n        break;\n\n      case PhysicsImpostor.MeshImpostor:\n        if (targetMesh) {\n          mesh = this._getDebugMeshMesh(targetMesh, utilityLayerScene);\n        }\n\n        break;\n\n      case PhysicsImpostor.NoImpostor:\n        if (targetMesh) {\n          // Handle compound impostors\n          var childMeshes = targetMesh.getChildMeshes().filter(function (c) {\n            return c.physicsImpostor ? 1 : 0;\n          });\n          childMeshes.forEach(function (m) {\n            var a = _this._getDebugBoxMesh(utilityLayerScene);\n\n            a.parent = m;\n          });\n        }\n\n        break;\n\n      case PhysicsImpostor.CylinderImpostor:\n        mesh = this._getDebugCylinderMesh(utilityLayerScene);\n        var bi = impostor.object.getBoundingInfo();\n        mesh.scaling.x = bi.boundingBox.maximum.x - bi.boundingBox.minimum.x;\n        mesh.scaling.y = bi.boundingBox.maximum.y - bi.boundingBox.minimum.y;\n        mesh.scaling.z = bi.boundingBox.maximum.z - bi.boundingBox.minimum.z;\n        break;\n    }\n\n    return mesh;\n  };\n  /** Releases all resources */\n\n\n  PhysicsViewer.prototype.dispose = function () {\n    var count = this._numMeshes;\n\n    for (var index = 0; index < count; index++) {\n      this.hideImpostor(this._impostors[0]);\n    }\n\n    if (this._debugBoxMesh) {\n      this._debugBoxMesh.dispose();\n    }\n\n    if (this._debugSphereMesh) {\n      this._debugSphereMesh.dispose();\n    }\n\n    if (this._debugCylinderMesh) {\n      this._debugCylinderMesh.dispose();\n    }\n\n    if (this._debugMaterial) {\n      this._debugMaterial.dispose();\n    }\n\n    this._impostors.length = 0;\n    this._scene = null;\n    this._physicsEnginePlugin = null;\n\n    if (this._utilityLayer) {\n      this._utilityLayer.dispose();\n\n      this._utilityLayer = null;\n    }\n  };\n\n  return PhysicsViewer;\n}();\n\nexport { PhysicsViewer };","map":{"version":3,"sources":["../../../sourceES6/core/Debug/physicsViewer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { BoxBuilder } from \"../Meshes/Builders/boxBuilder\";\r\nimport { SphereBuilder } from \"../Meshes/Builders/sphereBuilder\";\r\nimport { Quaternion, Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from '../Maths/math.color';\r\nimport { Material } from \"../Materials/material\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { IPhysicsEnginePlugin } from \"../Physics/IPhysicsEngine\";\r\nimport { PhysicsImpostor } from \"../Physics/physicsImpostor\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { CylinderBuilder } from '../Meshes/Builders/cylinderBuilder';\r\n\r\n/**\r\n     * Used to show the physics impostor around the specific mesh\r\n     */\r\nexport class PhysicsViewer {\r\n\r\n    /** @hidden */\r\n    protected _impostors: Array<Nullable<PhysicsImpostor>> = [];\r\n    /** @hidden */\r\n    protected _meshes: Array<Nullable<AbstractMesh>> = [];\r\n    /** @hidden */\r\n    protected _scene: Nullable<Scene>;\r\n    /** @hidden */\r\n    protected _numMeshes = 0;\r\n    /** @hidden */\r\n    protected _physicsEnginePlugin: Nullable<IPhysicsEnginePlugin>;\r\n    private _renderFunction: () => void;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n\r\n    private _debugBoxMesh: Mesh;\r\n    private _debugSphereMesh: Mesh;\r\n    private _debugCylinderMesh: Mesh;\r\n    private _debugMaterial: StandardMaterial;\r\n    private _debugMeshMeshes = new Array<Mesh>();\r\n\r\n    /**\r\n     * Creates a new PhysicsViewer\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene || EngineStore.LastCreatedScene;\r\n        let physicEngine = this._scene.getPhysicsEngine();\r\n\r\n        if (physicEngine) {\r\n            this._physicsEnginePlugin = physicEngine.getPhysicsPlugin();\r\n        }\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene, false);\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _updateDebugMeshes(): void {\r\n        var plugin = this._physicsEnginePlugin;\r\n\r\n        for (var i = 0; i < this._numMeshes; i++) {\r\n            let impostor = this._impostors[i];\r\n\r\n            if (!impostor) {\r\n                continue;\r\n            }\r\n\r\n            if (impostor.isDisposed) {\r\n                this.hideImpostor(this._impostors[i--]);\r\n            } else {\r\n                if (impostor.type === PhysicsImpostor.MeshImpostor) {\r\n                    continue;\r\n                }\r\n                let mesh = this._meshes[i];\r\n\r\n                if (mesh && plugin) {\r\n                    plugin.syncMeshWithImpostor(mesh, impostor);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders a specified physic impostor\r\n     * @param impostor defines the impostor to render\r\n     * @param targetMesh defines the mesh represented by the impostor\r\n     * @returns the new debug mesh used to render the impostor\r\n     */\r\n    public showImpostor(impostor: PhysicsImpostor, targetMesh?: Mesh): Nullable<AbstractMesh> {\r\n\r\n        if (!this._scene) {\r\n            return null;\r\n        }\r\n\r\n        for (var i = 0; i < this._numMeshes; i++) {\r\n            if (this._impostors[i] == impostor) {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        var debugMesh = this._getDebugMesh(impostor, targetMesh);\r\n\r\n        if (debugMesh) {\r\n            this._impostors[this._numMeshes] = impostor;\r\n            this._meshes[this._numMeshes] = debugMesh;\r\n\r\n            if (this._numMeshes === 0) {\r\n                this._renderFunction = this._updateDebugMeshes.bind(this);\r\n                this._scene.registerBeforeRender(this._renderFunction);\r\n            }\r\n\r\n            this._numMeshes++;\r\n        }\r\n\r\n        return debugMesh;\r\n    }\r\n\r\n    /**\r\n     * Hides a specified physic impostor\r\n     * @param impostor defines the impostor to hide\r\n     */\r\n    public hideImpostor(impostor: Nullable<PhysicsImpostor>) {\r\n\r\n        if (!impostor || !this._scene || !this._utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        var removed = false;\r\n        const utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        for (var i = 0; i < this._numMeshes; i++) {\r\n            if (this._impostors[i] == impostor) {\r\n                let mesh = this._meshes[i];\r\n\r\n                if (!mesh) {\r\n                    continue;\r\n                }\r\n\r\n                utilityLayerScene.removeMesh(mesh);\r\n                mesh.dispose();\r\n\r\n                let index = this._debugMeshMeshes.indexOf(mesh as Mesh);\r\n                if (index > -1) {\r\n                    this._debugMeshMeshes.splice(index, 1);\r\n                }\r\n\r\n                this._numMeshes--;\r\n                if (this._numMeshes > 0) {\r\n                    this._meshes[i] = this._meshes[this._numMeshes];\r\n                    this._impostors[i] = this._impostors[this._numMeshes];\r\n                    this._meshes[this._numMeshes] = null;\r\n                    this._impostors[this._numMeshes] = null;\r\n                } else {\r\n                    this._meshes[0] = null;\r\n                    this._impostors[0] = null;\r\n                }\r\n                removed = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (removed && this._numMeshes === 0) {\r\n            this._scene.unregisterBeforeRender(this._renderFunction);\r\n        }\r\n\r\n    }\r\n\r\n    private _getDebugMaterial(scene: Scene): Material {\r\n        if (!this._debugMaterial) {\r\n            this._debugMaterial = new StandardMaterial('', scene);\r\n            this._debugMaterial.wireframe = true;\r\n            this._debugMaterial.emissiveColor = Color3.White();\r\n            this._debugMaterial.disableLighting = true;\r\n        }\r\n\r\n        return this._debugMaterial;\r\n    }\r\n\r\n    private _getDebugBoxMesh(scene: Scene): AbstractMesh {\r\n        if (!this._debugBoxMesh) {\r\n            this._debugBoxMesh = BoxBuilder.CreateBox('physicsBodyBoxViewMesh', { size: 1 }, scene);\r\n            this._debugBoxMesh.rotationQuaternion = Quaternion.Identity();\r\n            this._debugBoxMesh.material = this._getDebugMaterial(scene);\r\n            this._debugBoxMesh.setEnabled(false);\r\n        }\r\n\r\n        return this._debugBoxMesh.createInstance('physicsBodyBoxViewInstance');\r\n    }\r\n\r\n    private _getDebugSphereMesh(scene: Scene): AbstractMesh {\r\n        if (!this._debugSphereMesh) {\r\n            this._debugSphereMesh = SphereBuilder.CreateSphere('physicsBodySphereViewMesh', { diameter: 1 }, scene);\r\n            this._debugSphereMesh.rotationQuaternion = Quaternion.Identity();\r\n            this._debugSphereMesh.material = this._getDebugMaterial(scene);\r\n            this._debugSphereMesh.setEnabled(false);\r\n        }\r\n\r\n        return this._debugSphereMesh.createInstance('physicsBodyBoxViewInstance');\r\n    }\r\n\r\n    private _getDebugCylinderMesh(scene: Scene): AbstractMesh {\r\n        if (!this._debugCylinderMesh) {\r\n            this._debugCylinderMesh = CylinderBuilder.CreateCylinder('physicsBodyCylinderViewMesh', { diameterTop: 1, diameterBottom: 1, height: 1 }, scene);\r\n            this._debugCylinderMesh.rotationQuaternion = Quaternion.Identity();\r\n            this._debugCylinderMesh.material = this._getDebugMaterial(scene);\r\n            this._debugCylinderMesh.setEnabled(false);\r\n        }\r\n\r\n        return this._debugCylinderMesh.createInstance('physicsBodyBoxViewInstance');\r\n    }\r\n\r\n    private _getDebugMeshMesh(mesh: Mesh, scene: Scene): AbstractMesh {\r\n        var wireframeOver = new Mesh(mesh.name, scene, null, mesh);\r\n        wireframeOver.position = Vector3.Zero();\r\n        wireframeOver.setParent(mesh);\r\n        wireframeOver.material = this._getDebugMaterial(scene);\r\n\r\n        this._debugMeshMeshes.push(wireframeOver);\r\n\r\n        return wireframeOver;\r\n    }\r\n\r\n    private _getDebugMesh(impostor: PhysicsImpostor, targetMesh?: Mesh): Nullable<AbstractMesh> {\r\n        if (!this._utilityLayer) {\r\n            return null;\r\n        }\r\n\r\n        // Only create child impostor debug meshes when evaluating the parent\r\n        if (targetMesh && targetMesh.parent && (targetMesh.parent as Mesh).physicsImpostor) {\r\n            return null;\r\n        }\r\n\r\n        var mesh: Nullable<AbstractMesh> = null;\r\n        const utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        switch (impostor.type) {\r\n            case PhysicsImpostor.BoxImpostor:\r\n                mesh = this._getDebugBoxMesh(utilityLayerScene);\r\n                impostor.getBoxSizeToRef(mesh.scaling);\r\n                break;\r\n            case PhysicsImpostor.SphereImpostor:\r\n                mesh = this._getDebugSphereMesh(utilityLayerScene);\r\n                var radius = impostor.getRadius();\r\n                mesh.scaling.x = radius * 2;\r\n                mesh.scaling.y = radius * 2;\r\n                mesh.scaling.z = radius * 2;\r\n                break;\r\n            case PhysicsImpostor.MeshImpostor:\r\n                if (targetMesh) {\r\n                    mesh = this._getDebugMeshMesh(targetMesh, utilityLayerScene);\r\n                }\r\n                break;\r\n            case PhysicsImpostor.NoImpostor:\r\n                if (targetMesh) {\r\n                    // Handle compound impostors\r\n                    var childMeshes = targetMesh.getChildMeshes().filter((c) => { return c.physicsImpostor ? 1 : 0; });\r\n                    childMeshes.forEach((m) => {\r\n                        var a = this._getDebugBoxMesh(utilityLayerScene);\r\n                        a.parent = m;\r\n                    });\r\n                }\r\n                break;\r\n            case PhysicsImpostor.CylinderImpostor:\r\n                mesh = this._getDebugCylinderMesh(utilityLayerScene);\r\n                var bi = impostor.object.getBoundingInfo();\r\n                mesh.scaling.x = bi.boundingBox.maximum.x - bi.boundingBox.minimum.x;\r\n                mesh.scaling.y = bi.boundingBox.maximum.y - bi.boundingBox.minimum.y;\r\n                mesh.scaling.z = bi.boundingBox.maximum.z - bi.boundingBox.minimum.z;\r\n                break;\r\n        }\r\n        return mesh;\r\n    }\r\n\r\n    /** Releases all resources */\r\n    public dispose() {\r\n        let count = this._numMeshes;\r\n        for (var index = 0; index < count; index++) {\r\n            this.hideImpostor(this._impostors[0]);\r\n        }\r\n\r\n        if (this._debugBoxMesh) {\r\n            this._debugBoxMesh.dispose();\r\n        }\r\n        if (this._debugSphereMesh) {\r\n            this._debugSphereMesh.dispose();\r\n        }\r\n        if (this._debugCylinderMesh) {\r\n            this._debugCylinderMesh.dispose();\r\n        }\r\n        if (this._debugMaterial) {\r\n            this._debugMaterial.dispose();\r\n        }\r\n\r\n        this._impostors.length = 0;\r\n        this._scene = null;\r\n        this._physicsEnginePlugin = null;\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n            this._utilityLayer = null;\r\n        }\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}