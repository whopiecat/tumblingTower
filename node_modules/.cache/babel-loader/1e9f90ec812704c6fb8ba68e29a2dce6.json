{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Engine } from \"../../Engines/engine\";\nimport { Size } from '../../Maths/math.size';\nimport { Observable } from '../../Misc/observable';\nimport { Tools } from '../../Misc/tools';\nimport { DomManagement } from '../../Misc/domManagement';\nObject.defineProperty(Engine.prototype, \"isInVRExclusivePointerMode\", {\n  get: function () {\n    return this._vrExclusivePointerMode;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nEngine.prototype._prepareVRComponent = function () {\n  this._vrSupported = false;\n  this._vrExclusivePointerMode = false;\n  this.onVRDisplayChangedObservable = new Observable();\n  this.onVRRequestPresentComplete = new Observable();\n  this.onVRRequestPresentStart = new Observable();\n};\n\nEngine.prototype.isVRDevicePresent = function () {\n  return !!this._vrDisplay;\n};\n\nEngine.prototype.getVRDevice = function () {\n  return this._vrDisplay;\n};\n\nEngine.prototype.initWebVR = function () {\n  this.initWebVRAsync();\n  return this.onVRDisplayChangedObservable;\n};\n\nEngine.prototype.initWebVRAsync = function () {\n  var _this = this;\n\n  var notifyObservers = function () {\n    var eventArgs = {\n      vrDisplay: _this._vrDisplay,\n      vrSupported: _this._vrSupported\n    };\n\n    _this.onVRDisplayChangedObservable.notifyObservers(eventArgs);\n\n    _this._webVRInitPromise = new Promise(function (res) {\n      res(eventArgs);\n    });\n  };\n\n  if (!this._onVrDisplayConnect) {\n    this._onVrDisplayConnect = function (event) {\n      _this._vrDisplay = event.display;\n      notifyObservers();\n    };\n\n    this._onVrDisplayDisconnect = function () {\n      _this._vrDisplay.cancelAnimationFrame(_this._frameHandler);\n\n      _this._vrDisplay = undefined;\n      _this._frameHandler = Engine.QueueNewFrame(_this._boundRenderFunction);\n      notifyObservers();\n    };\n\n    this._onVrDisplayPresentChange = function () {\n      _this._vrExclusivePointerMode = _this._vrDisplay && _this._vrDisplay.isPresenting;\n    };\n\n    var hostWindow = this.getHostWindow();\n\n    if (hostWindow) {\n      hostWindow.addEventListener('vrdisplayconnect', this._onVrDisplayConnect);\n      hostWindow.addEventListener('vrdisplaydisconnect', this._onVrDisplayDisconnect);\n      hostWindow.addEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\n    }\n  }\n\n  this._webVRInitPromise = this._webVRInitPromise || this._getVRDisplaysAsync();\n\n  this._webVRInitPromise.then(notifyObservers);\n\n  return this._webVRInitPromise;\n};\n\nEngine.prototype._getVRDisplaysAsync = function () {\n  var _this = this;\n\n  return new Promise(function (res) {\n    if (navigator.getVRDisplays) {\n      navigator.getVRDisplays().then(function (devices) {\n        _this._vrSupported = true; // note that devices may actually be an empty array. This is fine;\n        // we expect this._vrDisplay to be undefined in this case.\n\n        _this._vrDisplay = devices[0];\n        res({\n          vrDisplay: _this._vrDisplay,\n          vrSupported: _this._vrSupported\n        });\n      });\n    } else {\n      _this._vrDisplay = undefined;\n      _this._vrSupported = false;\n      res({\n        vrDisplay: _this._vrDisplay,\n        vrSupported: _this._vrSupported\n      });\n    }\n  });\n};\n\nEngine.prototype.enableVR = function (options) {\n  var _this = this;\n\n  if (this._vrDisplay && !this._vrDisplay.isPresenting) {\n    var onResolved = function () {\n      _this.onVRRequestPresentComplete.notifyObservers(true);\n\n      _this._onVRFullScreenTriggered();\n    };\n\n    var onRejected = function () {\n      _this.onVRRequestPresentComplete.notifyObservers(false);\n    };\n\n    this.onVRRequestPresentStart.notifyObservers(this);\n    var presentationAttributes = {\n      highRefreshRate: this.vrPresentationAttributes ? this.vrPresentationAttributes.highRefreshRate : false,\n      foveationLevel: this.vrPresentationAttributes ? this.vrPresentationAttributes.foveationLevel : 1,\n      multiview: (this.getCaps().multiview || this.getCaps().oculusMultiview) && options.useMultiview\n    };\n\n    this._vrDisplay.requestPresent([__assign({\n      source: this.getRenderingCanvas(),\n      attributes: presentationAttributes\n    }, presentationAttributes)]).then(onResolved).catch(onRejected);\n  }\n};\n\nEngine.prototype._onVRFullScreenTriggered = function () {\n  if (this._vrDisplay && this._vrDisplay.isPresenting) {\n    //get the old size before we change\n    this._oldSize = new Size(this.getRenderWidth(), this.getRenderHeight());\n    this._oldHardwareScaleFactor = this.getHardwareScalingLevel(); //get the width and height, change the render size\n\n    var leftEye = this._vrDisplay.getEyeParameters('left');\n\n    this.setHardwareScalingLevel(1);\n    this.setSize(leftEye.renderWidth * 2, leftEye.renderHeight);\n  } else {\n    this.setHardwareScalingLevel(this._oldHardwareScaleFactor);\n    this.setSize(this._oldSize.width, this._oldSize.height);\n  }\n};\n\nEngine.prototype.disableVR = function () {\n  var _this = this;\n\n  if (this._vrDisplay && this._vrDisplay.isPresenting) {\n    this._vrDisplay.exitPresent().then(function () {\n      return _this._onVRFullScreenTriggered();\n    }).catch(function () {\n      return _this._onVRFullScreenTriggered();\n    });\n  }\n\n  if (DomManagement.IsWindowObjectExist()) {\n    window.removeEventListener('vrdisplaypointerrestricted', this._onVRDisplayPointerRestricted);\n    window.removeEventListener('vrdisplaypointerunrestricted', this._onVRDisplayPointerUnrestricted);\n\n    if (this._onVrDisplayConnect) {\n      window.removeEventListener('vrdisplayconnect', this._onVrDisplayConnect);\n\n      if (this._onVrDisplayDisconnect) {\n        window.removeEventListener('vrdisplaydisconnect', this._onVrDisplayDisconnect);\n      }\n\n      if (this._onVrDisplayPresentChange) {\n        window.removeEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\n      }\n\n      this._onVrDisplayConnect = null;\n      this._onVrDisplayDisconnect = null;\n    }\n  }\n};\n\nEngine.prototype._connectVREvents = function (canvas, document) {\n  var _this = this;\n\n  this._onVRDisplayPointerRestricted = function () {\n    if (canvas) {\n      canvas.requestPointerLock();\n    }\n  };\n\n  this._onVRDisplayPointerUnrestricted = function () {\n    // Edge fix - for some reason document is not present and this is window\n    if (!document) {\n      var hostWindow = _this.getHostWindow();\n\n      if (hostWindow.document && hostWindow.document.exitPointerLock) {\n        hostWindow.document.exitPointerLock();\n      }\n\n      return;\n    }\n\n    if (!document.exitPointerLock) {\n      return;\n    }\n\n    document.exitPointerLock();\n  };\n\n  if (DomManagement.IsWindowObjectExist()) {\n    var hostWindow = this.getHostWindow();\n    hostWindow.addEventListener('vrdisplaypointerrestricted', this._onVRDisplayPointerRestricted, false);\n    hostWindow.addEventListener('vrdisplaypointerunrestricted', this._onVRDisplayPointerUnrestricted, false);\n  }\n};\n\nEngine.prototype._submitVRFrame = function () {\n  // Submit frame to the vr device, if enabled\n  if (this._vrDisplay && this._vrDisplay.isPresenting) {\n    // TODO: We should only submit the frame if we read frameData successfully.\n    try {\n      this._vrDisplay.submitFrame();\n    } catch (e) {\n      Tools.Warn(\"webVR submitFrame has had an unexpected failure: \" + e);\n    }\n  }\n};\n\nEngine.prototype.isVRPresenting = function () {\n  return this._vrDisplay && this._vrDisplay.isPresenting;\n};\n\nEngine.prototype._requestVRFrame = function () {\n  this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction, this._vrDisplay);\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/Extensions/engine.webVR.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { Engine, IDisplayChangedEventArgs } from \"../../Engines/engine\";\r\nimport { Size } from '../../Maths/math.size';\r\nimport { Observable } from '../../Misc/observable';\r\nimport { Tools } from '../../Misc/tools';\r\nimport { DomManagement } from '../../Misc/domManagement';\r\nimport { WebVROptions } from '../../Cameras/VR/webVRCamera';\r\n\r\n/**\r\n * Interface used to define additional presentation attributes\r\n */\r\nexport interface IVRPresentationAttributes {\r\n    /**\r\n     * Defines a boolean indicating that we want to get 72hz mode on Oculus Browser (default is off eg. 60hz)\r\n     */\r\n    highRefreshRate: boolean;\r\n    /**\r\n     * Enables foveation in VR to improve perf. 0 none, 1 low, 2 medium, 3 high (Default is 1)\r\n     */\r\n    foveationLevel: number;\r\n}\r\n\r\ndeclare module \"../../Engines/engine\" {\r\n    export interface Engine {\r\n        /** @hidden */\r\n        _vrDisplay: any;\r\n        /** @hidden */\r\n        _vrSupported: boolean;\r\n        /** @hidden */\r\n        _oldSize: Size;\r\n        /** @hidden */\r\n        _oldHardwareScaleFactor: number;\r\n        /** @hidden */\r\n        _vrExclusivePointerMode: boolean;\r\n        /** @hidden */\r\n        _webVRInitPromise: Promise<IDisplayChangedEventArgs>;\r\n\r\n        /** @hidden */\r\n        _onVRDisplayPointerRestricted: () => void;\r\n        /** @hidden */\r\n        _onVRDisplayPointerUnrestricted: () => void;\r\n\r\n        /** @hidden */\r\n        _onVrDisplayConnect: Nullable<(display: any) => void>;\r\n        /** @hidden */\r\n        _onVrDisplayDisconnect: Nullable<() => void>;\r\n        /** @hidden */\r\n        _onVrDisplayPresentChange: Nullable<() => void>;\r\n\r\n        /**\r\n         * Observable signaled when VR display mode changes\r\n         */\r\n        onVRDisplayChangedObservable: Observable<IDisplayChangedEventArgs>;\r\n        /**\r\n         * Observable signaled when VR request present is complete\r\n         */\r\n        onVRRequestPresentComplete: Observable<boolean>;\r\n        /**\r\n         * Observable signaled when VR request present starts\r\n         */\r\n        onVRRequestPresentStart: Observable<Engine>;\r\n\r\n        /**\r\n         * Gets a boolean indicating that the engine is currently in VR exclusive mode for the pointers\r\n         * @see https://docs.microsoft.com/en-us/microsoft-edge/webvr/essentials#mouse-input\r\n         */\r\n        isInVRExclusivePointerMode: boolean;\r\n\r\n        /**\r\n         * Gets a boolean indicating if a webVR device was detected\r\n         * @returns true if a webVR device was detected\r\n         */\r\n        isVRDevicePresent(): boolean;\r\n\r\n        /**\r\n         * Gets the current webVR device\r\n         * @returns the current webVR device (or null)\r\n         */\r\n        getVRDevice(): any;\r\n\r\n        /**\r\n         * Initializes a webVR display and starts listening to display change events\r\n         * The onVRDisplayChangedObservable will be notified upon these changes\r\n         * @returns A promise containing a VRDisplay and if vr is supported\r\n         */\r\n        initWebVRAsync(): Promise<IDisplayChangedEventArgs>;\r\n\r\n        /** @hidden */\r\n        _getVRDisplaysAsync(): Promise<IDisplayChangedEventArgs>;\r\n\r\n        /**\r\n         * Gets or sets the presentation attributes used to configure VR rendering\r\n         */\r\n        vrPresentationAttributes?: IVRPresentationAttributes;\r\n\r\n        /**\r\n         * Call this function to switch to webVR mode\r\n         * Will do nothing if webVR is not supported or if there is no webVR device\r\n         * @param options the webvr options provided to the camera. mainly used for multiview\r\n         * @see https://doc.babylonjs.com/how_to/webvr_camera\r\n         */\r\n        enableVR(options: WebVROptions): void;\r\n\r\n        /** @hidden */\r\n        _onVRFullScreenTriggered(): void;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Engine.prototype, \"isInVRExclusivePointerMode\", {\r\n    get: function(this: Engine) {\r\n        return this._vrExclusivePointerMode;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\nEngine.prototype._prepareVRComponent = function() {\r\n    this._vrSupported = false;\r\n    this._vrExclusivePointerMode = false;\r\n    this.onVRDisplayChangedObservable = new Observable<IDisplayChangedEventArgs>();\r\n    this.onVRRequestPresentComplete = new Observable<boolean>();\r\n    this.onVRRequestPresentStart = new Observable<Engine>();\r\n};\r\n\r\nEngine.prototype.isVRDevicePresent = function() {\r\n    return !!this._vrDisplay;\r\n};\r\n\r\nEngine.prototype.getVRDevice = function(): any {\r\n    return this._vrDisplay;\r\n};\r\n\r\nEngine.prototype.initWebVR = function(): Observable<IDisplayChangedEventArgs> {\r\n    this.initWebVRAsync();\r\n    return this.onVRDisplayChangedObservable;\r\n};\r\n\r\nEngine.prototype.initWebVRAsync = function(): Promise<IDisplayChangedEventArgs> {\r\n    var notifyObservers = () => {\r\n        var eventArgs = {\r\n            vrDisplay: this._vrDisplay,\r\n            vrSupported: this._vrSupported\r\n        };\r\n        this.onVRDisplayChangedObservable.notifyObservers(eventArgs);\r\n        this._webVRInitPromise = new Promise((res) => { res(eventArgs); });\r\n    };\r\n\r\n    if (!this._onVrDisplayConnect) {\r\n        this._onVrDisplayConnect = (event) => {\r\n            this._vrDisplay = event.display;\r\n            notifyObservers();\r\n        };\r\n        this._onVrDisplayDisconnect = () => {\r\n            this._vrDisplay.cancelAnimationFrame(this._frameHandler);\r\n            this._vrDisplay = undefined;\r\n            this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction);\r\n            notifyObservers();\r\n        };\r\n        this._onVrDisplayPresentChange = () => {\r\n            this._vrExclusivePointerMode = this._vrDisplay && this._vrDisplay.isPresenting;\r\n        };\r\n        let hostWindow = this.getHostWindow();\r\n        if (hostWindow) {\r\n            hostWindow.addEventListener('vrdisplayconnect', this._onVrDisplayConnect);\r\n            hostWindow.addEventListener('vrdisplaydisconnect', this._onVrDisplayDisconnect);\r\n            hostWindow.addEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\r\n        }\r\n    }\r\n    this._webVRInitPromise = this._webVRInitPromise || this._getVRDisplaysAsync();\r\n    this._webVRInitPromise.then(notifyObservers);\r\n    return this._webVRInitPromise;\r\n};\r\n\r\nEngine.prototype._getVRDisplaysAsync = function(): Promise<IDisplayChangedEventArgs> {\r\n    return new Promise((res) => {\r\n        if (navigator.getVRDisplays) {\r\n            navigator.getVRDisplays().then((devices: Array<any>) => {\r\n                this._vrSupported = true;\r\n                // note that devices may actually be an empty array. This is fine;\r\n                // we expect this._vrDisplay to be undefined in this case.\r\n                this._vrDisplay = devices[0];\r\n                res({\r\n                    vrDisplay: this._vrDisplay,\r\n                    vrSupported: this._vrSupported\r\n                });\r\n            });\r\n        } else {\r\n            this._vrDisplay = undefined;\r\n            this._vrSupported = false;\r\n            res({\r\n                vrDisplay: this._vrDisplay,\r\n                vrSupported: this._vrSupported\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nEngine.prototype.enableVR = function(options: WebVROptions) {\r\n    if (this._vrDisplay && !this._vrDisplay.isPresenting) {\r\n        var onResolved = () => {\r\n            this.onVRRequestPresentComplete.notifyObservers(true);\r\n            this._onVRFullScreenTriggered();\r\n        };\r\n        var onRejected = () => {\r\n            this.onVRRequestPresentComplete.notifyObservers(false);\r\n        };\r\n\r\n        this.onVRRequestPresentStart.notifyObservers(this);\r\n\r\n        var presentationAttributes = {\r\n            highRefreshRate: this.vrPresentationAttributes ? this.vrPresentationAttributes.highRefreshRate : false,\r\n            foveationLevel: this.vrPresentationAttributes ? this.vrPresentationAttributes.foveationLevel : 1,\r\n            multiview: (this.getCaps().multiview || this.getCaps().oculusMultiview) && options.useMultiview\r\n        };\r\n\r\n        this._vrDisplay.requestPresent([{\r\n            source: this.getRenderingCanvas(),\r\n            attributes: presentationAttributes,\r\n            ...presentationAttributes\r\n        }]).then(onResolved).catch(onRejected);\r\n    }\r\n};\r\n\r\nEngine.prototype._onVRFullScreenTriggered = function() {\r\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\r\n        //get the old size before we change\r\n        this._oldSize = new Size(this.getRenderWidth(), this.getRenderHeight());\r\n        this._oldHardwareScaleFactor = this.getHardwareScalingLevel();\r\n\r\n        //get the width and height, change the render size\r\n        var leftEye = this._vrDisplay.getEyeParameters('left');\r\n        this.setHardwareScalingLevel(1);\r\n        this.setSize(leftEye.renderWidth * 2, leftEye.renderHeight);\r\n    } else {\r\n        this.setHardwareScalingLevel(this._oldHardwareScaleFactor);\r\n        this.setSize(this._oldSize.width, this._oldSize.height);\r\n    }\r\n};\r\n\r\nEngine.prototype.disableVR = function() {\r\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\r\n        this._vrDisplay.exitPresent()\r\n            .then(() => this._onVRFullScreenTriggered())\r\n            .catch(() => this._onVRFullScreenTriggered());\r\n    }\r\n\r\n    if (DomManagement.IsWindowObjectExist()) {\r\n        window.removeEventListener('vrdisplaypointerrestricted', this._onVRDisplayPointerRestricted);\r\n        window.removeEventListener('vrdisplaypointerunrestricted', this._onVRDisplayPointerUnrestricted);\r\n\r\n        if (this._onVrDisplayConnect) {\r\n            window.removeEventListener('vrdisplayconnect', this._onVrDisplayConnect);\r\n            if (this._onVrDisplayDisconnect) {\r\n                window.removeEventListener('vrdisplaydisconnect', this._onVrDisplayDisconnect);\r\n            }\r\n\r\n            if (this._onVrDisplayPresentChange) {\r\n                window.removeEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\r\n            }\r\n            this._onVrDisplayConnect = null;\r\n            this._onVrDisplayDisconnect = null;\r\n        }\r\n    }\r\n};\r\n\r\nEngine.prototype._connectVREvents = function(canvas?: HTMLCanvasElement, document?: any) {\r\n    this._onVRDisplayPointerRestricted = () => {\r\n        if (canvas) {\r\n            canvas.requestPointerLock();\r\n        }\r\n    };\r\n\r\n    this._onVRDisplayPointerUnrestricted = () => {\r\n        // Edge fix - for some reason document is not present and this is window\r\n        if (!document) {\r\n            let hostWindow = this.getHostWindow()!;\r\n            if (hostWindow.document && hostWindow.document.exitPointerLock) {\r\n                hostWindow.document.exitPointerLock();\r\n            }\r\n            return;\r\n        }\r\n        if (!document.exitPointerLock) {\r\n            return;\r\n        }\r\n        document.exitPointerLock();\r\n    };\r\n\r\n    if (DomManagement.IsWindowObjectExist()) {\r\n        let hostWindow = this.getHostWindow()!;\r\n        hostWindow.addEventListener('vrdisplaypointerrestricted', this._onVRDisplayPointerRestricted, false);\r\n        hostWindow.addEventListener('vrdisplaypointerunrestricted', this._onVRDisplayPointerUnrestricted, false);\r\n    }\r\n};\r\n\r\nEngine.prototype._submitVRFrame = function() {\r\n    // Submit frame to the vr device, if enabled\r\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\r\n        // TODO: We should only submit the frame if we read frameData successfully.\r\n        try {\r\n            this._vrDisplay.submitFrame();\r\n        } catch (e) {\r\n            Tools.Warn(\"webVR submitFrame has had an unexpected failure: \" + e);\r\n        }\r\n    }\r\n};\r\n\r\nEngine.prototype.isVRPresenting = function() {\r\n    return this._vrDisplay && this._vrDisplay.isPresenting;\r\n};\r\n\r\nEngine.prototype._requestVRFrame = function() {\r\n    this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction, this._vrDisplay);\r\n};"],"sourceRoot":""},"metadata":{},"sourceType":"module"}