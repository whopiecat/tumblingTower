{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/sharpen.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, SerializationHelper } from '../Misc/decorators';\n/**\r\n * The SharpenPostProcess applies a sharpen kernel to every pixel\r\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n */\n\nvar SharpenPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(SharpenPostProcess, _super);\n  /**\r\n   * Creates a new instance ConvolutionPostProcess\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function SharpenPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"sharpen\", [\"sharpnessAmounts\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n    /**\r\n     * How much of the original color should be applied. Setting this to 0 will display edge detection. (default: 1)\r\n     */\n\n\n    _this.colorAmount = 1.0;\n    /**\r\n     * How much sharpness should be applied (default: 0.3)\r\n     */\n\n    _this.edgeAmount = 0.3;\n\n    _this.onApply = function (effect) {\n      effect.setFloat2(\"screenSize\", _this.width, _this.height);\n      effect.setFloat2(\"sharpnessAmounts\", _this.edgeAmount, _this.colorAmount);\n    };\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"SharpenPostProcess\" string\r\n   */\n\n\n  SharpenPostProcess.prototype.getClassName = function () {\n    return \"SharpenPostProcess\";\n  };\n  /** @hidden */\n\n\n  SharpenPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new SharpenPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], SharpenPostProcess.prototype, \"colorAmount\", void 0);\n\n  __decorate([serialize()], SharpenPostProcess.prototype, \"edgeAmount\", void 0);\n\n  return SharpenPostProcess;\n}(PostProcess);\n\nexport { SharpenPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.SharpenPostProcess\"] = SharpenPostProcess;","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/sharpenPostProcess.ts"],"names":[],"mappings":";AAGA,SAAS,WAAT,QAAgD,eAAhD;AAGA,OAAO,6BAAP;AACA,SAAS,UAAT,QAA2B,mBAA3B;AACA,SAAS,SAAT,EAAoB,mBAApB,QAA+C,oBAA/C;AAKA;;;;;AAIA,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;AAoBpC;;;;;;;;;;;;;AAWA,WAAA,kBAAA,CAAY,IAAZ,EAA0B,OAA1B,EAAgE,MAAhE,EAA0F,YAA1F,EAAiH,MAAjH,EAAkI,QAAlI,EAAsJ,WAAtJ,EAA+K,gBAA/K,EAAuM;AAAjD,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,CAAA;AAAuB;;AAAE,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,KAAA;AAAwB;;AAAvM,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,SAAZ,EAAuB,CAAC,kBAAD,EAAqB,YAArB,CAAvB,EAA2D,IAA3D,EAAiE,OAAjE,EAA0E,MAA1E,EAAkF,YAAlF,EAAgG,MAAhG,EAAwG,QAAxG,EAAkH,IAAlH,EAAwH,WAAxH,EAAqI,SAArI,EAAgJ,IAAhJ,EAAsJ,gBAAtJ,KAAuK,IAD3K;AA9BA;;;;;AAIO,IAAA,KAAA,CAAA,WAAA,GAAsB,GAAtB;AACP;;;;AAIO,IAAA,KAAA,CAAA,UAAA,GAAqB,GAArB;;AAwBH,IAAA,KAAI,CAAC,OAAL,GAAe,UAAC,MAAD,EAAe;AAC1B,MAAA,MAAM,CAAC,SAAP,CAAiB,YAAjB,EAA+B,KAAI,CAAC,KAApC,EAA2C,KAAI,CAAC,MAAhD;AACA,MAAA,MAAM,CAAC,SAAP,CAAiB,kBAAjB,EAAqC,KAAI,CAAC,UAA1C,EAAsD,KAAI,CAAC,WAA3D;AACH,KAHD;;;AAIH;AA1BD;;;;;;AAIO,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,oBAAP;AACH,GAFM;AAwBP;;;AACc,EAAA,kBAAA,CAAA,MAAA,GAAd,UAAqB,iBAArB,EAA6C,YAA7C,EAAmE,KAAnE,EAAiF,OAAjF,EAAgG;AAC5F,WAAO,mBAAmB,CAAC,KAApB,CAA0B,YAAA;AAC7B,aAAO,IAAI,kBAAJ,CACH,iBAAiB,CAAC,IADf,EAEH,iBAAiB,CAAC,OAFf,EAEwB,YAFxB,EAGH,iBAAiB,CAAC,wBAHf,EAIH,KAAK,CAAC,SAAN,EAJG,EAIgB,iBAAiB,CAAC,WAJlC,EAI+C,iBAAiB,CAAC,QAJjE,CAAP;AAKH,KANM,EAMJ,iBANI,EAMe,KANf,EAMsB,OANtB,CAAP;AAOH,GARa;;AApCd,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,4BAAA,E,aAAA,E,KAAiC,CAAjC,CAAA;;AAKA,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,4BAAA,E,YAAA,E,KAAgC,CAAhC,CAAA;;AAwCJ,SAAA,kBAAA;AAAC,CAlDD,CAAwC,WAAxC,CAAA;;SAAa,kB;AAoDb,UAAU,CAAC,eAAX,CAA2B,4BAA3B,IAA2D,kBAA3D","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\n\r\n\r\nimport \"../Shaders/sharpen.fragment\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { serialize, SerializationHelper } from '../Misc/decorators';\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The SharpenPostProcess applies a sharpen kernel to every pixel\r\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n */\r\nexport class SharpenPostProcess extends PostProcess {\r\n    /**\r\n     * How much of the original color should be applied. Setting this to 0 will display edge detection. (default: 1)\r\n     */\r\n    @serialize()\r\n    public colorAmount: number = 1.0;\r\n    /**\r\n     * How much sharpness should be applied (default: 0.3)\r\n     */\r\n    @serialize()\r\n    public edgeAmount: number = 0.3;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"SharpenPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"SharpenPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ConvolutionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0, blockCompilation = false) {\r\n        super(name, \"sharpen\", [\"sharpnessAmounts\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setFloat2(\"screenSize\", this.width, this.height);\r\n            effect.setFloat2(\"sharpnessAmounts\", this.edgeAmount, this.colorAmount);\r\n        };\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(() => {\r\n            return new SharpenPostProcess(\r\n                parsedPostProcess.name,\r\n                parsedPostProcess.options, targetCamera,\r\n                parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.SharpenPostProcess\"] = SharpenPostProcess;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}