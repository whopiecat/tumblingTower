{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\n/**\r\n * Block used for the particle ramp gradient section\r\n */\n\nvar ParticleRampGradientBlock =\n/** @class */\nfunction (_super) {\n  __extends(ParticleRampGradientBlock, _super);\n  /**\r\n   * Create a new ParticleRampGradientBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function ParticleRampGradientBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._isUnique = true;\n\n    _this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"rampColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  ParticleRampGradientBlock.prototype.getClassName = function () {\n    return \"ParticleRampGradientBlock\";\n  };\n\n  Object.defineProperty(ParticleRampGradientBlock.prototype, \"color\", {\n    /**\r\n     * Gets the color input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticleRampGradientBlock.prototype, \"rampColor\", {\n    /**\r\n     * Gets the rampColor output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n  ParticleRampGradientBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"remapRanges\");\n\n    state._excludeVariableName(\"rampSampler\");\n\n    state._excludeVariableName(\"baseColor\");\n\n    state._excludeVariableName(\"alpha\");\n\n    state._excludeVariableName(\"remappedColorIndex\");\n\n    state._excludeVariableName(\"rampColor\");\n\n    state._excludeVariableName(\"finalAlpha\");\n  };\n\n  ParticleRampGradientBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      return;\n    }\n\n    state._emit2DSampler(\"rampSampler\");\n\n    state._emitVaryingFromString(\"remapRanges\", \"vec4\", \"RAMPGRADIENT\");\n\n    state.compilationString += \"\\n            #ifdef RAMPGRADIENT\\n                vec4 baseColor = \" + this.color.associatedVariableName + \";\\n                float alpha = \" + this.color.associatedVariableName + \".a;\\n\\n                float remappedColorIndex = clamp((alpha - remapRanges.x) / remapRanges.y, 0.0, 1.0);\\n\\n                vec4 rampColor = texture2D(rampSampler, vec2(1.0 - remappedColorIndex, 0.));\\n                baseColor.rgb *= rampColor.rgb;\\n\\n                // Remapped alpha\\n                float finalAlpha = baseColor.a;\\n                baseColor.a = clamp((alpha * rampColor.a - remapRanges.z) / remapRanges.w, 0.0, 1.0);\\n\\n                \" + this._declareOutput(this.rampColor, state) + \" = baseColor;\\n            #else\\n                \" + this._declareOutput(this.rampColor, state) + \" = \" + this.color.associatedVariableName + \";\\n            #endif\\n        \";\n    return this;\n  };\n\n  return ParticleRampGradientBlock;\n}(NodeMaterialBlock);\n\nexport { ParticleRampGradientBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.ParticleRampGradientBlock\"] = ParticleRampGradientBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Particle/particleRampGradientBlock.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAT,QAAkC,yBAAlC;AACA,SAAS,qCAAT,QAAsD,mDAAtD;AAEA,SAAS,wBAAT,QAAyC,sCAAzC;AAEA,SAAS,UAAT,QAA2B,4BAA3B;AAEA;;;;AAGA,IAAA,yBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+C,EAAA,SAAA,CAAA,yBAAA,EAAA,MAAA,CAAA;AAE3C;;;;;;AAIA,WAAA,yBAAA,CAAmB,IAAnB,EAA+B;AAA/B,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,wBAAwB,CAAC,QAArC,KAA8C,IADlD;;AAGI,IAAA,KAAI,CAAC,SAAL,GAAiB,IAAjB;;AAEA,IAAA,KAAI,CAAC,aAAL,CAAmB,OAAnB,EAA4B,qCAAqC,CAAC,MAAlE,EAA0E,KAA1E,EAAiF,wBAAwB,CAAC,QAA1G;;AAEA,IAAA,KAAI,CAAC,cAAL,CAAoB,WAApB,EAAiC,qCAAqC,CAAC,MAAvE,EAA+E,wBAAwB,CAAC,QAAxG;;;AACH;AAED;;;;;;AAIO,EAAA,yBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,2BAAP;AACH,GAFM;;AAOP,EAAA,MAAA,CAAA,cAAA,CAAW,yBAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFe;qBAAA;;AAAA,GAAhB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,yBAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA,YAAA;AACI,aAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACH,KAFmB;qBAAA;;AAAA,GAApB;AAIA;;;;;AAIO,EAAA,yBAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,KAAlB,EAA+C;AAC3C,IAAA,KAAK,CAAC,oBAAN,CAA2B,aAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,aAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,WAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,OAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,oBAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,WAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,YAA3B;AACH,GARM;;AAUG,EAAA,yBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,KAAtB,EAAmD;AAC/C,IAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,KAAlB;;AAEA,QAAI,KAAK,CAAC,MAAN,KAAiB,wBAAwB,CAAC,MAA9C,EAAsD;AAClD;AACH;;AAED,IAAA,KAAK,CAAC,cAAN,CAAqB,aAArB;;AACA,IAAA,KAAK,CAAC,sBAAN,CAA6B,aAA7B,EAA4C,MAA5C,EAAoD,cAApD;;AAEA,IAAA,KAAK,CAAC,iBAAN,IAA2B,yEAEA,KAAK,KAAL,CAAW,sBAFX,GAEiC,mCAFjC,GAGH,KAAK,KAAL,CAAW,sBAHR,GAG8B,+cAH9B,GAcjB,KAAK,cAAL,CAAoB,KAAK,SAAzB,EAAoC,KAApC,CAdiB,GAcyB,oDAdzB,GAgBjB,KAAK,cAAL,CAAoB,KAAK,SAAzB,EAAoC,KAApC,CAhBiB,GAgByB,KAhBzB,GAgB+B,KAAK,KAAL,CAAW,sBAhB1C,GAgBgE,iCAhB3F;AAoBA,WAAO,IAAP;AACH,GA/BS;;AAgCd,SAAA,yBAAA;AAAC,CApFD,CAA+C,iBAA/C,CAAA;;;AAsFA,UAAU,CAAC,eAAX,CAA2B,mCAA3B,IAAkE,yBAAlE","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\n\r\n/**\r\n * Block used for the particle ramp gradient section\r\n */\r\nexport class ParticleRampGradientBlock extends NodeMaterialBlock {\r\n\r\n    /**\r\n     * Create a new ParticleRampGradientBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"rampColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ParticleRampGradientBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rampColor output component\r\n     */\r\n    public get rampColor(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"remapRanges\");\r\n        state._excludeVariableName(\"rampSampler\");\r\n        state._excludeVariableName(\"baseColor\");\r\n        state._excludeVariableName(\"alpha\");\r\n        state._excludeVariableName(\"remappedColorIndex\");\r\n        state._excludeVariableName(\"rampColor\");\r\n        state._excludeVariableName(\"finalAlpha\");\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            return;\r\n        }\r\n\r\n        state._emit2DSampler(\"rampSampler\");\r\n        state._emitVaryingFromString(\"remapRanges\", \"vec4\", \"RAMPGRADIENT\");\r\n\r\n        state.compilationString += `\r\n            #ifdef RAMPGRADIENT\r\n                vec4 baseColor = ${this.color.associatedVariableName};\r\n                float alpha = ${this.color.associatedVariableName}.a;\r\n\r\n                float remappedColorIndex = clamp((alpha - remapRanges.x) / remapRanges.y, 0.0, 1.0);\r\n\r\n                vec4 rampColor = texture2D(rampSampler, vec2(1.0 - remappedColorIndex, 0.));\r\n                baseColor.rgb *= rampColor.rgb;\r\n\r\n                // Remapped alpha\r\n                float finalAlpha = baseColor.a;\r\n                baseColor.a = clamp((alpha * rampColor.a - remapRanges.z) / remapRanges.w, 0.0, 1.0);\r\n\r\n                ${this._declareOutput(this.rampColor, state)} = baseColor;\r\n            #else\r\n                ${this._declareOutput(this.rampColor, state)} = ${this.color.associatedVariableName};\r\n            #endif\r\n        `;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ParticleRampGradientBlock\"] = ParticleRampGradientBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}