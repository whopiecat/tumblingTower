{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\n/**\r\n * Block used to test if the fragment shader is front facing\r\n */\n\nvar FrontFacingBlock =\n/** @class */\nfunction (_super) {\n  __extends(FrontFacingBlock, _super);\n  /**\r\n   * Creates a new FrontFacingBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function FrontFacingBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  FrontFacingBlock.prototype.getClassName = function () {\n    return \"FrontFacingBlock\";\n  };\n\n  Object.defineProperty(FrontFacingBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FrontFacingBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      throw \"FrontFacingBlock must only be used in a fragment shader\";\n    }\n\n    var output = this._outputs[0];\n    state.compilationString += this._declareOutput(output, state) + \" = gl_FrontFacing ? 1.0 : 0.0;\\r\\n\";\n    return this;\n  };\n\n  return FrontFacingBlock;\n}(NodeMaterialBlock);\n\nexport { FrontFacingBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.FrontFacingBlock\"] = FrontFacingBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Fragment/frontFacingBlock.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAT,QAAkC,yBAAlC;AACA,SAAS,qCAAT,QAAsD,mDAAtD;AAGA,SAAS,wBAAT,QAAyC,sCAAzC;AACA,SAAS,UAAT,QAA2B,4BAA3B;AACA;;;;AAGA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;AAClC;;;;;;AAIA,WAAA,gBAAA,CAAmB,IAAnB,EAA+B;AAA/B,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,wBAAwB,CAAC,QAArC,KAA8C,IADlD;;AAGI,IAAA,KAAI,CAAC,cAAL,CAAoB,QAApB,EAA8B,qCAAqC,CAAC,KAApE,EAA2E,wBAAwB,CAAC,QAApG;;;AACH;AAED;;;;;;AAIO,EAAA,gBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,kBAAP;AACH,GAFM;;AAOP,EAAA,MAAA,CAAA,cAAA,CAAW,gBAAA,CAAA,SAAX,EAAW,QAAX,EAAiB;AAHjB;;;SAGA,YAAA;AACI,aAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACH,KAFgB;qBAAA;;AAAA,GAAjB;;AAIU,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,KAAtB,EAAmD;AAC/C,IAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,KAAlB;;AAEA,QAAI,KAAK,CAAC,MAAN,KAAiB,wBAAwB,CAAC,MAA9C,EAAsD;AAClD,YAAM,yDAAN;AACH;;AAED,QAAI,MAAM,GAAG,KAAK,QAAL,CAAc,CAAd,CAAb;AAEA,IAAA,KAAK,CAAC,iBAAN,IAA2B,KAAK,cAAL,CAAoB,MAApB,EAA4B,KAA5B,IAAqC,oCAAhE;AAEA,WAAO,IAAP;AACH,GAZS;;AAad,SAAA,gBAAA;AAAC,CAvCD,CAAsC,iBAAtC,CAAA;;;AAyCA,UAAU,CAAC,eAAX,CAA2B,0BAA3B,IAAyD,gBAAzD","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\n/**\r\n * Block used to test if the fragment shader is front facing\r\n */\r\nexport class FrontFacingBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new FrontFacingBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"FrontFacingBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            throw \"FrontFacingBlock must only be used in a fragment shader\";\r\n        }\r\n\r\n        let output = this._outputs[0];\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = gl_FrontFacing ? 1.0 : 0.0;\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.FrontFacingBlock\"] = FrontFacingBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}