{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Vector2 } from \"../Maths/math.vector\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/vrDistortionCorrection.fragment\";\n/**\r\n * VRDistortionCorrectionPostProcess used for mobile VR\r\n */\n\nvar VRDistortionCorrectionPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(VRDistortionCorrectionPostProcess, _super);\n  /**\r\n   * Initializes the VRDistortionCorrectionPostProcess\r\n   * @param name The name of the effect.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param isRightEye If this is for the right eye distortion\r\n   * @param vrMetrics All the required metrics for the VR camera\r\n   */\n\n\n  function VRDistortionCorrectionPostProcess(name, camera, isRightEye, vrMetrics) {\n    var _this = _super.call(this, name, \"vrDistortionCorrection\", ['LensCenter', 'Scale', 'ScaleIn', 'HmdWarpParam'], null, vrMetrics.postProcessScaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE) || this;\n\n    _this._isRightEye = isRightEye;\n    _this._distortionFactors = vrMetrics.distortionK;\n    _this._postProcessScaleFactor = vrMetrics.postProcessScaleFactor;\n    _this._lensCenterOffset = vrMetrics.lensCenterOffset;\n    _this.adaptScaleToCurrentViewport = true;\n\n    _this.onSizeChangedObservable.add(function () {\n      _this._scaleIn = new Vector2(2, 2 / _this.aspectRatio);\n      _this._scaleFactor = new Vector2(.5 * (1 / _this._postProcessScaleFactor), .5 * (1 / _this._postProcessScaleFactor) * _this.aspectRatio);\n      _this._lensCenter = new Vector2(_this._isRightEye ? 0.5 - _this._lensCenterOffset * 0.5 : 0.5 + _this._lensCenterOffset * 0.5, 0.5);\n    });\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setFloat2(\"LensCenter\", _this._lensCenter.x, _this._lensCenter.y);\n      effect.setFloat2(\"Scale\", _this._scaleFactor.x, _this._scaleFactor.y);\n      effect.setFloat2(\"ScaleIn\", _this._scaleIn.x, _this._scaleIn.y);\n      effect.setFloat4(\"HmdWarpParam\", _this._distortionFactors[0], _this._distortionFactors[1], _this._distortionFactors[2], _this._distortionFactors[3]);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"VRDistortionCorrectionPostProcess\" string\r\n   */\n\n\n  VRDistortionCorrectionPostProcess.prototype.getClassName = function () {\n    return \"VRDistortionCorrectionPostProcess\";\n  };\n\n  return VRDistortionCorrectionPostProcess;\n}(PostProcess);\n\nexport { VRDistortionCorrectionPostProcess };","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/vrDistortionCorrectionPostProcess.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,sBAAxB;AAIA,SAAS,OAAT,QAAwB,+BAAxB;AACA,SAAS,WAAT,QAA4B,eAA5B;AAEA,OAAO,4CAAP;AAEA;;;;AAGA,IAAA,iCAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuD,EAAA,SAAA,CAAA,iCAAA,EAAA,MAAA,CAAA;AAiBnD;;;;;;;;;AAOA,WAAA,iCAAA,CAAY,IAAZ,EAA0B,MAA1B,EAA0C,UAA1C,EAA+D,SAA/D,EAAyF;AAAzF,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,wBAAZ,EAAsC,CAClC,YADkC,EAElC,OAFkC,EAGlC,SAHkC,EAIlC,cAJkC,CAAtC,EAKG,IALH,EAKS,SAAS,CAAC,sBALnB,EAK2C,MAL3C,EAKmD,OAAO,CAAC,qBAL3D,KAKiF,IANrF;;AAQI,IAAA,KAAI,CAAC,WAAL,GAAmB,UAAnB;AACA,IAAA,KAAI,CAAC,kBAAL,GAA0B,SAAS,CAAC,WAApC;AACA,IAAA,KAAI,CAAC,uBAAL,GAA+B,SAAS,CAAC,sBAAzC;AACA,IAAA,KAAI,CAAC,iBAAL,GAAyB,SAAS,CAAC,gBAAnC;AACA,IAAA,KAAI,CAAC,2BAAL,GAAmC,IAAnC;;AAEA,IAAA,KAAI,CAAC,uBAAL,CAA6B,GAA7B,CAAiC,YAAA;AAC7B,MAAA,KAAI,CAAC,QAAL,GAAgB,IAAI,OAAJ,CAAY,CAAZ,EAAe,IAAI,KAAI,CAAC,WAAxB,CAAhB;AACA,MAAA,KAAI,CAAC,YAAL,GAAoB,IAAI,OAAJ,CAAY,MAAM,IAAI,KAAI,CAAC,uBAAf,CAAZ,EAAqD,MAAM,IAAI,KAAI,CAAC,uBAAf,IAA0C,KAAI,CAAC,WAApG,CAApB;AACA,MAAA,KAAI,CAAC,WAAL,GAAmB,IAAI,OAAJ,CAAY,KAAI,CAAC,WAAL,GAAmB,MAAM,KAAI,CAAC,iBAAL,GAAyB,GAAlD,GAAwD,MAAM,KAAI,CAAC,iBAAL,GAAyB,GAAnG,EAAwG,GAAxG,CAAnB;AACH,KAJD;;AAKA,IAAA,KAAI,CAAC,iBAAL,CAAuB,GAAvB,CAA2B,UAAC,MAAD,EAAe;AACtC,MAAA,MAAM,CAAC,SAAP,CAAiB,YAAjB,EAA+B,KAAI,CAAC,WAAL,CAAiB,CAAhD,EAAmD,KAAI,CAAC,WAAL,CAAiB,CAApE;AACA,MAAA,MAAM,CAAC,SAAP,CAAiB,OAAjB,EAA0B,KAAI,CAAC,YAAL,CAAkB,CAA5C,EAA+C,KAAI,CAAC,YAAL,CAAkB,CAAjE;AACA,MAAA,MAAM,CAAC,SAAP,CAAiB,SAAjB,EAA4B,KAAI,CAAC,QAAL,CAAc,CAA1C,EAA6C,KAAI,CAAC,QAAL,CAAc,CAA3D;AACA,MAAA,MAAM,CAAC,SAAP,CAAiB,cAAjB,EAAiC,KAAI,CAAC,kBAAL,CAAwB,CAAxB,CAAjC,EAA6D,KAAI,CAAC,kBAAL,CAAwB,CAAxB,CAA7D,EAAyF,KAAI,CAAC,kBAAL,CAAwB,CAAxB,CAAzF,EAAqH,KAAI,CAAC,kBAAL,CAAwB,CAAxB,CAArH;AACH,KALD;;;AAMH;AAxCD;;;;;;AAIO,EAAA,iCAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,mCAAP;AACH,GAFM;;AAqCX,SAAA,iCAAA;AAAC,CAlDD,CAAuD,WAAvD,CAAA","sourcesContent":["import { Vector2 } from \"../Maths/math.vector\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { VRCameraMetrics } from \"../Cameras/VR/vrCameraMetrics\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { PostProcess } from \"./postProcess\";\r\n\r\nimport \"../Shaders/vrDistortionCorrection.fragment\";\r\n\r\n/**\r\n * VRDistortionCorrectionPostProcess used for mobile VR\r\n */\r\nexport class VRDistortionCorrectionPostProcess extends PostProcess {\r\n    private _isRightEye: boolean;\r\n    private _distortionFactors: number[];\r\n    private _postProcessScaleFactor: number;\r\n    private _lensCenterOffset: number;\r\n    private _scaleIn: Vector2;\r\n    private _scaleFactor: Vector2;\r\n    private _lensCenter: Vector2;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"VRDistortionCorrectionPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDistortionCorrectionPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Initializes the VRDistortionCorrectionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param isRightEye If this is for the right eye distortion\r\n     * @param vrMetrics All the required metrics for the VR camera\r\n     */\r\n    constructor(name: string, camera: Camera, isRightEye: boolean, vrMetrics: VRCameraMetrics) {\r\n        super(name, \"vrDistortionCorrection\", [\r\n            'LensCenter',\r\n            'Scale',\r\n            'ScaleIn',\r\n            'HmdWarpParam'\r\n        ], null, vrMetrics.postProcessScaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE);\r\n\r\n        this._isRightEye = isRightEye;\r\n        this._distortionFactors = vrMetrics.distortionK;\r\n        this._postProcessScaleFactor = vrMetrics.postProcessScaleFactor;\r\n        this._lensCenterOffset = vrMetrics.lensCenterOffset;\r\n        this.adaptScaleToCurrentViewport = true;\r\n\r\n        this.onSizeChangedObservable.add(() => {\r\n            this._scaleIn = new Vector2(2, 2 / this.aspectRatio);\r\n            this._scaleFactor = new Vector2(.5 * (1 / this._postProcessScaleFactor), .5 * (1 / this._postProcessScaleFactor) * this.aspectRatio);\r\n            this._lensCenter = new Vector2(this._isRightEye ? 0.5 - this._lensCenterOffset * 0.5 : 0.5 + this._lensCenterOffset * 0.5, 0.5);\r\n        });\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat2(\"LensCenter\", this._lensCenter.x, this._lensCenter.y);\r\n            effect.setFloat2(\"Scale\", this._scaleFactor.x, this._scaleFactor.y);\r\n            effect.setFloat2(\"ScaleIn\", this._scaleIn.x, this._scaleIn.y);\r\n            effect.setFloat4(\"HmdWarpParam\", this._distortionFactors[0], this._distortionFactors[1], this._distortionFactors[2], this._distortionFactors[3]);\r\n        });\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}