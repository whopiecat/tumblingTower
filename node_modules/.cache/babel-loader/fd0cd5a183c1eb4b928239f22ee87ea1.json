{"ast":null,"code":"/**\r\n * Size containing widht and height\r\n */\nvar Size =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a Size object from the given width and height (floats).\r\n   * @param width width of the new size\r\n   * @param height height of the new size\r\n   */\n  function Size(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n  /**\r\n   * Returns a string with the Size width and height\r\n   * @returns a string with the Size width and height\r\n   */\n\n\n  Size.prototype.toString = function () {\n    return \"{W: \" + this.width + \", H: \" + this.height + \"}\";\n  };\n  /**\r\n   * \"Size\"\r\n   * @returns the string \"Size\"\r\n   */\n\n\n  Size.prototype.getClassName = function () {\n    return \"Size\";\n  };\n  /**\r\n   * Returns the Size hash code.\r\n   * @returns a hash code for a unique width and height\r\n   */\n\n\n  Size.prototype.getHashCode = function () {\n    var hash = this.width | 0;\n    hash = hash * 397 ^ (this.height | 0);\n    return hash;\n  };\n  /**\r\n   * Updates the current size from the given one.\r\n   * @param src the given size\r\n   */\n\n\n  Size.prototype.copyFrom = function (src) {\n    this.width = src.width;\n    this.height = src.height;\n  };\n  /**\r\n   * Updates in place the current Size from the given floats.\r\n   * @param width width of the new size\r\n   * @param height height of the new size\r\n   * @returns the updated Size.\r\n   */\n\n\n  Size.prototype.copyFromFloats = function (width, height) {\n    this.width = width;\n    this.height = height;\n    return this;\n  };\n  /**\r\n   * Updates in place the current Size from the given floats.\r\n   * @param width width to set\r\n   * @param height height to set\r\n   * @returns the updated Size.\r\n   */\n\n\n  Size.prototype.set = function (width, height) {\n    return this.copyFromFloats(width, height);\n  };\n  /**\r\n   * Multiplies the width and height by numbers\r\n   * @param w factor to multiple the width by\r\n   * @param h factor to multiple the height by\r\n   * @returns a new Size set with the multiplication result of the current Size and the given floats.\r\n   */\n\n\n  Size.prototype.multiplyByFloats = function (w, h) {\n    return new Size(this.width * w, this.height * h);\n  };\n  /**\r\n   * Clones the size\r\n   * @returns a new Size copied from the given one.\r\n   */\n\n\n  Size.prototype.clone = function () {\n    return new Size(this.width, this.height);\n  };\n  /**\r\n   * True if the current Size and the given one width and height are strictly equal.\r\n   * @param other the other size to compare against\r\n   * @returns True if the current Size and the given one width and height are strictly equal.\r\n   */\n\n\n  Size.prototype.equals = function (other) {\n    if (!other) {\n      return false;\n    }\n\n    return this.width === other.width && this.height === other.height;\n  };\n\n  Object.defineProperty(Size.prototype, \"surface\", {\n    /**\r\n     * The surface of the Size : width * height (float).\r\n     */\n    get: function () {\n      return this.width * this.height;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Create a new size of zero\r\n   * @returns a new Size set to (0.0, 0.0)\r\n   */\n\n  Size.Zero = function () {\n    return new Size(0.0, 0.0);\n  };\n  /**\r\n   * Sums the width and height of two sizes\r\n   * @param otherSize size to add to this size\r\n   * @returns a new Size set as the addition result of the current Size and the given one.\r\n   */\n\n\n  Size.prototype.add = function (otherSize) {\n    var r = new Size(this.width + otherSize.width, this.height + otherSize.height);\n    return r;\n  };\n  /**\r\n   * Subtracts the width and height of two\r\n   * @param otherSize size to subtract to this size\r\n   * @returns a new Size set as the subtraction result of  the given one from the current Size.\r\n   */\n\n\n  Size.prototype.subtract = function (otherSize) {\n    var r = new Size(this.width - otherSize.width, this.height - otherSize.height);\n    return r;\n  };\n  /**\r\n   * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n   * @param start starting size to lerp between\r\n   * @param end end size to lerp between\r\n   * @param amount amount to lerp between the start and end values\r\n   * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n   */\n\n\n  Size.Lerp = function (start, end, amount) {\n    var w = start.width + (end.width - start.width) * amount;\n    var h = start.height + (end.height - start.height) * amount;\n    return new Size(w, h);\n  };\n\n  return Size;\n}();\n\nexport { Size };","map":{"version":3,"sources":["../../../sourceES6/core/Maths/math.size.ts"],"names":[],"mappings":"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","sourcesContent":["\r\n/**\r\n * Interface for the size containing width and height\r\n */\r\nexport interface ISize {\r\n    /**\r\n     * Width\r\n     */\r\n    width: number;\r\n    /**\r\n     * Heighht\r\n     */\r\n    height: number;\r\n}\r\n\r\n/**\r\n * Size containing widht and height\r\n */\r\nexport class Size implements ISize {\r\n    /**\r\n     * Width\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Height\r\n     */\r\n    public height: number;\r\n\r\n    /**\r\n     * Creates a Size object from the given width and height (floats).\r\n     * @param width width of the new size\r\n     * @param height height of the new size\r\n     */\r\n    public constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Returns a string with the Size width and height\r\n     * @returns a string with the Size width and height\r\n     */\r\n    public toString(): string {\r\n        return `{W: ${this.width}, H: ${this.height}}`;\r\n    }\r\n    /**\r\n     * \"Size\"\r\n     * @returns the string \"Size\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Size\";\r\n    }\r\n    /**\r\n     * Returns the Size hash code.\r\n     * @returns a hash code for a unique width and height\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.width | 0;\r\n        hash = (hash * 397) ^ (this.height | 0);\r\n        return hash;\r\n    }\r\n    /**\r\n     * Updates the current size from the given one.\r\n     * @param src the given size\r\n     */\r\n    public copyFrom(src: Size) {\r\n        this.width = src.width;\r\n        this.height = src.height;\r\n    }\r\n    /**\r\n     * Updates in place the current Size from the given floats.\r\n     * @param width width of the new size\r\n     * @param height height of the new size\r\n     * @returns the updated Size.\r\n     */\r\n    public copyFromFloats(width: number, height: number): Size {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates in place the current Size from the given floats.\r\n     * @param width width to set\r\n     * @param height height to set\r\n     * @returns the updated Size.\r\n     */\r\n    public set(width: number, height: number): Size {\r\n        return this.copyFromFloats(width, height);\r\n    }\r\n    /**\r\n     * Multiplies the width and height by numbers\r\n     * @param w factor to multiple the width by\r\n     * @param h factor to multiple the height by\r\n     * @returns a new Size set with the multiplication result of the current Size and the given floats.\r\n     */\r\n    public multiplyByFloats(w: number, h: number): Size {\r\n        return new Size(this.width * w, this.height * h);\r\n    }\r\n    /**\r\n     * Clones the size\r\n     * @returns a new Size copied from the given one.\r\n     */\r\n    public clone(): Size {\r\n        return new Size(this.width, this.height);\r\n    }\r\n    /**\r\n     * True if the current Size and the given one width and height are strictly equal.\r\n     * @param other the other size to compare against\r\n     * @returns True if the current Size and the given one width and height are strictly equal.\r\n     */\r\n    public equals(other: Size): boolean {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        return (this.width === other.width) && (this.height === other.height);\r\n    }\r\n    /**\r\n     * The surface of the Size : width * height (float).\r\n     */\r\n    public get surface(): number {\r\n        return this.width * this.height;\r\n    }\r\n    /**\r\n     * Create a new size of zero\r\n     * @returns a new Size set to (0.0, 0.0)\r\n     */\r\n    public static Zero(): Size {\r\n        return new Size(0.0, 0.0);\r\n    }\r\n    /**\r\n     * Sums the width and height of two sizes\r\n     * @param otherSize size to add to this size\r\n     * @returns a new Size set as the addition result of the current Size and the given one.\r\n     */\r\n    public add(otherSize: Size): Size {\r\n        let r = new Size(this.width + otherSize.width, this.height + otherSize.height);\r\n        return r;\r\n    }\r\n    /**\r\n     * Subtracts the width and height of two\r\n     * @param otherSize size to subtract to this size\r\n     * @returns a new Size set as the subtraction result of  the given one from the current Size.\r\n     */\r\n    public subtract(otherSize: Size): Size {\r\n        let r = new Size(this.width - otherSize.width, this.height - otherSize.height);\r\n        return r;\r\n    }\r\n    /**\r\n     * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n     * @param start starting size to lerp between\r\n     * @param end end size to lerp between\r\n     * @param amount amount to lerp between the start and end values\r\n     * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n     */\r\n    public static Lerp(start: Size, end: Size, amount: number): Size {\r\n        var w = start.width + ((end.width - start.width) * amount);\r\n        var h = start.height + ((end.height - start.height) * amount);\r\n\r\n        return new Size(w, h);\r\n    }\r\n\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}