{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector\";\n/**\r\n * Holds the data for the raycast result\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar PhysicsRaycastResult =\n/** @class */\nfunction () {\n  function PhysicsRaycastResult() {\n    this._hasHit = false;\n    this._hitDistance = 0;\n    this._hitNormalWorld = Vector3.Zero();\n    this._hitPointWorld = Vector3.Zero();\n    this._rayFromWorld = Vector3.Zero();\n    this._rayToWorld = Vector3.Zero();\n  }\n\n  Object.defineProperty(PhysicsRaycastResult.prototype, \"hasHit\", {\n    /**\r\n     * Gets if there was a hit\r\n     */\n    get: function () {\n      return this._hasHit;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsRaycastResult.prototype, \"hitDistance\", {\n    /**\r\n     * Gets the distance from the hit\r\n     */\n    get: function () {\n      return this._hitDistance;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsRaycastResult.prototype, \"hitNormalWorld\", {\n    /**\r\n     * Gets the hit normal/direction in the world\r\n     */\n    get: function () {\n      return this._hitNormalWorld;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsRaycastResult.prototype, \"hitPointWorld\", {\n    /**\r\n     * Gets the hit point in the world\r\n     */\n    get: function () {\n      return this._hitPointWorld;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsRaycastResult.prototype, \"rayFromWorld\", {\n    /**\r\n     * Gets the ray \"start point\" of the ray in the world\r\n     */\n    get: function () {\n      return this._rayFromWorld;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsRaycastResult.prototype, \"rayToWorld\", {\n    /**\r\n     * Gets the ray \"end point\" of the ray in the world\r\n     */\n    get: function () {\n      return this._rayToWorld;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Sets the hit data (normal & point in world space)\r\n   * @param hitNormalWorld defines the normal in world space\r\n   * @param hitPointWorld defines the point in world space\r\n   */\n\n  PhysicsRaycastResult.prototype.setHitData = function (hitNormalWorld, hitPointWorld) {\n    this._hasHit = true;\n    this._hitNormalWorld = new Vector3(hitNormalWorld.x, hitNormalWorld.y, hitNormalWorld.z);\n    this._hitPointWorld = new Vector3(hitPointWorld.x, hitPointWorld.y, hitPointWorld.z);\n  };\n  /**\r\n   * Sets the distance from the start point to the hit point\r\n   * @param distance\r\n   */\n\n\n  PhysicsRaycastResult.prototype.setHitDistance = function (distance) {\n    this._hitDistance = distance;\n  };\n  /**\r\n   * Calculates the distance manually\r\n   */\n\n\n  PhysicsRaycastResult.prototype.calculateHitDistance = function () {\n    this._hitDistance = Vector3.Distance(this._rayFromWorld, this._hitPointWorld);\n  };\n  /**\r\n   * Resets all the values to default\r\n   * @param from The from point on world space\r\n   * @param to The to point on world space\r\n   */\n\n\n  PhysicsRaycastResult.prototype.reset = function (from, to) {\n    if (from === void 0) {\n      from = Vector3.Zero();\n    }\n\n    if (to === void 0) {\n      to = Vector3.Zero();\n    }\n\n    this._rayFromWorld = from;\n    this._rayToWorld = to;\n    this._hasHit = false;\n    this._hitDistance = 0;\n    this._hitNormalWorld = Vector3.Zero();\n    this._hitPointWorld = Vector3.Zero();\n  };\n\n  return PhysicsRaycastResult;\n}();\n\nexport { PhysicsRaycastResult };","map":{"version":3,"sources":["../../../sourceES6/core/Physics/physicsRaycastResult.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector3 } from \"../Maths/math.vector\";\r\n\r\n/**\r\n * Holds the data for the raycast result\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class PhysicsRaycastResult {\r\n\r\n    private _hasHit: boolean = false;\r\n\r\n    private _hitDistance: number = 0;\r\n    private _hitNormalWorld: Vector3 = Vector3.Zero();\r\n    private _hitPointWorld: Vector3 = Vector3.Zero();\r\n    private _rayFromWorld: Vector3 = Vector3.Zero();\r\n    private _rayToWorld: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Gets if there was a hit\r\n     */\r\n    get hasHit(): boolean {\r\n        return this._hasHit;\r\n    }\r\n\r\n    /**\r\n     * Gets the distance from the hit\r\n     */\r\n    get hitDistance(): number {\r\n        return this._hitDistance;\r\n    }\r\n\r\n    /**\r\n     * Gets the hit normal/direction in the world\r\n     */\r\n    get hitNormalWorld(): Vector3 {\r\n        return this._hitNormalWorld;\r\n    }\r\n\r\n    /**\r\n     * Gets the hit point in the world\r\n     */\r\n    get hitPointWorld(): Vector3 {\r\n        return this._hitPointWorld;\r\n    }\r\n\r\n    /**\r\n     * Gets the ray \"start point\" of the ray in the world\r\n     */\r\n    get rayFromWorld(): Vector3 {\r\n        return this._rayFromWorld;\r\n    }\r\n\r\n    /**\r\n     * Gets the ray \"end point\" of the ray in the world\r\n     */\r\n    get rayToWorld(): Vector3 {\r\n        return this._rayToWorld;\r\n    }\r\n\r\n    /**\r\n     * Sets the hit data (normal & point in world space)\r\n     * @param hitNormalWorld defines the normal in world space\r\n     * @param hitPointWorld defines the point in world space\r\n     */\r\n    public setHitData(hitNormalWorld: IXYZ, hitPointWorld: IXYZ) {\r\n        this._hasHit = true;\r\n        this._hitNormalWorld = new Vector3(hitNormalWorld.x, hitNormalWorld.y, hitNormalWorld.z);\r\n        this._hitPointWorld = new Vector3(hitPointWorld.x, hitPointWorld.y, hitPointWorld.z);\r\n    }\r\n\r\n    /**\r\n     * Sets the distance from the start point to the hit point\r\n     * @param distance\r\n     */\r\n    public setHitDistance(distance: number) {\r\n        this._hitDistance = distance;\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance manually\r\n     */\r\n    public calculateHitDistance() {\r\n        this._hitDistance = Vector3.Distance(this._rayFromWorld, this._hitPointWorld);\r\n    }\r\n\r\n    /**\r\n     * Resets all the values to default\r\n     * @param from The from point on world space\r\n     * @param to The to point on world space\r\n     */\r\n    public reset(from: Vector3 = Vector3.Zero(), to: Vector3 = Vector3.Zero()) {\r\n        this._rayFromWorld = from;\r\n        this._rayToWorld = to;\r\n\r\n        this._hasHit = false;\r\n        this._hitDistance = 0;\r\n\r\n        this._hitNormalWorld = Vector3.Zero();\r\n        this._hitPointWorld = Vector3.Zero();\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Interface for the size containing width and height\r\n */\r\ninterface IXYZ {\r\n    /**\r\n     * X\r\n     */\r\n    x: number;\r\n\r\n    /**\r\n     * Y\r\n     */\r\n    y: number;\r\n\r\n    /**\r\n     * Z\r\n     */\r\n    z: number;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}