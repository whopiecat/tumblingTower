{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\nimport { Logger } from '../../Misc/logger';\nimport { ThinEngine } from '../thinEngine';\n\nThinEngine.prototype.createRenderTargetCubeTexture = function (size, options) {\n  var fullOptions = __assign({\n    generateMipMaps: true,\n    generateDepthBuffer: true,\n    generateStencilBuffer: false,\n    type: 0,\n    samplingMode: 3,\n    format: 5\n  }, options);\n\n  fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\n\n  if (fullOptions.type === 1 && !this._caps.textureFloatLinearFiltering) {\n    // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n    fullOptions.samplingMode = 1;\n  } else if (fullOptions.type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n    // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n    fullOptions.samplingMode = 1;\n  }\n\n  var gl = this._gl;\n  var texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\n\n  this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n\n  var filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps);\n\n  if (fullOptions.type === 1 && !this._caps.textureFloat) {\n    fullOptions.type = 0;\n    Logger.Warn(\"Float textures are not supported. Cube render target forced to TEXTURETYPE_UNESIGNED_BYTE type\");\n  }\n\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  for (var face = 0; face < 6; face++) {\n    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, 0, this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format), size, size, 0, this._getInternalFormat(fullOptions.format), this._getWebGLTextureType(fullOptions.type), null);\n  } // Create the framebuffer\n\n\n  var framebuffer = gl.createFramebuffer();\n\n  this._bindUnboundFramebuffer(framebuffer);\n\n  texture._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer, fullOptions.generateDepthBuffer, size, size); // MipMaps\n\n  if (fullOptions.generateMipMaps) {\n    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n  } // Unbind\n\n\n  this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n\n  this._bindUnboundFramebuffer(null);\n\n  texture._framebuffer = framebuffer;\n  texture.width = size;\n  texture.height = size;\n  texture.isReady = true;\n  texture.isCube = true;\n  texture.samples = 1;\n  texture.generateMipMaps = fullOptions.generateMipMaps;\n  texture.samplingMode = fullOptions.samplingMode;\n  texture.type = fullOptions.type;\n  texture.format = fullOptions.format;\n  texture._generateDepthBuffer = fullOptions.generateDepthBuffer;\n  texture._generateStencilBuffer = fullOptions.generateStencilBuffer;\n\n  this._internalTexturesCache.push(texture);\n\n  return texture;\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/Extensions/engine.renderTargetCube.ts"],"names":[],"mappings":"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","sourcesContent":["import { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\r\nimport { Logger } from '../../Misc/logger';\r\nimport { RenderTargetCreationOptions } from '../../Materials/Textures/renderTargetCreationOptions';\r\n\r\nimport { ThinEngine } from '../thinEngine';\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a new render target cube texture\r\n         * @param size defines the size of the texture\r\n         * @param options defines the options used to create the texture\r\n         * @returns a new render target cube texture stored in an InternalTexture\r\n         */\r\n        createRenderTargetCubeTexture(size: number, options?: Partial<RenderTargetCreationOptions>): InternalTexture;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createRenderTargetCubeTexture = function(size: number, options?: Partial<RenderTargetCreationOptions>): InternalTexture {\r\n    let fullOptions = {\r\n        generateMipMaps: true,\r\n        generateDepthBuffer: true,\r\n        generateStencilBuffer: false,\r\n        type: 0,\r\n        samplingMode: 3,\r\n        format: 5,\r\n        ...options\r\n    };\r\n    fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\r\n\r\n    if (fullOptions.type === 1 && !this._caps.textureFloatLinearFiltering) {\r\n        // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\r\n        fullOptions.samplingMode = 1;\r\n    }\r\n    else if (fullOptions.type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\r\n        // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\r\n        fullOptions.samplingMode = 1;\r\n    }\r\n    var gl = this._gl;\r\n\r\n    var texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n    var filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps);\r\n\r\n    if (fullOptions.type === 1 && !this._caps.textureFloat) {\r\n        fullOptions.type = 0;\r\n        Logger.Warn(\"Float textures are not supported. Cube render target forced to TEXTURETYPE_UNESIGNED_BYTE type\");\r\n    }\r\n\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n    for (var face = 0; face < 6; face++) {\r\n        gl.texImage2D((gl.TEXTURE_CUBE_MAP_POSITIVE_X + face), 0, this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format), size, size, 0, this._getInternalFormat(fullOptions.format), this._getWebGLTextureType(fullOptions.type), null);\r\n    }\r\n\r\n    // Create the framebuffer\r\n    var framebuffer = gl.createFramebuffer();\r\n    this._bindUnboundFramebuffer(framebuffer);\r\n\r\n    texture._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer, fullOptions.generateDepthBuffer, size, size);\r\n\r\n    // MipMaps\r\n    if (fullOptions.generateMipMaps) {\r\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n    }\r\n\r\n    // Unbind\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    texture._framebuffer = framebuffer;\r\n    texture.width = size;\r\n    texture.height = size;\r\n    texture.isReady = true;\r\n    texture.isCube = true;\r\n    texture.samples = 1;\r\n    texture.generateMipMaps = fullOptions.generateMipMaps;\r\n    texture.samplingMode = fullOptions.samplingMode;\r\n    texture.type = fullOptions.type;\r\n    texture.format = fullOptions.format;\r\n    texture._generateDepthBuffer = fullOptions.generateDepthBuffer;\r\n    texture._generateStencilBuffer = fullOptions.generateStencilBuffer;\r\n\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    return texture;\r\n};"],"sourceRoot":""},"metadata":{},"sourceType":"module"}