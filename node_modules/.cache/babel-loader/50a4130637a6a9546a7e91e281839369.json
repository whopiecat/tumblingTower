{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\nimport { Tools } from '../../Misc/tools';\n/**\r\n * Manage the mouse wheel inputs to control a follow camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FollowCameraMouseWheelInput =\n/** @class */\nfunction () {\n  function FollowCameraMouseWheelInput() {\n    /**\r\n     * Moue wheel controls zoom. (Mouse wheel modifies camera.radius value.)\r\n     */\n    this.axisControlRadius = true;\n    /**\r\n     * Moue wheel controls height. (Mouse wheel modifies camera.heightOffset value.)\r\n     */\n\n    this.axisControlHeight = false;\n    /**\r\n     * Moue wheel controls angle. (Mouse wheel modifies camera.rotationOffset value.)\r\n     */\n\n    this.axisControlRotation = false;\n    /**\r\n     * Gets or Set the mouse wheel precision or how fast is the camera moves in\r\n     * relation to mouseWheel events.\r\n     */\n\n    this.wheelPrecision = 3.0;\n    /**\r\n     * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when wheel is used.\r\n     */\n\n    this.wheelDeltaPercentage = 0;\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  FollowCameraMouseWheelInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this;\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    this._wheel = function (p, s) {\n      // sanity check - this should be a PointerWheel event.\n      if (p.type !== PointerEventTypes.POINTERWHEEL) {\n        return;\n      }\n\n      var event = p.event;\n      var delta = 0; // Chrome, Safari: event.deltaY\n      // IE: event.wheelDelta\n      // Firefox: event.detail (inverted)\n\n      var wheelDelta = Math.max(-1, Math.min(1, event.deltaY || event.wheelDelta || -event.detail));\n\n      if (_this.wheelDeltaPercentage) {\n        console.assert(_this.axisControlRadius + _this.axisControlHeight + _this.axisControlRotation <= 1, \"wheelDeltaPercentage only usable when mouse wheel \" + \"controlls ONE axis. \" + \"Currently enabled: \" + \"axisControlRadius: \" + _this.axisControlRadius + \", axisControlHeightOffset: \" + _this.axisControlHeight + \", axisControlRotationOffset: \" + _this.axisControlRotation);\n\n        if (_this.axisControlRadius) {\n          delta = wheelDelta * 0.01 * _this.wheelDeltaPercentage * _this.camera.radius;\n        } else if (_this.axisControlHeight) {\n          delta = wheelDelta * 0.01 * _this.wheelDeltaPercentage * _this.camera.heightOffset;\n        } else if (_this.axisControlRotation) {\n          delta = wheelDelta * 0.01 * _this.wheelDeltaPercentage * _this.camera.rotationOffset;\n        }\n      } else {\n        delta = wheelDelta * _this.wheelPrecision;\n      }\n\n      if (delta) {\n        if (_this.axisControlRadius) {\n          _this.camera.radius += delta;\n        } else if (_this.axisControlHeight) {\n          _this.camera.heightOffset -= delta;\n        } else if (_this.axisControlRotation) {\n          _this.camera.rotationOffset -= delta;\n        }\n      }\n\n      if (event.preventDefault) {\n        if (!noPreventDefault) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FollowCameraMouseWheelInput.prototype.detachControl = function (ignored) {\n    if (this._observer) {\n      this.camera.getScene().onPointerObservable.remove(this._observer);\n      this._observer = null;\n      this._wheel = null;\n    }\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  FollowCameraMouseWheelInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraMouseWheelInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FollowCameraMouseWheelInput.prototype.getSimpleName = function () {\n    return \"mousewheel\";\n  };\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"axisControlRadius\", void 0);\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"axisControlHeight\", void 0);\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"axisControlRotation\", void 0);\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"wheelPrecision\", void 0);\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"wheelDeltaPercentage\", void 0);\n\n  return FollowCameraMouseWheelInput;\n}();\n\nexport { FollowCameraMouseWheelInput };\nCameraInputTypes[\"FollowCameraMouseWheelInput\"] = FollowCameraMouseWheelInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/followCameraMouseWheelInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { EventState, Observer } from \"../../Misc/observable\";\r\nimport { FollowCamera } from \"../../Cameras/followCamera\";\r\nimport { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { PointerInfo, PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Tools } from '../../Misc/tools';\r\n\r\n/**\r\n * Manage the mouse wheel inputs to control a follow camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FollowCameraMouseWheelInput implements ICameraInput<FollowCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FollowCamera;\r\n\r\n    /**\r\n     * Moue wheel controls zoom. (Mouse wheel modifies camera.radius value.)\r\n     */\r\n    @serialize()\r\n    public axisControlRadius: boolean = true;\r\n\r\n    /**\r\n     * Moue wheel controls height. (Mouse wheel modifies camera.heightOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisControlHeight: boolean = false;\r\n\r\n    /**\r\n     * Moue wheel controls angle. (Mouse wheel modifies camera.rotationOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisControlRotation: boolean = false;\r\n\r\n    /**\r\n     * Gets or Set the mouse wheel precision or how fast is the camera moves in\r\n     * relation to mouseWheel events.\r\n     */\r\n    @serialize()\r\n    public wheelPrecision = 3.0;\r\n\r\n    /**\r\n     * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when wheel is used.\r\n     */\r\n    @serialize()\r\n    public wheelDeltaPercentage = 0;\r\n\r\n    private _wheel: Nullable<(p: PointerInfo, s: EventState) => void>;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        this._wheel = (p, s) => {\r\n            // sanity check - this should be a PointerWheel event.\r\n            if (p.type !== PointerEventTypes.POINTERWHEEL) { return; }\r\n            var event = <MouseWheelEvent>p.event;\r\n            var delta = 0;\r\n\r\n            // Chrome, Safari: event.deltaY\r\n            // IE: event.wheelDelta\r\n            // Firefox: event.detail (inverted)\r\n            var wheelDelta = Math.max(-1, Math.min(1,\r\n              (event.deltaY || (<any>event).wheelDelta || -event.detail)));\r\n            if (this.wheelDeltaPercentage) {\r\n                console.assert((<number>(<unknown>this.axisControlRadius) +\r\n                                <number>(<unknown>this.axisControlHeight) +\r\n                                <number>(<unknown>this.axisControlRotation)) <= 1,\r\n                               \"wheelDeltaPercentage only usable when mouse wheel \" +\r\n                               \"controlls ONE axis. \" +\r\n                               \"Currently enabled: \" +\r\n                               \"axisControlRadius: \" + this.axisControlRadius +\r\n                               \", axisControlHeightOffset: \" + this.axisControlHeight +\r\n                               \", axisControlRotationOffset: \" + this.axisControlRotation);\r\n\r\n                if (this.axisControlRadius) {\r\n                    delta =\r\n                        wheelDelta * 0.01 * this.wheelDeltaPercentage *\r\n                        this.camera.radius;\r\n                } else if (this.axisControlHeight) {\r\n                    delta =\r\n                        wheelDelta * 0.01 * this.wheelDeltaPercentage *\r\n                        this.camera.heightOffset;\r\n                } else if (this.axisControlRotation) {\r\n                    delta =\r\n                        wheelDelta * 0.01 * this.wheelDeltaPercentage *\r\n                        this.camera.rotationOffset;\r\n                }\r\n            } else {\r\n                delta = wheelDelta * this.wheelPrecision;\r\n            }\r\n\r\n            if (delta) {\r\n                if (this.axisControlRadius) {\r\n                    this.camera.radius += delta;\r\n                } else if (this.axisControlHeight) {\r\n                    this.camera.heightOffset -= delta;\r\n                } else if (this.axisControlRotation) {\r\n                    this.camera.rotationOffset -= delta;\r\n                }\r\n            }\r\n\r\n            if (event.preventDefault) {\r\n                if (!noPreventDefault) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        if (this._observer) {\r\n            this.camera.getScene().onPointerObservable.remove(this._observer);\r\n            this._observer = null;\r\n            this._wheel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mousewheel\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FollowCameraMouseWheelInput\"] = FollowCameraMouseWheelInput;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}