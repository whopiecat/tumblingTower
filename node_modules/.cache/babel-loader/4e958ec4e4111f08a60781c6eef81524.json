{"ast":null,"code":"import { SmartArrayNoDuplicate } from \"../../Misc/smartArray\";\nimport { OctreeBlock } from \"./octreeBlock\";\n/**\r\n * Octrees are a really powerful data structure that can quickly select entities based on space coordinates.\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\r\n */\n\nvar Octree =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a octree\r\n   * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\r\n   * @param creationFunc function to be used to instatiate the octree\r\n   * @param maxBlockCapacity defines the maximum number of meshes you want on your octree's leaves (default: 64)\r\n   * @param maxDepth defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 8 8 = 512 blocks :) (This parameter takes precedence over capacity.)\r\n   */\n  function Octree(creationFunc, maxBlockCapacity,\n  /** Defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 8 8 = 512 blocks :) (This parameter takes precedence over capacity.) */\n  maxDepth) {\n    if (maxDepth === void 0) {\n      maxDepth = 2;\n    }\n\n    this.maxDepth = maxDepth;\n    /**\r\n     * Content stored in the octree\r\n     */\n\n    this.dynamicContent = new Array();\n    this._maxBlockCapacity = maxBlockCapacity || 64;\n    this._selectionContent = new SmartArrayNoDuplicate(1024);\n    this._creationFunc = creationFunc;\n  } // Methods\n\n  /**\r\n   * Updates the octree by adding blocks for the passed in meshes within the min and max world parameters\r\n   * @param worldMin worldMin for the octree blocks var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\r\n   * @param worldMax worldMax for the octree blocks var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\r\n   * @param entries meshes to be added to the octree blocks\r\n   */\n\n\n  Octree.prototype.update = function (worldMin, worldMax, entries) {\n    OctreeBlock._CreateBlocks(worldMin, worldMax, entries, this._maxBlockCapacity, 0, this.maxDepth, this, this._creationFunc);\n  };\n  /**\r\n   * Adds a mesh to the octree\r\n   * @param entry Mesh to add to the octree\r\n   */\n\n\n  Octree.prototype.addMesh = function (entry) {\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.addEntry(entry);\n    }\n  };\n  /**\r\n   * Remove an element from the octree\r\n   * @param entry defines the element to remove\r\n   */\n\n\n  Octree.prototype.removeMesh = function (entry) {\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.removeEntry(entry);\n    }\n  };\n  /**\r\n   * Selects an array of meshes within the frustum\r\n   * @param frustumPlanes The frustum planes to use which will select all meshes within it\r\n   * @param allowDuplicate If duplicate objects are allowed in the resulting object array\r\n   * @returns array of meshes within the frustum\r\n   */\n\n\n  Octree.prototype.select = function (frustumPlanes, allowDuplicate) {\n    this._selectionContent.reset();\n\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.select(frustumPlanes, this._selectionContent, allowDuplicate);\n    }\n\n    if (allowDuplicate) {\n      this._selectionContent.concat(this.dynamicContent);\n    } else {\n      this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\n    }\n\n    return this._selectionContent;\n  };\n  /**\r\n   * Test if the octree intersect with the given bounding sphere and if yes, then add its content to the selection array\r\n   * @param sphereCenter defines the bounding sphere center\r\n   * @param sphereRadius defines the bounding sphere radius\r\n   * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n   * @returns an array of objects that intersect the sphere\r\n   */\n\n\n  Octree.prototype.intersects = function (sphereCenter, sphereRadius, allowDuplicate) {\n    this._selectionContent.reset();\n\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.intersects(sphereCenter, sphereRadius, this._selectionContent, allowDuplicate);\n    }\n\n    if (allowDuplicate) {\n      this._selectionContent.concat(this.dynamicContent);\n    } else {\n      this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\n    }\n\n    return this._selectionContent;\n  };\n  /**\r\n  * Test if the octree intersect with the given ray and if yes, then add its content to resulting array\r\n   * @param ray defines the ray to test with\r\n   * @returns array of intersected objects\r\n   */\n\n\n  Octree.prototype.intersectsRay = function (ray) {\n    this._selectionContent.reset();\n\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.intersectsRay(ray, this._selectionContent);\n    }\n\n    this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\n\n    return this._selectionContent;\n  };\n  /**\r\n   * Adds a mesh into the octree block if it intersects the block\r\n   */\n\n\n  Octree.CreationFuncForMeshes = function (entry, block) {\n    var boundingInfo = entry.getBoundingInfo();\n\n    if (!entry.isBlocked && boundingInfo.boundingBox.intersectsMinMax(block.minPoint, block.maxPoint)) {\n      block.entries.push(entry);\n    }\n  };\n  /**\r\n   * Adds a submesh into the octree block if it intersects the block\r\n   */\n\n\n  Octree.CreationFuncForSubMeshes = function (entry, block) {\n    var boundingInfo = entry.getBoundingInfo();\n\n    if (boundingInfo.boundingBox.intersectsMinMax(block.minPoint, block.maxPoint)) {\n      block.entries.push(entry);\n    }\n  };\n\n  return Octree;\n}();\n\nexport { Octree };","map":{"version":3,"sources":["../../../../sourceES6/core/Culling/Octrees/octree.ts"],"names":[],"mappings":"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","sourcesContent":["import { SmartArray, SmartArrayNoDuplicate } from \"../../Misc/smartArray\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport { OctreeBlock } from \"./octreeBlock\";\r\nimport { Plane } from '../../Maths/math.plane';\r\n\r\n/**\r\n * Octrees are a really powerful data structure that can quickly select entities based on space coordinates.\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\r\n */\r\nexport class Octree<T> {\r\n    /**\r\n     * Blocks within the octree containing objects\r\n     */\r\n    public blocks: Array<OctreeBlock<T>>;\r\n    /**\r\n     * Content stored in the octree\r\n     */\r\n    public dynamicContent = new Array<T>();\r\n\r\n    private _maxBlockCapacity: number;\r\n    private _selectionContent: SmartArrayNoDuplicate<T>;\r\n    private _creationFunc: (entry: T, block: OctreeBlock<T>) => void;\r\n\r\n    /**\r\n     * Creates a octree\r\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\r\n     * @param creationFunc function to be used to instatiate the octree\r\n     * @param maxBlockCapacity defines the maximum number of meshes you want on your octree's leaves (default: 64)\r\n     * @param maxDepth defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 8 8 = 512 blocks :) (This parameter takes precedence over capacity.)\r\n     */\r\n    constructor(creationFunc: (\r\n        entry: T,\r\n        block: OctreeBlock<T>) => void,\r\n        maxBlockCapacity?: number,\r\n        /** Defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 8 8 = 512 blocks :) (This parameter takes precedence over capacity.) */\r\n        public maxDepth = 2\r\n    ) {\r\n        this._maxBlockCapacity = maxBlockCapacity || 64;\r\n        this._selectionContent = new SmartArrayNoDuplicate<T>(1024);\r\n        this._creationFunc = creationFunc;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Updates the octree by adding blocks for the passed in meshes within the min and max world parameters\r\n     * @param worldMin worldMin for the octree blocks var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\r\n     * @param worldMax worldMax for the octree blocks var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\r\n     * @param entries meshes to be added to the octree blocks\r\n     */\r\n    public update(worldMin: Vector3, worldMax: Vector3, entries: T[]): void {\r\n        OctreeBlock._CreateBlocks(worldMin, worldMax, entries, this._maxBlockCapacity, 0, this.maxDepth, this, this._creationFunc);\r\n    }\r\n\r\n    /**\r\n     * Adds a mesh to the octree\r\n     * @param entry Mesh to add to the octree\r\n     */\r\n    public addMesh(entry: T): void {\r\n        for (var index = 0; index < this.blocks.length; index++) {\r\n            var block = this.blocks[index];\r\n            block.addEntry(entry);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an element from the octree\r\n     * @param entry defines the element to remove\r\n     */\r\n    public removeMesh(entry: T): void {\r\n        for (var index = 0; index < this.blocks.length; index++) {\r\n            var block = this.blocks[index];\r\n            block.removeEntry(entry);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selects an array of meshes within the frustum\r\n     * @param frustumPlanes The frustum planes to use which will select all meshes within it\r\n     * @param allowDuplicate If duplicate objects are allowed in the resulting object array\r\n     * @returns array of meshes within the frustum\r\n     */\r\n    public select(frustumPlanes: Plane[], allowDuplicate?: boolean): SmartArray<T> {\r\n        this._selectionContent.reset();\r\n\r\n        for (var index = 0; index < this.blocks.length; index++) {\r\n            var block = this.blocks[index];\r\n            block.select(frustumPlanes, this._selectionContent, allowDuplicate);\r\n        }\r\n\r\n        if (allowDuplicate) {\r\n            this._selectionContent.concat(this.dynamicContent);\r\n        } else {\r\n            this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\r\n        }\r\n\r\n        return this._selectionContent;\r\n    }\r\n\r\n    /**\r\n     * Test if the octree intersect with the given bounding sphere and if yes, then add its content to the selection array\r\n     * @param sphereCenter defines the bounding sphere center\r\n     * @param sphereRadius defines the bounding sphere radius\r\n     * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n     * @returns an array of objects that intersect the sphere\r\n     */\r\n    public intersects(sphereCenter: Vector3, sphereRadius: number, allowDuplicate?: boolean): SmartArray<T> {\r\n        this._selectionContent.reset();\r\n\r\n        for (var index = 0; index < this.blocks.length; index++) {\r\n            var block = this.blocks[index];\r\n            block.intersects(sphereCenter, sphereRadius, this._selectionContent, allowDuplicate);\r\n        }\r\n\r\n        if (allowDuplicate) {\r\n            this._selectionContent.concat(this.dynamicContent);\r\n        } else {\r\n            this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\r\n        }\r\n\r\n        return this._selectionContent;\r\n    }\r\n\r\n    /**\r\n    * Test if the octree intersect with the given ray and if yes, then add its content to resulting array\r\n     * @param ray defines the ray to test with\r\n     * @returns array of intersected objects\r\n     */\r\n    public intersectsRay(ray: Ray): SmartArray<T> {\r\n        this._selectionContent.reset();\r\n\r\n        for (var index = 0; index < this.blocks.length; index++) {\r\n            var block = this.blocks[index];\r\n            block.intersectsRay(ray, this._selectionContent);\r\n        }\r\n\r\n        this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\r\n\r\n        return this._selectionContent;\r\n    }\r\n\r\n    /**\r\n     * Adds a mesh into the octree block if it intersects the block\r\n     */\r\n    public static CreationFuncForMeshes = (entry: AbstractMesh, block: OctreeBlock<AbstractMesh>): void => {\r\n        let boundingInfo = entry.getBoundingInfo();\r\n        if (!entry.isBlocked && boundingInfo.boundingBox.intersectsMinMax(block.minPoint, block.maxPoint)) {\r\n            block.entries.push(entry);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a submesh into the octree block if it intersects the block\r\n     */\r\n    public static CreationFuncForSubMeshes = (entry: SubMesh, block: OctreeBlock<SubMesh>): void => {\r\n        let boundingInfo = entry.getBoundingInfo();\r\n        if (boundingInfo.boundingBox.intersectsMinMax(block.minPoint, block.maxPoint)) {\r\n            block.entries.push(entry);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}