{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Observable } from \"../../Misc/observable\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\nimport { Tools } from \"../../Misc/tools\";\n/**\r\n * Manage the mouse inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FreeCameraMouseInput =\n/** @class */\nfunction () {\n  /**\r\n   * Manage the mouse inputs to control the movement of a free camera.\r\n   * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n   * @param touchEnabled Defines if touch is enabled or not\r\n   */\n  function FreeCameraMouseInput(\n  /**\r\n   * Define if touch is enabled in the mouse input\r\n   */\n  touchEnabled) {\n    if (touchEnabled === void 0) {\n      touchEnabled = true;\n    }\n\n    this.touchEnabled = touchEnabled;\n    /**\r\n     * Defines the buttons associated with the input to handle camera move.\r\n     */\n\n    this.buttons = [0, 1, 2];\n    /**\r\n     * Defines the pointer angular sensibility  along the X and Y axis or how fast is the camera rotating.\r\n     */\n\n    this.angularSensibility = 2000.0;\n    this.previousPosition = null;\n    /**\r\n     * Observable for when a pointer move event occurs containing the move offset\r\n     */\n\n    this.onPointerMovedObservable = new Observable();\n    /**\r\n     * @hidden\r\n     * If the camera should be rotated automatically based on pointer movement\r\n     */\n\n    this._allowCameraRotation = true;\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  FreeCameraMouseInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this;\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n    var engine = this.camera.getEngine();\n    var element = engine.getInputElement();\n\n    if (!this._pointerInput) {\n      this._pointerInput = function (p) {\n        var evt = p.event;\n\n        if (engine.isInVRExclusivePointerMode) {\n          return;\n        }\n\n        if (!_this.touchEnabled && evt.pointerType === \"touch\") {\n          return;\n        }\n\n        if (p.type !== PointerEventTypes.POINTERMOVE && _this.buttons.indexOf(evt.button) === -1) {\n          return;\n        }\n\n        var srcElement = evt.srcElement || evt.target;\n\n        if (p.type === PointerEventTypes.POINTERDOWN && srcElement) {\n          try {\n            srcElement.setPointerCapture(evt.pointerId);\n          } catch (e) {//Nothing to do with the error. Execution will continue.\n          }\n\n          _this.previousPosition = {\n            x: evt.clientX,\n            y: evt.clientY\n          };\n\n          if (!noPreventDefault) {\n            evt.preventDefault();\n            element && element.focus();\n          } // This is required to move while pointer button is down\n\n\n          if (engine.isPointerLock && _this._onMouseMove) {\n            _this._onMouseMove(p.event);\n          }\n        } else if (p.type === PointerEventTypes.POINTERUP && srcElement) {\n          try {\n            srcElement.releasePointerCapture(evt.pointerId);\n          } catch (e) {//Nothing to do with the error.\n          }\n\n          _this.previousPosition = null;\n\n          if (!noPreventDefault) {\n            evt.preventDefault();\n          }\n        } else if (p.type === PointerEventTypes.POINTERMOVE) {\n          if (!_this.previousPosition) {\n            if (engine.isPointerLock && _this._onMouseMove) {\n              _this._onMouseMove(p.event);\n            }\n\n            return;\n          }\n\n          var offsetX = evt.clientX - _this.previousPosition.x;\n          var offsetY = evt.clientY - _this.previousPosition.y;\n\n          if (_this.camera.getScene().useRightHandedSystem) {\n            offsetX *= -1;\n          }\n\n          if (_this.camera.parent && _this.camera.parent._getWorldMatrixDeterminant() < 0) {\n            offsetX *= -1;\n          }\n\n          if (_this._allowCameraRotation) {\n            _this.camera.cameraRotation.y += offsetX / _this.angularSensibility;\n            _this.camera.cameraRotation.x += offsetY / _this.angularSensibility;\n          }\n\n          _this.onPointerMovedObservable.notifyObservers({\n            offsetX: offsetX,\n            offsetY: offsetY\n          });\n\n          _this.previousPosition = {\n            x: evt.clientX,\n            y: evt.clientY\n          };\n\n          if (!noPreventDefault) {\n            evt.preventDefault();\n          }\n        }\n      };\n    }\n\n    this._onMouseMove = function (evt) {\n      if (!engine.isPointerLock) {\n        return;\n      }\n\n      if (engine.isInVRExclusivePointerMode) {\n        return;\n      }\n\n      var offsetX = evt.movementX || evt.mozMovementX || evt.webkitMovementX || evt.msMovementX || 0;\n\n      if (_this.camera.getScene().useRightHandedSystem) {\n        offsetX *= -1;\n      }\n\n      if (_this.camera.parent && _this.camera.parent._getWorldMatrixDeterminant() < 0) {\n        offsetX *= -1;\n      }\n\n      _this.camera.cameraRotation.y += offsetX / _this.angularSensibility;\n      var offsetY = evt.movementY || evt.mozMovementY || evt.webkitMovementY || evt.msMovementY || 0;\n      _this.camera.cameraRotation.x += offsetY / _this.angularSensibility;\n      _this.previousPosition = null;\n\n      if (!noPreventDefault) {\n        evt.preventDefault();\n      }\n    };\n\n    this._observer = this.camera.getScene().onPointerObservable.add(this._pointerInput, PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE);\n    element && element.addEventListener(\"contextmenu\", this.onContextMenu.bind(this), false);\n  };\n  /**\r\n   * Called on JS contextmenu event.\r\n   * Override this method to provide functionality.\r\n   */\n\n\n  FreeCameraMouseInput.prototype.onContextMenu = function (evt) {\n    evt.preventDefault();\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FreeCameraMouseInput.prototype.detachControl = function (ignored) {\n    if (this._observer) {\n      this.camera.getScene().onPointerObservable.remove(this._observer);\n\n      if (this.onContextMenu) {\n        var engine = this.camera.getEngine();\n        var element = engine.getInputElement();\n        element && element.removeEventListener(\"contextmenu\", this.onContextMenu);\n      }\n\n      if (this.onPointerMovedObservable) {\n        this.onPointerMovedObservable.clear();\n      }\n\n      this._observer = null;\n      this._onMouseMove = null;\n      this.previousPosition = null;\n    }\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  FreeCameraMouseInput.prototype.getClassName = function () {\n    return \"FreeCameraMouseInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FreeCameraMouseInput.prototype.getSimpleName = function () {\n    return \"mouse\";\n  };\n\n  __decorate([serialize()], FreeCameraMouseInput.prototype, \"buttons\", void 0);\n\n  __decorate([serialize()], FreeCameraMouseInput.prototype, \"angularSensibility\", void 0);\n\n  return FreeCameraMouseInput;\n}();\n\nexport { FreeCameraMouseInput };\nCameraInputTypes[\"FreeCameraMouseInput\"] = FreeCameraMouseInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/freeCameraMouseInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observer, EventState, Observable } from \"../../Misc/observable\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { Nullable } from \"../../types\";\r\nimport { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { PointerInfo, PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n/**\r\n * Manage the mouse inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FreeCameraMouseInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Defines the buttons associated with the input to handle camera move.\r\n     */\r\n    @serialize()\r\n    public buttons = [0, 1, 2];\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility  along the X and Y axis or how fast is the camera rotating.\r\n     */\r\n    @serialize()\r\n    public angularSensibility = 2000.0;\r\n\r\n    private _pointerInput: (p: PointerInfo, s: EventState) => void;\r\n    private _onMouseMove: Nullable<(e: MouseEvent) => any>;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n    private previousPosition: Nullable<{ x: number; y: number }> = null;\r\n\r\n    /**\r\n     * Observable for when a pointer move event occurs containing the move offset\r\n     */\r\n    public onPointerMovedObservable = new Observable<{ offsetX: number; offsetY: number }>();\r\n    /**\r\n     * @hidden\r\n     * If the camera should be rotated automatically based on pointer movement\r\n     */\r\n    public _allowCameraRotation = true;\r\n    /**\r\n     * Manage the mouse inputs to control the movement of a free camera.\r\n     * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n     * @param touchEnabled Defines if touch is enabled or not\r\n     */\r\n    constructor(\r\n        /**\r\n         * Define if touch is enabled in the mouse input\r\n         */\r\n        public touchEnabled = true\r\n    ) {}\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        var engine = this.camera.getEngine();\r\n        const element = engine.getInputElement();\r\n\r\n        if (!this._pointerInput) {\r\n            this._pointerInput = (p) => {\r\n                var evt = <PointerEvent>p.event;\r\n\r\n                if (engine.isInVRExclusivePointerMode) {\r\n                    return;\r\n                }\r\n\r\n                if (!this.touchEnabled && evt.pointerType === \"touch\") {\r\n                    return;\r\n                }\r\n\r\n                if (p.type !== PointerEventTypes.POINTERMOVE && this.buttons.indexOf(evt.button) === -1) {\r\n                    return;\r\n                }\r\n\r\n                let srcElement = <HTMLElement>(evt.srcElement || evt.target);\r\n\r\n                if (p.type === PointerEventTypes.POINTERDOWN && srcElement) {\r\n                    try {\r\n                        srcElement.setPointerCapture(evt.pointerId);\r\n                    } catch (e) {\r\n                        //Nothing to do with the error. Execution will continue.\r\n                    }\r\n\r\n                    this.previousPosition = {\r\n                        x: evt.clientX,\r\n                        y: evt.clientY,\r\n                    };\r\n\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                        element && element.focus();\r\n                    }\r\n\r\n                    // This is required to move while pointer button is down\r\n                    if (engine.isPointerLock && this._onMouseMove) {\r\n                        this._onMouseMove(p.event);\r\n                    }\r\n                } else if (p.type === PointerEventTypes.POINTERUP && srcElement) {\r\n                    try {\r\n                        srcElement.releasePointerCapture(evt.pointerId);\r\n                    } catch (e) {\r\n                        //Nothing to do with the error.\r\n                    }\r\n\r\n                    this.previousPosition = null;\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n                } else if (p.type === PointerEventTypes.POINTERMOVE) {\r\n                    if (!this.previousPosition) {\r\n                        if (engine.isPointerLock && this._onMouseMove) {\r\n                            this._onMouseMove(p.event);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    var offsetX = evt.clientX - this.previousPosition.x;\r\n                    var offsetY = evt.clientY - this.previousPosition.y;\r\n                    if (this.camera.getScene().useRightHandedSystem) {\r\n                        offsetX *= -1;\r\n                    }\r\n                    if (this.camera.parent && this.camera.parent._getWorldMatrixDeterminant() < 0) {\r\n                        offsetX *= -1;\r\n                    }\r\n\r\n                    if (this._allowCameraRotation) {\r\n                        this.camera.cameraRotation.y += offsetX / this.angularSensibility;\r\n                        this.camera.cameraRotation.x += offsetY / this.angularSensibility;\r\n                    }\r\n                    this.onPointerMovedObservable.notifyObservers({ offsetX: offsetX, offsetY: offsetY });\r\n\r\n                    this.previousPosition = {\r\n                        x: evt.clientX,\r\n                        y: evt.clientY,\r\n                    };\r\n\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        this._onMouseMove = (evt) => {\r\n            if (!engine.isPointerLock) {\r\n                return;\r\n            }\r\n\r\n            if (engine.isInVRExclusivePointerMode) {\r\n                return;\r\n            }\r\n\r\n            var offsetX = evt.movementX || evt.mozMovementX || evt.webkitMovementX || evt.msMovementX || 0;\r\n            if (this.camera.getScene().useRightHandedSystem) {\r\n                offsetX *= -1;\r\n            }\r\n            if (this.camera.parent && this.camera.parent._getWorldMatrixDeterminant() < 0) {\r\n                offsetX *= -1;\r\n            }\r\n            this.camera.cameraRotation.y += offsetX / this.angularSensibility;\r\n\r\n            var offsetY = evt.movementY || evt.mozMovementY || evt.webkitMovementY || evt.msMovementY || 0;\r\n            this.camera.cameraRotation.x += offsetY / this.angularSensibility;\r\n\r\n            this.previousPosition = null;\r\n\r\n            if (!noPreventDefault) {\r\n                evt.preventDefault();\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera.getScene().onPointerObservable.add(this._pointerInput, PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE);\r\n\r\n        element && element.addEventListener(\"contextmenu\", <EventListener>this.onContextMenu.bind(this), false);\r\n    }\r\n\r\n    /**\r\n     * Called on JS contextmenu event.\r\n     * Override this method to provide functionality.\r\n     */\r\n    protected onContextMenu(evt: PointerEvent): void {\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        if (this._observer) {\r\n            this.camera.getScene().onPointerObservable.remove(this._observer);\r\n\r\n            if (this.onContextMenu) {\r\n                const engine = this.camera.getEngine();\r\n                const element = engine.getInputElement();\r\n                element && element.removeEventListener(\"contextmenu\", <EventListener>this.onContextMenu);\r\n            }\r\n\r\n            if (this.onPointerMovedObservable) {\r\n                this.onPointerMovedObservable.clear();\r\n            }\r\n\r\n            this._observer = null;\r\n            this._onMouseMove = null;\r\n            this.previousPosition = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraMouseInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mouse\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraMouseInput\"] = FreeCameraMouseInput;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}