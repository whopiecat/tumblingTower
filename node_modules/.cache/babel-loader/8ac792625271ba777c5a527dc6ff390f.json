{"ast":null,"code":"import { TGATools } from \"../../../Misc/tga\";\nimport { Engine } from \"../../../Engines/engine\";\nimport { StringTools } from '../../../Misc/stringTools';\n/**\r\n * Implementation of the TGA Texture Loader.\r\n * @hidden\r\n */\n\nvar _TGATextureLoader =\n/** @class */\nfunction () {\n  function _TGATextureLoader() {\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\n    this.supportCascades = false;\n  }\n  /**\r\n   * This returns if the loader support the current file information.\r\n   * @param extension defines the file extension of the file being loaded\r\n   * @returns true if the loader can load the specified file\r\n   */\n\n\n  _TGATextureLoader.prototype.canLoad = function (extension) {\n    return StringTools.EndsWith(extension, \".tga\");\n  };\n  /**\r\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param createPolynomials will be true if polynomials have been requested\r\n   * @param onLoad defines the callback to trigger once the texture is ready\r\n   * @param onError defines the callback to trigger in case of error\r\n   */\n\n\n  _TGATextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {\n    throw \".env not supported in Cube.\";\n  };\n  /**\r\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param callback defines the method to call once ready to upload\r\n   */\n\n\n  _TGATextureLoader.prototype.loadData = function (data, texture, callback) {\n    var bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    var header = TGATools.GetTGAHeader(bytes);\n    callback(header.width, header.height, texture.generateMipMaps, false, function () {\n      TGATools.UploadContent(texture, bytes);\n    });\n  };\n\n  return _TGATextureLoader;\n}();\n\nexport { _TGATextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.push(new _TGATextureLoader());","map":{"version":3,"sources":["../../../../../sourceES6/core/Materials/Textures/Loaders/tgaTextureLoader.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,mBAAzB;AAEA,SAAS,MAAT,QAAuB,yBAAvB;AAGA,SAAS,WAAT,QAA4B,2BAA5B;AAEA;;;;;AAIA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA;AACI;;;AAGgB,SAAA,eAAA,GAAkB,KAAlB;AAsCnB;AApCG;;;;;;;AAKO,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,SAAf,EAAgC;AAC5B,WAAO,WAAW,CAAC,QAAZ,CAAqB,SAArB,EAAgC,MAAhC,CAAP;AACH,GAFM;AAIP;;;;;;;;;;AAQO,EAAA,iBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,IAApB,EAA+D,OAA/D,EAAyF,iBAAzF,EAAqH,MAArH,EAA6J,OAA7J,EAA2N;AACvN,UAAM,6BAAN;AACH,GAFM;AAIP;;;;;;;;AAMO,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAAuC,OAAvC,EACI,QADJ,EACmH;AAC/G,QAAI,KAAK,GAAG,IAAI,UAAJ,CAAe,IAAI,CAAC,MAApB,EAA4B,IAAI,CAAC,UAAjC,EAA6C,IAAI,CAAC,UAAlD,CAAZ;AAEA,QAAI,MAAM,GAAG,QAAQ,CAAC,YAAT,CAAsB,KAAtB,CAAb;AACA,IAAA,QAAQ,CAAC,MAAM,CAAC,KAAR,EAAe,MAAM,CAAC,MAAtB,EAA8B,OAAO,CAAC,eAAtC,EAAuD,KAAvD,EAA8D,YAAA;AAClE,MAAA,QAAQ,CAAC,aAAT,CAAuB,OAAvB,EAAgC,KAAhC;AACH,KAFO,CAAR;AAGH,GARM;;AASX,SAAA,iBAAA;AAAC,CA1CD,EAAA;;8BA4CA;;AACA,MAAM,CAAC,eAAP,CAAuB,IAAvB,CAA4B,IAAI,iBAAJ,EAA5B","sourcesContent":["import { TGATools } from \"../../../Misc/tga\";\r\nimport { Nullable } from \"../../../types\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { StringTools } from '../../../Misc/stringTools';\r\n\r\n/**\r\n * Implementation of the TGA Texture Loader.\r\n * @hidden\r\n */\r\nexport class _TGATextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string): boolean {\r\n        return StringTools.EndsWith(extension, \".tga\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    public loadCubeData(data: ArrayBufferView | ArrayBufferView[], texture: InternalTexture, createPolynomials: boolean, onLoad: Nullable<(data?: any) => void>, onError: Nullable<(message?: string, exception?: any) => void>): void {\r\n        throw \".env not supported in Cube.\";\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(data: ArrayBufferView, texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void): void {\r\n        var bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n\r\n        var header = TGATools.GetTGAHeader(bytes);\r\n        callback(header.width, header.height, texture.generateMipMaps, false, () => {\r\n            TGATools.UploadContent(texture, bytes);\r\n        });\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _TGATextureLoader());\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}