{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../Misc/typeStore';\n/**\r\n * Block used to transform a vector (2, 3 or 4) with a matrix. It will generate a Vector4\r\n */\n\nvar TransformBlock =\n/** @class */\nfunction (_super) {\n  __extends(TransformBlock, _super);\n  /**\r\n   * Creates a new TransformBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function TransformBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Vertex) || this;\n    /**\r\n     * Defines the value to use to complement W value to transform it to a Vector4\r\n     */\n\n\n    _this.complementW = 1;\n    /**\r\n     * Defines the value to use to complement z value to transform it to a Vector4\r\n     */\n\n    _this.complementZ = 0;\n\n    _this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerInput(\"transform\", NodeMaterialBlockConnectionPointTypes.Matrix);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this._inputs[0].onConnectionObservable.add(function (other) {\n      if (other.ownerBlock.isInput) {\n        var otherAsInput = other.ownerBlock;\n\n        if (otherAsInput.name === \"normal\" || otherAsInput.name === \"tangent\") {\n          _this.complementW = 0;\n        }\n      }\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  TransformBlock.prototype.getClassName = function () {\n    return \"TransformBlock\";\n  };\n\n  Object.defineProperty(TransformBlock.prototype, \"vector\", {\n    /**\r\n     * Gets the vector input\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TransformBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TransformBlock.prototype, \"xyz\", {\n    /**\r\n     * Gets the xyz output component\r\n     */\n    get: function () {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TransformBlock.prototype, \"transform\", {\n    /**\r\n     * Gets the matrix transform input\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TransformBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var vector = this.vector;\n    var transform = this.transform;\n\n    if (vector.connectedPoint) {\n      // None uniform scaling case.\n      if (this.complementW === 0) {\n        var comments = \"//\" + this.name;\n\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\n\n        state.sharedData.blocksWithDefines.push(this);\n\n        var transformName = state._getFreeVariableName(transform.associatedVariableName + \"_NUS\");\n\n        state.compilationString += \"mat3 \" + transformName + \" = mat3(\" + transform.associatedVariableName + \");\\r\\n\";\n        state.compilationString += \"#ifdef NONUNIFORMSCALING\\r\\n\";\n        state.compilationString += transformName + \" = transposeMat3(inverseMat3(\" + transformName + \"));\\r\\n\";\n        state.compilationString += \"#endif\\r\\n\";\n\n        switch (vector.connectedPoint.type) {\n          case NodeMaterialBlockConnectionPointTypes.Vector2:\n            state.compilationString += this._declareOutput(this.output, state) + (\" = vec4(\" + transformName + \" * vec3(\" + vector.associatedVariableName + \", \" + this._writeFloat(this.complementZ) + \"), \" + this._writeFloat(this.complementW) + \");\\r\\n\");\n            break;\n\n          case NodeMaterialBlockConnectionPointTypes.Vector3:\n          case NodeMaterialBlockConnectionPointTypes.Color3:\n            state.compilationString += this._declareOutput(this.output, state) + (\" = vec4(\" + transformName + \" * \" + vector.associatedVariableName + \", \" + this._writeFloat(this.complementW) + \");\\r\\n\");\n            break;\n\n          default:\n            state.compilationString += this._declareOutput(this.output, state) + (\" = vec4(\" + transformName + \" * \" + vector.associatedVariableName + \".xyz, \" + this._writeFloat(this.complementW) + \");\\r\\n\");\n            break;\n        }\n      } else {\n        var transformName = transform.associatedVariableName;\n\n        switch (vector.connectedPoint.type) {\n          case NodeMaterialBlockConnectionPointTypes.Vector2:\n            state.compilationString += this._declareOutput(this.output, state) + (\" = \" + transformName + \" * vec4(\" + vector.associatedVariableName + \", \" + this._writeFloat(this.complementZ) + \", \" + this._writeFloat(this.complementW) + \");\\r\\n\");\n            break;\n\n          case NodeMaterialBlockConnectionPointTypes.Vector3:\n          case NodeMaterialBlockConnectionPointTypes.Color3:\n            state.compilationString += this._declareOutput(this.output, state) + (\" = \" + transformName + \" * vec4(\" + vector.associatedVariableName + \", \" + this._writeFloat(this.complementW) + \");\\r\\n\");\n            break;\n\n          default:\n            state.compilationString += this._declareOutput(this.output, state) + (\" = \" + transformName + \" * \" + vector.associatedVariableName + \";\\r\\n\");\n            break;\n        }\n      }\n\n      if (this.xyz.hasEndpoints) {\n        state.compilationString += this._declareOutput(this.xyz, state) + (\" = \" + this.output.associatedVariableName + \".xyz;\\r\\n\");\n      }\n    }\n\n    return this;\n  };\n  /**\r\n   * Update defines for shader compilation\r\n   * @param mesh defines the mesh to be rendered\r\n   * @param nodeMaterial defines the node material requesting the update\r\n   * @param defines defines the material defines to update\r\n   * @param useInstances specifies that instances should be used\r\n   * @param subMesh defines which submesh to render\r\n   */\n\n\n  TransformBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines, useInstances, subMesh) {\n    if (useInstances === void 0) {\n      useInstances = false;\n    } // Do nothing\n\n\n    if (mesh.nonUniformScaling) {\n      defines.setValue(\"NONUNIFORMSCALING\", true);\n    }\n  };\n\n  TransformBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.complementZ = this.complementZ;\n    serializationObject.complementW = this.complementW;\n    return serializationObject;\n  };\n\n  TransformBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.complementZ = serializationObject.complementZ !== undefined ? serializationObject.complementZ : 0.0;\n    this.complementW = serializationObject.complementW !== undefined ? serializationObject.complementW : 1.0;\n  };\n\n  TransformBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = this._codeVariableName + \".complementZ = \" + this.complementZ + \";\\r\\n\";\n    codeString += this._codeVariableName + \".complementW = \" + this.complementW + \";\\r\\n\";\n    return codeString;\n  };\n\n  return TransformBlock;\n}(NodeMaterialBlock);\n\nexport { TransformBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.TransformBlock\"] = TransformBlock;","map":{"version":3,"sources":["../../../../../sourceES6/core/Materials/Node/Blocks/transformBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../nodeMaterialBuildState';\r\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterialConnectionPoint } from '../nodeMaterialBlockConnectionPoint';\r\nimport { _TypeStore } from '../../../Misc/typeStore';\r\nimport { Scene } from '../../../scene';\r\nimport { InputBlock } from './Input/inputBlock';\r\nimport { AbstractMesh } from '../../../Meshes/abstractMesh';\r\nimport { NodeMaterial, NodeMaterialDefines } from '../nodeMaterial';\r\nimport { SubMesh } from '../../../Meshes/subMesh';\r\n\r\n/**\r\n * Block used to transform a vector (2, 3 or 4) with a matrix. It will generate a Vector4\r\n */\r\nexport class TransformBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Defines the value to use to complement W value to transform it to a Vector4\r\n     */\r\n    public complementW = 1;\r\n\r\n    /**\r\n     * Defines the value to use to complement z value to transform it to a Vector4\r\n     */\r\n    public complementZ = 0;\r\n\r\n    /**\r\n     * Creates a new TransformBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex);\r\n\r\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"transform\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n\r\n        this._inputs[0].onConnectionObservable.add((other) => {\r\n            if (other.ownerBlock.isInput) {\r\n                let otherAsInput = other.ownerBlock as InputBlock;\r\n\r\n                if (otherAsInput.name === \"normal\" || otherAsInput.name === \"tangent\") {\r\n                    this.complementW = 0;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TransformBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the vector input\r\n     */\r\n    public get vector(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the xyz output component\r\n     */\r\n    public get xyz(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix transform input\r\n     */\r\n    public get transform(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        let vector = this.vector;\r\n        let transform = this.transform;\r\n\r\n        if (vector.connectedPoint) {\r\n\r\n            // None uniform scaling case.\r\n            if (this.complementW === 0) {\r\n                let comments = `//${this.name}`;\r\n                state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n                state.sharedData.blocksWithDefines.push(this);\r\n\r\n                const transformName = state._getFreeVariableName(`${transform.associatedVariableName}_NUS`);\r\n                state.compilationString += `mat3 ${transformName} = mat3(${transform.associatedVariableName});\\r\\n`;\r\n                state.compilationString += `#ifdef NONUNIFORMSCALING\\r\\n`;\r\n                state.compilationString += `${transformName} = transposeMat3(inverseMat3(${transformName}));\\r\\n`;\r\n                state.compilationString += `#endif\\r\\n`;\r\n                switch (vector.connectedPoint.type) {\r\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                        state.compilationString += this._declareOutput(this.output, state) + ` = vec4(${transformName} * vec3(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}), ${this._writeFloat(this.complementW)});\\r\\n`;\r\n                        break;\r\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                        state.compilationString += this._declareOutput(this.output, state) + ` = vec4(${transformName} * ${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\r\\n`;\r\n                        break;\r\n                    default:\r\n                        state.compilationString += this._declareOutput(this.output, state) + ` = vec4(${transformName} * ${vector.associatedVariableName}.xyz, ${this._writeFloat(this.complementW)});\\r\\n`;\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                const transformName = transform.associatedVariableName;\r\n                switch (vector.connectedPoint.type) {\r\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                        state.compilationString += this._declareOutput(this.output, state) + ` = ${transformName} * vec4(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}, ${this._writeFloat(this.complementW)});\\r\\n`;\r\n                        break;\r\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                        state.compilationString += this._declareOutput(this.output, state) + ` = ${transformName} * vec4(${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\r\\n`;\r\n                        break;\r\n                    default:\r\n                        state.compilationString += this._declareOutput(this.output, state) + ` = ${transformName} * ${vector.associatedVariableName};\\r\\n`;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (this.xyz.hasEndpoints) {\r\n                state.compilationString += this._declareOutput(this.xyz, state) + ` = ${this.output.associatedVariableName}.xyz;\\r\\n`;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update defines for shader compilation\r\n     * @param mesh defines the mesh to be rendered\r\n     * @param nodeMaterial defines the node material requesting the update\r\n     * @param defines defines the material defines to update\r\n     * @param useInstances specifies that instances should be used\r\n     * @param subMesh defines which submesh to render\r\n     */\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, useInstances: boolean = false, subMesh?: SubMesh) {\r\n        // Do nothing\r\n        if (mesh.nonUniformScaling) {\r\n            defines.setValue(\"NONUNIFORMSCALING\", true);\r\n        }\r\n    }\r\n\r\n    public serialize(): any {\r\n        let serializationObject = super.serialize();\r\n\r\n        serializationObject.complementZ = this.complementZ;\r\n        serializationObject.complementW = this.complementW;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.complementZ = serializationObject.complementZ !== undefined ? serializationObject.complementZ : 0.0;\r\n        this.complementW = serializationObject.complementW !== undefined ? serializationObject.complementW : 1.0;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        var codeString = `${this._codeVariableName}.complementZ = ${this.complementZ};\\r\\n`;\r\n\r\n        codeString += `${this._codeVariableName}.complementW = ${this.complementW};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.TransformBlock\"] = TransformBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}