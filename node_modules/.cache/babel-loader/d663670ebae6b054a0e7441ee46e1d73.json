{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RenderTargetTexture } from '../Textures/renderTargetTexture';\nimport { InternalTextureSource } from '../Textures/internalTexture';\n/**\r\n * Renders to multiple views with a single draw call\r\n * @see https://www.khronos.org/registry/webgl/extensions/WEBGL_multiview/\r\n */\n\nvar MultiviewRenderTarget =\n/** @class */\nfunction (_super) {\n  __extends(MultiviewRenderTarget, _super);\n  /**\r\n   * Creates a multiview render target\r\n   * @param scene scene used with the render target\r\n   * @param size the size of the render target (used for each view)\r\n   */\n\n\n  function MultiviewRenderTarget(scene, size) {\n    if (size === void 0) {\n      size = 512;\n    }\n\n    var _this = _super.call(this, \"multiview rtt\", size, scene, false, true, InternalTextureSource.Unknown, false, undefined, false, false, true, undefined, true) || this;\n\n    var internalTexture = scene.getEngine().createMultiviewRenderTargetTexture(_this.getRenderWidth(), _this.getRenderHeight());\n    internalTexture.isMultiview = true;\n    internalTexture.format = 5;\n    _this._texture = internalTexture;\n    _this.samples = _this._getEngine().getCaps().maxSamples || _this.samples;\n    return _this;\n  }\n  /**\r\n   * @hidden\r\n   * @param faceIndex the face index, if its a cube texture\r\n   */\n\n\n  MultiviewRenderTarget.prototype._bindFrameBuffer = function (faceIndex) {\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    if (!this._texture) {\n      return;\n    }\n\n    this.getScene().getEngine().bindMultiviewFramebuffer(this._texture);\n  };\n  /**\r\n   * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)\r\n   * @returns the view count\r\n   */\n\n\n  MultiviewRenderTarget.prototype.getViewCount = function () {\n    return 2;\n  };\n\n  return MultiviewRenderTarget;\n}(RenderTargetTexture);\n\nexport { MultiviewRenderTarget };","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/Textures/MultiviewRenderTarget.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,iCAApC;AAEA,SAAS,qBAAT,QAAsC,6BAAtC;AAGA;;;;;AAIA,IAAA,qBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2C,EAAA,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;AACvC;;;;;;;AAKA,WAAA,qBAAA,CAAY,KAAZ,EAA0B,IAA1B,EAAoG;AAA1E,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,GAAA;AAA0E;;AAApG,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,eAAN,EAAuB,IAAvB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,IAA3C,EAAiD,qBAAqB,CAAC,OAAvE,EAAgF,KAAhF,EAAuF,SAAvF,EAAkG,KAAlG,EAAyG,KAAzG,EAAgH,IAAhH,EAAsH,SAAtH,EAAiI,IAAjI,KAAsI,IAD1I;;AAEI,QAAI,eAAe,GAAG,KAAK,CAAC,SAAN,GAAkB,kCAAlB,CAAqD,KAAI,CAAC,cAAL,EAArD,EAA4E,KAAI,CAAC,eAAL,EAA5E,CAAtB;AACA,IAAA,eAAe,CAAC,WAAhB,GAA8B,IAA9B;AACA,IAAA,eAAe,CAAC,MAAhB,GAAyB,CAAzB;AACA,IAAA,KAAI,CAAC,QAAL,GAAgB,eAAhB;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,KAAI,CAAC,UAAL,GAAmB,OAAnB,GAA6B,UAA7B,IAA2C,KAAI,CAAC,OAA/D;;AACH;AAED;;;;;;AAIO,EAAA,qBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,SAAxB,EAA6C;AAArB,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAAA,CAAA;AAAqB;;AACzC,QAAI,CAAC,KAAK,QAAV,EAAoB;AAChB;AACH;;AACD,SAAK,QAAL,GAAiB,SAAjB,GAA6B,wBAA7B,CAAsD,KAAK,QAA3D;AACH,GALM;AAOP;;;;;;AAIO,EAAA,qBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,CAAP;AACH,GAFM;;AAGX,SAAA,qBAAA;AAAC,CAjCD,CAA2C,mBAA3C,CAAA","sourcesContent":["import { RenderTargetTexture } from '../Textures/renderTargetTexture';\r\nimport { Scene } from '../../scene';\r\nimport { InternalTextureSource } from '../Textures/internalTexture';\r\n\r\n\r\n/**\r\n * Renders to multiple views with a single draw call\r\n * @see https://www.khronos.org/registry/webgl/extensions/WEBGL_multiview/\r\n */\r\nexport class MultiviewRenderTarget extends RenderTargetTexture {\r\n    /**\r\n     * Creates a multiview render target\r\n     * @param scene scene used with the render target\r\n     * @param size the size of the render target (used for each view)\r\n     */\r\n    constructor(scene: Scene, size: number | { width: number, height: number } | { ratio: number } = 512) {\r\n        super(\"multiview rtt\", size, scene, false, true, InternalTextureSource.Unknown, false, undefined, false, false, true, undefined, true);\r\n        var internalTexture = scene.getEngine().createMultiviewRenderTargetTexture(this.getRenderWidth(), this.getRenderHeight());\r\n        internalTexture.isMultiview = true;\r\n        internalTexture.format = 5;\r\n        this._texture = internalTexture;\r\n        this.samples = this._getEngine()!.getCaps().maxSamples || this.samples;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * @param faceIndex the face index, if its a cube texture\r\n     */\r\n    public _bindFrameBuffer(faceIndex: number = 0) {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n        this.getScene()!.getEngine().bindMultiviewFramebuffer(this._texture);\r\n    }\r\n\r\n    /**\r\n     * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)\r\n     * @returns the view count\r\n     */\r\n    public getViewCount() {\r\n        return 2;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}