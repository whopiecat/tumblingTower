{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../Misc/typeStore';\nimport { InputBlock } from './Input/inputBlock';\n/**\r\n * Block used to rotate a 2d vector by a given angle\r\n */\n\nvar Rotate2dBlock =\n/** @class */\nfunction (_super) {\n  __extends(Rotate2dBlock, _super);\n  /**\r\n   * Creates a new Rotate2dBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function Rotate2dBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n\n    _this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    _this.registerInput(\"angle\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  Rotate2dBlock.prototype.getClassName = function () {\n    return \"Rotate2dBlock\";\n  };\n\n  Object.defineProperty(Rotate2dBlock.prototype, \"input\", {\n    /**\r\n     * Gets the input vector\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rotate2dBlock.prototype, \"angle\", {\n    /**\r\n     * Gets the input angle\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rotate2dBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Rotate2dBlock.prototype.autoConfigure = function (material) {\n    if (!this.angle.isConnected) {\n      var angleInput = new InputBlock(\"angle\");\n      angleInput.value = 0;\n      angleInput.output.connectTo(this.angle);\n    }\n  };\n\n  Rotate2dBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var output = this._outputs[0];\n    var angle = this.angle;\n    var input = this.input;\n    state.compilationString += this._declareOutput(output, state) + (\" = vec2(cos(\" + angle.associatedVariableName + \") * \" + input.associatedVariableName + \".x - sin(\" + angle.associatedVariableName + \") * \" + input.associatedVariableName + \".y, sin(\" + angle.associatedVariableName + \") * \" + input.associatedVariableName + \".x + cos(\" + angle.associatedVariableName + \") * \" + input.associatedVariableName + \".y);\\r\\n\");\n    return this;\n  };\n\n  return Rotate2dBlock;\n}(NodeMaterialBlock);\n\nexport { Rotate2dBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.Rotate2dBlock\"] = Rotate2dBlock;","map":{"version":3,"sources":["../../../../../sourceES6/core/Materials/Node/Blocks/rotate2dBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../nodeMaterialBuildState';\r\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterialConnectionPoint } from '../nodeMaterialBlockConnectionPoint';\r\nimport { _TypeStore } from '../../../Misc/typeStore';\r\nimport { NodeMaterial } from '../nodeMaterial';\r\nimport { InputBlock } from './Input/inputBlock';\r\n\r\n/**\r\n * Block used to rotate a 2d vector by a given angle\r\n */\r\nexport class Rotate2dBlock extends NodeMaterialBlock {\r\n\r\n    /**\r\n     * Creates a new Rotate2dBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerInput(\"angle\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"Rotate2dBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input vector\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the input angle\r\n     */\r\n    public get angle(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.angle.isConnected) {\r\n            let angleInput = new InputBlock(\"angle\");\r\n            angleInput.value = 0;\r\n            angleInput.output.connectTo(this.angle);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        let output = this._outputs[0];\r\n        let angle = this.angle;\r\n        let input = this.input;\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = vec2(cos(${angle.associatedVariableName}) * ${input.associatedVariableName}.x - sin(${angle.associatedVariableName}) * ${input.associatedVariableName}.y, sin(${angle.associatedVariableName}) * ${input.associatedVariableName}.x + cos(${angle.associatedVariableName}) * ${input.associatedVariableName}.y);\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.Rotate2dBlock\"] = Rotate2dBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}