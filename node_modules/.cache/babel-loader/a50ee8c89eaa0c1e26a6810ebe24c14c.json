{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { SerializationHelper, serialize, expandToProperty } from \"../../Misc/decorators\";\n/**\r\n * Define the code related to the BRDF parameters of the pbr material.\r\n */\n\nvar PBRBRDFConfiguration =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiate a new istance of clear coat configuration.\r\n   * @param markAllSubMeshesAsMiscDirty Callback to flag the material to dirty\r\n   */\n  function PBRBRDFConfiguration(markAllSubMeshesAsMiscDirty) {\n    this._useEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_ENERGY_CONSERVATION;\n    /**\r\n     * Defines if the material uses energy conservation.\r\n     */\n\n    this.useEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_ENERGY_CONSERVATION;\n    this._useSmithVisibilityHeightCorrelated = PBRBRDFConfiguration.DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED;\n    /**\r\n     * LEGACY Mode set to false\r\n     * Defines if the material uses height smith correlated visibility term.\r\n     * If you intent to not use our default BRDF, you need to load a separate BRDF Texture for the PBR\r\n     * You can either load https://assets.babylonjs.com/environments/uncorrelatedBRDF.png\r\n     * or https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds to have more precision\r\n     * Not relying on height correlated will also disable energy conservation.\r\n     */\n\n    this.useSmithVisibilityHeightCorrelated = PBRBRDFConfiguration.DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED;\n    this._useSphericalHarmonics = PBRBRDFConfiguration.DEFAULT_USE_SPHERICAL_HARMONICS;\n    /**\r\n     * LEGACY Mode set to false\r\n     * Defines if the material uses spherical harmonics vs spherical polynomials for the\r\n     * diffuse part of the IBL.\r\n     * The harmonics despite a tiny bigger cost has been proven to provide closer results\r\n     * to the ground truth.\r\n     */\n\n    this.useSphericalHarmonics = PBRBRDFConfiguration.DEFAULT_USE_SPHERICAL_HARMONICS;\n    this._useSpecularGlossinessInputEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION;\n    /**\r\n     * Defines if the material uses energy conservation, when the specular workflow is active.\r\n     * If activated, the albedo color is multiplied with (1. - maxChannel(specular color)).\r\n     * If deactivated, a material is only physically plausible, when (albedo color + specular color) < 1.\r\n     * In the deactivated case, the material author has to ensure energy conservation, for a physically plausible rendering.\r\n     */\n\n    this.useSpecularGlossinessInputEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION;\n    this._internalMarkAllSubMeshesAsMiscDirty = markAllSubMeshesAsMiscDirty;\n  }\n  /** @hidden */\n\n\n  PBRBRDFConfiguration.prototype._markAllSubMeshesAsMiscDirty = function () {\n    this._internalMarkAllSubMeshesAsMiscDirty();\n  };\n  /**\r\n   * Checks to see if a texture is used in the material.\r\n   * @param defines the list of \"defines\" to update.\r\n   */\n\n\n  PBRBRDFConfiguration.prototype.prepareDefines = function (defines) {\n    defines.BRDF_V_HEIGHT_CORRELATED = this._useSmithVisibilityHeightCorrelated;\n    defines.MS_BRDF_ENERGY_CONSERVATION = this._useEnergyConservation && this._useSmithVisibilityHeightCorrelated;\n    defines.SPHERICAL_HARMONICS = this._useSphericalHarmonics;\n    defines.SPECULAR_GLOSSINESS_ENERGY_CONSERVATION = this._useSpecularGlossinessInputEnergyConservation;\n  };\n  /**\r\n  * Get the current class name of the texture useful for serialization or dynamic coding.\r\n  * @returns \"PBRClearCoatConfiguration\"\r\n  */\n\n\n  PBRBRDFConfiguration.prototype.getClassName = function () {\n    return \"PBRBRDFConfiguration\";\n  };\n  /**\r\n   * Makes a duplicate of the current configuration into another one.\r\n   * @param brdfConfiguration define the config where to copy the info\r\n   */\n\n\n  PBRBRDFConfiguration.prototype.copyTo = function (brdfConfiguration) {\n    SerializationHelper.Clone(function () {\n      return brdfConfiguration;\n    }, this);\n  };\n  /**\r\n   * Serializes this BRDF configuration.\r\n   * @returns - An object with the serialized config.\r\n   */\n\n\n  PBRBRDFConfiguration.prototype.serialize = function () {\n    return SerializationHelper.Serialize(this);\n  };\n  /**\r\n   * Parses a anisotropy Configuration from a serialized object.\r\n   * @param source - Serialized object.\r\n   * @param scene Defines the scene we are parsing for\r\n   * @param rootUrl Defines the rootUrl to load from\r\n   */\n\n\n  PBRBRDFConfiguration.prototype.parse = function (source, scene, rootUrl) {\n    var _this = this;\n\n    SerializationHelper.Parse(function () {\n      return _this;\n    }, source, scene, rootUrl);\n  };\n  /**\r\n   * Default value used for the energy conservation.\r\n   * This should only be changed to adapt to the type of texture in scene.environmentBRDFTexture.\r\n   */\n\n\n  PBRBRDFConfiguration.DEFAULT_USE_ENERGY_CONSERVATION = true;\n  /**\r\n   * Default value used for the Smith Visibility Height Correlated mode.\r\n   * This should only be changed to adapt to the type of texture in scene.environmentBRDFTexture.\r\n   */\n\n  PBRBRDFConfiguration.DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED = true;\n  /**\r\n   * Default value used for the IBL diffuse part.\r\n   * This can help switching back to the polynomials mode globally which is a tiny bit\r\n   * less GPU intensive at the drawback of a lower quality.\r\n   */\n\n  PBRBRDFConfiguration.DEFAULT_USE_SPHERICAL_HARMONICS = true;\n  /**\r\n   * Default value used for activating energy conservation for the specular workflow.\r\n   * If activated, the albedo color is multiplied with (1. - maxChannel(specular color)).\r\n   * If deactivated, a material is only physically plausible, when (albedo color + specular color) < 1.\r\n   */\n\n  PBRBRDFConfiguration.DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION = true;\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsMiscDirty\")], PBRBRDFConfiguration.prototype, \"useEnergyConservation\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsMiscDirty\")], PBRBRDFConfiguration.prototype, \"useSmithVisibilityHeightCorrelated\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsMiscDirty\")], PBRBRDFConfiguration.prototype, \"useSphericalHarmonics\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsMiscDirty\")], PBRBRDFConfiguration.prototype, \"useSpecularGlossinessInputEnergyConservation\", void 0);\n\n  return PBRBRDFConfiguration;\n}();\n\nexport { PBRBRDFConfiguration };","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/PBR/pbrBRDFConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["import { SerializationHelper, serialize, expandToProperty } from \"../../Misc/decorators\";\r\nimport { Scene } from '../../scene';\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport interface IMaterialBRDFDefines {\r\n    BRDF_V_HEIGHT_CORRELATED: boolean;\r\n    MS_BRDF_ENERGY_CONSERVATION: boolean;\r\n    SPHERICAL_HARMONICS: boolean;\r\n    SPECULAR_GLOSSINESS_ENERGY_CONSERVATION: boolean;\r\n\r\n    /** @hidden */\r\n    _areMiscDirty: boolean;\r\n}\r\n\r\n/**\r\n * Define the code related to the BRDF parameters of the pbr material.\r\n */\r\nexport class PBRBRDFConfiguration {\r\n\r\n    /**\r\n     * Default value used for the energy conservation.\r\n     * This should only be changed to adapt to the type of texture in scene.environmentBRDFTexture.\r\n     */\r\n    public static DEFAULT_USE_ENERGY_CONSERVATION = true;\r\n\r\n    /**\r\n     * Default value used for the Smith Visibility Height Correlated mode.\r\n     * This should only be changed to adapt to the type of texture in scene.environmentBRDFTexture.\r\n     */\r\n    public static DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED = true;\r\n\r\n    /**\r\n     * Default value used for the IBL diffuse part.\r\n     * This can help switching back to the polynomials mode globally which is a tiny bit\r\n     * less GPU intensive at the drawback of a lower quality.\r\n     */\r\n    public static DEFAULT_USE_SPHERICAL_HARMONICS = true;\r\n\r\n    /**\r\n     * Default value used for activating energy conservation for the specular workflow.\r\n     * If activated, the albedo color is multiplied with (1. - maxChannel(specular color)).\r\n     * If deactivated, a material is only physically plausible, when (albedo color + specular color) < 1.\r\n     */\r\n    public static DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION = true;\r\n\r\n    private _useEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_ENERGY_CONSERVATION;\r\n    /**\r\n     * Defines if the material uses energy conservation.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_ENERGY_CONSERVATION;\r\n\r\n    private _useSmithVisibilityHeightCorrelated = PBRBRDFConfiguration.DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED;\r\n    /**\r\n     * LEGACY Mode set to false\r\n     * Defines if the material uses height smith correlated visibility term.\r\n     * If you intent to not use our default BRDF, you need to load a separate BRDF Texture for the PBR\r\n     * You can either load https://assets.babylonjs.com/environments/uncorrelatedBRDF.png\r\n     * or https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds to have more precision\r\n     * Not relying on height correlated will also disable energy conservation.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useSmithVisibilityHeightCorrelated = PBRBRDFConfiguration.DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED;\r\n\r\n    private _useSphericalHarmonics = PBRBRDFConfiguration.DEFAULT_USE_SPHERICAL_HARMONICS;\r\n    /**\r\n     * LEGACY Mode set to false\r\n     * Defines if the material uses spherical harmonics vs spherical polynomials for the\r\n     * diffuse part of the IBL.\r\n     * The harmonics despite a tiny bigger cost has been proven to provide closer results\r\n     * to the ground truth.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useSphericalHarmonics = PBRBRDFConfiguration.DEFAULT_USE_SPHERICAL_HARMONICS;\r\n\r\n    private _useSpecularGlossinessInputEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION;\r\n    /**\r\n     * Defines if the material uses energy conservation, when the specular workflow is active.\r\n     * If activated, the albedo color is multiplied with (1. - maxChannel(specular color)).\r\n     * If deactivated, a material is only physically plausible, when (albedo color + specular color) < 1.\r\n     * In the deactivated case, the material author has to ensure energy conservation, for a physically plausible rendering.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useSpecularGlossinessInputEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION;\r\n\r\n    /** @hidden */\r\n    private _internalMarkAllSubMeshesAsMiscDirty: () => void;\r\n\r\n    /** @hidden */\r\n    public _markAllSubMeshesAsMiscDirty(): void {\r\n        this._internalMarkAllSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new istance of clear coat configuration.\r\n     * @param markAllSubMeshesAsMiscDirty Callback to flag the material to dirty\r\n     */\r\n    constructor(markAllSubMeshesAsMiscDirty: () => void) {\r\n        this._internalMarkAllSubMeshesAsMiscDirty = markAllSubMeshesAsMiscDirty;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if a texture is used in the material.\r\n     * @param defines the list of \"defines\" to update.\r\n     */\r\n    public prepareDefines(defines: IMaterialBRDFDefines): void {\r\n        defines.BRDF_V_HEIGHT_CORRELATED = this._useSmithVisibilityHeightCorrelated;\r\n        defines.MS_BRDF_ENERGY_CONSERVATION = this._useEnergyConservation && this._useSmithVisibilityHeightCorrelated;\r\n        defines.SPHERICAL_HARMONICS = this._useSphericalHarmonics;\r\n        defines.SPECULAR_GLOSSINESS_ENERGY_CONSERVATION = this._useSpecularGlossinessInputEnergyConservation;\r\n    }\r\n\r\n    /**\r\n    * Get the current class name of the texture useful for serialization or dynamic coding.\r\n    * @returns \"PBRClearCoatConfiguration\"\r\n    */\r\n    public getClassName(): string {\r\n        return \"PBRBRDFConfiguration\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current configuration into another one.\r\n     * @param brdfConfiguration define the config where to copy the info\r\n     */\r\n    public copyTo(brdfConfiguration: PBRBRDFConfiguration): void {\r\n        SerializationHelper.Clone(() => brdfConfiguration, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this BRDF configuration.\r\n     * @returns - An object with the serialized config.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a anisotropy Configuration from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public parse(source: any, scene: Scene, rootUrl: string): void {\r\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}