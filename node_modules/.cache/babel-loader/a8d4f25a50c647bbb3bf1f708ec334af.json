{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Logger } from \"../../../Misc/logger\";\nimport { Vector3, Vector2 } from \"../../../Maths/math.vector\";\nimport { Color4, Color3 } from '../../../Maths/math.color';\nimport { Texture } from \"../../../Materials/Textures/texture\";\nimport { ProceduralTexture } from \"./proceduralTexture\";\nimport { WebRequest } from '../../../Misc/webRequest';\n/**\r\n * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\r\n * Custom Procedural textures are the easiest way to create your own procedural in your application.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures\r\n */\n\nvar CustomProceduralTexture =\n/** @class */\nfunction (_super) {\n  __extends(CustomProceduralTexture, _super);\n  /**\r\n   * Instantiates a new Custom Procedural Texture.\r\n   * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\r\n   * Custom Procedural textures are the easiest way to create your own procedural in your application.\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures\r\n   * @param name Define the name of the texture\r\n   * @param texturePath Define the folder path containing all the cutom texture related files (config, shaders...)\r\n   * @param size Define the size of the texture to create\r\n   * @param scene Define the scene the texture belongs to\r\n   * @param fallbackTexture Define a fallback texture in case there were issues to create the custom texture\r\n   * @param generateMipMaps Define if the texture should creates mip maps or not\r\n   */\n\n\n  function CustomProceduralTexture(name, texturePath, size, scene, fallbackTexture, generateMipMaps) {\n    var _this = _super.call(this, name, size, null, scene, fallbackTexture, generateMipMaps) || this;\n\n    _this._animate = true;\n    _this._time = 0;\n    _this._texturePath = texturePath; //Try to load json\n\n    _this._loadJson(texturePath);\n\n    _this.refreshRate = 1;\n    return _this;\n  }\n\n  CustomProceduralTexture.prototype._loadJson = function (jsonUrl) {\n    var _this = this;\n\n    var noConfigFile = function () {\n      try {\n        _this.setFragment(_this._texturePath);\n      } catch (ex) {\n        Logger.Error(\"No json or ShaderStore or DOM element found for CustomProceduralTexture\");\n      }\n    };\n\n    var configFileUrl = jsonUrl + \"/config.json\";\n    var xhr = new WebRequest();\n    xhr.open(\"GET\", configFileUrl);\n    xhr.addEventListener(\"load\", function () {\n      if (xhr.status === 200 || xhr.responseText && xhr.responseText.length > 0) {\n        try {\n          _this._config = JSON.parse(xhr.response);\n\n          _this.updateShaderUniforms();\n\n          _this.updateTextures();\n\n          _this.setFragment(_this._texturePath + \"/custom\");\n\n          _this._animate = _this._config.animate;\n          _this.refreshRate = _this._config.refreshrate;\n        } catch (ex) {\n          noConfigFile();\n        }\n      } else {\n        noConfigFile();\n      }\n    }, false);\n    xhr.addEventListener(\"error\", function () {\n      noConfigFile();\n    }, false);\n\n    try {\n      xhr.send();\n    } catch (ex) {\n      Logger.Error(\"CustomProceduralTexture: Error on XHR send request.\");\n    }\n  };\n  /**\r\n   * Is the texture ready to be used ? (rendered at least once)\r\n   * @returns true if ready, otherwise, false.\r\n   */\n\n\n  CustomProceduralTexture.prototype.isReady = function () {\n    if (!_super.prototype.isReady.call(this)) {\n      return false;\n    }\n\n    for (var name in this._textures) {\n      var texture = this._textures[name];\n\n      if (!texture.isReady()) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Render the texture to its associated render target.\r\n   * @param useCameraPostProcess Define if camera post process should be applied to the texture\r\n   */\n\n\n  CustomProceduralTexture.prototype.render = function (useCameraPostProcess) {\n    var scene = this.getScene();\n\n    if (this._animate && scene) {\n      this._time += scene.getAnimationRatio() * 0.03;\n      this.updateShaderUniforms();\n    }\n\n    _super.prototype.render.call(this, useCameraPostProcess);\n  };\n  /**\r\n   * Update the list of dependant textures samplers in the shader.\r\n   */\n\n\n  CustomProceduralTexture.prototype.updateTextures = function () {\n    for (var i = 0; i < this._config.sampler2Ds.length; i++) {\n      this.setTexture(this._config.sampler2Ds[i].sample2Dname, new Texture(this._texturePath + \"/\" + this._config.sampler2Ds[i].textureRelativeUrl, this.getScene()));\n    }\n  };\n  /**\r\n   * Update the uniform values of the procedural texture in the shader.\r\n   */\n\n\n  CustomProceduralTexture.prototype.updateShaderUniforms = function () {\n    if (this._config) {\n      for (var j = 0; j < this._config.uniforms.length; j++) {\n        var uniform = this._config.uniforms[j];\n\n        switch (uniform.type) {\n          case \"float\":\n            this.setFloat(uniform.name, uniform.value);\n            break;\n\n          case \"color3\":\n            this.setColor3(uniform.name, new Color3(uniform.r, uniform.g, uniform.b));\n            break;\n\n          case \"color4\":\n            this.setColor4(uniform.name, new Color4(uniform.r, uniform.g, uniform.b, uniform.a));\n            break;\n\n          case \"vector2\":\n            this.setVector2(uniform.name, new Vector2(uniform.x, uniform.y));\n            break;\n\n          case \"vector3\":\n            this.setVector3(uniform.name, new Vector3(uniform.x, uniform.y, uniform.z));\n            break;\n        }\n      }\n    }\n\n    this.setFloat(\"time\", this._time);\n  };\n\n  Object.defineProperty(CustomProceduralTexture.prototype, \"animate\", {\n    /**\r\n     * Define if the texture animates or not.\r\n     */\n    get: function () {\n      return this._animate;\n    },\n    set: function (value) {\n      this._animate = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return CustomProceduralTexture;\n}(ProceduralTexture);\n\nexport { CustomProceduralTexture };","map":{"version":3,"sources":["../../../../../sourceES6/core/Materials/Textures/Procedurals/customProceduralTexture.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"../../../Misc/logger\";\r\nimport { Scene } from \"../../../scene\";\r\nimport { Vector3, Vector2 } from \"../../../Maths/math.vector\";\r\nimport { Color4, Color3 } from '../../../Maths/math.color';\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { ProceduralTexture } from \"./proceduralTexture\";\r\nimport { WebRequest } from '../../../Misc/webRequest';\r\n/**\r\n * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\r\n * Custom Procedural textures are the easiest way to create your own procedural in your application.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures\r\n */\r\nexport class CustomProceduralTexture extends ProceduralTexture {\r\n    private _animate: boolean = true;\r\n    private _time: number = 0;\r\n    private _config: any;\r\n    private _texturePath: string;\r\n\r\n    /**\r\n     * Instantiates a new Custom Procedural Texture.\r\n     * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\r\n     * Custom Procedural textures are the easiest way to create your own procedural in your application.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures\r\n     * @param name Define the name of the texture\r\n     * @param texturePath Define the folder path containing all the cutom texture related files (config, shaders...)\r\n     * @param size Define the size of the texture to create\r\n     * @param scene Define the scene the texture belongs to\r\n     * @param fallbackTexture Define a fallback texture in case there were issues to create the custom texture\r\n     * @param generateMipMaps Define if the texture should creates mip maps or not\r\n     */\r\n    constructor(name: string, texturePath: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, null, scene, fallbackTexture, generateMipMaps);\r\n        this._texturePath = texturePath;\r\n\r\n        //Try to load json\r\n        this._loadJson(texturePath);\r\n        this.refreshRate = 1;\r\n    }\r\n\r\n    private _loadJson(jsonUrl: string): void {\r\n        let noConfigFile = () => {\r\n            try {\r\n                this.setFragment(this._texturePath);\r\n            }\r\n            catch (ex) {\r\n                Logger.Error(\"No json or ShaderStore or DOM element found for CustomProceduralTexture\");\r\n            }\r\n        };\r\n\r\n        var configFileUrl = jsonUrl + \"/config.json\";\r\n        var xhr = new WebRequest();\r\n\r\n        xhr.open(\"GET\", configFileUrl);\r\n        xhr.addEventListener(\"load\", () => {\r\n            if (xhr.status === 200 || (xhr.responseText && xhr.responseText.length > 0)) {\r\n                try {\r\n                    this._config = JSON.parse(xhr.response);\r\n\r\n                    this.updateShaderUniforms();\r\n                    this.updateTextures();\r\n                    this.setFragment(this._texturePath + \"/custom\");\r\n\r\n                    this._animate = this._config.animate;\r\n                    this.refreshRate = this._config.refreshrate;\r\n                }\r\n                catch (ex) {\r\n                    noConfigFile();\r\n                }\r\n            }\r\n            else {\r\n                noConfigFile();\r\n            }\r\n        }, false);\r\n\r\n        xhr.addEventListener(\"error\", () => {\r\n            noConfigFile();\r\n        }, false);\r\n\r\n        try {\r\n            xhr.send();\r\n        }\r\n        catch (ex) {\r\n            Logger.Error(\"CustomProceduralTexture: Error on XHR send request.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is the texture ready to be used ? (rendered at least once)\r\n     * @returns true if ready, otherwise, false.\r\n     */\r\n    public isReady(): boolean {\r\n        if (!super.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        for (var name in this._textures) {\r\n            var texture = this._textures[name];\r\n\r\n            if (!texture.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Render the texture to its associated render target.\r\n     * @param useCameraPostProcess Define if camera post process should be applied to the texture\r\n     */\r\n    public render(useCameraPostProcess?: boolean): void {\r\n        let scene = this.getScene();\r\n        if (this._animate && scene) {\r\n            this._time += scene.getAnimationRatio() * 0.03;\r\n            this.updateShaderUniforms();\r\n        }\r\n\r\n        super.render(useCameraPostProcess);\r\n    }\r\n\r\n    /**\r\n     * Update the list of dependant textures samplers in the shader.\r\n     */\r\n    public updateTextures(): void {\r\n        for (var i = 0; i < this._config.sampler2Ds.length; i++) {\r\n            this.setTexture(this._config.sampler2Ds[i].sample2Dname, new Texture(this._texturePath + \"/\" + this._config.sampler2Ds[i].textureRelativeUrl, this.getScene()));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the uniform values of the procedural texture in the shader.\r\n     */\r\n    public updateShaderUniforms(): void {\r\n        if (this._config) {\r\n            for (var j = 0; j < this._config.uniforms.length; j++) {\r\n                var uniform = this._config.uniforms[j];\r\n\r\n                switch (uniform.type) {\r\n                    case \"float\":\r\n                        this.setFloat(uniform.name, uniform.value);\r\n                        break;\r\n                    case \"color3\":\r\n                        this.setColor3(uniform.name, new Color3(uniform.r, uniform.g, uniform.b));\r\n                        break;\r\n                    case \"color4\":\r\n                        this.setColor4(uniform.name, new Color4(uniform.r, uniform.g, uniform.b, uniform.a));\r\n                        break;\r\n                    case \"vector2\":\r\n                        this.setVector2(uniform.name, new Vector2(uniform.x, uniform.y));\r\n                        break;\r\n                    case \"vector3\":\r\n                        this.setVector3(uniform.name, new Vector3(uniform.x, uniform.y, uniform.z));\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setFloat(\"time\", this._time);\r\n    }\r\n\r\n    /**\r\n     * Define if the texture animates or not.\r\n     */\r\n    public get animate(): boolean {\r\n        return this._animate;\r\n    }\r\n\r\n    public set animate(value: boolean) {\r\n        this._animate = value;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}