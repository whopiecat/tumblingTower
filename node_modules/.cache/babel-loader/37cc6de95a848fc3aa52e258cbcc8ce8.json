{"ast":null,"code":"import { NodeMaterialBlockConnectionPointTypes } from './Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from './Enums/nodeMaterialBlockTargets';\nimport { Effect } from '../effect';\nimport { StringTools } from '../../Misc/stringTools';\n/**\r\n * Class used to store node based material build state\r\n */\n\nvar NodeMaterialBuildState =\n/** @class */\nfunction () {\n  function NodeMaterialBuildState() {\n    /** Gets or sets a boolean indicating if the current state can emit uniform buffers */\n    this.supportUniformBuffers = false;\n    /**\r\n     * Gets the list of emitted attributes\r\n     */\n\n    this.attributes = new Array();\n    /**\r\n     * Gets the list of emitted uniforms\r\n     */\n\n    this.uniforms = new Array();\n    /**\r\n    * Gets the list of emitted constants\r\n    */\n\n    this.constants = new Array();\n    /**\r\n     * Gets the list of emitted samplers\r\n     */\n\n    this.samplers = new Array();\n    /**\r\n     * Gets the list of emitted functions\r\n     */\n\n    this.functions = {};\n    /**\r\n     * Gets the list of emitted extensions\r\n     */\n\n    this.extensions = {};\n    /**\r\n     * Gets the list of emitted counters\r\n     */\n\n    this.counters = {};\n    /** @hidden */\n\n    this._attributeDeclaration = \"\";\n    /** @hidden */\n\n    this._uniformDeclaration = \"\";\n    /** @hidden */\n\n    this._constantDeclaration = \"\";\n    /** @hidden */\n\n    this._samplerDeclaration = \"\";\n    /** @hidden */\n\n    this._varyingTransfer = \"\";\n    /** @hidden */\n\n    this._injectAtEnd = \"\";\n    this._repeatableContentAnchorIndex = 0;\n    /** @hidden */\n\n    this._builtCompilationString = \"\";\n    /**\r\n     * Gets the emitted compilation strings\r\n     */\n\n    this.compilationString = \"\";\n  }\n  /**\r\n   * Finalize the compilation strings\r\n   * @param state defines the current compilation state\r\n   */\n\n\n  NodeMaterialBuildState.prototype.finalize = function (state) {\n    var emitComments = state.sharedData.emitComments;\n    var isFragmentMode = this.target === NodeMaterialBlockTargets.Fragment;\n    this.compilationString = \"\\r\\n\" + (emitComments ? \"//Entry point\\r\\n\" : \"\") + \"void main(void) {\\r\\n\" + this.compilationString;\n\n    if (this._constantDeclaration) {\n      this.compilationString = \"\\r\\n\" + (emitComments ? \"//Constants\\r\\n\" : \"\") + this._constantDeclaration + \"\\r\\n\" + this.compilationString;\n    }\n\n    var functionCode = \"\";\n\n    for (var functionName in this.functions) {\n      functionCode += this.functions[functionName] + \"\\r\\n\";\n    }\n\n    this.compilationString = \"\\r\\n\" + functionCode + \"\\r\\n\" + this.compilationString;\n\n    if (!isFragmentMode && this._varyingTransfer) {\n      this.compilationString = this.compilationString + \"\\r\\n\" + this._varyingTransfer;\n    }\n\n    if (this._injectAtEnd) {\n      this.compilationString = this.compilationString + \"\\r\\n\" + this._injectAtEnd;\n    }\n\n    this.compilationString = this.compilationString + \"\\r\\n}\";\n\n    if (this.sharedData.varyingDeclaration) {\n      this.compilationString = \"\\r\\n\" + (emitComments ? \"//Varyings\\r\\n\" : \"\") + this.sharedData.varyingDeclaration + \"\\r\\n\" + this.compilationString;\n    }\n\n    if (this._samplerDeclaration) {\n      this.compilationString = \"\\r\\n\" + (emitComments ? \"//Samplers\\r\\n\" : \"\") + this._samplerDeclaration + \"\\r\\n\" + this.compilationString;\n    }\n\n    if (this._uniformDeclaration) {\n      this.compilationString = \"\\r\\n\" + (emitComments ? \"//Uniforms\\r\\n\" : \"\") + this._uniformDeclaration + \"\\r\\n\" + this.compilationString;\n    }\n\n    if (this._attributeDeclaration && !isFragmentMode) {\n      this.compilationString = \"\\r\\n\" + (emitComments ? \"//Attributes\\r\\n\" : \"\") + this._attributeDeclaration + \"\\r\\n\" + this.compilationString;\n    }\n\n    this.compilationString = \"precision highp float;\\r\\n\" + this.compilationString;\n\n    for (var extensionName in this.extensions) {\n      var extension = this.extensions[extensionName];\n      this.compilationString = \"\\r\\n\" + extension + \"\\r\\n\" + this.compilationString;\n    }\n\n    this._builtCompilationString = this.compilationString;\n  };\n\n  Object.defineProperty(NodeMaterialBuildState.prototype, \"_repeatableContentAnchor\", {\n    /** @hidden */\n    get: function () {\n      return \"###___ANCHOR\" + this._repeatableContentAnchorIndex++ + \"___###\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @hidden */\n\n  NodeMaterialBuildState.prototype._getFreeVariableName = function (prefix) {\n    prefix = prefix.replace(/[^a-zA-Z_]+/g, \"\");\n\n    if (this.sharedData.variableNames[prefix] === undefined) {\n      this.sharedData.variableNames[prefix] = 0; // Check reserved words\n\n      if (prefix === \"output\" || prefix === \"texture\") {\n        return prefix + this.sharedData.variableNames[prefix];\n      }\n\n      return prefix;\n    } else {\n      this.sharedData.variableNames[prefix]++;\n    }\n\n    return prefix + this.sharedData.variableNames[prefix];\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._getFreeDefineName = function (prefix) {\n    if (this.sharedData.defineNames[prefix] === undefined) {\n      this.sharedData.defineNames[prefix] = 0;\n    } else {\n      this.sharedData.defineNames[prefix]++;\n    }\n\n    return prefix + this.sharedData.defineNames[prefix];\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._excludeVariableName = function (name) {\n    this.sharedData.variableNames[name] = 0;\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emit2DSampler = function (name) {\n    if (this.samplers.indexOf(name) < 0) {\n      this._samplerDeclaration += \"uniform sampler2D \" + name + \";\\r\\n\";\n      this.samplers.push(name);\n    }\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._getGLType = function (type) {\n    switch (type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        return \"float\";\n\n      case NodeMaterialBlockConnectionPointTypes.Int:\n        return \"int\";\n\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        return \"vec2\";\n\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        return \"vec3\";\n\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        return \"vec4\";\n\n      case NodeMaterialBlockConnectionPointTypes.Matrix:\n        return \"mat4\";\n    }\n\n    return \"\";\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitExtension = function (name, extension, define) {\n    if (define === void 0) {\n      define = \"\";\n    }\n\n    if (this.extensions[name]) {\n      return;\n    }\n\n    if (define) {\n      extension = \"#if \" + define + \"\\r\\n\" + extension + \"\\r\\n#endif\";\n    }\n\n    this.extensions[name] = extension;\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitFunction = function (name, code, comments) {\n    if (this.functions[name]) {\n      return;\n    }\n\n    if (this.sharedData.emitComments) {\n      code = comments + \"\\r\\n\" + code;\n    }\n\n    this.functions[name] = code;\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitCodeFromInclude = function (includeName, comments, options) {\n    if (options && options.repeatKey) {\n      return \"#include<\" + includeName + \">[0..\" + options.repeatKey + \"]\\r\\n\";\n    }\n\n    var code = Effect.IncludesShadersStore[includeName] + \"\\r\\n\";\n\n    if (this.sharedData.emitComments) {\n      code = comments + \"\\r\\n\" + code;\n    }\n\n    if (!options) {\n      return code;\n    }\n\n    if (options.replaceStrings) {\n      for (var index = 0; index < options.replaceStrings.length; index++) {\n        var replaceString = options.replaceStrings[index];\n        code = code.replace(replaceString.search, replaceString.replace);\n      }\n    }\n\n    return code;\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitFunctionFromInclude = function (includeName, comments, options, storeKey) {\n    if (storeKey === void 0) {\n      storeKey = \"\";\n    }\n\n    var key = includeName + storeKey;\n\n    if (this.functions[key]) {\n      return;\n    }\n\n    if (!options || !options.removeAttributes && !options.removeUniforms && !options.removeVaryings && !options.removeIfDef && !options.replaceStrings) {\n      if (options && options.repeatKey) {\n        this.functions[key] = \"#include<\" + includeName + \">[0..\" + options.repeatKey + \"]\\r\\n\";\n      } else {\n        this.functions[key] = \"#include<\" + includeName + \">\\r\\n\";\n      }\n\n      if (this.sharedData.emitComments) {\n        this.functions[key] = comments + \"\\r\\n\" + this.functions[key];\n      }\n\n      return;\n    }\n\n    this.functions[key] = Effect.IncludesShadersStore[includeName];\n\n    if (this.sharedData.emitComments) {\n      this.functions[key] = comments + \"\\r\\n\" + this.functions[key];\n    }\n\n    if (options.removeIfDef) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?#ifdef.+$/gm, \"\");\n      this.functions[key] = this.functions[key].replace(/^\\s*?#endif.*$/gm, \"\");\n      this.functions[key] = this.functions[key].replace(/^\\s*?#else.*$/gm, \"\");\n      this.functions[key] = this.functions[key].replace(/^\\s*?#elif.*$/gm, \"\");\n    }\n\n    if (options.removeAttributes) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?attribute.+$/gm, \"\");\n    }\n\n    if (options.removeUniforms) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?uniform.+$/gm, \"\");\n    }\n\n    if (options.removeVaryings) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?varying.+$/gm, \"\");\n    }\n\n    if (options.replaceStrings) {\n      for (var index = 0; index < options.replaceStrings.length; index++) {\n        var replaceString = options.replaceStrings[index];\n        this.functions[key] = this.functions[key].replace(replaceString.search, replaceString.replace);\n      }\n    }\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._registerTempVariable = function (name) {\n    if (this.sharedData.temps.indexOf(name) !== -1) {\n      return false;\n    }\n\n    this.sharedData.temps.push(name);\n    return true;\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitVaryingFromString = function (name, type, define, notDefine) {\n    if (define === void 0) {\n      define = \"\";\n    }\n\n    if (notDefine === void 0) {\n      notDefine = false;\n    }\n\n    if (this.sharedData.varyings.indexOf(name) !== -1) {\n      return false;\n    }\n\n    this.sharedData.varyings.push(name);\n\n    if (define) {\n      if (StringTools.StartsWith(define, \"defined(\")) {\n        this.sharedData.varyingDeclaration += \"#if \" + define + \"\\r\\n\";\n      } else {\n        this.sharedData.varyingDeclaration += (notDefine ? \"#ifndef\" : \"#ifdef\") + \" \" + define + \"\\r\\n\";\n      }\n    }\n\n    this.sharedData.varyingDeclaration += \"varying \" + type + \" \" + name + \";\\r\\n\";\n\n    if (define) {\n      this.sharedData.varyingDeclaration += \"#endif\\r\\n\";\n    }\n\n    return true;\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitUniformFromString = function (name, type, define, notDefine) {\n    if (define === void 0) {\n      define = \"\";\n    }\n\n    if (notDefine === void 0) {\n      notDefine = false;\n    }\n\n    if (this.uniforms.indexOf(name) !== -1) {\n      return;\n    }\n\n    this.uniforms.push(name);\n\n    if (define) {\n      if (StringTools.StartsWith(define, \"defined(\")) {\n        this._uniformDeclaration += \"#if \" + define + \"\\r\\n\";\n      } else {\n        this._uniformDeclaration += (notDefine ? \"#ifndef\" : \"#ifdef\") + \" \" + define + \"\\r\\n\";\n      }\n    }\n\n    this._uniformDeclaration += \"uniform \" + type + \" \" + name + \";\\r\\n\";\n\n    if (define) {\n      this._uniformDeclaration += \"#endif\\r\\n\";\n    }\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitFloat = function (value) {\n    if (value.toString() === value.toFixed(0)) {\n      return value + \".0\";\n    }\n\n    return value.toString();\n  };\n\n  return NodeMaterialBuildState;\n}();\n\nexport { NodeMaterialBuildState };","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/Node/nodeMaterialBuildState.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlockConnectionPointTypes } from './Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBlockTargets } from './Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterialBuildStateSharedData } from './nodeMaterialBuildStateSharedData';\r\nimport { Effect } from '../effect';\r\nimport { StringTools } from '../../Misc/stringTools';\r\n\r\n/**\r\n * Class used to store node based material build state\r\n */\r\nexport class NodeMaterialBuildState {\r\n    /** Gets or sets a boolean indicating if the current state can emit uniform buffers */\r\n    public supportUniformBuffers = false;\r\n    /**\r\n     * Gets the list of emitted attributes\r\n     */\r\n    public attributes = new Array<string>();\r\n    /**\r\n     * Gets the list of emitted uniforms\r\n     */\r\n    public uniforms = new Array<string>();\r\n    /**\r\n    * Gets the list of emitted constants\r\n    */\r\n    public constants = new Array<string>();\r\n    /**\r\n     * Gets the list of emitted samplers\r\n     */\r\n    public samplers = new Array<string>();\r\n    /**\r\n     * Gets the list of emitted functions\r\n     */\r\n    public functions: { [key: string]: string } = {};\r\n    /**\r\n     * Gets the list of emitted extensions\r\n     */\r\n    public extensions: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Gets the target of the compilation state\r\n     */\r\n    public target: NodeMaterialBlockTargets;\r\n    /**\r\n     * Gets the list of emitted counters\r\n     */\r\n    public counters: { [key: string]: number } = {};\r\n\r\n    /**\r\n     * Shared data between multiple NodeMaterialBuildState instances\r\n     */\r\n    public sharedData: NodeMaterialBuildStateSharedData;\r\n\r\n    /** @hidden */\r\n    public _vertexState: NodeMaterialBuildState;\r\n\r\n    /** @hidden */\r\n    public _attributeDeclaration = \"\";\r\n    /** @hidden */\r\n    public _uniformDeclaration = \"\";\r\n    /** @hidden */\r\n    public _constantDeclaration = \"\";\r\n    /** @hidden */\r\n    public _samplerDeclaration = \"\";\r\n    /** @hidden */\r\n    public _varyingTransfer = \"\";\r\n    /** @hidden */\r\n    public _injectAtEnd = \"\";\r\n\r\n    private _repeatableContentAnchorIndex = 0;\r\n    /** @hidden */\r\n    public _builtCompilationString = \"\";\r\n\r\n    /**\r\n     * Gets the emitted compilation strings\r\n     */\r\n    public compilationString = \"\";\r\n\r\n    /**\r\n     * Finalize the compilation strings\r\n     * @param state defines the current compilation state\r\n     */\r\n    public finalize(state: NodeMaterialBuildState) {\r\n        let emitComments = state.sharedData.emitComments;\r\n        let isFragmentMode = (this.target === NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.compilationString = `\\r\\n${emitComments ? \"//Entry point\\r\\n\" : \"\"}void main(void) {\\r\\n${this.compilationString}`;\r\n\r\n        if (this._constantDeclaration) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Constants\\r\\n\" : \"\"}${this._constantDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        let functionCode = \"\";\r\n        for (var functionName in this.functions) {\r\n            functionCode += this.functions[functionName] + `\\r\\n`;\r\n        }\r\n        this.compilationString = `\\r\\n${functionCode}\\r\\n${this.compilationString}`;\r\n\r\n        if (!isFragmentMode && this._varyingTransfer) {\r\n            this.compilationString = `${this.compilationString}\\r\\n${this._varyingTransfer}`;\r\n        }\r\n\r\n        if (this._injectAtEnd) {\r\n            this.compilationString = `${this.compilationString}\\r\\n${this._injectAtEnd}`;\r\n        }\r\n\r\n        this.compilationString = `${this.compilationString}\\r\\n}`;\r\n\r\n        if (this.sharedData.varyingDeclaration) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Varyings\\r\\n\" : \"\"}${this.sharedData.varyingDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        if (this._samplerDeclaration) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Samplers\\r\\n\" : \"\"}${this._samplerDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        if (this._uniformDeclaration) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Uniforms\\r\\n\" : \"\"}${this._uniformDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        if (this._attributeDeclaration && !isFragmentMode) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Attributes\\r\\n\" : \"\"}${this._attributeDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        this.compilationString = \"precision highp float;\\r\\n\" + this.compilationString;\r\n\r\n        for (var extensionName in this.extensions) {\r\n            let extension = this.extensions[extensionName];\r\n            this.compilationString = `\\r\\n${extension}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        this._builtCompilationString = this.compilationString;\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _repeatableContentAnchor(): string {\r\n        return `###___ANCHOR${this._repeatableContentAnchorIndex++}___###`;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getFreeVariableName(prefix: string): string {\r\n        prefix = prefix.replace(/[^a-zA-Z_]+/g, \"\");\r\n\r\n        if (this.sharedData.variableNames[prefix] === undefined) {\r\n            this.sharedData.variableNames[prefix] = 0;\r\n\r\n            // Check reserved words\r\n            if (prefix === \"output\" || prefix === \"texture\") {\r\n                return prefix + this.sharedData.variableNames[prefix];\r\n            }\r\n\r\n            return prefix;\r\n        } else {\r\n            this.sharedData.variableNames[prefix]++;\r\n        }\r\n\r\n        return prefix + this.sharedData.variableNames[prefix];\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getFreeDefineName(prefix: string): string {\r\n        if (this.sharedData.defineNames[prefix] === undefined) {\r\n            this.sharedData.defineNames[prefix] = 0;\r\n        } else {\r\n            this.sharedData.defineNames[prefix]++;\r\n        }\r\n\r\n        return prefix + this.sharedData.defineNames[prefix];\r\n    }\r\n\r\n    /** @hidden */\r\n    public _excludeVariableName(name: string) {\r\n        this.sharedData.variableNames[name] = 0;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _emit2DSampler(name: string) {\r\n        if (this.samplers.indexOf(name) < 0) {\r\n            this._samplerDeclaration += `uniform sampler2D ${name};\\r\\n`;\r\n            this.samplers.push(name);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getGLType(type: NodeMaterialBlockConnectionPointTypes): string {\r\n        switch (type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                return \"float\";\r\n            case NodeMaterialBlockConnectionPointTypes.Int:\r\n                return \"int\";\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                return \"vec2\";\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                return \"vec3\";\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                return \"vec4\";\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                return \"mat4\";\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _emitExtension(name: string, extension: string, define: string = \"\") {\r\n        if (this.extensions[name]) {\r\n            return;\r\n        }\r\n\r\n        if (define) {\r\n            extension = `#if ${define}\\r\\n${extension}\\r\\n#endif`;\r\n        }\r\n        this.extensions[name] = extension;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _emitFunction(name: string, code: string, comments: string) {\r\n        if (this.functions[name]) {\r\n            return;\r\n        }\r\n\r\n        if (this.sharedData.emitComments) {\r\n            code = comments + `\\r\\n` + code;\r\n        }\r\n\r\n        this.functions[name] = code;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _emitCodeFromInclude(includeName: string, comments: string, options?: {\r\n        replaceStrings?: { search: RegExp, replace: string }[],\r\n        repeatKey?: string\r\n    }) {\r\n        if (options && options.repeatKey) {\r\n            return `#include<${includeName}>[0..${options.repeatKey}]\\r\\n`;\r\n        }\r\n\r\n        let code = Effect.IncludesShadersStore[includeName] + \"\\r\\n\";\r\n\r\n        if (this.sharedData.emitComments) {\r\n            code = comments + `\\r\\n` + code;\r\n        }\r\n\r\n        if (!options) {\r\n            return code;\r\n        }\r\n\r\n        if (options.replaceStrings) {\r\n            for (var index = 0; index < options.replaceStrings.length; index++) {\r\n                let replaceString = options.replaceStrings[index];\r\n                code = code.replace(replaceString.search, replaceString.replace);\r\n            }\r\n        }\r\n\r\n        return code;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _emitFunctionFromInclude(includeName: string, comments: string, options?: {\r\n        repeatKey?: string,\r\n        removeAttributes?: boolean,\r\n        removeUniforms?: boolean,\r\n        removeVaryings?: boolean,\r\n        removeIfDef?: boolean,\r\n        replaceStrings?: { search: RegExp, replace: string }[],\r\n    }, storeKey: string = \"\") {\r\n        let key = includeName + storeKey;\r\n        if (this.functions[key]) {\r\n            return;\r\n        }\r\n\r\n        if (!options || (!options.removeAttributes && !options.removeUniforms && !options.removeVaryings && !options.removeIfDef && !options.replaceStrings)) {\r\n\r\n            if (options && options.repeatKey) {\r\n                this.functions[key] = `#include<${includeName}>[0..${options.repeatKey}]\\r\\n`;\r\n            } else {\r\n                this.functions[key] = `#include<${includeName}>\\r\\n`;\r\n            }\r\n\r\n            if (this.sharedData.emitComments) {\r\n                this.functions[key] = comments + `\\r\\n` + this.functions[key];\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.functions[key] = Effect.IncludesShadersStore[includeName];\r\n\r\n        if (this.sharedData.emitComments) {\r\n            this.functions[key] = comments + `\\r\\n` + this.functions[key];\r\n        }\r\n\r\n        if (options.removeIfDef) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#ifdef.+$/gm, \"\");\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#endif.*$/gm, \"\");\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#else.*$/gm, \"\");\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#elif.*$/gm, \"\");\r\n        }\r\n\r\n        if (options.removeAttributes) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?attribute.+$/gm, \"\");\r\n        }\r\n\r\n        if (options.removeUniforms) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?uniform.+$/gm, \"\");\r\n        }\r\n\r\n        if (options.removeVaryings) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?varying.+$/gm, \"\");\r\n        }\r\n\r\n        if (options.replaceStrings) {\r\n            for (var index = 0; index < options.replaceStrings.length; index++) {\r\n                let replaceString = options.replaceStrings[index];\r\n                this.functions[key] = this.functions[key].replace(replaceString.search, replaceString.replace);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _registerTempVariable(name: string) {\r\n        if (this.sharedData.temps.indexOf(name) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        this.sharedData.temps.push(name);\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _emitVaryingFromString(name: string, type: string, define: string = \"\", notDefine = false) {\r\n        if (this.sharedData.varyings.indexOf(name) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        this.sharedData.varyings.push(name);\r\n\r\n        if (define) {\r\n            if (StringTools.StartsWith(define, \"defined(\")) {\r\n                this.sharedData.varyingDeclaration += `#if ${define}\\r\\n`;\r\n            } else {\r\n                this.sharedData.varyingDeclaration += `${notDefine ? \"#ifndef\" : \"#ifdef\"} ${define}\\r\\n`;\r\n            }\r\n        }\r\n        this.sharedData.varyingDeclaration += `varying ${type} ${name};\\r\\n`;\r\n        if (define) {\r\n            this.sharedData.varyingDeclaration += `#endif\\r\\n`;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _emitUniformFromString(name: string, type: string, define: string = \"\", notDefine = false) {\r\n        if (this.uniforms.indexOf(name) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.uniforms.push(name);\r\n\r\n        if (define) {\r\n            if (StringTools.StartsWith(define, \"defined(\")) {\r\n                this._uniformDeclaration += `#if ${define}\\r\\n`;\r\n            } else {\r\n                this._uniformDeclaration += `${notDefine ? \"#ifndef\" : \"#ifdef\"} ${define}\\r\\n`;\r\n            }\r\n        }\r\n        this._uniformDeclaration += `uniform ${type} ${name};\\r\\n`;\r\n        if (define) {\r\n            this._uniformDeclaration += `#endif\\r\\n`;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _emitFloat(value: number) {\r\n        if (value.toString() === value.toFixed(0)) {\r\n            return `${value}.0`;\r\n        }\r\n\r\n        return value.toString();\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}