{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { Observable } from \"../../Misc/observable\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\nimport { Tools } from \"../../Misc/tools\";\n/**\r\n * Base class for mouse wheel input..\r\n * See FollowCameraMouseWheelInput in src/Cameras/Inputs/freeCameraMouseWheelInput.ts\r\n * for example usage.\r\n */\n\nvar BaseCameraMouseWheelInput =\n/** @class */\nfunction () {\n  function BaseCameraMouseWheelInput() {\n    /**\r\n     * How fast is the camera moves in relation to X axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\n    this.wheelPrecisionX = 3.0;\n    /**\r\n     * How fast is the camera moves in relation to Y axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\n\n    this.wheelPrecisionY = 3.0;\n    /**\r\n     * How fast is the camera moves in relation to Z axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\n\n    this.wheelPrecisionZ = 3.0;\n    /**\r\n     * Observable for when a mouse wheel move event occurs.\r\n     */\n\n    this.onChangedObservable = new Observable();\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the X axis.\r\n     * Should be zero-ed when read.\r\n     */\n\n    this._wheelDeltaX = 0;\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the Y axis.\r\n     * Should be zero-ed when read.\r\n     */\n\n    this._wheelDeltaY = 0;\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the Z axis.\r\n     * Should be zero-ed when read.\r\n     */\n\n    this._wheelDeltaZ = 0;\n    /**\r\n     * Firefox uses a different scheme to report scroll distances to other\r\n     * browsers. Rather than use complicated methods to calculate the exact\r\n     * multiple we need to apply, let's just cheat and use a constant.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode\r\n     * https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\r\n     */\n\n    this._ffMultiplier = 12;\n    /**\r\n     * Different event attributes for wheel data fall into a few set ranges.\r\n     * Some relevant but dated date here:\r\n     * https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\r\n     */\n\n    this._normalize = 120;\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls\r\n   *   should call preventdefault().\r\n   *   (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  BaseCameraMouseWheelInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this;\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    this._wheel = function (pointer) {\n      // sanity check - this should be a PointerWheel event.\n      if (pointer.type !== PointerEventTypes.POINTERWHEEL) {\n        return;\n      }\n\n      var event = pointer.event;\n      var platformScale = event.deltaMode === WheelEvent.DOM_DELTA_LINE ? _this._ffMultiplier : 1;\n\n      if (event.deltaY !== undefined) {\n        // Most recent browsers versions have delta properties.\n        // Firefox >= v17  (Has WebGL >= v4)\n        // Chrome >=  v31  (Has WebGL >= v8)\n        // Edge >=    v12  (Has WebGl >= v12)\n        // https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent\n        _this._wheelDeltaX += _this.wheelPrecisionX * platformScale * event.deltaX / _this._normalize;\n        _this._wheelDeltaY -= _this.wheelPrecisionY * platformScale * event.deltaY / _this._normalize;\n        _this._wheelDeltaZ += _this.wheelPrecisionZ * platformScale * event.deltaZ / _this._normalize;\n      } else if (event.wheelDeltaY !== undefined) {\n        // Unsure whether these catch anything more. Documentation\n        // online is contradictory.\n        _this._wheelDeltaX += _this.wheelPrecisionX * platformScale * event.wheelDeltaX / _this._normalize;\n        _this._wheelDeltaY -= _this.wheelPrecisionY * platformScale * event.wheelDeltaY / _this._normalize;\n        _this._wheelDeltaZ += _this.wheelPrecisionZ * platformScale * event.wheelDeltaZ / _this._normalize;\n      } else if (event.wheelDelta) {\n        // IE >= v9   (Has WebGL >= v11)\n        // Maybe others?\n        _this._wheelDeltaY -= _this.wheelPrecisionY * event.wheelDelta / _this._normalize;\n      }\n\n      if (event.preventDefault) {\n        if (!noPreventDefault) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  BaseCameraMouseWheelInput.prototype.detachControl = function (ignored) {\n    if (this._observer) {\n      this.camera.getScene().onPointerObservable.remove(this._observer);\n      this._observer = null;\n      this._wheel = null;\n    }\n\n    if (this.onChangedObservable) {\n      this.onChangedObservable.clear();\n    }\n  };\n  /**\r\n   * Called for each rendered frame.\r\n   */\n\n\n  BaseCameraMouseWheelInput.prototype.checkInputs = function () {\n    this.onChangedObservable.notifyObservers({\n      wheelDeltaX: this._wheelDeltaX,\n      wheelDeltaY: this._wheelDeltaY,\n      wheelDeltaZ: this._wheelDeltaZ\n    }); // Clear deltas.\n\n    this._wheelDeltaX = 0;\n    this._wheelDeltaY = 0;\n    this._wheelDeltaZ = 0;\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  BaseCameraMouseWheelInput.prototype.getClassName = function () {\n    return \"BaseCameraMouseWheelInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  BaseCameraMouseWheelInput.prototype.getSimpleName = function () {\n    return \"mousewheel\";\n  };\n\n  __decorate([serialize()], BaseCameraMouseWheelInput.prototype, \"wheelPrecisionX\", void 0);\n\n  __decorate([serialize()], BaseCameraMouseWheelInput.prototype, \"wheelPrecisionY\", void 0);\n\n  __decorate([serialize()], BaseCameraMouseWheelInput.prototype, \"wheelPrecisionZ\", void 0);\n\n  return BaseCameraMouseWheelInput;\n}();\n\nexport { BaseCameraMouseWheelInput };","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/BaseCameraMouseWheelInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { Observable, Observer } from \"../../Misc/observable\";\r\nimport { Camera } from \"../../Cameras/camera\";\r\nimport { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { PointerInfo, PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n/**\r\n * Base class for mouse wheel input..\r\n * See FollowCameraMouseWheelInput in src/Cameras/Inputs/freeCameraMouseWheelInput.ts\r\n * for example usage.\r\n */\r\nexport abstract class BaseCameraMouseWheelInput implements ICameraInput<Camera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public abstract camera: Camera;\r\n\r\n    /**\r\n     * How fast is the camera moves in relation to X axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\r\n    @serialize()\r\n    public wheelPrecisionX = 3.0;\r\n\r\n    /**\r\n     * How fast is the camera moves in relation to Y axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\r\n    @serialize()\r\n    public wheelPrecisionY = 3.0;\r\n\r\n    /**\r\n     * How fast is the camera moves in relation to Z axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\r\n    @serialize()\r\n    public wheelPrecisionZ = 3.0;\r\n\r\n    /**\r\n     * Observable for when a mouse wheel move event occurs.\r\n     */\r\n    public onChangedObservable = new Observable<{ wheelDeltaX: number; wheelDeltaY: number; wheelDeltaZ: number }>();\r\n\r\n    private _wheel: Nullable<(pointer: PointerInfo) => void>;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls\r\n     *   should call preventdefault().\r\n     *   (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n\r\n        this._wheel = (pointer) => {\r\n            // sanity check - this should be a PointerWheel event.\r\n            if (pointer.type !== PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n\r\n            const event = <MouseWheelEvent>pointer.event;\r\n\r\n            const platformScale = event.deltaMode === WheelEvent.DOM_DELTA_LINE ? this._ffMultiplier : 1;\r\n\r\n            if (event.deltaY !== undefined) {\r\n                // Most recent browsers versions have delta properties.\r\n                // Firefox >= v17  (Has WebGL >= v4)\r\n                // Chrome >=  v31  (Has WebGL >= v8)\r\n                // Edge >=    v12  (Has WebGl >= v12)\r\n                // https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent\r\n                this._wheelDeltaX += (this.wheelPrecisionX * platformScale * event.deltaX) / this._normalize;\r\n                this._wheelDeltaY -= (this.wheelPrecisionY * platformScale * event.deltaY) / this._normalize;\r\n                this._wheelDeltaZ += (this.wheelPrecisionZ * platformScale * event.deltaZ) / this._normalize;\r\n            } else if ((<any>event).wheelDeltaY !== undefined) {\r\n                // Unsure whether these catch anything more. Documentation\r\n                // online is contradictory.\r\n                this._wheelDeltaX += (this.wheelPrecisionX * platformScale * (<any>event).wheelDeltaX) / this._normalize;\r\n                this._wheelDeltaY -= (this.wheelPrecisionY * platformScale * (<any>event).wheelDeltaY) / this._normalize;\r\n                this._wheelDeltaZ += (this.wheelPrecisionZ * platformScale * (<any>event).wheelDeltaZ) / this._normalize;\r\n            } else if ((<any>event).wheelDelta) {\r\n                // IE >= v9   (Has WebGL >= v11)\r\n                // Maybe others?\r\n                this._wheelDeltaY -= (this.wheelPrecisionY * (<any>event).wheelDelta) / this._normalize;\r\n            }\r\n\r\n            if (event.preventDefault) {\r\n                if (!noPreventDefault) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        if (this._observer) {\r\n            this.camera.getScene().onPointerObservable.remove(this._observer);\r\n            this._observer = null;\r\n            this._wheel = null;\r\n        }\r\n        if (this.onChangedObservable) {\r\n            this.onChangedObservable.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called for each rendered frame.\r\n     */\r\n    public checkInputs(): void {\r\n        this.onChangedObservable.notifyObservers({\r\n            wheelDeltaX: this._wheelDeltaX,\r\n            wheelDeltaY: this._wheelDeltaY,\r\n            wheelDeltaZ: this._wheelDeltaZ,\r\n        });\r\n\r\n        // Clear deltas.\r\n        this._wheelDeltaX = 0;\r\n        this._wheelDeltaY = 0;\r\n        this._wheelDeltaZ = 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"BaseCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mousewheel\";\r\n    }\r\n\r\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the X axis.\r\n     * Should be zero-ed when read.\r\n     */\r\n    protected _wheelDeltaX: number = 0;\r\n\r\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the Y axis.\r\n     * Should be zero-ed when read.\r\n     */\r\n    protected _wheelDeltaY: number = 0;\r\n\r\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the Z axis.\r\n     * Should be zero-ed when read.\r\n     */\r\n    protected _wheelDeltaZ: number = 0;\r\n\r\n    /**\r\n     * Firefox uses a different scheme to report scroll distances to other\r\n     * browsers. Rather than use complicated methods to calculate the exact\r\n     * multiple we need to apply, let's just cheat and use a constant.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode\r\n     * https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\r\n     */\r\n    private readonly _ffMultiplier = 12;\r\n\r\n    /**\r\n     * Different event attributes for wheel data fall into a few set ranges.\r\n     * Some relevant but dated date here:\r\n     * https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\r\n     */\r\n    private readonly _normalize = 120;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}