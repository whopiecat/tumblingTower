{"ast":null,"code":"/**\r\n * Enum defining the type of properties that can be edited in the property pages in the NME\r\n */\nexport var PropertyTypeForEdition;\n\n(function (PropertyTypeForEdition) {\n  /** property is a boolean */\n  PropertyTypeForEdition[PropertyTypeForEdition[\"Boolean\"] = 0] = \"Boolean\";\n  /** property is a float */\n\n  PropertyTypeForEdition[PropertyTypeForEdition[\"Float\"] = 1] = \"Float\";\n  /** property is a Vector2 */\n\n  PropertyTypeForEdition[PropertyTypeForEdition[\"Vector2\"] = 2] = \"Vector2\";\n  /** property is a list of values */\n\n  PropertyTypeForEdition[PropertyTypeForEdition[\"List\"] = 3] = \"List\";\n})(PropertyTypeForEdition || (PropertyTypeForEdition = {}));\n/**\r\n * Decorator that flags a property in a node material block as being editable\r\n */\n\n\nexport function editableInPropertyPage(displayName, propertyType, groupName, options) {\n  if (propertyType === void 0) {\n    propertyType = PropertyTypeForEdition.Boolean;\n  }\n\n  if (groupName === void 0) {\n    groupName = \"PROPERTIES\";\n  }\n\n  return function (target, propertyKey) {\n    var propStore = target._propStore;\n\n    if (!propStore) {\n      propStore = [];\n      target._propStore = propStore;\n    }\n\n    propStore.push({\n      \"propertyName\": propertyKey,\n      \"displayName\": displayName,\n      \"type\": propertyType,\n      \"groupName\": groupName,\n      \"options\": options !== null && options !== void 0 ? options : {}\n    });\n  };\n}","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/Node/nodeMaterialDecorator.ts"],"names":[],"mappings":"AAAA;;;AAGA,OAAA,IAAY,sBAAZ;;AAAA,CAAA,UAAY,sBAAZ,EAAkC;AAC9B;AACA,EAAA,sBAAA,CAAA,sBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA;;AACA,EAAA,sBAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA;;AACA,EAAA,sBAAA,CAAA,sBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA;;AACA,EAAA,sBAAA,CAAA,sBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACH,CATD,EAAY,sBAAsB,KAAtB,sBAAsB,GAAA,EAAA,CAAlC;AAwDA;;;;;AAGA,OAAM,SAAU,sBAAV,CAAiC,WAAjC,EAAsD,YAAtD,EAA6H,SAA7H,EAA+J,OAA/J,EAAgM;AAA1I,MAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAuC,sBAAsB,CAAC,OAA9D;AAAqE;;AAAE,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,YAAA;AAAgC;;AAC/J,SAAO,UAAC,MAAD,EAAc,WAAd,EAAiC;AACpC,QAAI,SAAS,GAAqC,MAAM,CAAC,UAAzD;;AACA,QAAI,CAAC,SAAL,EAAgB;AACZ,MAAA,SAAS,GAAG,EAAZ;AACA,MAAA,MAAM,CAAC,UAAP,GAAoB,SAApB;AACH;;AACD,IAAA,SAAS,CAAC,IAAV,CAAe;AACX,sBAAgB,WADL;AAEX,qBAAe,WAFJ;AAGX,cAAQ,YAHG;AAIX,mBAAa,SAJF;AAKX,iBAAW,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAA,OAAA,GAAW;AALX,KAAf;AAOH,GAbD;AAcH","sourcesContent":["/**\r\n * Enum defining the type of properties that can be edited in the property pages in the NME\r\n */\r\nexport enum PropertyTypeForEdition {\r\n    /** property is a boolean */\r\n    Boolean,\r\n    /** property is a float */\r\n    Float,\r\n    /** property is a Vector2 */\r\n    Vector2,\r\n    /** property is a list of values */\r\n    List,\r\n}\r\n\r\n/**\r\n * Interface that defines an option in a variable of type list\r\n */\r\nexport interface IEditablePropertyListOption {\r\n    /** label of the option */\r\n    \"label\": string;\r\n    /** value of the option */\r\n    \"value\": number;\r\n}\r\n\r\n/**\r\n * Interface that defines the options available for an editable property\r\n */\r\nexport interface IEditablePropertyOption {\r\n    /** min value */\r\n    \"min\"?: number;\r\n    /** max value */\r\n    \"max\"?: number;\r\n    /** notifiers: indicates which actions to take when the property is changed */\r\n    \"notifiers\"?: {\r\n        /** the material should be rebuilt */\r\n        \"rebuild\"?: boolean;\r\n        /** the preview should be updated */\r\n        \"update\"?: boolean;\r\n    };\r\n    /** list of the options for a variable of type list */\r\n    \"options\"?: IEditablePropertyListOption[];\r\n}\r\n\r\n/**\r\n * Interface that describes an editable property\r\n */\r\nexport interface IPropertyDescriptionForEdition {\r\n    /** name of the property */\r\n    \"propertyName\": string;\r\n    /** display name of the property */\r\n    \"displayName\": string;\r\n    /** type of the property */\r\n    \"type\": PropertyTypeForEdition;\r\n    /** group of the property - all properties with the same group value will be displayed in a specific section */\r\n    \"groupName\": string;\r\n    /** options for the property */\r\n    \"options\": IEditablePropertyOption;\r\n}\r\n\r\n/**\r\n * Decorator that flags a property in a node material block as being editable\r\n */\r\nexport function editableInPropertyPage(displayName: string, propertyType: PropertyTypeForEdition = PropertyTypeForEdition.Boolean, groupName: string = \"PROPERTIES\", options?: IEditablePropertyOption) {\r\n    return (target: any, propertyKey: string) => {\r\n        let propStore: IPropertyDescriptionForEdition[] = target._propStore;\r\n        if (!propStore) {\r\n            propStore = [];\r\n            target._propStore = propStore;\r\n        }\r\n        propStore.push({\r\n            \"propertyName\": propertyKey,\r\n            \"displayName\": displayName,\r\n            \"type\": propertyType,\r\n            \"groupName\": groupName,\r\n            \"options\": options ?? {}\r\n        });\r\n    };\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}