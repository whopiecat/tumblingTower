{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger\";\nimport { Observable } from \"../Misc/observable\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Color3 } from '../Maths/math.color';\nimport { PolyhedronBuilder } from \"../Meshes/Builders/polyhedronBuilder\";\nimport { Gizmo } from \"./gizmo\";\nimport { AxisScaleGizmo } from \"./axisScaleGizmo\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\n/**\r\n * Gizmo that enables scaling a mesh along 3 axis\r\n */\n\nvar ScaleGizmo =\n/** @class */\nfunction (_super) {\n  __extends(ScaleGizmo, _super);\n  /**\r\n   * Creates a ScaleGizmo\r\n   * @param gizmoLayer The utility layer the gizmo will be added to\r\n   * @param thickness display gizmo axis thickness\r\n   */\n\n\n  function ScaleGizmo(gizmoLayer, thickness, gizmoManager) {\n    if (gizmoLayer === void 0) {\n      gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer;\n    }\n\n    if (thickness === void 0) {\n      thickness = 1;\n    }\n\n    var _this = _super.call(this, gizmoLayer) || this;\n\n    _this._meshAttached = null;\n    _this._nodeAttached = null;\n    _this._sensitivity = 1;\n    _this._observables = [];\n    /** Node Caching for quick lookup */\n\n    _this._gizmoAxisCache = new Map();\n    /** Fires an event when any of it's sub gizmos are dragged */\n\n    _this.onDragStartObservable = new Observable();\n    /** Fires an event when any of it's sub gizmos are released from dragging */\n\n    _this.onDragEndObservable = new Observable();\n    _this.uniformScaleGizmo = _this._createUniformScaleMesh();\n    _this.xGizmo = new AxisScaleGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, _this, thickness);\n    _this.yGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, _this, thickness);\n    _this.zGizmo = new AxisScaleGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, _this, thickness); // Relay drag events\n\n    [_this.xGizmo, _this.yGizmo, _this.zGizmo, _this.uniformScaleGizmo].forEach(function (gizmo) {\n      gizmo.dragBehavior.onDragStartObservable.add(function () {\n        _this.onDragStartObservable.notifyObservers({});\n      });\n      gizmo.dragBehavior.onDragEndObservable.add(function () {\n        _this.onDragEndObservable.notifyObservers({});\n      });\n    });\n    _this.attachedMesh = null;\n    _this.attachedNode = null;\n\n    if (gizmoManager) {\n      gizmoManager.addToAxisCache(_this._gizmoAxisCache);\n    } else {\n      // Only subscribe to pointer event if gizmoManager isnt\n      Gizmo.GizmoAxisPointerObserver(gizmoLayer, _this._gizmoAxisCache);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(ScaleGizmo.prototype, \"attachedMesh\", {\n    get: function () {\n      return this._meshAttached;\n    },\n    set: function (mesh) {\n      this._meshAttached = mesh;\n      this._nodeAttached = mesh;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n        if (gizmo.isEnabled) {\n          gizmo.attachedMesh = mesh;\n        } else {\n          gizmo.attachedMesh = null;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScaleGizmo.prototype, \"attachedNode\", {\n    get: function () {\n      return this._nodeAttached;\n    },\n    set: function (node) {\n      this._meshAttached = null;\n      this._nodeAttached = node;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n        if (gizmo.isEnabled) {\n          gizmo.attachedNode = node;\n        } else {\n          gizmo.attachedNode = null;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScaleGizmo.prototype, \"isHovered\", {\n    /**\r\n     * True when the mouse pointer is hovering a gizmo mesh\r\n     */\n    get: function () {\n      var hovered = false;\n      [this.xGizmo, this.yGizmo, this.zGizmo].forEach(function (gizmo) {\n        hovered = hovered || gizmo.isHovered;\n      });\n      return hovered;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Create Geometry for Gizmo */\n\n  ScaleGizmo.prototype._createUniformScaleMesh = function () {\n    this._coloredMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\n    this._coloredMaterial.diffuseColor = Color3.Gray();\n    this._hoverMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\n    this._hoverMaterial.diffuseColor = Color3.Yellow();\n    this._disableMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\n    this._disableMaterial.diffuseColor = Color3.Gray();\n    this._disableMaterial.alpha = 0.4;\n    var uniformScaleGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Gray().scale(0.5), this.gizmoLayer, this);\n    uniformScaleGizmo.updateGizmoRotationToMatchAttachedMesh = false;\n    uniformScaleGizmo.uniformScaling = true;\n    this._uniformScalingMesh = PolyhedronBuilder.CreatePolyhedron(\"uniform\", {\n      type: 1\n    }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\n\n    this._uniformScalingMesh.scaling.scaleInPlace(0.01);\n\n    this._uniformScalingMesh.visibility = 0;\n    this._octahedron = PolyhedronBuilder.CreatePolyhedron(\"\", {\n      type: 1\n    }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\n\n    this._octahedron.scaling.scaleInPlace(0.007);\n\n    this._uniformScalingMesh.addChild(this._octahedron);\n\n    uniformScaleGizmo.setCustomMesh(this._uniformScalingMesh, true);\n\n    var light = this.gizmoLayer._getSharedGizmoLight();\n\n    light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._octahedron);\n    var cache = {\n      gizmoMeshes: [this._octahedron, this._uniformScalingMesh],\n      colliderMeshes: [this._uniformScalingMesh],\n      material: this._coloredMaterial,\n      hoverMaterial: this._hoverMaterial,\n      disableMaterial: this._disableMaterial,\n      active: false\n    };\n    this.addToAxisCache(uniformScaleGizmo._rootMesh, cache);\n    return uniformScaleGizmo;\n  };\n\n  Object.defineProperty(ScaleGizmo.prototype, \"updateGizmoRotationToMatchAttachedMesh\", {\n    get: function () {\n      return this._updateGizmoRotationToMatchAttachedMesh;\n    },\n    set: function (value) {\n      if (!value) {\n        Logger.Warn(\"Setting updateGizmoRotationToMatchAttachedMesh = false on scaling gizmo is not supported.\");\n      } else {\n        this._updateGizmoRotationToMatchAttachedMesh = value;\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n          if (gizmo) {\n            gizmo.updateGizmoRotationToMatchAttachedMesh = value;\n          }\n        });\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScaleGizmo.prototype, \"snapDistance\", {\n    get: function () {\n      return this._snapDistance;\n    },\n\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\n    set: function (value) {\n      this._snapDistance = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.snapDistance = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScaleGizmo.prototype, \"scaleRatio\", {\n    get: function () {\n      return this._scaleRatio;\n    },\n\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\n    set: function (value) {\n      this._scaleRatio = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.scaleRatio = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScaleGizmo.prototype, \"sensitivity\", {\n    get: function () {\n      return this._sensitivity;\n    },\n\n    /**\r\n     * Sensitivity factor for dragging (Default: 1)\r\n     */\n    set: function (value) {\n      this._sensitivity = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.sensitivity = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\r\n   * @param mesh Axis gizmo mesh\r\n   * @param cache Gizmo axis definition used for reactive gizmo UI\r\n   */\n\n  ScaleGizmo.prototype.addToAxisCache = function (mesh, cache) {\n    this._gizmoAxisCache.set(mesh, cache);\n  };\n  /**\r\n   * Disposes of the gizmo\r\n   */\n\n\n  ScaleGizmo.prototype.dispose = function () {\n    var _this = this;\n\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n      if (gizmo) {\n        gizmo.dispose();\n      }\n    });\n\n    this._observables.forEach(function (obs) {\n      _this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\n    });\n\n    this.onDragStartObservable.clear();\n    this.onDragEndObservable.clear();\n    [this._uniformScalingMesh, this._octahedron].forEach(function (msh) {\n      if (msh) {\n        msh.dispose();\n      }\n    });\n    [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(function (matl) {\n      if (matl) {\n        matl.dispose();\n      }\n    });\n  };\n\n  return ScaleGizmo;\n}(Gizmo);\n\nexport { ScaleGizmo };","map":{"version":3,"sources":["../../../sourceES6/core/Gizmos/scaleGizmo.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { Observable, Observer } from \"../Misc/observable\";\r\nimport { Nullable } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from '../Maths/math.color';\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { PolyhedronBuilder } from \"../Meshes/Builders/polyhedronBuilder\";\r\nimport { Gizmo, GizmoAxisCache } from \"./gizmo\";\r\nimport { AxisScaleGizmo } from \"./axisScaleGizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Node } from \"../node\";\r\nimport { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { GizmoManager } from './gizmoManager';\r\n/**\r\n * Gizmo that enables scaling a mesh along 3 axis\r\n */\r\nexport class ScaleGizmo extends Gizmo {\r\n    /**\r\n     * Internal gizmo used for interactions on the x axis\r\n     */\r\n    public xGizmo: AxisScaleGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the y axis\r\n     */\r\n    public yGizmo: AxisScaleGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the z axis\r\n     */\r\n    public zGizmo: AxisScaleGizmo;\r\n\r\n    /**\r\n     * Internal gizmo used to scale all axis equally\r\n     */\r\n    public uniformScaleGizmo: AxisScaleGizmo;\r\n\r\n    private _meshAttached: Nullable<AbstractMesh> = null;\r\n    private _nodeAttached: Nullable<Node> = null;\r\n    private _snapDistance: number;\r\n    private _uniformScalingMesh: Mesh;\r\n    private _octahedron: Mesh;\r\n    private _sensitivity: number = 1;\r\n    private _coloredMaterial: StandardMaterial;\r\n    private _hoverMaterial: StandardMaterial;\r\n    private _disableMaterial: StandardMaterial;\r\n    private _observables: Observer<PointerInfo>[] = [];\r\n\r\n    /** Node Caching for quick lookup */\r\n    private _gizmoAxisCache: Map<Mesh, GizmoAxisCache> = new Map();\r\n\r\n    /** Fires an event when any of it's sub gizmos are dragged */\r\n    public onDragStartObservable = new Observable();\r\n    /** Fires an event when any of it's sub gizmos are released from dragging */\r\n    public onDragEndObservable = new Observable();\r\n\r\n    public get attachedMesh() {\r\n        return this._meshAttached;\r\n    }\r\n    public set attachedMesh(mesh: Nullable<AbstractMesh>) {\r\n        this._meshAttached = mesh;\r\n        this._nodeAttached = mesh;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo.isEnabled) {\r\n                gizmo.attachedMesh = mesh;\r\n            }\r\n            else {\r\n                gizmo.attachedMesh = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get attachedNode() {\r\n        return this._nodeAttached;\r\n    }\r\n    public set attachedNode(node: Nullable<Node>) {\r\n        this._meshAttached = null;\r\n        this._nodeAttached = node;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo.isEnabled) {\r\n                gizmo.attachedNode = node;\r\n            }\r\n            else {\r\n                gizmo.attachedNode = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * True when the mouse pointer is hovering a gizmo mesh\r\n     */\r\n    public get isHovered() {\r\n        var hovered = false;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo].forEach((gizmo) => {\r\n            hovered = hovered || gizmo.isHovered;\r\n        });\r\n        return hovered;\r\n    }\r\n\r\n    /**\r\n     * Creates a ScaleGizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param thickness display gizmo axis thickness\r\n     */\r\n    constructor(gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer, thickness: number = 1, gizmoManager?: GizmoManager) {\r\n        super(gizmoLayer);\r\n        this.uniformScaleGizmo = this._createUniformScaleMesh();\r\n        this.xGizmo = new AxisScaleGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, this, thickness);\r\n        this.yGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, this, thickness);\r\n        this.zGizmo = new AxisScaleGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, this, thickness);\r\n\r\n        // Relay drag events\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            gizmo.dragBehavior.onDragStartObservable.add(() => {\r\n                this.onDragStartObservable.notifyObservers({});\r\n            });\r\n            gizmo.dragBehavior.onDragEndObservable.add(() => {\r\n                this.onDragEndObservable.notifyObservers({});\r\n            });\r\n        });\r\n\r\n        this.attachedMesh = null;\r\n        this.attachedNode = null;\r\n\r\n        if (gizmoManager) {\r\n            gizmoManager.addToAxisCache(this._gizmoAxisCache);\r\n        } else {\r\n            // Only subscribe to pointer event if gizmoManager isnt\r\n            Gizmo.GizmoAxisPointerObserver(gizmoLayer, this._gizmoAxisCache);\r\n        }\r\n    }\r\n\r\n    /** Create Geometry for Gizmo */\r\n    private _createUniformScaleMesh(): AxisScaleGizmo {\r\n        this._coloredMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\r\n        this._coloredMaterial.diffuseColor = Color3.Gray();\r\n\r\n        this._hoverMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\r\n        this._hoverMaterial.diffuseColor = Color3.Yellow();\r\n\r\n        this._disableMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\r\n        this._disableMaterial.diffuseColor = Color3.Gray();\r\n        this._disableMaterial.alpha = 0.4;\r\n\r\n        const uniformScaleGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Gray().scale(0.5), this.gizmoLayer, this);\r\n        uniformScaleGizmo.updateGizmoRotationToMatchAttachedMesh = false;\r\n        uniformScaleGizmo.uniformScaling = true;\r\n        this._uniformScalingMesh = PolyhedronBuilder.CreatePolyhedron(\"uniform\", { type: 1 }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\r\n        this._uniformScalingMesh.scaling.scaleInPlace(0.01);\r\n        this._uniformScalingMesh.visibility = 0;\r\n        this._octahedron = PolyhedronBuilder.CreatePolyhedron(\"\", { type: 1 }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\r\n        this._octahedron.scaling.scaleInPlace(0.007);\r\n        this._uniformScalingMesh.addChild(this._octahedron);\r\n        uniformScaleGizmo.setCustomMesh(this._uniformScalingMesh, true);\r\n        var light = this.gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._octahedron);\r\n\r\n        const cache: GizmoAxisCache = {\r\n            gizmoMeshes: [this._octahedron, this._uniformScalingMesh],\r\n            colliderMeshes: [this._uniformScalingMesh],\r\n            material: this._coloredMaterial,\r\n            hoverMaterial: this._hoverMaterial,\r\n            disableMaterial: this._disableMaterial,\r\n            active: false\r\n        };\r\n\r\n        this.addToAxisCache(uniformScaleGizmo._rootMesh, cache);\r\n\r\n        return uniformScaleGizmo;\r\n    }\r\n\r\n    public set updateGizmoRotationToMatchAttachedMesh(value: boolean) {\r\n        if (!value) {\r\n            Logger.Warn(\"Setting updateGizmoRotationToMatchAttachedMesh = false on scaling gizmo is not supported.\");\r\n        }\r\n        else {\r\n            this._updateGizmoRotationToMatchAttachedMesh = value;\r\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n                if (gizmo) {\r\n                    gizmo.updateGizmoRotationToMatchAttachedMesh = value;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public get updateGizmoRotationToMatchAttachedMesh() {\r\n        return this._updateGizmoRotationToMatchAttachedMesh;\r\n    }\r\n\r\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public set snapDistance(value: number) {\r\n        this._snapDistance = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.snapDistance = value;\r\n            }\r\n        });\r\n    }\r\n    public get snapDistance() {\r\n        return this._snapDistance;\r\n    }\r\n\r\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\r\n    public set scaleRatio(value: number) {\r\n        this._scaleRatio = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.scaleRatio = value;\r\n            }\r\n        });\r\n    }\r\n    public get scaleRatio() {\r\n        return this._scaleRatio;\r\n    }\r\n\r\n    /**\r\n     * Sensitivity factor for dragging (Default: 1)\r\n     */\r\n    public set sensitivity(value: number) {\r\n        this._sensitivity = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.sensitivity = value;\r\n            }\r\n        });\r\n    }\r\n    public get sensitivity() {\r\n        return this._sensitivity;\r\n    }\r\n\r\n    /**\r\n     * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\r\n     * @param mesh Axis gizmo mesh\r\n     * @param cache Gizmo axis definition used for reactive gizmo UI\r\n     */\r\n    public addToAxisCache(mesh: Mesh, cache: GizmoAxisCache) {\r\n        this._gizmoAxisCache.set(mesh, cache);\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.dispose();\r\n            }\r\n        });\r\n        this._observables.forEach((obs) => {\r\n            this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\r\n        });\r\n        this.onDragStartObservable.clear();\r\n        this.onDragEndObservable.clear();\r\n        [this._uniformScalingMesh, this._octahedron].forEach((msh) => {\r\n            if (msh) {\r\n                msh.dispose();\r\n            }\r\n        });\r\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach((matl) => {\r\n            if (matl) {\r\n                matl.dispose();\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}