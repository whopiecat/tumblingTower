{"ast":null,"code":"import { Effect } from \"../../Materials/effect\";\nvar name = 'shadowMapFragment';\nvar shader = \" float depthSM=vDepthMetricSM;\\n#if defined(SM_DEPTHCLAMP) && SM_DEPTHCLAMP == 1\\n#if SM_USEDISTANCE == 1\\ndepthSM=clamp(((length(vPositionWSM-lightDataSM)+depthValuesSM.x)/(depthValuesSM.y))+biasAndScaleSM.x,0.0,1.0);\\n#else\\ndepthSM=clamp(((zSM+depthValuesSM.x)/(depthValuesSM.y))+biasAndScaleSM.x,0.0,1.0);\\n#endif\\ngl_FragDepth=depthSM;\\n#elif SM_USEDISTANCE == 1\\ndepthSM=(length(vPositionWSM-lightDataSM)+depthValuesSM.x)/(depthValuesSM.y)+biasAndScaleSM.x;\\n#endif\\n#if SM_ESM == 1\\ndepthSM=clamp(exp(-min(87.,biasAndScaleSM.z*depthSM)),0.,1.);\\n#endif\\n#if SM_FLOAT == 1\\ngl_FragColor=vec4(depthSM,1.0,1.0,1.0);\\n#else\\ngl_FragColor=pack(depthSM);\\n#endif\\nreturn;\";\nEffect.IncludesShadersStore[name] = shader;\n/** @hidden */\n\nexport var shadowMapFragment = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Shaders/ShadersInclude/shadowMapFragment.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,wBAAvB;AAEA,IAAI,IAAI,GAAG,mBAAX;AACA,IAAI,MAAM,GAAG,kqBAAb;AAqBA,MAAM,CAAC,oBAAP,CAA4B,IAA5B,IAAoC,MAApC;AACA;;AACA,OAAO,IAAI,iBAAiB,GAAG;AAAE,EAAA,IAAI,EAAA,IAAN;AAAQ,EAAA,MAAM,EAAA;AAAd,CAAxB","sourcesContent":["import { Effect } from \"../../Materials/effect\";\n\nlet name = 'shadowMapFragment';\nlet shader = ` float depthSM=vDepthMetricSM;\n#if defined(SM_DEPTHCLAMP) && SM_DEPTHCLAMP == 1\n#if SM_USEDISTANCE == 1\ndepthSM=clamp(((length(vPositionWSM-lightDataSM)+depthValuesSM.x)/(depthValuesSM.y))+biasAndScaleSM.x,0.0,1.0);\n#else\ndepthSM=clamp(((zSM+depthValuesSM.x)/(depthValuesSM.y))+biasAndScaleSM.x,0.0,1.0);\n#endif\ngl_FragDepth=depthSM;\n#elif SM_USEDISTANCE == 1\ndepthSM=(length(vPositionWSM-lightDataSM)+depthValuesSM.x)/(depthValuesSM.y)+biasAndScaleSM.x;\n#endif\n#if SM_ESM == 1\ndepthSM=clamp(exp(-min(87.,biasAndScaleSM.z*depthSM)),0.,1.);\n#endif\n#if SM_FLOAT == 1\ngl_FragColor=vec4(depthSM,1.0,1.0,1.0);\n#else\ngl_FragColor=pack(depthSM);\n#endif\nreturn;`;\n\nEffect.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport var shadowMapFragment = { name, shader };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}