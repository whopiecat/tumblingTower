{"ast":null,"code":"import { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { ArcRotateCameraInputsManager } from \"../../Cameras/arcRotateCameraInputsManager\";\nimport { Tools } from '../../Misc/tools';\n/**\r\n * Add orientation input support to the input manager.\r\n * @returns the current input manager\r\n */\n\nArcRotateCameraInputsManager.prototype.addVRDeviceOrientation = function () {\n  this.add(new ArcRotateCameraVRDeviceOrientationInput());\n  return this;\n};\n/**\r\n * Manage the device orientation inputs (gyroscope) to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\n\nvar ArcRotateCameraVRDeviceOrientationInput =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiate a new ArcRotateCameraVRDeviceOrientationInput.\r\n   */\n  function ArcRotateCameraVRDeviceOrientationInput() {\n    /**\r\n     * Defines a correction factor applied on the alpha value retrieved from the orientation events.\r\n     */\n    this.alphaCorrection = 1;\n    /**\r\n     * Defines a correction factor applied on the gamma value retrieved from the orientation events.\r\n     */\n\n    this.gammaCorrection = 1;\n    this._alpha = 0;\n    this._gamma = 0;\n    this._dirty = false;\n    this._deviceOrientationHandler = this._onOrientationEvent.bind(this);\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this;\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n    this.camera.attachControl(noPreventDefault);\n    var hostWindow = this.camera.getScene().getEngine().getHostWindow();\n\n    if (hostWindow) {\n      // check iOS 13+ support\n      if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === 'function') {\n        DeviceOrientationEvent.requestPermission().then(function (response) {\n          if (response === 'granted') {\n            hostWindow.addEventListener(\"deviceorientation\", _this._deviceOrientationHandler);\n          } else {\n            Tools.Warn(\"Permission not granted.\");\n          }\n        }).catch(function (error) {\n          Tools.Error(error);\n        });\n      } else {\n        hostWindow.addEventListener(\"deviceorientation\", this._deviceOrientationHandler);\n      }\n    }\n  };\n  /** @hidden */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype._onOrientationEvent = function (evt) {\n    if (evt.alpha !== null) {\n      this._alpha = (+evt.alpha | 0) * this.alphaCorrection;\n    }\n\n    if (evt.gamma !== null) {\n      this._gamma = (+evt.gamma | 0) * this.gammaCorrection;\n    }\n\n    this._dirty = true;\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.checkInputs = function () {\n    if (this._dirty) {\n      this._dirty = false;\n\n      if (this._gamma < 0) {\n        this._gamma = 180 + this._gamma;\n      }\n\n      this.camera.alpha = -this._alpha / 180.0 * Math.PI % Math.PI * 2;\n      this.camera.beta = this._gamma / 180.0 * Math.PI;\n    }\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.detachControl = function (ignored) {\n    window.removeEventListener(\"deviceorientation\", this._deviceOrientationHandler);\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraVRDeviceOrientationInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.getSimpleName = function () {\n    return \"VRDeviceOrientation\";\n  };\n\n  return ArcRotateCameraVRDeviceOrientationInput;\n}();\n\nexport { ArcRotateCameraVRDeviceOrientationInput };\nCameraInputTypes[\"ArcRotateCameraVRDeviceOrientationInput\"] = ArcRotateCameraVRDeviceOrientationInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/arcRotateCameraVRDeviceOrientationInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { ArcRotateCameraInputsManager } from \"../../Cameras/arcRotateCameraInputsManager\";\r\nimport { Tools } from '../../Misc/tools';\r\n\r\n// Module augmentation to abstract orientation inputs from camera.\r\ndeclare module \"../../Cameras/arcRotateCameraInputsManager\" {\r\n    export interface ArcRotateCameraInputsManager {\r\n        /**\r\n         * Add orientation input support to the input manager.\r\n         * @returns the current input manager\r\n         */\r\n        addVRDeviceOrientation(): ArcRotateCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Add orientation input support to the input manager.\r\n * @returns the current input manager\r\n */\r\nArcRotateCameraInputsManager.prototype.addVRDeviceOrientation = function(): ArcRotateCameraInputsManager {\r\n    this.add(new ArcRotateCameraVRDeviceOrientationInput());\r\n    return this;\r\n};\r\n\r\n/**\r\n * Manage the device orientation inputs (gyroscope) to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class ArcRotateCameraVRDeviceOrientationInput implements ICameraInput<ArcRotateCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: ArcRotateCamera;\r\n\r\n    /**\r\n     * Defines a correction factor applied on the alpha value retrieved from the orientation events.\r\n     */\r\n    public alphaCorrection = 1;\r\n\r\n    /**\r\n     * Defines a correction factor applied on the gamma value retrieved from the orientation events.\r\n     */\r\n    public gammaCorrection = 1;\r\n\r\n    private _alpha = 0;\r\n    private _gamma = 0;\r\n    private _dirty = false;\r\n\r\n    private _deviceOrientationHandler: () => void;\r\n\r\n    /**\r\n     * Instantiate a new ArcRotateCameraVRDeviceOrientationInput.\r\n     */\r\n    constructor() {\r\n        this._deviceOrientationHandler = this._onOrientationEvent.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n\r\n        this.camera.attachControl(noPreventDefault);\r\n\r\n        let hostWindow = this.camera.getScene().getEngine().getHostWindow();\r\n\r\n        if (hostWindow) {\r\n            // check iOS 13+ support\r\n            if (typeof(DeviceOrientationEvent) !== \"undefined\" && typeof (<any>DeviceOrientationEvent).requestPermission === 'function') {\r\n                (<any>DeviceOrientationEvent).requestPermission()\r\n                    .then((response: string) => {\r\n                        if (response === 'granted') {\r\n                            hostWindow!.addEventListener(\"deviceorientation\", this._deviceOrientationHandler);\r\n                        } else {\r\n                            Tools.Warn(\"Permission not granted.\");\r\n                        }\r\n                    })\r\n                    .catch((error: any) => {\r\n                        Tools.Error(error);\r\n                    });\r\n            } else {\r\n                hostWindow.addEventListener(\"deviceorientation\", this._deviceOrientationHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onOrientationEvent(evt: DeviceOrientationEvent): void {\r\n        if (evt.alpha !== null) {\r\n            this._alpha = (+evt.alpha | 0) * this.alphaCorrection;\r\n        }\r\n\r\n        if (evt.gamma !== null) {\r\n            this._gamma = (+evt.gamma | 0) * this.gammaCorrection;\r\n        }\r\n        this._dirty = true;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._dirty) {\r\n            this._dirty = false;\r\n\r\n            if (this._gamma < 0) {\r\n                this._gamma = 180 + this._gamma;\r\n            }\r\n\r\n            this.camera.alpha = (-this._alpha / 180.0 * Math.PI) % Math.PI * 2;\r\n            this.camera.beta = (this._gamma / 180.0 * Math.PI);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n     */\r\n    public detachControl(ignored?: any): void {\r\n        window.removeEventListener(\"deviceorientation\", this._deviceOrientationHandler);\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraVRDeviceOrientationInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"VRDeviceOrientation\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"ArcRotateCameraVRDeviceOrientationInput\"] = ArcRotateCameraVRDeviceOrientationInput;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}