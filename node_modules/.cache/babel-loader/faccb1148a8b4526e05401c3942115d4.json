{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/tonemap.fragment\";\n/** Defines operator used for tonemapping */\n\nexport var TonemappingOperator;\n\n(function (TonemappingOperator) {\n  /** Hable */\n  TonemappingOperator[TonemappingOperator[\"Hable\"] = 0] = \"Hable\";\n  /** Reinhard */\n\n  TonemappingOperator[TonemappingOperator[\"Reinhard\"] = 1] = \"Reinhard\";\n  /** HejiDawson */\n\n  TonemappingOperator[TonemappingOperator[\"HejiDawson\"] = 2] = \"HejiDawson\";\n  /** Photographic */\n\n  TonemappingOperator[TonemappingOperator[\"Photographic\"] = 3] = \"Photographic\";\n})(TonemappingOperator || (TonemappingOperator = {}));\n/**\r\n * Defines a post process to apply tone mapping\r\n */\n\n\nvar TonemapPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(TonemapPostProcess, _super);\n  /**\r\n   * Creates a new TonemapPostProcess\r\n   * @param name defines the name of the postprocess\r\n   * @param _operator defines the operator to use\r\n   * @param exposureAdjustment defines the required exposure adjustement\r\n   * @param camera defines the camera to use (can be null)\r\n   * @param samplingMode defines the required sampling mode (BABYLON.Texture.BILINEAR_SAMPLINGMODE by default)\r\n   * @param engine defines the hosting engine (can be ignore if camera is set)\r\n   * @param textureFormat defines the texture format to use (BABYLON.Engine.TEXTURETYPE_UNSIGNED_INT by default)\r\n   */\n\n\n  function TonemapPostProcess(name, _operator,\n  /** Defines the required exposure adjustement */\n  exposureAdjustment, camera, samplingMode, engine, textureFormat) {\n    if (samplingMode === void 0) {\n      samplingMode = 2;\n    }\n\n    if (textureFormat === void 0) {\n      textureFormat = 0;\n    }\n\n    var _this = _super.call(this, name, \"tonemap\", [\"_ExposureAdjustment\"], null, 1.0, camera, samplingMode, engine, true, null, textureFormat) || this;\n\n    _this._operator = _operator;\n    _this.exposureAdjustment = exposureAdjustment;\n    var defines = \"#define \";\n\n    if (_this._operator === TonemappingOperator.Hable) {\n      defines += \"HABLE_TONEMAPPING\";\n    } else if (_this._operator === TonemappingOperator.Reinhard) {\n      defines += \"REINHARD_TONEMAPPING\";\n    } else if (_this._operator === TonemappingOperator.HejiDawson) {\n      defines += \"OPTIMIZED_HEJIDAWSON_TONEMAPPING\";\n    } else if (_this._operator === TonemappingOperator.Photographic) {\n      defines += \"PHOTOGRAPHIC_TONEMAPPING\";\n    } //sadly a second call to create the effect.\n\n\n    _this.updateEffect(defines);\n\n    _this.onApply = function (effect) {\n      effect.setFloat(\"_ExposureAdjustment\", _this.exposureAdjustment);\n    };\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"TonemapPostProcess\" string\r\n   */\n\n\n  TonemapPostProcess.prototype.getClassName = function () {\n    return \"TonemapPostProcess\";\n  };\n\n  return TonemapPostProcess;\n}(PostProcess);\n\nexport { TonemapPostProcess };","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/tonemapPostProcess.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAA4B,eAA5B;AAGA,OAAO,6BAAP;AAIA;;AACA,OAAA,IAAY,mBAAZ;;AAAA,CAAA,UAAY,mBAAZ,EAA+B;AAC3B;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA;;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA;;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACA;;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;AACH,CATD,EAAY,mBAAmB,KAAnB,mBAAmB,GAAA,EAAA,CAA/B;AAWA;;;;;AAGA,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;AASpC;;;;;;;;;;;;AAUA,WAAA,kBAAA,CAAY,IAAZ,EAAkC,SAAlC;AACI;AACO,EAAA,kBAFX,EAEuC,MAFvC,EAEuD,YAFvD,EAEiF,MAFjF,EAEkG,aAFlG,EAEmH;AAA5D,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,CAAA;AAAwB;;AAAmB,QAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,aAAA,GAAA,CAAA;AAAiB;;AAFnH,QAAA,KAAA,GAGI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,SAAZ,EAAuB,CAAC,qBAAD,CAAvB,EAAgD,IAAhD,EAAsD,GAAtD,EAA2D,MAA3D,EAAmE,YAAnE,EAAiF,MAAjF,EAAyF,IAAzF,EAA+F,IAA/F,EAAqG,aAArG,KAAmH,IAHvH;;AAAkC,IAAA,KAAA,CAAA,SAAA,GAAA,SAAA;AAEvB,IAAA,KAAA,CAAA,kBAAA,GAAA,kBAAA;AAGP,QAAI,OAAO,GAAG,UAAd;;AAEA,QAAI,KAAI,CAAC,SAAL,KAAmB,mBAAmB,CAAC,KAA3C,EAAkD;AAC9C,MAAA,OAAO,IAAI,mBAAX;AACH,KAFD,MAGK,IAAI,KAAI,CAAC,SAAL,KAAmB,mBAAmB,CAAC,QAA3C,EAAqD;AACtD,MAAA,OAAO,IAAI,sBAAX;AACH,KAFI,MAGA,IAAI,KAAI,CAAC,SAAL,KAAmB,mBAAmB,CAAC,UAA3C,EAAuD;AACxD,MAAA,OAAO,IAAI,kCAAX;AACH,KAFI,MAGA,IAAI,KAAI,CAAC,SAAL,KAAmB,mBAAmB,CAAC,YAA3C,EAAyD;AAC1D,MAAA,OAAO,IAAI,0BAAX;AACH,KAhB8G,CAkB/G;;;AACA,IAAA,KAAI,CAAC,YAAL,CAAkB,OAAlB;;AAEA,IAAA,KAAI,CAAC,OAAL,GAAe,UAAC,MAAD,EAAe;AAC1B,MAAA,MAAM,CAAC,QAAP,CAAgB,qBAAhB,EAAuC,KAAI,CAAC,kBAA5C;AACH,KAFD;;;AAGH;AA5CD;;;;;;AAIO,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,oBAAP;AACH,GAFM;;AAyCX,SAAA,kBAAA;AAAC,CA9CD,CAAwC,WAAxC,CAAA","sourcesContent":["import { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { PostProcess } from \"./postProcess\";\r\n\r\n\r\nimport \"../Shaders/tonemap.fragment\";\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\n\r\n/** Defines operator used for tonemapping */\r\nexport enum TonemappingOperator {\r\n    /** Hable */\r\n    Hable = 0,\r\n    /** Reinhard */\r\n    Reinhard = 1,\r\n    /** HejiDawson */\r\n    HejiDawson = 2,\r\n    /** Photographic */\r\n    Photographic = 3,\r\n}\r\n\r\n/**\r\n * Defines a post process to apply tone mapping\r\n */\r\nexport class TonemapPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"TonemapPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"TonemapPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new TonemapPostProcess\r\n     * @param name defines the name of the postprocess\r\n     * @param _operator defines the operator to use\r\n     * @param exposureAdjustment defines the required exposure adjustement\r\n     * @param camera defines the camera to use (can be null)\r\n     * @param samplingMode defines the required sampling mode (BABYLON.Texture.BILINEAR_SAMPLINGMODE by default)\r\n     * @param engine defines the hosting engine (can be ignore if camera is set)\r\n     * @param textureFormat defines the texture format to use (BABYLON.Engine.TEXTURETYPE_UNSIGNED_INT by default)\r\n     */\r\n    constructor(name: string, private _operator: TonemappingOperator,\r\n        /** Defines the required exposure adjustement */\r\n        public exposureAdjustment: number, camera: Camera, samplingMode: number = 2, engine?: Engine, textureFormat = 0) {\r\n        super(name, \"tonemap\", [\"_ExposureAdjustment\"], null, 1.0, camera, samplingMode, engine, true, null, textureFormat);\r\n\r\n        var defines = \"#define \";\r\n\r\n        if (this._operator === TonemappingOperator.Hable) {\r\n            defines += \"HABLE_TONEMAPPING\";\r\n        }\r\n        else if (this._operator === TonemappingOperator.Reinhard) {\r\n            defines += \"REINHARD_TONEMAPPING\";\r\n        }\r\n        else if (this._operator === TonemappingOperator.HejiDawson) {\r\n            defines += \"OPTIMIZED_HEJIDAWSON_TONEMAPPING\";\r\n        }\r\n        else if (this._operator === TonemappingOperator.Photographic) {\r\n            defines += \"PHOTOGRAPHIC_TONEMAPPING\";\r\n        }\r\n\r\n        //sadly a second call to create the effect.\r\n        this.updateEffect(defines);\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setFloat(\"_ExposureAdjustment\", this.exposureAdjustment);\r\n        };\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}