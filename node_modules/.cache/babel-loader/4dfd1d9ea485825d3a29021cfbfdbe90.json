{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { WebXRControllerComponent } from \"./webXRControllerComponent\";\nimport { Observable } from \"../../Misc/observable\";\nimport { Logger } from \"../../Misc/logger\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { Quaternion, Vector3 } from \"../../Maths/math.vector\";\nimport { Mesh } from \"../../Meshes/mesh\";\n/**\r\n * An Abstract Motion controller\r\n * This class receives an xrInput and a profile layout and uses those to initialize the components\r\n * Each component has an observable to check for changes in value and state\r\n */\n\nvar WebXRAbstractMotionController =\n/** @class */\nfunction () {\n  /**\r\n   * constructs a new abstract motion controller\r\n   * @param scene the scene to which the model of the controller will be added\r\n   * @param layout The profile layout to load\r\n   * @param gamepadObject The gamepad object correlating to this controller\r\n   * @param handedness handedness (left/right/none) of this controller\r\n   * @param _doNotLoadControllerMesh set this flag to ignore the mesh loading\r\n   */\n  function WebXRAbstractMotionController(scene, layout,\n  /**\r\n   * The gamepad object correlating to this controller\r\n   */\n  gamepadObject,\n  /**\r\n   * handedness (left/right/none) of this controller\r\n   */\n  handedness, _doNotLoadControllerMesh) {\n    var _this = this;\n\n    if (_doNotLoadControllerMesh === void 0) {\n      _doNotLoadControllerMesh = false;\n    }\n\n    this.scene = scene;\n    this.layout = layout;\n    this.gamepadObject = gamepadObject;\n    this.handedness = handedness;\n\n    this._initComponent = function (id) {\n      if (!id) {\n        return;\n      }\n\n      var componentDef = _this.layout.components[id];\n      var type = componentDef.type;\n      var buttonIndex = componentDef.gamepadIndices.button; // search for axes\n\n      var axes = [];\n\n      if (componentDef.gamepadIndices.xAxis !== undefined && componentDef.gamepadIndices.yAxis !== undefined) {\n        axes.push(componentDef.gamepadIndices.xAxis, componentDef.gamepadIndices.yAxis);\n      }\n\n      _this.components[id] = new WebXRControllerComponent(id, type, buttonIndex, axes);\n    };\n\n    this._modelReady = false;\n    /**\r\n     * A map of components (WebXRControllerComponent) in this motion controller\r\n     * Components have a ComponentType and can also have both button and axis definitions\r\n     */\n\n    this.components = {};\n    /**\r\n     * Disable the model's animation. Can be set at any time.\r\n     */\n\n    this.disableAnimation = false;\n    /**\r\n     * Observers registered here will be triggered when the model of this controller is done loading\r\n     */\n\n    this.onModelLoadedObservable = new Observable(); // initialize the components\n\n    if (layout.components) {\n      Object.keys(layout.components).forEach(this._initComponent);\n    } // Model is loaded in WebXRInput\n\n  }\n  /**\r\n   * Dispose this controller, the model mesh and all its components\r\n   */\n\n\n  WebXRAbstractMotionController.prototype.dispose = function () {\n    var _this = this;\n\n    this.getComponentIds().forEach(function (id) {\n      return _this.getComponent(id).dispose();\n    });\n\n    if (this.rootMesh) {\n      this.rootMesh.dispose();\n    }\n  };\n  /**\r\n   * Returns all components of specific type\r\n   * @param type the type to search for\r\n   * @return an array of components with this type\r\n   */\n\n\n  WebXRAbstractMotionController.prototype.getAllComponentsOfType = function (type) {\n    var _this = this;\n\n    return this.getComponentIds().map(function (id) {\n      return _this.components[id];\n    }).filter(function (component) {\n      return component.type === type;\n    });\n  };\n  /**\r\n   * get a component based an its component id as defined in layout.components\r\n   * @param id the id of the component\r\n   * @returns the component correlates to the id or undefined if not found\r\n   */\n\n\n  WebXRAbstractMotionController.prototype.getComponent = function (id) {\n    return this.components[id];\n  };\n  /**\r\n   * Get the list of components available in this motion controller\r\n   * @returns an array of strings correlating to available components\r\n   */\n\n\n  WebXRAbstractMotionController.prototype.getComponentIds = function () {\n    return Object.keys(this.components);\n  };\n  /**\r\n   * Get the first component of specific type\r\n   * @param type type of component to find\r\n   * @return a controller component or null if not found\r\n   */\n\n\n  WebXRAbstractMotionController.prototype.getComponentOfType = function (type) {\n    return this.getAllComponentsOfType(type)[0] || null;\n  };\n  /**\r\n   * Get the main (Select) component of this controller as defined in the layout\r\n   * @returns the main component of this controller\r\n   */\n\n\n  WebXRAbstractMotionController.prototype.getMainComponent = function () {\n    return this.getComponent(this.layout.selectComponentId);\n  };\n  /**\r\n   * Loads the model correlating to this controller\r\n   * When the mesh is loaded, the onModelLoadedObservable will be triggered\r\n   * @returns A promise fulfilled with the result of the model loading\r\n   */\n\n\n  WebXRAbstractMotionController.prototype.loadModel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var useGeneric, loadingParams;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        useGeneric = !this._getModelLoadingConstraints();\n        loadingParams = this._getGenericFilenameAndPath(); // Checking if GLB loader is present\n\n        if (useGeneric) {\n          Logger.Warn(\"Falling back to generic models\");\n        } else {\n          loadingParams = this._getFilenameAndPath();\n        }\n\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          SceneLoader.ImportMesh(\"\", loadingParams.path, loadingParams.filename, _this.scene, function (meshes) {\n            if (useGeneric) {\n              _this._getGenericParentMesh(meshes);\n            } else {\n              _this._setRootMesh(meshes);\n            }\n\n            _this._processLoadedModel(meshes);\n\n            _this._modelReady = true;\n\n            _this.onModelLoadedObservable.notifyObservers(_this);\n\n            resolve(true);\n          }, null, function (_scene, message) {\n            Logger.Log(message);\n            Logger.Warn(\"Failed to retrieve controller model of type \" + _this.profileId + \" from the remote server: \" + loadingParams.path + loadingParams.filename);\n            reject(message);\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Update this model using the current XRFrame\r\n   * @param xrFrame the current xr frame to use and update the model\r\n   */\n\n\n  WebXRAbstractMotionController.prototype.updateFromXRFrame = function (xrFrame) {\n    var _this = this;\n\n    this.getComponentIds().forEach(function (id) {\n      return _this.getComponent(id).update(_this.gamepadObject);\n    });\n    this.updateModel(xrFrame);\n  };\n\n  Object.defineProperty(WebXRAbstractMotionController.prototype, \"handness\", {\n    /**\r\n     * Backwards compatibility due to a deeply-integrated typo\r\n     */\n    get: function () {\n      return this.handedness;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Pulse (vibrate) this controller\r\n   * If the controller does not support pulses, this function will fail silently and return Promise<false> directly after called\r\n   * Consecutive calls to this function will cancel the last pulse call\r\n   *\r\n   * @param value the strength of the pulse in 0.0...1.0 range\r\n   * @param duration Duration of the pulse in milliseconds\r\n   * @param hapticActuatorIndex optional index of actuator (will usually be 0)\r\n   * @returns a promise that will send true when the pulse has ended and false if the device doesn't support pulse or an error accrued\r\n   */\n\n  WebXRAbstractMotionController.prototype.pulse = function (value, duration, hapticActuatorIndex) {\n    if (hapticActuatorIndex === void 0) {\n      hapticActuatorIndex = 0;\n    }\n\n    if (this.gamepadObject.hapticActuators && this.gamepadObject.hapticActuators[hapticActuatorIndex]) {\n      return this.gamepadObject.hapticActuators[hapticActuatorIndex].pulse(value, duration);\n    } else {\n      return Promise.resolve(false);\n    }\n  }; // Look through all children recursively. This will return null if no mesh exists with the given name.\n\n\n  WebXRAbstractMotionController.prototype._getChildByName = function (node, name) {\n    return node.getChildren(function (n) {\n      return n.name === name;\n    }, false)[0];\n  }; // Look through only immediate children. This will return null if no mesh exists with the given name.\n\n\n  WebXRAbstractMotionController.prototype._getImmediateChildByName = function (node, name) {\n    return node.getChildren(function (n) {\n      return n.name == name;\n    }, true)[0];\n  };\n  /**\r\n   * Moves the axis on the controller mesh based on its current state\r\n   * @param axis the index of the axis\r\n   * @param axisValue the value of the axis which determines the meshes new position\r\n   * @hidden\r\n   */\n\n\n  WebXRAbstractMotionController.prototype._lerpTransform = function (axisMap, axisValue, fixValueCoordinates) {\n    if (!axisMap.minMesh || !axisMap.maxMesh || !axisMap.valueMesh) {\n      return;\n    }\n\n    if (!axisMap.minMesh.rotationQuaternion || !axisMap.maxMesh.rotationQuaternion || !axisMap.valueMesh.rotationQuaternion) {\n      return;\n    } // Convert from gamepad value range (-1 to +1) to lerp range (0 to 1)\n\n\n    var lerpValue = fixValueCoordinates ? axisValue * 0.5 + 0.5 : axisValue;\n    Quaternion.SlerpToRef(axisMap.minMesh.rotationQuaternion, axisMap.maxMesh.rotationQuaternion, lerpValue, axisMap.valueMesh.rotationQuaternion);\n    Vector3.LerpToRef(axisMap.minMesh.position, axisMap.maxMesh.position, lerpValue, axisMap.valueMesh.position);\n  };\n  /**\r\n   * Update the model itself with the current frame data\r\n   * @param xrFrame the frame to use for updating the model mesh\r\n   */\n\n\n  WebXRAbstractMotionController.prototype.updateModel = function (xrFrame) {\n    if (!this._modelReady) {\n      return;\n    }\n\n    this._updateModel(xrFrame);\n  };\n\n  WebXRAbstractMotionController.prototype._getGenericFilenameAndPath = function () {\n    return {\n      filename: \"generic.babylon\",\n      path: \"https://controllers.babylonjs.com/generic/\"\n    };\n  };\n\n  WebXRAbstractMotionController.prototype._getGenericParentMesh = function (meshes) {\n    var _this = this;\n\n    this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n    meshes.forEach(function (mesh) {\n      if (!mesh.parent) {\n        mesh.isPickable = false;\n        mesh.setParent(_this.rootMesh);\n      }\n    });\n    this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n  };\n\n  return WebXRAbstractMotionController;\n}();\n\nexport { WebXRAbstractMotionController };","map":{"version":3,"sources":["../../../../sourceES6/core/XR/motionController/webXRAbstractMotionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { IDisposable, Scene } from \"../../scene\";\r\nimport { WebXRControllerComponent } from \"./webXRControllerComponent\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Nullable } from \"../../types\";\r\nimport { Quaternion, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\n\r\n/**\r\n * Handedness type in xrInput profiles. These can be used to define layouts in the Layout Map.\r\n */\r\nexport type MotionControllerHandedness = \"none\" | \"left\" | \"right\";\r\n/**\r\n * The type of components available in motion controllers.\r\n * This is not the name of the component.\r\n */\r\nexport type MotionControllerComponentType = \"trigger\" | \"squeeze\" | \"touchpad\" | \"thumbstick\" | \"button\";\r\n\r\n/**\r\n * The state of a controller component\r\n */\r\nexport type MotionControllerComponentStateType = \"default\" | \"touched\" | \"pressed\";\r\n\r\n/**\r\n * The schema of motion controller layout.\r\n * No object will be initialized using this interface\r\n * This is used just to define the profile.\r\n */\r\nexport interface IMotionControllerLayout {\r\n    /**\r\n     * Path to load the assets. Usually relative to the base path\r\n     */\r\n    assetPath: string;\r\n    /**\r\n     * Available components (unsorted)\r\n     */\r\n    components: {\r\n        /**\r\n         * A map of component Ids\r\n         */\r\n        [componentId: string]: {\r\n            /**\r\n             * The type of input the component outputs\r\n             */\r\n            type: MotionControllerComponentType;\r\n            /**\r\n             * The indices of this component in the gamepad object\r\n             */\r\n            gamepadIndices: {\r\n                /**\r\n                 * Index of button\r\n                 */\r\n                button?: number;\r\n                /**\r\n                 * If available, index of x-axis\r\n                 */\r\n                xAxis?: number;\r\n                /**\r\n                 * If available, index of y-axis\r\n                 */\r\n                yAxis?: number;\r\n            };\r\n            /**\r\n             * The mesh's root node name\r\n             */\r\n            rootNodeName: string;\r\n            /**\r\n             * Animation definitions for this model\r\n             */\r\n            visualResponses: {\r\n                [stateKey: string]: {\r\n                    /**\r\n                     * What property will be animated\r\n                     */\r\n                    componentProperty: \"xAxis\" | \"yAxis\" | \"button\" | \"state\";\r\n                    /**\r\n                     * What states influence this visual response\r\n                     */\r\n                    states: MotionControllerComponentStateType[];\r\n                    /**\r\n                     * Type of animation - movement or visibility\r\n                     */\r\n                    valueNodeProperty: \"transform\" | \"visibility\";\r\n                    /**\r\n                     * Base node name to move. Its position will be calculated according to the min and max nodes\r\n                     */\r\n                    valueNodeName?: string;\r\n                    /**\r\n                     * Minimum movement node\r\n                     */\r\n                    minNodeName?: string;\r\n                    /**\r\n                     * Max movement node\r\n                     */\r\n                    maxNodeName?: string;\r\n                };\r\n            };\r\n            /**\r\n             * If touch enabled, what is the name of node to display user feedback\r\n             */\r\n            touchPointNodeName?: string;\r\n        };\r\n    };\r\n    /**\r\n     * Is it xr standard mapping or not\r\n     */\r\n    gamepadMapping: \"\" | \"xr-standard\";\r\n    /**\r\n     * Base root node of this entire model\r\n     */\r\n    rootNodeName: string;\r\n    /**\r\n     * Defines the main button component id\r\n     */\r\n    selectComponentId: string;\r\n}\r\n\r\n/**\r\n * A definition for the layout map in the input profile\r\n */\r\nexport interface IMotionControllerLayoutMap {\r\n    /**\r\n     * Layouts with handedness type as a key\r\n     */\r\n    [handedness: string /* handedness */]: IMotionControllerLayout;\r\n}\r\n\r\n/**\r\n * The XR Input profile schema\r\n * Profiles can be found here:\r\n * https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/registry/profiles\r\n */\r\nexport interface IMotionControllerProfile {\r\n    /**\r\n     * fallback profiles for this profileId\r\n     */\r\n    fallbackProfileIds: string[];\r\n    /**\r\n     * The layout map, with handedness as key\r\n     */\r\n    layouts: IMotionControllerLayoutMap;\r\n    /**\r\n     * The id of this profile\r\n     * correlates to the profile(s) in the xrInput.profiles array\r\n     */\r\n    profileId: string;\r\n}\r\n\r\n/**\r\n * A helper-interface for the 3 meshes needed for controller button animation\r\n * The meshes are provided to the _lerpButtonTransform function to calculate the current position of the value mesh\r\n */\r\nexport interface IMotionControllerButtonMeshMap {\r\n    /**\r\n     * the mesh that defines the pressed value mesh position.\r\n     * This is used to find the max-position of this button\r\n     */\r\n    pressedMesh: AbstractMesh;\r\n    /**\r\n     * the mesh that defines the unpressed value mesh position.\r\n     * This is used to find the min (or initial) position of this button\r\n     */\r\n    unpressedMesh: AbstractMesh;\r\n    /**\r\n     * The mesh that will be changed when value changes\r\n     */\r\n    valueMesh: AbstractMesh;\r\n}\r\n\r\n/**\r\n * A helper-interface for the 3 meshes needed for controller axis animation.\r\n * This will be expanded when touchpad animations are fully supported\r\n * The meshes are provided to the _lerpAxisTransform function to calculate the current position of the value mesh\r\n */\r\nexport interface IMotionControllerMeshMap {\r\n    /**\r\n     * the mesh that defines the maximum value mesh position.\r\n     */\r\n    maxMesh?: AbstractMesh;\r\n    /**\r\n     * the mesh that defines the minimum value mesh position.\r\n     */\r\n    minMesh?: AbstractMesh;\r\n    /**\r\n     * The mesh that will be changed when axis value changes\r\n     */\r\n    valueMesh?: AbstractMesh;\r\n}\r\n\r\n/**\r\n * The elements needed for change-detection of the gamepad objects in motion controllers\r\n */\r\nexport interface IMinimalMotionControllerObject {\r\n    /**\r\n     * Available axes of this controller\r\n     */\r\n    axes: number[];\r\n    /**\r\n     * An array of available buttons\r\n     */\r\n    buttons: Array<{\r\n        /**\r\n         * Value of the button/trigger\r\n         */\r\n        value: number;\r\n        /**\r\n         * If the button/trigger is currently touched\r\n         */\r\n        touched: boolean;\r\n        /**\r\n         * If the button/trigger is currently pressed\r\n         */\r\n        pressed: boolean;\r\n    }>;\r\n\r\n    /**\r\n     * EXPERIMENTAL haptic support.\r\n     */\r\n    hapticActuators?: Array<{\r\n        pulse: (value: number, duration: number) => Promise<boolean>;\r\n    }>;\r\n}\r\n\r\n/**\r\n * An Abstract Motion controller\r\n * This class receives an xrInput and a profile layout and uses those to initialize the components\r\n * Each component has an observable to check for changes in value and state\r\n */\r\nexport abstract class WebXRAbstractMotionController implements IDisposable {\r\n    private _initComponent = (id: string) => {\r\n        if (!id) {\r\n            return;\r\n        }\r\n        const componentDef = this.layout.components[id];\r\n        const type = componentDef.type;\r\n        const buttonIndex = componentDef.gamepadIndices.button;\r\n        // search for axes\r\n        let axes: number[] = [];\r\n        if (componentDef.gamepadIndices.xAxis !== undefined && componentDef.gamepadIndices.yAxis !== undefined) {\r\n            axes.push(componentDef.gamepadIndices.xAxis, componentDef.gamepadIndices.yAxis);\r\n        }\r\n\r\n        this.components[id] = new WebXRControllerComponent(id, type, buttonIndex, axes);\r\n    };\r\n\r\n    private _modelReady: boolean = false;\r\n\r\n    /**\r\n     * A map of components (WebXRControllerComponent) in this motion controller\r\n     * Components have a ComponentType and can also have both button and axis definitions\r\n     */\r\n    public readonly components: {\r\n        [id: string]: WebXRControllerComponent;\r\n    } = {};\r\n\r\n    /**\r\n     * Disable the model's animation. Can be set at any time.\r\n     */\r\n    public disableAnimation: boolean = false;\r\n    /**\r\n     * Observers registered here will be triggered when the model of this controller is done loading\r\n     */\r\n    public onModelLoadedObservable: Observable<WebXRAbstractMotionController> = new Observable();\r\n    /**\r\n     * The profile id of this motion controller\r\n     */\r\n    public abstract profileId: string;\r\n    /**\r\n     * The root mesh of the model. It is null if the model was not yet initialized\r\n     */\r\n    public rootMesh: Nullable<AbstractMesh>;\r\n\r\n    /**\r\n     * constructs a new abstract motion controller\r\n     * @param scene the scene to which the model of the controller will be added\r\n     * @param layout The profile layout to load\r\n     * @param gamepadObject The gamepad object correlating to this controller\r\n     * @param handedness handedness (left/right/none) of this controller\r\n     * @param _doNotLoadControllerMesh set this flag to ignore the mesh loading\r\n     */\r\n    constructor(\r\n        protected scene: Scene,\r\n        protected layout: IMotionControllerLayout,\r\n        /**\r\n         * The gamepad object correlating to this controller\r\n         */\r\n        public gamepadObject: IMinimalMotionControllerObject,\r\n        /**\r\n         * handedness (left/right/none) of this controller\r\n         */\r\n        public handedness: MotionControllerHandedness,\r\n        _doNotLoadControllerMesh: boolean = false\r\n    ) {\r\n        // initialize the components\r\n        if (layout.components) {\r\n            Object.keys(layout.components).forEach(this._initComponent);\r\n        }\r\n        // Model is loaded in WebXRInput\r\n    }\r\n\r\n    /**\r\n     * Dispose this controller, the model mesh and all its components\r\n     */\r\n    public dispose(): void {\r\n        this.getComponentIds().forEach((id) => this.getComponent(id).dispose());\r\n        if (this.rootMesh) {\r\n            this.rootMesh.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all components of specific type\r\n     * @param type the type to search for\r\n     * @return an array of components with this type\r\n     */\r\n    public getAllComponentsOfType(type: MotionControllerComponentType): WebXRControllerComponent[] {\r\n        return this.getComponentIds()\r\n            .map((id) => this.components[id])\r\n            .filter((component) => component.type === type);\r\n    }\r\n\r\n    /**\r\n     * get a component based an its component id as defined in layout.components\r\n     * @param id the id of the component\r\n     * @returns the component correlates to the id or undefined if not found\r\n     */\r\n    public getComponent(id: string): WebXRControllerComponent {\r\n        return this.components[id];\r\n    }\r\n\r\n    /**\r\n     * Get the list of components available in this motion controller\r\n     * @returns an array of strings correlating to available components\r\n     */\r\n    public getComponentIds(): string[] {\r\n        return Object.keys(this.components);\r\n    }\r\n\r\n    /**\r\n     * Get the first component of specific type\r\n     * @param type type of component to find\r\n     * @return a controller component or null if not found\r\n     */\r\n    public getComponentOfType(type: MotionControllerComponentType): Nullable<WebXRControllerComponent> {\r\n        return this.getAllComponentsOfType(type)[0] || null;\r\n    }\r\n\r\n    /**\r\n     * Get the main (Select) component of this controller as defined in the layout\r\n     * @returns the main component of this controller\r\n     */\r\n    public getMainComponent(): WebXRControllerComponent {\r\n        return this.getComponent(this.layout.selectComponentId);\r\n    }\r\n\r\n    /**\r\n     * Loads the model correlating to this controller\r\n     * When the mesh is loaded, the onModelLoadedObservable will be triggered\r\n     * @returns A promise fulfilled with the result of the model loading\r\n     */\r\n    public async loadModel(): Promise<boolean> {\r\n        let useGeneric = !this._getModelLoadingConstraints();\r\n        let loadingParams = this._getGenericFilenameAndPath();\r\n        // Checking if GLB loader is present\r\n        if (useGeneric) {\r\n            Logger.Warn(\"Falling back to generic models\");\r\n        } else {\r\n            loadingParams = this._getFilenameAndPath();\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            SceneLoader.ImportMesh(\r\n                \"\",\r\n                loadingParams.path,\r\n                loadingParams.filename,\r\n                this.scene,\r\n                (meshes: AbstractMesh[]) => {\r\n                    if (useGeneric) {\r\n                        this._getGenericParentMesh(meshes);\r\n                    } else {\r\n                        this._setRootMesh(meshes);\r\n                    }\r\n                    this._processLoadedModel(meshes);\r\n                    this._modelReady = true;\r\n                    this.onModelLoadedObservable.notifyObservers(this);\r\n                    resolve(true);\r\n                },\r\n                null,\r\n                (_scene: Scene, message: string) => {\r\n                    Logger.Log(message);\r\n                    Logger.Warn(`Failed to retrieve controller model of type ${this.profileId} from the remote server: ${loadingParams.path}${loadingParams.filename}`);\r\n                    reject(message);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update this model using the current XRFrame\r\n     * @param xrFrame the current xr frame to use and update the model\r\n     */\r\n    public updateFromXRFrame(xrFrame: XRFrame): void {\r\n        this.getComponentIds().forEach((id) => this.getComponent(id).update(this.gamepadObject));\r\n        this.updateModel(xrFrame);\r\n    }\r\n\r\n    /**\r\n     * Backwards compatibility due to a deeply-integrated typo\r\n     */\r\n    public get handness() {\r\n        return this.handedness;\r\n    }\r\n\r\n    /**\r\n     * Pulse (vibrate) this controller\r\n     * If the controller does not support pulses, this function will fail silently and return Promise<false> directly after called\r\n     * Consecutive calls to this function will cancel the last pulse call\r\n     *\r\n     * @param value the strength of the pulse in 0.0...1.0 range\r\n     * @param duration Duration of the pulse in milliseconds\r\n     * @param hapticActuatorIndex optional index of actuator (will usually be 0)\r\n     * @returns a promise that will send true when the pulse has ended and false if the device doesn't support pulse or an error accrued\r\n     */\r\n    public pulse(value: number, duration: number, hapticActuatorIndex: number = 0): Promise<boolean> {\r\n        if (this.gamepadObject.hapticActuators && this.gamepadObject.hapticActuators[hapticActuatorIndex]) {\r\n            return this.gamepadObject.hapticActuators[hapticActuatorIndex].pulse(value, duration);\r\n        } else {\r\n            return Promise.resolve(false);\r\n        }\r\n    }\r\n\r\n    // Look through all children recursively. This will return null if no mesh exists with the given name.\r\n    protected _getChildByName(node: AbstractMesh, name: string): AbstractMesh | undefined {\r\n        return <AbstractMesh | undefined>node.getChildren((n) => n.name === name, false)[0];\r\n    }\r\n\r\n    // Look through only immediate children. This will return null if no mesh exists with the given name.\r\n    protected _getImmediateChildByName(node: AbstractMesh, name: string): AbstractMesh | undefined {\r\n        return <AbstractMesh | undefined>node.getChildren((n) => n.name == name, true)[0];\r\n    }\r\n\r\n    /**\r\n     * Moves the axis on the controller mesh based on its current state\r\n     * @param axis the index of the axis\r\n     * @param axisValue the value of the axis which determines the meshes new position\r\n     * @hidden\r\n     */\r\n    protected _lerpTransform(axisMap: IMotionControllerMeshMap, axisValue: number, fixValueCoordinates?: boolean): void {\r\n        if (!axisMap.minMesh || !axisMap.maxMesh || !axisMap.valueMesh) {\r\n            return;\r\n        }\r\n\r\n        if (!axisMap.minMesh.rotationQuaternion || !axisMap.maxMesh.rotationQuaternion || !axisMap.valueMesh.rotationQuaternion) {\r\n            return;\r\n        }\r\n\r\n        // Convert from gamepad value range (-1 to +1) to lerp range (0 to 1)\r\n        let lerpValue = fixValueCoordinates ? axisValue * 0.5 + 0.5 : axisValue;\r\n        Quaternion.SlerpToRef(axisMap.minMesh.rotationQuaternion, axisMap.maxMesh.rotationQuaternion, lerpValue, axisMap.valueMesh.rotationQuaternion);\r\n        Vector3.LerpToRef(axisMap.minMesh.position, axisMap.maxMesh.position, lerpValue, axisMap.valueMesh.position);\r\n    }\r\n\r\n    /**\r\n     * Update the model itself with the current frame data\r\n     * @param xrFrame the frame to use for updating the model mesh\r\n     */\r\n    protected updateModel(xrFrame: XRFrame): void {\r\n        if (!this._modelReady) {\r\n            return;\r\n        }\r\n        this._updateModel(xrFrame);\r\n    }\r\n\r\n    /**\r\n     * Get the filename and path for this controller's model\r\n     * @returns a map of filename and path\r\n     */\r\n    protected abstract _getFilenameAndPath(): { filename: string; path: string };\r\n    /**\r\n     * This function is called before the mesh is loaded. It checks for loading constraints.\r\n     * For example, this function can check if the GLB loader is available\r\n     * If this function returns false, the generic controller will be loaded instead\r\n     * @returns Is the client ready to load the mesh\r\n     */\r\n    protected abstract _getModelLoadingConstraints(): boolean;\r\n    /**\r\n     * This function will be called after the model was successfully loaded and can be used\r\n     * for mesh transformations before it is available for the user\r\n     * @param meshes the loaded meshes\r\n     */\r\n    protected abstract _processLoadedModel(meshes: AbstractMesh[]): void;\r\n    /**\r\n     * Set the root mesh for this controller. Important for the WebXR controller class\r\n     * @param meshes the loaded meshes\r\n     */\r\n    protected abstract _setRootMesh(meshes: AbstractMesh[]): void;\r\n    /**\r\n     * A function executed each frame that updates the mesh (if needed)\r\n     * @param xrFrame the current xrFrame\r\n     */\r\n    protected abstract _updateModel(xrFrame: XRFrame): void;\r\n\r\n    private _getGenericFilenameAndPath(): { filename: string; path: string } {\r\n        return {\r\n            filename: \"generic.babylon\",\r\n            path: \"https://controllers.babylonjs.com/generic/\",\r\n        };\r\n    }\r\n\r\n    private _getGenericParentMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\r\n\r\n        meshes.forEach((mesh) => {\r\n            if (!mesh.parent) {\r\n                mesh.isPickable = false;\r\n                mesh.setParent(this.rootMesh);\r\n            }\r\n        });\r\n\r\n        this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}