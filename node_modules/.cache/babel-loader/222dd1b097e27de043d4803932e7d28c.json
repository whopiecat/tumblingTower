{"ast":null,"code":"import { CubeMapToSphericalPolynomialTools } from \"../../Misc/HighDynamicRange/cubemapToSphericalPolynomial\";\nimport { BaseTexture } from \"./baseTexture\";\nObject.defineProperty(BaseTexture.prototype, \"sphericalPolynomial\", {\n  get: function () {\n    if (this._texture) {\n      if (this._texture._sphericalPolynomial) {\n        return this._texture._sphericalPolynomial;\n      }\n\n      if (this._texture.isReady) {\n        this._texture._sphericalPolynomial = CubeMapToSphericalPolynomialTools.ConvertCubeMapTextureToSphericalPolynomial(this);\n        return this._texture._sphericalPolynomial;\n      }\n    }\n\n    return null;\n  },\n  set: function (value) {\n    if (this._texture) {\n      this._texture._sphericalPolynomial = value;\n    }\n  },\n  enumerable: true,\n  configurable: true\n});","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/Textures/baseTexture.polynomial.ts"],"names":[],"mappings":"AACA,SAAS,iCAAT,QAAkD,0DAAlD;AAEA,SAAS,WAAT,QAA4B,eAA5B;AAaA,MAAM,CAAC,cAAP,CAAsB,WAAW,CAAC,SAAlC,EAA6C,qBAA7C,EAAoE;AAChE,EAAA,GAAG,EAAE,YAAA;AACD,QAAI,KAAK,QAAT,EAAmB;AACf,UAAI,KAAK,QAAL,CAAc,oBAAlB,EAAwC;AACpC,eAAO,KAAK,QAAL,CAAc,oBAArB;AACH;;AAED,UAAI,KAAK,QAAL,CAAc,OAAlB,EAA2B;AACvB,aAAK,QAAL,CAAc,oBAAd,GACI,iCAAiC,CAAC,0CAAlC,CAA6E,IAA7E,CADJ;AAEA,eAAO,KAAK,QAAL,CAAc,oBAArB;AACH;AACJ;;AAED,WAAO,IAAP;AACH,GAf+D;AAgBhE,EAAA,GAAG,EAAE,UAA4B,KAA5B,EAAgE;AACjE,QAAI,KAAK,QAAT,EAAmB;AACf,WAAK,QAAL,CAAc,oBAAd,GAAqC,KAArC;AACH;AACJ,GApB+D;AAqBhE,EAAA,UAAU,EAAE,IArBoD;AAsBhE,EAAA,YAAY,EAAE;AAtBkD,CAApE","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { CubeMapToSphericalPolynomialTools } from \"../../Misc/HighDynamicRange/cubemapToSphericalPolynomial\";\r\nimport { SphericalPolynomial } from \"../../Maths/sphericalPolynomial\";\r\nimport { BaseTexture } from \"./baseTexture\";\r\n\r\ndeclare module \"./baseTexture\" {\r\n    export interface BaseTexture {\r\n        /**\r\n         * Get the polynomial representation of the texture data.\r\n         * This is mainly use as a fast way to recover IBL Diffuse irradiance data.\r\n         * @see https://learnopengl.com/PBR/IBL/Diffuse-irradiance\r\n         */\r\n        sphericalPolynomial: Nullable<SphericalPolynomial>;\r\n    }\r\n}\r\n\r\nObject.defineProperty(BaseTexture.prototype, \"sphericalPolynomial\", {\r\n    get: function(this: BaseTexture) {\r\n        if (this._texture) {\r\n            if (this._texture._sphericalPolynomial) {\r\n                return this._texture._sphericalPolynomial;\r\n            }\r\n\r\n            if (this._texture.isReady) {\r\n                this._texture._sphericalPolynomial =\r\n                    CubeMapToSphericalPolynomialTools.ConvertCubeMapTextureToSphericalPolynomial(this);\r\n                return this._texture._sphericalPolynomial;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n    set: function(this: BaseTexture, value: Nullable<SphericalPolynomial>) {\r\n        if (this._texture) {\r\n            this._texture._sphericalPolynomial = value;\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}