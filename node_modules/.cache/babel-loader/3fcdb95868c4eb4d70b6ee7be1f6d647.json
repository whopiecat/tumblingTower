{"ast":null,"code":"import { Camera } from \"../../Cameras/camera\";\nimport { Engine } from \"../../Engines/engine\";\nimport { Scene } from \"../../scene\";\nimport { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\nimport { Matrix, TmpVectors } from '../../Maths/math.vector';\nimport { UniformBuffer } from '../../Materials/uniformBuffer';\nimport { MultiviewRenderTarget } from '../../Materials/Textures/MultiviewRenderTarget';\nimport { Frustum } from '../../Maths/math.frustum';\n\nEngine.prototype.createMultiviewRenderTargetTexture = function (width, height) {\n  var gl = this._gl;\n\n  if (!this.getCaps().multiview) {\n    throw \"Multiview is not supported\";\n  }\n\n  var internalTexture = new InternalTexture(this, InternalTextureSource.Unknown, true);\n  internalTexture.width = width;\n  internalTexture.height = height;\n  internalTexture._framebuffer = gl.createFramebuffer();\n  internalTexture._colorTextureArray = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D_ARRAY, internalTexture._colorTextureArray);\n  gl.texStorage3D(gl.TEXTURE_2D_ARRAY, 1, gl.RGBA8, width, height, 2);\n  internalTexture._depthStencilTextureArray = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D_ARRAY, internalTexture._depthStencilTextureArray);\n  gl.texStorage3D(gl.TEXTURE_2D_ARRAY, 1, gl.DEPTH32F_STENCIL8, width, height, 2);\n  internalTexture.isReady = true;\n  return internalTexture;\n};\n\nEngine.prototype.bindMultiviewFramebuffer = function (multiviewTexture) {\n  var gl = this._gl;\n  var ext = this.getCaps().oculusMultiview || this.getCaps().multiview;\n  this.bindFramebuffer(multiviewTexture, undefined, undefined, undefined, true);\n  gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, multiviewTexture._framebuffer);\n\n  if (multiviewTexture._colorTextureArray && multiviewTexture._depthStencilTextureArray) {\n    if (this.getCaps().oculusMultiview) {\n      ext.framebufferTextureMultisampleMultiviewOVR(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, multiviewTexture._colorTextureArray, 0, multiviewTexture.samples, 0, 2);\n      ext.framebufferTextureMultisampleMultiviewOVR(gl.DRAW_FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, multiviewTexture._depthStencilTextureArray, 0, multiviewTexture.samples, 0, 2);\n    } else {\n      ext.framebufferTextureMultiviewOVR(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, multiviewTexture._colorTextureArray, 0, 0, 2);\n      ext.framebufferTextureMultiviewOVR(gl.DRAW_FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, multiviewTexture._depthStencilTextureArray, 0, 0, 2);\n    }\n  } else {\n    throw \"Invalid multiview frame buffer\";\n  }\n};\n\nCamera.prototype._useMultiviewToSingleView = false;\nCamera.prototype._multiviewTexture = null;\n\nCamera.prototype._resizeOrCreateMultiviewTexture = function (width, height) {\n  if (!this._multiviewTexture) {\n    this._multiviewTexture = new MultiviewRenderTarget(this.getScene(), {\n      width: width,\n      height: height\n    });\n  } else if (this._multiviewTexture.getRenderWidth() != width || this._multiviewTexture.getRenderHeight() != height) {\n    this._multiviewTexture.dispose();\n\n    this._multiviewTexture = new MultiviewRenderTarget(this.getScene(), {\n      width: width,\n      height: height\n    });\n  }\n};\n\nScene.prototype._transformMatrixR = Matrix.Zero();\nScene.prototype._multiviewSceneUbo = null;\n\nScene.prototype._createMultiviewUbo = function () {\n  this._multiviewSceneUbo = new UniformBuffer(this.getEngine(), undefined, true);\n\n  this._multiviewSceneUbo.addUniform(\"viewProjection\", 16);\n\n  this._multiviewSceneUbo.addUniform(\"viewProjectionR\", 16);\n\n  this._multiviewSceneUbo.addUniform(\"view\", 16);\n};\n\nScene.prototype._updateMultiviewUbo = function (viewR, projectionR) {\n  if (viewR && projectionR) {\n    viewR.multiplyToRef(projectionR, this._transformMatrixR);\n  }\n\n  if (viewR && projectionR) {\n    viewR.multiplyToRef(projectionR, TmpVectors.Matrix[0]);\n    Frustum.GetRightPlaneToRef(TmpVectors.Matrix[0], this._frustumPlanes[3]); // Replace right plane by second camera right plane\n  }\n\n  if (this._multiviewSceneUbo) {\n    this._multiviewSceneUbo.updateMatrix(\"viewProjection\", this.getTransformMatrix());\n\n    this._multiviewSceneUbo.updateMatrix(\"viewProjectionR\", this._transformMatrixR);\n\n    this._multiviewSceneUbo.updateMatrix(\"view\", this._viewMatrix);\n\n    this._multiviewSceneUbo.update();\n  }\n};\n\nScene.prototype._renderMultiviewToSingleView = function (camera) {\n  // Multiview is only able to be displayed directly for API's such as webXR\n  // This displays a multiview image by rendering to the multiview image and then\n  // copying the result into the sub cameras instead of rendering them and proceeding as normal from there\n  // Render to a multiview texture\n  camera._resizeOrCreateMultiviewTexture(camera._rigPostProcess && camera._rigPostProcess && camera._rigPostProcess.width > 0 ? camera._rigPostProcess.width : this.getEngine().getRenderWidth(true), camera._rigPostProcess && camera._rigPostProcess && camera._rigPostProcess.height > 0 ? camera._rigPostProcess.height : this.getEngine().getRenderHeight(true));\n\n  if (!this._multiviewSceneUbo) {\n    this._createMultiviewUbo();\n  }\n\n  camera.outputRenderTarget = camera._multiviewTexture;\n\n  this._renderForCamera(camera);\n\n  camera.outputRenderTarget = null; // Consume the multiview texture through a shader for each eye\n\n  for (var index = 0; index < camera._rigCameras.length; index++) {\n    var engine = this.getEngine();\n    this._activeCamera = camera._rigCameras[index];\n    engine.setViewport(this._activeCamera.viewport);\n\n    if (this.postProcessManager) {\n      this.postProcessManager._prepareFrame();\n\n      this.postProcessManager._finalizeFrame(this._activeCamera.isIntermediate);\n    }\n  }\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/Extensions/engine.multiview.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,sBAAvB;AACA,SAAS,MAAT,QAAuB,sBAAvB;AACA,SAAS,KAAT,QAAsB,aAAtB;AACA,SAAS,eAAT,EAA0B,qBAA1B,QAAuD,0CAAvD;AAGA,SAAS,MAAT,EAAiB,UAAjB,QAAmC,yBAAnC;AACA,SAAS,aAAT,QAA8B,+BAA9B;AACA,SAAS,qBAAT,QAAsC,gDAAtC;AACA,SAAS,OAAT,QAAwB,0BAAxB;;AAoBA,MAAM,CAAC,SAAP,CAAiB,kCAAjB,GAAsD,UAAS,KAAT,EAAwB,MAAxB,EAAsC;AACxF,MAAI,EAAE,GAAG,KAAK,GAAd;;AAEA,MAAI,CAAC,KAAK,OAAL,GAAe,SAApB,EAA+B;AAC3B,UAAM,4BAAN;AACH;;AAED,MAAI,eAAe,GAAG,IAAI,eAAJ,CAAoB,IAApB,EAA0B,qBAAqB,CAAC,OAAhD,EAAyD,IAAzD,CAAtB;AACA,EAAA,eAAe,CAAC,KAAhB,GAAwB,KAAxB;AACA,EAAA,eAAe,CAAC,MAAhB,GAAyB,MAAzB;AACA,EAAA,eAAe,CAAC,YAAhB,GAA+B,EAAE,CAAC,iBAAH,EAA/B;AAEA,EAAA,eAAe,CAAC,kBAAhB,GAAqC,EAAE,CAAC,aAAH,EAArC;AACA,EAAA,EAAE,CAAC,WAAH,CAAe,EAAE,CAAC,gBAAlB,EAAoC,eAAe,CAAC,kBAApD;AACC,EAAA,EAAU,CAAC,YAAX,CAAwB,EAAE,CAAC,gBAA3B,EAA6C,CAA7C,EAAgD,EAAE,CAAC,KAAnD,EAA0D,KAA1D,EAAiE,MAAjE,EAAyE,CAAzE;AAED,EAAA,eAAe,CAAC,yBAAhB,GAA4C,EAAE,CAAC,aAAH,EAA5C;AACA,EAAA,EAAE,CAAC,WAAH,CAAe,EAAE,CAAC,gBAAlB,EAAoC,eAAe,CAAC,yBAApD;AACC,EAAA,EAAU,CAAC,YAAX,CAAwB,EAAE,CAAC,gBAA3B,EAA6C,CAA7C,EAAiD,EAAU,CAAC,iBAA5D,EAA+E,KAA/E,EAAsF,MAAtF,EAA8F,CAA9F;AACD,EAAA,eAAe,CAAC,OAAhB,GAA0B,IAA1B;AACA,SAAO,eAAP;AACH,CArBD;;AAuBA,MAAM,CAAC,SAAP,CAAiB,wBAAjB,GAA4C,UAAS,gBAAT,EAA0C;AAClF,MAAI,EAAE,GAAQ,KAAK,GAAnB;AACA,MAAI,GAAG,GAAG,KAAK,OAAL,GAAe,eAAf,IAAkC,KAAK,OAAL,GAAe,SAA3D;AAEA,OAAK,eAAL,CAAqB,gBAArB,EAAuC,SAAvC,EAAkD,SAAlD,EAA6D,SAA7D,EAAwE,IAAxE;AACA,EAAA,EAAE,CAAC,eAAH,CAAmB,EAAE,CAAC,gBAAtB,EAAwC,gBAAgB,CAAC,YAAzD;;AACA,MAAI,gBAAgB,CAAC,kBAAjB,IAAuC,gBAAgB,CAAC,yBAA5D,EAAuF;AACnF,QAAI,KAAK,OAAL,GAAe,eAAnB,EAAoC;AAChC,MAAA,GAAG,CAAC,yCAAJ,CAA8C,EAAE,CAAC,gBAAjD,EAAmE,EAAE,CAAC,iBAAtE,EAAyF,gBAAgB,CAAC,kBAA1G,EAA8H,CAA9H,EAAiI,gBAAgB,CAAC,OAAlJ,EAA2J,CAA3J,EAA8J,CAA9J;AACA,MAAA,GAAG,CAAC,yCAAJ,CAA8C,EAAE,CAAC,gBAAjD,EAAmE,EAAE,CAAC,wBAAtE,EAAgG,gBAAgB,CAAC,yBAAjH,EAA4I,CAA5I,EAA+I,gBAAgB,CAAC,OAAhK,EAAyK,CAAzK,EAA4K,CAA5K;AACH,KAHD,MAGO;AACH,MAAA,GAAG,CAAC,8BAAJ,CAAmC,EAAE,CAAC,gBAAtC,EAAwD,EAAE,CAAC,iBAA3D,EAA8E,gBAAgB,CAAC,kBAA/F,EAAmH,CAAnH,EAAsH,CAAtH,EAAyH,CAAzH;AACA,MAAA,GAAG,CAAC,8BAAJ,CAAmC,EAAE,CAAC,gBAAtC,EAAwD,EAAE,CAAC,wBAA3D,EAAqF,gBAAgB,CAAC,yBAAtG,EAAiI,CAAjI,EAAoI,CAApI,EAAuI,CAAvI;AACH;AACJ,GARD,MAQO;AACH,UAAM,gCAAN;AACH;AACJ,CAjBD;;AA0CA,MAAM,CAAC,SAAP,CAAiB,yBAAjB,GAA6C,KAA7C;AAEA,MAAM,CAAC,SAAP,CAAiB,iBAAjB,GAAqC,IAArC;;AAEA,MAAM,CAAC,SAAP,CAAiB,+BAAjB,GAAmD,UAAS,KAAT,EAAwB,MAAxB,EAAsC;AACrF,MAAI,CAAC,KAAK,iBAAV,EAA6B;AACzB,SAAK,iBAAL,GAAyB,IAAI,qBAAJ,CAA0B,KAAK,QAAL,EAA1B,EAA2C;AAAE,MAAA,KAAK,EAAE,KAAT;AAAgB,MAAA,MAAM,EAAE;AAAxB,KAA3C,CAAzB;AACH,GAFD,MAEO,IAAI,KAAK,iBAAL,CAAuB,cAAvB,MAA2C,KAA3C,IAAoD,KAAK,iBAAL,CAAuB,eAAvB,MAA4C,MAApG,EAA4G;AAC/G,SAAK,iBAAL,CAAuB,OAAvB;;AACA,SAAK,iBAAL,GAAyB,IAAI,qBAAJ,CAA0B,KAAK,QAAL,EAA1B,EAA2C;AAAE,MAAA,KAAK,EAAE,KAAT;AAAgB,MAAA,MAAM,EAAE;AAAxB,KAA3C,CAAzB;AACH;AACJ,CAPD;;AAwBA,KAAK,CAAC,SAAN,CAAgB,iBAAhB,GAAoC,MAAM,CAAC,IAAP,EAApC;AACA,KAAK,CAAC,SAAN,CAAgB,kBAAhB,GAAqC,IAArC;;AACA,KAAK,CAAC,SAAN,CAAgB,mBAAhB,GAAsC,YAAA;AAClC,OAAK,kBAAL,GAA0B,IAAI,aAAJ,CAAkB,KAAK,SAAL,EAAlB,EAAoC,SAApC,EAA+C,IAA/C,CAA1B;;AACA,OAAK,kBAAL,CAAwB,UAAxB,CAAmC,gBAAnC,EAAqD,EAArD;;AACA,OAAK,kBAAL,CAAwB,UAAxB,CAAmC,iBAAnC,EAAsD,EAAtD;;AACA,OAAK,kBAAL,CAAwB,UAAxB,CAAmC,MAAnC,EAA2C,EAA3C;AACH,CALD;;AAMA,KAAK,CAAC,SAAN,CAAgB,mBAAhB,GAAsC,UAAS,KAAT,EAAyB,WAAzB,EAA6C;AAC/E,MAAI,KAAK,IAAI,WAAb,EAA0B;AACtB,IAAA,KAAK,CAAC,aAAN,CAAoB,WAApB,EAAiC,KAAK,iBAAtC;AACH;;AAED,MAAI,KAAK,IAAI,WAAb,EAA0B;AACtB,IAAA,KAAK,CAAC,aAAN,CAAoB,WAApB,EAAiC,UAAU,CAAC,MAAX,CAAkB,CAAlB,CAAjC;AACA,IAAA,OAAO,CAAC,kBAAR,CAA2B,UAAU,CAAC,MAAX,CAAkB,CAAlB,CAA3B,EAAiD,KAAK,cAAL,CAAoB,CAApB,CAAjD,EAFsB,CAEoD;AAC7E;;AAED,MAAI,KAAK,kBAAT,EAA6B;AACzB,SAAK,kBAAL,CAAwB,YAAxB,CAAqC,gBAArC,EAAuD,KAAK,kBAAL,EAAvD;;AACA,SAAK,kBAAL,CAAwB,YAAxB,CAAqC,iBAArC,EAAwD,KAAK,iBAA7D;;AACA,SAAK,kBAAL,CAAwB,YAAxB,CAAqC,MAArC,EAA6C,KAAK,WAAlD;;AACA,SAAK,kBAAL,CAAwB,MAAxB;AACH;AACJ,CAhBD;;AAiBA,KAAK,CAAC,SAAN,CAAgB,4BAAhB,GAA+C,UAAS,MAAT,EAAuB;AAClE;AACA;AACA;AAEA;AACA,EAAA,MAAM,CAAC,+BAAP,CACK,MAAM,CAAC,eAAP,IAA0B,MAAM,CAAC,eAAjC,IAAoD,MAAM,CAAC,eAAP,CAAuB,KAAvB,GAA+B,CAApF,GAAyF,MAAM,CAAC,eAAP,CAAuB,KAAhH,GAAwH,KAAK,SAAL,GAAiB,cAAjB,CAAgC,IAAhC,CAD5H,EAEK,MAAM,CAAC,eAAP,IAA0B,MAAM,CAAC,eAAjC,IAAoD,MAAM,CAAC,eAAP,CAAuB,MAAvB,GAAgC,CAArF,GAA0F,MAAM,CAAC,eAAP,CAAuB,MAAjH,GAA0H,KAAK,SAAL,GAAiB,eAAjB,CAAiC,IAAjC,CAF9H;;AAIA,MAAI,CAAC,KAAK,kBAAV,EAA8B;AAC1B,SAAK,mBAAL;AACH;;AACD,EAAA,MAAM,CAAC,kBAAP,GAA4B,MAAM,CAAC,iBAAnC;;AACA,OAAK,gBAAL,CAAsB,MAAtB;;AACA,EAAA,MAAM,CAAC,kBAAP,GAA4B,IAA5B,CAfkE,CAiBlE;;AACA,OAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,GAAG,MAAM,CAAC,WAAP,CAAmB,MAA/C,EAAuD,KAAK,EAA5D,EAAgE;AAC5D,QAAI,MAAM,GAAG,KAAK,SAAL,EAAb;AACA,SAAK,aAAL,GAAqB,MAAM,CAAC,WAAP,CAAmB,KAAnB,CAArB;AACA,IAAA,MAAM,CAAC,WAAP,CAAmB,KAAK,aAAL,CAAmB,QAAtC;;AACA,QAAI,KAAK,kBAAT,EAA6B;AACzB,WAAK,kBAAL,CAAwB,aAAxB;;AACA,WAAK,kBAAL,CAAwB,cAAxB,CAAuC,KAAK,aAAL,CAAmB,cAA1D;AACH;AACJ;AACJ,CA3BD","sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { Engine } from \"../../Engines/engine\";\r\nimport { Scene } from \"../../scene\";\r\nimport { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\r\nimport { Nullable } from '../../types';\r\nimport { RenderTargetTexture } from '../../Materials/Textures/renderTargetTexture';\r\nimport { Matrix, TmpVectors } from '../../Maths/math.vector';\r\nimport { UniformBuffer } from '../../Materials/uniformBuffer';\r\nimport { MultiviewRenderTarget } from '../../Materials/Textures/MultiviewRenderTarget';\r\nimport { Frustum } from '../../Maths/math.frustum';\r\n\r\ndeclare module \"../../Engines/engine\" {\r\n    export interface Engine {\r\n        /**\r\n         * Creates a new multiview render target\r\n         * @param width defines the width of the texture\r\n         * @param height defines the height of the texture\r\n         * @returns the created multiview texture\r\n         */\r\n        createMultiviewRenderTargetTexture(width: number, height: number): InternalTexture;\r\n\r\n        /**\r\n         * Binds a multiview framebuffer to be drawn to\r\n         * @param multiviewTexture texture to bind\r\n         */\r\n        bindMultiviewFramebuffer(multiviewTexture: InternalTexture): void;\r\n    }\r\n}\r\n\r\nEngine.prototype.createMultiviewRenderTargetTexture = function(width: number, height: number) {\r\n    var gl = this._gl;\r\n\r\n    if (!this.getCaps().multiview) {\r\n        throw \"Multiview is not supported\";\r\n    }\r\n\r\n    var internalTexture = new InternalTexture(this, InternalTextureSource.Unknown, true);\r\n    internalTexture.width = width;\r\n    internalTexture.height = height;\r\n    internalTexture._framebuffer = gl.createFramebuffer();\r\n\r\n    internalTexture._colorTextureArray = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D_ARRAY, internalTexture._colorTextureArray);\r\n    (gl as any).texStorage3D(gl.TEXTURE_2D_ARRAY, 1, gl.RGBA8, width, height, 2);\r\n\r\n    internalTexture._depthStencilTextureArray = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D_ARRAY, internalTexture._depthStencilTextureArray);\r\n    (gl as any).texStorage3D(gl.TEXTURE_2D_ARRAY, 1, (gl as any).DEPTH32F_STENCIL8, width, height, 2);\r\n    internalTexture.isReady = true;\r\n    return internalTexture;\r\n};\r\n\r\nEngine.prototype.bindMultiviewFramebuffer = function(multiviewTexture: InternalTexture) {\r\n    var gl: any = this._gl;\r\n    var ext = this.getCaps().oculusMultiview || this.getCaps().multiview;\r\n\r\n    this.bindFramebuffer(multiviewTexture, undefined, undefined, undefined, true);\r\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, multiviewTexture._framebuffer);\r\n    if (multiviewTexture._colorTextureArray && multiviewTexture._depthStencilTextureArray) {\r\n        if (this.getCaps().oculusMultiview) {\r\n            ext.framebufferTextureMultisampleMultiviewOVR(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, multiviewTexture._colorTextureArray, 0, multiviewTexture.samples, 0, 2);\r\n            ext.framebufferTextureMultisampleMultiviewOVR(gl.DRAW_FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, multiviewTexture._depthStencilTextureArray, 0, multiviewTexture.samples, 0, 2);\r\n        } else {\r\n            ext.framebufferTextureMultiviewOVR(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, multiviewTexture._colorTextureArray, 0, 0, 2);\r\n            ext.framebufferTextureMultiviewOVR(gl.DRAW_FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, multiviewTexture._depthStencilTextureArray, 0, 0, 2);\r\n        }\r\n    } else {\r\n        throw \"Invalid multiview frame buffer\";\r\n    }\r\n};\r\n\r\ndeclare module \"../../Cameras/camera\" {\r\n    export interface Camera {\r\n        /**\r\n         * @hidden\r\n         * For cameras that cannot use multiview images to display directly. (e.g. webVR camera will render to multiview texture, then copy to each eye texture and go from there)\r\n         */\r\n        _useMultiviewToSingleView: boolean;\r\n        /**\r\n         * @hidden\r\n         * For cameras that cannot use multiview images to display directly. (e.g. webVR camera will render to multiview texture, then copy to each eye texture and go from there)\r\n         */\r\n        _multiviewTexture: Nullable<RenderTargetTexture>;\r\n\r\n        /**\r\n         * @hidden\r\n         * ensures the multiview texture of the camera exists and has the specified width/height\r\n         * @param width height to set on the multiview texture\r\n         * @param height width to set on the multiview texture\r\n         */\r\n        _resizeOrCreateMultiviewTexture(width: number, height: number): void;\r\n    }\r\n}\r\n\r\nCamera.prototype._useMultiviewToSingleView = false;\r\n\r\nCamera.prototype._multiviewTexture = null;\r\n\r\nCamera.prototype._resizeOrCreateMultiviewTexture = function(width: number, height: number) {\r\n    if (!this._multiviewTexture) {\r\n        this._multiviewTexture = new MultiviewRenderTarget(this.getScene(), { width: width, height: height });\r\n    } else if (this._multiviewTexture.getRenderWidth() != width || this._multiviewTexture.getRenderHeight() != height) {\r\n        this._multiviewTexture.dispose();\r\n        this._multiviewTexture = new MultiviewRenderTarget(this.getScene(), { width: width, height: height });\r\n    }\r\n};\r\n\r\ndeclare module \"../../scene\" {\r\n    export interface Scene {\r\n        /** @hidden */\r\n        _transformMatrixR: Matrix;\r\n        /** @hidden */\r\n        _multiviewSceneUbo: Nullable<UniformBuffer>;\r\n        /** @hidden */\r\n        _createMultiviewUbo(): void;\r\n        /** @hidden */\r\n        _updateMultiviewUbo(viewR?: Matrix, projectionR?: Matrix): void;\r\n        /** @hidden */\r\n        _renderMultiviewToSingleView(camera: Camera): void;\r\n    }\r\n}\r\n\r\nScene.prototype._transformMatrixR = Matrix.Zero();\r\nScene.prototype._multiviewSceneUbo = null;\r\nScene.prototype._createMultiviewUbo = function() {\r\n    this._multiviewSceneUbo = new UniformBuffer(this.getEngine(), undefined, true);\r\n    this._multiviewSceneUbo.addUniform(\"viewProjection\", 16);\r\n    this._multiviewSceneUbo.addUniform(\"viewProjectionR\", 16);\r\n    this._multiviewSceneUbo.addUniform(\"view\", 16);\r\n};\r\nScene.prototype._updateMultiviewUbo = function(viewR?: Matrix, projectionR?: Matrix) {\r\n    if (viewR && projectionR) {\r\n        viewR.multiplyToRef(projectionR, this._transformMatrixR);\r\n    }\r\n\r\n    if (viewR && projectionR) {\r\n        viewR.multiplyToRef(projectionR, TmpVectors.Matrix[0]);\r\n        Frustum.GetRightPlaneToRef(TmpVectors.Matrix[0], this._frustumPlanes[3]); // Replace right plane by second camera right plane\r\n    }\r\n\r\n    if (this._multiviewSceneUbo) {\r\n        this._multiviewSceneUbo.updateMatrix(\"viewProjection\", this.getTransformMatrix());\r\n        this._multiviewSceneUbo.updateMatrix(\"viewProjectionR\", this._transformMatrixR);\r\n        this._multiviewSceneUbo.updateMatrix(\"view\", this._viewMatrix);\r\n        this._multiviewSceneUbo.update();\r\n    }\r\n};\r\nScene.prototype._renderMultiviewToSingleView = function(camera: Camera) {\r\n    // Multiview is only able to be displayed directly for API's such as webXR\r\n    // This displays a multiview image by rendering to the multiview image and then\r\n    // copying the result into the sub cameras instead of rendering them and proceeding as normal from there\r\n\r\n    // Render to a multiview texture\r\n    camera._resizeOrCreateMultiviewTexture(\r\n        (camera._rigPostProcess && camera._rigPostProcess && camera._rigPostProcess.width > 0) ? camera._rigPostProcess.width : this.getEngine().getRenderWidth(true),\r\n        (camera._rigPostProcess && camera._rigPostProcess && camera._rigPostProcess.height > 0) ? camera._rigPostProcess.height : this.getEngine().getRenderHeight(true)\r\n    );\r\n    if (!this._multiviewSceneUbo) {\r\n        this._createMultiviewUbo();\r\n    }\r\n    camera.outputRenderTarget = camera._multiviewTexture;\r\n    this._renderForCamera(camera);\r\n    camera.outputRenderTarget = null;\r\n\r\n    // Consume the multiview texture through a shader for each eye\r\n    for (var index = 0; index < camera._rigCameras.length; index++) {\r\n        var engine = this.getEngine();\r\n        this._activeCamera = camera._rigCameras[index];\r\n        engine.setViewport(this._activeCamera.viewport);\r\n        if (this.postProcessManager) {\r\n            this.postProcessManager._prepareFrame();\r\n            this.postProcessManager._finalizeFrame(this._activeCamera.isIntermediate);\r\n        }\r\n    }\r\n};"],"sourceRoot":""},"metadata":{},"sourceType":"module"}