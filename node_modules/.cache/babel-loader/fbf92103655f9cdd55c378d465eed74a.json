{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators\";\nimport { Observable } from \"../../../Misc/observable\";\nimport { Logger } from \"../../../Misc/logger\";\nimport { Texture } from \"../../../Materials/Textures/texture\";\nimport { GlowLayer } from \"../../../Layers/glowLayer\";\nimport { SharpenPostProcess } from \"../../../PostProcesses/sharpenPostProcess\";\nimport { ImageProcessingPostProcess } from \"../../../PostProcesses/imageProcessingPostProcess\";\nimport { ChromaticAberrationPostProcess } from \"../../../PostProcesses/chromaticAberrationPostProcess\";\nimport { GrainPostProcess } from \"../../../PostProcesses/grainPostProcess\";\nimport { FxaaPostProcess } from \"../../../PostProcesses/fxaaPostProcess\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\nimport { DepthOfFieldEffect, DepthOfFieldEffectBlurLevel } from \"../../../PostProcesses/depthOfFieldEffect\";\nimport { BloomEffect } from \"../../../PostProcesses/bloomEffect\";\nimport { _TypeStore } from '../../../Misc/typeStore';\nimport { EngineStore } from \"../../../Engines/engineStore\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\n/**\r\n * The default rendering pipeline can be added to a scene to apply common post processing effects such as anti-aliasing or depth of field.\r\n * See https://doc.babylonjs.com/how_to/using_default_rendering_pipeline\r\n */\n\nvar DefaultRenderingPipeline =\n/** @class */\nfunction (_super) {\n  __extends(DefaultRenderingPipeline, _super);\n  /**\r\n   * @constructor\r\n   * @param name - The rendering pipeline name (default: \"\")\r\n   * @param hdr - If high dynamic range textures should be used (default: true)\r\n   * @param scene - The scene linked to this pipeline (default: the last created scene)\r\n   * @param cameras - The array of cameras that the rendering pipeline will be attached to (default: scene.cameras)\r\n   * @param automaticBuild - if false, you will have to manually call prepare() to update the pipeline (default: true)\r\n   */\n\n\n  function DefaultRenderingPipeline(name, hdr, scene, cameras, automaticBuild) {\n    if (name === void 0) {\n      name = \"\";\n    }\n\n    if (hdr === void 0) {\n      hdr = true;\n    }\n\n    if (scene === void 0) {\n      scene = EngineStore.LastCreatedScene;\n    }\n\n    if (automaticBuild === void 0) {\n      automaticBuild = true;\n    }\n\n    var _this = _super.call(this, scene.getEngine(), name) || this;\n\n    _this._camerasToBeAttached = [];\n    /**\r\n     * ID of the sharpen post process,\r\n     */\n\n    _this.SharpenPostProcessId = \"SharpenPostProcessEffect\";\n    /**\r\n     * @ignore\r\n     * ID of the image processing post process;\r\n     */\n\n    _this.ImageProcessingPostProcessId = \"ImageProcessingPostProcessEffect\";\n    /**\r\n     * @ignore\r\n     * ID of the Fast Approximate Anti-Aliasing post process;\r\n     */\n\n    _this.FxaaPostProcessId = \"FxaaPostProcessEffect\";\n    /**\r\n     * ID of the chromatic aberration post process,\r\n     */\n\n    _this.ChromaticAberrationPostProcessId = \"ChromaticAberrationPostProcessEffect\";\n    /**\r\n     * ID of the grain post process\r\n     */\n\n    _this.GrainPostProcessId = \"GrainPostProcessEffect\";\n    /**\r\n     * Glow post process which adds a glow to emissive areas of the image\r\n     */\n\n    _this._glowLayer = null;\n    /**\r\n     * Animations which can be used to tweak settings over a period of time\r\n     */\n\n    _this.animations = [];\n    _this._imageProcessingConfigurationObserver = null; // Values\n\n    _this._sharpenEnabled = false;\n    _this._bloomEnabled = false;\n    _this._depthOfFieldEnabled = false;\n    _this._depthOfFieldBlurLevel = DepthOfFieldEffectBlurLevel.Low;\n    _this._fxaaEnabled = false;\n    _this._imageProcessingEnabled = true;\n    _this._bloomScale = 0.5;\n    _this._chromaticAberrationEnabled = false;\n    _this._grainEnabled = false;\n    _this._buildAllowed = true;\n    /**\r\n     * This is triggered each time the pipeline has been built.\r\n     */\n\n    _this.onBuildObservable = new Observable();\n    _this._resizeObserver = null;\n    _this._hardwareScaleLevel = 1.0;\n    _this._bloomKernel = 64;\n    /**\r\n     * Specifies the weight of the bloom in the final rendering\r\n     */\n\n    _this._bloomWeight = 0.15;\n    /**\r\n     * Specifies the luma threshold for the area that will be blurred by the bloom\r\n     */\n\n    _this._bloomThreshold = 0.9;\n    _this._samples = 1;\n    _this._hasCleared = false;\n    _this._prevPostProcess = null;\n    _this._prevPrevPostProcess = null;\n    _this._depthOfFieldSceneObserver = null;\n    _this._cameras = cameras || scene.cameras;\n    _this._cameras = _this._cameras.slice();\n    _this._camerasToBeAttached = _this._cameras.slice();\n    _this._buildAllowed = automaticBuild; // Initialize\n\n    _this._scene = scene;\n\n    var caps = _this._scene.getEngine().getCaps();\n\n    _this._hdr = hdr && (caps.textureHalfFloatRender || caps.textureFloatRender); // Misc\n\n    if (_this._hdr) {\n      if (caps.textureHalfFloatRender) {\n        _this._defaultPipelineTextureType = 2;\n      } else if (caps.textureFloatRender) {\n        _this._defaultPipelineTextureType = 1;\n      }\n    } else {\n      _this._defaultPipelineTextureType = 0;\n    } // Attach\n\n\n    scene.postProcessRenderPipelineManager.addPipeline(_this);\n\n    var engine = _this._scene.getEngine(); // Create post processes before hand so they can be modified before enabled.\n    // Block compilation flag is set to true to avoid compilation prior to use, these will be updated on first use in build pipeline.\n\n\n    _this.sharpen = new SharpenPostProcess(\"sharpen\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, _this._defaultPipelineTextureType, true);\n    _this._sharpenEffect = new PostProcessRenderEffect(engine, _this.SharpenPostProcessId, function () {\n      return _this.sharpen;\n    }, true);\n    _this.depthOfField = new DepthOfFieldEffect(_this._scene, null, _this._depthOfFieldBlurLevel, _this._defaultPipelineTextureType, true);\n    _this.bloom = new BloomEffect(_this._scene, _this._bloomScale, _this._bloomWeight, _this.bloomKernel, _this._defaultPipelineTextureType, true);\n    _this.chromaticAberration = new ChromaticAberrationPostProcess(\"ChromaticAberration\", engine.getRenderWidth(), engine.getRenderHeight(), 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, _this._defaultPipelineTextureType, true);\n    _this._chromaticAberrationEffect = new PostProcessRenderEffect(engine, _this.ChromaticAberrationPostProcessId, function () {\n      return _this.chromaticAberration;\n    }, true);\n    _this.grain = new GrainPostProcess(\"Grain\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, _this._defaultPipelineTextureType, true);\n    _this._grainEffect = new PostProcessRenderEffect(engine, _this.GrainPostProcessId, function () {\n      return _this.grain;\n    }, true);\n    _this._resizeObserver = engine.onResizeObservable.add(function () {\n      _this._hardwareScaleLevel = engine.getHardwareScalingLevel();\n      _this.bloomKernel = _this.bloomKernel;\n    });\n    _this._imageProcessingConfigurationObserver = _this._scene.imageProcessingConfiguration.onUpdateParameters.add(function () {\n      _this.bloom._downscale._exposure = _this._scene.imageProcessingConfiguration.exposure;\n\n      if (_this.imageProcessingEnabled !== _this._scene.imageProcessingConfiguration.isEnabled) {\n        _this._imageProcessingEnabled = _this._scene.imageProcessingConfiguration.isEnabled;\n\n        _this._buildPipeline();\n      }\n    });\n\n    _this._buildPipeline();\n\n    return _this;\n  }\n\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"scene\", {\n    /**\r\n     * Gets active scene\r\n     */\n    get: function () {\n      return this._scene;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"sharpenEnabled\", {\n    get: function () {\n      return this._sharpenEnabled;\n    },\n\n    /**\r\n     * Enable or disable the sharpen process from the pipeline\r\n     */\n    set: function (enabled) {\n      if (this._sharpenEnabled === enabled) {\n        return;\n      }\n\n      this._sharpenEnabled = enabled;\n\n      this._buildPipeline();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"bloomKernel\", {\n    /**\r\n     * Specifies the size of the bloom blur kernel, relative to the final output size\r\n     */\n    get: function () {\n      return this._bloomKernel;\n    },\n    set: function (value) {\n      this._bloomKernel = value;\n      this.bloom.kernel = value / this._hardwareScaleLevel;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"bloomWeight\", {\n    get: function () {\n      return this._bloomWeight;\n    },\n\n    /**\r\n     * The strength of the bloom.\r\n     */\n    set: function (value) {\n      if (this._bloomWeight === value) {\n        return;\n      }\n\n      this.bloom.weight = value;\n      this._bloomWeight = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"bloomThreshold\", {\n    get: function () {\n      return this._bloomThreshold;\n    },\n\n    /**\r\n     * The strength of the bloom.\r\n     */\n    set: function (value) {\n      if (this._bloomThreshold === value) {\n        return;\n      }\n\n      this.bloom.threshold = value;\n      this._bloomThreshold = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"bloomScale\", {\n    get: function () {\n      return this._bloomScale;\n    },\n\n    /**\r\n     * The scale of the bloom, lower value will provide better performance.\r\n     */\n    set: function (value) {\n      if (this._bloomScale === value) {\n        return;\n      }\n\n      this._bloomScale = value; // recreate bloom and dispose old as this setting is not dynamic\n\n      this._rebuildBloom();\n\n      this._buildPipeline();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"bloomEnabled\", {\n    get: function () {\n      return this._bloomEnabled;\n    },\n\n    /**\r\n     * Enable or disable the bloom from the pipeline\r\n     */\n    set: function (enabled) {\n      if (this._bloomEnabled === enabled) {\n        return;\n      }\n\n      this._bloomEnabled = enabled;\n\n      this._buildPipeline();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DefaultRenderingPipeline.prototype._rebuildBloom = function () {\n    // recreate bloom and dispose old as this setting is not dynamic\n    var oldBloom = this.bloom;\n    this.bloom = new BloomEffect(this._scene, this.bloomScale, this._bloomWeight, this.bloomKernel, this._defaultPipelineTextureType, false);\n    this.bloom.threshold = oldBloom.threshold;\n\n    for (var i = 0; i < this._cameras.length; i++) {\n      oldBloom.disposeEffects(this._cameras[i]);\n    }\n  };\n\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"depthOfFieldEnabled\", {\n    /**\r\n     * If the depth of field is enabled.\r\n     */\n    get: function () {\n      return this._depthOfFieldEnabled;\n    },\n    set: function (enabled) {\n      if (this._depthOfFieldEnabled === enabled) {\n        return;\n      }\n\n      this._depthOfFieldEnabled = enabled;\n\n      this._buildPipeline();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"depthOfFieldBlurLevel\", {\n    /**\r\n     * Blur level of the depth of field effect. (Higher blur will effect performance)\r\n     */\n    get: function () {\n      return this._depthOfFieldBlurLevel;\n    },\n    set: function (value) {\n      if (this._depthOfFieldBlurLevel === value) {\n        return;\n      }\n\n      this._depthOfFieldBlurLevel = value; // recreate dof and dispose old as this setting is not dynamic\n\n      var oldDof = this.depthOfField;\n      this.depthOfField = new DepthOfFieldEffect(this._scene, null, this._depthOfFieldBlurLevel, this._defaultPipelineTextureType, false);\n      this.depthOfField.focalLength = oldDof.focalLength;\n      this.depthOfField.focusDistance = oldDof.focusDistance;\n      this.depthOfField.fStop = oldDof.fStop;\n      this.depthOfField.lensSize = oldDof.lensSize;\n\n      for (var i = 0; i < this._cameras.length; i++) {\n        oldDof.disposeEffects(this._cameras[i]);\n      }\n\n      this._buildPipeline();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"fxaaEnabled\", {\n    get: function () {\n      return this._fxaaEnabled;\n    },\n\n    /**\r\n     * If the anti aliasing is enabled.\r\n     */\n    set: function (enabled) {\n      if (this._fxaaEnabled === enabled) {\n        return;\n      }\n\n      this._fxaaEnabled = enabled;\n\n      this._buildPipeline();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"samples\", {\n    get: function () {\n      return this._samples;\n    },\n\n    /**\r\n     * MSAA sample count, setting this to 4 will provide 4x anti aliasing. (default: 1)\r\n     */\n    set: function (sampleCount) {\n      if (this._samples === sampleCount) {\n        return;\n      }\n\n      this._samples = sampleCount;\n\n      this._buildPipeline();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"imageProcessingEnabled\", {\n    get: function () {\n      return this._imageProcessingEnabled;\n    },\n\n    /**\r\n     * If image processing is enabled.\r\n     */\n    set: function (enabled) {\n      if (this._imageProcessingEnabled === enabled) {\n        return;\n      }\n\n      this._scene.imageProcessingConfiguration.isEnabled = enabled;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"glowLayerEnabled\", {\n    get: function () {\n      return this._glowLayer != null;\n    },\n\n    /**\r\n     * If glow layer is enabled. (Adds a glow effect to emmissive materials)\r\n     */\n    set: function (enabled) {\n      if (enabled && !this._glowLayer) {\n        this._glowLayer = new GlowLayer(\"\", this._scene);\n      } else if (!enabled && this._glowLayer) {\n        this._glowLayer.dispose();\n\n        this._glowLayer = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"glowLayer\", {\n    /**\r\n     * Gets the glow layer (or null if not defined)\r\n     */\n    get: function () {\n      return this._glowLayer;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"chromaticAberrationEnabled\", {\n    get: function () {\n      return this._chromaticAberrationEnabled;\n    },\n\n    /**\r\n     * Enable or disable the chromaticAberration process from the pipeline\r\n     */\n    set: function (enabled) {\n      if (this._chromaticAberrationEnabled === enabled) {\n        return;\n      }\n\n      this._chromaticAberrationEnabled = enabled;\n\n      this._buildPipeline();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DefaultRenderingPipeline.prototype, \"grainEnabled\", {\n    get: function () {\n      return this._grainEnabled;\n    },\n\n    /**\r\n     * Enable or disable the grain process from the pipeline\r\n     */\n    set: function (enabled) {\n      if (this._grainEnabled === enabled) {\n        return;\n      }\n\n      this._grainEnabled = enabled;\n\n      this._buildPipeline();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Get the class name\r\n   * @returns \"DefaultRenderingPipeline\"\r\n   */\n\n  DefaultRenderingPipeline.prototype.getClassName = function () {\n    return \"DefaultRenderingPipeline\";\n  };\n  /**\r\n   * Force the compilation of the entire pipeline.\r\n   */\n\n\n  DefaultRenderingPipeline.prototype.prepare = function () {\n    var previousState = this._buildAllowed;\n    this._buildAllowed = true;\n\n    this._buildPipeline();\n\n    this._buildAllowed = previousState;\n  };\n\n  DefaultRenderingPipeline.prototype._setAutoClearAndTextureSharing = function (postProcess, skipTextureSharing) {\n    if (skipTextureSharing === void 0) {\n      skipTextureSharing = false;\n    }\n\n    if (this._hasCleared) {\n      postProcess.autoClear = false;\n    } else {\n      postProcess.autoClear = true;\n      this._scene.autoClear = false;\n      this._hasCleared = true;\n    }\n\n    if (!skipTextureSharing) {\n      if (this._prevPrevPostProcess) {\n        postProcess.shareOutputWith(this._prevPrevPostProcess);\n      } else {\n        postProcess.useOwnOutput();\n      }\n\n      if (this._prevPostProcess) {\n        this._prevPrevPostProcess = this._prevPostProcess;\n      }\n\n      this._prevPostProcess = postProcess;\n    }\n  };\n\n  DefaultRenderingPipeline.prototype._buildPipeline = function () {\n    var _this = this;\n\n    if (!this._buildAllowed) {\n      return;\n    }\n\n    this._scene.autoClear = true;\n\n    var engine = this._scene.getEngine();\n\n    this._disposePostProcesses();\n\n    if (this._cameras !== null) {\n      this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras); // get back cameras to be used to reattach pipeline\n\n\n      this._cameras = this._camerasToBeAttached.slice();\n    }\n\n    this._reset();\n\n    this._prevPostProcess = null;\n    this._prevPrevPostProcess = null;\n    this._hasCleared = false;\n\n    if (this.depthOfFieldEnabled) {\n      // Multi camera suport\n      if (this._cameras.length > 1) {\n        for (var _i = 0, _a = this._cameras; _i < _a.length; _i++) {\n          var camera = _a[_i];\n\n          var depthRenderer = this._scene.enableDepthRenderer(camera);\n\n          depthRenderer.useOnlyInActiveCamera = true;\n        }\n\n        this._depthOfFieldSceneObserver = this._scene.onAfterRenderTargetsRenderObservable.add(function (scene) {\n          if (_this._cameras.indexOf(scene.activeCamera) > -1) {\n            _this.depthOfField.depthTexture = scene.enableDepthRenderer(scene.activeCamera).getDepthMap();\n          }\n        });\n      } else {\n        this._scene.onAfterRenderTargetsRenderObservable.remove(this._depthOfFieldSceneObserver);\n\n        var depthRenderer = this._scene.enableDepthRenderer(this._cameras[0]);\n\n        this.depthOfField.depthTexture = depthRenderer.getDepthMap();\n      }\n\n      if (!this.depthOfField._isReady()) {\n        this.depthOfField._updateEffects();\n      }\n\n      this.addEffect(this.depthOfField);\n\n      this._setAutoClearAndTextureSharing(this.depthOfField._effects[0], true);\n    } else {\n      this._scene.onAfterRenderTargetsRenderObservable.remove(this._depthOfFieldSceneObserver);\n    }\n\n    if (this.bloomEnabled) {\n      if (!this.bloom._isReady()) {\n        this.bloom._updateEffects();\n      }\n\n      this.addEffect(this.bloom);\n\n      this._setAutoClearAndTextureSharing(this.bloom._effects[0], true);\n    }\n\n    if (this._imageProcessingEnabled) {\n      this.imageProcessing = new ImageProcessingPostProcess(\"imageProcessing\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType);\n\n      if (this._hdr) {\n        this.addEffect(new PostProcessRenderEffect(engine, this.ImageProcessingPostProcessId, function () {\n          return _this.imageProcessing;\n        }, true));\n\n        this._setAutoClearAndTextureSharing(this.imageProcessing);\n      } else {\n        this._scene.imageProcessingConfiguration.applyByPostProcess = false;\n      }\n\n      if (!this.cameras || this.cameras.length === 0) {\n        this._scene.imageProcessingConfiguration.applyByPostProcess = false;\n      }\n\n      if (!this.imageProcessing.getEffect()) {\n        this.imageProcessing._updateParameters();\n      }\n    }\n\n    if (this.sharpenEnabled) {\n      if (!this.sharpen.isReady()) {\n        this.sharpen.updateEffect();\n      }\n\n      this.addEffect(this._sharpenEffect);\n\n      this._setAutoClearAndTextureSharing(this.sharpen);\n    }\n\n    if (this.grainEnabled) {\n      if (!this.grain.isReady()) {\n        this.grain.updateEffect();\n      }\n\n      this.addEffect(this._grainEffect);\n\n      this._setAutoClearAndTextureSharing(this.grain);\n    }\n\n    if (this.chromaticAberrationEnabled) {\n      if (!this.chromaticAberration.isReady()) {\n        this.chromaticAberration.updateEffect();\n      }\n\n      this.addEffect(this._chromaticAberrationEffect);\n\n      this._setAutoClearAndTextureSharing(this.chromaticAberration);\n    }\n\n    if (this.fxaaEnabled) {\n      this.fxaa = new FxaaPostProcess(\"fxaa\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType);\n      this.addEffect(new PostProcessRenderEffect(engine, this.FxaaPostProcessId, function () {\n        return _this.fxaa;\n      }, true));\n\n      this._setAutoClearAndTextureSharing(this.fxaa, true);\n    }\n\n    if (this._cameras !== null) {\n      this._scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this._name, this._cameras);\n    } // In multicamera mode, the scene needs to autoclear in between cameras.\n\n\n    if (this._scene.activeCameras && this._scene.activeCameras.length > 1) {\n      this._scene.autoClear = true;\n    }\n\n    if (!this._enableMSAAOnFirstPostProcess(this.samples) && this.samples > 1) {\n      Logger.Warn(\"MSAA failed to enable, MSAA is only supported in browsers that support webGL >= 2.0\");\n    }\n\n    this.onBuildObservable.notifyObservers(this);\n  };\n\n  DefaultRenderingPipeline.prototype._disposePostProcesses = function (disposeNonRecreated) {\n    if (disposeNonRecreated === void 0) {\n      disposeNonRecreated = false;\n    }\n\n    for (var i = 0; i < this._cameras.length; i++) {\n      var camera = this._cameras[i];\n\n      if (this.imageProcessing) {\n        this.imageProcessing.dispose(camera);\n      }\n\n      if (this.fxaa) {\n        this.fxaa.dispose(camera);\n      } // These are created in the constructor and should not be disposed on every pipeline change\n\n\n      if (disposeNonRecreated) {\n        if (this.sharpen) {\n          this.sharpen.dispose(camera);\n        }\n\n        if (this.depthOfField) {\n          this._scene.onAfterRenderTargetsRenderObservable.remove(this._depthOfFieldSceneObserver);\n\n          this.depthOfField.disposeEffects(camera);\n        }\n\n        if (this.bloom) {\n          this.bloom.disposeEffects(camera);\n        }\n\n        if (this.chromaticAberration) {\n          this.chromaticAberration.dispose(camera);\n        }\n\n        if (this.grain) {\n          this.grain.dispose(camera);\n        }\n\n        if (this._glowLayer) {\n          this._glowLayer.dispose();\n        }\n      }\n    }\n\n    this.imageProcessing = null;\n    this.fxaa = null;\n\n    if (disposeNonRecreated) {\n      this.sharpen = null;\n      this._sharpenEffect = null;\n      this.depthOfField = null;\n      this.bloom = null;\n      this.chromaticAberration = null;\n      this._chromaticAberrationEffect = null;\n      this.grain = null;\n      this._grainEffect = null;\n      this._glowLayer = null;\n    }\n  };\n  /**\r\n   * Adds a camera to the pipeline\r\n   * @param camera the camera to be added\r\n   */\n\n\n  DefaultRenderingPipeline.prototype.addCamera = function (camera) {\n    this._camerasToBeAttached.push(camera);\n\n    this._buildPipeline();\n  };\n  /**\r\n   * Removes a camera from the pipeline\r\n   * @param camera the camera to remove\r\n   */\n\n\n  DefaultRenderingPipeline.prototype.removeCamera = function (camera) {\n    var index = this._camerasToBeAttached.indexOf(camera);\n\n    this._camerasToBeAttached.splice(index, 1);\n\n    this._buildPipeline();\n  };\n  /**\r\n   * Dispose of the pipeline and stop all post processes\r\n   */\n\n\n  DefaultRenderingPipeline.prototype.dispose = function () {\n    this.onBuildObservable.clear();\n\n    this._disposePostProcesses(true);\n\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\n\n    this._scene.autoClear = true;\n\n    if (this._resizeObserver) {\n      this._scene.getEngine().onResizeObservable.remove(this._resizeObserver);\n\n      this._resizeObserver = null;\n    }\n\n    this._scene.imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingConfigurationObserver);\n\n    _super.prototype.dispose.call(this);\n  };\n  /**\r\n   * Serialize the rendering pipeline (Used when exporting)\r\n   * @returns the serialized object\r\n   */\n\n\n  DefaultRenderingPipeline.prototype.serialize = function () {\n    var serializationObject = SerializationHelper.Serialize(this);\n    serializationObject.customType = \"DefaultRenderingPipeline\";\n    return serializationObject;\n  };\n  /**\r\n   * Parse the serialized pipeline\r\n   * @param source Source pipeline.\r\n   * @param scene The scene to load the pipeline to.\r\n   * @param rootUrl The URL of the serialized pipeline.\r\n   * @returns An instantiated pipeline from the serialized object.\r\n   */\n\n\n  DefaultRenderingPipeline.Parse = function (source, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new DefaultRenderingPipeline(source._name, source._name._hdr, scene);\n    }, source, scene, rootUrl);\n  };\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"sharpenEnabled\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"bloomKernel\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"_bloomWeight\", void 0);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"_bloomThreshold\", void 0);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"_hdr\", void 0);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"bloomWeight\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"bloomThreshold\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"bloomScale\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"bloomEnabled\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"depthOfFieldEnabled\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"depthOfFieldBlurLevel\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"fxaaEnabled\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"samples\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"imageProcessingEnabled\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"glowLayerEnabled\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"chromaticAberrationEnabled\", null);\n\n  __decorate([serialize()], DefaultRenderingPipeline.prototype, \"grainEnabled\", null);\n\n  return DefaultRenderingPipeline;\n}(PostProcessRenderPipeline);\n\nexport { DefaultRenderingPipeline };\n_TypeStore.RegisteredTypes[\"BABYLON.DefaultRenderingPipeline\"] = DefaultRenderingPipeline;","map":{"version":3,"sources":["../../../../../sourceES6/core/PostProcesses/RenderPipeline/Pipelines/defaultRenderingPipeline.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../../types\";\r\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators\";\r\nimport { Observable, Observer } from \"../../../Misc/observable\";\r\nimport { IAnimatable } from '../../../Animations/animatable.interface';\r\nimport { Logger } from \"../../../Misc/logger\";\r\nimport { Camera } from \"../../../Cameras/camera\";\r\nimport { ImageProcessingConfiguration } from \"../../../Materials/imageProcessingConfiguration\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\n\r\nimport { IDisposable } from \"../../../scene\";\r\nimport { GlowLayer } from \"../../../Layers/glowLayer\";\r\nimport { Scene } from \"../../../scene\";\r\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\r\nimport { SharpenPostProcess } from \"../../../PostProcesses/sharpenPostProcess\";\r\nimport { ImageProcessingPostProcess } from \"../../../PostProcesses/imageProcessingPostProcess\";\r\nimport { ChromaticAberrationPostProcess } from \"../../../PostProcesses/chromaticAberrationPostProcess\";\r\nimport { GrainPostProcess } from \"../../../PostProcesses/grainPostProcess\";\r\nimport { FxaaPostProcess } from \"../../../PostProcesses/fxaaPostProcess\";\r\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport { DepthOfFieldEffect, DepthOfFieldEffectBlurLevel } from \"../../../PostProcesses/depthOfFieldEffect\";\r\nimport { BloomEffect } from \"../../../PostProcesses/bloomEffect\";\r\nimport { _TypeStore } from '../../../Misc/typeStore';\r\nimport { EngineStore } from \"../../../Engines/engineStore\";\r\n\r\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\r\n\r\ndeclare type Animation = import(\"../../../Animations/animation\").Animation;\r\n\r\n/**\r\n * The default rendering pipeline can be added to a scene to apply common post processing effects such as anti-aliasing or depth of field.\r\n * See https://doc.babylonjs.com/how_to/using_default_rendering_pipeline\r\n */\r\nexport class DefaultRenderingPipeline extends PostProcessRenderPipeline implements IDisposable, IAnimatable {\r\n    private _scene: Scene;\r\n    private _camerasToBeAttached: Array<Camera> = [];\r\n    /**\r\n     * ID of the sharpen post process,\r\n     */\r\n    private readonly SharpenPostProcessId: string = \"SharpenPostProcessEffect\";\r\n    /**\r\n     * @ignore\r\n     * ID of the image processing post process;\r\n     */\r\n    readonly ImageProcessingPostProcessId: string = \"ImageProcessingPostProcessEffect\";\r\n    /**\r\n     * @ignore\r\n     * ID of the Fast Approximate Anti-Aliasing post process;\r\n     */\r\n    readonly FxaaPostProcessId: string = \"FxaaPostProcessEffect\";\r\n    /**\r\n     * ID of the chromatic aberration post process,\r\n     */\r\n    private readonly ChromaticAberrationPostProcessId: string = \"ChromaticAberrationPostProcessEffect\";\r\n    /**\r\n     * ID of the grain post process\r\n     */\r\n    private readonly GrainPostProcessId: string = \"GrainPostProcessEffect\";\r\n\r\n    // Post-processes\r\n    /**\r\n     * Sharpen post process which will apply a sharpen convolution to enhance edges\r\n     */\r\n    public sharpen: SharpenPostProcess;\r\n    private _sharpenEffect: PostProcessRenderEffect;\r\n    private bloom: BloomEffect;\r\n    /**\r\n     * Depth of field effect, applies a blur based on how far away objects are from the focus distance.\r\n     */\r\n    public depthOfField: DepthOfFieldEffect;\r\n    /**\r\n     * The Fast Approximate Anti-Aliasing post process which attemps to remove aliasing from an image.\r\n     */\r\n    public fxaa: FxaaPostProcess;\r\n    /**\r\n     * Image post processing pass used to perform operations such as tone mapping or color grading.\r\n     */\r\n    public imageProcessing: ImageProcessingPostProcess;\r\n    /**\r\n     * Chromatic aberration post process which will shift rgb colors in the image\r\n     */\r\n    public chromaticAberration: ChromaticAberrationPostProcess;\r\n    private _chromaticAberrationEffect: PostProcessRenderEffect;\r\n    /**\r\n     * Grain post process which add noise to the image\r\n     */\r\n    public grain: GrainPostProcess;\r\n    private _grainEffect: PostProcessRenderEffect;\r\n    /**\r\n     * Glow post process which adds a glow to emissive areas of the image\r\n     */\r\n    private _glowLayer: Nullable<GlowLayer> = null;\r\n\r\n    /**\r\n     * Animations which can be used to tweak settings over a period of time\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    private _imageProcessingConfigurationObserver: Nullable<Observer<ImageProcessingConfiguration>> = null;\r\n    // Values\r\n    private _sharpenEnabled: boolean = false;\r\n    private _bloomEnabled: boolean = false;\r\n    private _depthOfFieldEnabled: boolean = false;\r\n    private _depthOfFieldBlurLevel = DepthOfFieldEffectBlurLevel.Low;\r\n    private _fxaaEnabled: boolean = false;\r\n    private _imageProcessingEnabled: boolean = true;\r\n    private _defaultPipelineTextureType: number;\r\n    private _bloomScale: number = 0.5;\r\n    private _chromaticAberrationEnabled: boolean = false;\r\n    private _grainEnabled: boolean = false;\r\n\r\n    private _buildAllowed = true;\r\n\r\n    /**\r\n     * This is triggered each time the pipeline has been built.\r\n     */\r\n    public onBuildObservable = new Observable<DefaultRenderingPipeline>();\r\n\r\n    /**\r\n     * Gets active scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the sharpen process from the pipeline\r\n     */\r\n    public set sharpenEnabled(enabled: boolean) {\r\n        if (this._sharpenEnabled === enabled) {\r\n            return;\r\n        }\r\n        this._sharpenEnabled = enabled;\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    @serialize()\r\n    public get sharpenEnabled(): boolean {\r\n        return this._sharpenEnabled;\r\n    }\r\n\r\n    private _resizeObserver: Nullable<Observer<Engine>> = null;\r\n    private _hardwareScaleLevel = 1.0;\r\n    private _bloomKernel: number = 64;\r\n    /**\r\n     * Specifies the size of the bloom blur kernel, relative to the final output size\r\n     */\r\n    @serialize()\r\n    public get bloomKernel(): number {\r\n        return this._bloomKernel;\r\n    }\r\n    public set bloomKernel(value: number) {\r\n        this._bloomKernel = value;\r\n        this.bloom.kernel = value / this._hardwareScaleLevel;\r\n    }\r\n\r\n    /**\r\n     * Specifies the weight of the bloom in the final rendering\r\n     */\r\n    @serialize()\r\n    private _bloomWeight: number = 0.15;\r\n    /**\r\n     * Specifies the luma threshold for the area that will be blurred by the bloom\r\n     */\r\n    @serialize()\r\n    private _bloomThreshold: number = 0.9;\r\n\r\n    @serialize()\r\n    private _hdr: boolean;\r\n\r\n    /**\r\n     * The strength of the bloom.\r\n     */\r\n    public set bloomWeight(value: number) {\r\n        if (this._bloomWeight === value) {\r\n            return;\r\n        }\r\n        this.bloom.weight = value;\r\n\r\n        this._bloomWeight = value;\r\n    }\r\n\r\n    @serialize()\r\n    public get bloomWeight(): number {\r\n        return this._bloomWeight;\r\n    }\r\n\r\n    /**\r\n     * The strength of the bloom.\r\n     */\r\n    public set bloomThreshold(value: number) {\r\n        if (this._bloomThreshold === value) {\r\n            return;\r\n        }\r\n        this.bloom.threshold = value;\r\n        this._bloomThreshold = value;\r\n    }\r\n\r\n    @serialize()\r\n    public get bloomThreshold(): number {\r\n        return this._bloomThreshold;\r\n    }\r\n\r\n    /**\r\n     * The scale of the bloom, lower value will provide better performance.\r\n     */\r\n    public set bloomScale(value: number) {\r\n        if (this._bloomScale === value) {\r\n            return;\r\n        }\r\n        this._bloomScale = value;\r\n\r\n        // recreate bloom and dispose old as this setting is not dynamic\r\n        this._rebuildBloom();\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    @serialize()\r\n    public get bloomScale(): number {\r\n        return this._bloomScale;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the bloom from the pipeline\r\n     */\r\n    public set bloomEnabled(enabled: boolean) {\r\n        if (this._bloomEnabled === enabled) {\r\n            return;\r\n        }\r\n        this._bloomEnabled = enabled;\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    @serialize()\r\n    public get bloomEnabled(): boolean {\r\n        return this._bloomEnabled;\r\n    }\r\n\r\n    private _rebuildBloom() {\r\n        // recreate bloom and dispose old as this setting is not dynamic\r\n        var oldBloom = this.bloom;\r\n        this.bloom = new BloomEffect(this._scene, this.bloomScale, this._bloomWeight, this.bloomKernel, this._defaultPipelineTextureType, false);\r\n        this.bloom.threshold = oldBloom.threshold;\r\n        for (var i = 0; i < this._cameras.length; i++) {\r\n            oldBloom.disposeEffects(this._cameras[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the depth of field is enabled.\r\n     */\r\n    @serialize()\r\n    public get depthOfFieldEnabled(): boolean {\r\n        return this._depthOfFieldEnabled;\r\n    }\r\n\r\n    public set depthOfFieldEnabled(enabled: boolean) {\r\n        if (this._depthOfFieldEnabled === enabled) {\r\n            return;\r\n        }\r\n        this._depthOfFieldEnabled = enabled;\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Blur level of the depth of field effect. (Higher blur will effect performance)\r\n     */\r\n    @serialize()\r\n    public get depthOfFieldBlurLevel(): DepthOfFieldEffectBlurLevel {\r\n        return this._depthOfFieldBlurLevel;\r\n    }\r\n\r\n    public set depthOfFieldBlurLevel(value: DepthOfFieldEffectBlurLevel) {\r\n        if (this._depthOfFieldBlurLevel === value) {\r\n            return;\r\n        }\r\n        this._depthOfFieldBlurLevel = value;\r\n\r\n        // recreate dof and dispose old as this setting is not dynamic\r\n        var oldDof = this.depthOfField;\r\n\r\n        this.depthOfField = new DepthOfFieldEffect(this._scene, null, this._depthOfFieldBlurLevel, this._defaultPipelineTextureType, false);\r\n        this.depthOfField.focalLength = oldDof.focalLength;\r\n        this.depthOfField.focusDistance = oldDof.focusDistance;\r\n        this.depthOfField.fStop = oldDof.fStop;\r\n        this.depthOfField.lensSize = oldDof.lensSize;\r\n\r\n        for (var i = 0; i < this._cameras.length; i++) {\r\n            oldDof.disposeEffects(this._cameras[i]);\r\n        }\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * If the anti aliasing is enabled.\r\n     */\r\n    public set fxaaEnabled(enabled: boolean) {\r\n        if (this._fxaaEnabled === enabled) {\r\n            return;\r\n        }\r\n        this._fxaaEnabled = enabled;\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    @serialize()\r\n    public get fxaaEnabled(): boolean {\r\n        return this._fxaaEnabled;\r\n    }\r\n\r\n    private _samples = 1;\r\n    /**\r\n     * MSAA sample count, setting this to 4 will provide 4x anti aliasing. (default: 1)\r\n     */\r\n    public set samples(sampleCount: number) {\r\n        if (this._samples === sampleCount) {\r\n            return;\r\n        }\r\n        this._samples = sampleCount;\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    @serialize()\r\n    public get samples(): number {\r\n        return this._samples;\r\n    }\r\n\r\n    /**\r\n     * If image processing is enabled.\r\n     */\r\n    public set imageProcessingEnabled(enabled: boolean) {\r\n        if (this._imageProcessingEnabled === enabled) {\r\n            return;\r\n        }\r\n\r\n        this._scene.imageProcessingConfiguration.isEnabled = enabled;\r\n    }\r\n\r\n    @serialize()\r\n    public get imageProcessingEnabled(): boolean {\r\n        return this._imageProcessingEnabled;\r\n    }\r\n\r\n    /**\r\n     * If glow layer is enabled. (Adds a glow effect to emmissive materials)\r\n     */\r\n    public set glowLayerEnabled(enabled: boolean) {\r\n        if (enabled && !this._glowLayer) {\r\n            this._glowLayer = new GlowLayer(\"\", this._scene);\r\n        } else if (!enabled && this._glowLayer) {\r\n            this._glowLayer.dispose();\r\n            this._glowLayer = null;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get glowLayerEnabled(): boolean {\r\n        return this._glowLayer != null;\r\n    }\r\n\r\n    /**\r\n     * Gets the glow layer (or null if not defined)\r\n     */\r\n    public get glowLayer() {\r\n        return this._glowLayer;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the chromaticAberration process from the pipeline\r\n     */\r\n    public set chromaticAberrationEnabled(enabled: boolean) {\r\n        if (this._chromaticAberrationEnabled === enabled) {\r\n            return;\r\n        }\r\n        this._chromaticAberrationEnabled = enabled;\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    @serialize()\r\n    public get chromaticAberrationEnabled(): boolean {\r\n        return this._chromaticAberrationEnabled;\r\n    }\r\n    /**\r\n     * Enable or disable the grain process from the pipeline\r\n     */\r\n    public set grainEnabled(enabled: boolean) {\r\n        if (this._grainEnabled === enabled) {\r\n            return;\r\n        }\r\n        this._grainEnabled = enabled;\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    @serialize()\r\n    public get grainEnabled(): boolean {\r\n        return this._grainEnabled;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name - The rendering pipeline name (default: \"\")\r\n     * @param hdr - If high dynamic range textures should be used (default: true)\r\n     * @param scene - The scene linked to this pipeline (default: the last created scene)\r\n     * @param cameras - The array of cameras that the rendering pipeline will be attached to (default: scene.cameras)\r\n     * @param automaticBuild - if false, you will have to manually call prepare() to update the pipeline (default: true)\r\n     */\r\n    constructor(name: string = \"\", hdr: boolean = true, scene: Scene = EngineStore.LastCreatedScene!, cameras?: Camera[], automaticBuild = true) {\r\n        super(scene.getEngine(), name);\r\n        this._cameras = cameras || scene.cameras;\r\n        this._cameras = this._cameras.slice();\r\n        this._camerasToBeAttached = this._cameras.slice();\r\n\r\n        this._buildAllowed = automaticBuild;\r\n\r\n        // Initialize\r\n        this._scene = scene;\r\n        var caps = this._scene.getEngine().getCaps();\r\n        this._hdr = hdr && (caps.textureHalfFloatRender || caps.textureFloatRender);\r\n\r\n        // Misc\r\n        if (this._hdr) {\r\n            if (caps.textureHalfFloatRender) {\r\n                this._defaultPipelineTextureType = 2;\r\n            }\r\n            else if (caps.textureFloatRender) {\r\n                this._defaultPipelineTextureType = 1;\r\n            }\r\n        } else {\r\n            this._defaultPipelineTextureType = 0;\r\n        }\r\n\r\n        // Attach\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n\r\n        var engine = this._scene.getEngine();\r\n        // Create post processes before hand so they can be modified before enabled.\r\n        // Block compilation flag is set to true to avoid compilation prior to use, these will be updated on first use in build pipeline.\r\n        this.sharpen = new SharpenPostProcess(\"sharpen\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType, true);\r\n        this._sharpenEffect = new PostProcessRenderEffect(engine, this.SharpenPostProcessId, () => { return this.sharpen; }, true);\r\n\r\n        this.depthOfField = new DepthOfFieldEffect(this._scene, null, this._depthOfFieldBlurLevel, this._defaultPipelineTextureType, true);\r\n\r\n        this.bloom = new BloomEffect(this._scene, this._bloomScale, this._bloomWeight, this.bloomKernel, this._defaultPipelineTextureType, true);\r\n\r\n        this.chromaticAberration = new ChromaticAberrationPostProcess(\"ChromaticAberration\", engine.getRenderWidth(), engine.getRenderHeight(), 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType, true);\r\n        this._chromaticAberrationEffect = new PostProcessRenderEffect(engine, this.ChromaticAberrationPostProcessId, () => { return this.chromaticAberration; }, true);\r\n\r\n        this.grain = new GrainPostProcess(\"Grain\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType, true);\r\n        this._grainEffect = new PostProcessRenderEffect(engine, this.GrainPostProcessId, () => { return this.grain; }, true);\r\n\r\n        this._resizeObserver = engine.onResizeObservable.add(() => {\r\n            this._hardwareScaleLevel = engine.getHardwareScalingLevel();\r\n            this.bloomKernel = this.bloomKernel;\r\n        });\r\n\r\n        this._imageProcessingConfigurationObserver = this._scene.imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n            this.bloom._downscale._exposure = this._scene.imageProcessingConfiguration.exposure;\r\n\r\n            if (this.imageProcessingEnabled !== this._scene.imageProcessingConfiguration.isEnabled) {\r\n                this._imageProcessingEnabled = this._scene.imageProcessingConfiguration.isEnabled;\r\n                this._buildPipeline();\r\n            }\r\n        });\r\n\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"DefaultRenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"DefaultRenderingPipeline\";\r\n    }\r\n\r\n    /**\r\n     * Force the compilation of the entire pipeline.\r\n     */\r\n    public prepare(): void {\r\n        let previousState = this._buildAllowed;\r\n        this._buildAllowed = true;\r\n        this._buildPipeline();\r\n        this._buildAllowed = previousState;\r\n    }\r\n\r\n    private _hasCleared = false;\r\n    private _prevPostProcess: Nullable<PostProcess> = null;\r\n    private _prevPrevPostProcess: Nullable<PostProcess> = null;\r\n\r\n    private _setAutoClearAndTextureSharing(postProcess: PostProcess, skipTextureSharing = false) {\r\n        if (this._hasCleared) {\r\n            postProcess.autoClear = false;\r\n        } else {\r\n            postProcess.autoClear = true;\r\n            this._scene.autoClear = false;\r\n            this._hasCleared = true;\r\n        }\r\n\r\n        if (!skipTextureSharing) {\r\n            if (this._prevPrevPostProcess) {\r\n                postProcess.shareOutputWith(this._prevPrevPostProcess);\r\n            } else {\r\n                postProcess.useOwnOutput();\r\n            }\r\n\r\n            if (this._prevPostProcess) {\r\n                this._prevPrevPostProcess = this._prevPostProcess;\r\n            }\r\n            this._prevPostProcess = postProcess;\r\n        }\r\n    }\r\n\r\n    private _depthOfFieldSceneObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _buildPipeline() {\r\n        if (!this._buildAllowed) {\r\n            return;\r\n        }\r\n        this._scene.autoClear = true;\r\n\r\n        var engine = this._scene.getEngine();\r\n\r\n        this._disposePostProcesses();\r\n        if (this._cameras !== null) {\r\n            this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\r\n            // get back cameras to be used to reattach pipeline\r\n            this._cameras = this._camerasToBeAttached.slice();\r\n        }\r\n        this._reset();\r\n        this._prevPostProcess = null;\r\n        this._prevPrevPostProcess = null;\r\n        this._hasCleared = false;\r\n\r\n        if (this.depthOfFieldEnabled) {\r\n            // Multi camera suport\r\n            if (this._cameras.length > 1) {\r\n                for (let camera of this._cameras) {\r\n                    const depthRenderer = this._scene.enableDepthRenderer(camera);\r\n                    depthRenderer.useOnlyInActiveCamera = true;\r\n                }\r\n\r\n                this._depthOfFieldSceneObserver = this._scene.onAfterRenderTargetsRenderObservable.add((scene) => {\r\n                    if (this._cameras.indexOf(scene.activeCamera!) > -1) {\r\n                        this.depthOfField.depthTexture = scene.enableDepthRenderer(scene.activeCamera).getDepthMap();\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                this._scene.onAfterRenderTargetsRenderObservable.remove(this._depthOfFieldSceneObserver);\r\n                const depthRenderer = this._scene.enableDepthRenderer(this._cameras[0]);\r\n                this.depthOfField.depthTexture = depthRenderer.getDepthMap();\r\n            }\r\n\r\n            if (!this.depthOfField._isReady()) {\r\n                this.depthOfField._updateEffects();\r\n            }\r\n            this.addEffect(this.depthOfField);\r\n            this._setAutoClearAndTextureSharing(this.depthOfField._effects[0], true);\r\n        }\r\n        else {\r\n            this._scene.onAfterRenderTargetsRenderObservable.remove(this._depthOfFieldSceneObserver);\r\n        }\r\n\r\n        if (this.bloomEnabled) {\r\n            if (!this.bloom._isReady()) {\r\n                this.bloom._updateEffects();\r\n            }\r\n            this.addEffect(this.bloom);\r\n            this._setAutoClearAndTextureSharing(this.bloom._effects[0], true);\r\n        }\r\n\r\n        if (this._imageProcessingEnabled) {\r\n            this.imageProcessing = new ImageProcessingPostProcess(\"imageProcessing\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType);\r\n            if (this._hdr) {\r\n                this.addEffect(new PostProcessRenderEffect(engine, this.ImageProcessingPostProcessId, () => { return this.imageProcessing; }, true));\r\n                this._setAutoClearAndTextureSharing(this.imageProcessing);\r\n            } else {\r\n                this._scene.imageProcessingConfiguration.applyByPostProcess = false;\r\n            }\r\n\r\n            if (!this.cameras || this.cameras.length === 0) {\r\n                this._scene.imageProcessingConfiguration.applyByPostProcess = false;\r\n            }\r\n\r\n            if (!this.imageProcessing.getEffect()) {\r\n                this.imageProcessing._updateParameters();\r\n            }\r\n        }\r\n\r\n        if (this.sharpenEnabled) {\r\n            if (!this.sharpen.isReady()) {\r\n                this.sharpen.updateEffect();\r\n            }\r\n            this.addEffect(this._sharpenEffect);\r\n            this._setAutoClearAndTextureSharing(this.sharpen);\r\n        }\r\n\r\n        if (this.grainEnabled) {\r\n            if (!this.grain.isReady()) {\r\n                this.grain.updateEffect();\r\n            }\r\n            this.addEffect(this._grainEffect);\r\n            this._setAutoClearAndTextureSharing(this.grain);\r\n        }\r\n\r\n        if (this.chromaticAberrationEnabled) {\r\n            if (!this.chromaticAberration.isReady()) {\r\n                this.chromaticAberration.updateEffect();\r\n            }\r\n            this.addEffect(this._chromaticAberrationEffect);\r\n            this._setAutoClearAndTextureSharing(this.chromaticAberration);\r\n        }\r\n\r\n        if (this.fxaaEnabled) {\r\n            this.fxaa = new FxaaPostProcess(\"fxaa\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, engine, false, this._defaultPipelineTextureType);\r\n            this.addEffect(new PostProcessRenderEffect(engine, this.FxaaPostProcessId, () => { return this.fxaa; }, true));\r\n            this._setAutoClearAndTextureSharing(this.fxaa, true);\r\n        }\r\n\r\n        if (this._cameras !== null) {\r\n            this._scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(this._name, this._cameras);\r\n        }\r\n\r\n        // In multicamera mode, the scene needs to autoclear in between cameras.\r\n        if (this._scene.activeCameras && this._scene.activeCameras.length > 1) {\r\n            this._scene.autoClear = true;\r\n        }\r\n\r\n        if (!this._enableMSAAOnFirstPostProcess(this.samples) && this.samples > 1) {\r\n            Logger.Warn(\"MSAA failed to enable, MSAA is only supported in browsers that support webGL >= 2.0\");\r\n        }\r\n\r\n        this.onBuildObservable.notifyObservers(this);\r\n    }\r\n\r\n    private _disposePostProcesses(disposeNonRecreated = false): void {\r\n        for (var i = 0; i < this._cameras.length; i++) {\r\n            var camera = this._cameras[i];\r\n\r\n            if (this.imageProcessing) {\r\n                this.imageProcessing.dispose(camera);\r\n            }\r\n\r\n            if (this.fxaa) {\r\n                this.fxaa.dispose(camera);\r\n            }\r\n\r\n            // These are created in the constructor and should not be disposed on every pipeline change\r\n            if (disposeNonRecreated) {\r\n                if (this.sharpen) {\r\n                    this.sharpen.dispose(camera);\r\n                }\r\n\r\n                if (this.depthOfField) {\r\n                    this._scene.onAfterRenderTargetsRenderObservable.remove(this._depthOfFieldSceneObserver);\r\n                    this.depthOfField.disposeEffects(camera);\r\n                }\r\n\r\n                if (this.bloom) {\r\n                    this.bloom.disposeEffects(camera);\r\n                }\r\n\r\n                if (this.chromaticAberration) {\r\n                    this.chromaticAberration.dispose(camera);\r\n                }\r\n\r\n                if (this.grain) {\r\n                    this.grain.dispose(camera);\r\n                }\r\n                if (this._glowLayer) {\r\n                    this._glowLayer.dispose();\r\n                }\r\n            }\r\n        }\r\n\r\n        (<any>this.imageProcessing) = null;\r\n        (<any>this.fxaa) = null;\r\n\r\n        if (disposeNonRecreated) {\r\n            (<any>this.sharpen) = null;\r\n            (<any>this._sharpenEffect) = null;\r\n            (<any>this.depthOfField) = null;\r\n            (<any>this.bloom) = null;\r\n            (<any>this.chromaticAberration) = null;\r\n            (<any>this._chromaticAberrationEffect) = null;\r\n            (<any>this.grain) = null;\r\n            (<any>this._grainEffect) = null;\r\n            this._glowLayer = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a camera to the pipeline\r\n     * @param camera the camera to be added\r\n     */\r\n    public addCamera(camera: Camera): void {\r\n        this._camerasToBeAttached.push(camera);\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Removes a camera from the pipeline\r\n     * @param camera the camera to remove\r\n     */\r\n    public removeCamera(camera: Camera): void {\r\n        var index = this._camerasToBeAttached.indexOf(camera);\r\n        this._camerasToBeAttached.splice(index, 1);\r\n        this._buildPipeline();\r\n    }\r\n\r\n    /**\r\n     * Dispose of the pipeline and stop all post processes\r\n     */\r\n    public dispose(): void {\r\n        this.onBuildObservable.clear();\r\n        this._disposePostProcesses(true);\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._cameras);\r\n        this._scene.autoClear = true;\r\n        if (this._resizeObserver) {\r\n            this._scene.getEngine().onResizeObservable.remove(this._resizeObserver);\r\n            this._resizeObserver = null;\r\n        }\r\n        this._scene.imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingConfigurationObserver);\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Serialize the rendering pipeline (Used when exporting)\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"DefaultRenderingPipeline\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse the serialized pipeline\r\n     * @param source Source pipeline.\r\n     * @param scene The scene to load the pipeline to.\r\n     * @param rootUrl The URL of the serialized pipeline.\r\n     * @returns An instantiated pipeline from the serialized object.\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): DefaultRenderingPipeline {\r\n        return SerializationHelper.Parse(() => new DefaultRenderingPipeline(source._name, source._name._hdr, scene), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.DefaultRenderingPipeline\"] = DefaultRenderingPipeline;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}