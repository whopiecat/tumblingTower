{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Vector3, Vector4 } from \"../Maths/math.vector\";\nimport { Color3, Color4 } from \"../Maths/math.color\";\nimport { Condition, ValueCondition } from \"./condition\";\nimport { Action } from \"./action\";\nimport { DoNothingAction } from \"./directActions\";\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { Logger } from \"../Misc/logger\";\nimport { DeepCopier } from \"../Misc/deepCopier\";\nimport { _TypeStore } from \"../Misc/typeStore\";\nimport { AbstractActionManager } from './abstractActionManager';\n/**\r\n * Action Manager manages all events to be triggered on a given mesh or the global scene.\r\n * A single scene can have many Action Managers to handle predefined actions on specific meshes.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar ActionManager =\n/** @class */\nfunction (_super) {\n  __extends(ActionManager, _super);\n  /**\r\n   * Creates a new action manager\r\n   * @param scene defines the hosting scene\r\n   */\n\n\n  function ActionManager(scene) {\n    var _this = _super.call(this) || this;\n\n    _this._scene = scene || EngineStore.LastCreatedScene;\n    scene.actionManagers.push(_this);\n    return _this;\n  } // Methods\n\n  /**\r\n   * Releases all associated resources\r\n   */\n\n\n  ActionManager.prototype.dispose = function () {\n    var index = this._scene.actionManagers.indexOf(this);\n\n    for (var i = 0; i < this.actions.length; i++) {\n      var action = this.actions[i];\n      ActionManager.Triggers[action.trigger]--;\n\n      if (ActionManager.Triggers[action.trigger] === 0) {\n        delete ActionManager.Triggers[action.trigger];\n      }\n    }\n\n    if (index > -1) {\n      this._scene.actionManagers.splice(index, 1);\n    }\n  };\n  /**\r\n   * Gets hosting scene\r\n   * @returns the hosting scene\r\n   */\n\n\n  ActionManager.prototype.getScene = function () {\n    return this._scene;\n  };\n  /**\r\n   * Does this action manager handles actions of any of the given triggers\r\n   * @param triggers defines the triggers to be tested\r\n   * @return a boolean indicating whether one (or more) of the triggers is handled\r\n   */\n\n\n  ActionManager.prototype.hasSpecificTriggers = function (triggers) {\n    for (var index = 0; index < this.actions.length; index++) {\n      var action = this.actions[index];\n\n      if (triggers.indexOf(action.trigger) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Does this action manager handles actions of any of the given triggers. This function takes two arguments for\r\n   * speed.\r\n   * @param triggerA defines the trigger to be tested\r\n   * @param triggerB defines the trigger to be tested\r\n   * @return a boolean indicating whether one (or more) of the triggers is handled\r\n   */\n\n\n  ActionManager.prototype.hasSpecificTriggers2 = function (triggerA, triggerB) {\n    for (var index = 0; index < this.actions.length; index++) {\n      var action = this.actions[index];\n\n      if (triggerA == action.trigger || triggerB == action.trigger) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Does this action manager handles actions of a given trigger\r\n   * @param trigger defines the trigger to be tested\r\n   * @param parameterPredicate defines an optional predicate to filter triggers by parameter\r\n   * @return whether the trigger is handled\r\n   */\n\n\n  ActionManager.prototype.hasSpecificTrigger = function (trigger, parameterPredicate) {\n    for (var index = 0; index < this.actions.length; index++) {\n      var action = this.actions[index];\n\n      if (action.trigger === trigger) {\n        if (parameterPredicate) {\n          if (parameterPredicate(action.getTriggerParameter())) {\n            return true;\n          }\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(ActionManager.prototype, \"hasPointerTriggers\", {\n    /**\r\n     * Does this action manager has pointer triggers\r\n     */\n    get: function () {\n      for (var index = 0; index < this.actions.length; index++) {\n        var action = this.actions[index];\n\n        if (action.trigger >= ActionManager.OnPickTrigger && action.trigger <= ActionManager.OnPointerOutTrigger) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ActionManager.prototype, \"hasPickTriggers\", {\n    /**\r\n     * Does this action manager has pick triggers\r\n     */\n    get: function () {\n      for (var index = 0; index < this.actions.length; index++) {\n        var action = this.actions[index];\n\n        if (action.trigger >= ActionManager.OnPickTrigger && action.trigger <= ActionManager.OnPickUpTrigger) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Registers an action to this action manager\r\n   * @param action defines the action to be registered\r\n   * @return the action amended (prepared) after registration\r\n   */\n\n  ActionManager.prototype.registerAction = function (action) {\n    if (action.trigger === ActionManager.OnEveryFrameTrigger) {\n      if (this.getScene().actionManager !== this) {\n        Logger.Warn(\"OnEveryFrameTrigger can only be used with scene.actionManager\");\n        return null;\n      }\n    }\n\n    this.actions.push(action);\n\n    if (ActionManager.Triggers[action.trigger]) {\n      ActionManager.Triggers[action.trigger]++;\n    } else {\n      ActionManager.Triggers[action.trigger] = 1;\n    }\n\n    action._actionManager = this;\n\n    action._prepare();\n\n    return action;\n  };\n  /**\r\n   * Unregisters an action to this action manager\r\n   * @param action defines the action to be unregistered\r\n   * @return a boolean indicating whether the action has been unregistered\r\n   */\n\n\n  ActionManager.prototype.unregisterAction = function (action) {\n    var index = this.actions.indexOf(action);\n\n    if (index !== -1) {\n      this.actions.splice(index, 1);\n      ActionManager.Triggers[action.trigger] -= 1;\n\n      if (ActionManager.Triggers[action.trigger] === 0) {\n        delete ActionManager.Triggers[action.trigger];\n      }\n\n      action._actionManager = null;\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Process a specific trigger\r\n   * @param trigger defines the trigger to process\r\n   * @param evt defines the event details to be processed\r\n   */\n\n\n  ActionManager.prototype.processTrigger = function (trigger, evt) {\n    for (var index = 0; index < this.actions.length; index++) {\n      var action = this.actions[index];\n\n      if (action.trigger === trigger) {\n        if (evt) {\n          if (trigger === ActionManager.OnKeyUpTrigger || trigger === ActionManager.OnKeyDownTrigger) {\n            var parameter = action.getTriggerParameter();\n\n            if (parameter && parameter !== evt.sourceEvent.keyCode) {\n              if (!parameter.toLowerCase) {\n                continue;\n              }\n\n              var lowerCase = parameter.toLowerCase();\n\n              if (lowerCase !== evt.sourceEvent.key) {\n                var unicode = evt.sourceEvent.charCode ? evt.sourceEvent.charCode : evt.sourceEvent.keyCode;\n                var actualkey = String.fromCharCode(unicode).toLowerCase();\n\n                if (actualkey !== lowerCase) {\n                  continue;\n                }\n              }\n            }\n          }\n        }\n\n        action._executeCurrent(evt);\n      }\n    }\n  };\n  /** @hidden */\n\n\n  ActionManager.prototype._getEffectiveTarget = function (target, propertyPath) {\n    var properties = propertyPath.split(\".\");\n\n    for (var index = 0; index < properties.length - 1; index++) {\n      target = target[properties[index]];\n    }\n\n    return target;\n  };\n  /** @hidden */\n\n\n  ActionManager.prototype._getProperty = function (propertyPath) {\n    var properties = propertyPath.split(\".\");\n    return properties[properties.length - 1];\n  };\n  /**\r\n   * Serialize this manager to a JSON object\r\n   * @param name defines the property name to store this manager\r\n   * @returns a JSON representation of this manager\r\n   */\n\n\n  ActionManager.prototype.serialize = function (name) {\n    var root = {\n      children: new Array(),\n      name: name,\n      type: 3,\n      properties: new Array() // Empty for root but required\n\n    };\n\n    for (var i = 0; i < this.actions.length; i++) {\n      var triggerObject = {\n        type: 0,\n        children: new Array(),\n        name: ActionManager.GetTriggerName(this.actions[i].trigger),\n        properties: new Array()\n      };\n      var triggerOptions = this.actions[i].triggerOptions;\n\n      if (triggerOptions && typeof triggerOptions !== \"number\") {\n        if (triggerOptions.parameter instanceof Node) {\n          triggerObject.properties.push(Action._GetTargetProperty(triggerOptions.parameter));\n        } else {\n          var parameter = {};\n          DeepCopier.DeepCopy(triggerOptions.parameter, parameter, [\"mesh\"]);\n\n          if (triggerOptions.parameter && triggerOptions.parameter.mesh) {\n            parameter._meshId = triggerOptions.parameter.mesh.id;\n          }\n\n          triggerObject.properties.push({\n            name: \"parameter\",\n            targetType: null,\n            value: parameter\n          });\n        }\n      } // Serialize child action, recursively\n\n\n      this.actions[i].serialize(triggerObject); // Add serialized trigger\n\n      root.children.push(triggerObject);\n    }\n\n    return root;\n  };\n  /**\r\n   * Creates a new ActionManager from a JSON data\r\n   * @param parsedActions defines the JSON data to read from\r\n   * @param object defines the hosting mesh\r\n   * @param scene defines the hosting scene\r\n   */\n\n\n  ActionManager.Parse = function (parsedActions, object, scene) {\n    var actionManager = new ActionManager(scene);\n\n    if (object === null) {\n      scene.actionManager = actionManager;\n    } else {\n      object.actionManager = actionManager;\n    } // instanciate a new object\n\n\n    var instanciate = function (name, params) {\n      var internalClassType = _TypeStore.GetClass(\"BABYLON.\" + name);\n\n      if (internalClassType) {\n        var newInstance = Object.create(internalClassType.prototype);\n        newInstance.constructor.apply(newInstance, params);\n        return newInstance;\n      }\n    };\n\n    var parseParameter = function (name, value, target, propertyPath) {\n      if (propertyPath === null) {\n        // String, boolean or float\n        var floatValue = parseFloat(value);\n\n        if (value === \"true\" || value === \"false\") {\n          return value === \"true\";\n        } else {\n          return isNaN(floatValue) ? value : floatValue;\n        }\n      }\n\n      var effectiveTarget = propertyPath.split(\".\");\n      var values = value.split(\",\"); // Get effective Target\n\n      for (var i = 0; i < effectiveTarget.length; i++) {\n        target = target[effectiveTarget[i]];\n      } // Return appropriate value with its type\n\n\n      if (typeof target === \"boolean\") {\n        return values[0] === \"true\";\n      }\n\n      if (typeof target === \"string\") {\n        return values[0];\n      } // Parameters with multiple values such as Vector3 etc.\n\n\n      var split = new Array();\n\n      for (var i = 0; i < values.length; i++) {\n        split.push(parseFloat(values[i]));\n      }\n\n      if (target instanceof Vector3) {\n        return Vector3.FromArray(split);\n      }\n\n      if (target instanceof Vector4) {\n        return Vector4.FromArray(split);\n      }\n\n      if (target instanceof Color3) {\n        return Color3.FromArray(split);\n      }\n\n      if (target instanceof Color4) {\n        return Color4.FromArray(split);\n      }\n\n      return parseFloat(values[0]);\n    }; // traverse graph per trigger\n\n\n    var traverse = function (parsedAction, trigger, condition, action, combineArray) {\n      if (combineArray === void 0) {\n        combineArray = null;\n      }\n\n      if (parsedAction.detached) {\n        return;\n      }\n\n      var parameters = new Array();\n      var target = null;\n      var propertyPath = null;\n      var combine = parsedAction.combine && parsedAction.combine.length > 0; // Parameters\n\n      if (parsedAction.type === 2) {\n        parameters.push(actionManager);\n      } else {\n        parameters.push(trigger);\n      }\n\n      if (combine) {\n        var actions = new Array();\n\n        for (var j = 0; j < parsedAction.combine.length; j++) {\n          traverse(parsedAction.combine[j], ActionManager.NothingTrigger, condition, action, actions);\n        }\n\n        parameters.push(actions);\n      } else {\n        for (var i = 0; i < parsedAction.properties.length; i++) {\n          var value = parsedAction.properties[i].value;\n          var name = parsedAction.properties[i].name;\n          var targetType = parsedAction.properties[i].targetType;\n\n          if (name === \"target\") {\n            if (targetType !== null && targetType === \"SceneProperties\") {\n              value = target = scene;\n            } else {\n              value = target = scene.getNodeByName(value);\n            }\n          } else if (name === \"parent\") {\n            value = scene.getNodeByName(value);\n          } else if (name === \"sound\") {\n            // Can not externalize to component, so only checks for the presence off the API.\n            if (scene.getSoundByName) {\n              value = scene.getSoundByName(value);\n            }\n          } else if (name !== \"propertyPath\") {\n            if (parsedAction.type === 2 && name === \"operator\") {\n              value = ValueCondition[value];\n            } else {\n              value = parseParameter(name, value, target, name === \"value\" ? propertyPath : null);\n            }\n          } else {\n            propertyPath = value;\n          }\n\n          parameters.push(value);\n        }\n      }\n\n      if (combineArray === null) {\n        parameters.push(condition);\n      } else {\n        parameters.push(null);\n      } // If interpolate value action\n\n\n      if (parsedAction.name === \"InterpolateValueAction\") {\n        var param = parameters[parameters.length - 2];\n        parameters[parameters.length - 1] = param;\n        parameters[parameters.length - 2] = condition;\n      } // Action or condition(s) and not CombineAction\n\n\n      var newAction = instanciate(parsedAction.name, parameters);\n\n      if (newAction instanceof Condition && condition !== null) {\n        var nothing = new DoNothingAction(trigger, condition);\n\n        if (action) {\n          action.then(nothing);\n        } else {\n          actionManager.registerAction(nothing);\n        }\n\n        action = nothing;\n      }\n\n      if (combineArray === null) {\n        if (newAction instanceof Condition) {\n          condition = newAction;\n          newAction = action;\n        } else {\n          condition = null;\n\n          if (action) {\n            action.then(newAction);\n          } else {\n            actionManager.registerAction(newAction);\n          }\n        }\n      } else {\n        combineArray.push(newAction);\n      }\n\n      for (var i = 0; i < parsedAction.children.length; i++) {\n        traverse(parsedAction.children[i], trigger, condition, newAction, null);\n      }\n    }; // triggers\n\n\n    for (var i = 0; i < parsedActions.children.length; i++) {\n      var triggerParams;\n      var trigger = parsedActions.children[i];\n\n      if (trigger.properties.length > 0) {\n        var param = trigger.properties[0].value;\n        var value = trigger.properties[0].targetType === null ? param : scene.getMeshByName(param);\n\n        if (value._meshId) {\n          value.mesh = scene.getMeshByID(value._meshId);\n        }\n\n        triggerParams = {\n          trigger: ActionManager[trigger.name],\n          parameter: value\n        };\n      } else {\n        triggerParams = ActionManager[trigger.name];\n      }\n\n      for (var j = 0; j < trigger.children.length; j++) {\n        if (!trigger.detached) {\n          traverse(trigger.children[j], triggerParams, null, null);\n        }\n      }\n    }\n  };\n  /**\r\n   * Get a trigger name by index\r\n   * @param trigger defines the trigger index\r\n   * @returns a trigger name\r\n   */\n\n\n  ActionManager.GetTriggerName = function (trigger) {\n    switch (trigger) {\n      case 0:\n        return \"NothingTrigger\";\n\n      case 1:\n        return \"OnPickTrigger\";\n\n      case 2:\n        return \"OnLeftPickTrigger\";\n\n      case 3:\n        return \"OnRightPickTrigger\";\n\n      case 4:\n        return \"OnCenterPickTrigger\";\n\n      case 5:\n        return \"OnPickDownTrigger\";\n\n      case 6:\n        return \"OnPickUpTrigger\";\n\n      case 7:\n        return \"OnLongPressTrigger\";\n\n      case 8:\n        return \"OnPointerOverTrigger\";\n\n      case 9:\n        return \"OnPointerOutTrigger\";\n\n      case 10:\n        return \"OnEveryFrameTrigger\";\n\n      case 11:\n        return \"OnIntersectionEnterTrigger\";\n\n      case 12:\n        return \"OnIntersectionExitTrigger\";\n\n      case 13:\n        return \"OnKeyDownTrigger\";\n\n      case 14:\n        return \"OnKeyUpTrigger\";\n\n      case 15:\n        return \"OnPickOutTrigger\";\n\n      default:\n        return \"\";\n    }\n  };\n  /**\r\n   * Nothing\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n\n  ActionManager.NothingTrigger = 0;\n  /**\r\n   * On pick\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnPickTrigger = 1;\n  /**\r\n   * On left pick\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnLeftPickTrigger = 2;\n  /**\r\n   * On right pick\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnRightPickTrigger = 3;\n  /**\r\n   * On center pick\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnCenterPickTrigger = 4;\n  /**\r\n   * On pick down\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnPickDownTrigger = 5;\n  /**\r\n   * On double pick\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnDoublePickTrigger = 6;\n  /**\r\n   * On pick up\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnPickUpTrigger = 7;\n  /**\r\n   * On pick out.\r\n   * This trigger will only be raised if you also declared a OnPickDown\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnPickOutTrigger = 16;\n  /**\r\n   * On long press\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnLongPressTrigger = 8;\n  /**\r\n   * On pointer over\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnPointerOverTrigger = 9;\n  /**\r\n   * On pointer out\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnPointerOutTrigger = 10;\n  /**\r\n   * On every frame\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnEveryFrameTrigger = 11;\n  /**\r\n   * On intersection enter\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnIntersectionEnterTrigger = 12;\n  /**\r\n   * On intersection exit\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnIntersectionExitTrigger = 13;\n  /**\r\n   * On key down\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnKeyDownTrigger = 14;\n  /**\r\n   * On key up\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  ActionManager.OnKeyUpTrigger = 15;\n  return ActionManager;\n}(AbstractActionManager);\n\nexport { ActionManager };","map":{"version":3,"sources":["../../../sourceES6/core/Actions/actionManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Scene } from \"../scene\";\r\nimport { Vector3, Vector4 } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Condition, ValueCondition } from \"./condition\";\r\nimport { Action, IAction } from \"./action\";\r\nimport { DoNothingAction } from \"./directActions\";\r\n\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { IActionEvent } from \"../Actions/actionEvent\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { DeepCopier } from \"../Misc/deepCopier\";\r\nimport { _TypeStore } from \"../Misc/typeStore\";\r\nimport { AbstractActionManager } from './abstractActionManager';\r\n\r\n\r\n/**\r\n * Action Manager manages all events to be triggered on a given mesh or the global scene.\r\n * A single scene can have many Action Managers to handle predefined actions on specific meshes.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class ActionManager extends AbstractActionManager {\r\n    /**\r\n     * Nothing\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly NothingTrigger = 0;\r\n\r\n    /**\r\n     * On pick\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnPickTrigger = 1;\r\n\r\n    /**\r\n     * On left pick\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnLeftPickTrigger = 2;\r\n\r\n    /**\r\n     * On right pick\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnRightPickTrigger = 3;\r\n\r\n    /**\r\n     * On center pick\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnCenterPickTrigger = 4;\r\n\r\n    /**\r\n     * On pick down\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnPickDownTrigger = 5;\r\n\r\n    /**\r\n     * On double pick\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnDoublePickTrigger = 6;\r\n\r\n    /**\r\n     * On pick up\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnPickUpTrigger = 7;\r\n    /**\r\n     * On pick out.\r\n     * This trigger will only be raised if you also declared a OnPickDown\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnPickOutTrigger = 16;\r\n\r\n    /**\r\n     * On long press\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnLongPressTrigger = 8;\r\n\r\n    /**\r\n     * On pointer over\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnPointerOverTrigger = 9;\r\n\r\n    /**\r\n     * On pointer out\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnPointerOutTrigger = 10;\r\n\r\n    /**\r\n     * On every frame\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnEveryFrameTrigger = 11;\r\n    /**\r\n     * On intersection enter\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnIntersectionEnterTrigger = 12;\r\n\r\n    /**\r\n     * On intersection exit\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnIntersectionExitTrigger = 13;\r\n\r\n    /**\r\n     * On key down\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnKeyDownTrigger = 14;\r\n\r\n    /**\r\n     * On key up\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly OnKeyUpTrigger = 15;\r\n\r\n    // Members\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Creates a new action manager\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(scene: Scene) {\r\n        super();\r\n        this._scene = scene || EngineStore.LastCreatedScene;\r\n\r\n        scene.actionManagers.push(this);\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose(): void {\r\n        var index = this._scene.actionManagers.indexOf(this);\r\n\r\n        for (var i = 0; i < this.actions.length; i++) {\r\n            var action = this.actions[i];\r\n            ActionManager.Triggers[action.trigger]--;\r\n            if (ActionManager.Triggers[action.trigger] === 0) {\r\n                delete ActionManager.Triggers[action.trigger];\r\n            }\r\n        }\r\n\r\n        if (index > -1) {\r\n            this._scene.actionManagers.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets hosting scene\r\n     * @returns the hosting scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers\r\n     * @param triggers defines the triggers to be tested\r\n     * @return a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public hasSpecificTriggers(triggers: number[]): boolean {\r\n        for (var index = 0; index < this.actions.length; index++) {\r\n            var action = this.actions[index];\r\n\r\n            if (triggers.indexOf(action.trigger) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers. This function takes two arguments for\r\n     * speed.\r\n     * @param triggerA defines the trigger to be tested\r\n     * @param triggerB defines the trigger to be tested\r\n     * @return a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public hasSpecificTriggers2(triggerA: number, triggerB: number): boolean {\r\n        for (var index = 0; index < this.actions.length; index++) {\r\n            var action = this.actions[index];\r\n\r\n            if (triggerA == action.trigger || triggerB == action.trigger) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does this action manager handles actions of a given trigger\r\n     * @param trigger defines the trigger to be tested\r\n     * @param parameterPredicate defines an optional predicate to filter triggers by parameter\r\n     * @return whether the trigger is handled\r\n     */\r\n    public hasSpecificTrigger(trigger: number, parameterPredicate?: (parameter: any) => boolean): boolean {\r\n        for (var index = 0; index < this.actions.length; index++) {\r\n            var action = this.actions[index];\r\n\r\n            if (action.trigger === trigger) {\r\n                if (parameterPredicate) {\r\n                    if (parameterPredicate(action.getTriggerParameter())) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does this action manager has pointer triggers\r\n     */\r\n    public get hasPointerTriggers(): boolean {\r\n        for (var index = 0; index < this.actions.length; index++) {\r\n            var action = this.actions[index];\r\n\r\n            if (action.trigger >= ActionManager.OnPickTrigger && action.trigger <= ActionManager.OnPointerOutTrigger) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does this action manager has pick triggers\r\n     */\r\n    public get hasPickTriggers(): boolean {\r\n        for (var index = 0; index < this.actions.length; index++) {\r\n            var action = this.actions[index];\r\n\r\n            if (action.trigger >= ActionManager.OnPickTrigger && action.trigger <= ActionManager.OnPickUpTrigger) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Registers an action to this action manager\r\n     * @param action defines the action to be registered\r\n     * @return the action amended (prepared) after registration\r\n     */\r\n    public registerAction(action: IAction): Nullable<IAction> {\r\n        if (action.trigger === ActionManager.OnEveryFrameTrigger) {\r\n            if (this.getScene().actionManager !== this) {\r\n                Logger.Warn(\"OnEveryFrameTrigger can only be used with scene.actionManager\");\r\n                return null;\r\n            }\r\n        }\r\n\r\n        this.actions.push(action);\r\n\r\n        if (ActionManager.Triggers[action.trigger]) {\r\n            ActionManager.Triggers[action.trigger]++;\r\n        }\r\n        else {\r\n            ActionManager.Triggers[action.trigger] = 1;\r\n        }\r\n\r\n        action._actionManager = this;\r\n        action._prepare();\r\n\r\n        return action;\r\n    }\r\n\r\n    /**\r\n     * Unregisters an action to this action manager\r\n     * @param action defines the action to be unregistered\r\n     * @return a boolean indicating whether the action has been unregistered\r\n     */\r\n    public unregisterAction(action: IAction): Boolean {\r\n        var index = this.actions.indexOf(action);\r\n        if (index !== -1) {\r\n            this.actions.splice(index, 1);\r\n            ActionManager.Triggers[action.trigger] -= 1;\r\n            if (ActionManager.Triggers[action.trigger] === 0) {\r\n                delete ActionManager.Triggers[action.trigger];\r\n            }\r\n            action._actionManager = null;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Process a specific trigger\r\n     * @param trigger defines the trigger to process\r\n     * @param evt defines the event details to be processed\r\n     */\r\n    public processTrigger(trigger: number, evt?: IActionEvent): void {\r\n        for (var index = 0; index < this.actions.length; index++) {\r\n            var action = this.actions[index];\r\n\r\n            if (action.trigger === trigger) {\r\n                if (evt) {\r\n                    if (trigger === ActionManager.OnKeyUpTrigger\r\n                        || trigger === ActionManager.OnKeyDownTrigger) {\r\n                        var parameter = action.getTriggerParameter();\r\n\r\n                        if (parameter && parameter !== evt.sourceEvent.keyCode) {\r\n                            if (!parameter.toLowerCase) {\r\n                                continue;\r\n                            }\r\n                            var lowerCase = parameter.toLowerCase();\r\n\r\n                            if (lowerCase !== evt.sourceEvent.key) {\r\n                                var unicode = evt.sourceEvent.charCode ? evt.sourceEvent.charCode : evt.sourceEvent.keyCode;\r\n                                var actualkey = String.fromCharCode(unicode).toLowerCase();\r\n                                if (actualkey !== lowerCase) {\r\n                                    continue;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                action._executeCurrent(evt);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getEffectiveTarget(target: any, propertyPath: string): any {\r\n        var properties = propertyPath.split(\".\");\r\n\r\n        for (var index = 0; index < properties.length - 1; index++) {\r\n            target = target[properties[index]];\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getProperty(propertyPath: string): string {\r\n        var properties = propertyPath.split(\".\");\r\n\r\n        return properties[properties.length - 1];\r\n    }\r\n\r\n    /**\r\n     * Serialize this manager to a JSON object\r\n     * @param name defines the property name to store this manager\r\n     * @returns a JSON representation of this manager\r\n     */\r\n    public serialize(name: string): any {\r\n        var root = {\r\n            children: new Array(),\r\n            name: name,\r\n            type: 3, // Root node\r\n            properties: new Array() // Empty for root but required\r\n        };\r\n\r\n        for (var i = 0; i < this.actions.length; i++) {\r\n            var triggerObject = {\r\n                type: 0, // Trigger\r\n                children: new Array(),\r\n                name: ActionManager.GetTriggerName(this.actions[i].trigger),\r\n                properties: new Array()\r\n            };\r\n\r\n            var triggerOptions = this.actions[i].triggerOptions;\r\n\r\n            if (triggerOptions && typeof triggerOptions !== \"number\") {\r\n                if (triggerOptions.parameter instanceof Node) {\r\n                    triggerObject.properties.push(Action._GetTargetProperty(triggerOptions.parameter));\r\n                }\r\n                else {\r\n                    var parameter = <any>{};\r\n                    DeepCopier.DeepCopy(triggerOptions.parameter, parameter, [\"mesh\"]);\r\n\r\n                    if (triggerOptions.parameter && triggerOptions.parameter.mesh) {\r\n                        parameter._meshId = triggerOptions.parameter.mesh.id;\r\n                    }\r\n\r\n                    triggerObject.properties.push({ name: \"parameter\", targetType: null, value: parameter });\r\n                }\r\n            }\r\n\r\n            // Serialize child action, recursively\r\n            this.actions[i].serialize(triggerObject);\r\n\r\n            // Add serialized trigger\r\n            root.children.push(triggerObject);\r\n        }\r\n\r\n        return root;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ActionManager from a JSON data\r\n     * @param parsedActions defines the JSON data to read from\r\n     * @param object defines the hosting mesh\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public static Parse(parsedActions: any, object: Nullable<AbstractMesh>, scene: Scene): void {\r\n        var actionManager = new ActionManager(scene);\r\n        if (object === null) {\r\n            scene.actionManager = actionManager;\r\n        }\r\n        else {\r\n            object.actionManager = actionManager;\r\n        }\r\n\r\n        // instanciate a new object\r\n        var instanciate = (name: string, params: Array<any>): any => {\r\n            const internalClassType = _TypeStore.GetClass(\"BABYLON.\" + name);\r\n            if (internalClassType) {\r\n                var newInstance: Object = Object.create(internalClassType.prototype);\r\n                newInstance.constructor.apply(newInstance, params);\r\n                return newInstance;\r\n            }\r\n        };\r\n\r\n        var parseParameter = (name: string, value: string, target: any, propertyPath: Nullable<string>): any => {\r\n            if (propertyPath === null) {\r\n                // String, boolean or float\r\n                var floatValue = parseFloat(value);\r\n\r\n                if (value === \"true\" || value === \"false\") {\r\n                    return value === \"true\";\r\n                }\r\n                else {\r\n                    return isNaN(floatValue) ? value : floatValue;\r\n                }\r\n            }\r\n\r\n            var effectiveTarget = propertyPath.split(\".\");\r\n            var values = value.split(\",\");\r\n\r\n            // Get effective Target\r\n            for (var i = 0; i < effectiveTarget.length; i++) {\r\n                target = target[effectiveTarget[i]];\r\n            }\r\n\r\n            // Return appropriate value with its type\r\n            if (typeof (target) === \"boolean\") {\r\n                return values[0] === \"true\";\r\n            }\r\n\r\n            if (typeof (target) === \"string\") {\r\n                return values[0];\r\n            }\r\n\r\n            // Parameters with multiple values such as Vector3 etc.\r\n            var split = new Array<number>();\r\n            for (var i = 0; i < values.length; i++) {\r\n                split.push(parseFloat(values[i]));\r\n            }\r\n\r\n            if (target instanceof Vector3) {\r\n                return Vector3.FromArray(split);\r\n            }\r\n\r\n            if (target instanceof Vector4) {\r\n                return Vector4.FromArray(split);\r\n            }\r\n\r\n            if (target instanceof Color3) {\r\n                return Color3.FromArray(split);\r\n            }\r\n\r\n            if (target instanceof Color4) {\r\n                return Color4.FromArray(split);\r\n            }\r\n\r\n            return parseFloat(values[0]);\r\n        };\r\n\r\n        // traverse graph per trigger\r\n        var traverse = (parsedAction: any, trigger: any, condition: Nullable<Condition>, action: Nullable<Action>, combineArray: Nullable<Array<Action>> = null) => {\r\n            if (parsedAction.detached) {\r\n                return;\r\n            }\r\n\r\n            var parameters = new Array<any>();\r\n            var target: any = null;\r\n            var propertyPath: Nullable<string> = null;\r\n            var combine = parsedAction.combine && parsedAction.combine.length > 0;\r\n\r\n            // Parameters\r\n            if (parsedAction.type === 2) {\r\n                parameters.push(actionManager);\r\n            }\r\n            else {\r\n                parameters.push(trigger);\r\n            }\r\n\r\n            if (combine) {\r\n                var actions = new Array<Action>();\r\n                for (var j = 0; j < parsedAction.combine.length; j++) {\r\n                    traverse(parsedAction.combine[j], ActionManager.NothingTrigger, condition, action, actions);\r\n                }\r\n                parameters.push(actions);\r\n            }\r\n            else {\r\n                for (var i = 0; i < parsedAction.properties.length; i++) {\r\n                    var value = parsedAction.properties[i].value;\r\n                    var name = parsedAction.properties[i].name;\r\n                    var targetType = parsedAction.properties[i].targetType;\r\n\r\n                    if (name === \"target\") {\r\n                        if (targetType !== null && targetType === \"SceneProperties\") {\r\n                            value = target = scene;\r\n                        }\r\n                        else {\r\n                            value = target = scene.getNodeByName(value);\r\n                        }\r\n                    }\r\n                    else if (name === \"parent\") {\r\n                        value = scene.getNodeByName(value);\r\n                    }\r\n                    else if (name === \"sound\") {\r\n                        // Can not externalize to component, so only checks for the presence off the API.\r\n                        if (scene.getSoundByName) {\r\n                            value = scene.getSoundByName(value);\r\n                        }\r\n                    }\r\n                    else if (name !== \"propertyPath\") {\r\n                        if (parsedAction.type === 2 && name === \"operator\") {\r\n                            value = (<any>ValueCondition)[value];\r\n                        }\r\n                        else {\r\n                            value = parseParameter(name, value, target, name === \"value\" ? propertyPath : null);\r\n                        }\r\n                    } else {\r\n                        propertyPath = value;\r\n                    }\r\n\r\n                    parameters.push(value);\r\n                }\r\n            }\r\n\r\n            if (combineArray === null) {\r\n                parameters.push(condition);\r\n            }\r\n            else {\r\n                parameters.push(null);\r\n            }\r\n\r\n            // If interpolate value action\r\n            if (parsedAction.name === \"InterpolateValueAction\") {\r\n                var param = parameters[parameters.length - 2];\r\n                parameters[parameters.length - 1] = param;\r\n                parameters[parameters.length - 2] = condition;\r\n            }\r\n\r\n            // Action or condition(s) and not CombineAction\r\n            var newAction = instanciate(parsedAction.name, parameters);\r\n\r\n            if (newAction instanceof Condition && condition !== null) {\r\n                var nothing = new DoNothingAction(trigger, condition);\r\n\r\n                if (action) {\r\n                    action.then(nothing);\r\n                }\r\n                else {\r\n                    actionManager.registerAction(nothing);\r\n                }\r\n\r\n                action = nothing;\r\n            }\r\n\r\n            if (combineArray === null) {\r\n                if (newAction instanceof Condition) {\r\n                    condition = newAction;\r\n                    newAction = action;\r\n                } else {\r\n                    condition = null;\r\n                    if (action) {\r\n                        action.then(newAction);\r\n                    }\r\n                    else {\r\n                        actionManager.registerAction(newAction);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                combineArray.push(newAction);\r\n            }\r\n\r\n            for (var i = 0; i < parsedAction.children.length; i++) {\r\n                traverse(parsedAction.children[i], trigger, condition, newAction, null);\r\n            }\r\n        };\r\n\r\n        // triggers\r\n        for (var i = 0; i < parsedActions.children.length; i++) {\r\n            var triggerParams: any;\r\n            var trigger = parsedActions.children[i];\r\n\r\n            if (trigger.properties.length > 0) {\r\n                var param = trigger.properties[0].value;\r\n                var value = trigger.properties[0].targetType === null ? param : scene.getMeshByName(param);\r\n\r\n                if (value._meshId) {\r\n                    value.mesh = scene.getMeshByID(value._meshId);\r\n                }\r\n\r\n                triggerParams = { trigger: (<any>ActionManager)[trigger.name], parameter: value };\r\n            }\r\n            else {\r\n                triggerParams = (<any>ActionManager)[trigger.name];\r\n            }\r\n\r\n            for (var j = 0; j < trigger.children.length; j++) {\r\n                if (!trigger.detached) {\r\n                    traverse(trigger.children[j], triggerParams, null, null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a trigger name by index\r\n     * @param trigger defines the trigger index\r\n     * @returns a trigger name\r\n     */\r\n    public static GetTriggerName(trigger: number): string {\r\n        switch (trigger) {\r\n            case 0: return \"NothingTrigger\";\r\n            case 1: return \"OnPickTrigger\";\r\n            case 2: return \"OnLeftPickTrigger\";\r\n            case 3: return \"OnRightPickTrigger\";\r\n            case 4: return \"OnCenterPickTrigger\";\r\n            case 5: return \"OnPickDownTrigger\";\r\n            case 6: return \"OnPickUpTrigger\";\r\n            case 7: return \"OnLongPressTrigger\";\r\n            case 8: return \"OnPointerOverTrigger\";\r\n            case 9: return \"OnPointerOutTrigger\";\r\n            case 10: return \"OnEveryFrameTrigger\";\r\n            case 11: return \"OnIntersectionEnterTrigger\";\r\n            case 12: return \"OnIntersectionExitTrigger\";\r\n            case 13: return \"OnKeyDownTrigger\";\r\n            case 14: return \"OnKeyUpTrigger\";\r\n            case 15: return \"OnPickOutTrigger\";\r\n            default: return \"\";\r\n        }\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}