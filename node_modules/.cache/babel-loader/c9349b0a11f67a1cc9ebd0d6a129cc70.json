{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Action } from \"./action\";\nimport { _TypeStore } from '../Misc/typeStore';\n/**\r\n * This defines an action responsible to toggle a boolean once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar SwitchBooleanAction =\n/** @class */\nfunction (_super) {\n  __extends(SwitchBooleanAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the object containing the boolean\r\n   * @param propertyPath defines the path to the boolean property in the target object\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function SwitchBooleanAction(triggerOptions, target, propertyPath, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.propertyPath = propertyPath;\n    _this._target = _this._effectiveTarget = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  SwitchBooleanAction.prototype._prepare = function () {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n  };\n  /**\r\n   * Execute the action toggle the boolean value.\r\n   */\n\n\n  SwitchBooleanAction.prototype.execute = function () {\n    this._effectiveTarget[this._property] = !this._effectiveTarget[this._property];\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  SwitchBooleanAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"SwitchBooleanAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }]\n    }, parent);\n  };\n\n  return SwitchBooleanAction;\n}(Action);\n\nexport { SwitchBooleanAction };\n/**\r\n * This defines an action responsible to set a the state field of the target\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar SetStateAction =\n/** @class */\nfunction (_super) {\n  __extends(SetStateAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the object containing the state property\r\n   * @param value defines the value to store in the state field\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function SetStateAction(triggerOptions, target, value, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.value = value;\n    _this._target = target;\n    return _this;\n  }\n  /**\r\n   * Execute the action and store the value on the target state property.\r\n   */\n\n\n  SetStateAction.prototype.execute = function () {\n    this._target.state = this.value;\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  SetStateAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"SetStateAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"value\",\n        value: this.value\n      }]\n    }, parent);\n  };\n\n  return SetStateAction;\n}(Action);\n\nexport { SetStateAction };\n/**\r\n * This defines an action responsible to set a property of the target\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar SetValueAction =\n/** @class */\nfunction (_super) {\n  __extends(SetValueAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the object containing the property\r\n   * @param propertyPath defines the path of the property to set in the target\r\n   * @param value defines the value to set in the property\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function SetValueAction(triggerOptions, target, propertyPath, value, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.propertyPath = propertyPath;\n    _this.value = value;\n    _this._target = _this._effectiveTarget = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  SetValueAction.prototype._prepare = function () {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n  };\n  /**\r\n   * Execute the action and set the targetted property to the desired value.\r\n   */\n\n\n  SetValueAction.prototype.execute = function () {\n    this._effectiveTarget[this._property] = this.value;\n\n    if (this._target.markAsDirty) {\n      this._target.markAsDirty(this._property);\n    }\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  SetValueAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"SetValueAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }]\n    }, parent);\n  };\n\n  return SetValueAction;\n}(Action);\n\nexport { SetValueAction };\n/**\r\n * This defines an action responsible to increment the target value\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar IncrementValueAction =\n/** @class */\nfunction (_super) {\n  __extends(IncrementValueAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the object containing the property\r\n   * @param propertyPath defines the path of the property to increment in the target\r\n   * @param value defines the value value we should increment the property by\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function IncrementValueAction(triggerOptions, target, propertyPath, value, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.propertyPath = propertyPath;\n    _this.value = value;\n    _this._target = _this._effectiveTarget = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  IncrementValueAction.prototype._prepare = function () {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n\n    if (typeof this._effectiveTarget[this._property] !== \"number\") {\n      Logger.Warn(\"Warning: IncrementValueAction can only be used with number values\");\n    }\n  };\n  /**\r\n   * Execute the action and increment the target of the value amount.\r\n   */\n\n\n  IncrementValueAction.prototype.execute = function () {\n    this._effectiveTarget[this._property] += this.value;\n\n    if (this._target.markAsDirty) {\n      this._target.markAsDirty(this._property);\n    }\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  IncrementValueAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"IncrementValueAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }]\n    }, parent);\n  };\n\n  return IncrementValueAction;\n}(Action);\n\nexport { IncrementValueAction };\n/**\r\n * This defines an action responsible to start an animation once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar PlayAnimationAction =\n/** @class */\nfunction (_super) {\n  __extends(PlayAnimationAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the target animation or animation name\r\n   * @param from defines from where the animation should start (animation frame)\r\n   * @param end defines where the animation should stop (animation frame)\r\n   * @param loop defines if the animation should loop or stop after the first play\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function PlayAnimationAction(triggerOptions, target, from, to, loop, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.from = from;\n    _this.to = to;\n    _this.loop = loop;\n    _this._target = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  PlayAnimationAction.prototype._prepare = function () {};\n  /**\r\n   * Execute the action and play the animation.\r\n   */\n\n\n  PlayAnimationAction.prototype.execute = function () {\n    var scene = this._actionManager.getScene();\n\n    scene.beginAnimation(this._target, this.from, this.to, this.loop);\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  PlayAnimationAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"PlayAnimationAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"from\",\n        value: String(this.from)\n      }, {\n        name: \"to\",\n        value: String(this.to)\n      }, {\n        name: \"loop\",\n        value: Action._SerializeValueAsString(this.loop) || false\n      }]\n    }, parent);\n  };\n\n  return PlayAnimationAction;\n}(Action);\n\nexport { PlayAnimationAction };\n/**\r\n * This defines an action responsible to stop an animation once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar StopAnimationAction =\n/** @class */\nfunction (_super) {\n  __extends(StopAnimationAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the target animation or animation name\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function StopAnimationAction(triggerOptions, target, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this._target = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  StopAnimationAction.prototype._prepare = function () {};\n  /**\r\n   * Execute the action and stop the animation.\r\n   */\n\n\n  StopAnimationAction.prototype.execute = function () {\n    var scene = this._actionManager.getScene();\n\n    scene.stopAnimation(this._target);\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  StopAnimationAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"StopAnimationAction\",\n      properties: [Action._GetTargetProperty(this._target)]\n    }, parent);\n  };\n\n  return StopAnimationAction;\n}(Action);\n\nexport { StopAnimationAction };\n/**\r\n * This defines an action responsible that does nothing once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar DoNothingAction =\n/** @class */\nfunction (_super) {\n  __extends(DoNothingAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function DoNothingAction(triggerOptions, condition) {\n    if (triggerOptions === void 0) {\n      triggerOptions = 0;\n    }\n\n    return _super.call(this, triggerOptions, condition) || this;\n  }\n  /**\r\n   * Execute the action and do nothing.\r\n   */\n\n\n  DoNothingAction.prototype.execute = function () {};\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  DoNothingAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"DoNothingAction\",\n      properties: []\n    }, parent);\n  };\n\n  return DoNothingAction;\n}(Action);\n\nexport { DoNothingAction };\n/**\r\n * This defines an action responsible to trigger several actions once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar CombineAction =\n/** @class */\nfunction (_super) {\n  __extends(CombineAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param children defines the list of aggregated animations to run\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function CombineAction(triggerOptions, children, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.children = children;\n    return _this;\n  }\n  /** @hidden */\n\n\n  CombineAction.prototype._prepare = function () {\n    for (var index = 0; index < this.children.length; index++) {\n      this.children[index]._actionManager = this._actionManager;\n\n      this.children[index]._prepare();\n    }\n  };\n  /**\r\n   * Execute the action and executes all the aggregated actions.\r\n   */\n\n\n  CombineAction.prototype.execute = function (evt) {\n    for (var index = 0; index < this.children.length; index++) {\n      this.children[index].execute(evt);\n    }\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  CombineAction.prototype.serialize = function (parent) {\n    var serializationObject = _super.prototype._serialize.call(this, {\n      name: \"CombineAction\",\n      properties: [],\n      combine: []\n    }, parent);\n\n    for (var i = 0; i < this.children.length; i++) {\n      serializationObject.combine.push(this.children[i].serialize(null));\n    }\n\n    return serializationObject;\n  };\n\n  return CombineAction;\n}(Action);\n\nexport { CombineAction };\n/**\r\n * This defines an action responsible to run code (external event) once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar ExecuteCodeAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecuteCodeAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param func defines the callback function to run\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function ExecuteCodeAction(triggerOptions, func, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.func = func;\n    return _this;\n  }\n  /**\r\n   * Execute the action and run the attached code.\r\n   */\n\n\n  ExecuteCodeAction.prototype.execute = function (evt) {\n    this.func(evt);\n  };\n\n  return ExecuteCodeAction;\n}(Action);\n\nexport { ExecuteCodeAction };\n/**\r\n * This defines an action responsible to set the parent property of the target once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar SetParentAction =\n/** @class */\nfunction (_super) {\n  __extends(SetParentAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the target containing the parent property\r\n   * @param parent defines from where the animation should start (animation frame)\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function SetParentAction(triggerOptions, target, parent, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this._target = target;\n    _this._parent = parent;\n    return _this;\n  }\n  /** @hidden */\n\n\n  SetParentAction.prototype._prepare = function () {};\n  /**\r\n   * Execute the action and set the parent property.\r\n   */\n\n\n  SetParentAction.prototype.execute = function () {\n    if (this._target.parent === this._parent) {\n      return;\n    }\n\n    var invertParentWorldMatrix = this._parent.getWorldMatrix().clone();\n\n    invertParentWorldMatrix.invert();\n    this._target.position = Vector3.TransformCoordinates(this._target.position, invertParentWorldMatrix);\n    this._target.parent = this._parent;\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  SetParentAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"SetParentAction\",\n      properties: [Action._GetTargetProperty(this._target), Action._GetTargetProperty(this._parent)]\n    }, parent);\n  };\n\n  return SetParentAction;\n}(Action);\n\nexport { SetParentAction };\n_TypeStore.RegisteredTypes[\"BABYLON.SetParentAction\"] = SetParentAction;\n_TypeStore.RegisteredTypes[\"BABYLON.ExecuteCodeAction\"] = ExecuteCodeAction;\n_TypeStore.RegisteredTypes[\"BABYLON.DoNothingAction\"] = DoNothingAction;\n_TypeStore.RegisteredTypes[\"BABYLON.StopAnimationAction\"] = StopAnimationAction;\n_TypeStore.RegisteredTypes[\"BABYLON.PlayAnimationAction\"] = PlayAnimationAction;\n_TypeStore.RegisteredTypes[\"BABYLON.IncrementValueAction\"] = IncrementValueAction;\n_TypeStore.RegisteredTypes[\"BABYLON.SetValueAction\"] = SetValueAction;\n_TypeStore.RegisteredTypes[\"BABYLON.SetStateAction\"] = SetStateAction;\n_TypeStore.RegisteredTypes[\"BABYLON.SetParentAction\"] = SetParentAction;","map":{"version":3,"sources":["../../../sourceES6/core/Actions/directActions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Action } from \"./action\";\r\nimport { Condition } from \"./condition\";\r\n\r\nimport { _TypeStore } from '../Misc/typeStore';\r\n\r\ndeclare type ActionEvent = import(\"./actionEvent\").ActionEvent;\r\n\r\n/**\r\n * This defines an action responsible to toggle a boolean once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class SwitchBooleanAction extends Action {\r\n    /**\r\n     * The path to the boolean property in the target object\r\n     */\r\n    public propertyPath: string;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the boolean\r\n     * @param propertyPath defines the path to the boolean property in the target object\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.propertyPath = propertyPath;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Execute the action toggle the boolean value.\r\n     */\r\n    public execute(): void {\r\n        this._effectiveTarget[this._property] = !this._effectiveTarget[this._property];\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize({\r\n            name: \"SwitchBooleanAction\",\r\n            properties: [\r\n                Action._GetTargetProperty(this._target),\r\n                { name: \"propertyPath\", value: this.propertyPath }\r\n            ]\r\n        }, parent);\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to set a the state field of the target\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class SetStateAction extends Action {\r\n    /**\r\n     * The value to store in the state field.\r\n     */\r\n    public value: string;\r\n\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the state property\r\n     * @param value defines the value to store in the state field\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, value: string, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.value = value;\r\n        this._target = target;\r\n    }\r\n\r\n    /**\r\n     * Execute the action and store the value on the target state property.\r\n     */\r\n    public execute(): void {\r\n        this._target.state = this.value;\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize({\r\n            name: \"SetStateAction\",\r\n            properties: [\r\n                Action._GetTargetProperty(this._target),\r\n                { name: \"value\", value: this.value }\r\n            ]\r\n        }, parent);\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to set a property of the target\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class SetValueAction extends Action {\r\n    /**\r\n     * The path of the property to set in the target.\r\n     */\r\n    public propertyPath: string;\r\n\r\n    /**\r\n     * The value to set in the property\r\n     */\r\n    public value: any;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the property\r\n     * @param propertyPath defines the path of the property to set in the target\r\n     * @param value defines the value to set in the property\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, value: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.propertyPath = propertyPath;\r\n        this.value = value;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Execute the action and set the targetted property to the desired value.\r\n     */\r\n    public execute(): void {\r\n        this._effectiveTarget[this._property] = this.value;\r\n\r\n        if (this._target.markAsDirty) {\r\n            this._target.markAsDirty(this._property);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize({\r\n            name: \"SetValueAction\",\r\n            properties: [\r\n                Action._GetTargetProperty(this._target),\r\n                { name: \"propertyPath\", value: this.propertyPath },\r\n                { name: \"value\", value: Action._SerializeValueAsString(this.value) }\r\n            ]\r\n        }, parent);\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to increment the target value\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class IncrementValueAction extends Action {\r\n    /**\r\n     * The path of the property to increment in the target.\r\n     */\r\n    public propertyPath: string;\r\n\r\n    /**\r\n     * The value we should increment the property by.\r\n     */\r\n    public value: any;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the property\r\n     * @param propertyPath defines the path of the property to increment in the target\r\n     * @param value defines the value value we should increment the property by\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, value: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.propertyPath = propertyPath;\r\n        this.value = value;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n\r\n        if (typeof this._effectiveTarget[this._property] !== \"number\") {\r\n            Logger.Warn(\"Warning: IncrementValueAction can only be used with number values\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute the action and increment the target of the value amount.\r\n     */\r\n    public execute(): void {\r\n        this._effectiveTarget[this._property] += this.value;\r\n\r\n        if (this._target.markAsDirty) {\r\n            this._target.markAsDirty(this._property);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize({\r\n            name: \"IncrementValueAction\",\r\n            properties: [\r\n                Action._GetTargetProperty(this._target),\r\n                { name: \"propertyPath\", value: this.propertyPath },\r\n                { name: \"value\", value: Action._SerializeValueAsString(this.value) }\r\n            ]\r\n        }, parent);\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to start an animation once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class PlayAnimationAction extends Action {\r\n    /**\r\n     * Where the animation should start (animation frame)\r\n     */\r\n    public from: number;\r\n\r\n    /**\r\n     * Where the animation should stop (animation frame)\r\n     */\r\n    public to: number;\r\n\r\n    /**\r\n     * Define if the animation should loop or stop after the first play.\r\n     */\r\n    public loop?: boolean;\r\n\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the target animation or animation name\r\n     * @param from defines from where the animation should start (animation frame)\r\n     * @param end defines where the animation should stop (animation frame)\r\n     * @param loop defines if the animation should loop or stop after the first play\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, from: number, to: number, loop?: boolean, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.from = from;\r\n        this.to = to;\r\n        this.loop = loop;\r\n        this._target = target;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {\r\n    }\r\n\r\n    /**\r\n     * Execute the action and play the animation.\r\n     */\r\n    public execute(): void {\r\n        var scene = this._actionManager.getScene();\r\n        scene.beginAnimation(this._target, this.from, this.to, this.loop);\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize({\r\n            name: \"PlayAnimationAction\",\r\n            properties: [\r\n                Action._GetTargetProperty(this._target),\r\n                { name: \"from\", value: String(this.from) },\r\n                { name: \"to\", value: String(this.to) },\r\n                { name: \"loop\", value: Action._SerializeValueAsString(this.loop) || false }\r\n            ]\r\n        }, parent);\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to stop an animation once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class StopAnimationAction extends Action {\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the target animation or animation name\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this._target = target;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {\r\n    }\r\n\r\n    /**\r\n     * Execute the action and stop the animation.\r\n     */\r\n    public execute(): void {\r\n        var scene = this._actionManager.getScene();\r\n        scene.stopAnimation(this._target);\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize({\r\n            name: \"StopAnimationAction\",\r\n            properties: [Action._GetTargetProperty(this._target)]\r\n        }, parent);\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible that does nothing once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class DoNothingAction extends Action {\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any = 0, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n    }\r\n\r\n    /**\r\n     * Execute the action and do nothing.\r\n     */\r\n    public execute(): void {\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize({\r\n            name: \"DoNothingAction\",\r\n            properties: []\r\n        }, parent);\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to trigger several actions once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class CombineAction extends Action {\r\n    /**\r\n     * The list of aggregated animations to run.\r\n     */\r\n    public children: Action[];\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param children defines the list of aggregated animations to run\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, children: Action[], condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.children = children;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            this.children[index]._actionManager = this._actionManager;\r\n            this.children[index]._prepare();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute the action and executes all the aggregated actions.\r\n     */\r\n    public execute(evt: ActionEvent): void {\r\n        for (var index = 0; index < this.children.length; index++) {\r\n            this.children[index].execute(evt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        var serializationObject = super._serialize({\r\n            name: \"CombineAction\",\r\n            properties: [],\r\n            combine: []\r\n        }, parent);\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            serializationObject.combine.push(this.children[i].serialize(null));\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to run code (external event) once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class ExecuteCodeAction extends Action {\r\n    /**\r\n     * The callback function to run.\r\n     */\r\n    public func: (evt: ActionEvent) => void;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param func defines the callback function to run\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, func: (evt: ActionEvent) => void, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.func = func;\r\n    }\r\n\r\n    /**\r\n     * Execute the action and run the attached code.\r\n     */\r\n    public execute(evt: ActionEvent): void {\r\n        this.func(evt);\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to set the parent property of the target once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class SetParentAction extends Action {\r\n    private _parent: any;\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the target containing the parent property\r\n     * @param parent defines from where the animation should start (animation frame)\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, parent: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this._target = target;\r\n        this._parent = parent;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {\r\n    }\r\n\r\n    /**\r\n     * Execute the action and set the parent property.\r\n     */\r\n    public execute(): void {\r\n        if (this._target.parent === this._parent) {\r\n            return;\r\n        }\r\n\r\n        var invertParentWorldMatrix = this._parent.getWorldMatrix().clone();\r\n        invertParentWorldMatrix.invert();\r\n\r\n        this._target.position = Vector3.TransformCoordinates(this._target.position, invertParentWorldMatrix);\r\n\r\n        this._target.parent = this._parent;\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize({\r\n            name: \"SetParentAction\",\r\n            properties: [\r\n                Action._GetTargetProperty(this._target),\r\n                Action._GetTargetProperty(this._parent),\r\n            ]\r\n        }, parent);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.SetParentAction\"] = SetParentAction;\r\n_TypeStore.RegisteredTypes[\"BABYLON.ExecuteCodeAction\"] = ExecuteCodeAction;\r\n_TypeStore.RegisteredTypes[\"BABYLON.DoNothingAction\"] = DoNothingAction;\r\n_TypeStore.RegisteredTypes[\"BABYLON.StopAnimationAction\"] = StopAnimationAction;\r\n_TypeStore.RegisteredTypes[\"BABYLON.PlayAnimationAction\"] = PlayAnimationAction;\r\n_TypeStore.RegisteredTypes[\"BABYLON.IncrementValueAction\"] = IncrementValueAction;\r\n_TypeStore.RegisteredTypes[\"BABYLON.SetValueAction\"] = SetValueAction;\r\n_TypeStore.RegisteredTypes[\"BABYLON.SetStateAction\"] = SetStateAction;\r\n_TypeStore.RegisteredTypes[\"BABYLON.SetParentAction\"] = SetParentAction;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}