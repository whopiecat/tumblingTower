{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { InputBlock } from '../Input/inputBlock';\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\nimport { PBRClearCoatConfiguration } from '../../../PBR/pbrClearCoatConfiguration';\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\n/**\r\n * Block used to implement the clear coat module of the PBR material\r\n */\n\nvar ClearCoatBlock =\n/** @class */\nfunction (_super) {\n  __extends(ClearCoatBlock, _super);\n  /**\r\n   * Create a new ClearCoatBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function ClearCoatBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n    /**\r\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\r\n     */\n\n\n    _this.remapF0OnInterfaceChange = true;\n    _this._isUnique = true;\n\n    _this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"tintAtDistance\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"tintThickness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n\n    _this.registerOutput(\"clearcoat\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"clearcoat\", _this, NodeMaterialConnectionPointDirection.Output, ClearCoatBlock, \"ClearCoatBlock\"));\n\n    return _this;\n  }\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n\n  ClearCoatBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"clearcoatOut\");\n\n    state._excludeVariableName(\"vClearCoatParams\");\n\n    state._excludeVariableName(\"vClearCoatTintParams\");\n\n    state._excludeVariableName(\"vClearCoatRefractionParams\");\n\n    state._excludeVariableName(\"vClearCoatTangentSpaceParams\");\n  };\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  ClearCoatBlock.prototype.getClassName = function () {\n    return \"ClearCoatBlock\";\n  };\n\n  Object.defineProperty(ClearCoatBlock.prototype, \"intensity\", {\n    /**\r\n     * Gets the intensity input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"roughness\", {\n    /**\r\n     * Gets the roughness input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"indexOfRefraction\", {\n    /**\r\n     * Gets the ior input component\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"normalMapColor\", {\n    /**\r\n     * Gets the bump texture input component\r\n     */\n    get: function () {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"uv\", {\n    /**\r\n     * Gets the uv input component\r\n     */\n    get: function () {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"tintColor\", {\n    /**\r\n     * Gets the tint color input component\r\n     */\n    get: function () {\n      return this._inputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"tintAtDistance\", {\n    /**\r\n     * Gets the tint \"at distance\" input component\r\n     */\n    get: function () {\n      return this._inputs[6];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"tintThickness\", {\n    /**\r\n     * Gets the tint thickness input component\r\n     */\n    get: function () {\n      return this._inputs[7];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"worldTangent\", {\n    /**\r\n     * Gets the world tangent input component\r\n     */\n    get: function () {\n      return this._inputs[8];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"clearcoat\", {\n    /**\r\n     * Gets the clear coat object output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ClearCoatBlock.prototype.autoConfigure = function (material) {\n    if (!this.intensity.isConnected) {\n      var intensityInput = new InputBlock(\"ClearCoat intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      intensityInput.value = 1;\n      intensityInput.output.connectTo(this.intensity);\n    }\n  };\n\n  ClearCoatBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    _super.prototype.prepareDefines.call(this, mesh, nodeMaterial, defines);\n\n    defines.setValue(\"CLEARCOAT\", true);\n    defines.setValue(\"CLEARCOAT_TEXTURE\", false, true);\n    defines.setValue(\"CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\n    defines.setValue(\"CLEARCOAT_TINT\", this.tintColor.isConnected || this.tintThickness.isConnected || this.tintAtDistance.isConnected, true);\n    defines.setValue(\"CLEARCOAT_BUMP\", this.normalMapColor.isConnected, true);\n    defines.setValue(\"CLEARCOAT_DEFAULTIOR\", this.indexOfRefraction.isConnected ? this.indexOfRefraction.connectInputBlock.value === PBRClearCoatConfiguration._DefaultIndexOfRefraction : true, true);\n    defines.setValue(\"CLEARCOAT_REMAP_F0\", this.remapF0OnInterfaceChange, true);\n  };\n\n  ClearCoatBlock.prototype.bind = function (effect, nodeMaterial, mesh, subMesh) {\n    var _a, _b;\n\n    _super.prototype.bind.call(this, effect, nodeMaterial, mesh); // Clear Coat Refraction params\n\n\n    var indexOfRefraction = (_b = (_a = this.indexOfRefraction.connectInputBlock) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    var a = 1 - indexOfRefraction;\n    var b = 1 + indexOfRefraction;\n    var f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\n\n    var eta = 1 / indexOfRefraction;\n    effect.setFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b); // Clear Coat tangent space params\n\n    var mainPBRBlock = this.clearcoat.hasEndpoints ? this.clearcoat.endpoints[0].ownerBlock : null;\n    var perturbedNormalBlock = (mainPBRBlock === null || mainPBRBlock === void 0 ? void 0 : mainPBRBlock.perturbedNormal.isConnected) ? mainPBRBlock.perturbedNormal.connectedPoint.ownerBlock : null;\n\n    if (this._scene._mirroredCameraPosition) {\n      effect.setFloat2(\"vClearCoatTangentSpaceParams\", (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertX) ? 1.0 : -1.0, (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertY) ? 1.0 : -1.0);\n    } else {\n      effect.setFloat2(\"vClearCoatTangentSpaceParams\", (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertX) ? -1.0 : 1.0, (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertY) ? -1.0 : 1.0);\n    }\n  };\n\n  ClearCoatBlock.prototype._generateTBNSpace = function (state, worldPositionVarName, worldNormalVarName) {\n    var code = \"\";\n    var comments = \"//\" + this.name;\n    var worldTangent = this.worldTangent;\n\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\n\n    var tangentReplaceString = {\n      search: /defined\\(TANGENT\\)/g,\n      replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\"\n    };\n\n    if (worldTangent.isConnected) {\n      code += \"vec3 tbnNormal = normalize(\" + worldNormalVarName + \".xyz);\\r\\n\";\n      code += \"vec3 tbnTangent = normalize(\" + worldTangent.associatedVariableName + \".xyz);\\r\\n\";\n      code += \"vec3 tbnBitangent = cross(tbnNormal, tbnTangent);\\r\\n\";\n      code += \"mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\r\\n\";\n    }\n\n    state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\n      replaceStrings: [tangentReplaceString]\n    });\n\n    return code;\n  };\n  /**\r\n   * Gets the main code of the block (fragment side)\r\n   * @param state current state of the node material building\r\n   * @param ccBlock instance of a ClearCoatBlock or null if the code must be generated without an active clear coat module\r\n   * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n   * @param worldPosVarName name of the variable holding the world position\r\n   * @param generateTBNSpace if true, the code needed to create the TBN coordinate space is generated\r\n   * @param vTBNAvailable indicate that the vTBN variable is already existing because it has already been generated by another block (PerturbNormal or Anisotropy)\r\n   * @param worldNormalVarName name of the variable holding the world normal\r\n   * @returns the shader code\r\n   */\n\n\n  ClearCoatBlock.GetCode = function (state, ccBlock, reflectionBlock, worldPosVarName, generateTBNSpace, vTBNAvailable, worldNormalVarName) {\n    var code = \"\";\n    var intensity = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.intensity.isConnected) ? ccBlock.intensity.associatedVariableName : \"1.\";\n    var roughness = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.roughness.isConnected) ? ccBlock.roughness.associatedVariableName : \"0.\";\n    var normalMapColor = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.normalMapColor.isConnected) ? ccBlock.normalMapColor.associatedVariableName : \"vec3(0.)\";\n    var uv = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.uv.isConnected) ? ccBlock.uv.associatedVariableName : \"vec2(0.)\";\n    var tintColor = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.tintColor.isConnected) ? ccBlock.tintColor.associatedVariableName : \"vec3(1.)\";\n    var tintThickness = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.tintThickness.isConnected) ? ccBlock.tintThickness.associatedVariableName : \"1.\";\n    var tintAtDistance = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.tintAtDistance.isConnected) ? ccBlock.tintAtDistance.associatedVariableName : \"1.\";\n    var tintTexture = \"vec4(0.)\";\n\n    if (ccBlock) {\n      state._emitUniformFromString(\"vClearCoatRefractionParams\", \"vec4\");\n\n      state._emitUniformFromString(\"vClearCoatTangentSpaceParams\", \"vec2\");\n    }\n\n    if (generateTBNSpace && ccBlock) {\n      code += ccBlock._generateTBNSpace(state, worldPosVarName, worldNormalVarName);\n      vTBNAvailable = ccBlock.worldTangent.isConnected;\n    }\n\n    code += \"clearcoatOutParams clearcoatOut;\\n\\n        #ifdef CLEARCOAT\\n            vec2 vClearCoatParams = vec2(\" + intensity + \", \" + roughness + \");\\n            vec4 vClearCoatTintParams = vec4(\" + tintColor + \", \" + tintThickness + \");\\n\\n            clearcoatBlock(\\n                \" + worldPosVarName + \".xyz,\\n                geometricNormalW,\\n                viewDirectionW,\\n                vClearCoatParams,\\n                specularEnvironmentR0,\\n            #ifdef CLEARCOAT_TEXTURE\\n                vec2(0.),\\n            #endif\\n            #ifdef CLEARCOAT_TINT\\n                vClearCoatTintParams,\\n                \" + tintAtDistance + \",\\n                vClearCoatRefractionParams,\\n                #ifdef CLEARCOAT_TINT_TEXTURE\\n                    \" + tintTexture + \",\\n                #endif\\n            #endif\\n            #ifdef CLEARCOAT_BUMP\\n                vec2(0., 1.),\\n                vec4(\" + normalMapColor + \", 0.),\\n                \" + uv + \",\\n                #if defined(\" + (vTBNAvailable ? \"TANGENT\" : \"IGNORE\") + \") && defined(NORMAL)\\n                    vTBN,\\n                #else\\n                    vClearCoatTangentSpaceParams,\\n                #endif\\n                #ifdef OBJECTSPACE_NORMALMAP\\n                    normalMatrix,\\n                #endif\\n            #endif\\n            #if defined(FORCENORMALFORWARD) && defined(NORMAL)\\n                faceNormal,\\n            #endif\\n            #ifdef REFLECTION\\n                \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionMicrosurfaceInfosName) + \",\\n                \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionInfosName) + \",\\n                \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.reflectionColor) + \",\\n                vLightingIntensity,\\n                #ifdef \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) + \"\\n                    \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                #else\\n                    \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName) + \",\\n                #endif\\n                #ifndef LODBASEDMICROSFURACE\\n                    #ifdef \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) + \"\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                    #else\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName) + \",\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName) + \",\\n                    #endif\\n                #endif\\n            #endif\\n            #if defined(ENVIRONMENTBRDF) && !defined(\" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) + \")\\n                #ifdef RADIANCEOCCLUSION\\n                    ambientMonochrome,\\n                #endif\\n            #endif\\n                clearcoatOut\\n            );\\n        #else\\n            clearcoatOut.specularEnvironmentR0 = specularEnvironmentR0;\\n        #endif\\r\\n\";\n    return code;\n  };\n\n  ClearCoatBlock.prototype._buildBlock = function (state) {\n    this._scene = state.sharedData.scene;\n\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.bindableBlocks.push(this);\n      state.sharedData.blocksWithDefines.push(this);\n    }\n\n    return this;\n  };\n\n  ClearCoatBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = \"\";\n    codeString += this._codeVariableName + \".remapF0OnInterfaceChange = \" + this.remapF0OnInterfaceChange + \";\\r\\n\";\n    return codeString;\n  };\n\n  ClearCoatBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.remapF0OnInterfaceChange = this.remapF0OnInterfaceChange;\n    return serializationObject;\n  };\n\n  ClearCoatBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    var _a;\n\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.remapF0OnInterfaceChange = (_a = serializationObject.remapF0OnInterfaceChange) !== null && _a !== void 0 ? _a : true;\n  };\n\n  __decorate([editableInPropertyPage(\"Remap F0 on interface change\", PropertyTypeForEdition.Boolean, \"ADVANCED\")], ClearCoatBlock.prototype, \"remapF0OnInterfaceChange\", void 0);\n\n  return ClearCoatBlock;\n}(NodeMaterialBlock);\n\nexport { ClearCoatBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.ClearCoatBlock\"] = ClearCoatBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/PBR/clearCoatBlock.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAT,QAAkC,yBAAlC;AACA,SAAS,qCAAT,QAAsD,mDAAtD;AAEA,SAAsC,oCAAtC,QAAkF,wCAAlF;AACA,SAAS,wBAAT,QAAyC,sCAAzC;AACA,SAAS,UAAT,QAA2B,4BAA3B;AACA,SAAS,UAAT,QAA2B,qBAA3B;AACA,SAAS,uCAAT,QAAwD,+CAAxD;AAWA,SAAS,yBAAT,QAA0C,wCAA1C;AACA,SAAS,sBAAT,EAAiC,sBAAjC,QAA+D,6BAA/D;AAEA;;;;AAGA,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;AAIhC;;;;;;AAIA,WAAA,cAAA,CAAmB,IAAnB,EAA+B;AAA/B,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,wBAAwB,CAAC,QAArC,KAA8C,IADlD;AAmBA;;;;;AAIO,IAAA,KAAA,CAAA,wBAAA,GAAoC,IAApC;AApBH,IAAA,KAAI,CAAC,SAAL,GAAiB,IAAjB;;AAEA,IAAA,KAAI,CAAC,aAAL,CAAmB,WAAnB,EAAgC,qCAAqC,CAAC,KAAtE,EAA6E,KAA7E,EAAoF,wBAAwB,CAAC,QAA7G;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,WAAnB,EAAgC,qCAAqC,CAAC,KAAtE,EAA6E,IAA7E,EAAmF,wBAAwB,CAAC,QAA5G;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,mBAAnB,EAAwC,qCAAqC,CAAC,KAA9E,EAAqF,IAArF,EAA2F,wBAAwB,CAAC,QAApH;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,gBAAnB,EAAqC,qCAAqC,CAAC,MAA3E,EAAmF,IAAnF,EAAyF,wBAAwB,CAAC,QAAlH;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,IAAnB,EAAyB,qCAAqC,CAAC,OAA/D,EAAwE,IAAxE,EAA8E,wBAAwB,CAAC,QAAvG;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,WAAnB,EAAgC,qCAAqC,CAAC,MAAtE,EAA8E,IAA9E,EAAoF,wBAAwB,CAAC,QAA7G;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,gBAAnB,EAAqC,qCAAqC,CAAC,KAA3E,EAAkF,IAAlF,EAAwF,wBAAwB,CAAC,QAAjH;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,eAAnB,EAAoC,qCAAqC,CAAC,KAA1E,EAAiF,IAAjF,EAAuF,wBAAwB,CAAC,QAAhH;;AACA,IAAA,KAAI,CAAC,aAAL,CAAmB,cAAnB,EAAmC,qCAAqC,CAAC,OAAzE,EAAkF,IAAlF;;AAEA,IAAA,KAAI,CAAC,cAAL,CAAoB,WAApB,EAAiC,qCAAqC,CAAC,MAAvE,EAA+E,wBAAwB,CAAC,QAAxG,EACI,IAAI,uCAAJ,CAA4C,WAA5C,EAAyD,KAAzD,EAA+D,oCAAoC,CAAC,MAApG,EAA4G,cAA5G,EAA4H,gBAA5H,CADJ;;;AAEH;AAQD;;;;;;AAIO,EAAA,cAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,KAAlB,EAA+C;AAC3C,IAAA,KAAK,CAAC,oBAAN,CAA2B,cAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,kBAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,sBAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,4BAA3B;;AACA,IAAA,KAAK,CAAC,oBAAN,CAA2B,8BAA3B;AACH,GANM;AAQP;;;;;;AAIO,EAAA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,gBAAP;AACH,GAFM;;AAOP,EAAA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFmB;qBAAA;;AAAA,GAApB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFmB;qBAAA;;AAAA,GAApB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,mBAAX,EAA4B;AAH5B;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAF2B;qBAAA;;AAAA,GAA5B;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,gBAAX,EAAyB;AAHzB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFwB;qBAAA;;AAAA,GAAzB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,IAAX,EAAa;AAHb;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFY;qBAAA;;AAAA,GAAb;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFmB;qBAAA;;AAAA,GAApB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,gBAAX,EAAyB;AAHzB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFwB;qBAAA;;AAAA,GAAzB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;AAHxB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFuB;qBAAA;;AAAA,GAAxB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,cAAX,EAAuB;AAHvB;;;SAGA,YAAA;AACI,aAAO,KAAK,OAAL,CAAa,CAAb,CAAP;AACH,KAFsB;qBAAA;;AAAA,GAAvB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,cAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA,YAAA;AACI,aAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACH,KAFmB;qBAAA;;AAAA,GAApB;;AAIO,EAAA,cAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,QAArB,EAA2C;AACvC,QAAI,CAAC,KAAK,SAAL,CAAe,WAApB,EAAiC;AAC7B,UAAI,cAAc,GAAG,IAAI,UAAJ,CAAe,qBAAf,EAAsC,wBAAwB,CAAC,QAA/D,EAAyE,qCAAqC,CAAC,KAA/G,CAArB;AACA,MAAA,cAAc,CAAC,KAAf,GAAuB,CAAvB;AACA,MAAA,cAAc,CAAC,MAAf,CAAsB,SAAtB,CAAgC,KAAK,SAArC;AACH;AACJ,GANM;;AAQA,EAAA,cAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,IAAtB,EAA0C,YAA1C,EAAsE,OAAtE,EAAkG;AAC9F,IAAA,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB,EAAqB,IAArB,EAA2B,YAA3B,EAAyC,OAAzC;;AAEA,IAAA,OAAO,CAAC,QAAR,CAAiB,WAAjB,EAA8B,IAA9B;AACA,IAAA,OAAO,CAAC,QAAR,CAAiB,mBAAjB,EAAsC,KAAtC,EAA6C,IAA7C;AACA,IAAA,OAAO,CAAC,QAAR,CAAiB,0CAAjB,EAA6D,IAA7D,EAAmE,IAAnE;AACA,IAAA,OAAO,CAAC,QAAR,CAAiB,gBAAjB,EAAmC,KAAK,SAAL,CAAe,WAAf,IAA8B,KAAK,aAAL,CAAmB,WAAjD,IAAgE,KAAK,cAAL,CAAoB,WAAvH,EAAoI,IAApI;AACA,IAAA,OAAO,CAAC,QAAR,CAAiB,gBAAjB,EAAmC,KAAK,cAAL,CAAoB,WAAvD,EAAoE,IAApE;AACA,IAAA,OAAO,CAAC,QAAR,CAAiB,sBAAjB,EAAyC,KAAK,iBAAL,CAAuB,WAAvB,GAAqC,KAAK,iBAAL,CAAuB,iBAAvB,CAA0C,KAA1C,KAAoD,yBAAyB,CAAC,yBAAnH,GAA+I,IAAxL,EAA8L,IAA9L;AACA,IAAA,OAAO,CAAC,QAAR,CAAiB,oBAAjB,EAAuC,KAAK,wBAA5C,EAAsE,IAAtE;AACH,GAVM;;AAYA,EAAA,cAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,MAAZ,EAA4B,YAA5B,EAAwD,IAAxD,EAAqE,OAArE,EAAsF;;;AAClF,IAAA,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV,EAAW,MAAX,EAAmB,YAAnB,EAAiC,IAAjC,EADkF,CAGlF;;;AACA,QAAM,iBAAiB,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAG,KAAK,iBAAL,CAAuB,iBAA1B,MAA2C,IAA3C,IAA2C,EAAA,KAAA,KAAA,CAA3C,GAA2C,KAAA,CAA3C,GAA2C,EAAA,CAAE,KAA7C,MAAkD,IAAlD,IAAkD,EAAA,KAAA,KAAA,CAAlD,GAAkD,EAAlD,GAAsD,yBAAyB,CAAC,yBAAvG;AAEA,QAAM,CAAC,GAAG,IAAI,iBAAd;AACA,QAAM,CAAC,GAAG,IAAI,iBAAd;AACA,QAAM,EAAE,GAAG,IAAI,CAAC,GAAL,CAAU,CAAC,CAAD,GAAK,CAAf,EAAmB,CAAnB,CAAX,CARkF,CAQhD;;AAClC,QAAM,GAAG,GAAG,IAAI,iBAAhB;AAEA,IAAA,MAAM,CAAC,SAAP,CAAiB,4BAAjB,EAA+C,EAA/C,EAAmD,GAAnD,EAAwD,CAAxD,EAA2D,CAA3D,EAXkF,CAalF;;AACA,QAAM,YAAY,GAAG,KAAK,SAAL,CAAe,YAAf,GAA8B,KAAK,SAAL,CAAe,SAAf,CAAyB,CAAzB,EAA4B,UAA1D,GAAoG,IAAzH;AACA,QAAM,oBAAoB,GAAG,CAAA,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAA,YAAY,CAAE,eAAd,CAA8B,WAA9B,IAA4C,YAAY,CAAC,eAAb,CAA6B,cAA7B,CAA6C,UAAzF,GAA4H,IAAzJ;;AAEA,QAAI,KAAK,MAAL,CAAY,uBAAhB,EAAyC;AACrC,MAAA,MAAM,CAAC,SAAP,CAAiB,8BAAjB,EAAiD,CAAA,oBAAoB,KAAA,IAApB,IAAA,oBAAoB,KAAA,KAAA,CAApB,GAAoB,KAAA,CAApB,GAAA,oBAAoB,CAAE,OAAtB,IAAgC,GAAhC,GAAsC,CAAC,GAAxF,EAA6F,CAAA,oBAAoB,KAAA,IAApB,IAAA,oBAAoB,KAAA,KAAA,CAApB,GAAoB,KAAA,CAApB,GAAA,oBAAoB,CAAE,OAAtB,IAAgC,GAAhC,GAAsC,CAAC,GAApI;AACH,KAFD,MAEO;AACH,MAAA,MAAM,CAAC,SAAP,CAAiB,8BAAjB,EAAiD,CAAA,oBAAoB,KAAA,IAApB,IAAA,oBAAoB,KAAA,KAAA,CAApB,GAAoB,KAAA,CAApB,GAAA,oBAAoB,CAAE,OAAtB,IAAgC,CAAC,GAAjC,GAAuC,GAAxF,EAA6F,CAAA,oBAAoB,KAAA,IAApB,IAAA,oBAAoB,KAAA,KAAA,CAApB,GAAoB,KAAA,CAApB,GAAA,oBAAoB,CAAE,OAAtB,IAAgC,CAAC,GAAjC,GAAuC,GAApI;AACH;AACJ,GAtBM;;AAwBC,EAAA,cAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,KAA1B,EAAyD,oBAAzD,EAAuF,kBAAvF,EAAiH;AAC7G,QAAI,IAAI,GAAG,EAAX;AAEA,QAAI,QAAQ,GAAG,OAAK,KAAK,IAAzB;AACA,QAAI,YAAY,GAAG,KAAK,YAAxB;;AAEA,IAAA,KAAK,CAAC,cAAN,CAAqB,aAArB,EAAoC,iDAApC;;AAEA,QAAI,oBAAoB,GAAG;AAAE,MAAA,MAAM,EAAE,qBAAV;AAAiC,MAAA,OAAO,EAAE,YAAY,CAAC,WAAb,GAA2B,kBAA3B,GAAgD;AAA1F,KAA3B;;AAEA,QAAI,YAAY,CAAC,WAAjB,EAA8B;AAC1B,MAAA,IAAI,IAAI,gCAA8B,kBAA9B,GAAgD,YAAxD;AACA,MAAA,IAAI,IAAI,iCAA+B,YAAY,CAAC,sBAA5C,GAAkE,YAA1E;AACA,MAAA,IAAI,IAAI,uDAAR;AACA,MAAA,IAAI,IAAI,4DAAR;AACH;;AAED,IAAA,KAAK,CAAC,wBAAN,CAA+B,2BAA/B,EAA4D,QAA5D,EAAsE;AAClE,MAAA,cAAc,EAAE,CACZ,oBADY;AADkD,KAAtE;;AAMA,WAAO,IAAP;AACH,GAxBO;AA0BR;;;;;;;;;;;;;AAWc,EAAA,cAAA,CAAA,OAAA,GAAd,UAAsB,KAAtB,EAAqD,OAArD,EAAwF,eAAxF,EAAoI,eAApI,EAA6J,gBAA7J,EAAwL,aAAxL,EAAgN,kBAAhN,EAA0O;AACtO,QAAI,IAAI,GAAG,EAAX;AAEA,QAAM,SAAS,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,SAAT,CAAmB,WAAnB,IAAiC,OAAO,CAAC,SAAR,CAAkB,sBAAnD,GAA4E,IAA9F;AACA,QAAM,SAAS,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,SAAT,CAAmB,WAAnB,IAAiC,OAAO,CAAC,SAAR,CAAkB,sBAAnD,GAA4E,IAA9F;AACA,QAAM,cAAc,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,cAAT,CAAwB,WAAxB,IAAsC,OAAO,CAAC,cAAR,CAAuB,sBAA7D,GAAsF,UAA7G;AACA,QAAM,EAAE,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,EAAT,CAAY,WAAZ,IAA0B,OAAO,CAAC,EAAR,CAAW,sBAArC,GAA8D,UAAzE;AAEA,QAAM,SAAS,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,SAAT,CAAmB,WAAnB,IAAiC,OAAO,CAAC,SAAR,CAAkB,sBAAnD,GAA4E,UAA9F;AACA,QAAM,aAAa,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,aAAT,CAAuB,WAAvB,IAAqC,OAAO,CAAC,aAAR,CAAsB,sBAA3D,GAAoF,IAA1G;AACA,QAAM,cAAc,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,cAAT,CAAwB,WAAxB,IAAsC,OAAO,CAAC,cAAR,CAAuB,sBAA7D,GAAsF,IAA7G;AACA,QAAM,WAAW,GAAG,UAApB;;AAEA,QAAI,OAAJ,EAAa;AACT,MAAA,KAAK,CAAC,sBAAN,CAA6B,4BAA7B,EAA2D,MAA3D;;AACA,MAAA,KAAK,CAAC,sBAAN,CAA6B,8BAA7B,EAA6D,MAA7D;AACH;;AAED,QAAI,gBAAgB,IAAI,OAAxB,EAAiC;AAC7B,MAAA,IAAI,IAAI,OAAO,CAAC,iBAAR,CAA0B,KAA1B,EAAiC,eAAjC,EAAkD,kBAAlD,CAAR;AACA,MAAA,aAAa,GAAG,OAAO,CAAC,YAAR,CAAqB,WAArC;AACH;;AAED,IAAA,IAAI,IAAI,4GAG2B,SAH3B,GAGoC,IAHpC,GAGyC,SAHzC,GAGkD,mDAHlD,GAI+B,SAJ/B,GAIwC,IAJxC,GAI6C,aAJ7C,GAI0D,qDAJ1D,GAOE,eAPF,GAOiB,uUAPjB,GAiBE,cAjBF,GAiBgB,qHAjBhB,GAoBM,WApBN,GAoBiB,wIApBjB,GAyBO,cAzBP,GAyBqB,0BAzBrB,GA0BE,EA1BF,GA0BI,iCA1BJ,IA2Bc,aAAa,GAAG,SAAH,GAAe,QA3B1C,IA2BkD,kbA3BlD,IAwCE,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,iCAxCnB,IAwCoD,qBAxCpD,IAyCE,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,qBAzCnB,IAyCwC,qBAzCxC,IA0CE,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,eA1CnB,IA0CkC,iEA1ClC,IA4CS,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,aA5C1B,IA4CuC,wBA5CvC,IA6CM,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,gBA7CvB,IA6CuC,gDA7CvC,IA+CM,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,cA/CvB,IA+CqC,sGA/CrC,IAkDa,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,aAlD9B,IAkD2C,4BAlD3C,IAmDU,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,gBAnD3B,IAmD2C,6BAnD3C,IAoDU,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,gBApD3B,IAoD2C,wDApD3C,IAsDU,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,cAtD3B,IAsDyC,6BAtDzC,IAuDU,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,cAvD3B,IAuDyC,kIAvDzC,IA2DuC,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,CAAE,iBA3DxD,IA2DyE,2RA3DjF;AAsEA,WAAO,IAAP;AACH,GA9Fa;;AAgGJ,EAAA,cAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,KAAtB,EAAmD;AAC/C,SAAK,MAAL,GAAc,KAAK,CAAC,UAAN,CAAiB,KAA/B;;AAEA,QAAI,KAAK,CAAC,MAAN,KAAiB,wBAAwB,CAAC,QAA9C,EAAwD;AACpD,MAAA,KAAK,CAAC,UAAN,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,IAArC;AACA,MAAA,KAAK,CAAC,UAAN,CAAiB,iBAAjB,CAAmC,IAAnC,CAAwC,IAAxC;AACH;;AAED,WAAO,IAAP;AACH,GATS;;AAWA,EAAA,cAAA,CAAA,SAAA,CAAA,mBAAA,GAAV,YAAA;AACI,QAAI,UAAU,GAAW,EAAzB;AAEA,IAAA,UAAU,IAAO,KAAK,iBAAL,GAAsB,8BAAtB,GAAqD,KAAK,wBAA1D,GAAkF,OAAnG;AAEA,WAAO,UAAP;AACH,GANS;;AAQH,EAAA,cAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACI,QAAI,mBAAmB,GAAG,MAAA,CAAA,SAAA,CAAM,SAAN,CAAe,IAAf,CAAe,IAAf,CAA1B;;AAEA,IAAA,mBAAmB,CAAC,wBAApB,GAA+C,KAAK,wBAApD;AAEA,WAAO,mBAAP;AACH,GANM;;AAQA,EAAA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,mBAApB,EAA8C,KAA9C,EAA4D,OAA5D,EAA2E;;;AACvE,IAAA,MAAA,CAAA,SAAA,CAAM,YAAN,CAAkB,IAAlB,CAAkB,IAAlB,EAAmB,mBAAnB,EAAwC,KAAxC,EAA+C,OAA/C;;AAEA,SAAK,wBAAL,GAA6B,CAAA,EAAA,GAAG,mBAAmB,CAAC,wBAAvB,MAA+C,IAA/C,IAA+C,EAAA,KAAA,KAAA,CAA/C,GAA+C,EAA/C,GAAmD,IAAhF;AACH,GAJM;;AAxSP,EAAA,UAAA,CAAA,CADC,sBAAsB,CAAC,8BAAD,EAAiC,sBAAsB,CAAC,OAAxD,EAAiE,UAAjE,CACvB,CAAA,E,wBAAA,E,0BAAA,E,KAAgD,CAAhD,CAAA;;AA6SJ,SAAA,cAAA;AAAC,CA5UD,CAAoC,iBAApC,CAAA;;SAAa,c;AA8Ub,UAAU,CAAC,eAAX,CAA2B,wBAA3B,IAAuD,cAAvD","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\nimport { InputBlock } from '../Input/inputBlock';\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';\r\nimport { AbstractMesh } from '../../../../Meshes/abstractMesh';\r\nimport { ReflectionBlock } from './reflectionBlock';\r\nimport { Scene } from '../../../../scene';\r\nimport { Nullable } from '../../../../types';\r\nimport { Mesh } from '../../../../Meshes/mesh';\r\nimport { SubMesh } from '../../../../Meshes/subMesh';\r\nimport { Effect } from '../../../effect';\r\nimport { PBRMetallicRoughnessBlock } from './pbrMetallicRoughnessBlock';\r\nimport { PerturbNormalBlock } from '../Fragment/perturbNormalBlock';\r\nimport { PBRClearCoatConfiguration } from '../../../PBR/pbrClearCoatConfiguration';\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\n\r\n/**\r\n * Block used to implement the clear coat module of the PBR material\r\n */\r\nexport class ClearCoatBlock extends NodeMaterialBlock {\r\n\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Create a new ClearCoatBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"tintAtDistance\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"tintThickness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n\r\n        this.registerOutput(\"clearcoat\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"clearcoat\", this, NodeMaterialConnectionPointDirection.Output, ClearCoatBlock, \"ClearCoatBlock\"));\r\n    }\r\n\r\n    /**\r\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\r\n     */\r\n    @editableInPropertyPage(\"Remap F0 on interface change\", PropertyTypeForEdition.Boolean, \"ADVANCED\")\r\n    public remapF0OnInterfaceChange: boolean = true;\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"clearcoatOut\");\r\n        state._excludeVariableName(\"vClearCoatParams\");\r\n        state._excludeVariableName(\"vClearCoatTintParams\");\r\n        state._excludeVariableName(\"vClearCoatRefractionParams\");\r\n        state._excludeVariableName(\"vClearCoatTangentSpaceParams\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ClearCoatBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the intensity input component\r\n     */\r\n    public get intensity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the roughness input component\r\n     */\r\n    public get roughness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the ior input component\r\n     */\r\n    public get indexOfRefraction(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the bump texture input component\r\n     */\r\n    public get normalMapColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the uv input component\r\n     */\r\n    public get uv(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the tint color input component\r\n     */\r\n    public get tintColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the tint \"at distance\" input component\r\n     */\r\n    public get tintAtDistance(): NodeMaterialConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the tint thickness input component\r\n     */\r\n    public get tintThickness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the world tangent input component\r\n     */\r\n    public get worldTangent(): NodeMaterialConnectionPoint {\r\n        return this._inputs[8];\r\n    }\r\n\r\n    /**\r\n     * Gets the clear coat object output component\r\n     */\r\n    public get clearcoat(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.intensity.isConnected) {\r\n            let intensityInput = new InputBlock(\"ClearCoat intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\r\n            intensityInput.value = 1;\r\n            intensityInput.output.connectTo(this.intensity);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        super.prepareDefines(mesh, nodeMaterial, defines);\r\n\r\n        defines.setValue(\"CLEARCOAT\", true);\r\n        defines.setValue(\"CLEARCOAT_TEXTURE\", false, true);\r\n        defines.setValue(\"CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\r\n        defines.setValue(\"CLEARCOAT_TINT\", this.tintColor.isConnected || this.tintThickness.isConnected || this.tintAtDistance.isConnected, true);\r\n        defines.setValue(\"CLEARCOAT_BUMP\", this.normalMapColor.isConnected, true);\r\n        defines.setValue(\"CLEARCOAT_DEFAULTIOR\", this.indexOfRefraction.isConnected ? this.indexOfRefraction.connectInputBlock!.value === PBRClearCoatConfiguration._DefaultIndexOfRefraction : true, true);\r\n        defines.setValue(\"CLEARCOAT_REMAP_F0\", this.remapF0OnInterfaceChange, true);\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh, subMesh?: SubMesh) {\r\n        super.bind(effect, nodeMaterial, mesh);\r\n\r\n        // Clear Coat Refraction params\r\n        const indexOfRefraction = this.indexOfRefraction.connectInputBlock?.value ?? PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n\r\n        const a = 1 - indexOfRefraction;\r\n        const b = 1 + indexOfRefraction;\r\n        const f0 = Math.pow((-a / b), 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\r\n        const eta = 1 / indexOfRefraction;\r\n\r\n        effect.setFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\r\n\r\n        // Clear Coat tangent space params\r\n        const mainPBRBlock = this.clearcoat.hasEndpoints ? this.clearcoat.endpoints[0].ownerBlock as PBRMetallicRoughnessBlock : null;\r\n        const perturbedNormalBlock = mainPBRBlock?.perturbedNormal.isConnected ? mainPBRBlock.perturbedNormal.connectedPoint!.ownerBlock as PerturbNormalBlock : null;\r\n\r\n        if (this._scene._mirroredCameraPosition) {\r\n            effect.setFloat2(\"vClearCoatTangentSpaceParams\", perturbedNormalBlock?.invertX ? 1.0 : -1.0, perturbedNormalBlock?.invertY ? 1.0 : -1.0);\r\n        } else {\r\n            effect.setFloat2(\"vClearCoatTangentSpaceParams\", perturbedNormalBlock?.invertX ? -1.0 : 1.0, perturbedNormalBlock?.invertY ? -1.0 : 1.0);\r\n        }\r\n    }\r\n\r\n    private _generateTBNSpace(state: NodeMaterialBuildState, worldPositionVarName: string, worldNormalVarName: string) {\r\n        let code = \"\";\r\n\r\n        let comments = `//${this.name}`;\r\n        let worldTangent = this.worldTangent;\r\n\r\n        state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\r\n\r\n        let tangentReplaceString = { search: /defined\\(TANGENT\\)/g, replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\" };\r\n\r\n        if (worldTangent.isConnected) {\r\n            code += `vec3 tbnNormal = normalize(${worldNormalVarName}.xyz);\\r\\n`;\r\n            code += `vec3 tbnTangent = normalize(${worldTangent.associatedVariableName}.xyz);\\r\\n`;\r\n            code += `vec3 tbnBitangent = cross(tbnNormal, tbnTangent);\\r\\n`;\r\n            code += `mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\r\\n`;\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\r\n            replaceStrings: [\r\n                tangentReplaceString,\r\n            ]\r\n        });\r\n\r\n        return code;\r\n    }\r\n\r\n    /**\r\n     * Gets the main code of the block (fragment side)\r\n     * @param state current state of the node material building\r\n     * @param ccBlock instance of a ClearCoatBlock or null if the code must be generated without an active clear coat module\r\n     * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n     * @param worldPosVarName name of the variable holding the world position\r\n     * @param generateTBNSpace if true, the code needed to create the TBN coordinate space is generated\r\n     * @param vTBNAvailable indicate that the vTBN variable is already existing because it has already been generated by another block (PerturbNormal or Anisotropy)\r\n     * @param worldNormalVarName name of the variable holding the world normal\r\n     * @returns the shader code\r\n     */\r\n    public static GetCode(state: NodeMaterialBuildState, ccBlock: Nullable<ClearCoatBlock>, reflectionBlock: Nullable<ReflectionBlock>, worldPosVarName: string, generateTBNSpace: boolean, vTBNAvailable: boolean, worldNormalVarName: string): string {\r\n        let code = \"\";\r\n\r\n        const intensity = ccBlock?.intensity.isConnected ? ccBlock.intensity.associatedVariableName : \"1.\";\r\n        const roughness = ccBlock?.roughness.isConnected ? ccBlock.roughness.associatedVariableName : \"0.\";\r\n        const normalMapColor = ccBlock?.normalMapColor.isConnected ? ccBlock.normalMapColor.associatedVariableName : \"vec3(0.)\";\r\n        const uv = ccBlock?.uv.isConnected ? ccBlock.uv.associatedVariableName : \"vec2(0.)\";\r\n\r\n        const tintColor = ccBlock?.tintColor.isConnected ? ccBlock.tintColor.associatedVariableName : \"vec3(1.)\";\r\n        const tintThickness = ccBlock?.tintThickness.isConnected ? ccBlock.tintThickness.associatedVariableName : \"1.\";\r\n        const tintAtDistance = ccBlock?.tintAtDistance.isConnected ? ccBlock.tintAtDistance.associatedVariableName : \"1.\";\r\n        const tintTexture = \"vec4(0.)\";\r\n\r\n        if (ccBlock) {\r\n            state._emitUniformFromString(\"vClearCoatRefractionParams\", \"vec4\");\r\n            state._emitUniformFromString(\"vClearCoatTangentSpaceParams\", \"vec2\");\r\n        }\r\n\r\n        if (generateTBNSpace && ccBlock) {\r\n            code += ccBlock._generateTBNSpace(state, worldPosVarName, worldNormalVarName);\r\n            vTBNAvailable = ccBlock.worldTangent.isConnected;\r\n        }\r\n\r\n        code += `clearcoatOutParams clearcoatOut;\r\n\r\n        #ifdef CLEARCOAT\r\n            vec2 vClearCoatParams = vec2(${intensity}, ${roughness});\r\n            vec4 vClearCoatTintParams = vec4(${tintColor}, ${tintThickness});\r\n\r\n            clearcoatBlock(\r\n                ${worldPosVarName}.xyz,\r\n                geometricNormalW,\r\n                viewDirectionW,\r\n                vClearCoatParams,\r\n                specularEnvironmentR0,\r\n            #ifdef CLEARCOAT_TEXTURE\r\n                vec2(0.),\r\n            #endif\r\n            #ifdef CLEARCOAT_TINT\r\n                vClearCoatTintParams,\r\n                ${tintAtDistance},\r\n                vClearCoatRefractionParams,\r\n                #ifdef CLEARCOAT_TINT_TEXTURE\r\n                    ${tintTexture},\r\n                #endif\r\n            #endif\r\n            #ifdef CLEARCOAT_BUMP\r\n                vec2(0., 1.),\r\n                vec4(${normalMapColor}, 0.),\r\n                ${uv},\r\n                #if defined(${vTBNAvailable ? \"TANGENT\" : \"IGNORE\"}) && defined(NORMAL)\r\n                    vTBN,\r\n                #else\r\n                    vClearCoatTangentSpaceParams,\r\n                #endif\r\n                #ifdef OBJECTSPACE_NORMALMAP\r\n                    normalMatrix,\r\n                #endif\r\n            #endif\r\n            #if defined(FORCENORMALFORWARD) && defined(NORMAL)\r\n                faceNormal,\r\n            #endif\r\n            #ifdef REFLECTION\r\n                ${reflectionBlock?._vReflectionMicrosurfaceInfosName},\r\n                ${reflectionBlock?._vReflectionInfosName},\r\n                ${reflectionBlock?.reflectionColor},\r\n                vLightingIntensity,\r\n                #ifdef ${reflectionBlock?._define3DName}\r\n                    ${reflectionBlock?._cubeSamplerName},\r\n                #else\r\n                    ${reflectionBlock?._2DSamplerName},\r\n                #endif\r\n                #ifndef LODBASEDMICROSFURACE\r\n                    #ifdef ${reflectionBlock?._define3DName}\r\n                        ${reflectionBlock?._cubeSamplerName},\r\n                        ${reflectionBlock?._cubeSamplerName},\r\n                    #else\r\n                        ${reflectionBlock?._2DSamplerName},\r\n                        ${reflectionBlock?._2DSamplerName},\r\n                    #endif\r\n                #endif\r\n            #endif\r\n            #if defined(ENVIRONMENTBRDF) && !defined(${reflectionBlock?._defineSkyboxName})\r\n                #ifdef RADIANCEOCCLUSION\r\n                    ambientMonochrome,\r\n                #endif\r\n            #endif\r\n                clearcoatOut\r\n            );\r\n        #else\r\n            clearcoatOut.specularEnvironmentR0 = specularEnvironmentR0;\r\n        #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        this._scene = state.sharedData.scene;\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.bindableBlocks.push(this);\r\n            state.sharedData.blocksWithDefines.push(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString: string = \"\";\r\n\r\n        codeString += `${this._codeVariableName}.remapF0OnInterfaceChange = ${this.remapF0OnInterfaceChange};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        let serializationObject = super.serialize();\r\n\r\n        serializationObject.remapF0OnInterfaceChange = this.remapF0OnInterfaceChange;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.remapF0OnInterfaceChange = serializationObject.remapF0OnInterfaceChange ?? true;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ClearCoatBlock\"] = ClearCoatBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}