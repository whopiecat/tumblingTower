{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager\";\nimport { Mesh } from \"../../Meshes/mesh\";\nimport { Quaternion } from \"../../Maths/math.vector\";\n/**\r\n * The motion controller class for oculus touch (quest, rift).\r\n * This class supports legacy mapping as well the standard xr mapping\r\n */\n\nvar WebXROculusTouchMotionController =\n/** @class */\nfunction (_super) {\n  __extends(WebXROculusTouchMotionController, _super);\n\n  function WebXROculusTouchMotionController(scene, gamepadObject, handedness, legacyMapping, _forceLegacyControllers) {\n    if (legacyMapping === void 0) {\n      legacyMapping = false;\n    }\n\n    if (_forceLegacyControllers === void 0) {\n      _forceLegacyControllers = false;\n    }\n\n    var _this = _super.call(this, scene, OculusTouchLayouts[handedness], gamepadObject, handedness) || this;\n\n    _this._forceLegacyControllers = _forceLegacyControllers;\n    _this.profileId = \"oculus-touch\";\n    return _this;\n  }\n\n  WebXROculusTouchMotionController.prototype._getFilenameAndPath = function () {\n    var filename = \"\";\n\n    if (this.handedness === \"left\") {\n      filename = WebXROculusTouchMotionController.MODEL_LEFT_FILENAME;\n    } else {\n      // Right is the default if no hand is specified\n      filename = WebXROculusTouchMotionController.MODEL_RIGHT_FILENAME;\n    }\n\n    var path = this._isQuest() ? WebXROculusTouchMotionController.QUEST_MODEL_BASE_URL : WebXROculusTouchMotionController.MODEL_BASE_URL;\n    return {\n      filename: filename,\n      path: path\n    };\n  };\n\n  WebXROculusTouchMotionController.prototype._getModelLoadingConstraints = function () {\n    return true;\n  };\n\n  WebXROculusTouchMotionController.prototype._processLoadedModel = function (_meshes) {\n    var _this = this;\n\n    var isQuest = this._isQuest();\n\n    var triggerDirection = this.handedness === \"right\" ? -1 : 1;\n    this.getComponentIds().forEach(function (id) {\n      var comp = id && _this.getComponent(id);\n\n      if (comp) {\n        comp.onButtonStateChangedObservable.add(function (component) {\n          if (!_this.rootMesh || _this.disableAnimation) {\n            return;\n          }\n\n          switch (id) {\n            case \"xr-standard-trigger\":\n              // index trigger\n              if (!isQuest) {\n                _this._modelRootNode.getChildren()[3].rotation.x = -component.value * 0.2;\n                _this._modelRootNode.getChildren()[3].position.y = -component.value * 0.005;\n                _this._modelRootNode.getChildren()[3].position.z = -component.value * 0.005;\n              }\n\n              return;\n\n            case \"xr-standard-squeeze\":\n              // secondary trigger\n              if (!isQuest) {\n                _this._modelRootNode.getChildren()[4].position.x = triggerDirection * component.value * 0.0035;\n              }\n\n              return;\n\n            case \"xr-standard-thumbstick\":\n              // thumbstick\n              return;\n\n            case \"a-button\":\n            case \"x-button\":\n              if (!isQuest) {\n                if (component.pressed) {\n                  _this._modelRootNode.getChildren()[1].position.y = -0.001;\n                } else {\n                  _this._modelRootNode.getChildren()[1].position.y = 0;\n                }\n              }\n\n              return;\n\n            case \"b-button\":\n            case \"y-button\":\n              if (!isQuest) {\n                if (component.pressed) {\n                  _this._modelRootNode.getChildren()[2].position.y = -0.001;\n                } else {\n                  _this._modelRootNode.getChildren()[2].position.y = 0;\n                }\n              }\n\n              return;\n          }\n        }, undefined, true);\n      }\n    });\n  };\n\n  WebXROculusTouchMotionController.prototype._setRootMesh = function (meshes) {\n    this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n\n    if (!this.scene.useRightHandedSystem) {\n      this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n    }\n\n    meshes.forEach(function (mesh) {\n      mesh.isPickable = false;\n    });\n\n    if (this._isQuest()) {\n      this._modelRootNode = meshes[0];\n    } else {\n      this._modelRootNode = meshes[1];\n      this.rootMesh.position.y = 0.034;\n      this.rootMesh.position.z = 0.052;\n    }\n\n    this._modelRootNode.parent = this.rootMesh;\n  };\n\n  WebXROculusTouchMotionController.prototype._updateModel = function () {// no-op. model is updated using observables.\n  };\n  /**\r\n   * Is this the new type of oculus touch. At the moment both have the same profile and it is impossible to differentiate\r\n   * between the touch and touch 2.\r\n   */\n\n\n  WebXROculusTouchMotionController.prototype._isQuest = function () {\n    // this is SADLY the only way to currently check. Until proper profiles will be available.\n    return !!navigator.userAgent.match(/Quest/gi) && !this._forceLegacyControllers;\n  };\n  /**\r\n   * The base url used to load the left and right controller models\r\n   */\n\n\n  WebXROculusTouchMotionController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculus/\";\n  /**\r\n   * The name of the left controller model file\r\n   */\n\n  WebXROculusTouchMotionController.MODEL_LEFT_FILENAME = \"left.babylon\";\n  /**\r\n   * The name of the right controller model file\r\n   */\n\n  WebXROculusTouchMotionController.MODEL_RIGHT_FILENAME = \"right.babylon\";\n  /**\r\n   * Base Url for the Quest controller model.\r\n   */\n\n  WebXROculusTouchMotionController.QUEST_MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculusQuest/\";\n  return WebXROculusTouchMotionController;\n}(WebXRAbstractMotionController);\n\nexport { WebXROculusTouchMotionController }; // register the profile\n\nWebXRMotionControllerManager.RegisterController(\"oculus-touch\", function (xrInput, scene) {\n  return new WebXROculusTouchMotionController(scene, xrInput.gamepad, xrInput.handedness);\n});\nWebXRMotionControllerManager.RegisterController(\"oculus-touch-legacy\", function (xrInput, scene) {\n  return new WebXROculusTouchMotionController(scene, xrInput.gamepad, xrInput.handedness, true);\n});\nvar OculusTouchLayouts = {\n  left: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {}\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {}\n      },\n      \"x-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 4\n        },\n        rootNodeName: \"x_button\",\n        visualResponses: {}\n      },\n      \"y-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 5\n        },\n        rootNodeName: \"y_button\",\n        visualResponses: {}\n      },\n      thumbrest: {\n        type: \"button\",\n        gamepadIndices: {\n          button: 6\n        },\n        rootNodeName: \"thumbrest\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"oculus-touch-v2-left\",\n    assetPath: \"left.glb\"\n  },\n  right: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {}\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {}\n      },\n      \"a-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 4\n        },\n        rootNodeName: \"a_button\",\n        visualResponses: {}\n      },\n      \"b-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 5\n        },\n        rootNodeName: \"b_button\",\n        visualResponses: {}\n      },\n      thumbrest: {\n        type: \"button\",\n        gamepadIndices: {\n          button: 6\n        },\n        rootNodeName: \"thumbrest\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"oculus-touch-v2-right\",\n    assetPath: \"right.glb\"\n  }\n};","map":{"version":3,"sources":["../../../../sourceES6/core/XR/motionController/webXROculusTouchMotionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebXRAbstractMotionController, IMinimalMotionControllerObject, MotionControllerHandedness, IMotionControllerLayoutMap } from \"./webXRAbstractMotionController\";\r\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\n\r\n/**\r\n * The motion controller class for oculus touch (quest, rift).\r\n * This class supports legacy mapping as well the standard xr mapping\r\n */\r\nexport class WebXROculusTouchMotionController extends WebXRAbstractMotionController {\r\n    private _modelRootNode: AbstractMesh;\r\n\r\n    /**\r\n     * The base url used to load the left and right controller models\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/oculus/\";\r\n    /**\r\n     * The name of the left controller model file\r\n     */\r\n    public static MODEL_LEFT_FILENAME: string = \"left.babylon\";\r\n    /**\r\n     * The name of the right controller model file\r\n     */\r\n    public static MODEL_RIGHT_FILENAME: string = \"right.babylon\";\r\n    /**\r\n     * Base Url for the Quest controller model.\r\n     */\r\n    public static QUEST_MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/oculusQuest/\";\r\n\r\n    public profileId = \"oculus-touch\";\r\n\r\n    constructor(scene: Scene, gamepadObject: IMinimalMotionControllerObject, handedness: MotionControllerHandedness, legacyMapping: boolean = false, private _forceLegacyControllers: boolean = false) {\r\n        super(scene, OculusTouchLayouts[handedness], gamepadObject, handedness);\r\n    }\r\n\r\n    protected _getFilenameAndPath(): { filename: string; path: string } {\r\n        let filename = \"\";\r\n        if (this.handedness === \"left\") {\r\n            filename = WebXROculusTouchMotionController.MODEL_LEFT_FILENAME;\r\n        } else {\r\n            // Right is the default if no hand is specified\r\n            filename = WebXROculusTouchMotionController.MODEL_RIGHT_FILENAME;\r\n        }\r\n\r\n        let path = this._isQuest() ? WebXROculusTouchMotionController.QUEST_MODEL_BASE_URL : WebXROculusTouchMotionController.MODEL_BASE_URL;\r\n        return {\r\n            filename,\r\n            path,\r\n        };\r\n    }\r\n\r\n    protected _getModelLoadingConstraints(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected _processLoadedModel(_meshes: AbstractMesh[]): void {\r\n        const isQuest = this._isQuest();\r\n        const triggerDirection = this.handedness === \"right\" ? -1 : 1;\r\n\r\n        this.getComponentIds().forEach((id) => {\r\n            const comp = id && this.getComponent(id);\r\n            if (comp) {\r\n                comp.onButtonStateChangedObservable.add(\r\n                    (component) => {\r\n                        if (!this.rootMesh || this.disableAnimation) {\r\n                            return;\r\n                        }\r\n\r\n                        switch (id) {\r\n                            case \"xr-standard-trigger\": // index trigger\r\n                                if (!isQuest) {\r\n                                    (<AbstractMesh>this._modelRootNode.getChildren()[3]).rotation.x = -component.value * 0.2;\r\n                                    (<AbstractMesh>this._modelRootNode.getChildren()[3]).position.y = -component.value * 0.005;\r\n                                    (<AbstractMesh>this._modelRootNode.getChildren()[3]).position.z = -component.value * 0.005;\r\n                                }\r\n                                return;\r\n                            case \"xr-standard-squeeze\": // secondary trigger\r\n                                if (!isQuest) {\r\n                                    (<AbstractMesh>this._modelRootNode.getChildren()[4]).position.x = triggerDirection * component.value * 0.0035;\r\n                                }\r\n                                return;\r\n                            case \"xr-standard-thumbstick\": // thumbstick\r\n                                return;\r\n                            case \"a-button\":\r\n                            case \"x-button\":\r\n                                if (!isQuest) {\r\n                                    if (component.pressed) {\r\n                                        (<AbstractMesh>this._modelRootNode.getChildren()[1]).position.y = -0.001;\r\n                                    } else {\r\n                                        (<AbstractMesh>this._modelRootNode.getChildren()[1]).position.y = 0;\r\n                                    }\r\n                                }\r\n                                return;\r\n                            case \"b-button\":\r\n                            case \"y-button\":\r\n                                if (!isQuest) {\r\n                                    if (component.pressed) {\r\n                                        (<AbstractMesh>this._modelRootNode.getChildren()[2]).position.y = -0.001;\r\n                                    } else {\r\n                                        (<AbstractMesh>this._modelRootNode.getChildren()[2]).position.y = 0;\r\n                                    }\r\n                                }\r\n                                return;\r\n                        }\r\n                    },\r\n                    undefined,\r\n                    true\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _setRootMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\r\n        if (!this.scene.useRightHandedSystem) {\r\n            this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n        }\r\n\r\n        meshes.forEach((mesh) => {\r\n            mesh.isPickable = false;\r\n        });\r\n        if (this._isQuest()) {\r\n            this._modelRootNode = meshes[0];\r\n        } else {\r\n            this._modelRootNode = meshes[1];\r\n            this.rootMesh.position.y = 0.034;\r\n            this.rootMesh.position.z = 0.052;\r\n        }\r\n        this._modelRootNode.parent = this.rootMesh;\r\n    }\r\n\r\n    protected _updateModel(): void {\r\n        // no-op. model is updated using observables.\r\n    }\r\n\r\n    /**\r\n     * Is this the new type of oculus touch. At the moment both have the same profile and it is impossible to differentiate\r\n     * between the touch and touch 2.\r\n     */\r\n    private _isQuest() {\r\n        // this is SADLY the only way to currently check. Until proper profiles will be available.\r\n        return !!navigator.userAgent.match(/Quest/gi) && !this._forceLegacyControllers;\r\n    }\r\n}\r\n\r\n// register the profile\r\nWebXRMotionControllerManager.RegisterController(\"oculus-touch\", (xrInput: XRInputSource, scene: Scene) => {\r\n    return new WebXROculusTouchMotionController(scene, <any>xrInput.gamepad, xrInput.handedness);\r\n});\r\n\r\nWebXRMotionControllerManager.RegisterController(\"oculus-touch-legacy\", (xrInput: XRInputSource, scene: Scene) => {\r\n    return new WebXROculusTouchMotionController(scene, <any>xrInput.gamepad, xrInput.handedness, true);\r\n});\r\n\r\nconst OculusTouchLayouts: IMotionControllerLayoutMap = {\r\n    left: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                type: \"thumbstick\",\r\n                gamepadIndices: {\r\n                    button: 3,\r\n                    xAxis: 2,\r\n                    yAxis: 3,\r\n                },\r\n                rootNodeName: \"xr_standard_thumbstick\",\r\n                visualResponses: {},\r\n            },\r\n            \"x-button\": {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 4,\r\n                },\r\n                rootNodeName: \"x_button\",\r\n                visualResponses: {},\r\n            },\r\n            \"y-button\": {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 5,\r\n                },\r\n                rootNodeName: \"y_button\",\r\n                visualResponses: {},\r\n            },\r\n            thumbrest: {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 6,\r\n                },\r\n                rootNodeName: \"thumbrest\",\r\n                visualResponses: {},\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"oculus-touch-v2-left\",\r\n        assetPath: \"left.glb\",\r\n    },\r\n    right: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                type: \"thumbstick\",\r\n                gamepadIndices: {\r\n                    button: 3,\r\n                    xAxis: 2,\r\n                    yAxis: 3,\r\n                },\r\n                rootNodeName: \"xr_standard_thumbstick\",\r\n                visualResponses: {},\r\n            },\r\n            \"a-button\": {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 4,\r\n                },\r\n                rootNodeName: \"a_button\",\r\n                visualResponses: {},\r\n            },\r\n            \"b-button\": {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 5,\r\n                },\r\n                rootNodeName: \"b_button\",\r\n                visualResponses: {},\r\n            },\r\n            thumbrest: {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 6,\r\n                },\r\n                rootNodeName: \"thumbrest\",\r\n                visualResponses: {},\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"oculus-touch-v2-right\",\r\n        assetPath: \"right.glb\",\r\n    },\r\n};\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}