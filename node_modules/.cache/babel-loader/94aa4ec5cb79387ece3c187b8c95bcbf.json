{"ast":null,"code":"import { Vector3, Vector2, TmpVectors } from \"../Maths/math.vector\";\nimport { VertexBuffer } from \"../Meshes/buffer\";\n/**\r\n     * Information about the result of picking within a scene\r\n     * @see https://doc.babylonjs.com/babylon101/picking_collisions\r\n     */\n\nvar PickingInfo =\n/** @class */\nfunction () {\n  function PickingInfo() {\n    /** @hidden */\n    this._pickingUnavailable = false;\n    /**\r\n     * If the pick collided with an object\r\n     */\n\n    this.hit = false;\n    /**\r\n     * Distance away where the pick collided\r\n     */\n\n    this.distance = 0;\n    /**\r\n     * The location of pick collision\r\n     */\n\n    this.pickedPoint = null;\n    /**\r\n     * The mesh corresponding the the pick collision\r\n     */\n\n    this.pickedMesh = null;\n    /** (See getTextureCoordinates) The barycentric U coordinate that is used when calculating the texture coordinates of the collision.*/\n\n    this.bu = 0;\n    /** (See getTextureCoordinates) The barycentric V coordinate that is used when calculating the texture coordinates of the collision.*/\n\n    this.bv = 0;\n    /** The index of the face on the mesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\n\n    this.faceId = -1;\n    /** The index of the face on the subMesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\n\n    this.subMeshFaceId = -1;\n    /** Id of the the submesh that was picked */\n\n    this.subMeshId = 0;\n    /** If a sprite was picked, this will be the sprite the pick collided with */\n\n    this.pickedSprite = null;\n    /** If we are pikcing a mesh with thin instance, this will give you the picked thin instance */\n\n    this.thinInstanceIndex = -1;\n    /**\r\n     * If a mesh was used to do the picking (eg. 6dof controller) this will be populated.\r\n     */\n\n    this.originMesh = null;\n    /**\r\n     * The ray that was used to perform the picking.\r\n     */\n\n    this.ray = null;\n  }\n  /**\r\n   * Gets the normal correspodning to the face the pick collided with\r\n   * @param useWorldCoordinates If the resulting normal should be relative to the world (default: false)\r\n   * @param useVerticesNormals If the vertices normals should be used to calculate the normal instead of the normal map\r\n   * @returns The normal correspodning to the face the pick collided with\r\n   */\n\n\n  PickingInfo.prototype.getNormal = function (useWorldCoordinates, useVerticesNormals) {\n    if (useWorldCoordinates === void 0) {\n      useWorldCoordinates = false;\n    }\n\n    if (useVerticesNormals === void 0) {\n      useVerticesNormals = true;\n    }\n\n    if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n      return null;\n    }\n\n    var indices = this.pickedMesh.getIndices();\n\n    if (!indices) {\n      return null;\n    }\n\n    var result;\n\n    if (useVerticesNormals) {\n      var normals = this.pickedMesh.getVerticesData(VertexBuffer.NormalKind);\n      var normal0 = Vector3.FromArray(normals, indices[this.faceId * 3] * 3);\n      var normal1 = Vector3.FromArray(normals, indices[this.faceId * 3 + 1] * 3);\n      var normal2 = Vector3.FromArray(normals, indices[this.faceId * 3 + 2] * 3);\n      normal0 = normal0.scale(this.bu);\n      normal1 = normal1.scale(this.bv);\n      normal2 = normal2.scale(1.0 - this.bu - this.bv);\n      result = new Vector3(normal0.x + normal1.x + normal2.x, normal0.y + normal1.y + normal2.y, normal0.z + normal1.z + normal2.z);\n    } else {\n      var positions = this.pickedMesh.getVerticesData(VertexBuffer.PositionKind);\n      var vertex1 = Vector3.FromArray(positions, indices[this.faceId * 3] * 3);\n      var vertex2 = Vector3.FromArray(positions, indices[this.faceId * 3 + 1] * 3);\n      var vertex3 = Vector3.FromArray(positions, indices[this.faceId * 3 + 2] * 3);\n      var p1p2 = vertex1.subtract(vertex2);\n      var p3p2 = vertex3.subtract(vertex2);\n      result = Vector3.Cross(p1p2, p3p2);\n    }\n\n    if (useWorldCoordinates) {\n      var wm = this.pickedMesh.getWorldMatrix();\n\n      if (this.pickedMesh.nonUniformScaling) {\n        TmpVectors.Matrix[0].copyFrom(wm);\n        wm = TmpVectors.Matrix[0];\n        wm.setTranslationFromFloats(0, 0, 0);\n        wm.invert();\n        wm.transposeToRef(TmpVectors.Matrix[1]);\n        wm = TmpVectors.Matrix[1];\n      }\n\n      result = Vector3.TransformNormal(result, wm);\n    }\n\n    result.normalize();\n    return result;\n  };\n  /**\r\n   * Gets the texture coordinates of where the pick occured\r\n   * @returns the vector containing the coordnates of the texture\r\n   */\n\n\n  PickingInfo.prototype.getTextureCoordinates = function () {\n    if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n      return null;\n    }\n\n    var indices = this.pickedMesh.getIndices();\n\n    if (!indices) {\n      return null;\n    }\n\n    var uvs = this.pickedMesh.getVerticesData(VertexBuffer.UVKind);\n\n    if (!uvs) {\n      return null;\n    }\n\n    var uv0 = Vector2.FromArray(uvs, indices[this.faceId * 3] * 2);\n    var uv1 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 1] * 2);\n    var uv2 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 2] * 2);\n    uv0 = uv0.scale(this.bu);\n    uv1 = uv1.scale(this.bv);\n    uv2 = uv2.scale(1.0 - this.bu - this.bv);\n    return new Vector2(uv0.x + uv1.x + uv2.x, uv0.y + uv1.y + uv2.y);\n  };\n\n  return PickingInfo;\n}();\n\nexport { PickingInfo };","map":{"version":3,"sources":["../../../sourceES6/core/Collisions/pickingInfo.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable, FloatArray } from \"../types\";\r\nimport { Vector3, Vector2, TmpVectors } from \"../Maths/math.vector\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { VertexBuffer } from \"../Meshes/buffer\";\r\nimport { Sprite } from \"../Sprites/sprite\";\r\n\r\ndeclare type Ray = import(\"../Culling/ray\").Ray;\r\n\r\n/**\r\n     * Information about the result of picking within a scene\r\n     * @see https://doc.babylonjs.com/babylon101/picking_collisions\r\n     */\r\nexport class PickingInfo {\r\n    /** @hidden */\r\n    public _pickingUnavailable = false;\r\n\r\n    /**\r\n     * If the pick collided with an object\r\n     */\r\n    public hit = false;\r\n    /**\r\n     * Distance away where the pick collided\r\n     */\r\n    public distance = 0;\r\n    /**\r\n     * The location of pick collision\r\n     */\r\n    public pickedPoint: Nullable<Vector3> = null;\r\n    /**\r\n     * The mesh corresponding the the pick collision\r\n     */\r\n    public pickedMesh: Nullable<AbstractMesh> = null;\r\n    /** (See getTextureCoordinates) The barycentric U coordinate that is used when calculating the texture coordinates of the collision.*/\r\n    public bu = 0;\r\n    /** (See getTextureCoordinates) The barycentric V coordinate that is used when calculating the texture coordinates of the collision.*/\r\n    public bv = 0;\r\n    /** The index of the face on the mesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\r\n    public faceId = -1;\r\n    /** The index of the face on the subMesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\r\n    public subMeshFaceId = -1;\r\n    /** Id of the the submesh that was picked */\r\n    public subMeshId = 0;\r\n    /** If a sprite was picked, this will be the sprite the pick collided with */\r\n    public pickedSprite: Nullable<Sprite> = null;\r\n\r\n    /** If we are pikcing a mesh with thin instance, this will give you the picked thin instance */\r\n    public thinInstanceIndex = -1;\r\n    /**\r\n     * If a mesh was used to do the picking (eg. 6dof controller) this will be populated.\r\n     */\r\n    public originMesh: Nullable<AbstractMesh> = null;\r\n    /**\r\n     * The ray that was used to perform the picking.\r\n     */\r\n    public ray: Nullable<Ray> = null;\r\n\r\n    /**\r\n     * Gets the normal correspodning to the face the pick collided with\r\n     * @param useWorldCoordinates If the resulting normal should be relative to the world (default: false)\r\n     * @param useVerticesNormals If the vertices normals should be used to calculate the normal instead of the normal map\r\n     * @returns The normal correspodning to the face the pick collided with\r\n     */\r\n    public getNormal(useWorldCoordinates = false, useVerticesNormals = true): Nullable<Vector3> {\r\n        if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            return null;\r\n        }\r\n\r\n        var indices = this.pickedMesh.getIndices();\r\n\r\n        if (!indices) {\r\n            return null;\r\n        }\r\n\r\n        var result: Vector3;\r\n\r\n        if (useVerticesNormals) {\r\n            var normals = (<FloatArray>this.pickedMesh.getVerticesData(VertexBuffer.NormalKind));\r\n\r\n            var normal0 = Vector3.FromArray(normals, indices[this.faceId * 3] * 3);\r\n            var normal1 = Vector3.FromArray(normals, indices[this.faceId * 3 + 1] * 3);\r\n            var normal2 = Vector3.FromArray(normals, indices[this.faceId * 3 + 2] * 3);\r\n\r\n            normal0 = normal0.scale(this.bu);\r\n            normal1 = normal1.scale(this.bv);\r\n            normal2 = normal2.scale(1.0 - this.bu - this.bv);\r\n\r\n            result = new Vector3(normal0.x + normal1.x + normal2.x, normal0.y + normal1.y + normal2.y, normal0.z + normal1.z + normal2.z);\r\n        } else {\r\n            var positions = (<FloatArray>this.pickedMesh.getVerticesData(VertexBuffer.PositionKind));\r\n\r\n            var vertex1 = Vector3.FromArray(positions, indices[this.faceId * 3] * 3);\r\n            var vertex2 = Vector3.FromArray(positions, indices[this.faceId * 3 + 1] * 3);\r\n            var vertex3 = Vector3.FromArray(positions, indices[this.faceId * 3 + 2] * 3);\r\n\r\n            var p1p2 = vertex1.subtract(vertex2);\r\n            var p3p2 = vertex3.subtract(vertex2);\r\n\r\n            result = Vector3.Cross(p1p2, p3p2);\r\n        }\r\n\r\n        if (useWorldCoordinates) {\r\n            let wm = this.pickedMesh.getWorldMatrix();\r\n\r\n            if (this.pickedMesh.nonUniformScaling) {\r\n                TmpVectors.Matrix[0].copyFrom(wm);\r\n                wm = TmpVectors.Matrix[0];\r\n                wm.setTranslationFromFloats(0, 0, 0);\r\n                wm.invert();\r\n                wm.transposeToRef(TmpVectors.Matrix[1]);\r\n\r\n                wm = TmpVectors.Matrix[1];\r\n            }\r\n\r\n            result = Vector3.TransformNormal(result, wm);\r\n        }\r\n\r\n        result.normalize();\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the texture coordinates of where the pick occured\r\n     * @returns the vector containing the coordnates of the texture\r\n     */\r\n    public getTextureCoordinates(): Nullable<Vector2> {\r\n        if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            return null;\r\n        }\r\n\r\n        var indices = this.pickedMesh.getIndices();\r\n        if (!indices) {\r\n            return null;\r\n        }\r\n\r\n        var uvs = this.pickedMesh.getVerticesData(VertexBuffer.UVKind);\r\n        if (!uvs) {\r\n            return null;\r\n        }\r\n\r\n        var uv0 = Vector2.FromArray(uvs, indices[this.faceId * 3] * 2);\r\n        var uv1 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 1] * 2);\r\n        var uv2 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 2] * 2);\r\n\r\n        uv0 = uv0.scale(this.bu);\r\n        uv1 = uv1.scale(this.bv);\r\n        uv2 = uv2.scale(1.0 - this.bu - this.bv);\r\n\r\n        return new Vector2(uv0.x + uv1.x + uv2.x, uv0.y + uv1.y + uv2.y);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}