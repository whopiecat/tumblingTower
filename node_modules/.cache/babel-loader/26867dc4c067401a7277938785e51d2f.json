{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Scalar } from \"../../Maths/math.scalar\";\nimport { DeepCopier } from \"../../Misc/deepCopier\";\n/**\r\n * Particle emitter emitting particles from the inside of a cylinder.\r\n * It emits the particles alongside the cylinder radius. The emission direction might be randomized.\r\n */\n\nvar CylinderParticleEmitter =\n/** @class */\nfunction () {\n  /**\r\n  * Creates a new instance CylinderParticleEmitter\r\n  * @param radius the radius of the emission cylinder (1 by default)\r\n  * @param height the height of the emission cylinder (1 by default)\r\n  * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n  * @param directionRandomizer defines how much to randomize the particle direction [0-1]\r\n  */\n  function CylinderParticleEmitter(\n  /**\r\n   * The radius of the emission cylinder.\r\n   */\n  radius,\n  /**\r\n   * The height of the emission cylinder.\r\n   */\n  height,\n  /**\r\n   * The range of emission [0-1] 0 Surface only, 1 Entire Radius.\r\n   */\n  radiusRange,\n  /**\r\n   * How much to randomize the particle direction [0-1].\r\n   */\n  directionRandomizer) {\n    if (radius === void 0) {\n      radius = 1;\n    }\n\n    if (height === void 0) {\n      height = 1;\n    }\n\n    if (radiusRange === void 0) {\n      radiusRange = 1;\n    }\n\n    if (directionRandomizer === void 0) {\n      directionRandomizer = 0;\n    }\n\n    this.radius = radius;\n    this.height = height;\n    this.radiusRange = radiusRange;\n    this.directionRandomizer = directionRandomizer;\n  }\n  /**\r\n   * Called by the particle System when the direction is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param directionToUpdate is the direction vector to update with the result\r\n   * @param particle is the particle we are computed the direction for\r\n   * @param isLocal defines if the direction should be set in local space\r\n   */\n\n\n  CylinderParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n    var direction = particle.position.subtract(worldMatrix.getTranslation()).normalize();\n    var randY = Scalar.RandomRange(-this.directionRandomizer / 2, this.directionRandomizer / 2);\n    var angle = Math.atan2(direction.x, direction.z);\n    angle += Scalar.RandomRange(-Math.PI / 2, Math.PI / 2) * this.directionRandomizer;\n    direction.y = randY; // set direction y to rand y to mirror normal of cylinder surface\n\n    direction.x = Math.sin(angle);\n    direction.z = Math.cos(angle);\n    direction.normalize();\n\n    if (isLocal) {\n      directionToUpdate.copyFrom(direction);\n      return;\n    }\n\n    Vector3.TransformNormalFromFloatsToRef(direction.x, direction.y, direction.z, worldMatrix, directionToUpdate);\n  };\n  /**\r\n   * Called by the particle System when the position is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param positionToUpdate is the position vector to update with the result\r\n   * @param particle is the particle we are computed the position for\r\n   * @param isLocal defines if the position should be set in local space\r\n   */\n\n\n  CylinderParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n    var yPos = Scalar.RandomRange(-this.height / 2, this.height / 2);\n    var angle = Scalar.RandomRange(0, 2 * Math.PI); // Pick a properly distributed point within the circle https://programming.guide/random-point-within-circle.html\n\n    var radiusDistribution = Scalar.RandomRange((1 - this.radiusRange) * (1 - this.radiusRange), 1);\n    var positionRadius = Math.sqrt(radiusDistribution) * this.radius;\n    var xPos = positionRadius * Math.cos(angle);\n    var zPos = positionRadius * Math.sin(angle);\n\n    if (isLocal) {\n      positionToUpdate.copyFromFloats(xPos, yPos, zPos);\n      return;\n    }\n\n    Vector3.TransformCoordinatesFromFloatsToRef(xPos, yPos, zPos, worldMatrix, positionToUpdate);\n  };\n  /**\r\n   * Clones the current emitter and returns a copy of it\r\n   * @returns the new emitter\r\n   */\n\n\n  CylinderParticleEmitter.prototype.clone = function () {\n    var newOne = new CylinderParticleEmitter(this.radius, this.directionRandomizer);\n    DeepCopier.DeepCopy(this, newOne);\n    return newOne;\n  };\n  /**\r\n   * Called by the GPUParticleSystem to setup the update shader\r\n   * @param effect defines the update shader\r\n   */\n\n\n  CylinderParticleEmitter.prototype.applyToShader = function (effect) {\n    effect.setFloat(\"radius\", this.radius);\n    effect.setFloat(\"height\", this.height);\n    effect.setFloat(\"radiusRange\", this.radiusRange);\n    effect.setFloat(\"directionRandomizer\", this.directionRandomizer);\n  };\n  /**\r\n   * Returns a string to use to update the GPU particles update shader\r\n   * @returns a string containng the defines string\r\n   */\n\n\n  CylinderParticleEmitter.prototype.getEffectDefines = function () {\n    return \"#define CYLINDEREMITTER\";\n  };\n  /**\r\n   * Returns the string \"CylinderParticleEmitter\"\r\n   * @returns a string containing the class name\r\n   */\n\n\n  CylinderParticleEmitter.prototype.getClassName = function () {\n    return \"CylinderParticleEmitter\";\n  };\n  /**\r\n   * Serializes the particle system to a JSON object.\r\n   * @returns the JSON object\r\n   */\n\n\n  CylinderParticleEmitter.prototype.serialize = function () {\n    var serializationObject = {};\n    serializationObject.type = this.getClassName();\n    serializationObject.radius = this.radius;\n    serializationObject.height = this.height;\n    serializationObject.radiusRange = this.radiusRange;\n    serializationObject.directionRandomizer = this.directionRandomizer;\n    return serializationObject;\n  };\n  /**\r\n   * Parse properties from a JSON object\r\n   * @param serializationObject defines the JSON object\r\n   */\n\n\n  CylinderParticleEmitter.prototype.parse = function (serializationObject) {\n    this.radius = serializationObject.radius;\n    this.height = serializationObject.height;\n    this.radiusRange = serializationObject.radiusRange;\n    this.directionRandomizer = serializationObject.directionRandomizer;\n  };\n\n  return CylinderParticleEmitter;\n}();\n\nexport { CylinderParticleEmitter };\n/**\r\n * Particle emitter emitting particles from the inside of a cylinder.\r\n * It emits the particles randomly between two vectors.\r\n */\n\nvar CylinderDirectedParticleEmitter =\n/** @class */\nfunction (_super) {\n  __extends(CylinderDirectedParticleEmitter, _super);\n  /**\r\n   * Creates a new instance CylinderDirectedParticleEmitter\r\n   * @param radius the radius of the emission cylinder (1 by default)\r\n   * @param height the height of the emission cylinder (1 by default)\r\n   * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n   * @param direction1 the min limit of the emission direction (up vector by default)\r\n   * @param direction2 the max limit of the emission direction (up vector by default)\r\n   */\n\n\n  function CylinderDirectedParticleEmitter(radius, height, radiusRange,\n  /**\r\n   * The min limit of the emission direction.\r\n   */\n  direction1,\n  /**\r\n   * The max limit of the emission direction.\r\n   */\n  direction2) {\n    if (radius === void 0) {\n      radius = 1;\n    }\n\n    if (height === void 0) {\n      height = 1;\n    }\n\n    if (radiusRange === void 0) {\n      radiusRange = 1;\n    }\n\n    if (direction1 === void 0) {\n      direction1 = new Vector3(0, 1, 0);\n    }\n\n    if (direction2 === void 0) {\n      direction2 = new Vector3(0, 1, 0);\n    }\n\n    var _this = _super.call(this, radius, height, radiusRange) || this;\n\n    _this.direction1 = direction1;\n    _this.direction2 = direction2;\n    return _this;\n  }\n  /**\r\n   * Called by the particle System when the direction is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param directionToUpdate is the direction vector to update with the result\r\n   * @param particle is the particle we are computed the direction for\r\n   */\n\n\n  CylinderDirectedParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle) {\n    var randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\n    var randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\n    var randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\n    Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\n  };\n  /**\r\n   * Clones the current emitter and returns a copy of it\r\n   * @returns the new emitter\r\n   */\n\n\n  CylinderDirectedParticleEmitter.prototype.clone = function () {\n    var newOne = new CylinderDirectedParticleEmitter(this.radius, this.height, this.radiusRange, this.direction1, this.direction2);\n    DeepCopier.DeepCopy(this, newOne);\n    return newOne;\n  };\n  /**\r\n   * Called by the GPUParticleSystem to setup the update shader\r\n   * @param effect defines the update shader\r\n   */\n\n\n  CylinderDirectedParticleEmitter.prototype.applyToShader = function (effect) {\n    effect.setFloat(\"radius\", this.radius);\n    effect.setFloat(\"height\", this.height);\n    effect.setFloat(\"radiusRange\", this.radiusRange);\n    effect.setVector3(\"direction1\", this.direction1);\n    effect.setVector3(\"direction2\", this.direction2);\n  };\n  /**\r\n   * Returns a string to use to update the GPU particles update shader\r\n   * @returns a string containng the defines string\r\n   */\n\n\n  CylinderDirectedParticleEmitter.prototype.getEffectDefines = function () {\n    return \"#define CYLINDEREMITTER\\n#define DIRECTEDCYLINDEREMITTER\";\n  };\n  /**\r\n   * Returns the string \"CylinderDirectedParticleEmitter\"\r\n   * @returns a string containing the class name\r\n   */\n\n\n  CylinderDirectedParticleEmitter.prototype.getClassName = function () {\n    return \"CylinderDirectedParticleEmitter\";\n  };\n  /**\r\n   * Serializes the particle system to a JSON object.\r\n   * @returns the JSON object\r\n   */\n\n\n  CylinderDirectedParticleEmitter.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.direction1 = this.direction1.asArray();\n    serializationObject.direction2 = this.direction2.asArray();\n    return serializationObject;\n  };\n  /**\r\n   * Parse properties from a JSON object\r\n   * @param serializationObject defines the JSON object\r\n   */\n\n\n  CylinderDirectedParticleEmitter.prototype.parse = function (serializationObject) {\n    _super.prototype.parse.call(this, serializationObject);\n\n    this.direction1.copyFrom(serializationObject.direction1);\n    this.direction2.copyFrom(serializationObject.direction2);\n  };\n\n  return CylinderDirectedParticleEmitter;\n}(CylinderParticleEmitter);\n\nexport { CylinderDirectedParticleEmitter };","map":{"version":3,"sources":["../../../../sourceES6/core/Particles/EmitterTypes/cylinderParticleEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector3, Matrix } from \"../../Maths/math.vector\";\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\nimport { Effect } from \"../../Materials/effect\";\r\nimport { Particle } from \"../../Particles/particle\";\r\nimport { IParticleEmitterType } from \"./IParticleEmitterType\";\r\nimport { DeepCopier } from \"../../Misc/deepCopier\";\r\n/**\r\n * Particle emitter emitting particles from the inside of a cylinder.\r\n * It emits the particles alongside the cylinder radius. The emission direction might be randomized.\r\n */\r\nexport class CylinderParticleEmitter implements IParticleEmitterType {\r\n    /**\r\n    * Creates a new instance CylinderParticleEmitter\r\n    * @param radius the radius of the emission cylinder (1 by default)\r\n    * @param height the height of the emission cylinder (1 by default)\r\n    * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n    * @param directionRandomizer defines how much to randomize the particle direction [0-1]\r\n    */\r\n    constructor(\r\n        /**\r\n         * The radius of the emission cylinder.\r\n         */\r\n        public radius = 1,\r\n        /**\r\n         * The height of the emission cylinder.\r\n         */\r\n        public height = 1,\r\n        /**\r\n         * The range of emission [0-1] 0 Surface only, 1 Entire Radius.\r\n         */\r\n        public radiusRange = 1,\r\n        /**\r\n         * How much to randomize the particle direction [0-1].\r\n         */\r\n        public directionRandomizer = 0) {\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param particle is the particle we are computed the direction for\r\n     * @param isLocal defines if the direction should be set in local space\r\n     */\r\n    public startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        var direction = particle.position.subtract(worldMatrix.getTranslation()).normalize();\r\n        var randY = Scalar.RandomRange(-this.directionRandomizer / 2, this.directionRandomizer / 2);\r\n\r\n        var angle = Math.atan2(direction.x, direction.z);\r\n        angle += Scalar.RandomRange(-Math.PI / 2, Math.PI / 2) * this.directionRandomizer;\r\n\r\n        direction.y = randY; // set direction y to rand y to mirror normal of cylinder surface\r\n        direction.x = Math.sin(angle);\r\n        direction.z = Math.cos(angle);\r\n        direction.normalize();\r\n\r\n        if (isLocal) {\r\n            directionToUpdate.copyFrom(direction);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformNormalFromFloatsToRef(direction.x, direction.y, direction.z, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the position is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param positionToUpdate is the position vector to update with the result\r\n     * @param particle is the particle we are computed the position for\r\n     * @param isLocal defines if the position should be set in local space\r\n     */\r\n    public startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        var yPos = Scalar.RandomRange(-this.height / 2, this.height / 2);\r\n        var angle = Scalar.RandomRange(0, 2 * Math.PI);\r\n\r\n        // Pick a properly distributed point within the circle https://programming.guide/random-point-within-circle.html\r\n        var radiusDistribution = Scalar.RandomRange((1 - this.radiusRange) * (1 - this.radiusRange), 1);\r\n        var positionRadius = Math.sqrt(radiusDistribution) * this.radius;\r\n        var xPos = positionRadius * Math.cos(angle);\r\n        var zPos = positionRadius * Math.sin(angle);\r\n\r\n        if (isLocal) {\r\n            positionToUpdate.copyFromFloats(xPos, yPos, zPos);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformCoordinatesFromFloatsToRef(xPos, yPos, zPos, worldMatrix, positionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public clone(): CylinderParticleEmitter {\r\n        let newOne = new CylinderParticleEmitter(this.radius, this.directionRandomizer);\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param effect defines the update shader\r\n     */\r\n    public applyToShader(effect: Effect): void {\r\n        effect.setFloat(\"radius\", this.radius);\r\n        effect.setFloat(\"height\", this.height);\r\n        effect.setFloat(\"radiusRange\", this.radiusRange);\r\n        effect.setFloat(\"directionRandomizer\", this.directionRandomizer);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containng the defines string\r\n     */\r\n    public getEffectDefines(): string {\r\n        return \"#define CYLINDEREMITTER\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"CylinderParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"CylinderParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject: any = {};\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.radius = this.radius;\r\n        serializationObject.height = this.height;\r\n        serializationObject.radiusRange = this.radiusRange;\r\n        serializationObject.directionRandomizer = this.directionRandomizer;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        this.radius = serializationObject.radius;\r\n        this.height = serializationObject.height;\r\n        this.radiusRange = serializationObject.radiusRange;\r\n        this.directionRandomizer = serializationObject.directionRandomizer;\r\n    }\r\n}\r\n\r\n/**\r\n * Particle emitter emitting particles from the inside of a cylinder.\r\n * It emits the particles randomly between two vectors.\r\n */\r\nexport class CylinderDirectedParticleEmitter extends CylinderParticleEmitter {\r\n\r\n    /**\r\n     * Creates a new instance CylinderDirectedParticleEmitter\r\n     * @param radius the radius of the emission cylinder (1 by default)\r\n     * @param height the height of the emission cylinder (1 by default)\r\n     * @param radiusRange the range of the emission cylinder [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n     * @param direction1 the min limit of the emission direction (up vector by default)\r\n     * @param direction2 the max limit of the emission direction (up vector by default)\r\n     */\r\n    constructor(\r\n        radius = 1,\r\n        height = 1,\r\n        radiusRange = 1,\r\n        /**\r\n         * The min limit of the emission direction.\r\n         */\r\n        public direction1 = new Vector3(0, 1, 0),\r\n        /**\r\n         * The max limit of the emission direction.\r\n         */\r\n        public direction2 = new Vector3(0, 1, 0)) {\r\n        super(radius, height, radiusRange);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param particle is the particle we are computed the direction for\r\n     */\r\n    public startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle): void {\r\n        var randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\r\n        var randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\r\n        var randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\r\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public clone(): CylinderDirectedParticleEmitter {\r\n        let newOne = new CylinderDirectedParticleEmitter(this.radius, this.height, this.radiusRange, this.direction1, this.direction2);\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param effect defines the update shader\r\n     */\r\n    public applyToShader(effect: Effect): void {\r\n        effect.setFloat(\"radius\", this.radius);\r\n        effect.setFloat(\"height\", this.height);\r\n        effect.setFloat(\"radiusRange\", this.radiusRange);\r\n        effect.setVector3(\"direction1\", this.direction1);\r\n        effect.setVector3(\"direction2\", this.direction2);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containng the defines string\r\n     */\r\n    public getEffectDefines(): string {\r\n        return \"#define CYLINDEREMITTER\\n#define DIRECTEDCYLINDEREMITTER\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"CylinderDirectedParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"CylinderDirectedParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = super.serialize();\r\n\r\n        serializationObject.direction1 = this.direction1.asArray();\r\n        serializationObject.direction2 = this.direction2.asArray();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     */\r\n    public parse(serializationObject: any): void {\r\n        super.parse(serializationObject);\r\n        this.direction1.copyFrom(serializationObject.direction1);\r\n        this.direction2.copyFrom(serializationObject.direction2);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}