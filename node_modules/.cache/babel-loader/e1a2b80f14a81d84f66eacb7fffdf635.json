{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Action } from \"./action\";\nimport { Logger } from \"../Misc/logger\";\nimport { Observable } from \"../Misc/observable\";\nimport { Color3 } from \"../Maths/math.color\";\nimport { Vector3, Matrix, Quaternion } from \"../Maths/math.vector\";\nimport { Animation } from \"../Animations/animation\";\nimport { _TypeStore } from '../Misc/typeStore';\n/**\r\n * This defines an action responsible to change the value of a property\r\n * by interpolating between its current value and the newly set one once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar InterpolateValueAction =\n/** @class */\nfunction (_super) {\n  __extends(InterpolateValueAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the object containing the value to interpolate\r\n   * @param propertyPath defines the path to the property in the target object\r\n   * @param value defines the target value at the end of the interpolation\r\n   * @param duration deines the time it will take for the property to interpolate to the value.\r\n   * @param condition defines the trigger related conditions\r\n   * @param stopOtherAnimations defines if the other scene animations should be stopped when the action has been triggered\r\n   * @param onInterpolationDone defines a callback raised once the interpolation animation has been done\r\n   */\n\n\n  function InterpolateValueAction(triggerOptions, target, propertyPath, value, duration, condition, stopOtherAnimations, onInterpolationDone) {\n    if (duration === void 0) {\n      duration = 1000;\n    }\n\n    var _this = _super.call(this, triggerOptions, condition) || this;\n    /**\r\n     * Defines the time it will take for the property to interpolate to the value.\r\n     */\n\n\n    _this.duration = 1000;\n    /**\r\n     * Observable triggered once the interpolation animation has been done.\r\n     */\n\n    _this.onInterpolationDoneObservable = new Observable();\n    _this.propertyPath = propertyPath;\n    _this.value = value;\n    _this.duration = duration;\n    _this.stopOtherAnimations = stopOtherAnimations;\n    _this.onInterpolationDone = onInterpolationDone;\n    _this._target = _this._effectiveTarget = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  InterpolateValueAction.prototype._prepare = function () {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n  };\n  /**\r\n   * Execute the action starts the value interpolation.\r\n   */\n\n\n  InterpolateValueAction.prototype.execute = function () {\n    var _this = this;\n\n    var scene = this._actionManager.getScene();\n\n    var keys = [{\n      frame: 0,\n      value: this._effectiveTarget[this._property]\n    }, {\n      frame: 100,\n      value: this.value\n    }];\n    var dataType;\n\n    if (typeof this.value === \"number\") {\n      dataType = Animation.ANIMATIONTYPE_FLOAT;\n    } else if (this.value instanceof Color3) {\n      dataType = Animation.ANIMATIONTYPE_COLOR3;\n    } else if (this.value instanceof Vector3) {\n      dataType = Animation.ANIMATIONTYPE_VECTOR3;\n    } else if (this.value instanceof Matrix) {\n      dataType = Animation.ANIMATIONTYPE_MATRIX;\n    } else if (this.value instanceof Quaternion) {\n      dataType = Animation.ANIMATIONTYPE_QUATERNION;\n    } else {\n      Logger.Warn(\"InterpolateValueAction: Unsupported type (\" + typeof this.value + \")\");\n      return;\n    }\n\n    var animation = new Animation(\"InterpolateValueAction\", this._property, 100 * (1000.0 / this.duration), dataType, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    animation.setKeys(keys);\n\n    if (this.stopOtherAnimations) {\n      scene.stopAnimation(this._effectiveTarget);\n    }\n\n    var wrapper = function () {\n      _this.onInterpolationDoneObservable.notifyObservers(_this);\n\n      if (_this.onInterpolationDone) {\n        _this.onInterpolationDone();\n      }\n    };\n\n    scene.beginDirectAnimation(this._effectiveTarget, [animation], 0, 100, false, 1, wrapper);\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  InterpolateValueAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"InterpolateValueAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }, {\n        name: \"duration\",\n        value: Action._SerializeValueAsString(this.duration)\n      }, {\n        name: \"stopOtherAnimations\",\n        value: Action._SerializeValueAsString(this.stopOtherAnimations) || false\n      }]\n    }, parent);\n  };\n\n  return InterpolateValueAction;\n}(Action);\n\nexport { InterpolateValueAction };\n_TypeStore.RegisteredTypes[\"BABYLON.InterpolateValueAction\"] = InterpolateValueAction;","map":{"version":3,"sources":["../../../sourceES6/core/Actions/interpolateValueAction.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action } from \"./action\";\r\nimport { Condition } from \"./condition\";\r\n\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Vector3, Matrix, Quaternion } from \"../Maths/math.vector\";\r\nimport { Animation } from \"../Animations/animation\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\n\r\n/**\r\n * This defines an action responsible to change the value of a property\r\n * by interpolating between its current value and the newly set one once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class InterpolateValueAction extends Action {\r\n    /**\r\n     * Defines the path of the property where the value should be interpolated\r\n     */\r\n    public propertyPath: string;\r\n\r\n    /**\r\n     * Defines the target value at the end of the interpolation.\r\n     */\r\n    public value: any;\r\n\r\n    /**\r\n     * Defines the time it will take for the property to interpolate to the value.\r\n     */\r\n    public duration: number = 1000;\r\n\r\n    /**\r\n     * Defines if the other scene animations should be stopped when the action has been triggered\r\n     */\r\n    public stopOtherAnimations?: boolean;\r\n\r\n    /**\r\n     * Defines a callback raised once the interpolation animation has been done.\r\n     */\r\n    public onInterpolationDone?: () => void;\r\n\r\n    /**\r\n     * Observable triggered once the interpolation animation has been done.\r\n     */\r\n    public onInterpolationDoneObservable = new Observable<InterpolateValueAction>();\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the value to interpolate\r\n     * @param propertyPath defines the path to the property in the target object\r\n     * @param value defines the target value at the end of the interpolation\r\n     * @param duration deines the time it will take for the property to interpolate to the value.\r\n     * @param condition defines the trigger related conditions\r\n     * @param stopOtherAnimations defines if the other scene animations should be stopped when the action has been triggered\r\n     * @param onInterpolationDone defines a callback raised once the interpolation animation has been done\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, value: any, duration: number = 1000, condition?: Condition, stopOtherAnimations?: boolean, onInterpolationDone?: () => void) {\r\n        super(triggerOptions, condition);\r\n\r\n        this.propertyPath = propertyPath;\r\n        this.value = value;\r\n        this.duration = duration;\r\n        this.stopOtherAnimations = stopOtherAnimations;\r\n        this.onInterpolationDone = onInterpolationDone;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Execute the action starts the value interpolation.\r\n     */\r\n    public execute(): void {\r\n        var scene = this._actionManager.getScene();\r\n        var keys = [\r\n            {\r\n                frame: 0,\r\n                value: this._effectiveTarget[this._property]\r\n            }, {\r\n                frame: 100,\r\n                value: this.value\r\n            }\r\n        ];\r\n\r\n        var dataType: number;\r\n\r\n        if (typeof this.value === \"number\") {\r\n            dataType = Animation.ANIMATIONTYPE_FLOAT;\r\n        } else if (this.value instanceof Color3) {\r\n            dataType = Animation.ANIMATIONTYPE_COLOR3;\r\n        } else if (this.value instanceof Vector3) {\r\n            dataType = Animation.ANIMATIONTYPE_VECTOR3;\r\n        } else if (this.value instanceof Matrix) {\r\n            dataType = Animation.ANIMATIONTYPE_MATRIX;\r\n        } else if (this.value instanceof Quaternion) {\r\n            dataType = Animation.ANIMATIONTYPE_QUATERNION;\r\n        } else {\r\n            Logger.Warn(\"InterpolateValueAction: Unsupported type (\" + typeof this.value + \")\");\r\n            return;\r\n        }\r\n\r\n        var animation = new Animation(\"InterpolateValueAction\", this._property, 100 * (1000.0 / this.duration), dataType, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        animation.setKeys(keys);\r\n\r\n        if (this.stopOtherAnimations) {\r\n            scene.stopAnimation(this._effectiveTarget);\r\n        }\r\n\r\n        let wrapper = () => {\r\n            this.onInterpolationDoneObservable.notifyObservers(this);\r\n            if (this.onInterpolationDone) {\r\n                this.onInterpolationDone();\r\n            }\r\n        };\r\n\r\n        scene.beginDirectAnimation(this._effectiveTarget, [animation], 0, 100, false, 1, wrapper);\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize({\r\n            name: \"InterpolateValueAction\",\r\n            properties: [\r\n                Action._GetTargetProperty(this._target),\r\n                { name: \"propertyPath\", value: this.propertyPath },\r\n                { name: \"value\", value: Action._SerializeValueAsString(this.value) },\r\n                { name: \"duration\", value: Action._SerializeValueAsString(this.duration) },\r\n                { name: \"stopOtherAnimations\", value: Action._SerializeValueAsString(this.stopOtherAnimations) || false }\r\n            ]\r\n        }, parent);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.InterpolateValueAction\"] = InterpolateValueAction;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}