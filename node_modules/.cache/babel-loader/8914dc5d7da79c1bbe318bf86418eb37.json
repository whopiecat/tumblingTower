{"ast":null,"code":"import { StringTools } from './stringTools';\n/**\r\n * Utility class for reading from a data buffer\r\n */\n\nvar DataReader =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   * @param buffer The buffer to read\r\n   */\n  function DataReader(buffer) {\n    /**\r\n     * The current byte offset from the beginning of the data buffer.\r\n     */\n    this.byteOffset = 0;\n    this.buffer = buffer;\n  }\n  /**\r\n   * Loads the given byte length.\r\n   * @param byteLength The byte length to load\r\n   * @returns A promise that resolves when the load is complete\r\n   */\n\n\n  DataReader.prototype.loadAsync = function (byteLength) {\n    var _this = this;\n\n    return this.buffer.readAsync(this.byteOffset, byteLength).then(function (data) {\n      _this._dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      _this._dataByteOffset = 0;\n    });\n  };\n  /**\r\n   * Read a unsigned 32-bit integer from the currently loaded data range.\r\n   * @returns The 32-bit integer read\r\n   */\n\n\n  DataReader.prototype.readUint32 = function () {\n    var value = this._dataView.getUint32(this._dataByteOffset, true);\n\n    this._dataByteOffset += 4;\n    this.byteOffset += 4;\n    return value;\n  };\n  /**\r\n   * Read a byte array from the currently loaded data range.\r\n   * @param byteLength The byte length to read\r\n   * @returns The byte array read\r\n   */\n\n\n  DataReader.prototype.readUint8Array = function (byteLength) {\n    var value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._dataByteOffset, byteLength);\n    this._dataByteOffset += byteLength;\n    this.byteOffset += byteLength;\n    return value;\n  };\n  /**\r\n   * Read a string from the currently loaded data range.\r\n   * @param byteLength The byte length to read\r\n   * @returns The string read\r\n   */\n\n\n  DataReader.prototype.readString = function (byteLength) {\n    return StringTools.Decode(this.readUint8Array(byteLength));\n  };\n  /**\r\n   * Skips the given byte length the currently loaded data range.\r\n   * @param byteLength The byte length to skip\r\n   */\n\n\n  DataReader.prototype.skipBytes = function (byteLength) {\n    this._dataByteOffset += byteLength;\n    this.byteOffset += byteLength;\n  };\n\n  return DataReader;\n}();\n\nexport { DataReader };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/dataReader.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,eAA5B;AAoBA;;;;AAGA,IAAA,UAAA;AAAA;AAAA,YAAA;AAcI;;;;AAIA,WAAA,UAAA,CAAY,MAAZ,EAA+B;AAZ/B;;;AAGO,SAAA,UAAA,GAAa,CAAb;AAUH,SAAK,MAAL,GAAc,MAAd;AACH;AAED;;;;;;;AAKO,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,UAAjB,EAAmC;AAAnC,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO,KAAK,MAAL,CAAY,SAAZ,CAAsB,KAAK,UAA3B,EAAuC,UAAvC,EAAmD,IAAnD,CAAwD,UAAC,IAAD,EAAK;AAChE,MAAA,KAAI,CAAC,SAAL,GAAiB,IAAI,QAAJ,CAAa,IAAI,CAAC,MAAlB,EAA0B,IAAI,CAAC,UAA/B,EAA2C,IAAI,CAAC,UAAhD,CAAjB;AACA,MAAA,KAAI,CAAC,eAAL,GAAuB,CAAvB;AACH,KAHM,CAAP;AAIH,GALM;AAOP;;;;;;AAIO,EAAA,UAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACI,QAAM,KAAK,GAAG,KAAK,SAAL,CAAe,SAAf,CAAyB,KAAK,eAA9B,EAA+C,IAA/C,CAAd;;AACA,SAAK,eAAL,IAAwB,CAAxB;AACA,SAAK,UAAL,IAAmB,CAAnB;AACA,WAAO,KAAP;AACH,GALM;AAOP;;;;;;;AAKO,EAAA,UAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,UAAtB,EAAwC;AACpC,QAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,KAAK,SAAL,CAAe,MAA9B,EAAsC,KAAK,SAAL,CAAe,UAAf,GAA4B,KAAK,eAAvE,EAAwF,UAAxF,CAAd;AACA,SAAK,eAAL,IAAwB,UAAxB;AACA,SAAK,UAAL,IAAmB,UAAnB;AACA,WAAO,KAAP;AACH,GALM;AAOP;;;;;;;AAKO,EAAA,UAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,UAAlB,EAAoC;AAChC,WAAO,WAAW,CAAC,MAAZ,CAAmB,KAAK,cAAL,CAAoB,UAApB,CAAnB,CAAP;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,UAAjB,EAAmC;AAC/B,SAAK,eAAL,IAAwB,UAAxB;AACA,SAAK,UAAL,IAAmB,UAAnB;AACH,GAHM;;AAIX,SAAA,UAAA;AAAC,CA1ED,EAAA","sourcesContent":["import { StringTools } from './stringTools';\r\n\r\n/**\r\n * Interface for a data buffer\r\n */\r\nexport interface IDataBuffer {\r\n    /**\r\n     * Reads bytes from the data buffer.\r\n     * @param byteOffset The byte offset to read\r\n     * @param byteLength The byte length to read\r\n     * @returns A promise that resolves when the bytes are read\r\n     */\r\n    readAsync(byteOffset: number, byteLength: number): Promise<ArrayBufferView>;\r\n\r\n    /**\r\n     * The byte length of the buffer.\r\n     */\r\n    readonly byteLength: number;\r\n}\r\n\r\n/**\r\n * Utility class for reading from a data buffer\r\n */\r\nexport class DataReader {\r\n    /**\r\n     * The data buffer associated with this data reader.\r\n     */\r\n    public readonly buffer: IDataBuffer;\r\n\r\n    /**\r\n     * The current byte offset from the beginning of the data buffer.\r\n     */\r\n    public byteOffset = 0;\r\n\r\n    private _dataView: DataView;\r\n    private _dataByteOffset: number;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param buffer The buffer to read\r\n     */\r\n    constructor(buffer: IDataBuffer) {\r\n        this.buffer = buffer;\r\n    }\r\n\r\n    /**\r\n     * Loads the given byte length.\r\n     * @param byteLength The byte length to load\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    public loadAsync(byteLength: number): Promise<void> {\r\n        return this.buffer.readAsync(this.byteOffset, byteLength).then((data) => {\r\n            this._dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n            this._dataByteOffset = 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read a unsigned 32-bit integer from the currently loaded data range.\r\n     * @returns The 32-bit integer read\r\n     */\r\n    public readUint32(): number {\r\n        const value = this._dataView.getUint32(this._dataByteOffset, true);\r\n        this._dataByteOffset += 4;\r\n        this.byteOffset += 4;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a byte array from the currently loaded data range.\r\n     * @param byteLength The byte length to read\r\n     * @returns The byte array read\r\n     */\r\n    public readUint8Array(byteLength: number): Uint8Array {\r\n        const value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._dataByteOffset, byteLength);\r\n        this._dataByteOffset += byteLength;\r\n        this.byteOffset += byteLength;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a string from the currently loaded data range.\r\n     * @param byteLength The byte length to read\r\n     * @returns The string read\r\n     */\r\n    public readString(byteLength: number): string {\r\n        return StringTools.Decode(this.readUint8Array(byteLength));\r\n    }\r\n\r\n    /**\r\n     * Skips the given byte length the currently loaded data range.\r\n     * @param byteLength The byte length to skip\r\n     */\r\n    public skipBytes(byteLength: number): void {\r\n        this._dataByteOffset += byteLength;\r\n        this.byteOffset += byteLength;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}