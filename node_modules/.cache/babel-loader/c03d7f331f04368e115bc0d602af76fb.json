{"ast":null,"code":"/**\r\n * Class used to represent a viewport on screen\r\n */\nvar Viewport =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a Viewport object located at (x, y) and sized (width, height)\r\n   * @param x defines viewport left coordinate\r\n   * @param y defines viewport top coordinate\r\n   * @param width defines the viewport width\r\n   * @param height defines the viewport height\r\n   */\n  function Viewport(\n  /** viewport left coordinate */\n  x,\n  /** viewport top coordinate */\n  y,\n  /**viewport width */\n  width,\n  /** viewport height */\n  height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n  /**\r\n   * Creates a new viewport using absolute sizing (from 0-> width, 0-> height instead of 0->1)\r\n   * @param renderWidth defines the rendering width\r\n   * @param renderHeight defines the rendering height\r\n   * @returns a new Viewport\r\n   */\n\n\n  Viewport.prototype.toGlobal = function (renderWidth, renderHeight) {\n    return new Viewport(this.x * renderWidth, this.y * renderHeight, this.width * renderWidth, this.height * renderHeight);\n  };\n  /**\r\n   * Stores absolute viewport value into a target viewport (from 0-> width, 0-> height instead of 0->1)\r\n   * @param renderWidth defines the rendering width\r\n   * @param renderHeight defines the rendering height\r\n   * @param ref defines the target viewport\r\n   * @returns the current viewport\r\n   */\n\n\n  Viewport.prototype.toGlobalToRef = function (renderWidth, renderHeight, ref) {\n    ref.x = this.x * renderWidth;\n    ref.y = this.y * renderHeight;\n    ref.width = this.width * renderWidth;\n    ref.height = this.height * renderHeight;\n    return this;\n  };\n  /**\r\n   * Returns a new Viewport copied from the current one\r\n   * @returns a new Viewport\r\n   */\n\n\n  Viewport.prototype.clone = function () {\n    return new Viewport(this.x, this.y, this.width, this.height);\n  };\n\n  return Viewport;\n}();\n\nexport { Viewport };","map":{"version":3,"sources":["../../../sourceES6/core/Maths/math.viewport.ts"],"names":[],"mappings":"AACA;;;AAGA,IAAA,QAAA;AAAA;AAAA,YAAA;AACI;;;;;;;AAOA,WAAA,QAAA;AACI;AACO,EAAA,CAFX;AAGI;AACO,EAAA,CAJX;AAKI;AACO,EAAA,KANX;AAOI;AACO,EAAA,MARX,EAQyB;AANd,SAAA,CAAA,GAAA,CAAA;AAEA,SAAA,CAAA,GAAA,CAAA;AAEA,SAAA,KAAA,GAAA,KAAA;AAEA,SAAA,MAAA,GAAA,MAAA;AACV;AAED;;;;;;;;AAMO,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,WAAhB,EAAqC,YAArC,EAAyD;AACrD,WAAO,IAAI,QAAJ,CAAa,KAAK,CAAL,GAAS,WAAtB,EAAmC,KAAK,CAAL,GAAS,YAA5C,EAA0D,KAAK,KAAL,GAAa,WAAvE,EAAoF,KAAK,MAAL,GAAc,YAAlG,CAAP;AACH,GAFM;AAIP;;;;;;;;;AAOO,EAAA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,WAArB,EAA0C,YAA1C,EAAgE,GAAhE,EAA6E;AACzE,IAAA,GAAG,CAAC,CAAJ,GAAQ,KAAK,CAAL,GAAS,WAAjB;AACA,IAAA,GAAG,CAAC,CAAJ,GAAQ,KAAK,CAAL,GAAS,YAAjB;AACA,IAAA,GAAG,CAAC,KAAJ,GAAY,KAAK,KAAL,GAAa,WAAzB;AACA,IAAA,GAAG,CAAC,MAAJ,GAAa,KAAK,MAAL,GAAc,YAA3B;AACA,WAAO,IAAP;AACH,GANM;AAQP;;;;;;AAIO,EAAA,QAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACI,WAAO,IAAI,QAAJ,CAAa,KAAK,CAAlB,EAAqB,KAAK,CAA1B,EAA6B,KAAK,KAAlC,EAAyC,KAAK,MAA9C,CAAP;AACH,GAFM;;AAGX,SAAA,QAAA;AAAC,CAnDD,EAAA","sourcesContent":["\r\n/**\r\n * Class used to represent a viewport on screen\r\n */\r\nexport class Viewport {\r\n    /**\r\n     * Creates a Viewport object located at (x, y) and sized (width, height)\r\n     * @param x defines viewport left coordinate\r\n     * @param y defines viewport top coordinate\r\n     * @param width defines the viewport width\r\n     * @param height defines the viewport height\r\n     */\r\n    constructor(\r\n        /** viewport left coordinate */\r\n        public x: number,\r\n        /** viewport top coordinate */\r\n        public y: number,\r\n        /**viewport width */\r\n        public width: number,\r\n        /** viewport height */\r\n        public height: number) {\r\n    }\r\n\r\n    /**\r\n     * Creates a new viewport using absolute sizing (from 0-> width, 0-> height instead of 0->1)\r\n     * @param renderWidth defines the rendering width\r\n     * @param renderHeight defines the rendering height\r\n     * @returns a new Viewport\r\n     */\r\n    public toGlobal(renderWidth: number, renderHeight: number): Viewport {\r\n        return new Viewport(this.x * renderWidth, this.y * renderHeight, this.width * renderWidth, this.height * renderHeight);\r\n    }\r\n\r\n    /**\r\n     * Stores absolute viewport value into a target viewport (from 0-> width, 0-> height instead of 0->1)\r\n     * @param renderWidth defines the rendering width\r\n     * @param renderHeight defines the rendering height\r\n     * @param ref defines the target viewport\r\n     * @returns the current viewport\r\n     */\r\n    public toGlobalToRef(renderWidth: number, renderHeight: number, ref: Viewport): Viewport {\r\n        ref.x = this.x * renderWidth;\r\n        ref.y = this.y * renderHeight;\r\n        ref.width = this.width * renderWidth;\r\n        ref.height = this.height * renderHeight;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Viewport copied from the current one\r\n     * @returns a new Viewport\r\n     */\r\n    public clone(): Viewport {\r\n        return new Viewport(this.x, this.y, this.width, this.height);\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}