{"ast":null,"code":"import { Vector3, Vector2 } from \"../../Maths/math.vector\";\nimport { Mesh } from \"../mesh\";\nimport { VertexData } from \"../mesh.vertexData\";\n\nVertexData.CreateIcoSphere = function (options) {\n  var sideOrientation = options.sideOrientation || VertexData.DEFAULTSIDE;\n  var radius = options.radius || 1;\n  var flat = options.flat === undefined ? true : options.flat;\n  var subdivisions = options.subdivisions || 4;\n  var radiusX = options.radiusX || radius;\n  var radiusY = options.radiusY || radius;\n  var radiusZ = options.radiusZ || radius;\n  var t = (1 + Math.sqrt(5)) / 2; // 12 vertex x,y,z\n\n  var ico_vertices = [-1, t, -0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, -t, 0, 1, -t, 0, -1, t, 0, 1, t, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, -1 // v8-11\n  ]; // index of 3 vertex makes a face of icopshere\n\n  var ico_indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 12, 22, 23, 1, 5, 20, 5, 11, 4, 23, 22, 13, 22, 18, 6, 7, 1, 8, 14, 21, 4, 14, 4, 2, 16, 13, 6, 15, 6, 19, 3, 8, 9, 4, 21, 5, 13, 17, 23, 6, 13, 22, 19, 6, 18, 9, 8, 1]; // vertex for uv have aliased position, not for UV\n\n  var vertices_unalias_id = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, // vertex alias\n  0, 2, 3, 3, 3, 4, 7, 8, 9, 9, 10, 11 // 23: B + 12\n  ]; // uv as integer step (not pixels !)\n\n  var ico_vertexuv = [5, 1, 3, 1, 6, 4, 0, 0, 5, 3, 4, 2, 2, 2, 4, 0, 2, 0, 1, 1, 6, 0, 6, 2, // vertex alias (for same vertex on different faces)\n  0, 4, 3, 3, 4, 4, 3, 1, 4, 2, 4, 4, 0, 2, 1, 1, 2, 2, 3, 3, 1, 3, 2, 4 // 23: B + 12\n  ]; // Vertices[0, 1, ...9, A, B] : position on UV plane\n  // '+' indicate duplicate position to be fixed (3,9:0,2,3,4,7,8,A,B)\n  // First island of uv mapping\n  // v = 4h          3+  2\n  // v = 3h        9+  4\n  // v = 2h      9+  5   B\n  // v = 1h    9   1   0\n  // v = 0h  3   8   7   A\n  //     u = 0 1 2 3 4 5 6  *a\n  // Second island of uv mapping\n  // v = 4h  0+  B+  4+\n  // v = 3h    A+  2+\n  // v = 2h  7+  6   3+\n  // v = 1h    8+  3+\n  // v = 0h\n  //     u = 0 1 2 3 4 5 6  *a\n  // Face layout on texture UV mapping\n  // ============\n  // \\ 4  /\\ 16 /   ======\n  //  \\  /  \\  /   /\\ 11 /\n  //   \\/ 7  \\/   /  \\  /\n  //    =======  / 10 \\/\n  //   /\\ 17 /\\  =======\n  //  /  \\  /  \\ \\ 15 /\\\n  // / 8  \\/ 12 \\ \\  /  \\\n  // ============  \\/ 6  \\\n  // \\ 18 /\\  ============\n  //  \\  /  \\ \\ 5  /\\ 0  /\n  //   \\/ 13 \\ \\  /  \\  /\n  //   =======  \\/ 1  \\/\n  //       =============\n  //      /\\ 19 /\\  2 /\\\n  //     /  \\  /  \\  /  \\\n  //    / 14 \\/ 9  \\/  3 \\\n  //   ===================\n  // uv step is u:1 or 0.5, v:cos(30)=sqrt(3)/2, ratio approx is 84/97\n\n  var ustep = 138 / 1024;\n  var vstep = 239 / 1024;\n  var uoffset = 60 / 1024;\n  var voffset = 26 / 1024; // Second island should have margin, not to touch the first island\n  // avoid any borderline artefact in pixel rounding\n\n  var island_u_offset = -40 / 1024;\n  var island_v_offset = +20 / 1024; // face is either island 0 or 1 :\n  // second island is for faces : [4, 7, 8, 12, 13, 16, 17, 18]\n\n  var island = [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0 //  15 - 19\n  ];\n  var indices = new Array();\n  var positions = new Array();\n  var normals = new Array();\n  var uvs = new Array();\n  var current_indice = 0; // prepare array of 3 vector (empty) (to be worked in place, shared for each face)\n\n  var face_vertex_pos = new Array(3);\n  var face_vertex_uv = new Array(3);\n  var v012;\n\n  for (v012 = 0; v012 < 3; v012++) {\n    face_vertex_pos[v012] = Vector3.Zero();\n    face_vertex_uv[v012] = Vector2.Zero();\n  } // create all with normals\n\n\n  for (var face = 0; face < 20; face++) {\n    // 3 vertex per face\n    for (v012 = 0; v012 < 3; v012++) {\n      // look up vertex 0,1,2 to its index in 0 to 11 (or 23 including alias)\n      var v_id = ico_indices[3 * face + v012]; // vertex have 3D position (x,y,z)\n\n      face_vertex_pos[v012].copyFromFloats(ico_vertices[3 * vertices_unalias_id[v_id]], ico_vertices[3 * vertices_unalias_id[v_id] + 1], ico_vertices[3 * vertices_unalias_id[v_id] + 2]); // Normalize to get normal, then scale to radius\n\n      face_vertex_pos[v012].normalize().scaleInPlace(radius); // uv Coordinates from vertex ID\n\n      face_vertex_uv[v012].copyFromFloats(ico_vertexuv[2 * v_id] * ustep + uoffset + island[face] * island_u_offset, ico_vertexuv[2 * v_id + 1] * vstep + voffset + island[face] * island_v_offset);\n    } // Subdivide the face (interpolate pos, norm, uv)\n    // - pos is linear interpolation, then projected to sphere (converge polyhedron to sphere)\n    // - norm is linear interpolation of vertex corner normal\n    //   (to be checked if better to re-calc from face vertex, or if approximation is OK ??? )\n    // - uv is linear interpolation\n    //\n    // Topology is as below for sub-divide by 2\n    // vertex shown as v0,v1,v2\n    // interp index is i1 to progress in range [v0,v1[\n    // interp index is i2 to progress in range [v0,v2[\n    // face index as  (i1,i2)  for /\\  : (i1,i2),(i1+1,i2),(i1,i2+1)\n    //            and (i1,i2)' for \\/  : (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\n    //\n    //\n    //                    i2    v2\n    //                    ^    ^\n    //                   /    / \\\n    //                  /    /   \\\n    //                 /    /     \\\n    //                /    / (0,1) \\\n    //               /    #---------\\\n    //              /    / \\ (0,0)'/ \\\n    //             /    /   \\     /   \\\n    //            /    /     \\   /     \\\n    //           /    / (0,0) \\ / (1,0) \\\n    //          /    #---------#---------\\\n    //              v0                    v1\n    //\n    //              --------------------> i1\n    //\n    // interp of (i1,i2):\n    //  along i2 :  x0=lerp(v0,v2, i2/S) <---> x1=lerp(v1,v2, i2/S)\n    //  along i1 :  lerp(x0,x1, i1/(S-i2))\n    //\n    // centroid of triangle is needed to get help normal computation\n    //  (c1,c2) are used for centroid location\n\n\n    var interp_vertex = function (i1, i2, c1, c2) {\n      // vertex is interpolated from\n      //   - face_vertex_pos[0..2]\n      //   - face_vertex_uv[0..2]\n      var pos_x0 = Vector3.Lerp(face_vertex_pos[0], face_vertex_pos[2], i2 / subdivisions);\n      var pos_x1 = Vector3.Lerp(face_vertex_pos[1], face_vertex_pos[2], i2 / subdivisions);\n      var pos_interp = subdivisions === i2 ? face_vertex_pos[2] : Vector3.Lerp(pos_x0, pos_x1, i1 / (subdivisions - i2));\n      pos_interp.normalize();\n      var vertex_normal;\n\n      if (flat) {\n        // in flat mode, recalculate normal as face centroid normal\n        var centroid_x0 = Vector3.Lerp(face_vertex_pos[0], face_vertex_pos[2], c2 / subdivisions);\n        var centroid_x1 = Vector3.Lerp(face_vertex_pos[1], face_vertex_pos[2], c2 / subdivisions);\n        vertex_normal = Vector3.Lerp(centroid_x0, centroid_x1, c1 / (subdivisions - c2));\n      } else {\n        // in smooth mode, recalculate normal from each single vertex position\n        vertex_normal = new Vector3(pos_interp.x, pos_interp.y, pos_interp.z);\n      } // Vertex normal need correction due to X,Y,Z radius scaling\n\n\n      vertex_normal.x /= radiusX;\n      vertex_normal.y /= radiusY;\n      vertex_normal.z /= radiusZ;\n      vertex_normal.normalize();\n      var uv_x0 = Vector2.Lerp(face_vertex_uv[0], face_vertex_uv[2], i2 / subdivisions);\n      var uv_x1 = Vector2.Lerp(face_vertex_uv[1], face_vertex_uv[2], i2 / subdivisions);\n      var uv_interp = subdivisions === i2 ? face_vertex_uv[2] : Vector2.Lerp(uv_x0, uv_x1, i1 / (subdivisions - i2));\n      positions.push(pos_interp.x * radiusX, pos_interp.y * radiusY, pos_interp.z * radiusZ);\n      normals.push(vertex_normal.x, vertex_normal.y, vertex_normal.z);\n      uvs.push(uv_interp.x, uv_interp.y); // push each vertex has member of a face\n      // Same vertex can bleong to multiple face, it is pushed multiple time (duplicate vertex are present)\n\n      indices.push(current_indice);\n      current_indice++;\n    };\n\n    for (var i2 = 0; i2 < subdivisions; i2++) {\n      for (var i1 = 0; i1 + i2 < subdivisions; i1++) {\n        // face : (i1,i2)  for /\\  :\n        // interp for : (i1,i2),(i1+1,i2),(i1,i2+1)\n        interp_vertex(i1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\n        interp_vertex(i1 + 1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\n        interp_vertex(i1, i2 + 1, i1 + 1.0 / 3, i2 + 1.0 / 3);\n\n        if (i1 + i2 + 1 < subdivisions) {\n          // face : (i1,i2)' for \\/  :\n          // interp for (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\n          interp_vertex(i1 + 1, i2, i1 + 2.0 / 3, i2 + 2.0 / 3);\n          interp_vertex(i1 + 1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\n          interp_vertex(i1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\n        }\n      }\n    }\n  } // Sides\n\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs); // Result\n\n\n  var vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  return vertexData;\n};\n\nMesh.CreateIcoSphere = function (name, options, scene) {\n  return IcoSphereBuilder.CreateIcoSphere(name, options, scene);\n};\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\n\n\nvar IcoSphereBuilder =\n/** @class */\nfunction () {\n  function IcoSphereBuilder() {}\n  /**\r\n   * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\r\n   * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\r\n   * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value of `radius`)\r\n   * * The parameter `subdivisions` sets the number of subdivisions (postive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\r\n   * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\r\n   * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n   * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n   * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n   * @param name defines the name of the mesh\r\n   * @param options defines the options used to create the mesh\r\n   * @param scene defines the hosting scene\r\n   * @returns the icosahedron mesh\r\n   * @see https://doc.babylonjs.com/how_to/polyhedra_shapes#icosphere\r\n   */\n\n\n  IcoSphereBuilder.CreateIcoSphere = function (name, options, scene) {\n    if (scene === void 0) {\n      scene = null;\n    }\n\n    var sphere = new Mesh(name, scene);\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n    sphere._originalBuilderSideOrientation = options.sideOrientation;\n    var vertexData = VertexData.CreateIcoSphere(options);\n    vertexData.applyToMesh(sphere, options.updatable);\n    return sphere;\n  };\n\n  return IcoSphereBuilder;\n}();\n\nexport { IcoSphereBuilder };","map":{"version":3,"sources":["../../../../sourceES6/core/Meshes/Builders/icoSphereBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene } from \"../../scene\";\r\nimport { Vector4, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Mesh, _CreationDataStorage } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { Nullable } from '../../types';\r\n\r\nVertexData.CreateIcoSphere = function(options: { radius?: number, radiusX?: number, radiusY?: number, radiusZ?: number, flat?: boolean, subdivisions?: number, sideOrientation?: number, frontUVs?: Vector4, backUVs?: Vector4 }): VertexData {\r\n    var sideOrientation = options.sideOrientation || VertexData.DEFAULTSIDE;\r\n    var radius = options.radius || 1;\r\n    var flat = (options.flat === undefined) ? true : options.flat;\r\n    var subdivisions = options.subdivisions || 4;\r\n    var radiusX = options.radiusX || radius;\r\n    var radiusY = options.radiusY || radius;\r\n    var radiusZ = options.radiusZ || radius;\r\n\r\n    var t = (1 + Math.sqrt(5)) / 2;\r\n\r\n    // 12 vertex x,y,z\r\n    var ico_vertices = [\r\n        -1, t, -0, 1, t, 0, -1, -t, 0, 1, -t, 0, // v0-3\r\n        0, -1, -t, 0, 1, -t, 0, -1, t, 0, 1, t, // v4-7\r\n        t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, -1  // v8-11\r\n    ];\r\n\r\n    // index of 3 vertex makes a face of icopshere\r\n    var ico_indices = [\r\n        0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 12, 22, 23,\r\n        1, 5, 20, 5, 11, 4, 23, 22, 13, 22, 18, 6, 7, 1, 8,\r\n        14, 21, 4, 14, 4, 2, 16, 13, 6, 15, 6, 19, 3, 8, 9,\r\n        4, 21, 5, 13, 17, 23, 6, 13, 22, 19, 6, 18, 9, 8, 1\r\n    ];\r\n    // vertex for uv have aliased position, not for UV\r\n    var vertices_unalias_id = [\r\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\r\n        // vertex alias\r\n        0,  // 12: 0 + 12\r\n        2,  // 13: 2 + 11\r\n        3,  // 14: 3 + 11\r\n        3,  // 15: 3 + 12\r\n        3,  // 16: 3 + 13\r\n        4,  // 17: 4 + 13\r\n        7,  // 18: 7 + 11\r\n        8,  // 19: 8 + 11\r\n        9,  // 20: 9 + 11\r\n        9,  // 21: 9 + 12\r\n        10, // 22: A + 12\r\n        11 // 23: B + 12\r\n    ];\r\n\r\n    // uv as integer step (not pixels !)\r\n    var ico_vertexuv = [\r\n        5, 1, 3, 1, 6, 4, 0, 0,  // v0-3\r\n        5, 3, 4, 2, 2, 2, 4, 0,  // v4-7\r\n        2, 0, 1, 1, 6, 0, 6, 2,  // v8-11\r\n        // vertex alias (for same vertex on different faces)\r\n        0, 4, // 12: 0 + 12\r\n        3, 3, // 13: 2 + 11\r\n        4, 4, // 14: 3 + 11\r\n        3, 1, // 15: 3 + 12\r\n        4, 2, // 16: 3 + 13\r\n        4, 4, // 17: 4 + 13\r\n        0, 2, // 18: 7 + 11\r\n        1, 1, // 19: 8 + 11\r\n        2, 2, // 20: 9 + 11\r\n        3, 3, // 21: 9 + 12\r\n        1, 3, // 22: A + 12\r\n        2, 4  // 23: B + 12\r\n    ];\r\n\r\n    // Vertices[0, 1, ...9, A, B] : position on UV plane\r\n    // '+' indicate duplicate position to be fixed (3,9:0,2,3,4,7,8,A,B)\r\n    // First island of uv mapping\r\n    // v = 4h          3+  2\r\n    // v = 3h        9+  4\r\n    // v = 2h      9+  5   B\r\n    // v = 1h    9   1   0\r\n    // v = 0h  3   8   7   A\r\n    //     u = 0 1 2 3 4 5 6  *a\r\n\r\n    // Second island of uv mapping\r\n    // v = 4h  0+  B+  4+\r\n    // v = 3h    A+  2+\r\n    // v = 2h  7+  6   3+\r\n    // v = 1h    8+  3+\r\n    // v = 0h\r\n    //     u = 0 1 2 3 4 5 6  *a\r\n\r\n    // Face layout on texture UV mapping\r\n    // ============\r\n    // \\ 4  /\\ 16 /   ======\r\n    //  \\  /  \\  /   /\\ 11 /\r\n    //   \\/ 7  \\/   /  \\  /\r\n    //    =======  / 10 \\/\r\n    //   /\\ 17 /\\  =======\r\n    //  /  \\  /  \\ \\ 15 /\\\r\n    // / 8  \\/ 12 \\ \\  /  \\\r\n    // ============  \\/ 6  \\\r\n    // \\ 18 /\\  ============\r\n    //  \\  /  \\ \\ 5  /\\ 0  /\r\n    //   \\/ 13 \\ \\  /  \\  /\r\n    //   =======  \\/ 1  \\/\r\n    //       =============\r\n    //      /\\ 19 /\\  2 /\\\r\n    //     /  \\  /  \\  /  \\\r\n    //    / 14 \\/ 9  \\/  3 \\\r\n    //   ===================\r\n\r\n    // uv step is u:1 or 0.5, v:cos(30)=sqrt(3)/2, ratio approx is 84/97\r\n    var ustep = 138 / 1024;\r\n    var vstep = 239 / 1024;\r\n    var uoffset = 60 / 1024;\r\n    var voffset = 26 / 1024;\r\n    // Second island should have margin, not to touch the first island\r\n    // avoid any borderline artefact in pixel rounding\r\n    var island_u_offset = -40 / 1024;\r\n    var island_v_offset = +20 / 1024;\r\n    // face is either island 0 or 1 :\r\n    // second island is for faces : [4, 7, 8, 12, 13, 16, 17, 18]\r\n    var island = [\r\n        0, 0, 0, 0, 1, //  0 - 4\r\n        0, 0, 1, 1, 0, //  5 - 9\r\n        0, 0, 1, 1, 0, //  10 - 14\r\n        0, 1, 1, 1, 0 //  15 - 19\r\n    ];\r\n\r\n    var indices = new Array<number>();\r\n    var positions = new Array<number>();\r\n    var normals = new Array<number>();\r\n    var uvs = new Array<number>();\r\n\r\n    var current_indice = 0;\r\n    // prepare array of 3 vector (empty) (to be worked in place, shared for each face)\r\n    var face_vertex_pos = new Array(3);\r\n    var face_vertex_uv = new Array(3);\r\n    var v012;\r\n    for (v012 = 0; v012 < 3; v012++) {\r\n        face_vertex_pos[v012] = Vector3.Zero();\r\n        face_vertex_uv[v012] = Vector2.Zero();\r\n    }\r\n    // create all with normals\r\n    for (var face = 0; face < 20; face++) {\r\n        // 3 vertex per face\r\n        for (v012 = 0; v012 < 3; v012++) {\r\n            // look up vertex 0,1,2 to its index in 0 to 11 (or 23 including alias)\r\n            var v_id = ico_indices[3 * face + v012];\r\n            // vertex have 3D position (x,y,z)\r\n            face_vertex_pos[v012].copyFromFloats(\r\n                ico_vertices[3 * vertices_unalias_id[v_id]],\r\n                ico_vertices[3 * vertices_unalias_id[v_id] + 1],\r\n                ico_vertices[3 * vertices_unalias_id[v_id] + 2]);\r\n            // Normalize to get normal, then scale to radius\r\n            face_vertex_pos[v012].normalize().scaleInPlace(radius);\r\n\r\n            // uv Coordinates from vertex ID\r\n            face_vertex_uv[v012].copyFromFloats(\r\n                ico_vertexuv[2 * v_id] * ustep + uoffset + island[face] * island_u_offset,\r\n                ico_vertexuv[2 * v_id + 1] * vstep + voffset + island[face] * island_v_offset);\r\n        }\r\n\r\n        // Subdivide the face (interpolate pos, norm, uv)\r\n        // - pos is linear interpolation, then projected to sphere (converge polyhedron to sphere)\r\n        // - norm is linear interpolation of vertex corner normal\r\n        //   (to be checked if better to re-calc from face vertex, or if approximation is OK ??? )\r\n        // - uv is linear interpolation\r\n        //\r\n        // Topology is as below for sub-divide by 2\r\n        // vertex shown as v0,v1,v2\r\n        // interp index is i1 to progress in range [v0,v1[\r\n        // interp index is i2 to progress in range [v0,v2[\r\n        // face index as  (i1,i2)  for /\\  : (i1,i2),(i1+1,i2),(i1,i2+1)\r\n        //            and (i1,i2)' for \\/  : (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\r\n        //\r\n        //\r\n        //                    i2    v2\r\n        //                    ^    ^\r\n        //                   /    / \\\r\n        //                  /    /   \\\r\n        //                 /    /     \\\r\n        //                /    / (0,1) \\\r\n        //               /    #---------\\\r\n        //              /    / \\ (0,0)'/ \\\r\n        //             /    /   \\     /   \\\r\n        //            /    /     \\   /     \\\r\n        //           /    / (0,0) \\ / (1,0) \\\r\n        //          /    #---------#---------\\\r\n        //              v0                    v1\r\n        //\r\n        //              --------------------> i1\r\n        //\r\n        // interp of (i1,i2):\r\n        //  along i2 :  x0=lerp(v0,v2, i2/S) <---> x1=lerp(v1,v2, i2/S)\r\n        //  along i1 :  lerp(x0,x1, i1/(S-i2))\r\n        //\r\n        // centroid of triangle is needed to get help normal computation\r\n        //  (c1,c2) are used for centroid location\r\n\r\n        var interp_vertex = (i1: number, i2: number, c1: number, c2: number) => {\r\n            // vertex is interpolated from\r\n            //   - face_vertex_pos[0..2]\r\n            //   - face_vertex_uv[0..2]\r\n            var pos_x0 = Vector3.Lerp(face_vertex_pos[0], face_vertex_pos[2], i2 / subdivisions);\r\n            var pos_x1 = Vector3.Lerp(face_vertex_pos[1], face_vertex_pos[2], i2 / subdivisions);\r\n            var pos_interp = (subdivisions === i2) ? face_vertex_pos[2] : Vector3.Lerp(pos_x0, pos_x1, i1 / (subdivisions - i2));\r\n            pos_interp.normalize();\r\n\r\n            var vertex_normal;\r\n            if (flat) {\r\n                // in flat mode, recalculate normal as face centroid normal\r\n                var centroid_x0 = Vector3.Lerp(face_vertex_pos[0], face_vertex_pos[2], c2 / subdivisions);\r\n                var centroid_x1 = Vector3.Lerp(face_vertex_pos[1], face_vertex_pos[2], c2 / subdivisions);\r\n                vertex_normal = Vector3.Lerp(centroid_x0, centroid_x1, c1 / (subdivisions - c2));\r\n            } else {\r\n                // in smooth mode, recalculate normal from each single vertex position\r\n                vertex_normal = new Vector3(pos_interp.x, pos_interp.y, pos_interp.z);\r\n            }\r\n            // Vertex normal need correction due to X,Y,Z radius scaling\r\n            vertex_normal.x /= radiusX;\r\n            vertex_normal.y /= radiusY;\r\n            vertex_normal.z /= radiusZ;\r\n            vertex_normal.normalize();\r\n\r\n            var uv_x0 = Vector2.Lerp(face_vertex_uv[0], face_vertex_uv[2], i2 / subdivisions);\r\n            var uv_x1 = Vector2.Lerp(face_vertex_uv[1], face_vertex_uv[2], i2 / subdivisions);\r\n            var uv_interp = (subdivisions === i2) ? face_vertex_uv[2] : Vector2.Lerp(uv_x0, uv_x1, i1 / (subdivisions - i2));\r\n            positions.push(pos_interp.x * radiusX, pos_interp.y * radiusY, pos_interp.z * radiusZ);\r\n            normals.push(vertex_normal.x, vertex_normal.y, vertex_normal.z);\r\n            uvs.push(uv_interp.x, uv_interp.y);\r\n            // push each vertex has member of a face\r\n            // Same vertex can bleong to multiple face, it is pushed multiple time (duplicate vertex are present)\r\n            indices.push(current_indice);\r\n            current_indice++;\r\n        };\r\n\r\n        for (var i2 = 0; i2 < subdivisions; i2++) {\r\n            for (var i1 = 0; i1 + i2 < subdivisions; i1++) {\r\n                // face : (i1,i2)  for /\\  :\r\n                // interp for : (i1,i2),(i1+1,i2),(i1,i2+1)\r\n                interp_vertex(i1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                interp_vertex(i1 + 1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                interp_vertex(i1, i2 + 1, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                if (i1 + i2 + 1 < subdivisions) {\r\n                    // face : (i1,i2)' for \\/  :\r\n                    // interp for (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\r\n                    interp_vertex(i1 + 1, i2, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                    interp_vertex(i1 + 1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                    interp_vertex(i1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    var vertexData = new VertexData();\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    return vertexData;\r\n};\r\n\r\nMesh.CreateIcoSphere = (name: string, options: { radius?: number, flat?: boolean, subdivisions?: number, sideOrientation?: number, updatable?: boolean }, scene: Scene): Mesh => {\r\n    return IcoSphereBuilder.CreateIcoSphere(name, options, scene);\r\n};\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\r\nexport class IcoSphereBuilder {\r\n    /**\r\n     * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\r\n     * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\r\n     * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value of `radius`)\r\n     * * The parameter `subdivisions` sets the number of subdivisions (postive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\r\n     * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\r\n     * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n     * @param name defines the name of the mesh\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns the icosahedron mesh\r\n     * @see https://doc.babylonjs.com/how_to/polyhedra_shapes#icosphere\r\n     */\r\n    public static CreateIcoSphere(name: string, options: { radius?: number, radiusX?: number, radiusY?: number, radiusZ?: number, flat?: boolean, subdivisions?: number, sideOrientation?: number, frontUVs?: Vector4, backUVs?: Vector4, updatable?: boolean }, scene: Nullable<Scene> = null): Mesh {\r\n        var sphere = new Mesh(name, scene);\r\n\r\n        options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n        sphere._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n        var vertexData = VertexData.CreateIcoSphere(options);\r\n\r\n        vertexData.applyToMesh(sphere, options.updatable);\r\n\r\n        return sphere;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}