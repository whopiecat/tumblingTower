{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VRDeviceOrientationFreeCamera } from \"./vrDeviceOrientationFreeCamera\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Node } from \"../../node\";\nimport \"../../Gamepads/gamepadSceneComponent\";\nNode.AddNodeConstructor(\"VRDeviceOrientationGamepadCamera\", function (name, scene) {\n  return function () {\n    return new VRDeviceOrientationGamepadCamera(name, Vector3.Zero(), scene);\n  };\n});\n/**\r\n * Camera used to simulate VR rendering (based on VRDeviceOrientationFreeCamera)\r\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\r\n */\n\nvar VRDeviceOrientationGamepadCamera =\n/** @class */\nfunction (_super) {\n  __extends(VRDeviceOrientationGamepadCamera, _super);\n  /**\r\n   * Creates a new VRDeviceOrientationGamepadCamera\r\n   * @param name defines camera name\r\n   * @param position defines the start position of the camera\r\n   * @param scene defines the scene the camera belongs to\r\n   * @param compensateDistortion defines if the camera needs to compensate the lens distorsion\r\n   * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n   */\n\n\n  function VRDeviceOrientationGamepadCamera(name, position, scene, compensateDistortion, vrCameraMetrics) {\n    if (compensateDistortion === void 0) {\n      compensateDistortion = true;\n    }\n\n    if (vrCameraMetrics === void 0) {\n      vrCameraMetrics = VRCameraMetrics.GetDefault();\n    }\n\n    var _this = _super.call(this, name, position, scene, compensateDistortion, vrCameraMetrics) || this;\n\n    _this.inputs.addGamepad();\n\n    return _this;\n  }\n  /**\r\n   * Gets camera class name\r\n   * @returns VRDeviceOrientationGamepadCamera\r\n   */\n\n\n  VRDeviceOrientationGamepadCamera.prototype.getClassName = function () {\n    return \"VRDeviceOrientationGamepadCamera\";\n  };\n\n  return VRDeviceOrientationGamepadCamera;\n}(VRDeviceOrientationFreeCamera);\n\nexport { VRDeviceOrientationGamepadCamera };","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/VR/vrDeviceOrientationGamepadCamera.ts"],"names":[],"mappings":";AAAA,SAAS,6BAAT,QAA8C,iCAA9C;AACA,SAAS,eAAT,QAAgC,mBAAhC;AAEA,SAAS,OAAT,QAAwB,yBAAxB;AACA,SAAS,IAAT,QAAqB,YAArB;AAEA,OAAO,sCAAP;AAEA,IAAI,CAAC,kBAAL,CAAwB,kCAAxB,EAA4D,UAAC,IAAD,EAAO,KAAP,EAAY;AACpE,SAAO,YAAA;AAAM,WAAA,IAAI,gCAAJ,CAAqC,IAArC,EAA2C,OAAO,CAAC,IAAR,EAA3C,EAAA,KAAA,CAAA;AAAiE,GAA9E;AACH,CAFD;AAIA;;;;;AAIA,IAAA,gCAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsD,EAAA,SAAA,CAAA,gCAAA,EAAA,MAAA,CAAA;AAElD;;;;;;;;;;AAQA,WAAA,gCAAA,CAAY,IAAZ,EAA0B,QAA1B,EAA6C,KAA7C,EAA2D,oBAA3D,EAAwF,eAAxF,EAAuJ;AAA5F,QAAA,oBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,oBAAA,GAAA,IAAA;AAA2B;;AAAE,QAAA,eAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,eAAA,GAAmC,eAAe,CAAC,UAAhB,EAAnC;AAA+D;;AAAvJ,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,QAAZ,EAAsB,KAAtB,EAA6B,oBAA7B,EAAmD,eAAnD,KAAmE,IADvE;;AAGI,IAAA,KAAI,CAAC,MAAL,CAAY,UAAZ;;;AACH;AAED;;;;;;AAIO,EAAA,gCAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,kCAAP;AACH,GAFM;;AAGX,SAAA,gCAAA;AAAC,CAvBD,CAAsD,6BAAtD,CAAA","sourcesContent":["import { VRDeviceOrientationFreeCamera } from \"./vrDeviceOrientationFreeCamera\";\r\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\n\r\nimport \"../../Gamepads/gamepadSceneComponent\";\r\n\r\nNode.AddNodeConstructor(\"VRDeviceOrientationGamepadCamera\", (name, scene) => {\r\n    return () => new VRDeviceOrientationGamepadCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on VRDeviceOrientationFreeCamera)\r\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\r\n */\r\nexport class VRDeviceOrientationGamepadCamera extends VRDeviceOrientationFreeCamera {\r\n\r\n    /**\r\n     * Creates a new VRDeviceOrientationGamepadCamera\r\n     * @param name defines camera name\r\n     * @param position defines the start position of the camera\r\n     * @param scene defines the scene the camera belongs to\r\n     * @param compensateDistortion defines if the camera needs to compensate the lens distorsion\r\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n     */\r\n    constructor(name: string, position: Vector3, scene: Scene, compensateDistortion = true, vrCameraMetrics: VRCameraMetrics = VRCameraMetrics.GetDefault()) {\r\n        super(name, position, scene, compensateDistortion, vrCameraMetrics);\r\n\r\n        this.inputs.addGamepad();\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns VRDeviceOrientationGamepadCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDeviceOrientationGamepadCamera\";\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}