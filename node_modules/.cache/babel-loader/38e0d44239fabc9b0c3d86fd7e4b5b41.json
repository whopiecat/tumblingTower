{"ast":null,"code":"import { Logger } from \"../Misc/logger\";\n/**\r\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\r\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\r\n */\n\nvar KhronosTextureContainer =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new KhronosTextureContainer\r\n   * @param data contents of the KTX container file\r\n   * @param facesExpected should be either 1 or 6, based whether a cube texture or or\r\n   * @param threeDExpected provision for indicating that data should be a 3D texture, not implemented\r\n   * @param textureArrayExpected provision for indicating that data should be a texture array, not implemented\r\n   */\n  function KhronosTextureContainer(\n  /** contents of the KTX container file */\n  data, facesExpected, threeDExpected, textureArrayExpected) {\n    this.data = data;\n    /**\r\n     * If the container has been made invalid (eg. constructor failed to correctly load array buffer)\r\n     */\n\n    this.isInvalid = false;\n\n    if (!KhronosTextureContainer.IsValid(data)) {\n      this.isInvalid = true;\n      Logger.Error(\"texture missing KTX identifier\");\n      return;\n    } // load the reset of the header in native 32 bit uint\n\n\n    var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    var headerDataView = new DataView(this.data.buffer, this.data.byteOffset + 12, 13 * dataSize);\n    var endianness = headerDataView.getUint32(0, true);\n    var littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\n    if (this.glType !== 0) {\n      Logger.Error(\"only compressed formats currently supported\");\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      Logger.Error(\"only 2D textures currently supported\");\n      return;\n    }\n\n    if (this.numberOfArrayElements !== 0) {\n      Logger.Error(\"texture arrays not currently supported\");\n      return;\n    }\n\n    if (this.numberOfFaces !== facesExpected) {\n      Logger.Error(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\n      return;\n    } // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n\n\n    this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n  }\n  /**\r\n   * Uploads KTX content to a Babylon Texture.\r\n   * It is assumed that the texture has already been created & is currently bound\r\n   * @hidden\r\n   */\n\n\n  KhronosTextureContainer.prototype.uploadLevels = function (texture, loadMipmaps) {\n    switch (this.loadType) {\n      case KhronosTextureContainer.COMPRESSED_2D:\n        this._upload2DCompressedLevels(texture, loadMipmaps);\n\n        break;\n\n      case KhronosTextureContainer.TEX_2D:\n      case KhronosTextureContainer.COMPRESSED_3D:\n      case KhronosTextureContainer.TEX_3D:\n    }\n  };\n\n  KhronosTextureContainer.prototype._upload2DCompressedLevels = function (texture, loadMipmaps) {\n    // initialize width & height for level 1\n    var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n    var width = this.pixelWidth;\n    var height = this.pixelHeight;\n    var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n    for (var level = 0; level < mipmapCount; level++) {\n      var imageSize = new Int32Array(this.data.buffer, this.data.byteOffset + dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n\n      dataOffset += 4; //image data starts from next multiple of 4 offset. Each face refers to same imagesize field above.\n\n      for (var face = 0; face < this.numberOfFaces; face++) {\n        var byteArray = new Uint8Array(this.data.buffer, this.data.byteOffset + dataOffset, imageSize);\n        var engine = texture.getEngine();\n\n        engine._uploadCompressedDataToTextureDirectly(texture, this.glInternalFormat, width, height, byteArray, face, level);\n\n        dataOffset += imageSize; // add size of the image for the next face/mipmap\n\n        dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n      }\n\n      width = Math.max(1.0, width * 0.5);\n      height = Math.max(1.0, height * 0.5);\n    }\n  };\n  /**\r\n   * Checks if the given data starts with a KTX file identifier.\r\n   * @param data the data to check\r\n   * @returns true if the data is a KTX file or false otherwise\r\n   */\n\n\n  KhronosTextureContainer.IsValid = function (data) {\n    if (data.byteLength >= 12) {\n      // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\n      var identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\n\n      if (identifier[0] === 0xAB && identifier[1] === 0x4B && identifier[2] === 0x54 && identifier[3] === 0x58 && identifier[4] === 0x20 && identifier[5] === 0x31 && identifier[6] === 0x31 && identifier[7] === 0xBB && identifier[8] === 0x0D && identifier[9] === 0x0A && identifier[10] === 0x1A && identifier[11] === 0x0A) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n  // load types\n\n  KhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n\n  KhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n\n  KhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\n\n  KhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()\n\n  return KhronosTextureContainer;\n}();\n\nexport { KhronosTextureContainer };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/khronosTextureContainer.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,gBAAvB;AAGA;;;;;AAIA,IAAA,uBAAA;AAAA;AAAA,YAAA;AAmEI;;;;;;;AAOA,WAAA,uBAAA;AACI;AACO,EAAA,IAFX,EAEkC,aAFlC,EAEyD,cAFzD,EAEmF,oBAFnF,EAEiH;AAAtG,SAAA,IAAA,GAAA,IAAA;AAdX;;;;AAGO,SAAA,SAAA,GAAY,KAAZ;;AAYH,QAAI,CAAC,uBAAuB,CAAC,OAAxB,CAAgC,IAAhC,CAAL,EAA4C;AACxC,WAAK,SAAL,GAAiB,IAAjB;AACA,MAAA,MAAM,CAAC,KAAP,CAAa,gCAAb;AACA;AACH,KAL4G,CAO7G;;;AACA,QAAI,QAAQ,GAAG,WAAW,CAAC,iBAA3B;AACA,QAAI,cAAc,GAAG,IAAI,QAAJ,CAAa,KAAK,IAAL,CAAU,MAAvB,EAA+B,KAAK,IAAL,CAAU,UAAV,GAAuB,EAAtD,EAA0D,KAAK,QAA/D,CAArB;AACA,QAAI,UAAU,GAAG,cAAc,CAAC,SAAf,CAAyB,CAAzB,EAA4B,IAA5B,CAAjB;AACA,QAAI,YAAY,GAAG,UAAU,KAAK,UAAlC;AAEA,SAAK,MAAL,GAAc,cAAc,CAAC,SAAf,CAAyB,IAAI,QAA7B,EAAuC,YAAvC,CAAd,CAb6G,CAazC;;AACpE,SAAK,UAAL,GAAkB,cAAc,CAAC,SAAf,CAAyB,IAAI,QAA7B,EAAuC,YAAvC,CAAlB,CAd6G,CAcrC;;AACxE,SAAK,QAAL,GAAgB,cAAc,CAAC,SAAf,CAAyB,IAAI,QAA7B,EAAuC,YAAvC,CAAhB,CAf6G,CAevC;;AACtE,SAAK,gBAAL,GAAwB,cAAc,CAAC,SAAf,CAAyB,IAAI,QAA7B,EAAuC,YAAvC,CAAxB,CAhB6G,CAgB/B;;AAC9E,SAAK,oBAAL,GAA4B,cAAc,CAAC,SAAf,CAAyB,IAAI,QAA7B,EAAuC,YAAvC,CAA5B,CAjB6G,CAiB3B;;AAClF,SAAK,UAAL,GAAkB,cAAc,CAAC,SAAf,CAAyB,IAAI,QAA7B,EAAuC,YAAvC,CAAlB,CAlB6G,CAkBrC;;AACxE,SAAK,WAAL,GAAmB,cAAc,CAAC,SAAf,CAAyB,IAAI,QAA7B,EAAuC,YAAvC,CAAnB,CAnB6G,CAmBpC;;AACzE,SAAK,UAAL,GAAkB,cAAc,CAAC,SAAf,CAAyB,IAAI,QAA7B,EAAuC,YAAvC,CAAlB,CApB6G,CAoBrC;;AACxE,SAAK,qBAAL,GAA6B,cAAc,CAAC,SAAf,CAAyB,IAAI,QAA7B,EAAuC,YAAvC,CAA7B,CArB6G,CAqB1B;;AACnF,SAAK,aAAL,GAAqB,cAAc,CAAC,SAAf,CAAyB,KAAK,QAA9B,EAAwC,YAAxC,CAArB,CAtB6G,CAsBjC;;AAC5E,SAAK,oBAAL,GAA4B,cAAc,CAAC,SAAf,CAAyB,KAAK,QAA9B,EAAwC,YAAxC,CAA5B,CAvB6G,CAuB1B;;AACnF,SAAK,mBAAL,GAA2B,cAAc,CAAC,SAAf,CAAyB,KAAK,QAA9B,EAAwC,YAAxC,CAA3B,CAxB6G,CAwB3B;AAElF;;AACA,QAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACnB,MAAA,MAAM,CAAC,KAAP,CAAa,6CAAb;AACA;AACH,KAHD,MAGO;AACH;AACA,WAAK,oBAAL,GAA4B,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,KAAK,oBAAjB,CAA5B;AACH;;AAED,QAAI,KAAK,WAAL,KAAqB,CAArB,IAA0B,KAAK,UAAL,KAAoB,CAAlD,EAAqD;AACjD,MAAA,MAAM,CAAC,KAAP,CAAa,sCAAb;AACA;AACH;;AAED,QAAI,KAAK,qBAAL,KAA+B,CAAnC,EAAsC;AAClC,MAAA,MAAM,CAAC,KAAP,CAAa,wCAAb;AACA;AACH;;AAED,QAAI,KAAK,aAAL,KAAuB,aAA3B,EAA0C;AACtC,MAAA,MAAM,CAAC,KAAP,CAAa,6BAA6B,aAA7B,GAA6C,cAA7C,GAA8D,KAAK,aAAhF;AACA;AACH,KAhD4G,CAkD7G;AACA;;;AACA,SAAK,QAAL,GAAgB,uBAAuB,CAAC,aAAxC;AACH;AAED;;;;;;;AAKO,EAAA,uBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,OAApB,EAA8C,WAA9C,EAAkE;AAC9D,YAAQ,KAAK,QAAb;AACI,WAAK,uBAAuB,CAAC,aAA7B;AACI,aAAK,yBAAL,CAA+B,OAA/B,EAAwC,WAAxC;;AACA;;AAEJ,WAAK,uBAAuB,CAAC,MAA7B;AACA,WAAK,uBAAuB,CAAC,aAA7B;AACA,WAAK,uBAAuB,CAAC,MAA7B;AAPJ;AASH,GAVM;;AAYC,EAAA,uBAAA,CAAA,SAAA,CAAA,yBAAA,GAAR,UAAkC,OAAlC,EAA4D,WAA5D,EAAgF;AAC5E;AACA,QAAI,UAAU,GAAG,uBAAuB,CAAC,UAAxB,GAAqC,KAAK,mBAA3D;AACA,QAAI,KAAK,GAAG,KAAK,UAAjB;AACA,QAAI,MAAM,GAAG,KAAK,WAAlB;AAEA,QAAI,WAAW,GAAG,WAAW,GAAG,KAAK,oBAAR,GAA+B,CAA5D;;AACA,SAAK,IAAI,KAAK,GAAG,CAAjB,EAAoB,KAAK,GAAG,WAA5B,EAAyC,KAAK,EAA9C,EAAkD;AAC9C,UAAI,SAAS,GAAG,IAAI,UAAJ,CAAe,KAAK,IAAL,CAAU,MAAzB,EAAiC,KAAK,IAAL,CAAU,UAAV,GAAuB,UAAxD,EAAoE,CAApE,EAAuE,CAAvE,CAAhB,CAD8C,CAC6C;;AAC3F,MAAA,UAAU,IAAI,CAAd,CAF8C,CAE7B;;AACjB,WAAK,IAAI,IAAI,GAAG,CAAhB,EAAmB,IAAI,GAAG,KAAK,aAA/B,EAA8C,IAAI,EAAlD,EAAsD;AAClD,YAAI,SAAS,GAAG,IAAI,UAAJ,CAAe,KAAK,IAAL,CAAU,MAAzB,EAAiC,KAAK,IAAL,CAAU,UAAV,GAAuB,UAAxD,EAAoE,SAApE,CAAhB;AAEA,YAAM,MAAM,GAAG,OAAO,CAAC,SAAR,EAAf;;AACA,QAAA,MAAM,CAAC,sCAAP,CAA8C,OAA9C,EAAuD,KAAK,gBAA5D,EAA8E,KAA9E,EAAqF,MAArF,EAA6F,SAA7F,EAAwG,IAAxG,EAA8G,KAA9G;;AAEA,QAAA,UAAU,IAAI,SAAd,CANkD,CAMzB;;AACzB,QAAA,UAAU,IAAI,IAAK,CAAC,SAAS,GAAG,CAAb,IAAkB,CAArC,CAPkD,CAOT;AAC5C;;AACD,MAAA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,KAAK,GAAG,GAAtB,CAAR;AACA,MAAA,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,MAAM,GAAG,GAAvB,CAAT;AACH;AACJ,GAtBO;AAwBR;;;;;;;AAKc,EAAA,uBAAA,CAAA,OAAA,GAAd,UAAsB,IAAtB,EAA2C;AACvC,QAAI,IAAI,CAAC,UAAL,IAAmB,EAAvB,EACA;AACI;AACA,UAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,IAAI,CAAC,MAApB,EAA4B,IAAI,CAAC,UAAjC,EAA6C,EAA7C,CAAnB;;AACA,UAAI,UAAU,CAAC,CAAD,CAAV,KAAkB,IAAlB,IAA0B,UAAU,CAAC,CAAD,CAAV,KAAkB,IAA5C,IAAoD,UAAU,CAAC,CAAD,CAAV,KAAkB,IAAtE,IAA8E,UAAU,CAAC,CAAD,CAAV,KAAkB,IAAhG,IAAwG,UAAU,CAAC,CAAD,CAAV,KAAkB,IAA1H,IAAkI,UAAU,CAAC,CAAD,CAAV,KAAkB,IAApJ,IACA,UAAU,CAAC,CAAD,CAAV,KAAkB,IADlB,IAC0B,UAAU,CAAC,CAAD,CAAV,KAAkB,IAD5C,IACoD,UAAU,CAAC,CAAD,CAAV,KAAkB,IADtE,IAC8E,UAAU,CAAC,CAAD,CAAV,KAAkB,IADhG,IACwG,UAAU,CAAC,EAAD,CAAV,KAAmB,IAD3H,IACmI,UAAU,CAAC,EAAD,CAAV,KAAmB,IAD1J,EACgK;AAC5J,eAAO,IAAP;AACH;AACJ;;AAED,WAAO,KAAP;AACH,GAZa;;AAhLC,EAAA,uBAAA,CAAA,UAAA,GAAa,KAAM,KAAK,CAAxB,CADnB,CAC+C;AAE3C;;AACe,EAAA,uBAAA,CAAA,aAAA,GAAgB,CAAhB,CAJnB,CAIsC;;AACnB,EAAA,uBAAA,CAAA,aAAA,GAAgB,CAAhB,CALnB,CAKsC;;AACnB,EAAA,uBAAA,CAAA,MAAA,GAAS,CAAT,CANnB,CAM+B;;AACZ,EAAA,uBAAA,CAAA,MAAA,GAAS,CAAT,CAPnB,CAO+B;;AAuL/B,SAAA,uBAAA;AAAC,CA9LD,EAAA;;SAAa,uB","sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\n\r\n/**\r\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\r\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\r\n */\r\nexport class KhronosTextureContainer {\r\n    private static HEADER_LEN = 12 + (13 * 4); // identifier + header elements (not including key value meta-data pairs)\r\n\r\n    // load types\r\n    private static COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\r\n    private static COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\r\n    private static TEX_2D = 2; // uses a gl.texImage2D()\r\n    private static TEX_3D = 3; // uses a gl.texImage3D()\r\n\r\n    // elements of the header\r\n    /**\r\n     * Gets the openGL type\r\n     */\r\n    public glType: number;\r\n    /**\r\n     * Gets the openGL type size\r\n     */\r\n    public glTypeSize: number;\r\n    /**\r\n     * Gets the openGL format\r\n     */\r\n    public glFormat: number;\r\n    /**\r\n     * Gets the openGL internal format\r\n     */\r\n    public glInternalFormat: number;\r\n    /**\r\n     * Gets the base internal format\r\n     */\r\n    public glBaseInternalFormat: number;\r\n    /**\r\n     * Gets image width in pixel\r\n     */\r\n    public pixelWidth: number;\r\n    /**\r\n     * Gets image height in pixel\r\n     */\r\n    public pixelHeight: number;\r\n    /**\r\n     * Gets image depth in pixels\r\n     */\r\n    public pixelDepth: number;\r\n    /**\r\n     * Gets the number of array elements\r\n     */\r\n    public numberOfArrayElements: number;\r\n    /**\r\n     * Gets the number of faces\r\n     */\r\n    public numberOfFaces: number;\r\n    /**\r\n     * Gets the number of mipmap levels\r\n     */\r\n    public numberOfMipmapLevels: number;\r\n    /**\r\n     * Gets the bytes of key value data\r\n     */\r\n    public bytesOfKeyValueData: number;\r\n    /**\r\n     * Gets the load type\r\n     */\r\n    public loadType: number;\r\n    /**\r\n     * If the container has been made invalid (eg. constructor failed to correctly load array buffer)\r\n     */\r\n    public isInvalid = false;\r\n\r\n    /**\r\n     * Creates a new KhronosTextureContainer\r\n     * @param data contents of the KTX container file\r\n     * @param facesExpected should be either 1 or 6, based whether a cube texture or or\r\n     * @param threeDExpected provision for indicating that data should be a 3D texture, not implemented\r\n     * @param textureArrayExpected provision for indicating that data should be a texture array, not implemented\r\n     */\r\n    public constructor(\r\n        /** contents of the KTX container file */\r\n        public data: ArrayBufferView, facesExpected: number, threeDExpected?: boolean, textureArrayExpected?: boolean) {\r\n        if (!KhronosTextureContainer.IsValid(data)) {\r\n            this.isInvalid = true;\r\n            Logger.Error(\"texture missing KTX identifier\");\r\n            return;\r\n        }\r\n\r\n        // load the reset of the header in native 32 bit uint\r\n        var dataSize = Uint32Array.BYTES_PER_ELEMENT;\r\n        var headerDataView = new DataView(this.data.buffer, this.data.byteOffset + 12, 13 * dataSize);\r\n        var endianness = headerDataView.getUint32(0, true);\r\n        var littleEndian = endianness === 0x04030201;\r\n\r\n        this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\r\n        this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\r\n        this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\r\n        this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\r\n        this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\r\n        this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\r\n        this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\r\n        this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\r\n        this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\r\n        this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\r\n        this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\r\n        this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\r\n\r\n        // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\r\n        if (this.glType !== 0) {\r\n            Logger.Error(\"only compressed formats currently supported\");\r\n            return;\r\n        } else {\r\n            // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\r\n            this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\r\n        }\r\n\r\n        if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\r\n            Logger.Error(\"only 2D textures currently supported\");\r\n            return;\r\n        }\r\n\r\n        if (this.numberOfArrayElements !== 0) {\r\n            Logger.Error(\"texture arrays not currently supported\");\r\n            return;\r\n        }\r\n\r\n        if (this.numberOfFaces !== facesExpected) {\r\n            Logger.Error(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\r\n            return;\r\n        }\r\n\r\n        // we now have a completely validated file, so could use existence of loadType as success\r\n        // would need to make this more elaborate & adjust checks above to support more than one load type\r\n        this.loadType = KhronosTextureContainer.COMPRESSED_2D;\r\n    }\r\n\r\n    /**\r\n     * Uploads KTX content to a Babylon Texture.\r\n     * It is assumed that the texture has already been created & is currently bound\r\n     * @hidden\r\n     */\r\n    public uploadLevels(texture: InternalTexture, loadMipmaps: boolean): void {\r\n        switch (this.loadType) {\r\n            case KhronosTextureContainer.COMPRESSED_2D:\r\n                this._upload2DCompressedLevels(texture, loadMipmaps);\r\n                break;\r\n\r\n            case KhronosTextureContainer.TEX_2D:\r\n            case KhronosTextureContainer.COMPRESSED_3D:\r\n            case KhronosTextureContainer.TEX_3D:\r\n        }\r\n    }\r\n\r\n    private _upload2DCompressedLevels(texture: InternalTexture, loadMipmaps: boolean): void {\r\n        // initialize width & height for level 1\r\n        var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\r\n        var width = this.pixelWidth;\r\n        var height = this.pixelHeight;\r\n\r\n        var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\r\n        for (var level = 0; level < mipmapCount; level++) {\r\n            var imageSize = new Int32Array(this.data.buffer, this.data.byteOffset + dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\r\n            dataOffset += 4; //image data starts from next multiple of 4 offset. Each face refers to same imagesize field above.\r\n            for (var face = 0; face < this.numberOfFaces; face++) {\r\n                var byteArray = new Uint8Array(this.data.buffer, this.data.byteOffset + dataOffset, imageSize);\r\n\r\n                const engine = texture.getEngine();\r\n                engine._uploadCompressedDataToTextureDirectly(texture, this.glInternalFormat, width, height, byteArray, face, level);\r\n\r\n                dataOffset += imageSize; // add size of the image for the next face/mipmap\r\n                dataOffset += 3 - ((imageSize + 3) % 4); // add padding for odd sized image\r\n            }\r\n            width = Math.max(1.0, width * 0.5);\r\n            height = Math.max(1.0, height * 0.5);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the given data starts with a KTX file identifier.\r\n     * @param data the data to check\r\n     * @returns true if the data is a KTX file or false otherwise\r\n     */\r\n    public static IsValid(data: ArrayBufferView): boolean {\r\n        if (data.byteLength >= 12)\r\n        {\r\n            // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\r\n            const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\r\n            if (identifier[0] === 0xAB && identifier[1] === 0x4B && identifier[2] === 0x54 && identifier[3] === 0x58 && identifier[4] === 0x20 && identifier[5] === 0x31 &&\r\n                identifier[6] === 0x31 && identifier[7] === 0xBB && identifier[8] === 0x0D && identifier[9] === 0x0A && identifier[10] === 0x1A && identifier[11] === 0x0A) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}