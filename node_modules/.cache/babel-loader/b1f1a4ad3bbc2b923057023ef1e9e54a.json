{"ast":null,"code":"import { Vector3, Vector2 } from './math.vector';\n/**\r\n * Contains position and normal vectors for a vertex\r\n */\n\nvar PositionNormalVertex =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a PositionNormalVertex\r\n   * @param position the position of the vertex (defaut: 0,0,0)\r\n   * @param normal the normal of the vertex (defaut: 0,1,0)\r\n   */\n  function PositionNormalVertex(\n  /** the position of the vertex (defaut: 0,0,0) */\n  position,\n  /** the normal of the vertex (defaut: 0,1,0) */\n  normal) {\n    if (position === void 0) {\n      position = Vector3.Zero();\n    }\n\n    if (normal === void 0) {\n      normal = Vector3.Up();\n    }\n\n    this.position = position;\n    this.normal = normal;\n  }\n  /**\r\n   * Clones the PositionNormalVertex\r\n   * @returns the cloned PositionNormalVertex\r\n   */\n\n\n  PositionNormalVertex.prototype.clone = function () {\n    return new PositionNormalVertex(this.position.clone(), this.normal.clone());\n  };\n\n  return PositionNormalVertex;\n}();\n\nexport { PositionNormalVertex };\n/**\r\n * Contains position, normal and uv vectors for a vertex\r\n */\n\nvar PositionNormalTextureVertex =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a PositionNormalTextureVertex\r\n   * @param position the position of the vertex (defaut: 0,0,0)\r\n   * @param normal the normal of the vertex (defaut: 0,1,0)\r\n   * @param uv the uv of the vertex (default: 0,0)\r\n   */\n  function PositionNormalTextureVertex(\n  /** the position of the vertex (defaut: 0,0,0) */\n  position,\n  /** the normal of the vertex (defaut: 0,1,0) */\n  normal,\n  /** the uv of the vertex (default: 0,0) */\n  uv) {\n    if (position === void 0) {\n      position = Vector3.Zero();\n    }\n\n    if (normal === void 0) {\n      normal = Vector3.Up();\n    }\n\n    if (uv === void 0) {\n      uv = Vector2.Zero();\n    }\n\n    this.position = position;\n    this.normal = normal;\n    this.uv = uv;\n  }\n  /**\r\n   * Clones the PositionNormalTextureVertex\r\n   * @returns the cloned PositionNormalTextureVertex\r\n   */\n\n\n  PositionNormalTextureVertex.prototype.clone = function () {\n    return new PositionNormalTextureVertex(this.position.clone(), this.normal.clone(), this.uv.clone());\n  };\n\n  return PositionNormalTextureVertex;\n}();\n\nexport { PositionNormalTextureVertex };","map":{"version":3,"sources":["../../../sourceES6/core/Maths/math.vertexFormat.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,EAAkB,OAAlB,QAAiC,eAAjC;AAEA;;;;AAGA,IAAA,oBAAA;AAAA;AAAA,YAAA;AACI;;;;;AAKA,WAAA,oBAAA;AACI;AACO,EAAA,QAFX;AAGI;AACO,EAAA,MAJX,EAIyC;AAF9B,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAoB,OAAO,CAAC,IAAR,EAApB;AAAkC;;AAElC,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAkB,OAAO,CAAC,EAAR,EAAlB;AAA8B;;AAF9B,SAAA,QAAA,GAAA,QAAA;AAEA,SAAA,MAAA,GAAA,MAAA;AAGV;AAED;;;;;;AAIO,EAAA,oBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACI,WAAO,IAAI,oBAAJ,CAAyB,KAAK,QAAL,CAAc,KAAd,EAAzB,EAAgD,KAAK,MAAL,CAAY,KAAZ,EAAhD,CAAP;AACH,GAFM;;AAGX,SAAA,oBAAA;AAAC,CAtBD,EAAA;;;AAwBA;;;;AAGA,IAAA,2BAAA;AAAA;AAAA,YAAA;AACI;;;;;;AAMA,WAAA,2BAAA;AACI;AACO,EAAA,QAFX;AAGI;AACO,EAAA,MAJX;AAKI;AACO,EAAA,EANX,EAMuC;AAJ5B,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAoB,OAAO,CAAC,IAAR,EAApB;AAAkC;;AAElC,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAkB,OAAO,CAAC,EAAR,EAAlB;AAA8B;;AAE9B,QAAA,EAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,EAAA,GAAc,OAAO,CAAC,IAAR,EAAd;AAA4B;;AAJ5B,SAAA,QAAA,GAAA,QAAA;AAEA,SAAA,MAAA,GAAA,MAAA;AAEA,SAAA,EAAA,GAAA,EAAA;AAGV;AACD;;;;;;AAIO,EAAA,2BAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACI,WAAO,IAAI,2BAAJ,CAAgC,KAAK,QAAL,CAAc,KAAd,EAAhC,EAAuD,KAAK,MAAL,CAAY,KAAZ,EAAvD,EAA4E,KAAK,EAAL,CAAQ,KAAR,EAA5E,CAAP;AACH,GAFM;;AAGX,SAAA,2BAAA;AAAC,CAxBD,EAAA","sourcesContent":["import { Vector3, Vector2 } from './math.vector';\r\n\r\n/**\r\n * Contains position and normal vectors for a vertex\r\n */\r\nexport class PositionNormalVertex {\r\n    /**\r\n     * Creates a PositionNormalVertex\r\n     * @param position the position of the vertex (defaut: 0,0,0)\r\n     * @param normal the normal of the vertex (defaut: 0,1,0)\r\n     */\r\n    constructor(\r\n        /** the position of the vertex (defaut: 0,0,0) */\r\n        public position: Vector3 = Vector3.Zero(),\r\n        /** the normal of the vertex (defaut: 0,1,0) */\r\n        public normal: Vector3 = Vector3.Up()\r\n    ) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Clones the PositionNormalVertex\r\n     * @returns the cloned PositionNormalVertex\r\n     */\r\n    public clone(): PositionNormalVertex {\r\n        return new PositionNormalVertex(this.position.clone(), this.normal.clone());\r\n    }\r\n}\r\n\r\n/**\r\n * Contains position, normal and uv vectors for a vertex\r\n */\r\nexport class PositionNormalTextureVertex {\r\n    /**\r\n     * Creates a PositionNormalTextureVertex\r\n     * @param position the position of the vertex (defaut: 0,0,0)\r\n     * @param normal the normal of the vertex (defaut: 0,1,0)\r\n     * @param uv the uv of the vertex (default: 0,0)\r\n     */\r\n    constructor(\r\n        /** the position of the vertex (defaut: 0,0,0) */\r\n        public position: Vector3 = Vector3.Zero(),\r\n        /** the normal of the vertex (defaut: 0,1,0) */\r\n        public normal: Vector3 = Vector3.Up(),\r\n        /** the uv of the vertex (default: 0,0) */\r\n        public uv: Vector2 = Vector2.Zero()\r\n    ) {\r\n\r\n    }\r\n    /**\r\n     * Clones the PositionNormalTextureVertex\r\n     * @returns the cloned PositionNormalTextureVertex\r\n     */\r\n    public clone(): PositionNormalTextureVertex {\r\n        return new PositionNormalTextureVertex(this.position.clone(), this.normal.clone(), this.uv.clone());\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}