{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../Misc/decorators\";\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration\";\nimport { PostProcess } from \"./postProcess\";\nimport { EngineStore } from \"../Engines/engineStore\";\nimport \"../Shaders/imageProcessing.fragment\";\nimport \"../Shaders/postprocess.vertex\";\n/**\r\n * ImageProcessingPostProcess\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#imageprocessing\r\n */\n\nvar ImageProcessingPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ImageProcessingPostProcess, _super);\n\n  function ImageProcessingPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, imageProcessingConfiguration) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, name, \"imageProcessing\", [], [], options, camera, samplingMode, engine, reusable, null, textureType, \"postprocess\", null, true) || this;\n\n    _this._fromLinearSpace = true;\n    /**\r\n     * Defines cache preventing GC.\r\n     */\n\n    _this._defines = {\n      IMAGEPROCESSING: false,\n      VIGNETTE: false,\n      VIGNETTEBLENDMODEMULTIPLY: false,\n      VIGNETTEBLENDMODEOPAQUE: false,\n      TONEMAPPING: false,\n      TONEMAPPING_ACES: false,\n      CONTRAST: false,\n      COLORCURVES: false,\n      COLORGRADING: false,\n      COLORGRADING3D: false,\n      FROMLINEARSPACE: false,\n      SAMPLER3DGREENDEPTH: false,\n      SAMPLER3DBGRMAP: false,\n      IMAGEPROCESSINGPOSTPROCESS: false,\n      EXPOSURE: false\n    }; // Setup the configuration as forced by the constructor. This would then not force the\n    // scene materials output in linear space and let untouched the default forward pass.\n\n    if (imageProcessingConfiguration) {\n      imageProcessingConfiguration.applyByPostProcess = true;\n\n      _this._attachImageProcessingConfiguration(imageProcessingConfiguration, true); // This will cause the shader to be compiled\n\n\n      _this.fromLinearSpace = false;\n    } // Setup the default processing configuration to the scene.\n    else {\n        _this._attachImageProcessingConfiguration(null, true);\n\n        _this.imageProcessingConfiguration.applyByPostProcess = true;\n      }\n\n    _this.onApply = function (effect) {\n      _this.imageProcessingConfiguration.bind(effect, _this.aspectRatio);\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"imageProcessingConfiguration\", {\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\n    get: function () {\n      return this._imageProcessingConfiguration;\n    },\n\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\n    set: function (value) {\n      // We are almost sure it is applied by post process as\n      // We are in the post process :-)\n      value.applyByPostProcess = true;\n\n      this._attachImageProcessingConfiguration(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Attaches a new image processing configuration to the PBR Material.\r\n   * @param configuration\r\n   */\n\n  ImageProcessingPostProcess.prototype._attachImageProcessingConfiguration = function (configuration, doNotBuild) {\n    var _this = this;\n\n    if (doNotBuild === void 0) {\n      doNotBuild = false;\n    }\n\n    if (configuration === this._imageProcessingConfiguration) {\n      return;\n    } // Detaches observer.\n\n\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    } // Pick the scene configuration if needed.\n\n\n    if (!configuration) {\n      var scene = null;\n      var engine = this.getEngine();\n      var camera = this.getCamera();\n\n      if (camera) {\n        scene = camera.getScene();\n      } else if (engine && engine.scenes) {\n        var scenes = engine.scenes;\n        scene = scenes[scenes.length - 1];\n      } else {\n        scene = EngineStore.LastCreatedScene;\n      }\n\n      if (scene) {\n        this._imageProcessingConfiguration = scene.imageProcessingConfiguration;\n      } else {\n        this._imageProcessingConfiguration = new ImageProcessingConfiguration();\n      }\n    } else {\n      this._imageProcessingConfiguration = configuration;\n    } // Attaches observer.\n\n\n    if (this._imageProcessingConfiguration) {\n      this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(function () {\n        _this._updateParameters();\n      });\n    } // Ensure the effect will be rebuilt.\n\n\n    if (!doNotBuild) {\n      this._updateParameters();\n    }\n  };\n\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"isSupported\", {\n    /**\r\n     * If the post process is supported.\r\n     */\n    get: function () {\n      var effect = this.getEffect();\n      return !effect || effect.isSupported;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"colorCurves\", {\n    /**\r\n     * Gets Color curves setup used in the effect if colorCurvesEnabled is set to true .\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.colorCurves;\n    },\n\n    /**\r\n     * Sets Color curves setup used in the effect if colorCurvesEnabled is set to true .\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.colorCurves = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"colorCurvesEnabled\", {\n    /**\r\n     * Gets wether the color curves effect is enabled.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.colorCurvesEnabled;\n    },\n\n    /**\r\n     * Sets wether the color curves effect is enabled.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.colorCurvesEnabled = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"colorGradingTexture\", {\n    /**\r\n     * Gets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.colorGradingTexture;\n    },\n\n    /**\r\n     * Sets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.colorGradingTexture = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"colorGradingEnabled\", {\n    /**\r\n     * Gets wether the color grading effect is enabled.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.colorGradingEnabled;\n    },\n\n    /**\r\n     * Gets wether the color grading effect is enabled.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.colorGradingEnabled = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"exposure\", {\n    /**\r\n     * Gets exposure used in the effect.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.exposure;\n    },\n\n    /**\r\n     * Sets exposure used in the effect.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.exposure = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"toneMappingEnabled\", {\n    /**\r\n     * Gets wether tonemapping is enabled or not.\r\n     */\n    get: function () {\n      return this._imageProcessingConfiguration.toneMappingEnabled;\n    },\n\n    /**\r\n     * Sets wether tonemapping is enabled or not\r\n     */\n    set: function (value) {\n      this._imageProcessingConfiguration.toneMappingEnabled = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"toneMappingType\", {\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\n    get: function () {\n      return this._imageProcessingConfiguration.toneMappingType;\n    },\n\n    /**\r\n     * Sets the type of tone mapping effect.\r\n     */\n    set: function (value) {\n      this._imageProcessingConfiguration.toneMappingType = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"contrast\", {\n    /**\r\n     * Gets contrast used in the effect.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.contrast;\n    },\n\n    /**\r\n     * Sets contrast used in the effect.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.contrast = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteStretch\", {\n    /**\r\n     * Gets Vignette stretch size.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.vignetteStretch;\n    },\n\n    /**\r\n     * Sets Vignette stretch size.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.vignetteStretch = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteCentreX\", {\n    /**\r\n     * Gets Vignette centre X Offset.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.vignetteCentreX;\n    },\n\n    /**\r\n     * Sets Vignette centre X Offset.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.vignetteCentreX = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteCentreY\", {\n    /**\r\n     * Gets Vignette centre Y Offset.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.vignetteCentreY;\n    },\n\n    /**\r\n     * Sets Vignette centre Y Offset.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.vignetteCentreY = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteWeight\", {\n    /**\r\n     * Gets Vignette weight or intensity of the vignette effect.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.vignetteWeight;\n    },\n\n    /**\r\n     * Sets Vignette weight or intensity of the vignette effect.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.vignetteWeight = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteColor\", {\n    /**\r\n     * Gets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.vignetteColor;\n    },\n\n    /**\r\n     * Sets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.vignetteColor = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteCameraFov\", {\n    /**\r\n     * Gets Camera field of view used by the Vignette effect.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.vignetteCameraFov;\n    },\n\n    /**\r\n     * Sets Camera field of view used by the Vignette effect.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.vignetteCameraFov = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteBlendMode\", {\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.vignetteBlendMode;\n    },\n\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.vignetteBlendMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteEnabled\", {\n    /**\r\n     * Gets wether the vignette effect is enabled.\r\n     */\n    get: function () {\n      return this.imageProcessingConfiguration.vignetteEnabled;\n    },\n\n    /**\r\n     * Sets wether the vignette effect is enabled.\r\n     */\n    set: function (value) {\n      this.imageProcessingConfiguration.vignetteEnabled = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"fromLinearSpace\", {\n    /**\r\n     * Gets wether the input of the processing is in Gamma or Linear Space.\r\n     */\n    get: function () {\n      return this._fromLinearSpace;\n    },\n\n    /**\r\n     * Sets wether the input of the processing is in Gamma or Linear Space.\r\n     */\n    set: function (value) {\n      if (this._fromLinearSpace === value) {\n        return;\n      }\n\n      this._fromLinearSpace = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   *  \"ImageProcessingPostProcess\"\r\n   * @returns \"ImageProcessingPostProcess\"\r\n   */\n\n  ImageProcessingPostProcess.prototype.getClassName = function () {\n    return \"ImageProcessingPostProcess\";\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  ImageProcessingPostProcess.prototype._updateParameters = function () {\n    this._defines.FROMLINEARSPACE = this._fromLinearSpace;\n    this.imageProcessingConfiguration.prepareDefines(this._defines, true);\n    var defines = \"\";\n\n    for (var define in this._defines) {\n      if (this._defines[define]) {\n        defines += \"#define \" + define + \";\\r\\n\";\n      }\n    }\n\n    var samplers = [\"textureSampler\"];\n    var uniforms = [\"scale\"];\n\n    if (ImageProcessingConfiguration) {\n      ImageProcessingConfiguration.PrepareSamplers(samplers, this._defines);\n      ImageProcessingConfiguration.PrepareUniforms(uniforms, this._defines);\n    }\n\n    this.updateEffect(defines, uniforms, samplers);\n  };\n\n  ImageProcessingPostProcess.prototype.dispose = function (camera) {\n    _super.prototype.dispose.call(this, camera);\n\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    }\n\n    if (this._imageProcessingConfiguration) {\n      this.imageProcessingConfiguration.applyByPostProcess = false;\n    }\n  };\n\n  __decorate([serialize()], ImageProcessingPostProcess.prototype, \"_fromLinearSpace\", void 0);\n\n  return ImageProcessingPostProcess;\n}(PostProcess);\n\nexport { ImageProcessingPostProcess };","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/imageProcessingPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Observer } from \"../Misc/observable\";\r\nimport { serialize } from \"../Misc/decorators\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { ColorCurves } from \"../Materials/colorCurves\";\r\nimport { ImageProcessingConfiguration, IImageProcessingConfigurationDefines } from \"../Materials/imageProcessingConfiguration\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n\r\nimport \"../Shaders/imageProcessing.fragment\";\r\nimport \"../Shaders/postprocess.vertex\";\r\n\r\n/**\r\n * ImageProcessingPostProcess\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#imageprocessing\r\n */\r\nexport class ImageProcessingPostProcess extends PostProcess {\r\n    /**\r\n     * Default configuration related to image processing available in the PBR Material.\r\n     */\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\r\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\r\n    public set imageProcessingConfiguration(value: ImageProcessingConfiguration) {\r\n        // We are almost sure it is applied by post process as\r\n        // We are in the post process :-)\r\n        value.applyByPostProcess = true;\r\n        this._attachImageProcessingConfiguration(value);\r\n    }\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>>;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the PBR Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>, doNotBuild = false): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer.\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed.\r\n        if (!configuration) {\r\n            var scene = null;\r\n            var engine = this.getEngine();\r\n            var camera = this.getCamera();\r\n\r\n            if (camera) {\r\n                scene = camera.getScene();\r\n            }\r\n            else if (engine && engine.scenes) {\r\n                var scenes = engine.scenes;\r\n                scene = scenes[scenes.length - 1];\r\n            }\r\n            else {\r\n                scene = EngineStore.LastCreatedScene;\r\n            }\r\n\r\n            if (scene) {\r\n                this._imageProcessingConfiguration = scene.imageProcessingConfiguration;\r\n            }\r\n            else {\r\n                this._imageProcessingConfiguration = new ImageProcessingConfiguration();\r\n            }\r\n        }\r\n        else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer.\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._updateParameters();\r\n            });\r\n        }\r\n\r\n        // Ensure the effect will be rebuilt.\r\n        if (!doNotBuild) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the post process is supported.\r\n     */\r\n    public get isSupported(): boolean {\r\n        const effect = this.getEffect();\r\n        return !effect || effect.isSupported;\r\n    }\r\n\r\n    /**\r\n     * Gets Color curves setup used in the effect if colorCurvesEnabled is set to true .\r\n     */\r\n    public get colorCurves(): Nullable<ColorCurves> {\r\n        return this.imageProcessingConfiguration.colorCurves;\r\n    }\r\n    /**\r\n     * Sets Color curves setup used in the effect if colorCurvesEnabled is set to true .\r\n     */\r\n    public set colorCurves(value: Nullable<ColorCurves>) {\r\n        this.imageProcessingConfiguration.colorCurves = value;\r\n    }\r\n\r\n    /**\r\n     * Gets wether the color curves effect is enabled.\r\n     */\r\n    public get colorCurvesEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets wether the color curves effect is enabled.\r\n     */\r\n    public set colorCurvesEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\r\n     */\r\n    public get colorGradingTexture(): Nullable<BaseTexture> {\r\n        return this.imageProcessingConfiguration.colorGradingTexture;\r\n    }\r\n    /**\r\n     * Sets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\r\n     */\r\n    public set colorGradingTexture(value: Nullable<BaseTexture>) {\r\n        this.imageProcessingConfiguration.colorGradingTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets wether the color grading effect is enabled.\r\n     */\r\n    public get colorGradingEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Gets wether the color grading effect is enabled.\r\n     */\r\n    public set colorGradingEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets exposure used in the effect.\r\n     */\r\n    public get exposure(): number {\r\n        return this.imageProcessingConfiguration.exposure;\r\n    }\r\n    /**\r\n     * Sets exposure used in the effect.\r\n     */\r\n    public set exposure(value: number) {\r\n        this.imageProcessingConfiguration.exposure = value;\r\n    }\r\n\r\n    /**\r\n     * Gets wether tonemapping is enabled or not.\r\n     */\r\n    public get toneMappingEnabled(): boolean {\r\n        return this._imageProcessingConfiguration.toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets wether tonemapping is enabled or not\r\n     */\r\n    public set toneMappingEnabled(value: boolean) {\r\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\r\n    public get toneMappingType(): number {\r\n        return this._imageProcessingConfiguration.toneMappingType;\r\n    }\r\n    /**\r\n     * Sets the type of tone mapping effect.\r\n     */\r\n    public set toneMappingType(value: number) {\r\n        this._imageProcessingConfiguration.toneMappingType = value;\r\n    }\r\n\r\n    /**\r\n     * Gets contrast used in the effect.\r\n     */\r\n    public get contrast(): number {\r\n        return this.imageProcessingConfiguration.contrast;\r\n    }\r\n    /**\r\n     * Sets contrast used in the effect.\r\n     */\r\n    public set contrast(value: number) {\r\n        this.imageProcessingConfiguration.contrast = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette stretch size.\r\n     */\r\n    public get vignetteStretch(): number {\r\n        return this.imageProcessingConfiguration.vignetteStretch;\r\n    }\r\n    /**\r\n     * Sets Vignette stretch size.\r\n     */\r\n    public set vignetteStretch(value: number) {\r\n        this.imageProcessingConfiguration.vignetteStretch = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette centre X Offset.\r\n     */\r\n    public get vignetteCentreX(): number {\r\n        return this.imageProcessingConfiguration.vignetteCentreX;\r\n    }\r\n    /**\r\n     * Sets Vignette centre X Offset.\r\n     */\r\n    public set vignetteCentreX(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCentreX = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette centre Y Offset.\r\n     */\r\n    public get vignetteCentreY(): number {\r\n        return this.imageProcessingConfiguration.vignetteCentreY;\r\n    }\r\n    /**\r\n     * Sets Vignette centre Y Offset.\r\n     */\r\n    public set vignetteCentreY(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCentreY = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette weight or intensity of the vignette effect.\r\n     */\r\n    public get vignetteWeight(): number {\r\n        return this.imageProcessingConfiguration.vignetteWeight;\r\n    }\r\n    /**\r\n     * Sets Vignette weight or intensity of the vignette effect.\r\n     */\r\n    public set vignetteWeight(value: number) {\r\n        this.imageProcessingConfiguration.vignetteWeight = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    public get vignetteColor(): Color4 {\r\n        return this.imageProcessingConfiguration.vignetteColor;\r\n    }\r\n    /**\r\n     * Sets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    public set vignetteColor(value: Color4) {\r\n        this.imageProcessingConfiguration.vignetteColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Camera field of view used by the Vignette effect.\r\n     */\r\n    public get vignetteCameraFov(): number {\r\n        return this.imageProcessingConfiguration.vignetteCameraFov;\r\n    }\r\n    /**\r\n     * Sets Camera field of view used by the Vignette effect.\r\n     */\r\n    public set vignetteCameraFov(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCameraFov = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public get vignetteBlendMode(): number {\r\n        return this.imageProcessingConfiguration.vignetteBlendMode;\r\n    }\r\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public set vignetteBlendMode(value: number) {\r\n        this.imageProcessingConfiguration.vignetteBlendMode = value;\r\n    }\r\n\r\n    /**\r\n     * Gets wether the vignette effect is enabled.\r\n     */\r\n    public get vignetteEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.vignetteEnabled;\r\n    }\r\n    /**\r\n     * Sets wether the vignette effect is enabled.\r\n     */\r\n    public set vignetteEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.vignetteEnabled = value;\r\n    }\r\n\r\n    @serialize()\r\n    private _fromLinearSpace = true;\r\n    /**\r\n     * Gets wether the input of the processing is in Gamma or Linear Space.\r\n     */\r\n    public get fromLinearSpace(): boolean {\r\n        return this._fromLinearSpace;\r\n    }\r\n    /**\r\n     * Sets wether the input of the processing is in Gamma or Linear Space.\r\n     */\r\n    public set fromLinearSpace(value: boolean) {\r\n        if (this._fromLinearSpace === value) {\r\n            return;\r\n        }\r\n\r\n        this._fromLinearSpace = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * Defines cache preventing GC.\r\n     */\r\n    private _defines: IImageProcessingConfigurationDefines & { FROMLINEARSPACE: boolean } = {\r\n        IMAGEPROCESSING: false,\r\n        VIGNETTE: false,\r\n        VIGNETTEBLENDMODEMULTIPLY: false,\r\n        VIGNETTEBLENDMODEOPAQUE: false,\r\n        TONEMAPPING: false,\r\n        TONEMAPPING_ACES: false,\r\n        CONTRAST: false,\r\n        COLORCURVES: false,\r\n        COLORGRADING: false,\r\n        COLORGRADING3D: false,\r\n        FROMLINEARSPACE: false,\r\n        SAMPLER3DGREENDEPTH: false,\r\n        SAMPLER3DBGRMAP: false,\r\n        IMAGEPROCESSINGPOSTPROCESS: false,\r\n        EXPOSURE: false,\r\n    };\r\n\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Nullable<Camera> = null, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0, imageProcessingConfiguration?: ImageProcessingConfiguration) {\r\n        super(name, \"imageProcessing\", [], [], options, camera, samplingMode, engine, reusable,\r\n            null, textureType, \"postprocess\", null, true);\r\n\r\n        // Setup the configuration as forced by the constructor. This would then not force the\r\n        // scene materials output in linear space and let untouched the default forward pass.\r\n        if (imageProcessingConfiguration) {\r\n            imageProcessingConfiguration.applyByPostProcess = true;\r\n            this._attachImageProcessingConfiguration(imageProcessingConfiguration, true);\r\n            // This will cause the shader to be compiled\r\n            this.fromLinearSpace = false;\r\n        }\r\n        // Setup the default processing configuration to the scene.\r\n        else {\r\n            this._attachImageProcessingConfiguration(null, true);\r\n            this.imageProcessingConfiguration.applyByPostProcess = true;\r\n        }\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            this.imageProcessingConfiguration.bind(effect, this.aspectRatio);\r\n        };\r\n    }\r\n    /**\r\n     *  \"ImageProcessingPostProcess\"\r\n     * @returns \"ImageProcessingPostProcess\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ImageProcessingPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _updateParameters(): void {\r\n        this._defines.FROMLINEARSPACE = this._fromLinearSpace;\r\n        this.imageProcessingConfiguration.prepareDefines(this._defines, true);\r\n        var defines = \"\";\r\n        for (const define in this._defines) {\r\n            if ((<any>this._defines)[define]) {\r\n                defines += `#define ${define};\\r\\n`;\r\n            }\r\n        }\r\n\r\n        var samplers = [\"textureSampler\"];\r\n        var uniforms = [\"scale\"];\r\n\r\n        if (ImageProcessingConfiguration) {\r\n            ImageProcessingConfiguration.PrepareSamplers(samplers, this._defines);\r\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, this._defines);\r\n        }\r\n\r\n        this.updateEffect(defines, uniforms, samplers);\r\n    }\r\n\r\n    public dispose(camera?: Camera): void {\r\n        super.dispose(camera);\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        if (this._imageProcessingConfiguration) {\r\n            this.imageProcessingConfiguration.applyByPostProcess = false;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}