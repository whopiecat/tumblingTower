{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ShaderDefineExpression } from '../shaderDefineExpression';\n/** @hidden */\n\nvar ShaderDefineArithmeticOperator =\n/** @class */\nfunction (_super) {\n  __extends(ShaderDefineArithmeticOperator, _super);\n\n  function ShaderDefineArithmeticOperator(define, operand, testValue) {\n    var _this = _super.call(this) || this;\n\n    _this.define = define;\n    _this.operand = operand;\n    _this.testValue = testValue;\n    return _this;\n  }\n\n  ShaderDefineArithmeticOperator.prototype.isTrue = function (preprocessors) {\n    var value = preprocessors[this.define];\n\n    if (value === undefined) {\n      value = this.define;\n    }\n\n    var condition = false;\n    var left = parseInt(value);\n    var right = parseInt(this.testValue);\n\n    switch (this.operand) {\n      case \">\":\n        condition = left > right;\n        break;\n\n      case \"<\":\n        condition = left < right;\n        break;\n\n      case \"<=\":\n        condition = left <= right;\n        break;\n\n      case \">=\":\n        condition = left >= right;\n        break;\n\n      case \"==\":\n        condition = left === right;\n        break;\n    }\n\n    return condition;\n  };\n\n  return ShaderDefineArithmeticOperator;\n}(ShaderDefineExpression);\n\nexport { ShaderDefineArithmeticOperator };","map":{"version":3,"sources":["../../../../../../sourceES6/core/Engines/Processors/Expressions/Operators/shaderDefineArithmeticOperator.ts"],"names":[],"mappings":";AAAA,SAAS,sBAAT,QAAuC,2BAAvC;AAEA;;AACA,IAAA,8BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoD,EAAA,SAAA,CAAA,8BAAA,EAAA,MAAA,CAAA;;AAChD,WAAA,8BAAA,CAA0B,MAA1B,EAAiD,OAAjD,EAAyE,SAAzE,EAA0F;AAA1F,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAA0B,IAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AAAuB,IAAA,KAAA,CAAA,OAAA,GAAA,OAAA;AAAwB,IAAA,KAAA,CAAA,SAAA,GAAA,SAAA;;AAExE;;AAEM,EAAA,8BAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,aAAd,EAAsD;AAClD,QAAI,KAAK,GAAG,aAAa,CAAC,KAAK,MAAN,CAAzB;;AAEA,QAAI,KAAK,KAAK,SAAd,EAAyB;AACrB,MAAA,KAAK,GAAG,KAAK,MAAb;AACH;;AAED,QAAI,SAAS,GAAG,KAAhB;AACA,QAAI,IAAI,GAAG,QAAQ,CAAC,KAAD,CAAnB;AACA,QAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,SAAN,CAApB;;AAEA,YAAQ,KAAK,OAAb;AACI,WAAK,GAAL;AACI,QAAA,SAAS,GAAG,IAAI,GAAG,KAAnB;AACA;;AACJ,WAAK,GAAL;AACI,QAAA,SAAS,GAAG,IAAI,GAAG,KAAnB;AACA;;AACJ,WAAK,IAAL;AACI,QAAA,SAAS,GAAG,IAAI,IAAI,KAApB;AACA;;AACJ,WAAK,IAAL;AACI,QAAA,SAAS,GAAG,IAAI,IAAI,KAApB;AACA;;AACJ,WAAK,IAAL;AACI,QAAA,SAAS,GAAG,IAAI,KAAK,KAArB;AACA;AAfR;;AAkBA,WAAO,SAAP;AACH,GA9BM;;AA+BX,SAAA,8BAAA;AAAC,CApCD,CAAoD,sBAApD,CAAA","sourcesContent":["import { ShaderDefineExpression } from '../shaderDefineExpression';\r\n\r\n/** @hidden */\r\nexport class ShaderDefineArithmeticOperator extends ShaderDefineExpression {\r\n    public constructor(public define: string, public operand: string, public testValue: string) {\r\n        super();\r\n    }\r\n\r\n    public isTrue(preprocessors: { [key: string]: string }) {\r\n        let value = preprocessors[this.define];\r\n\r\n        if (value === undefined) {\r\n            value = this.define;\r\n        }\r\n\r\n        let condition = false;\r\n        let left = parseInt(value);\r\n        let right = parseInt(this.testValue);\r\n\r\n        switch (this.operand) {\r\n            case \">\":\r\n                condition = left > right;\r\n                break;\r\n            case \"<\":\r\n                condition = left < right;\r\n                break;\r\n            case \"<=\":\r\n                condition = left <= right;\r\n                break;\r\n            case \">=\":\r\n                condition = left >= right;\r\n                break;\r\n            case \"==\":\r\n                condition = left === right;\r\n                break;\r\n        }\r\n\r\n        return condition;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}