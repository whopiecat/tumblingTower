{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/depthOfFieldMerge.fragment\";\n/**\r\n * Options to be set when merging outputs from the default pipeline.\r\n */\n\nvar DepthOfFieldMergePostProcessOptions =\n/** @class */\nfunction () {\n  function DepthOfFieldMergePostProcessOptions() {}\n\n  return DepthOfFieldMergePostProcessOptions;\n}();\n\nexport { DepthOfFieldMergePostProcessOptions };\n/**\r\n * The DepthOfFieldMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\r\n */\n\nvar DepthOfFieldMergePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(DepthOfFieldMergePostProcess, _super);\n  /**\r\n   * Creates a new instance of DepthOfFieldMergePostProcess\r\n   * @param name The name of the effect.\r\n   * @param originalFromInput Post process which's input will be used for the merge.\r\n   * @param circleOfConfusion Circle of confusion post process which's output will be used to blur each pixel.\r\n   * @param blurSteps Blur post processes from low to high which will be mixed with the original image.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function DepthOfFieldMergePostProcess(name, originalFromInput, circleOfConfusion, blurSteps, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"depthOfFieldMerge\", [], [\"circleOfConfusionSampler\", \"blurStep0\", \"blurStep1\", \"blurStep2\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true) || this;\n\n    _this.blurSteps = blurSteps;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\n      effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\n      blurSteps.forEach(function (step, index) {\n        effect.setTextureFromPostProcessOutput(\"blurStep\" + (blurSteps.length - index - 1), step);\n      });\n    });\n\n    if (!blockCompilation) {\n      _this.updateEffect();\n    }\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"DepthOfFieldMergePostProcess\" string\r\n   */\n\n\n  DepthOfFieldMergePostProcess.prototype.getClassName = function () {\n    return \"DepthOfFieldMergePostProcess\";\n  };\n  /**\r\n   * Updates the effect with the current post process compile time values and recompiles the shader.\r\n   * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n   * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n   * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n   * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n   * @param onCompiled Called when the shader has been compiled.\r\n   * @param onError Called if there is an error when compiling a shader.\r\n   */\n\n\n  DepthOfFieldMergePostProcess.prototype.updateEffect = function (defines, uniforms, samplers, indexParameters, onCompiled, onError) {\n    if (defines === void 0) {\n      defines = null;\n    }\n\n    if (uniforms === void 0) {\n      uniforms = null;\n    }\n\n    if (samplers === void 0) {\n      samplers = null;\n    }\n\n    if (!defines) {\n      defines = \"\";\n      defines += \"#define BLUR_LEVEL \" + (this.blurSteps.length - 1) + \"\\n\";\n    }\n\n    _super.prototype.updateEffect.call(this, defines, uniforms, samplers, indexParameters, onCompiled, onError);\n  };\n\n  return DepthOfFieldMergePostProcess;\n}(PostProcess);\n\nexport { DepthOfFieldMergePostProcess };","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/depthOfFieldMergePostProcess.ts"],"names":[],"mappings":";AAGA,SAAS,WAAT,QAAgD,eAAhD;AAIA,OAAO,uCAAP;AAEA;;;;AAGA,IAAA,mCAAA;AAAA;AAAA,YAAA;AAAA,WAAA,mCAAA,GAAA,CAmBC;;AAAD,SAAA,mCAAA;AAAC,CAnBD,EAAA;;;AAqBA;;;;AAGA,IAAA,4BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkD,EAAA,SAAA,CAAA,4BAAA,EAAA,MAAA,CAAA;AAS9C;;;;;;;;;;;;;;;;AAcA,WAAA,4BAAA,CAAY,IAAZ,EAA0B,iBAA1B,EAA0D,iBAA1D,EAAkG,SAAlG,EAAiI,OAAjI,EAAuK,MAAvK,EAAiM,YAAjM,EAAwN,MAAxN,EAAyO,QAAzO,EAA6P,WAA7P,EAAsR,gBAAtR,EAA8S;AAAjD,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,CAAA;AAAuB;;AAAE,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,KAAA;AAAwB;;AAA9S,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,mBAAZ,EAAiC,EAAjC,EAAqC,CAAC,0BAAD,EAA6B,WAA7B,EAA0C,WAA1C,EAAuD,WAAvD,CAArC,EAA0G,OAA1G,EAAmH,MAAnH,EAA2H,YAA3H,EAAyI,MAAzI,EAAiJ,QAAjJ,EAA2J,IAA3J,EAAiK,WAAjK,EAA8K,SAA9K,EAAyL,IAAzL,EAA+L,IAA/L,KAAoM,IADxM;;AAAkG,IAAA,KAAA,CAAA,SAAA,GAAA,SAAA;;AAE9F,IAAA,KAAI,CAAC,iBAAL,CAAuB,GAAvB,CAA2B,UAAC,MAAD,EAAe;AACtC,MAAA,MAAM,CAAC,yBAAP,CAAiC,gBAAjC,EAAmD,iBAAnD;AACA,MAAA,MAAM,CAAC,+BAAP,CAAuC,0BAAvC,EAAmE,iBAAnE;AACA,MAAA,SAAS,CAAC,OAAV,CAAkB,UAAC,IAAD,EAAO,KAAP,EAAY;AAC1B,QAAA,MAAM,CAAC,+BAAP,CAAuC,cAAc,SAAS,CAAC,MAAV,GAAmB,KAAnB,GAA2B,CAAzC,CAAvC,EAAoF,IAApF;AACH,OAFD;AAGH,KAND;;AAQA,QAAI,CAAC,gBAAL,EAAuB;AACnB,MAAA,KAAI,CAAC,YAAL;AACH;;;AACJ;AAnCD;;;;;;AAIO,EAAA,4BAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,8BAAP;AACH,GAFM;AAiCP;;;;;;;;;;;AASO,EAAA,4BAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,OAApB,EAAsD,QAAtD,EAA2F,QAA3F,EAAgI,eAAhI,EACI,UADJ,EAC2C,OAD3C,EAC6F;AADzE,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,IAAA;AAAgC;;AAAE,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,IAAA;AAAmC;;AAAE,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,IAAA;AAAmC;;AAE1H,QAAI,CAAC,OAAL,EAAc;AACV,MAAA,OAAO,GAAG,EAAV;AACA,MAAA,OAAO,IAAI,yBAAyB,KAAK,SAAL,CAAe,MAAf,GAAwB,CAAjD,IAAsD,IAAjE;AACH;;AACD,IAAA,MAAA,CAAA,SAAA,CAAM,YAAN,CAAkB,IAAlB,CAAkB,IAAlB,EAAmB,OAAnB,EAA4B,QAA5B,EAAsC,QAAtC,EAAgD,eAAhD,EAAiE,UAAjE,EAA6E,OAA7E;AACH,GAPM;;AAQX,SAAA,4BAAA;AAAC,CAvDD,CAAkD,WAAlD,CAAA","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\n\r\nimport \"../Shaders/depthOfFieldMerge.fragment\";\r\n\r\n/**\r\n * Options to be set when merging outputs from the default pipeline.\r\n */\r\nexport class DepthOfFieldMergePostProcessOptions {\r\n    /**\r\n     * The original image to merge on top of\r\n     */\r\n    public originalFromInput: PostProcess;\r\n    /**\r\n     * Parameters to perform the merge of the depth of field effect\r\n     */\r\n    public depthOfField?: {\r\n        circleOfConfusion: PostProcess;\r\n        blurSteps: Array<PostProcess>;\r\n    };\r\n    /**\r\n     * Parameters to perform the merge of bloom effect\r\n     */\r\n    public bloom?: {\r\n        blurred: PostProcess;\r\n        weight: number;\r\n    };\r\n}\r\n\r\n/**\r\n * The DepthOfFieldMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\r\n */\r\nexport class DepthOfFieldMergePostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"DepthOfFieldMergePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"DepthOfFieldMergePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of DepthOfFieldMergePostProcess\r\n     * @param name The name of the effect.\r\n     * @param originalFromInput Post process which's input will be used for the merge.\r\n     * @param circleOfConfusion Circle of confusion post process which's output will be used to blur each pixel.\r\n     * @param blurSteps Blur post processes from low to high which will be mixed with the original image.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string, originalFromInput: PostProcess, circleOfConfusion: PostProcess, private blurSteps: Array<PostProcess>, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0, blockCompilation = false) {\r\n        super(name, \"depthOfFieldMerge\", [], [\"circleOfConfusionSampler\", \"blurStep0\", \"blurStep1\", \"blurStep2\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true);\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\r\n            effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\r\n            blurSteps.forEach((step, index) => {\r\n                effect.setTextureFromPostProcessOutput(\"blurStep\" + (blurSteps.length - index - 1), step);\r\n            });\r\n        });\r\n\r\n        if (!blockCompilation) {\r\n            this.updateEffect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the effect with the current post process compile time values and recompiles the shader.\r\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n     * @param onCompiled Called when the shader has been compiled.\r\n     * @param onError Called if there is an error when compiling a shader.\r\n     */\r\n    public updateEffect(defines: Nullable<string> = null, uniforms: Nullable<string[]> = null, samplers: Nullable<string[]> = null, indexParameters?: any,\r\n        onCompiled?: (effect: Effect) => void, onError?: (effect: Effect, errors: string) => void) {\r\n        if (!defines) {\r\n            defines = \"\";\r\n            defines += \"#define BLUR_LEVEL \" + (this.blurSteps.length - 1) + \"\\n\";\r\n        }\r\n        super.updateEffect(defines, uniforms, samplers, indexParameters, onCompiled, onError);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}