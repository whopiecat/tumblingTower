{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Color3 } from '../Maths/math.color';\nimport { Mesh } from \"../Meshes/mesh\";\nimport { Gizmo } from \"./gizmo\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\nimport { StandardMaterial } from '../Materials/standardMaterial';\nimport { BoxBuilder } from \"../Meshes/Builders/boxBuilder\";\nimport { CylinderBuilder } from '../Meshes/Builders/cylinderBuilder';\nimport { Matrix } from '../Maths/math';\nimport { LinesBuilder } from \"../Meshes/Builders/linesBuilder\";\nimport { PointerEventTypes } from '../Events/pointerEvents';\nimport { Observable } from \"../Misc/observable\";\n/**\r\n * Gizmo that enables viewing a camera\r\n */\n\nvar CameraGizmo =\n/** @class */\nfunction (_super) {\n  __extends(CameraGizmo, _super);\n  /**\r\n   * Creates a CameraGizmo\r\n   * @param gizmoLayer The utility layer the gizmo will be added to\r\n   */\n\n\n  function CameraGizmo(gizmoLayer) {\n    if (gizmoLayer === void 0) {\n      gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer;\n    }\n\n    var _this = _super.call(this, gizmoLayer) || this;\n\n    _this._pointerObserver = null;\n    /**\r\n     * Event that fires each time the gizmo is clicked\r\n     */\n\n    _this.onClickedObservable = new Observable();\n    _this._camera = null;\n    _this._invProjection = new Matrix();\n    _this._material = new StandardMaterial(\"cameraGizmoMaterial\", _this.gizmoLayer.utilityLayerScene);\n    _this._material.diffuseColor = new Color3(0.5, 0.5, 0.5);\n    _this._material.specularColor = new Color3(0.1, 0.1, 0.1);\n    _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n      if (!_this._camera) {\n        return;\n      }\n\n      _this._isHovered = !!(pointerInfo.pickInfo && _this._rootMesh.getChildMeshes().indexOf(pointerInfo.pickInfo.pickedMesh) != -1);\n\n      if (_this._isHovered && pointerInfo.event.button === 0) {\n        _this.onClickedObservable.notifyObservers(_this._camera);\n      }\n    }, PointerEventTypes.POINTERDOWN);\n    return _this;\n  }\n\n  Object.defineProperty(CameraGizmo.prototype, \"displayFrustum\", {\n    /** Gets or sets a boolean indicating if frustum lines must be rendered (true by default)) */\n    get: function () {\n      return this._cameraLinesMesh.isEnabled();\n    },\n    set: function (value) {\n      this._cameraLinesMesh.setEnabled(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CameraGizmo.prototype, \"camera\", {\n    get: function () {\n      return this._camera;\n    },\n\n    /**\r\n     * The camera that the gizmo is attached to\r\n     */\n    set: function (camera) {\n      var _this = this;\n\n      this._camera = camera;\n      this.attachedNode = camera;\n\n      if (camera) {\n        // Create the mesh for the given camera\n        if (this._cameraMesh) {\n          this._cameraMesh.dispose();\n        }\n\n        if (this._cameraLinesMesh) {\n          this._cameraLinesMesh.dispose();\n        }\n\n        this._cameraMesh = CameraGizmo._CreateCameraMesh(this.gizmoLayer.utilityLayerScene);\n        this._cameraLinesMesh = CameraGizmo._CreateCameraFrustum(this.gizmoLayer.utilityLayerScene);\n\n        this._cameraMesh.getChildMeshes(false).forEach(function (m) {\n          m.material = _this._material;\n        });\n\n        this._cameraMesh.parent = this._rootMesh;\n        this._cameraLinesMesh.parent = this._rootMesh;\n\n        if (this.gizmoLayer.utilityLayerScene.activeCamera && this.gizmoLayer.utilityLayerScene.activeCamera.maxZ < camera.maxZ * 1.5) {\n          this.gizmoLayer.utilityLayerScene.activeCamera.maxZ = camera.maxZ * 1.5;\n        }\n\n        if (!this.attachedNode.reservedDataStore) {\n          this.attachedNode.reservedDataStore = {};\n        }\n\n        this.attachedNode.reservedDataStore.cameraGizmo = this; // Add lighting to the camera gizmo\n\n        var gizmoLight = this.gizmoLayer._getSharedGizmoLight();\n\n        gizmoLight.includedOnlyMeshes = gizmoLight.includedOnlyMeshes.concat(this._cameraMesh.getChildMeshes(false));\n\n        this._update();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CameraGizmo.prototype, \"material\", {\n    /**\r\n     * Gets the material used to render the camera gizmo\r\n     */\n    get: function () {\n      return this._material;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * @hidden\r\n   * Updates the gizmo to match the attached mesh's position/rotation\r\n   */\n\n  CameraGizmo.prototype._update = function () {\n    _super.prototype._update.call(this);\n\n    if (!this._camera) {\n      return;\n    } // frustum matrix\n\n\n    this._camera.getProjectionMatrix().invertToRef(this._invProjection);\n\n    this._cameraLinesMesh.setPivotMatrix(this._invProjection, false);\n\n    this._cameraLinesMesh.scaling.x = 1 / this._rootMesh.scaling.x;\n    this._cameraLinesMesh.scaling.y = 1 / this._rootMesh.scaling.y;\n    this._cameraLinesMesh.scaling.z = 1 / this._rootMesh.scaling.z; // take care of coordinate system in camera scene to properly display the mesh with the good Y axis orientation in this scene\n\n    this._cameraMesh.parent = null;\n    this._cameraMesh.rotation.y = Math.PI * 0.5 * (this._camera.getScene().useRightHandedSystem ? 1 : -1);\n    this._cameraMesh.parent = this._rootMesh;\n  };\n  /**\r\n   * Disposes of the camera gizmo\r\n   */\n\n\n  CameraGizmo.prototype.dispose = function () {\n    this.onClickedObservable.clear();\n    this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n\n    if (this._cameraMesh) {\n      this._cameraMesh.dispose();\n    }\n\n    if (this._cameraLinesMesh) {\n      this._cameraLinesMesh.dispose();\n    }\n\n    this._material.dispose();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  CameraGizmo._CreateCameraMesh = function (scene) {\n    var root = new Mesh(\"rootCameraGizmo\", scene);\n    var mesh = new Mesh(root.name, scene);\n    mesh.parent = root;\n    var box = BoxBuilder.CreateBox(root.name, {\n      width: 1.0,\n      height: 0.8,\n      depth: 0.5\n    }, scene);\n    box.parent = mesh;\n    var cyl1 = CylinderBuilder.CreateCylinder(root.name, {\n      height: 0.5,\n      diameterTop: 0.8,\n      diameterBottom: 0.8\n    }, scene);\n    cyl1.parent = mesh;\n    cyl1.position.y = 0.3;\n    cyl1.position.x = -0.6;\n    cyl1.rotation.x = Math.PI * 0.5;\n    var cyl2 = CylinderBuilder.CreateCylinder(root.name, {\n      height: 0.5,\n      diameterTop: 0.6,\n      diameterBottom: 0.6\n    }, scene);\n    cyl2.parent = mesh;\n    cyl2.position.y = 0.5;\n    cyl2.position.x = 0.4;\n    cyl2.rotation.x = Math.PI * 0.5;\n    var cyl3 = CylinderBuilder.CreateCylinder(root.name, {\n      height: 0.5,\n      diameterTop: 0.5,\n      diameterBottom: 0.5\n    }, scene);\n    cyl3.parent = mesh;\n    cyl3.position.y = 0.0;\n    cyl3.position.x = 0.6;\n    cyl3.rotation.z = Math.PI * 0.5;\n    root.scaling.scaleInPlace(CameraGizmo._Scale);\n    mesh.position.x = -0.9;\n    return root;\n  };\n\n  CameraGizmo._CreateCameraFrustum = function (scene) {\n    var root = new Mesh(\"rootCameraGizmo\", scene);\n    var mesh = new Mesh(root.name, scene);\n    mesh.parent = root;\n\n    for (var y = 0; y < 4; y += 2) {\n      for (var x = 0; x < 4; x += 2) {\n        var line = LinesBuilder.CreateLines(\"lines\", {\n          points: [new Vector3(-1 + x, -1 + y, -1), new Vector3(-1 + x, -1 + y, 1)]\n        }, scene);\n        line.parent = mesh;\n        line.alwaysSelectAsActiveMesh = true;\n        line.isPickable = false;\n        var line = LinesBuilder.CreateLines(\"lines\", {\n          points: [new Vector3(-1, -1 + x, -1 + y), new Vector3(1, -1 + x, -1 + y)]\n        }, scene);\n        line.parent = mesh;\n        line.alwaysSelectAsActiveMesh = true;\n        line.isPickable = false;\n        var line = LinesBuilder.CreateLines(\"lines\", {\n          points: [new Vector3(-1 + x, -1, -1 + y), new Vector3(-1 + x, 1, -1 + y)]\n        }, scene);\n        line.parent = mesh;\n        line.alwaysSelectAsActiveMesh = true;\n        line.isPickable = false;\n      }\n    }\n\n    return root;\n  }; // Static helper methods\n\n\n  CameraGizmo._Scale = 0.05;\n  return CameraGizmo;\n}(Gizmo);\n\nexport { CameraGizmo };","map":{"version":3,"sources":["../../../sourceES6/core/Gizmos/cameraGizmo.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from '../Maths/math.color';\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Gizmo } from \"./gizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { StandardMaterial } from '../Materials/standardMaterial';\r\nimport { Scene } from '../scene';\r\nimport { Camera } from '../Cameras/camera';\r\nimport { BoxBuilder } from \"../Meshes/Builders/boxBuilder\";\r\nimport { CylinderBuilder } from '../Meshes/Builders/cylinderBuilder';\r\nimport { Matrix } from '../Maths/math';\r\nimport { LinesBuilder } from \"../Meshes/Builders/linesBuilder\";\r\nimport { PointerEventTypes, PointerInfo } from '../Events/pointerEvents';\r\nimport { Observer, Observable } from \"../Misc/observable\";\r\n\r\n/**\r\n * Gizmo that enables viewing a camera\r\n */\r\nexport class CameraGizmo extends Gizmo {\r\n    private _cameraMesh: Mesh;\r\n    private _cameraLinesMesh: Mesh;\r\n    private _material: StandardMaterial;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>> = null;\r\n\r\n    /**\r\n     * Event that fires each time the gizmo is clicked\r\n     */\r\n    public onClickedObservable = new Observable<Camera>();\r\n\r\n    /**\r\n     * Creates a CameraGizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     */\r\n    constructor(gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer) {\r\n        super(gizmoLayer);\r\n\r\n        this._material = new StandardMaterial(\"cameraGizmoMaterial\", this.gizmoLayer.utilityLayerScene);\r\n        this._material.diffuseColor = new Color3(0.5, 0.5, 0.5);\r\n        this._material.specularColor = new Color3(0.1, 0.1, 0.1);\r\n\r\n        this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (!this._camera) {\r\n                return;\r\n            }\r\n\r\n            this._isHovered = !!(pointerInfo.pickInfo && (this._rootMesh.getChildMeshes().indexOf(<Mesh>pointerInfo.pickInfo.pickedMesh) != -1));\r\n            if (this._isHovered && pointerInfo.event.button === 0) {\r\n                this.onClickedObservable.notifyObservers(this._camera);\r\n            }\r\n        }, PointerEventTypes.POINTERDOWN);\r\n    }\r\n    private _camera: Nullable<Camera> = null;\r\n\r\n    /** Gets or sets a boolean indicating if frustum lines must be rendered (true by default)) */\r\n    public get displayFrustum() {\r\n        return this._cameraLinesMesh.isEnabled();\r\n    }\r\n    public set displayFrustum(value) {\r\n        this._cameraLinesMesh.setEnabled(value);\r\n    }\r\n\r\n    /**\r\n     * The camera that the gizmo is attached to\r\n     */\r\n    public set camera(camera: Nullable<Camera>) {\r\n        this._camera = camera;\r\n        this.attachedNode = camera;\r\n        if (camera) {\r\n            // Create the mesh for the given camera\r\n            if (this._cameraMesh) {\r\n                this._cameraMesh.dispose();\r\n            }\r\n            if (this._cameraLinesMesh) {\r\n                this._cameraLinesMesh.dispose();\r\n            }\r\n            this._cameraMesh = CameraGizmo._CreateCameraMesh(this.gizmoLayer.utilityLayerScene);\r\n            this._cameraLinesMesh = CameraGizmo._CreateCameraFrustum(this.gizmoLayer.utilityLayerScene);\r\n\r\n            this._cameraMesh.getChildMeshes(false).forEach((m) => {\r\n                m.material = this._material;\r\n            });\r\n            this._cameraMesh.parent = this._rootMesh;\r\n\r\n            this._cameraLinesMesh.parent = this._rootMesh;\r\n\r\n            if (this.gizmoLayer.utilityLayerScene.activeCamera && this.gizmoLayer.utilityLayerScene.activeCamera.maxZ < camera.maxZ * 1.5) {\r\n                this.gizmoLayer.utilityLayerScene.activeCamera.maxZ = camera.maxZ * 1.5;\r\n            }\r\n\r\n            if (!this.attachedNode!.reservedDataStore) {\r\n                this.attachedNode!.reservedDataStore = {};\r\n            }\r\n            this.attachedNode!.reservedDataStore.cameraGizmo = this;\r\n\r\n            // Add lighting to the camera gizmo\r\n            var gizmoLight = this.gizmoLayer._getSharedGizmoLight();\r\n            gizmoLight.includedOnlyMeshes = gizmoLight.includedOnlyMeshes.concat(this._cameraMesh.getChildMeshes(false));\r\n\r\n            this._update();\r\n        }\r\n    }\r\n\r\n    public get camera() {\r\n        return this._camera;\r\n    }\r\n\r\n    /**\r\n     * Gets the material used to render the camera gizmo\r\n     */\r\n    public get material() {\r\n        return this._material;\r\n    }\r\n    /**\r\n     * @hidden\r\n     * Updates the gizmo to match the attached mesh's position/rotation\r\n     */\r\n\r\n    protected _update() {\r\n        super._update();\r\n        if (!this._camera) {\r\n            return;\r\n        }\r\n\r\n        // frustum matrix\r\n        this._camera.getProjectionMatrix().invertToRef(this._invProjection);\r\n        this._cameraLinesMesh.setPivotMatrix(this._invProjection, false);\r\n\r\n        this._cameraLinesMesh.scaling.x = 1 / this._rootMesh.scaling.x;\r\n        this._cameraLinesMesh.scaling.y = 1 / this._rootMesh.scaling.y;\r\n        this._cameraLinesMesh.scaling.z = 1 / this._rootMesh.scaling.z;\r\n\r\n        // take care of coordinate system in camera scene to properly display the mesh with the good Y axis orientation in this scene\r\n        this._cameraMesh.parent = null;\r\n        this._cameraMesh.rotation.y = Math.PI * 0.5 * (this._camera.getScene().useRightHandedSystem ? 1 : -1);\r\n        this._cameraMesh.parent = this._rootMesh;\r\n    }\r\n\r\n    // Static helper methods\r\n    private static _Scale = 0.05;\r\n    private _invProjection = new Matrix();\r\n\r\n    /**\r\n     * Disposes of the camera gizmo\r\n     */\r\n    public dispose() {\r\n        this.onClickedObservable.clear();\r\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n        if (this._cameraMesh) {\r\n            this._cameraMesh.dispose();\r\n        }\r\n        if (this._cameraLinesMesh) {\r\n            this._cameraLinesMesh.dispose();\r\n        }\r\n        this._material.dispose();\r\n        super.dispose();\r\n    }\r\n\r\n    private static _CreateCameraMesh(scene: Scene) {\r\n        var root = new Mesh(\"rootCameraGizmo\", scene);\r\n\r\n        var mesh = new Mesh(root.name, scene);\r\n        mesh.parent = root;\r\n\r\n        var box = BoxBuilder.CreateBox(root.name, {width: 1.0, height: 0.8, depth: 0.5 }, scene);\r\n        box.parent = mesh;\r\n\r\n        var cyl1 = CylinderBuilder.CreateCylinder(root.name, {height: 0.5, diameterTop: 0.8, diameterBottom: 0.8}, scene);\r\n        cyl1.parent = mesh;\r\n        cyl1.position.y = 0.3;\r\n        cyl1.position.x = -0.6;\r\n        cyl1.rotation.x = Math.PI * 0.5;\r\n\r\n        var cyl2 = CylinderBuilder.CreateCylinder(root.name, {height: 0.5, diameterTop: 0.6, diameterBottom: 0.6}, scene);\r\n        cyl2.parent = mesh;\r\n        cyl2.position.y = 0.5;\r\n        cyl2.position.x = 0.4;\r\n        cyl2.rotation.x = Math.PI * 0.5;\r\n\r\n        var cyl3 = CylinderBuilder.CreateCylinder(root.name, {height: 0.5, diameterTop: 0.5, diameterBottom: 0.5}, scene);\r\n        cyl3.parent = mesh;\r\n        cyl3.position.y = 0.0;\r\n        cyl3.position.x = 0.6;\r\n        cyl3.rotation.z = Math.PI * 0.5;\r\n\r\n        root.scaling.scaleInPlace(CameraGizmo._Scale);\r\n        mesh.position.x = -0.9;\r\n\r\n        return root;\r\n    }\r\n\r\n    private static _CreateCameraFrustum(scene: Scene) {\r\n        var root = new Mesh(\"rootCameraGizmo\", scene);\r\n        var mesh = new Mesh(root.name, scene);\r\n        mesh.parent = root;\r\n\r\n        for (var y = 0; y < 4; y += 2)\r\n        {\r\n            for (var x = 0; x < 4; x += 2)\r\n            {\r\n                var line = LinesBuilder.CreateLines(\"lines\", { points: [new Vector3(-1 + x, -1 + y, -1), new Vector3(-1 + x, -1 + y, 1)] }, scene);\r\n                line.parent = mesh;\r\n                line.alwaysSelectAsActiveMesh = true;\r\n                line.isPickable = false;\r\n                var line = LinesBuilder.CreateLines(\"lines\", { points: [new Vector3(-1, -1 + x, -1 + y), new Vector3(1, -1 + x, -1 + y)] }, scene);\r\n                line.parent = mesh;\r\n                line.alwaysSelectAsActiveMesh = true;\r\n                line.isPickable = false;\r\n                var line = LinesBuilder.CreateLines(\"lines\", { points: [new Vector3(-1 + x, -1, -1 + y), new Vector3(-1 + x,  1, -1 + y)] }, scene);\r\n                line.parent = mesh;\r\n                line.alwaysSelectAsActiveMesh = true;\r\n                line.isPickable = false;\r\n            }\r\n        }\r\n\r\n        return root;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}