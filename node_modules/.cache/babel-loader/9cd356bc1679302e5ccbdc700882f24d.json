{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\nimport { InputBlock } from '../Input/inputBlock';\nimport { _TypeStore } from '../../../../Misc/typeStore';\n/**\r\n * Block used to add support for instances\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_instances\r\n */\n\nvar InstancesBlock =\n/** @class */\nfunction (_super) {\n  __extends(InstancesBlock, _super);\n  /**\r\n   * Creates a new InstancesBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function InstancesBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Vertex) || this;\n\n    _this.registerInput(\"world0\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"world1\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"world2\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"world3\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\n\n    _this.registerOutput(\"instanceID\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  InstancesBlock.prototype.getClassName = function () {\n    return \"InstancesBlock\";\n  };\n\n  Object.defineProperty(InstancesBlock.prototype, \"world0\", {\n    /**\r\n     * Gets the first world row input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InstancesBlock.prototype, \"world1\", {\n    /**\r\n     * Gets the second world row input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InstancesBlock.prototype, \"world2\", {\n    /**\r\n     * Gets the third world row input component\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InstancesBlock.prototype, \"world3\", {\n    /**\r\n     * Gets the forth world row input component\r\n     */\n    get: function () {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InstancesBlock.prototype, \"world\", {\n    /**\r\n     * Gets the world input component\r\n     */\n    get: function () {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InstancesBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InstancesBlock.prototype, \"instanceID\", {\n    /**\r\n     * Gets the isntanceID component\r\n     */\n    get: function () {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  InstancesBlock.prototype.autoConfigure = function (material) {\n    if (!this.world0.connectedPoint) {\n      var world0Input = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"world0\";\n      });\n\n      if (!world0Input) {\n        world0Input = new InputBlock(\"world0\");\n        world0Input.setAsAttribute(\"world0\");\n      }\n\n      world0Input.output.connectTo(this.world0);\n    }\n\n    if (!this.world1.connectedPoint) {\n      var world1Input = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"world1\";\n      });\n\n      if (!world1Input) {\n        world1Input = new InputBlock(\"world1\");\n        world1Input.setAsAttribute(\"world1\");\n      }\n\n      world1Input.output.connectTo(this.world1);\n    }\n\n    if (!this.world2.connectedPoint) {\n      var world2Input = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"world2\";\n      });\n\n      if (!world2Input) {\n        world2Input = new InputBlock(\"world2\");\n        world2Input.setAsAttribute(\"world2\");\n      }\n\n      world2Input.output.connectTo(this.world2);\n    }\n\n    if (!this.world3.connectedPoint) {\n      var world3Input = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"world3\";\n      });\n\n      if (!world3Input) {\n        world3Input = new InputBlock(\"world3\");\n        world3Input.setAsAttribute(\"world3\");\n      }\n\n      world3Input.output.connectTo(this.world3);\n    }\n\n    if (!this.world.connectedPoint) {\n      var worldInput = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"world\";\n      });\n\n      if (!worldInput) {\n        worldInput = new InputBlock(\"world\");\n        worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\n      }\n\n      worldInput.output.connectTo(this.world);\n    }\n\n    this.world.define = \"!INSTANCES || THIN_INSTANCES\";\n  };\n\n  InstancesBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines, useInstances, subMesh) {\n    if (useInstances === void 0) {\n      useInstances = false;\n    }\n\n    var changed = false;\n\n    if (defines[\"INSTANCES\"] !== useInstances) {\n      defines.setValue(\"INSTANCES\", useInstances);\n      changed = true;\n    }\n\n    if (subMesh && defines[\"THIN_INSTANCES\"] !== !!(subMesh === null || subMesh === void 0 ? void 0 : subMesh.getRenderingMesh().hasThinInstances)) {\n      defines.setValue(\"THIN_INSTANCES\", !!(subMesh === null || subMesh === void 0 ? void 0 : subMesh.getRenderingMesh().hasThinInstances));\n      changed = true;\n    }\n\n    if (changed) {\n      defines.markAsUnprocessed();\n    }\n  };\n\n  InstancesBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state); // Register for defines\n\n\n    state.sharedData.blocksWithDefines.push(this); // Emit code\n\n    var output = this._outputs[0];\n    var instanceID = this._outputs[1];\n    var world0 = this.world0;\n    var world1 = this.world1;\n    var world2 = this.world2;\n    var world3 = this.world3;\n    state.compilationString += \"#ifdef INSTANCES\\r\\n\";\n    state.compilationString += this._declareOutput(output, state) + (\" = mat4(\" + world0.associatedVariableName + \", \" + world1.associatedVariableName + \", \" + world2.associatedVariableName + \", \" + world3.associatedVariableName + \");\\r\\n\");\n    state.compilationString += \"#ifdef THIN_INSTANCES\\r\\n\";\n    state.compilationString += output.associatedVariableName + \" = \" + this.world.associatedVariableName + \" * \" + output.associatedVariableName + \";\\r\\n\";\n    state.compilationString += \"#endif\\r\\n\";\n    state.compilationString += this._declareOutput(instanceID, state) + \" = float(gl_InstanceID);\\r\\n\";\n    state.compilationString += \"#else\\r\\n\";\n    state.compilationString += this._declareOutput(output, state) + (\" = \" + this.world.associatedVariableName + \";\\r\\n\");\n    state.compilationString += this._declareOutput(instanceID, state) + \" = 0.0;\\r\\n\";\n    state.compilationString += \"#endif\\r\\n\";\n    return this;\n  };\n\n  return InstancesBlock;\n}(NodeMaterialBlock);\n\nexport { InstancesBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.InstancesBlock\"] = InstancesBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Vertex/instancesBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { AbstractMesh } from '../../../../Meshes/abstractMesh';\r\nimport { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';\r\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\r\nimport { InputBlock } from '../Input/inputBlock';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\nimport { SubMesh } from '../../../../Meshes/subMesh';\r\n\r\n/**\r\n * Block used to add support for instances\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_instances\r\n */\r\nexport class InstancesBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new InstancesBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex);\r\n\r\n        this.registerInput(\"world0\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world1\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world2\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world3\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n        this.registerOutput(\"instanceID\", NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"InstancesBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first world row input component\r\n     */\r\n    public get world0(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the second world row input component\r\n     */\r\n    public get world1(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the third world row input component\r\n     */\r\n    public get world2(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the forth world row input component\r\n     */\r\n    public get world3(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the world input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the isntanceID component\r\n     */\r\n    public get instanceID(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.world0.connectedPoint) {\r\n            let world0Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world0\");\r\n\r\n            if (!world0Input) {\r\n                world0Input = new InputBlock(\"world0\");\r\n                world0Input.setAsAttribute(\"world0\");\r\n            }\r\n            world0Input.output.connectTo(this.world0);\r\n        }\r\n        if (!this.world1.connectedPoint) {\r\n            let world1Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world1\");\r\n\r\n            if (!world1Input) {\r\n                world1Input = new InputBlock(\"world1\");\r\n                world1Input.setAsAttribute(\"world1\");\r\n            }\r\n            world1Input.output.connectTo(this.world1);\r\n        }\r\n        if (!this.world2.connectedPoint) {\r\n            let world2Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world2\");\r\n\r\n            if (!world2Input) {\r\n                world2Input = new InputBlock(\"world2\");\r\n                world2Input.setAsAttribute(\"world2\");\r\n            }\r\n            world2Input.output.connectTo(this.world2);\r\n        }\r\n        if (!this.world3.connectedPoint) {\r\n            let world3Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world3\");\r\n\r\n            if (!world3Input) {\r\n                world3Input = new InputBlock(\"world3\");\r\n                world3Input.setAsAttribute(\"world3\");\r\n            }\r\n            world3Input.output.connectTo(this.world3);\r\n        }\r\n        if (!this.world.connectedPoint) {\r\n            let worldInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world\");\r\n\r\n            if (!worldInput) {\r\n                worldInput = new InputBlock(\"world\");\r\n                worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\r\n            }\r\n            worldInput.output.connectTo(this.world);\r\n        }\r\n\r\n        this.world.define = \"!INSTANCES || THIN_INSTANCES\";\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, useInstances: boolean = false, subMesh?: SubMesh) {\r\n        let changed = false;\r\n        if (defines[\"INSTANCES\"] !== useInstances) {\r\n            defines.setValue(\"INSTANCES\", useInstances);\r\n            changed = true;\r\n        }\r\n\r\n        if (subMesh && defines[\"THIN_INSTANCES\"] !== !!subMesh?.getRenderingMesh().hasThinInstances) {\r\n            defines.setValue(\"THIN_INSTANCES\", !!subMesh?.getRenderingMesh().hasThinInstances);\r\n            changed = true;\r\n        }\r\n\r\n        if (changed) {\r\n            defines.markAsUnprocessed();\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        // Register for defines\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        // Emit code\r\n        let output = this._outputs[0];\r\n        let instanceID = this._outputs[1];\r\n        let world0 = this.world0;\r\n        let world1 = this.world1;\r\n        let world2 = this.world2;\r\n        let world3 = this.world3;\r\n\r\n        state.compilationString += `#ifdef INSTANCES\\r\\n`;\r\n        state.compilationString += this._declareOutput(output, state) + ` = mat4(${world0.associatedVariableName}, ${world1.associatedVariableName}, ${world2.associatedVariableName}, ${world3.associatedVariableName});\\r\\n`;\r\n        state.compilationString += `#ifdef THIN_INSTANCES\\r\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = ${this.world.associatedVariableName} * ${output.associatedVariableName};\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n        state.compilationString += this._declareOutput(instanceID, state) + ` = float(gl_InstanceID);\\r\\n`;\r\n        state.compilationString += `#else\\r\\n`;\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${this.world.associatedVariableName};\\r\\n`;\r\n        state.compilationString += this._declareOutput(instanceID, state) + ` = 0.0;\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n        return this;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.InstancesBlock\"] = InstancesBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}