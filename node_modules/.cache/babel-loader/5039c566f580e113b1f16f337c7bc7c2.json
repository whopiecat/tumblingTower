{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/convolution.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, SerializationHelper } from '../Misc/decorators';\n/**\r\n * The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the\r\n * input texture to perform effects such as edge detection or sharpening\r\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n */\n\nvar ConvolutionPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ConvolutionPostProcess, _super);\n  /**\r\n   * Creates a new instance ConvolutionPostProcess\r\n   * @param name The name of the effect.\r\n   * @param kernel Array of 9 values corresponding to the 3x3 kernel to be applied\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   */\n\n\n  function ConvolutionPostProcess(name, kernel, options, camera, samplingMode, engine, reusable, textureType) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, name, \"convolution\", [\"kernel\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType) || this;\n\n    _this.kernel = kernel;\n\n    _this.onApply = function (effect) {\n      effect.setFloat2(\"screenSize\", _this.width, _this.height);\n      effect.setArray(\"kernel\", _this.kernel);\n    };\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"ConvolutionPostProcess\" string\r\n   */\n\n\n  ConvolutionPostProcess.prototype.getClassName = function () {\n    return \"ConvolutionPostProcess\";\n  };\n  /** @hidden */\n\n\n  ConvolutionPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new ConvolutionPostProcess(parsedPostProcess.name, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType);\n    }, parsedPostProcess, scene, rootUrl);\n  }; // Statics\n\n  /**\r\n   * Edge detection 0 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n   */\n\n\n  ConvolutionPostProcess.EdgeDetect0Kernel = [1, 0, -1, 0, 0, 0, -1, 0, 1];\n  /**\r\n   * Edge detection 1 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n   */\n\n  ConvolutionPostProcess.EdgeDetect1Kernel = [0, 1, 0, 1, -4, 1, 0, 1, 0];\n  /**\r\n   * Edge detection 2 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n   */\n\n  ConvolutionPostProcess.EdgeDetect2Kernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1];\n  /**\r\n   * Kernel to sharpen an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n   */\n\n  ConvolutionPostProcess.SharpenKernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];\n  /**\r\n   * Kernel to emboss an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n   */\n\n  ConvolutionPostProcess.EmbossKernel = [-2, -1, 0, -1, 1, 1, 0, 1, 2];\n  /**\r\n   * Kernel to blur an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n   */\n\n  ConvolutionPostProcess.GaussianKernel = [0, 1, 0, 1, 1, 1, 0, 1, 0];\n\n  __decorate([serialize()], ConvolutionPostProcess.prototype, \"kernel\", void 0);\n\n  return ConvolutionPostProcess;\n}(PostProcess);\n\nexport { ConvolutionPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.ConvolutionPostProcess\"] = ConvolutionPostProcess;","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/convolutionPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { Effect } from \"../Materials/effect\";\r\n\r\n\r\nimport \"../Shaders/convolution.fragment\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { serialize, SerializationHelper } from '../Misc/decorators';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the\r\n * input texture to perform effects such as edge detection or sharpening\r\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n */\r\nexport class ConvolutionPostProcess extends PostProcess {\r\n    /** Array of 9 values corresponding to the 3x3 kernel to be applied */\r\n    @serialize()\r\n    public kernel: number[];\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ConvolutionPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ConvolutionPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ConvolutionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param kernel Array of 9 values corresponding to the 3x3 kernel to be applied\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     */\r\n    constructor(name: string,\r\n        kernel: number[],\r\n        options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0) {\r\n        super(name, \"convolution\", [\"kernel\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType);\r\n            this.kernel = kernel;\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setFloat2(\"screenSize\", this.width, this.height);\r\n            effect.setArray(\"kernel\", this.kernel);\r\n        };\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<ConvolutionPostProcess> {\r\n        return SerializationHelper.Parse(() => {\r\n            return new ConvolutionPostProcess(\r\n                parsedPostProcess.name, parsedPostProcess.kernel,\r\n                parsedPostProcess.options, targetCamera,\r\n                parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Edge detection 0 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect0Kernel = [1, 0, -1, 0, 0, 0, -1, 0, 1];\r\n    /**\r\n     * Edge detection 1 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect1Kernel = [0, 1, 0, 1, -4, 1, 0, 1, 0];\r\n    /**\r\n     * Edge detection 2 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect2Kernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1];\r\n    /**\r\n     * Kernel to sharpen an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static SharpenKernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];\r\n    /**\r\n     * Kernel to emboss an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EmbossKernel = [-2, -1, 0, -1, 1, 1, 0, 1, 2];\r\n    /**\r\n     * Kernel to blur an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static GaussianKernel = [0, 1, 0, 1, 1, 1, 0, 1, 0];\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ConvolutionPostProcess\"] = ConvolutionPostProcess;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}