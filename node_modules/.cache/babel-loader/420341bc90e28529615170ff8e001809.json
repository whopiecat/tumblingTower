{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Logger } from \"../../Misc/logger\";\nimport { Observable } from \"../../Misc/observable\";\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\nimport { TargetCamera } from \"../../Cameras/targetCamera\";\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera\";\nimport { VRDeviceOrientationFreeCamera } from \"../../Cameras/VR/vrDeviceOrientationFreeCamera\";\nimport { WebVRFreeCamera } from \"../../Cameras/VR/webVRCamera\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\nimport { Quaternion, Matrix, Vector3 } from \"../../Maths/math.vector\";\nimport { Color3, Color4 } from '../../Maths/math.color';\nimport { Gamepad } from \"../../Gamepads/gamepad\";\nimport { PoseEnabledController, PoseEnabledControllerType } from \"../../Gamepads/Controllers/poseEnabledController\";\nimport { WebVRController } from \"../../Gamepads/Controllers/webVRController\";\nimport { Xbox360Button } from \"../../Gamepads/xboxGamepad\";\nimport { Mesh } from \"../../Meshes/mesh\";\nimport { Ray } from \"../../Culling/ray\";\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration\";\nimport { StandardMaterial } from \"../../Materials/standardMaterial\";\nimport { DynamicTexture } from \"../../Materials/Textures/dynamicTexture\";\nimport { ImageProcessingPostProcess } from \"../../PostProcesses/imageProcessingPostProcess\";\nimport { SineEase, EasingFunction, CircleEase } from \"../../Animations/easing\";\nimport { Animation } from \"../../Animations/animation\";\nimport { VRCameraMetrics } from '../../Cameras/VR/vrCameraMetrics';\nimport \"../../Meshes/Builders/groundBuilder\";\nimport \"../../Meshes/Builders/torusBuilder\";\nimport \"../../Meshes/Builders/cylinderBuilder\";\nimport \"../../Gamepads/gamepadSceneComponent\";\nimport \"../../Animations/animatable\";\nimport { Axis } from '../../Maths/math.axis';\nimport { WebXRSessionManager } from '../../XR/webXRSessionManager';\nimport { WebXRState } from '../../XR/webXRTypes';\n\nvar VRExperienceHelperGazer =\n/** @class */\nfunction () {\n  function VRExperienceHelperGazer(scene, gazeTrackerToClone) {\n    if (gazeTrackerToClone === void 0) {\n      gazeTrackerToClone = null;\n    }\n\n    this.scene = scene;\n    /** @hidden */\n\n    this._pointerDownOnMeshAsked = false;\n    /** @hidden */\n\n    this._isActionableMesh = false;\n    /** @hidden */\n\n    this._teleportationRequestInitiated = false;\n    /** @hidden */\n\n    this._teleportationBackRequestInitiated = false;\n    /** @hidden */\n\n    this._rotationRightAsked = false;\n    /** @hidden */\n\n    this._rotationLeftAsked = false;\n    /** @hidden */\n\n    this._dpadPressed = true;\n    /** @hidden */\n\n    this._activePointer = false;\n    this._id = VRExperienceHelperGazer._idCounter++; // Gaze tracker\n\n    if (!gazeTrackerToClone) {\n      this._gazeTracker = Mesh.CreateTorus(\"gazeTracker\", 0.0035, 0.0025, 20, scene, false);\n\n      this._gazeTracker.bakeCurrentTransformIntoVertices();\n\n      this._gazeTracker.isPickable = false;\n      this._gazeTracker.isVisible = false;\n      var targetMat = new StandardMaterial(\"targetMat\", scene);\n      targetMat.specularColor = Color3.Black();\n      targetMat.emissiveColor = new Color3(0.7, 0.7, 0.7);\n      targetMat.backFaceCulling = false;\n      this._gazeTracker.material = targetMat;\n    } else {\n      this._gazeTracker = gazeTrackerToClone.clone(\"gazeTracker\");\n    }\n  }\n  /** @hidden */\n\n\n  VRExperienceHelperGazer.prototype._getForwardRay = function (length) {\n    return new Ray(Vector3.Zero(), new Vector3(0, 0, length));\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperGazer.prototype._selectionPointerDown = function () {\n    this._pointerDownOnMeshAsked = true;\n\n    if (this._currentHit) {\n      this.scene.simulatePointerDown(this._currentHit, {\n        pointerId: this._id\n      });\n    }\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperGazer.prototype._selectionPointerUp = function () {\n    if (this._currentHit) {\n      this.scene.simulatePointerUp(this._currentHit, {\n        pointerId: this._id\n      });\n    }\n\n    this._pointerDownOnMeshAsked = false;\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperGazer.prototype._activatePointer = function () {\n    this._activePointer = true;\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperGazer.prototype._deactivatePointer = function () {\n    this._activePointer = false;\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperGazer.prototype._updatePointerDistance = function (distance) {\n    if (distance === void 0) {\n      distance = 100;\n    }\n  };\n\n  VRExperienceHelperGazer.prototype.dispose = function () {\n    this._interactionsEnabled = false;\n    this._teleportationEnabled = false;\n\n    if (this._gazeTracker) {\n      this._gazeTracker.dispose();\n    }\n  };\n\n  VRExperienceHelperGazer._idCounter = 0;\n  return VRExperienceHelperGazer;\n}();\n\nvar VRExperienceHelperControllerGazer =\n/** @class */\nfunction (_super) {\n  __extends(VRExperienceHelperControllerGazer, _super);\n\n  function VRExperienceHelperControllerGazer(webVRController, scene, gazeTrackerToClone) {\n    var _this = _super.call(this, scene, gazeTrackerToClone) || this;\n\n    _this.webVRController = webVRController; // Laser pointer\n\n    _this._laserPointer = Mesh.CreateCylinder(\"laserPointer\", 1, 0.004, 0.0002, 20, 1, scene, false);\n    var laserPointerMaterial = new StandardMaterial(\"laserPointerMat\", scene);\n    laserPointerMaterial.emissiveColor = new Color3(0.7, 0.7, 0.7);\n    laserPointerMaterial.alpha = 0.6;\n    _this._laserPointer.material = laserPointerMaterial;\n    _this._laserPointer.rotation.x = Math.PI / 2;\n    _this._laserPointer.position.z = -0.5;\n    _this._laserPointer.isVisible = false;\n    _this._laserPointer.isPickable = false;\n\n    if (!webVRController.mesh) {\n      // Create an empty mesh that is used prior to loading the high quality model\n      var preloadMesh = new Mesh(\"preloadControllerMesh\", scene);\n      var preloadPointerPose = new Mesh(PoseEnabledController.POINTING_POSE, scene);\n      preloadPointerPose.rotation.x = -0.7;\n      preloadMesh.addChild(preloadPointerPose);\n      webVRController.attachToMesh(preloadMesh);\n    }\n\n    _this._setLaserPointerParent(webVRController.mesh);\n\n    _this._meshAttachedObserver = webVRController._meshAttachedObservable.add(function (mesh) {\n      _this._setLaserPointerParent(mesh);\n    });\n    return _this;\n  }\n\n  VRExperienceHelperControllerGazer.prototype._getForwardRay = function (length) {\n    return this.webVRController.getForwardRay(length);\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperControllerGazer.prototype._activatePointer = function () {\n    _super.prototype._activatePointer.call(this);\n\n    this._laserPointer.isVisible = true;\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperControllerGazer.prototype._deactivatePointer = function () {\n    _super.prototype._deactivatePointer.call(this);\n\n    this._laserPointer.isVisible = false;\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperControllerGazer.prototype._setLaserPointerColor = function (color) {\n    this._laserPointer.material.emissiveColor = color;\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperControllerGazer.prototype._setLaserPointerLightingDisabled = function (disabled) {\n    this._laserPointer.material.disableLighting = disabled;\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperControllerGazer.prototype._setLaserPointerParent = function (mesh) {\n    var makeNotPick = function (root) {\n      root.isPickable = false;\n      root.getChildMeshes().forEach(function (c) {\n        makeNotPick(c);\n      });\n    };\n\n    makeNotPick(mesh);\n    var meshChildren = mesh.getChildren(undefined, false);\n    var laserParent = mesh;\n    this.webVRController._pointingPoseNode = null;\n\n    for (var i = 0; i < meshChildren.length; i++) {\n      if (meshChildren[i].name && meshChildren[i].name.indexOf(PoseEnabledController.POINTING_POSE) >= 0) {\n        laserParent = meshChildren[i];\n        this.webVRController._pointingPoseNode = laserParent;\n        break;\n      }\n    }\n\n    this._laserPointer.parent = laserParent;\n  };\n\n  VRExperienceHelperControllerGazer.prototype._updatePointerDistance = function (distance) {\n    if (distance === void 0) {\n      distance = 100;\n    }\n\n    this._laserPointer.scaling.y = distance;\n    this._laserPointer.position.z = -distance / 2;\n  };\n\n  VRExperienceHelperControllerGazer.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._laserPointer.dispose();\n\n    if (this._meshAttachedObserver) {\n      this.webVRController._meshAttachedObservable.remove(this._meshAttachedObserver);\n    }\n  };\n\n  return VRExperienceHelperControllerGazer;\n}(VRExperienceHelperGazer);\n\nvar VRExperienceHelperCameraGazer =\n/** @class */\nfunction (_super) {\n  __extends(VRExperienceHelperCameraGazer, _super);\n\n  function VRExperienceHelperCameraGazer(getCamera, scene) {\n    var _this = _super.call(this, scene) || this;\n\n    _this.getCamera = getCamera;\n    return _this;\n  }\n\n  VRExperienceHelperCameraGazer.prototype._getForwardRay = function (length) {\n    var camera = this.getCamera();\n\n    if (camera) {\n      return camera.getForwardRay(length);\n    } else {\n      return new Ray(Vector3.Zero(), Vector3.Forward());\n    }\n  };\n\n  return VRExperienceHelperCameraGazer;\n}(VRExperienceHelperGazer);\n/**\r\n * Event containing information after VR has been entered\r\n */\n\n\nvar OnAfterEnteringVRObservableEvent =\n/** @class */\nfunction () {\n  function OnAfterEnteringVRObservableEvent() {}\n\n  return OnAfterEnteringVRObservableEvent;\n}();\n\nexport { OnAfterEnteringVRObservableEvent };\n/**\r\n * Helps to quickly add VR support to an existing scene.\r\n * See https://doc.babylonjs.com/how_to/webvr_helper\r\n */\n\nvar VRExperienceHelper =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a VRExperienceHelper.\r\n   * Helps to quickly add VR support to an existing scene.\r\n   * @param scene The scene the VRExperienceHelper belongs to.\r\n   * @param webVROptions Options to modify the vr experience helper's behavior.\r\n   */\n  function VRExperienceHelper(scene,\n  /** Options to modify the vr experience helper's behavior. */\n  webVROptions) {\n    var _this = this;\n\n    if (webVROptions === void 0) {\n      webVROptions = {};\n    }\n\n    this.webVROptions = webVROptions; // Can the system support WebVR, even if a headset isn't plugged in?\n\n    this._webVRsupported = false; // If WebVR is supported, is a headset plugged in and are we ready to present?\n\n    this._webVRready = false; // Are we waiting for the requestPresent callback to complete?\n\n    this._webVRrequesting = false; // Are we presenting to the headset right now? (this is the vrDevice state)\n\n    this._webVRpresenting = false; // Are we presenting in the fullscreen fallback?\n\n    this._fullscreenVRpresenting = false;\n    /**\r\n     * Gets or sets a boolean indicating that gaze can be enabled even if pointer lock is not engage (useful on iOS where fullscreen mode and pointer lock are not supported)\r\n     */\n\n    this.enableGazeEvenWhenNoPointerLock = false;\n    /**\r\n     * Gets or sets a boolean indicating that the VREXperienceHelper will exit VR if double tap is detected\r\n     */\n\n    this.exitVROnDoubleTap = true;\n    /**\r\n     * Observable raised right before entering VR.\r\n     */\n\n    this.onEnteringVRObservable = new Observable();\n    /**\r\n     * Observable raised when entering VR has completed.\r\n     */\n\n    this.onAfterEnteringVRObservable = new Observable();\n    /**\r\n     * Observable raised when exiting VR.\r\n     */\n\n    this.onExitingVRObservable = new Observable();\n    /**\r\n     * Observable raised when controller mesh is loaded.\r\n     */\n\n    this.onControllerMeshLoadedObservable = new Observable();\n    this._useCustomVRButton = false;\n    this._teleportationRequested = false;\n    this._teleportActive = false;\n    this._floorMeshesCollection = [];\n    this._teleportationMode = VRExperienceHelper.TELEPORTATIONMODE_CONSTANTTIME;\n    this._teleportationTime = 122;\n    this._teleportationSpeed = 20;\n    this._rotationAllowed = true;\n    this._teleportBackwardsVector = new Vector3(0, -1, -1);\n    this._isDefaultTeleportationTarget = true;\n    this._teleportationFillColor = \"#444444\";\n    this._teleportationBorderColor = \"#FFFFFF\";\n    this._rotationAngle = 0;\n    this._haloCenter = new Vector3(0, 0, 0);\n    this._padSensibilityUp = 0.65;\n    this._padSensibilityDown = 0.35;\n    this._leftController = null;\n    this._rightController = null;\n    this._gazeColor = new Color3(0.7, 0.7, 0.7);\n    this._laserColor = new Color3(0.7, 0.7, 0.7);\n    this._pickedLaserColor = new Color3(0.2, 0.2, 1);\n    this._pickedGazeColor = new Color3(0, 0, 1);\n    /**\r\n     * Observable raised when a new mesh is selected based on meshSelectionPredicate\r\n     */\n\n    this.onNewMeshSelected = new Observable();\n    /**\r\n     * Observable raised when a new mesh is selected based on meshSelectionPredicate.\r\n     * This observable will provide the mesh and the controller used to select the mesh\r\n     */\n\n    this.onMeshSelectedWithController = new Observable();\n    /**\r\n     * Observable raised when a new mesh is picked based on meshSelectionPredicate\r\n     */\n\n    this.onNewMeshPicked = new Observable();\n    /**\r\n     * Observable raised before camera teleportation\r\n    */\n\n    this.onBeforeCameraTeleport = new Observable();\n    /**\r\n     *  Observable raised after camera teleportation\r\n    */\n\n    this.onAfterCameraTeleport = new Observable();\n    /**\r\n    * Observable raised when current selected mesh gets unselected\r\n    */\n\n    this.onSelectedMeshUnselected = new Observable();\n    /**\r\n     * Set teleportation enabled. If set to false camera teleportation will be disabled but camera rotation will be kept.\r\n     */\n\n    this.teleportationEnabled = true;\n    this._teleportationInitialized = false;\n    this._interactionsEnabled = false;\n    this._interactionsRequested = false;\n    this._displayGaze = true;\n    this._displayLaserPointer = true;\n    /**\r\n     * If the gaze trackers scale should be updated to be constant size when pointing at near/far meshes\r\n     */\n\n    this.updateGazeTrackerScale = true;\n    /**\r\n     * If the gaze trackers color should be updated when selecting meshes\r\n     */\n\n    this.updateGazeTrackerColor = true;\n    /**\r\n     * If the controller laser color should be updated when selecting meshes\r\n     */\n\n    this.updateControllerLaserColor = true;\n    /**\r\n     * Defines whether or not Pointer lock should be requested when switching to\r\n     * full screen.\r\n     */\n\n    this.requestPointerLockOnFullScreen = true;\n    /**\r\n     * Was the XR test done already. If this is true AND this.xr exists, xr is initialized.\r\n     * If this is true and no this.xr, xr exists but is not supported, using WebVR.\r\n     */\n\n    this.xrTestDone = false;\n\n    this._onResize = function () {\n      _this.moveButtonToBottomRight();\n\n      if (_this._fullscreenVRpresenting && _this._webVRready) {\n        _this.exitVR();\n      }\n    };\n\n    this._onFullscreenChange = function () {\n      var anyDoc = document;\n\n      if (anyDoc.fullscreen !== undefined) {\n        _this._fullscreenVRpresenting = document.fullscreen;\n      } else if (anyDoc.mozFullScreen !== undefined) {\n        _this._fullscreenVRpresenting = anyDoc.mozFullScreen;\n      } else if (anyDoc.webkitIsFullScreen !== undefined) {\n        _this._fullscreenVRpresenting = anyDoc.webkitIsFullScreen;\n      } else if (anyDoc.msIsFullScreen !== undefined) {\n        _this._fullscreenVRpresenting = anyDoc.msIsFullScreen;\n      } else if (document.msFullscreenElement !== undefined) {\n        _this._fullscreenVRpresenting = document.msFullscreenElement;\n      }\n\n      if (!_this._fullscreenVRpresenting && _this._inputElement) {\n        _this.exitVR();\n\n        if (!_this._useCustomVRButton && _this._btnVR) {\n          _this._btnVR.style.top = _this._inputElement.offsetTop + _this._inputElement.offsetHeight - 70 + \"px\";\n          _this._btnVR.style.left = _this._inputElement.offsetLeft + _this._inputElement.offsetWidth - 100 + \"px\"; // make sure the button is visible after setting its position\n\n          _this.updateButtonVisibility();\n        }\n      }\n    };\n\n    this._cachedAngularSensibility = {\n      angularSensibilityX: null,\n      angularSensibilityY: null,\n      angularSensibility: null\n    };\n\n    this.beforeRender = function () {\n      if (_this._leftController && _this._leftController._activePointer) {\n        _this._castRayAndSelectObject(_this._leftController);\n      }\n\n      if (_this._rightController && _this._rightController._activePointer) {\n        _this._castRayAndSelectObject(_this._rightController);\n      }\n\n      if (_this._noControllerIsActive && (_this._scene.getEngine().isPointerLock || _this.enableGazeEvenWhenNoPointerLock)) {\n        _this._castRayAndSelectObject(_this._cameraGazer);\n      } else {\n        _this._cameraGazer._gazeTracker.isVisible = false;\n      }\n    };\n\n    this._onNewGamepadConnected = function (gamepad) {\n      if (gamepad.type !== Gamepad.POSE_ENABLED) {\n        if (gamepad.leftStick) {\n          gamepad.onleftstickchanged(function (stickValues) {\n            if (_this._teleportationInitialized && _this.teleportationEnabled) {\n              // Listening to classic/xbox gamepad only if no VR controller is active\n              if (!_this._leftController && !_this._rightController || _this._leftController && !_this._leftController._activePointer && _this._rightController && !_this._rightController._activePointer) {\n                _this._checkTeleportWithRay(stickValues, _this._cameraGazer);\n\n                _this._checkTeleportBackwards(stickValues, _this._cameraGazer);\n              }\n            }\n          });\n        }\n\n        if (gamepad.rightStick) {\n          gamepad.onrightstickchanged(function (stickValues) {\n            if (_this._teleportationInitialized) {\n              _this._checkRotate(stickValues, _this._cameraGazer);\n            }\n          });\n        }\n\n        if (gamepad.type === Gamepad.XBOX) {\n          gamepad.onbuttondown(function (buttonPressed) {\n            if (_this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\n              _this._cameraGazer._selectionPointerDown();\n            }\n          });\n          gamepad.onbuttonup(function (buttonPressed) {\n            if (_this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\n              _this._cameraGazer._selectionPointerUp();\n            }\n          });\n        }\n      } else {\n        var webVRController = gamepad;\n        var controller = new VRExperienceHelperControllerGazer(webVRController, _this._scene, _this._cameraGazer._gazeTracker);\n\n        if (webVRController.hand === \"right\" || _this._leftController && _this._leftController.webVRController != webVRController) {\n          _this._rightController = controller;\n        } else {\n          _this._leftController = controller;\n        }\n\n        _this._tryEnableInteractionOnController(controller);\n      }\n    }; // This only succeeds if the controller's mesh exists for the controller so this must be called whenever new controller is connected or when mesh is loaded\n\n\n    this._tryEnableInteractionOnController = function (controller) {\n      if (_this._interactionsRequested && !controller._interactionsEnabled) {\n        _this._enableInteractionOnController(controller);\n      }\n\n      if (_this._teleportationRequested && !controller._teleportationEnabled) {\n        _this._enableTeleportationOnController(controller);\n      }\n    };\n\n    this._onNewGamepadDisconnected = function (gamepad) {\n      if (gamepad instanceof WebVRController) {\n        if (gamepad.hand === \"left\" && _this._leftController != null) {\n          _this._leftController.dispose();\n\n          _this._leftController = null;\n        }\n\n        if (gamepad.hand === \"right\" && _this._rightController != null) {\n          _this._rightController.dispose();\n\n          _this._rightController = null;\n        }\n      }\n    };\n\n    this._workingVector = Vector3.Zero();\n    this._workingQuaternion = Quaternion.Identity();\n    this._workingMatrix = Matrix.Identity();\n    this._scene = scene;\n    this._inputElement = scene.getEngine().getInputElement(); // check for VR support:\n\n    var vrSupported = ('getVRDisplays' in navigator); // no VR support? force XR\n\n    if (!vrSupported) {\n      webVROptions.useXR = true;\n    } // Parse options\n\n\n    if (webVROptions.createFallbackVRDeviceOrientationFreeCamera === undefined) {\n      webVROptions.createFallbackVRDeviceOrientationFreeCamera = true;\n    }\n\n    if (webVROptions.createDeviceOrientationCamera === undefined) {\n      webVROptions.createDeviceOrientationCamera = true;\n    }\n\n    if (webVROptions.laserToggle === undefined) {\n      webVROptions.laserToggle = true;\n    }\n\n    if (webVROptions.defaultHeight === undefined) {\n      webVROptions.defaultHeight = 1.7;\n    }\n\n    if (webVROptions.useCustomVRButton) {\n      this._useCustomVRButton = true;\n\n      if (webVROptions.customVRButton) {\n        this._btnVR = webVROptions.customVRButton;\n      }\n    }\n\n    if (webVROptions.rayLength) {\n      this._rayLength = webVROptions.rayLength;\n    }\n\n    this._defaultHeight = webVROptions.defaultHeight;\n\n    if (webVROptions.positionScale) {\n      this._rayLength *= webVROptions.positionScale;\n      this._defaultHeight *= webVROptions.positionScale;\n    }\n\n    this._hasEnteredVR = false; // Set position\n\n    if (this._scene.activeCamera) {\n      this._position = this._scene.activeCamera.position.clone();\n    } else {\n      this._position = new Vector3(0, this._defaultHeight, 0);\n    } // Set non-vr camera\n\n\n    if (webVROptions.createDeviceOrientationCamera || !this._scene.activeCamera) {\n      this._deviceOrientationCamera = new DeviceOrientationCamera(\"deviceOrientationVRHelper\", this._position.clone(), scene); // Copy data from existing camera\n\n      if (this._scene.activeCamera) {\n        this._deviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\n        this._deviceOrientationCamera.maxZ = this._scene.activeCamera.maxZ; // Set rotation from previous camera\n\n        if (this._scene.activeCamera instanceof TargetCamera && this._scene.activeCamera.rotation) {\n          var targetCamera = this._scene.activeCamera;\n\n          if (targetCamera.rotationQuaternion) {\n            this._deviceOrientationCamera.rotationQuaternion.copyFrom(targetCamera.rotationQuaternion);\n          } else {\n            this._deviceOrientationCamera.rotationQuaternion.copyFrom(Quaternion.RotationYawPitchRoll(targetCamera.rotation.y, targetCamera.rotation.x, targetCamera.rotation.z));\n          }\n\n          this._deviceOrientationCamera.rotation = targetCamera.rotation.clone();\n        }\n      }\n\n      this._scene.activeCamera = this._deviceOrientationCamera;\n\n      if (this._inputElement) {\n        this._scene.activeCamera.attachControl();\n      }\n    } else {\n      this._existingCamera = this._scene.activeCamera;\n    }\n\n    if (this.webVROptions.useXR && navigator.xr) {\n      // force-check XR session support\n      WebXRSessionManager.IsSessionSupportedAsync(\"immersive-vr\").then(function (supported) {\n        if (supported) {\n          Logger.Log(\"Using WebXR. It is recommended to use the WebXRDefaultExperience directly\"); // it is possible to use XR, let's do it!\n\n          scene.createDefaultXRExperienceAsync({\n            floorMeshes: webVROptions.floorMeshes || []\n          }).then(function (xr) {\n            _this.xr = xr; // connect observables\n\n            _this.xrTestDone = true;\n            _this._cameraGazer = new VRExperienceHelperCameraGazer(function () {\n              return _this.xr.baseExperience.camera;\n            }, scene);\n\n            _this.xr.baseExperience.onStateChangedObservable.add(function (state) {\n              // support for entering / exiting\n              switch (state) {\n                case WebXRState.ENTERING_XR:\n                  _this.onEnteringVRObservable.notifyObservers(_this);\n\n                  if (!_this._interactionsEnabled) {\n                    _this.xr.pointerSelection.detach();\n                  }\n\n                  _this.xr.pointerSelection.displayLaserPointer = _this._displayLaserPointer;\n                  break;\n\n                case WebXRState.EXITING_XR:\n                  _this.onExitingVRObservable.notifyObservers(_this); // resize to update width and height when exiting vr exits fullscreen\n\n\n                  _this._scene.getEngine().resize();\n\n                  break;\n\n                case WebXRState.IN_XR:\n                  _this._hasEnteredVR = true;\n                  break;\n\n                case WebXRState.NOT_IN_XR:\n                  _this._hasEnteredVR = false;\n                  break;\n              }\n            });\n          });\n        } else {\n          // XR not supported (thou exists), continue WebVR init\n          _this.completeVRInit(scene, webVROptions);\n        }\n      });\n    } else {\n      // no XR, continue init synchronous\n      this.completeVRInit(scene, webVROptions);\n    }\n  }\n\n  Object.defineProperty(VRExperienceHelper.prototype, \"onEnteringVR\", {\n    /** Return this.onEnteringVRObservable\r\n     * Note: This one is for backward compatibility. Please use onEnteringVRObservable directly\r\n     */\n    get: function () {\n      return this.onEnteringVRObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"onExitingVR\", {\n    /** Return this.onExitingVRObservable\r\n     * Note: This one is for backward compatibility. Please use onExitingVRObservable directly\r\n     */\n    get: function () {\n      return this.onExitingVRObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"onControllerMeshLoaded\", {\n    /** Return this.onControllerMeshLoadedObservable\r\n     * Note: This one is for backward compatibility. Please use onControllerMeshLoadedObservable directly\r\n     */\n    get: function () {\n      return this.onControllerMeshLoadedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"teleportationTarget\", {\n    /**\r\n     * The mesh used to display where the user is going to teleport.\r\n     */\n    get: function () {\n      return this._teleportationTarget;\n    },\n\n    /**\r\n     * Sets the mesh to be used to display where the user is going to teleport.\r\n     */\n    set: function (value) {\n      if (value) {\n        value.name = \"teleportationTarget\";\n        this._isDefaultTeleportationTarget = false;\n        this._teleportationTarget = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"gazeTrackerMesh\", {\n    /**\r\n     * The mesh used to display where the user is selecting, this mesh will be cloned and set as the gazeTracker for the left and right controller\r\n     * when set bakeCurrentTransformIntoVertices will be called on the mesh.\r\n     * See https://doc.babylonjs.com/resources/baking_transformations\r\n     */\n    get: function () {\n      return this._cameraGazer._gazeTracker;\n    },\n    set: function (value) {\n      if (value) {\n        // Dispose of existing meshes\n        if (this._cameraGazer._gazeTracker) {\n          this._cameraGazer._gazeTracker.dispose();\n        }\n\n        if (this._leftController && this._leftController._gazeTracker) {\n          this._leftController._gazeTracker.dispose();\n        }\n\n        if (this._rightController && this._rightController._gazeTracker) {\n          this._rightController._gazeTracker.dispose();\n        } // Set and create gaze trackers on head and controllers\n\n\n        this._cameraGazer._gazeTracker = value;\n\n        this._cameraGazer._gazeTracker.bakeCurrentTransformIntoVertices();\n\n        this._cameraGazer._gazeTracker.isPickable = false;\n        this._cameraGazer._gazeTracker.isVisible = false;\n        this._cameraGazer._gazeTracker.name = \"gazeTracker\";\n\n        if (this._leftController) {\n          this._leftController._gazeTracker = this._cameraGazer._gazeTracker.clone(\"gazeTracker\");\n        }\n\n        if (this._rightController) {\n          this._rightController._gazeTracker = this._cameraGazer._gazeTracker.clone(\"gazeTracker\");\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"leftControllerGazeTrackerMesh\", {\n    /**\r\n     * The gaze tracking mesh corresponding to the left controller\r\n     */\n    get: function () {\n      if (this._leftController) {\n        return this._leftController._gazeTracker;\n      }\n\n      return null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"rightControllerGazeTrackerMesh\", {\n    /**\r\n     * The gaze tracking mesh corresponding to the right controller\r\n     */\n    get: function () {\n      if (this._rightController) {\n        return this._rightController._gazeTracker;\n      }\n\n      return null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"displayGaze\", {\n    /**\r\n     * If the ray of the gaze should be displayed.\r\n     */\n    get: function () {\n      return this._displayGaze;\n    },\n\n    /**\r\n     * Sets if the ray of the gaze should be displayed.\r\n     */\n    set: function (value) {\n      this._displayGaze = value;\n\n      if (!value) {\n        this._cameraGazer._gazeTracker.isVisible = false;\n\n        if (this._leftController) {\n          this._leftController._gazeTracker.isVisible = false;\n        }\n\n        if (this._rightController) {\n          this._rightController._gazeTracker.isVisible = false;\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"displayLaserPointer\", {\n    /**\r\n     * If the ray of the LaserPointer should be displayed.\r\n     */\n    get: function () {\n      return this._displayLaserPointer;\n    },\n\n    /**\r\n     * Sets if the ray of the LaserPointer should be displayed.\r\n     */\n    set: function (value) {\n      this._displayLaserPointer = value;\n\n      if (!value) {\n        if (this._rightController) {\n          this._rightController._deactivatePointer();\n\n          this._rightController._gazeTracker.isVisible = false;\n        }\n\n        if (this._leftController) {\n          this._leftController._deactivatePointer();\n\n          this._leftController._gazeTracker.isVisible = false;\n        }\n      } else {\n        if (this._rightController) {\n          this._rightController._activatePointer();\n        }\n\n        if (this._leftController) {\n          this._leftController._activatePointer();\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"deviceOrientationCamera\", {\n    /**\r\n     * The deviceOrientationCamera used as the camera when not in VR.\r\n     */\n    get: function () {\n      return this._deviceOrientationCamera;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"currentVRCamera\", {\n    /**\r\n     * Based on the current WebVR support, returns the current VR camera used.\r\n     */\n    get: function () {\n      if (this._webVRready) {\n        return this._webVRCamera;\n      } else {\n        return this._scene.activeCamera;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"webVRCamera\", {\n    /**\r\n     * The webVRCamera which is used when in VR.\r\n     */\n    get: function () {\n      return this._webVRCamera;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"vrDeviceOrientationCamera\", {\n    /**\r\n     * The deviceOrientationCamera that is used as a fallback when vr device is not connected.\r\n     */\n    get: function () {\n      return this._vrDeviceOrientationCamera;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"vrButton\", {\n    /**\r\n     * The html button that is used to trigger entering into VR.\r\n     */\n    get: function () {\n      return this._btnVR;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"_teleportationRequestInitiated\", {\n    get: function () {\n      var result = this._cameraGazer._teleportationRequestInitiated || this._leftController !== null && this._leftController._teleportationRequestInitiated || this._rightController !== null && this._rightController._teleportationRequestInitiated;\n      return result;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  VRExperienceHelper.prototype.completeVRInit = function (scene, webVROptions) {\n    var _this = this;\n\n    this.xrTestDone = true; // Create VR cameras\n\n    if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\n      if (webVROptions.useMultiview) {\n        if (!webVROptions.vrDeviceOrientationCameraMetrics) {\n          webVROptions.vrDeviceOrientationCameraMetrics = VRCameraMetrics.GetDefault();\n        }\n\n        webVROptions.vrDeviceOrientationCameraMetrics.multiviewEnabled = true;\n      }\n\n      this._vrDeviceOrientationCamera = new VRDeviceOrientationFreeCamera(\"VRDeviceOrientationVRHelper\", this._position, this._scene, true, webVROptions.vrDeviceOrientationCameraMetrics);\n      this._vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\n    }\n\n    this._webVRCamera = new WebVRFreeCamera(\"WebVRHelper\", this._position, this._scene, webVROptions);\n\n    this._webVRCamera.useStandingMatrix();\n\n    this._cameraGazer = new VRExperienceHelperCameraGazer(function () {\n      return _this.currentVRCamera;\n    }, scene); // Create default button\n\n    if (!this._useCustomVRButton) {\n      this._btnVR = document.createElement(\"BUTTON\");\n      this._btnVR.className = \"babylonVRicon\";\n      this._btnVR.id = \"babylonVRiconbtn\";\n      this._btnVR.title = \"Click to switch to VR\";\n      var url = !window.SVGSVGElement ? \"https://cdn.babylonjs.com/Assets/vrButton.png\" : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\n      var css = \".babylonVRicon { position: absolute; right: 20px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" + url + \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\n      css += \".babylonVRicon.vrdisplaypresenting { display: none; }\"; // TODO: Add user feedback so that they know what state the VRDisplay is in (disconnected, connected, entering-VR)\n      // css += \".babylonVRicon.vrdisplaysupported { }\";\n      // css += \".babylonVRicon.vrdisplayready { }\";\n      // css += \".babylonVRicon.vrdisplayrequesting { }\";\n\n      var style = document.createElement('style');\n      style.appendChild(document.createTextNode(css));\n      document.getElementsByTagName('head')[0].appendChild(style);\n      this.moveButtonToBottomRight();\n    } // VR button click event\n\n\n    if (this._btnVR) {\n      this._btnVR.addEventListener(\"click\", function () {\n        if (!_this.isInVRMode) {\n          _this.enterVR();\n        } else {\n          _this._scene.getEngine().disableVR();\n        }\n      });\n    } // Window events\n\n\n    var hostWindow = this._scene.getEngine().getHostWindow();\n\n    if (!hostWindow) {\n      return;\n    }\n\n    hostWindow.addEventListener(\"resize\", this._onResize);\n    document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\n    document.addEventListener(\"mozfullscreenchange\", this._onFullscreenChange, false);\n    document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\n    document.addEventListener(\"msfullscreenchange\", this._onFullscreenChange, false);\n    document.onmsfullscreenchange = this._onFullscreenChange; // Display vr button when headset is connected\n\n    if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\n      this.displayVRButton();\n    } else {\n      this._scene.getEngine().onVRDisplayChangedObservable.add(function (e) {\n        if (e.vrDisplay) {\n          _this.displayVRButton();\n        }\n      });\n    } // Exiting VR mode using 'ESC' key on desktop\n\n\n    this._onKeyDown = function (event) {\n      if (event.keyCode === 27 && _this.isInVRMode) {\n        _this.exitVR();\n      }\n    };\n\n    document.addEventListener(\"keydown\", this._onKeyDown); // Exiting VR mode double tapping the touch screen\n\n    this._scene.onPrePointerObservable.add(function () {\n      if (_this._hasEnteredVR && _this.exitVROnDoubleTap) {\n        _this.exitVR();\n\n        if (_this._fullscreenVRpresenting) {\n          _this._scene.getEngine().exitFullscreen();\n        }\n      }\n    }, PointerEventTypes.POINTERDOUBLETAP, false); // Listen for WebVR display changes\n\n\n    this._onVRDisplayChanged = function (eventArgs) {\n      return _this.onVRDisplayChanged(eventArgs);\n    };\n\n    this._onVrDisplayPresentChange = function () {\n      return _this.onVrDisplayPresentChange();\n    };\n\n    this._onVRRequestPresentStart = function () {\n      _this._webVRrequesting = true;\n\n      _this.updateButtonVisibility();\n    };\n\n    this._onVRRequestPresentComplete = function () {\n      _this._webVRrequesting = false;\n\n      _this.updateButtonVisibility();\n    };\n\n    scene.getEngine().onVRDisplayChangedObservable.add(this._onVRDisplayChanged);\n    scene.getEngine().onVRRequestPresentStart.add(this._onVRRequestPresentStart);\n    scene.getEngine().onVRRequestPresentComplete.add(this._onVRRequestPresentComplete);\n    hostWindow.addEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\n    scene.onDisposeObservable.add(function () {\n      _this.dispose();\n    }); // Gamepad connection events\n\n    this._webVRCamera.onControllerMeshLoadedObservable.add(function (webVRController) {\n      return _this._onDefaultMeshLoaded(webVRController);\n    });\n\n    this._scene.gamepadManager.onGamepadConnectedObservable.add(this._onNewGamepadConnected);\n\n    this._scene.gamepadManager.onGamepadDisconnectedObservable.add(this._onNewGamepadDisconnected);\n\n    this.updateButtonVisibility(); //create easing functions\n\n    this._circleEase = new CircleEase();\n\n    this._circleEase.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\n\n    this._teleportationEasing = this._circleEase; // Allow clicking in the vrDeviceOrientationCamera\n\n    scene.onPointerObservable.add(function (e) {\n      if (_this._interactionsEnabled) {\n        if (scene.activeCamera === _this.vrDeviceOrientationCamera && e.event.pointerType === \"mouse\") {\n          if (e.type === PointerEventTypes.POINTERDOWN) {\n            _this._cameraGazer._selectionPointerDown();\n          } else if (e.type === PointerEventTypes.POINTERUP) {\n            _this._cameraGazer._selectionPointerUp();\n          }\n        }\n      }\n    });\n\n    if (this.webVROptions.floorMeshes) {\n      this.enableTeleportation({\n        floorMeshes: this.webVROptions.floorMeshes\n      });\n    }\n  }; // Raised when one of the controller has loaded successfully its associated default mesh\n\n\n  VRExperienceHelper.prototype._onDefaultMeshLoaded = function (webVRController) {\n    if (this._leftController && this._leftController.webVRController == webVRController) {\n      if (webVRController.mesh) {\n        this._leftController._setLaserPointerParent(webVRController.mesh);\n      }\n    }\n\n    if (this._rightController && this._rightController.webVRController == webVRController) {\n      if (webVRController.mesh) {\n        this._rightController._setLaserPointerParent(webVRController.mesh);\n      }\n    }\n\n    try {\n      this.onControllerMeshLoadedObservable.notifyObservers(webVRController);\n    } catch (err) {\n      Logger.Warn(\"Error in your custom logic onControllerMeshLoaded: \" + err);\n    }\n  };\n\n  Object.defineProperty(VRExperienceHelper.prototype, \"isInVRMode\", {\n    /**\r\n     * Gets a value indicating if we are currently in VR mode.\r\n     */\n    get: function () {\n      return this.xr && this.webVROptions.useXR && this.xr.baseExperience.state === WebXRState.IN_XR || this._webVRpresenting || this._fullscreenVRpresenting;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  VRExperienceHelper.prototype.onVrDisplayPresentChange = function () {\n    var vrDisplay = this._scene.getEngine().getVRDevice();\n\n    if (vrDisplay) {\n      var wasPresenting = this._webVRpresenting;\n      this._webVRpresenting = vrDisplay.isPresenting;\n\n      if (wasPresenting && !this._webVRpresenting) {\n        this.exitVR();\n      }\n    } else {\n      Logger.Warn('Detected VRDisplayPresentChange on an unknown VRDisplay. Did you can enterVR on the vrExperienceHelper?');\n    }\n\n    this.updateButtonVisibility();\n  };\n\n  VRExperienceHelper.prototype.onVRDisplayChanged = function (eventArgs) {\n    this._webVRsupported = eventArgs.vrSupported;\n    this._webVRready = !!eventArgs.vrDisplay;\n    this._webVRpresenting = eventArgs.vrDisplay && eventArgs.vrDisplay.isPresenting;\n    this.updateButtonVisibility();\n  };\n\n  VRExperienceHelper.prototype.moveButtonToBottomRight = function () {\n    if (this._inputElement && !this._useCustomVRButton && this._btnVR) {\n      var rect = this._inputElement.getBoundingClientRect();\n\n      this._btnVR.style.top = rect.top + rect.height - 70 + \"px\";\n      this._btnVR.style.left = rect.left + rect.width - 100 + \"px\";\n    }\n  };\n\n  VRExperienceHelper.prototype.displayVRButton = function () {\n    if (!this._useCustomVRButton && !this._btnVRDisplayed && this._btnVR) {\n      document.body.appendChild(this._btnVR);\n      this._btnVRDisplayed = true;\n    }\n  };\n\n  VRExperienceHelper.prototype.updateButtonVisibility = function () {\n    if (!this._btnVR || this._useCustomVRButton) {\n      return;\n    }\n\n    this._btnVR.className = \"babylonVRicon\";\n\n    if (this.isInVRMode) {\n      this._btnVR.className += \" vrdisplaypresenting\";\n    } else {\n      if (this._webVRready) {\n        this._btnVR.className += \" vrdisplayready\";\n      }\n\n      if (this._webVRsupported) {\n        this._btnVR.className += \" vrdisplaysupported\";\n      }\n\n      if (this._webVRrequesting) {\n        this._btnVR.className += \" vrdisplayrequesting\";\n      }\n    }\n  };\n  /**\r\n   * Attempt to enter VR. If a headset is connected and ready, will request present on that.\r\n   * Otherwise, will use the fullscreen API.\r\n   */\n\n\n  VRExperienceHelper.prototype.enterVR = function () {\n    var _this = this;\n\n    if (this.xr) {\n      this.xr.baseExperience.enterXRAsync(\"immersive-vr\", \"local-floor\", this.xr.renderTarget);\n      return;\n    }\n\n    if (this.onEnteringVRObservable) {\n      try {\n        this.onEnteringVRObservable.notifyObservers(this);\n      } catch (err) {\n        Logger.Warn(\"Error in your custom logic onEnteringVR: \" + err);\n      }\n    }\n\n    if (this._scene.activeCamera) {\n      this._position = this._scene.activeCamera.position.clone();\n\n      if (this.vrDeviceOrientationCamera) {\n        this.vrDeviceOrientationCamera.rotation = Quaternion.FromRotationMatrix(this._scene.activeCamera.getWorldMatrix().getRotationMatrix()).toEulerAngles();\n        this.vrDeviceOrientationCamera.angularSensibility = 2000;\n      }\n\n      if (this.webVRCamera) {\n        var currentYRotation = this.webVRCamera.deviceRotationQuaternion.toEulerAngles().y;\n        var desiredYRotation = Quaternion.FromRotationMatrix(this._scene.activeCamera.getWorldMatrix().getRotationMatrix()).toEulerAngles().y;\n        var delta = desiredYRotation - currentYRotation;\n        var currentGlobalRotation = this.webVRCamera.rotationQuaternion.toEulerAngles().y;\n        this.webVRCamera.rotationQuaternion = Quaternion.FromEulerAngles(0, currentGlobalRotation + delta, 0);\n      } // make sure that we return to the last active camera\n\n\n      this._existingCamera = this._scene.activeCamera; // Remove and cache angular sensability to avoid camera rotation when in VR\n\n      if (this._existingCamera.angularSensibilityX) {\n        this._cachedAngularSensibility.angularSensibilityX = this._existingCamera.angularSensibilityX;\n        this._existingCamera.angularSensibilityX = Number.MAX_VALUE;\n      }\n\n      if (this._existingCamera.angularSensibilityY) {\n        this._cachedAngularSensibility.angularSensibilityY = this._existingCamera.angularSensibilityY;\n        this._existingCamera.angularSensibilityY = Number.MAX_VALUE;\n      }\n\n      if (this._existingCamera.angularSensibility) {\n        this._cachedAngularSensibility.angularSensibility = this._existingCamera.angularSensibility;\n        this._existingCamera.angularSensibility = Number.MAX_VALUE;\n      }\n    }\n\n    if (this._webVRrequesting) {\n      return;\n    } // If WebVR is supported and a headset is connected\n\n\n    if (this._webVRready) {\n      if (!this._webVRpresenting) {\n        this._scene.getEngine().onVRRequestPresentComplete.addOnce(function (result) {\n          _this.onAfterEnteringVRObservable.notifyObservers({\n            success: result\n          });\n        });\n\n        this._webVRCamera.position = this._position;\n        this._scene.activeCamera = this._webVRCamera;\n      }\n    } else if (this._vrDeviceOrientationCamera) {\n      this._vrDeviceOrientationCamera.position = this._position;\n\n      if (this._scene.activeCamera) {\n        this._vrDeviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\n      }\n\n      this._scene.activeCamera = this._vrDeviceOrientationCamera;\n\n      this._scene.getEngine().enterFullscreen(this.requestPointerLockOnFullScreen);\n\n      this.updateButtonVisibility();\n\n      this._vrDeviceOrientationCamera.onViewMatrixChangedObservable.addOnce(function () {\n        _this.onAfterEnteringVRObservable.notifyObservers({\n          success: true\n        });\n      });\n    }\n\n    if (this._scene.activeCamera && this._inputElement) {\n      this._scene.activeCamera.attachControl();\n    }\n\n    if (this._interactionsEnabled) {\n      this._scene.registerBeforeRender(this.beforeRender);\n    }\n\n    if (this._displayLaserPointer) {\n      [this._leftController, this._rightController].forEach(function (controller) {\n        if (controller) {\n          controller._activatePointer();\n        }\n      });\n    }\n\n    this._hasEnteredVR = true;\n  };\n  /**\r\n   * Attempt to exit VR, or fullscreen.\r\n   */\n\n\n  VRExperienceHelper.prototype.exitVR = function () {\n    if (this.xr) {\n      this.xr.baseExperience.exitXRAsync();\n      return;\n    }\n\n    if (this._hasEnteredVR) {\n      if (this.onExitingVRObservable) {\n        try {\n          this.onExitingVRObservable.notifyObservers(this);\n        } catch (err) {\n          Logger.Warn(\"Error in your custom logic onExitingVR: \" + err);\n        }\n      }\n\n      if (this._webVRpresenting) {\n        this._scene.getEngine().disableVR();\n      }\n\n      if (this._scene.activeCamera) {\n        this._position = this._scene.activeCamera.position.clone();\n      }\n\n      if (this.vrDeviceOrientationCamera) {\n        this.vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\n      }\n\n      if (this._deviceOrientationCamera) {\n        this._deviceOrientationCamera.position = this._position;\n        this._scene.activeCamera = this._deviceOrientationCamera; // Restore angular sensibility\n\n        if (this._cachedAngularSensibility.angularSensibilityX) {\n          this._deviceOrientationCamera.angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\n          this._cachedAngularSensibility.angularSensibilityX = null;\n        }\n\n        if (this._cachedAngularSensibility.angularSensibilityY) {\n          this._deviceOrientationCamera.angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\n          this._cachedAngularSensibility.angularSensibilityY = null;\n        }\n\n        if (this._cachedAngularSensibility.angularSensibility) {\n          this._deviceOrientationCamera.angularSensibility = this._cachedAngularSensibility.angularSensibility;\n          this._cachedAngularSensibility.angularSensibility = null;\n        }\n      } else if (this._existingCamera) {\n        this._existingCamera.position = this._position;\n        this._scene.activeCamera = this._existingCamera;\n\n        if (this._inputElement) {\n          this._scene.activeCamera.attachControl();\n        } // Restore angular sensibility\n\n\n        if (this._cachedAngularSensibility.angularSensibilityX) {\n          this._existingCamera.angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\n          this._cachedAngularSensibility.angularSensibilityX = null;\n        }\n\n        if (this._cachedAngularSensibility.angularSensibilityY) {\n          this._existingCamera.angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\n          this._cachedAngularSensibility.angularSensibilityY = null;\n        }\n\n        if (this._cachedAngularSensibility.angularSensibility) {\n          this._existingCamera.angularSensibility = this._cachedAngularSensibility.angularSensibility;\n          this._cachedAngularSensibility.angularSensibility = null;\n        }\n      }\n\n      this.updateButtonVisibility();\n\n      if (this._interactionsEnabled) {\n        this._scene.unregisterBeforeRender(this.beforeRender);\n\n        this._cameraGazer._gazeTracker.isVisible = false;\n\n        if (this._leftController) {\n          this._leftController._gazeTracker.isVisible = false;\n        }\n\n        if (this._rightController) {\n          this._rightController._gazeTracker.isVisible = false;\n        }\n      } // resize to update width and height when exiting vr exits fullscreen\n\n\n      this._scene.getEngine().resize();\n\n      [this._leftController, this._rightController].forEach(function (controller) {\n        if (controller) {\n          controller._deactivatePointer();\n        }\n      });\n      this._hasEnteredVR = false; // Update engine state to re enable non-vr camera input\n\n      var engine = this._scene.getEngine();\n\n      if (engine._onVrDisplayPresentChange) {\n        engine._onVrDisplayPresentChange();\n      }\n    }\n  };\n\n  Object.defineProperty(VRExperienceHelper.prototype, \"position\", {\n    /**\r\n     * The position of the vr experience helper.\r\n     */\n    get: function () {\n      return this._position;\n    },\n\n    /**\r\n     * Sets the position of the vr experience helper.\r\n     */\n    set: function (value) {\n      this._position = value;\n\n      if (this._scene.activeCamera) {\n        this._scene.activeCamera.position = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Enables controllers and user interactions such as selecting and object or clicking on an object.\r\n   */\n\n  VRExperienceHelper.prototype.enableInteractions = function () {\n    var _this = this;\n\n    if (!this._interactionsEnabled) {\n      this._interactionsRequested = true; // in XR it is enabled by default, but just to make sure, re-attach\n\n      if (this.xr) {\n        if (this.xr.baseExperience.state === WebXRState.IN_XR) {\n          this.xr.pointerSelection.attach();\n        }\n\n        return;\n      }\n\n      if (this._leftController) {\n        this._enableInteractionOnController(this._leftController);\n      }\n\n      if (this._rightController) {\n        this._enableInteractionOnController(this._rightController);\n      }\n\n      this.raySelectionPredicate = function (mesh) {\n        return mesh.isVisible && (mesh.isPickable || mesh.name === _this._floorMeshName);\n      };\n\n      this.meshSelectionPredicate = function () {\n        return true;\n      };\n\n      this._raySelectionPredicate = function (mesh) {\n        if (_this._isTeleportationFloor(mesh) || mesh.name.indexOf(\"gazeTracker\") === -1 && mesh.name.indexOf(\"teleportationTarget\") === -1 && mesh.name.indexOf(\"torusTeleportation\") === -1) {\n          return _this.raySelectionPredicate(mesh);\n        }\n\n        return false;\n      };\n\n      this._interactionsEnabled = true;\n    }\n  };\n\n  Object.defineProperty(VRExperienceHelper.prototype, \"_noControllerIsActive\", {\n    get: function () {\n      return !(this._leftController && this._leftController._activePointer) && !(this._rightController && this._rightController._activePointer);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  VRExperienceHelper.prototype._isTeleportationFloor = function (mesh) {\n    for (var i = 0; i < this._floorMeshesCollection.length; i++) {\n      if (this._floorMeshesCollection[i].id === mesh.id) {\n        return true;\n      }\n    }\n\n    if (this._floorMeshName && mesh.name === this._floorMeshName) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Adds a floor mesh to be used for teleportation.\r\n   * @param floorMesh the mesh to be used for teleportation.\r\n   */\n\n\n  VRExperienceHelper.prototype.addFloorMesh = function (floorMesh) {\n    if (!this._floorMeshesCollection) {\n      return;\n    }\n\n    if (this._floorMeshesCollection.indexOf(floorMesh) > -1) {\n      return;\n    }\n\n    this._floorMeshesCollection.push(floorMesh);\n  };\n  /**\r\n   * Removes a floor mesh from being used for teleportation.\r\n   * @param floorMesh the mesh to be removed.\r\n   */\n\n\n  VRExperienceHelper.prototype.removeFloorMesh = function (floorMesh) {\n    if (!this._floorMeshesCollection) {\n      return;\n    }\n\n    var meshIndex = this._floorMeshesCollection.indexOf(floorMesh);\n\n    if (meshIndex !== -1) {\n      this._floorMeshesCollection.splice(meshIndex, 1);\n    }\n  };\n  /**\r\n   * Enables interactions and teleportation using the VR controllers and gaze.\r\n   * @param vrTeleportationOptions options to modify teleportation behavior.\r\n   */\n\n\n  VRExperienceHelper.prototype.enableTeleportation = function (vrTeleportationOptions) {\n    var _this = this;\n\n    if (vrTeleportationOptions === void 0) {\n      vrTeleportationOptions = {};\n    }\n\n    if (!this._teleportationInitialized) {\n      this._teleportationRequested = true;\n      this.enableInteractions();\n\n      if (this.webVROptions.useXR && (vrTeleportationOptions.floorMeshes || vrTeleportationOptions.floorMeshName)) {\n        var floorMeshes = vrTeleportationOptions.floorMeshes || [];\n\n        if (!floorMeshes.length) {\n          var floorMesh = this._scene.getMeshByName(vrTeleportationOptions.floorMeshName);\n\n          if (floorMesh) {\n            floorMeshes.push(floorMesh);\n          }\n        }\n\n        if (this.xr) {\n          floorMeshes.forEach(function (mesh) {\n            _this.xr.teleportation.addFloorMesh(mesh);\n          });\n\n          if (!this.xr.teleportation.attached) {\n            this.xr.teleportation.attach();\n          }\n\n          return;\n        } else if (!this.xrTestDone) {\n          var waitForXr_1 = function () {\n            if (_this.xrTestDone) {\n              _this._scene.unregisterBeforeRender(waitForXr_1);\n\n              if (_this.xr) {\n                if (!_this.xr.teleportation.attached) {\n                  _this.xr.teleportation.attach();\n                }\n              } else {\n                _this.enableTeleportation(vrTeleportationOptions);\n              }\n            }\n          };\n\n          this._scene.registerBeforeRender(waitForXr_1);\n\n          return;\n        }\n      }\n\n      if (vrTeleportationOptions.floorMeshName) {\n        this._floorMeshName = vrTeleportationOptions.floorMeshName;\n      }\n\n      if (vrTeleportationOptions.floorMeshes) {\n        this._floorMeshesCollection = vrTeleportationOptions.floorMeshes;\n      }\n\n      if (vrTeleportationOptions.teleportationMode) {\n        this._teleportationMode = vrTeleportationOptions.teleportationMode;\n      }\n\n      if (vrTeleportationOptions.teleportationTime && vrTeleportationOptions.teleportationTime > 0) {\n        this._teleportationTime = vrTeleportationOptions.teleportationTime;\n      }\n\n      if (vrTeleportationOptions.teleportationSpeed && vrTeleportationOptions.teleportationSpeed > 0) {\n        this._teleportationSpeed = vrTeleportationOptions.teleportationSpeed;\n      }\n\n      if (vrTeleportationOptions.easingFunction !== undefined) {\n        this._teleportationEasing = vrTeleportationOptions.easingFunction;\n      }\n\n      if (this._leftController != null) {\n        this._enableTeleportationOnController(this._leftController);\n      }\n\n      if (this._rightController != null) {\n        this._enableTeleportationOnController(this._rightController);\n      } // Creates an image processing post process for the vignette not relying\n      // on the main scene configuration for image processing to reduce setup and spaces\n      // (gamma/linear) conflicts.\n\n\n      var imageProcessingConfiguration = new ImageProcessingConfiguration();\n      imageProcessingConfiguration.vignetteColor = new Color4(0, 0, 0, 0);\n      imageProcessingConfiguration.vignetteEnabled = true;\n      this._postProcessMove = new ImageProcessingPostProcess(\"postProcessMove\", 1.0, this._webVRCamera, undefined, undefined, undefined, undefined, imageProcessingConfiguration);\n\n      this._webVRCamera.detachPostProcess(this._postProcessMove);\n\n      this._teleportationInitialized = true;\n\n      if (this._isDefaultTeleportationTarget) {\n        this._createTeleportationCircles();\n\n        this._teleportationTarget.scaling.scaleInPlace(this._webVRCamera.deviceScaleFactor);\n      }\n    }\n  };\n\n  VRExperienceHelper.prototype._enableInteractionOnController = function (controller) {\n    var _this = this;\n\n    var controllerMesh = controller.webVRController.mesh;\n\n    if (controllerMesh) {\n      controller._interactionsEnabled = true;\n\n      if (this.isInVRMode && this._displayLaserPointer) {\n        controller._activatePointer();\n      }\n\n      if (this.webVROptions.laserToggle) {\n        controller.webVRController.onMainButtonStateChangedObservable.add(function (stateObject) {\n          // Enabling / disabling laserPointer\n          if (_this._displayLaserPointer && stateObject.value === 1) {\n            if (controller._activePointer) {\n              controller._deactivatePointer();\n            } else {\n              controller._activatePointer();\n            }\n\n            if (_this.displayGaze) {\n              controller._gazeTracker.isVisible = controller._activePointer;\n            }\n          }\n        });\n      }\n\n      controller.webVRController.onTriggerStateChangedObservable.add(function (stateObject) {\n        var gazer = controller;\n\n        if (_this._noControllerIsActive) {\n          gazer = _this._cameraGazer;\n        }\n\n        if (!gazer._pointerDownOnMeshAsked) {\n          if (stateObject.value > _this._padSensibilityUp) {\n            gazer._selectionPointerDown();\n          }\n        } else if (stateObject.value < _this._padSensibilityDown) {\n          gazer._selectionPointerUp();\n        }\n      });\n    }\n  };\n\n  VRExperienceHelper.prototype._checkTeleportWithRay = function (stateObject, gazer) {\n    // Dont teleport if another gaze already requested teleportation\n    if (this._teleportationRequestInitiated && !gazer._teleportationRequestInitiated) {\n      return;\n    }\n\n    if (!gazer._teleportationRequestInitiated) {\n      if (stateObject.y < -this._padSensibilityUp && gazer._dpadPressed) {\n        gazer._activatePointer();\n\n        gazer._teleportationRequestInitiated = true;\n      }\n    } else {\n      // Listening to the proper controller values changes to confirm teleportation\n      if (Math.sqrt(stateObject.y * stateObject.y + stateObject.x * stateObject.x) < this._padSensibilityDown) {\n        if (this._teleportActive) {\n          this.teleportCamera(this._haloCenter);\n        }\n\n        gazer._teleportationRequestInitiated = false;\n      }\n    }\n  };\n\n  VRExperienceHelper.prototype._checkRotate = function (stateObject, gazer) {\n    // Only rotate when user is not currently selecting a teleportation location\n    if (gazer._teleportationRequestInitiated) {\n      return;\n    }\n\n    if (!gazer._rotationLeftAsked) {\n      if (stateObject.x < -this._padSensibilityUp && gazer._dpadPressed) {\n        gazer._rotationLeftAsked = true;\n\n        if (this._rotationAllowed) {\n          this._rotateCamera(false);\n        }\n      }\n    } else {\n      if (stateObject.x > -this._padSensibilityDown) {\n        gazer._rotationLeftAsked = false;\n      }\n    }\n\n    if (!gazer._rotationRightAsked) {\n      if (stateObject.x > this._padSensibilityUp && gazer._dpadPressed) {\n        gazer._rotationRightAsked = true;\n\n        if (this._rotationAllowed) {\n          this._rotateCamera(true);\n        }\n      }\n    } else {\n      if (stateObject.x < this._padSensibilityDown) {\n        gazer._rotationRightAsked = false;\n      }\n    }\n  };\n\n  VRExperienceHelper.prototype._checkTeleportBackwards = function (stateObject, gazer) {\n    // Only teleport backwards when user is not currently selecting a teleportation location\n    if (gazer._teleportationRequestInitiated) {\n      return;\n    } // Teleport backwards\n\n\n    if (stateObject.y > this._padSensibilityUp && gazer._dpadPressed) {\n      if (!gazer._teleportationBackRequestInitiated) {\n        if (!this.currentVRCamera) {\n          return;\n        } // Get rotation and position of the current camera\n\n\n        var rotation = Quaternion.FromRotationMatrix(this.currentVRCamera.getWorldMatrix().getRotationMatrix());\n        var position = this.currentVRCamera.position; // If the camera has device position, use that instead\n\n        if (this.currentVRCamera.devicePosition && this.currentVRCamera.deviceRotationQuaternion) {\n          rotation = this.currentVRCamera.deviceRotationQuaternion;\n          position = this.currentVRCamera.devicePosition;\n        } // Get matrix with only the y rotation of the device rotation\n\n\n        rotation.toEulerAnglesToRef(this._workingVector);\n        this._workingVector.z = 0;\n        this._workingVector.x = 0;\n        Quaternion.RotationYawPitchRollToRef(this._workingVector.y, this._workingVector.x, this._workingVector.z, this._workingQuaternion);\n\n        this._workingQuaternion.toRotationMatrix(this._workingMatrix); // Rotate backwards ray by device rotation to cast at the ground behind the user\n\n\n        Vector3.TransformCoordinatesToRef(this._teleportBackwardsVector, this._workingMatrix, this._workingVector); // Teleport if ray hit the ground and is not to far away eg. backwards off a cliff\n\n        var ray = new Ray(position, this._workingVector);\n\n        var hit = this._scene.pickWithRay(ray, this._raySelectionPredicate);\n\n        if (hit && hit.pickedPoint && hit.pickedMesh && this._isTeleportationFloor(hit.pickedMesh) && hit.distance < 5) {\n          this.teleportCamera(hit.pickedPoint);\n        }\n\n        gazer._teleportationBackRequestInitiated = true;\n      }\n    } else {\n      gazer._teleportationBackRequestInitiated = false;\n    }\n  };\n\n  VRExperienceHelper.prototype._enableTeleportationOnController = function (controller) {\n    var _this = this;\n\n    var controllerMesh = controller.webVRController.mesh;\n\n    if (controllerMesh) {\n      if (!controller._interactionsEnabled) {\n        this._enableInteractionOnController(controller);\n      }\n\n      controller._interactionsEnabled = true;\n      controller._teleportationEnabled = true;\n\n      if (controller.webVRController.controllerType === PoseEnabledControllerType.VIVE) {\n        controller._dpadPressed = false;\n        controller.webVRController.onPadStateChangedObservable.add(function (stateObject) {\n          controller._dpadPressed = stateObject.pressed;\n\n          if (!controller._dpadPressed) {\n            controller._rotationLeftAsked = false;\n            controller._rotationRightAsked = false;\n            controller._teleportationBackRequestInitiated = false;\n          }\n        });\n      }\n\n      controller.webVRController.onPadValuesChangedObservable.add(function (stateObject) {\n        if (_this.teleportationEnabled) {\n          _this._checkTeleportBackwards(stateObject, controller);\n\n          _this._checkTeleportWithRay(stateObject, controller);\n        }\n\n        _this._checkRotate(stateObject, controller);\n      });\n    }\n  };\n\n  VRExperienceHelper.prototype._createTeleportationCircles = function () {\n    this._teleportationTarget = Mesh.CreateGround(\"teleportationTarget\", 2, 2, 2, this._scene);\n    this._teleportationTarget.isPickable = false;\n    var length = 512;\n    var dynamicTexture = new DynamicTexture(\"DynamicTexture\", length, this._scene, true);\n    dynamicTexture.hasAlpha = true;\n    var context = dynamicTexture.getContext();\n    var centerX = length / 2;\n    var centerY = length / 2;\n    var radius = 200;\n    context.beginPath();\n    context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n    context.fillStyle = this._teleportationFillColor;\n    context.fill();\n    context.lineWidth = 10;\n    context.strokeStyle = this._teleportationBorderColor;\n    context.stroke();\n    context.closePath();\n    dynamicTexture.update();\n    var teleportationCircleMaterial = new StandardMaterial(\"TextPlaneMaterial\", this._scene);\n    teleportationCircleMaterial.diffuseTexture = dynamicTexture;\n    this._teleportationTarget.material = teleportationCircleMaterial;\n    var torus = Mesh.CreateTorus(\"torusTeleportation\", 0.75, 0.1, 25, this._scene, false);\n    torus.isPickable = false;\n    torus.parent = this._teleportationTarget;\n    var animationInnerCircle = new Animation(\"animationInnerCircle\", \"position.y\", 30, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\n    var keys = [];\n    keys.push({\n      frame: 0,\n      value: 0\n    });\n    keys.push({\n      frame: 30,\n      value: 0.4\n    });\n    keys.push({\n      frame: 60,\n      value: 0\n    });\n    animationInnerCircle.setKeys(keys);\n    var easingFunction = new SineEase();\n    easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\n    animationInnerCircle.setEasingFunction(easingFunction);\n    torus.animations = [];\n    torus.animations.push(animationInnerCircle);\n\n    this._scene.beginAnimation(torus, 0, 60, true);\n\n    this._hideTeleportationTarget();\n  };\n\n  VRExperienceHelper.prototype._displayTeleportationTarget = function () {\n    this._teleportActive = true;\n\n    if (this._teleportationInitialized) {\n      this._teleportationTarget.isVisible = true;\n\n      if (this._isDefaultTeleportationTarget) {\n        this._teleportationTarget.getChildren()[0].isVisible = true;\n      }\n    }\n  };\n\n  VRExperienceHelper.prototype._hideTeleportationTarget = function () {\n    this._teleportActive = false;\n\n    if (this._teleportationInitialized) {\n      this._teleportationTarget.isVisible = false;\n\n      if (this._isDefaultTeleportationTarget) {\n        this._teleportationTarget.getChildren()[0].isVisible = false;\n      }\n    }\n  };\n\n  VRExperienceHelper.prototype._rotateCamera = function (right) {\n    var _this = this;\n\n    if (!(this.currentVRCamera instanceof FreeCamera)) {\n      return;\n    }\n\n    if (right) {\n      this._rotationAngle++;\n    } else {\n      this._rotationAngle--;\n    }\n\n    this.currentVRCamera.animations = [];\n    var target = Quaternion.FromRotationMatrix(Matrix.RotationY(Math.PI / 4 * this._rotationAngle));\n    var animationRotation = new Animation(\"animationRotation\", \"rotationQuaternion\", 90, Animation.ANIMATIONTYPE_QUATERNION, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    var animationRotationKeys = [];\n    animationRotationKeys.push({\n      frame: 0,\n      value: this.currentVRCamera.rotationQuaternion\n    });\n    animationRotationKeys.push({\n      frame: 6,\n      value: target\n    });\n    animationRotation.setKeys(animationRotationKeys);\n    animationRotation.setEasingFunction(this._circleEase);\n    this.currentVRCamera.animations.push(animationRotation);\n    this._postProcessMove.animations = [];\n    var animationPP = new Animation(\"animationPP\", \"vignetteWeight\", 90, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    var vignetteWeightKeys = [];\n    vignetteWeightKeys.push({\n      frame: 0,\n      value: 0\n    });\n    vignetteWeightKeys.push({\n      frame: 3,\n      value: 4\n    });\n    vignetteWeightKeys.push({\n      frame: 6,\n      value: 0\n    });\n    animationPP.setKeys(vignetteWeightKeys);\n    animationPP.setEasingFunction(this._circleEase);\n\n    this._postProcessMove.animations.push(animationPP);\n\n    var animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", 90, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    var vignetteStretchKeys = [];\n    vignetteStretchKeys.push({\n      frame: 0,\n      value: 0\n    });\n    vignetteStretchKeys.push({\n      frame: 3,\n      value: 10\n    });\n    vignetteStretchKeys.push({\n      frame: 6,\n      value: 0\n    });\n    animationPP2.setKeys(vignetteStretchKeys);\n    animationPP2.setEasingFunction(this._circleEase);\n\n    this._postProcessMove.animations.push(animationPP2);\n\n    this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\n    this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\n    this._postProcessMove.samples = 4;\n\n    this._webVRCamera.attachPostProcess(this._postProcessMove);\n\n    this._scene.beginAnimation(this._postProcessMove, 0, 6, false, 1, function () {\n      _this._webVRCamera.detachPostProcess(_this._postProcessMove);\n    });\n\n    this._scene.beginAnimation(this.currentVRCamera, 0, 6, false, 1);\n  };\n\n  VRExperienceHelper.prototype._moveTeleportationSelectorTo = function (hit, gazer, ray) {\n    if (hit.pickedPoint) {\n      if (gazer._teleportationRequestInitiated) {\n        this._displayTeleportationTarget();\n\n        this._haloCenter.copyFrom(hit.pickedPoint);\n\n        this._teleportationTarget.position.copyFrom(hit.pickedPoint);\n      }\n\n      var pickNormal = this._convertNormalToDirectionOfRay(hit.getNormal(true, false), ray);\n\n      if (pickNormal) {\n        var axis1 = Vector3.Cross(Axis.Y, pickNormal);\n        var axis2 = Vector3.Cross(pickNormal, axis1);\n        Vector3.RotationFromAxisToRef(axis2, pickNormal, axis1, this._teleportationTarget.rotation);\n      }\n\n      this._teleportationTarget.position.y += 0.1;\n    }\n  };\n  /**\r\n   * Teleports the users feet to the desired location\r\n   * @param location The location where the user's feet should be placed\r\n   */\n\n\n  VRExperienceHelper.prototype.teleportCamera = function (location) {\n    var _this = this;\n\n    if (!(this.currentVRCamera instanceof FreeCamera)) {\n      return;\n    } // Teleport the hmd to where the user is looking by moving the anchor to where they are looking minus the\n    // offset of the headset from the anchor.\n\n\n    if (this.webVRCamera.leftCamera) {\n      this._workingVector.copyFrom(this.webVRCamera.leftCamera.globalPosition);\n\n      this._workingVector.subtractInPlace(this.webVRCamera.position);\n\n      location.subtractToRef(this._workingVector, this._workingVector);\n    } else {\n      this._workingVector.copyFrom(location);\n    } // Add height to account for user's height offset\n\n\n    if (this.isInVRMode) {\n      this._workingVector.y += this.webVRCamera.deviceDistanceToRoomGround() * this._webVRCamera.deviceScaleFactor;\n    } else {\n      this._workingVector.y += this._defaultHeight;\n    }\n\n    this.onBeforeCameraTeleport.notifyObservers(this._workingVector); // Animations FPS\n\n    var FPS = 90;\n    var speedRatio, lastFrame;\n\n    if (this._teleportationMode == VRExperienceHelper.TELEPORTATIONMODE_CONSTANTSPEED) {\n      lastFrame = FPS;\n      var dist = Vector3.Distance(this.currentVRCamera.position, this._workingVector);\n      speedRatio = this._teleportationSpeed / dist;\n    } else {\n      // teleportationMode is TELEPORTATIONMODE_CONSTANTTIME\n      lastFrame = Math.round(this._teleportationTime * FPS / 1000);\n      speedRatio = 1;\n    } // Create animation from the camera's position to the new location\n\n\n    this.currentVRCamera.animations = [];\n    var animationCameraTeleportation = new Animation(\"animationCameraTeleportation\", \"position\", FPS, Animation.ANIMATIONTYPE_VECTOR3, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    var animationCameraTeleportationKeys = [{\n      frame: 0,\n      value: this.currentVRCamera.position\n    }, {\n      frame: lastFrame,\n      value: this._workingVector\n    }];\n    animationCameraTeleportation.setKeys(animationCameraTeleportationKeys);\n    animationCameraTeleportation.setEasingFunction(this._teleportationEasing);\n    this.currentVRCamera.animations.push(animationCameraTeleportation);\n    this._postProcessMove.animations = []; // Calculate the mid frame for vignette animations\n\n    var midFrame = Math.round(lastFrame / 2);\n    var animationPP = new Animation(\"animationPP\", \"vignetteWeight\", FPS, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    var vignetteWeightKeys = [];\n    vignetteWeightKeys.push({\n      frame: 0,\n      value: 0\n    });\n    vignetteWeightKeys.push({\n      frame: midFrame,\n      value: 8\n    });\n    vignetteWeightKeys.push({\n      frame: lastFrame,\n      value: 0\n    });\n    animationPP.setKeys(vignetteWeightKeys);\n\n    this._postProcessMove.animations.push(animationPP);\n\n    var animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", FPS, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    var vignetteStretchKeys = [];\n    vignetteStretchKeys.push({\n      frame: 0,\n      value: 0\n    });\n    vignetteStretchKeys.push({\n      frame: midFrame,\n      value: 10\n    });\n    vignetteStretchKeys.push({\n      frame: lastFrame,\n      value: 0\n    });\n    animationPP2.setKeys(vignetteStretchKeys);\n\n    this._postProcessMove.animations.push(animationPP2);\n\n    this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\n    this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\n\n    this._webVRCamera.attachPostProcess(this._postProcessMove);\n\n    this._scene.beginAnimation(this._postProcessMove, 0, lastFrame, false, speedRatio, function () {\n      _this._webVRCamera.detachPostProcess(_this._postProcessMove);\n    });\n\n    this._scene.beginAnimation(this.currentVRCamera, 0, lastFrame, false, speedRatio, function () {\n      _this.onAfterCameraTeleport.notifyObservers(_this._workingVector);\n    });\n\n    this._hideTeleportationTarget();\n  };\n\n  VRExperienceHelper.prototype._convertNormalToDirectionOfRay = function (normal, ray) {\n    if (normal) {\n      var angle = Math.acos(Vector3.Dot(normal, ray.direction));\n\n      if (angle < Math.PI / 2) {\n        normal.scaleInPlace(-1);\n      }\n    }\n\n    return normal;\n  };\n\n  VRExperienceHelper.prototype._castRayAndSelectObject = function (gazer) {\n    if (!(this.currentVRCamera instanceof FreeCamera)) {\n      return;\n    }\n\n    var ray = gazer._getForwardRay(this._rayLength);\n\n    var hit = this._scene.pickWithRay(ray, this._raySelectionPredicate);\n\n    if (hit) {\n      // Populate the controllers mesh that can be used for drag/drop\n      if (gazer._laserPointer) {\n        hit.originMesh = gazer._laserPointer.parent;\n      }\n\n      this._scene.simulatePointerMove(hit, {\n        pointerId: gazer._id\n      });\n    }\n\n    gazer._currentHit = hit; // Moving the gazeTracker on the mesh face targetted\n\n    if (hit && hit.pickedPoint) {\n      if (this._displayGaze) {\n        var multiplier = 1;\n        gazer._gazeTracker.isVisible = true;\n\n        if (gazer._isActionableMesh) {\n          multiplier = 3;\n        }\n\n        if (this.updateGazeTrackerScale) {\n          gazer._gazeTracker.scaling.x = hit.distance * multiplier;\n          gazer._gazeTracker.scaling.y = hit.distance * multiplier;\n          gazer._gazeTracker.scaling.z = hit.distance * multiplier;\n        }\n\n        var pickNormal = this._convertNormalToDirectionOfRay(hit.getNormal(), ray); // To avoid z-fighting\n\n\n        var deltaFighting = 0.002;\n\n        if (pickNormal) {\n          var axis1 = Vector3.Cross(Axis.Y, pickNormal);\n          var axis2 = Vector3.Cross(pickNormal, axis1);\n          Vector3.RotationFromAxisToRef(axis2, pickNormal, axis1, gazer._gazeTracker.rotation);\n        }\n\n        gazer._gazeTracker.position.copyFrom(hit.pickedPoint);\n\n        if (gazer._gazeTracker.position.x < 0) {\n          gazer._gazeTracker.position.x += deltaFighting;\n        } else {\n          gazer._gazeTracker.position.x -= deltaFighting;\n        }\n\n        if (gazer._gazeTracker.position.y < 0) {\n          gazer._gazeTracker.position.y += deltaFighting;\n        } else {\n          gazer._gazeTracker.position.y -= deltaFighting;\n        }\n\n        if (gazer._gazeTracker.position.z < 0) {\n          gazer._gazeTracker.position.z += deltaFighting;\n        } else {\n          gazer._gazeTracker.position.z -= deltaFighting;\n        }\n      } // Changing the size of the laser pointer based on the distance from the targetted point\n\n\n      gazer._updatePointerDistance(hit.distance);\n    } else {\n      gazer._updatePointerDistance();\n\n      gazer._gazeTracker.isVisible = false;\n    }\n\n    if (hit && hit.pickedMesh) {\n      // The object selected is the floor, we're in a teleportation scenario\n      if (this._teleportationInitialized && this._isTeleportationFloor(hit.pickedMesh) && hit.pickedPoint) {\n        // Moving the teleportation area to this targetted point\n        //Raise onSelectedMeshUnselected observable if ray collided floor mesh/meshes and a non floor mesh was previously selected\n        if (gazer._currentMeshSelected && !this._isTeleportationFloor(gazer._currentMeshSelected)) {\n          this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\n        }\n\n        gazer._currentMeshSelected = null;\n\n        if (gazer._teleportationRequestInitiated) {\n          this._moveTeleportationSelectorTo(hit, gazer, ray);\n        }\n\n        return;\n      } // If not, we're in a selection scenario\n      //this._teleportationAllowed = false;\n\n\n      if (hit.pickedMesh !== gazer._currentMeshSelected) {\n        if (this.meshSelectionPredicate(hit.pickedMesh)) {\n          this.onNewMeshPicked.notifyObservers(hit);\n          gazer._currentMeshSelected = hit.pickedMesh;\n\n          if (hit.pickedMesh.isPickable && hit.pickedMesh.actionManager) {\n            this.changeGazeColor(this._pickedGazeColor);\n            this.changeLaserColor(this._pickedLaserColor);\n            gazer._isActionableMesh = true;\n          } else {\n            this.changeGazeColor(this._gazeColor);\n            this.changeLaserColor(this._laserColor);\n            gazer._isActionableMesh = false;\n          }\n\n          try {\n            this.onNewMeshSelected.notifyObservers(hit.pickedMesh);\n            var gazerAsControllerGazer = gazer;\n\n            if (gazerAsControllerGazer.webVRController) {\n              this.onMeshSelectedWithController.notifyObservers({\n                mesh: hit.pickedMesh,\n                controller: gazerAsControllerGazer.webVRController\n              });\n            }\n          } catch (err) {\n            Logger.Warn(\"Error while raising onNewMeshSelected or onMeshSelectedWithController: \" + err);\n          }\n        } else {\n          this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\n\n          gazer._currentMeshSelected = null;\n          this.changeGazeColor(this._gazeColor);\n          this.changeLaserColor(this._laserColor);\n        }\n      }\n    } else {\n      this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\n\n      gazer._currentMeshSelected = null; //this._teleportationAllowed = false;\n\n      this.changeGazeColor(this._gazeColor);\n      this.changeLaserColor(this._laserColor);\n    }\n  };\n\n  VRExperienceHelper.prototype._notifySelectedMeshUnselected = function (mesh) {\n    if (mesh) {\n      this.onSelectedMeshUnselected.notifyObservers(mesh);\n    }\n  };\n  /**\r\n   * Permanently set new colors for the laser pointer\r\n   * @param color the new laser color\r\n   * @param pickedColor the new laser color when picked mesh detected\r\n   */\n\n\n  VRExperienceHelper.prototype.setLaserColor = function (color, pickedColor) {\n    if (pickedColor === void 0) {\n      pickedColor = this._pickedLaserColor;\n    }\n\n    this._laserColor = color;\n    this._pickedLaserColor = pickedColor;\n  };\n  /**\r\n   * Set lighting enabled / disabled on the laser pointer of both controllers\r\n   * @param enabled should the lighting be enabled on the laser pointer\r\n   */\n\n\n  VRExperienceHelper.prototype.setLaserLightingState = function (enabled) {\n    if (enabled === void 0) {\n      enabled = true;\n    }\n\n    if (this._leftController) {\n      this._leftController._setLaserPointerLightingDisabled(!enabled);\n    }\n\n    if (this._rightController) {\n      this._rightController._setLaserPointerLightingDisabled(!enabled);\n    }\n  };\n  /**\r\n   * Permanently set new colors for the gaze pointer\r\n   * @param color the new gaze color\r\n   * @param pickedColor the new gaze color when picked mesh detected\r\n   */\n\n\n  VRExperienceHelper.prototype.setGazeColor = function (color, pickedColor) {\n    if (pickedColor === void 0) {\n      pickedColor = this._pickedGazeColor;\n    }\n\n    this._gazeColor = color;\n    this._pickedGazeColor = pickedColor;\n  };\n  /**\r\n   * Sets the color of the laser ray from the vr controllers.\r\n   * @param color new color for the ray.\r\n   */\n\n\n  VRExperienceHelper.prototype.changeLaserColor = function (color) {\n    if (!this.updateControllerLaserColor) {\n      return;\n    }\n\n    if (this._leftController) {\n      this._leftController._setLaserPointerColor(color);\n    }\n\n    if (this._rightController) {\n      this._rightController._setLaserPointerColor(color);\n    }\n  };\n  /**\r\n   * Sets the color of the ray from the vr headsets gaze.\r\n   * @param color new color for the ray.\r\n   */\n\n\n  VRExperienceHelper.prototype.changeGazeColor = function (color) {\n    if (!this.updateGazeTrackerColor) {\n      return;\n    }\n\n    if (!this._cameraGazer._gazeTracker.material) {\n      return;\n    }\n\n    this._cameraGazer._gazeTracker.material.emissiveColor = color;\n\n    if (this._leftController) {\n      this._leftController._gazeTracker.material.emissiveColor = color;\n    }\n\n    if (this._rightController) {\n      this._rightController._gazeTracker.material.emissiveColor = color;\n    }\n  };\n  /**\r\n   * Exits VR and disposes of the vr experience helper\r\n   */\n\n\n  VRExperienceHelper.prototype.dispose = function () {\n    if (this.isInVRMode) {\n      this.exitVR();\n    }\n\n    if (this._postProcessMove) {\n      this._postProcessMove.dispose();\n    }\n\n    if (this._webVRCamera) {\n      this._webVRCamera.dispose();\n    }\n\n    if (this._vrDeviceOrientationCamera) {\n      this._vrDeviceOrientationCamera.dispose();\n    }\n\n    if (!this._useCustomVRButton && this._btnVR && this._btnVR.parentNode) {\n      document.body.removeChild(this._btnVR);\n    }\n\n    if (this._deviceOrientationCamera && this._scene.activeCamera != this._deviceOrientationCamera) {\n      this._deviceOrientationCamera.dispose();\n    }\n\n    if (this._cameraGazer) {\n      this._cameraGazer.dispose();\n    }\n\n    if (this._leftController) {\n      this._leftController.dispose();\n    }\n\n    if (this._rightController) {\n      this._rightController.dispose();\n    }\n\n    if (this._teleportationTarget) {\n      this._teleportationTarget.dispose();\n    }\n\n    if (this.xr) {\n      this.xr.dispose();\n    }\n\n    this._floorMeshesCollection = [];\n    document.removeEventListener(\"keydown\", this._onKeyDown);\n    window.removeEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\n    window.removeEventListener(\"resize\", this._onResize);\n    document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\n    document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\n    document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\n    document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\n    document.onmsfullscreenchange = null;\n\n    this._scene.getEngine().onVRDisplayChangedObservable.removeCallback(this._onVRDisplayChanged);\n\n    this._scene.getEngine().onVRRequestPresentStart.removeCallback(this._onVRRequestPresentStart);\n\n    this._scene.getEngine().onVRRequestPresentComplete.removeCallback(this._onVRRequestPresentComplete);\n\n    window.removeEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\n\n    this._scene.gamepadManager.onGamepadConnectedObservable.removeCallback(this._onNewGamepadConnected);\n\n    this._scene.gamepadManager.onGamepadDisconnectedObservable.removeCallback(this._onNewGamepadDisconnected);\n\n    this._scene.unregisterBeforeRender(this.beforeRender);\n  };\n  /**\r\n   * Gets the name of the VRExperienceHelper class\r\n   * @returns \"VRExperienceHelper\"\r\n   */\n\n\n  VRExperienceHelper.prototype.getClassName = function () {\n    return \"VRExperienceHelper\";\n  };\n  /**\r\n   * Time Constant Teleportation Mode\r\n   */\n\n\n  VRExperienceHelper.TELEPORTATIONMODE_CONSTANTTIME = 0;\n  /**\r\n   * Speed Constant Teleportation Mode\r\n   */\n\n  VRExperienceHelper.TELEPORTATIONMODE_CONSTANTSPEED = 1;\n  return VRExperienceHelper;\n}();\n\nexport { VRExperienceHelper };","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/VR/vrExperienceHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"../../Misc/logger\";\r\nimport { Observer, Observable } from \"../../Misc/observable\";\r\nimport { Nullable } from \"../../types\";\r\nimport { Camera } from \"../../Cameras/camera\";\r\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { TargetCamera } from \"../../Cameras/targetCamera\";\r\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera\";\r\nimport { VRDeviceOrientationFreeCamera } from \"../../Cameras/VR/vrDeviceOrientationFreeCamera\";\r\nimport { WebVROptions, WebVRFreeCamera } from \"../../Cameras/VR/webVRCamera\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Scene, IDisposable } from \"../../scene\";\r\nimport { Quaternion, Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Color3, Color4 } from '../../Maths/math.color';\r\nimport { Gamepad, StickValues } from \"../../Gamepads/gamepad\";\r\nimport { PoseEnabledController, PoseEnabledControllerType } from \"../../Gamepads/Controllers/poseEnabledController\";\r\nimport { WebVRController } from \"../../Gamepads/Controllers/webVRController\";\r\nimport { Xbox360Pad, Xbox360Button } from \"../../Gamepads/xboxGamepad\";\r\nimport { IDisplayChangedEventArgs } from \"../../Engines/engine\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { PickingInfo } from \"../../Collisions/pickingInfo\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration\";\r\nimport { StandardMaterial } from \"../../Materials/standardMaterial\";\r\nimport { DynamicTexture } from \"../../Materials/Textures/dynamicTexture\";\r\nimport { ImageProcessingPostProcess } from \"../../PostProcesses/imageProcessingPostProcess\";\r\nimport { SineEase, EasingFunction, CircleEase } from \"../../Animations/easing\";\r\nimport { Animation } from \"../../Animations/animation\";\r\nimport { VRCameraMetrics } from '../../Cameras/VR/vrCameraMetrics';\r\n\r\nimport \"../../Meshes/Builders/groundBuilder\";\r\nimport \"../../Meshes/Builders/torusBuilder\";\r\nimport \"../../Meshes/Builders/cylinderBuilder\";\r\n\r\nimport \"../../Gamepads/gamepadSceneComponent\";\r\nimport \"../../Animations/animatable\";\r\nimport { Axis } from '../../Maths/math.axis';\r\nimport { WebXRSessionManager } from '../../XR/webXRSessionManager';\r\nimport { WebXRDefaultExperience } from '../../XR/webXRDefaultExperience';\r\nimport { WebXRState } from '../../XR/webXRTypes';\r\n\r\n/**\r\n * Options to modify the vr teleportation behavior.\r\n */\r\nexport interface VRTeleportationOptions {\r\n    /**\r\n     * The name of the mesh which should be used as the teleportation floor. (default: null)\r\n     */\r\n    floorMeshName?: string;\r\n    /**\r\n     * A list of meshes to be used as the teleportation floor. (default: empty)\r\n     */\r\n    floorMeshes?: Mesh[];\r\n    /**\r\n     * The teleportation mode. (default: TELEPORTATIONMODE_CONSTANTTIME)\r\n     */\r\n    teleportationMode?: number;\r\n    /**\r\n     * The duration of the animation in ms, apply when animationMode is TELEPORTATIONMODE_CONSTANTTIME. (default 122ms)\r\n     */\r\n    teleportationTime?: number;\r\n    /**\r\n     * The speed of the animation in distance/sec, apply when animationMode is TELEPORTATIONMODE_CONSTANTSPEED. (default 20 units / sec)\r\n     */\r\n    teleportationSpeed?: number;\r\n    /**\r\n     * The easing function used in the animation or null for Linear. (default CircleEase)\r\n     */\r\n    easingFunction?: EasingFunction;\r\n}\r\n\r\n/**\r\n * Options to modify the vr experience helper's behavior.\r\n */\r\nexport interface VRExperienceHelperOptions extends WebVROptions {\r\n    /**\r\n     * Create a DeviceOrientationCamera to be used as your out of vr camera. (default: true)\r\n     */\r\n    createDeviceOrientationCamera?: boolean;\r\n    /**\r\n     * Create a VRDeviceOrientationFreeCamera to be used for VR when no external HMD is found. (default: true)\r\n     */\r\n    createFallbackVRDeviceOrientationFreeCamera?: boolean;\r\n    /**\r\n     * Uses the main button on the controller to toggle the laser casted. (default: true)\r\n     */\r\n    laserToggle?: boolean;\r\n    /**\r\n     * A list of meshes to be used as the teleportation floor. If specified, teleportation will be enabled (default: undefined)\r\n     */\r\n    floorMeshes?: Mesh[];\r\n    /**\r\n     * Distortion metrics for the fallback vrDeviceOrientationCamera (default: VRCameraMetrics.Default)\r\n     */\r\n    vrDeviceOrientationCameraMetrics?: VRCameraMetrics;\r\n    /**\r\n     * Defines if WebXR should be used instead of WebVR (if available)\r\n     */\r\n    useXR?: boolean;\r\n}\r\n\r\nclass VRExperienceHelperGazer implements IDisposable {\r\n    /** @hidden */\r\n    public _gazeTracker: Mesh;\r\n\r\n    /** @hidden */\r\n    public _currentMeshSelected: Nullable<AbstractMesh>;\r\n    /** @hidden */\r\n    public _currentHit: Nullable<PickingInfo>;\r\n\r\n    public static _idCounter = 0;\r\n    /** @hidden */\r\n    public _id: number;\r\n\r\n    /** @hidden */\r\n    public _pointerDownOnMeshAsked: boolean = false;\r\n    /** @hidden */\r\n    public _isActionableMesh: boolean = false;\r\n\r\n    /** @hidden */\r\n    public _interactionsEnabled: boolean;\r\n    /** @hidden */\r\n    public _teleportationEnabled: boolean;\r\n    /** @hidden */\r\n    public _teleportationRequestInitiated = false;\r\n    /** @hidden */\r\n    public _teleportationBackRequestInitiated = false;\r\n    /** @hidden */\r\n    public _rotationRightAsked = false;\r\n    /** @hidden */\r\n    public _rotationLeftAsked = false;\r\n    /** @hidden */\r\n    public _dpadPressed = true;\r\n\r\n    /** @hidden */\r\n    public _activePointer = false;\r\n\r\n    constructor(public scene: Scene, gazeTrackerToClone: Nullable<Mesh> = null) {\r\n        this._id = VRExperienceHelperGazer._idCounter++;\r\n\r\n        // Gaze tracker\r\n        if (!gazeTrackerToClone) {\r\n            this._gazeTracker = Mesh.CreateTorus(\"gazeTracker\", 0.0035, 0.0025, 20, scene, false);\r\n            this._gazeTracker.bakeCurrentTransformIntoVertices();\r\n            this._gazeTracker.isPickable = false;\r\n            this._gazeTracker.isVisible = false;\r\n            var targetMat = new StandardMaterial(\"targetMat\", scene);\r\n            targetMat.specularColor = Color3.Black();\r\n            targetMat.emissiveColor = new Color3(0.7, 0.7, 0.7);\r\n            targetMat.backFaceCulling = false;\r\n            this._gazeTracker.material = targetMat;\r\n        } else {\r\n            this._gazeTracker = gazeTrackerToClone.clone(\"gazeTracker\") as Mesh;\r\n        }\r\n\r\n    }\r\n\r\n    /** @hidden */\r\n    public _getForwardRay(length: number): Ray {\r\n        return new Ray(Vector3.Zero(), new Vector3(0, 0, length));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _selectionPointerDown() {\r\n        this._pointerDownOnMeshAsked = true;\r\n        if (this._currentHit) {\r\n            this.scene.simulatePointerDown(this._currentHit, { pointerId: this._id });\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _selectionPointerUp() {\r\n        if (this._currentHit) {\r\n            this.scene.simulatePointerUp(this._currentHit, { pointerId: this._id });\r\n        }\r\n        this._pointerDownOnMeshAsked = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _activatePointer() {\r\n        this._activePointer = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _deactivatePointer() {\r\n        this._activePointer = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _updatePointerDistance(distance: number = 100) {\r\n    }\r\n\r\n    public dispose() {\r\n        this._interactionsEnabled = false;\r\n        this._teleportationEnabled = false;\r\n        if (this._gazeTracker) {\r\n            this._gazeTracker.dispose();\r\n        }\r\n    }\r\n}\r\n\r\nclass VRExperienceHelperControllerGazer extends VRExperienceHelperGazer {\r\n    private _laserPointer: Mesh;\r\n    private _meshAttachedObserver: Nullable<Observer<AbstractMesh>>;\r\n    constructor(public webVRController: WebVRController, scene: Scene, gazeTrackerToClone: Mesh) {\r\n        super(scene, gazeTrackerToClone);\r\n        // Laser pointer\r\n        this._laserPointer = Mesh.CreateCylinder(\"laserPointer\", 1, 0.004, 0.0002, 20, 1, scene, false);\r\n        var laserPointerMaterial = new StandardMaterial(\"laserPointerMat\", scene);\r\n        laserPointerMaterial.emissiveColor = new Color3(0.7, 0.7, 0.7);\r\n        laserPointerMaterial.alpha = 0.6;\r\n        this._laserPointer.material = laserPointerMaterial;\r\n        this._laserPointer.rotation.x = Math.PI / 2;\r\n        this._laserPointer.position.z = -0.5;\r\n        this._laserPointer.isVisible = false;\r\n        this._laserPointer.isPickable = false;\r\n\r\n        if (!webVRController.mesh) {\r\n            // Create an empty mesh that is used prior to loading the high quality model\r\n            var preloadMesh = new Mesh(\"preloadControllerMesh\", scene);\r\n            var preloadPointerPose = new Mesh(PoseEnabledController.POINTING_POSE, scene);\r\n            preloadPointerPose.rotation.x = -0.7;\r\n            preloadMesh.addChild(preloadPointerPose);\r\n            webVRController.attachToMesh(preloadMesh);\r\n        }\r\n\r\n        this._setLaserPointerParent(webVRController.mesh!);\r\n\r\n        this._meshAttachedObserver = webVRController._meshAttachedObservable.add((mesh) => {\r\n            this._setLaserPointerParent(mesh);\r\n        });\r\n    }\r\n\r\n    _getForwardRay(length: number): Ray {\r\n        return this.webVRController.getForwardRay(length);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _activatePointer() {\r\n        super._activatePointer();\r\n        this._laserPointer.isVisible = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _deactivatePointer() {\r\n        super._deactivatePointer();\r\n        this._laserPointer.isVisible = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setLaserPointerColor(color: Color3) {\r\n        (<StandardMaterial>this._laserPointer.material).emissiveColor = color;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setLaserPointerLightingDisabled(disabled: boolean) {\r\n        (<StandardMaterial>this._laserPointer.material).disableLighting = disabled;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _setLaserPointerParent(mesh: AbstractMesh) {\r\n        var makeNotPick = (root: AbstractMesh) => {\r\n            root.isPickable = false;\r\n            root.getChildMeshes().forEach((c) => {\r\n                makeNotPick(c);\r\n            });\r\n        };\r\n        makeNotPick(mesh);\r\n        var meshChildren = mesh.getChildren(undefined, false);\r\n\r\n        let laserParent: TransformNode = mesh;\r\n        this.webVRController._pointingPoseNode = null;\r\n        for (var i = 0; i < meshChildren.length; i++) {\r\n            if (meshChildren[i].name && meshChildren[i].name.indexOf(PoseEnabledController.POINTING_POSE) >= 0) {\r\n                laserParent = <TransformNode>meshChildren[i];\r\n                this.webVRController._pointingPoseNode = laserParent;\r\n                break;\r\n            }\r\n        }\r\n        this._laserPointer.parent = laserParent;\r\n    }\r\n\r\n    public _updatePointerDistance(distance: number = 100) {\r\n        this._laserPointer.scaling.y = distance;\r\n        this._laserPointer.position.z = -distance / 2;\r\n    }\r\n\r\n    dispose() {\r\n        super.dispose();\r\n        this._laserPointer.dispose();\r\n        if (this._meshAttachedObserver) {\r\n            this.webVRController._meshAttachedObservable.remove(this._meshAttachedObserver);\r\n        }\r\n    }\r\n}\r\n\r\nclass VRExperienceHelperCameraGazer extends VRExperienceHelperGazer {\r\n    constructor(private getCamera: () => Nullable<Camera>, scene: Scene) {\r\n        super(scene);\r\n    }\r\n\r\n    _getForwardRay(length: number): Ray {\r\n        var camera = this.getCamera();\r\n        if (camera) {\r\n            return camera.getForwardRay(length);\r\n        } else {\r\n            return new Ray(Vector3.Zero(), Vector3.Forward());\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Event containing information after VR has been entered\r\n */\r\nexport class OnAfterEnteringVRObservableEvent {\r\n    /**\r\n     * If entering vr was successful\r\n     */\r\n    public success: boolean;\r\n}\r\n\r\n/**\r\n * Helps to quickly add VR support to an existing scene.\r\n * See https://doc.babylonjs.com/how_to/webvr_helper\r\n */\r\nexport class VRExperienceHelper {\r\n    private _scene: Scene;\r\n    private _position: Vector3;\r\n    private _btnVR: Nullable<HTMLButtonElement>;\r\n    private _btnVRDisplayed: boolean;\r\n\r\n    // Can the system support WebVR, even if a headset isn't plugged in?\r\n    private _webVRsupported = false;\r\n    // If WebVR is supported, is a headset plugged in and are we ready to present?\r\n    private _webVRready = false;\r\n    // Are we waiting for the requestPresent callback to complete?\r\n    private _webVRrequesting = false;\r\n    // Are we presenting to the headset right now? (this is the vrDevice state)\r\n    private _webVRpresenting = false;\r\n    // Have we entered VR? (this is the VRExperienceHelper state)\r\n    private _hasEnteredVR: boolean;\r\n\r\n    // Are we presenting in the fullscreen fallback?\r\n    private _fullscreenVRpresenting = false;\r\n\r\n    private _inputElement: Nullable<HTMLElement>;\r\n    private _webVRCamera: WebVRFreeCamera;\r\n    private _vrDeviceOrientationCamera: Nullable<VRDeviceOrientationFreeCamera>;\r\n    private _deviceOrientationCamera: Nullable<DeviceOrientationCamera>;\r\n    private _existingCamera: Camera;\r\n\r\n    private _onKeyDown: (event: KeyboardEvent) => void;\r\n    private _onVrDisplayPresentChange: any;\r\n    private _onVRDisplayChanged: (eventArgs: IDisplayChangedEventArgs) => void;\r\n    private _onVRRequestPresentStart: () => void;\r\n    private _onVRRequestPresentComplete: (success: boolean) => void;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that gaze can be enabled even if pointer lock is not engage (useful on iOS where fullscreen mode and pointer lock are not supported)\r\n     */\r\n    public enableGazeEvenWhenNoPointerLock = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the VREXperienceHelper will exit VR if double tap is detected\r\n     */\r\n    public exitVROnDoubleTap = true;\r\n\r\n    /**\r\n     * Observable raised right before entering VR.\r\n     */\r\n    public onEnteringVRObservable = new Observable<VRExperienceHelper>();\r\n\r\n    /**\r\n     * Observable raised when entering VR has completed.\r\n     */\r\n    public onAfterEnteringVRObservable = new Observable<OnAfterEnteringVRObservableEvent>();\r\n\r\n    /**\r\n     * Observable raised when exiting VR.\r\n     */\r\n    public onExitingVRObservable = new Observable<VRExperienceHelper>();\r\n\r\n    /**\r\n     * Observable raised when controller mesh is loaded.\r\n     */\r\n    public onControllerMeshLoadedObservable = new Observable<WebVRController>();\r\n\r\n    /** Return this.onEnteringVRObservable\r\n     * Note: This one is for backward compatibility. Please use onEnteringVRObservable directly\r\n     */\r\n    public get onEnteringVR(): Observable<VRExperienceHelper> {\r\n        return this.onEnteringVRObservable;\r\n    }\r\n\r\n    /** Return this.onExitingVRObservable\r\n     * Note: This one is for backward compatibility. Please use onExitingVRObservable directly\r\n     */\r\n    public get onExitingVR(): Observable<VRExperienceHelper> {\r\n        return this.onExitingVRObservable;\r\n    }\r\n\r\n    /** Return this.onControllerMeshLoadedObservable\r\n     * Note: This one is for backward compatibility. Please use onControllerMeshLoadedObservable directly\r\n     */\r\n    public get onControllerMeshLoaded(): Observable<WebVRController> {\r\n        return this.onControllerMeshLoadedObservable;\r\n    }\r\n\r\n    private _rayLength: number;\r\n    private _useCustomVRButton: boolean = false;\r\n    private _teleportationRequested: boolean = false;\r\n    private _teleportActive = false;\r\n    private _floorMeshName: string;\r\n    private _floorMeshesCollection: Mesh[] = [];\r\n    private _teleportationMode: number = VRExperienceHelper.TELEPORTATIONMODE_CONSTANTTIME;\r\n    private _teleportationTime: number = 122;\r\n    private _teleportationSpeed: number = 20;\r\n    private _teleportationEasing: EasingFunction;\r\n    private _rotationAllowed: boolean = true;\r\n    private _teleportBackwardsVector = new Vector3(0, -1, -1);\r\n    private _teleportationTarget: Mesh;\r\n    private _isDefaultTeleportationTarget = true;\r\n    private _postProcessMove: ImageProcessingPostProcess;\r\n    private _teleportationFillColor: string = \"#444444\";\r\n    private _teleportationBorderColor: string = \"#FFFFFF\";\r\n    private _rotationAngle: number = 0;\r\n    private _haloCenter = new Vector3(0, 0, 0);\r\n    private _cameraGazer: VRExperienceHelperCameraGazer;\r\n    private _padSensibilityUp = 0.65;\r\n    private _padSensibilityDown = 0.35;\r\n\r\n    private _leftController: Nullable<VRExperienceHelperControllerGazer> = null;\r\n    private _rightController: Nullable<VRExperienceHelperControllerGazer> = null;\r\n\r\n    private _gazeColor: Color3 = new Color3(0.7, 0.7, 0.7);\r\n    private _laserColor: Color3 = new Color3(0.7, 0.7, 0.7);\r\n    private _pickedLaserColor: Color3 = new Color3(0.2, 0.2, 1);\r\n    private _pickedGazeColor: Color3 = new Color3(0, 0, 1);\r\n\r\n    /**\r\n     * Observable raised when a new mesh is selected based on meshSelectionPredicate\r\n     */\r\n    public onNewMeshSelected = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * Observable raised when a new mesh is selected based on meshSelectionPredicate.\r\n     * This observable will provide the mesh and the controller used to select the mesh\r\n     */\r\n    public onMeshSelectedWithController = new Observable<{ mesh: AbstractMesh, controller: WebVRController }>();\r\n\r\n    /**\r\n     * Observable raised when a new mesh is picked based on meshSelectionPredicate\r\n     */\r\n    public onNewMeshPicked = new Observable<PickingInfo>();\r\n\r\n    private _circleEase: CircleEase;\r\n\r\n    /**\r\n     * Observable raised before camera teleportation\r\n    */\r\n    public onBeforeCameraTeleport = new Observable<Vector3>();\r\n\r\n    /**\r\n     *  Observable raised after camera teleportation\r\n    */\r\n    public onAfterCameraTeleport = new Observable<Vector3>();\r\n\r\n    /**\r\n    * Observable raised when current selected mesh gets unselected\r\n    */\r\n    public onSelectedMeshUnselected = new Observable<AbstractMesh>();\r\n\r\n    private _raySelectionPredicate: (mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * To be optionaly changed by user to define custom ray selection\r\n     */\r\n    public raySelectionPredicate: (mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * To be optionaly changed by user to define custom selection logic (after ray selection)\r\n     */\r\n    public meshSelectionPredicate: (mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * Set teleportation enabled. If set to false camera teleportation will be disabled but camera rotation will be kept.\r\n     */\r\n    public teleportationEnabled: boolean = true;\r\n\r\n    private _defaultHeight: number;\r\n    private _teleportationInitialized = false;\r\n    private _interactionsEnabled = false;\r\n    private _interactionsRequested = false;\r\n    private _displayGaze = true;\r\n    private _displayLaserPointer = true;\r\n\r\n    /**\r\n     * The mesh used to display where the user is going to teleport.\r\n     */\r\n    public get teleportationTarget(): Mesh {\r\n        return this._teleportationTarget;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh to be used to display where the user is going to teleport.\r\n     */\r\n    public set teleportationTarget(value: Mesh) {\r\n        if (value) {\r\n            value.name = \"teleportationTarget\";\r\n            this._isDefaultTeleportationTarget = false;\r\n            this._teleportationTarget = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The mesh used to display where the user is selecting, this mesh will be cloned and set as the gazeTracker for the left and right controller\r\n     * when set bakeCurrentTransformIntoVertices will be called on the mesh.\r\n     * See https://doc.babylonjs.com/resources/baking_transformations\r\n     */\r\n    public get gazeTrackerMesh(): Mesh {\r\n        return this._cameraGazer._gazeTracker;\r\n    }\r\n\r\n    public set gazeTrackerMesh(value: Mesh) {\r\n        if (value) {\r\n            // Dispose of existing meshes\r\n            if (this._cameraGazer._gazeTracker) {\r\n                this._cameraGazer._gazeTracker.dispose();\r\n            }\r\n            if (this._leftController && this._leftController._gazeTracker) {\r\n                this._leftController._gazeTracker.dispose();\r\n            }\r\n            if (this._rightController && this._rightController._gazeTracker) {\r\n                this._rightController._gazeTracker.dispose();\r\n            }\r\n\r\n            // Set and create gaze trackers on head and controllers\r\n            this._cameraGazer._gazeTracker = value;\r\n            this._cameraGazer._gazeTracker.bakeCurrentTransformIntoVertices();\r\n            this._cameraGazer._gazeTracker.isPickable = false;\r\n            this._cameraGazer._gazeTracker.isVisible = false;\r\n            this._cameraGazer._gazeTracker.name = \"gazeTracker\";\r\n            if (this._leftController) {\r\n                this._leftController._gazeTracker = this._cameraGazer._gazeTracker.clone(\"gazeTracker\") as Mesh;\r\n            }\r\n\r\n            if (this._rightController) {\r\n                this._rightController._gazeTracker = this._cameraGazer._gazeTracker.clone(\"gazeTracker\") as Mesh;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the gaze trackers scale should be updated to be constant size when pointing at near/far meshes\r\n     */\r\n    public updateGazeTrackerScale = true;\r\n    /**\r\n     * If the gaze trackers color should be updated when selecting meshes\r\n     */\r\n    public updateGazeTrackerColor = true;\r\n    /**\r\n     * If the controller laser color should be updated when selecting meshes\r\n     */\r\n    public updateControllerLaserColor = true;\r\n\r\n    /**\r\n     * The gaze tracking mesh corresponding to the left controller\r\n     */\r\n    public get leftControllerGazeTrackerMesh(): Nullable<Mesh> {\r\n        if (this._leftController) {\r\n            return this._leftController._gazeTracker;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * The gaze tracking mesh corresponding to the right controller\r\n     */\r\n    public get rightControllerGazeTrackerMesh(): Nullable<Mesh> {\r\n        if (this._rightController) {\r\n            return this._rightController._gazeTracker;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * If the ray of the gaze should be displayed.\r\n     */\r\n    public get displayGaze(): boolean {\r\n        return this._displayGaze;\r\n    }\r\n\r\n    /**\r\n     * Sets if the ray of the gaze should be displayed.\r\n     */\r\n    public set displayGaze(value: boolean) {\r\n        this._displayGaze = value;\r\n        if (!value) {\r\n            this._cameraGazer._gazeTracker.isVisible = false;\r\n\r\n            if (this._leftController) {\r\n                this._leftController._gazeTracker.isVisible = false;\r\n            }\r\n\r\n            if (this._rightController) {\r\n                this._rightController._gazeTracker.isVisible = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the ray of the LaserPointer should be displayed.\r\n     */\r\n    public get displayLaserPointer(): boolean {\r\n        return this._displayLaserPointer;\r\n    }\r\n\r\n    /**\r\n     * Sets if the ray of the LaserPointer should be displayed.\r\n     */\r\n    public set displayLaserPointer(value: boolean) {\r\n        this._displayLaserPointer = value;\r\n        if (!value) {\r\n            if (this._rightController) {\r\n                this._rightController._deactivatePointer();\r\n                this._rightController._gazeTracker.isVisible = false;\r\n            }\r\n            if (this._leftController) {\r\n                this._leftController._deactivatePointer();\r\n                this._leftController._gazeTracker.isVisible = false;\r\n            }\r\n        }\r\n        else {\r\n            if (this._rightController) {\r\n                this._rightController._activatePointer();\r\n            }\r\n            if (this._leftController) {\r\n                this._leftController._activatePointer();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The deviceOrientationCamera used as the camera when not in VR.\r\n     */\r\n    public get deviceOrientationCamera(): Nullable<DeviceOrientationCamera> {\r\n        return this._deviceOrientationCamera;\r\n    }\r\n\r\n    /**\r\n     * Based on the current WebVR support, returns the current VR camera used.\r\n     */\r\n    public get currentVRCamera(): Nullable<Camera> {\r\n        if (this._webVRready) {\r\n            return this._webVRCamera;\r\n        }\r\n        else {\r\n            return this._scene.activeCamera;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The webVRCamera which is used when in VR.\r\n     */\r\n    public get webVRCamera(): WebVRFreeCamera {\r\n        return this._webVRCamera;\r\n    }\r\n\r\n    /**\r\n     * The deviceOrientationCamera that is used as a fallback when vr device is not connected.\r\n     */\r\n    public get vrDeviceOrientationCamera(): Nullable<VRDeviceOrientationFreeCamera> {\r\n        return this._vrDeviceOrientationCamera;\r\n    }\r\n\r\n    /**\r\n     * The html button that is used to trigger entering into VR.\r\n     */\r\n    public get vrButton(): Nullable<HTMLButtonElement> {\r\n        return this._btnVR;\r\n    }\r\n\r\n    private get _teleportationRequestInitiated(): boolean {\r\n        var result = this._cameraGazer._teleportationRequestInitiated\r\n            || (this._leftController !== null && this._leftController._teleportationRequestInitiated)\r\n            || (this._rightController !== null && this._rightController._teleportationRequestInitiated);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Defines whether or not Pointer lock should be requested when switching to\r\n     * full screen.\r\n     */\r\n    public requestPointerLockOnFullScreen = true;\r\n\r\n    // XR\r\n\r\n    /**\r\n     * If asking to force XR, this will be populated with the default xr experience\r\n     */\r\n    public xr: WebXRDefaultExperience;\r\n\r\n    /**\r\n     * Was the XR test done already. If this is true AND this.xr exists, xr is initialized.\r\n     * If this is true and no this.xr, xr exists but is not supported, using WebVR.\r\n     */\r\n    public xrTestDone: boolean = false;\r\n\r\n    /**\r\n     * Instantiates a VRExperienceHelper.\r\n     * Helps to quickly add VR support to an existing scene.\r\n     * @param scene The scene the VRExperienceHelper belongs to.\r\n     * @param webVROptions Options to modify the vr experience helper's behavior.\r\n     */\r\n    constructor(scene: Scene,\r\n        /** Options to modify the vr experience helper's behavior. */\r\n        public webVROptions: VRExperienceHelperOptions = {}) {\r\n        this._scene = scene;\r\n        this._inputElement = scene.getEngine().getInputElement();\r\n\r\n        // check for VR support:\r\n\r\n        const vrSupported = 'getVRDisplays' in navigator;\r\n        // no VR support? force XR\r\n        if (!vrSupported) {\r\n            webVROptions.useXR = true;\r\n        }\r\n\r\n        // Parse options\r\n        if (webVROptions.createFallbackVRDeviceOrientationFreeCamera === undefined) {\r\n            webVROptions.createFallbackVRDeviceOrientationFreeCamera = true;\r\n        }\r\n        if (webVROptions.createDeviceOrientationCamera === undefined) {\r\n            webVROptions.createDeviceOrientationCamera = true;\r\n        }\r\n        if (webVROptions.laserToggle === undefined) {\r\n            webVROptions.laserToggle = true;\r\n        }\r\n        if (webVROptions.defaultHeight === undefined) {\r\n            webVROptions.defaultHeight = 1.7;\r\n        }\r\n        if (webVROptions.useCustomVRButton) {\r\n            this._useCustomVRButton = true;\r\n            if (webVROptions.customVRButton) {\r\n                this._btnVR = webVROptions.customVRButton;\r\n            }\r\n        }\r\n        if (webVROptions.rayLength) {\r\n            this._rayLength = webVROptions.rayLength;\r\n        }\r\n        this._defaultHeight = webVROptions.defaultHeight;\r\n\r\n        if (webVROptions.positionScale) {\r\n            this._rayLength *= webVROptions.positionScale;\r\n            this._defaultHeight *= webVROptions.positionScale;\r\n        }\r\n\r\n        this._hasEnteredVR = false;\r\n\r\n        // Set position\r\n        if (this._scene.activeCamera) {\r\n            this._position = this._scene.activeCamera.position.clone();\r\n        } else {\r\n            this._position = new Vector3(0, this._defaultHeight, 0);\r\n        }\r\n\r\n        // Set non-vr camera\r\n        if (webVROptions.createDeviceOrientationCamera || !this._scene.activeCamera) {\r\n            this._deviceOrientationCamera = new DeviceOrientationCamera(\"deviceOrientationVRHelper\", this._position.clone(), scene);\r\n\r\n            // Copy data from existing camera\r\n            if (this._scene.activeCamera) {\r\n                this._deviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\r\n                this._deviceOrientationCamera.maxZ = this._scene.activeCamera.maxZ;\r\n                // Set rotation from previous camera\r\n                if (this._scene.activeCamera instanceof TargetCamera && this._scene.activeCamera.rotation) {\r\n                    var targetCamera = this._scene.activeCamera;\r\n                    if (targetCamera.rotationQuaternion) {\r\n                        this._deviceOrientationCamera.rotationQuaternion.copyFrom(targetCamera.rotationQuaternion);\r\n                    } else {\r\n                        this._deviceOrientationCamera.rotationQuaternion.copyFrom(Quaternion.RotationYawPitchRoll(targetCamera.rotation.y, targetCamera.rotation.x, targetCamera.rotation.z));\r\n                    }\r\n                    this._deviceOrientationCamera.rotation = targetCamera.rotation.clone();\r\n                }\r\n            }\r\n\r\n            this._scene.activeCamera = this._deviceOrientationCamera;\r\n            if (this._inputElement) {\r\n                this._scene.activeCamera.attachControl();\r\n            }\r\n        } else {\r\n            this._existingCamera = this._scene.activeCamera;\r\n        }\r\n\r\n        if (this.webVROptions.useXR && (navigator as any).xr) {\r\n            // force-check XR session support\r\n            WebXRSessionManager.IsSessionSupportedAsync(\"immersive-vr\").then((supported) => {\r\n                if (supported) {\r\n                    Logger.Log(\"Using WebXR. It is recommended to use the WebXRDefaultExperience directly\");\r\n                    // it is possible to use XR, let's do it!\r\n                    scene.createDefaultXRExperienceAsync({\r\n                        floorMeshes: webVROptions.floorMeshes || []\r\n                    }).then((xr) => {\r\n                        this.xr = xr;\r\n                        // connect observables\r\n                        this.xrTestDone = true;\r\n\r\n                        this._cameraGazer = new VRExperienceHelperCameraGazer(() => { return this.xr.baseExperience.camera; }, scene);\r\n\r\n                        this.xr.baseExperience.onStateChangedObservable.add((state) => {\r\n                            // support for entering / exiting\r\n                            switch (state) {\r\n                                case WebXRState.ENTERING_XR:\r\n                                    this.onEnteringVRObservable.notifyObservers(this);\r\n                                    if (!this._interactionsEnabled) {\r\n                                        this.xr.pointerSelection.detach();\r\n                                    }\r\n                                    this.xr.pointerSelection.displayLaserPointer = this._displayLaserPointer;\r\n                                    break;\r\n                                case WebXRState.EXITING_XR:\r\n                                    this.onExitingVRObservable.notifyObservers(this);\r\n\r\n                                    // resize to update width and height when exiting vr exits fullscreen\r\n                                    this._scene.getEngine().resize();\r\n                                    break;\r\n                                case WebXRState.IN_XR:\r\n                                    this._hasEnteredVR = true;\r\n                                    break;\r\n                                case WebXRState.NOT_IN_XR:\r\n                                    this._hasEnteredVR = false;\r\n                                    break;\r\n                            }\r\n                        });\r\n                    });\r\n                } else {\r\n                    // XR not supported (thou exists), continue WebVR init\r\n                    this.completeVRInit(scene, webVROptions);\r\n                }\r\n            });\r\n        } else {\r\n            // no XR, continue init synchronous\r\n            this.completeVRInit(scene, webVROptions);\r\n        }\r\n\r\n    }\r\n\r\n    private completeVRInit(scene: Scene,\r\n        webVROptions: VRExperienceHelperOptions): void {\r\n        this.xrTestDone = true;\r\n        // Create VR cameras\r\n        if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\r\n            if (webVROptions.useMultiview) {\r\n                if (!webVROptions.vrDeviceOrientationCameraMetrics) {\r\n                    webVROptions.vrDeviceOrientationCameraMetrics = VRCameraMetrics.GetDefault();\r\n                }\r\n                webVROptions.vrDeviceOrientationCameraMetrics.multiviewEnabled = true;\r\n            }\r\n            this._vrDeviceOrientationCamera = new VRDeviceOrientationFreeCamera(\"VRDeviceOrientationVRHelper\", this._position, this._scene, true, webVROptions.vrDeviceOrientationCameraMetrics);\r\n            this._vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\r\n        }\r\n        this._webVRCamera = new WebVRFreeCamera(\"WebVRHelper\", this._position, this._scene, webVROptions);\r\n        this._webVRCamera.useStandingMatrix();\r\n\r\n        this._cameraGazer = new VRExperienceHelperCameraGazer(() => { return this.currentVRCamera; }, scene);\r\n        // Create default button\r\n        if (!this._useCustomVRButton) {\r\n            this._btnVR = <HTMLButtonElement>document.createElement(\"BUTTON\");\r\n            this._btnVR.className = \"babylonVRicon\";\r\n            this._btnVR.id = \"babylonVRiconbtn\";\r\n            this._btnVR.title = \"Click to switch to VR\";\r\n            const url = !window.SVGSVGElement ? \"https://cdn.babylonjs.com/Assets/vrButton.png\" : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\r\n            var css = \".babylonVRicon { position: absolute; right: 20px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" + url + \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\r\n            css += \".babylonVRicon.vrdisplaypresenting { display: none; }\";\r\n            // TODO: Add user feedback so that they know what state the VRDisplay is in (disconnected, connected, entering-VR)\r\n            // css += \".babylonVRicon.vrdisplaysupported { }\";\r\n            // css += \".babylonVRicon.vrdisplayready { }\";\r\n            // css += \".babylonVRicon.vrdisplayrequesting { }\";\r\n\r\n            var style = document.createElement('style');\r\n            style.appendChild(document.createTextNode(css));\r\n            document.getElementsByTagName('head')[0].appendChild(style);\r\n\r\n            this.moveButtonToBottomRight();\r\n        }\r\n\r\n        // VR button click event\r\n        if (this._btnVR) {\r\n            this._btnVR.addEventListener(\"click\", () => {\r\n                if (!this.isInVRMode) {\r\n                    this.enterVR();\r\n                } else {\r\n                    this._scene.getEngine().disableVR();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Window events\r\n\r\n        let hostWindow = this._scene.getEngine().getHostWindow();\r\n        if (!hostWindow) {\r\n            return;\r\n        }\r\n\r\n        hostWindow.addEventListener(\"resize\", this._onResize);\r\n        document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\r\n        document.addEventListener(\"mozfullscreenchange\", this._onFullscreenChange, false);\r\n        document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\r\n        document.addEventListener(\"msfullscreenchange\", this._onFullscreenChange, false);\r\n        (<any>document).onmsfullscreenchange = this._onFullscreenChange;\r\n\r\n        // Display vr button when headset is connected\r\n        if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\r\n            this.displayVRButton();\r\n        } else {\r\n            this._scene.getEngine().onVRDisplayChangedObservable.add((e) => {\r\n                if (e.vrDisplay) {\r\n                    this.displayVRButton();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Exiting VR mode using 'ESC' key on desktop\r\n        this._onKeyDown = (event: KeyboardEvent) => {\r\n            if (event.keyCode === 27 && this.isInVRMode) {\r\n                this.exitVR();\r\n            }\r\n        };\r\n        document.addEventListener(\"keydown\", this._onKeyDown);\r\n\r\n        // Exiting VR mode double tapping the touch screen\r\n        this._scene.onPrePointerObservable.add(() => {\r\n            if (this._hasEnteredVR && this.exitVROnDoubleTap) {\r\n                this.exitVR();\r\n                if (this._fullscreenVRpresenting) {\r\n                    this._scene.getEngine().exitFullscreen();\r\n                }\r\n            }\r\n        }, PointerEventTypes.POINTERDOUBLETAP, false);\r\n\r\n        // Listen for WebVR display changes\r\n        this._onVRDisplayChanged = (eventArgs: IDisplayChangedEventArgs) => this.onVRDisplayChanged(eventArgs);\r\n        this._onVrDisplayPresentChange = () => this.onVrDisplayPresentChange();\r\n        this._onVRRequestPresentStart = () => {\r\n            this._webVRrequesting = true;\r\n            this.updateButtonVisibility();\r\n        };\r\n        this._onVRRequestPresentComplete = () => {\r\n            this._webVRrequesting = false;\r\n            this.updateButtonVisibility();\r\n        };\r\n        scene.getEngine().onVRDisplayChangedObservable.add(this._onVRDisplayChanged);\r\n        scene.getEngine().onVRRequestPresentStart.add(this._onVRRequestPresentStart);\r\n        scene.getEngine().onVRRequestPresentComplete.add(this._onVRRequestPresentComplete);\r\n        hostWindow.addEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\r\n\r\n        scene.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        // Gamepad connection events\r\n        this._webVRCamera.onControllerMeshLoadedObservable.add((webVRController) => this._onDefaultMeshLoaded(webVRController));\r\n        this._scene.gamepadManager.onGamepadConnectedObservable.add(this._onNewGamepadConnected);\r\n        this._scene.gamepadManager.onGamepadDisconnectedObservable.add(this._onNewGamepadDisconnected);\r\n\r\n        this.updateButtonVisibility();\r\n\r\n        //create easing functions\r\n        this._circleEase = new CircleEase();\r\n        this._circleEase.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\r\n        this._teleportationEasing = this._circleEase;\r\n\r\n        // Allow clicking in the vrDeviceOrientationCamera\r\n        scene.onPointerObservable.add((e) => {\r\n            if (this._interactionsEnabled) {\r\n                if (scene.activeCamera === this.vrDeviceOrientationCamera && (e.event as PointerEvent).pointerType === \"mouse\") {\r\n                    if (e.type === PointerEventTypes.POINTERDOWN) {\r\n                        this._cameraGazer._selectionPointerDown();\r\n                    } else if (e.type === PointerEventTypes.POINTERUP) {\r\n                        this._cameraGazer._selectionPointerUp();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.webVROptions.floorMeshes) {\r\n            this.enableTeleportation({ floorMeshes: this.webVROptions.floorMeshes });\r\n        }\r\n    }\r\n\r\n    // Raised when one of the controller has loaded successfully its associated default mesh\r\n    private _onDefaultMeshLoaded(webVRController: WebVRController) {\r\n        if (this._leftController && this._leftController.webVRController == webVRController) {\r\n            if (webVRController.mesh) {\r\n                this._leftController._setLaserPointerParent(webVRController.mesh);\r\n            }\r\n        }\r\n        if (this._rightController && this._rightController.webVRController == webVRController) {\r\n            if (webVRController.mesh) {\r\n                this._rightController._setLaserPointerParent(webVRController.mesh);\r\n            }\r\n        }\r\n\r\n        try {\r\n            this.onControllerMeshLoadedObservable.notifyObservers(webVRController);\r\n        }\r\n        catch (err) {\r\n            Logger.Warn(\"Error in your custom logic onControllerMeshLoaded: \" + err);\r\n        }\r\n    }\r\n\r\n    private _onResize = () => {\r\n        this.moveButtonToBottomRight();\r\n        if (this._fullscreenVRpresenting && this._webVRready) {\r\n            this.exitVR();\r\n        }\r\n    }\r\n\r\n    private _onFullscreenChange = () => {\r\n        let anyDoc = document as any;\r\n        if (anyDoc.fullscreen !== undefined) {\r\n            this._fullscreenVRpresenting = (<any>document).fullscreen;\r\n        } else if (anyDoc.mozFullScreen !== undefined) {\r\n            this._fullscreenVRpresenting = anyDoc.mozFullScreen;\r\n        } else if (anyDoc.webkitIsFullScreen !== undefined) {\r\n            this._fullscreenVRpresenting = anyDoc.webkitIsFullScreen;\r\n        } else if (anyDoc.msIsFullScreen !== undefined) {\r\n            this._fullscreenVRpresenting = anyDoc.msIsFullScreen;\r\n        } else if ((<any>document).msFullscreenElement !== undefined) {\r\n            this._fullscreenVRpresenting = (<any>document).msFullscreenElement;\r\n        }\r\n        if (!this._fullscreenVRpresenting && this._inputElement) {\r\n            this.exitVR();\r\n            if (!this._useCustomVRButton && this._btnVR) {\r\n                this._btnVR.style.top = this._inputElement.offsetTop + this._inputElement.offsetHeight - 70 + \"px\";\r\n                this._btnVR.style.left = this._inputElement.offsetLeft + this._inputElement.offsetWidth - 100 + \"px\";\r\n                // make sure the button is visible after setting its position\r\n                this.updateButtonVisibility();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating if we are currently in VR mode.\r\n     */\r\n    public get isInVRMode(): boolean {\r\n        return (this.xr && this.webVROptions.useXR && this.xr.baseExperience.state === WebXRState.IN_XR) || (this._webVRpresenting || this._fullscreenVRpresenting);\r\n    }\r\n\r\n    private onVrDisplayPresentChange() {\r\n        var vrDisplay = this._scene.getEngine().getVRDevice();\r\n        if (vrDisplay) {\r\n            var wasPresenting = this._webVRpresenting;\r\n            this._webVRpresenting = vrDisplay.isPresenting;\r\n\r\n            if (wasPresenting && !this._webVRpresenting) {\r\n                this.exitVR();\r\n            }\r\n        } else {\r\n            Logger.Warn('Detected VRDisplayPresentChange on an unknown VRDisplay. Did you can enterVR on the vrExperienceHelper?');\r\n        }\r\n\r\n        this.updateButtonVisibility();\r\n    }\r\n\r\n    private onVRDisplayChanged(eventArgs: IDisplayChangedEventArgs) {\r\n        this._webVRsupported = eventArgs.vrSupported;\r\n        this._webVRready = !!eventArgs.vrDisplay;\r\n        this._webVRpresenting = eventArgs.vrDisplay && eventArgs.vrDisplay.isPresenting;\r\n\r\n        this.updateButtonVisibility();\r\n    }\r\n\r\n    private moveButtonToBottomRight() {\r\n        if (this._inputElement && !this._useCustomVRButton && this._btnVR) {\r\n            const rect: ClientRect = this._inputElement.getBoundingClientRect();\r\n            this._btnVR.style.top = rect.top + rect.height - 70 + \"px\";\r\n            this._btnVR.style.left = rect.left + rect.width - 100 + \"px\";\r\n        }\r\n    }\r\n\r\n    private displayVRButton() {\r\n        if (!this._useCustomVRButton && !this._btnVRDisplayed && this._btnVR) {\r\n            document.body.appendChild(this._btnVR);\r\n            this._btnVRDisplayed = true;\r\n        }\r\n    }\r\n\r\n    private updateButtonVisibility() {\r\n        if (!this._btnVR || this._useCustomVRButton) {\r\n            return;\r\n        }\r\n        this._btnVR.className = \"babylonVRicon\";\r\n        if (this.isInVRMode) {\r\n            this._btnVR.className += \" vrdisplaypresenting\";\r\n        } else {\r\n            if (this._webVRready) { this._btnVR.className += \" vrdisplayready\"; }\r\n            if (this._webVRsupported) { this._btnVR.className += \" vrdisplaysupported\"; }\r\n            if (this._webVRrequesting) { this._btnVR.className += \" vrdisplayrequesting\"; }\r\n        }\r\n    }\r\n\r\n    private _cachedAngularSensibility = { angularSensibilityX: null, angularSensibilityY: null, angularSensibility: null };\r\n    /**\r\n     * Attempt to enter VR. If a headset is connected and ready, will request present on that.\r\n     * Otherwise, will use the fullscreen API.\r\n     */\r\n    public enterVR() {\r\n        if (this.xr) {\r\n            this.xr.baseExperience.enterXRAsync(\"immersive-vr\", \"local-floor\", this.xr.renderTarget);\r\n            return;\r\n        }\r\n        if (this.onEnteringVRObservable) {\r\n            try {\r\n                this.onEnteringVRObservable.notifyObservers(this);\r\n            }\r\n            catch (err) {\r\n                Logger.Warn(\"Error in your custom logic onEnteringVR: \" + err);\r\n            }\r\n        }\r\n\r\n        if (this._scene.activeCamera) {\r\n            this._position = this._scene.activeCamera.position.clone();\r\n\r\n            if (this.vrDeviceOrientationCamera) {\r\n                this.vrDeviceOrientationCamera.rotation = Quaternion.FromRotationMatrix(this._scene.activeCamera.getWorldMatrix().getRotationMatrix()).toEulerAngles();\r\n                this.vrDeviceOrientationCamera.angularSensibility = 2000;\r\n            }\r\n            if (this.webVRCamera) {\r\n                var currentYRotation = this.webVRCamera.deviceRotationQuaternion.toEulerAngles().y;\r\n                var desiredYRotation = Quaternion.FromRotationMatrix(this._scene.activeCamera.getWorldMatrix().getRotationMatrix()).toEulerAngles().y;\r\n                var delta = desiredYRotation - currentYRotation;\r\n                var currentGlobalRotation = this.webVRCamera.rotationQuaternion.toEulerAngles().y;\r\n                this.webVRCamera.rotationQuaternion = Quaternion.FromEulerAngles(0, currentGlobalRotation + delta, 0);\r\n            }\r\n\r\n            // make sure that we return to the last active camera\r\n            this._existingCamera = this._scene.activeCamera;\r\n\r\n            // Remove and cache angular sensability to avoid camera rotation when in VR\r\n            if ((<any>this._existingCamera).angularSensibilityX) {\r\n                this._cachedAngularSensibility.angularSensibilityX = (<any>this._existingCamera).angularSensibilityX;\r\n                (<any>this._existingCamera).angularSensibilityX = Number.MAX_VALUE;\r\n            }\r\n            if ((<any>this._existingCamera).angularSensibilityY) {\r\n                this._cachedAngularSensibility.angularSensibilityY = (<any>this._existingCamera).angularSensibilityY;\r\n                (<any>this._existingCamera).angularSensibilityY = Number.MAX_VALUE;\r\n            }\r\n            if ((<any>this._existingCamera).angularSensibility) {\r\n                this._cachedAngularSensibility.angularSensibility = (<any>this._existingCamera).angularSensibility;\r\n                (<any>this._existingCamera).angularSensibility = Number.MAX_VALUE;\r\n            }\r\n        }\r\n\r\n        if (this._webVRrequesting) {\r\n            return;\r\n        }\r\n\r\n        // If WebVR is supported and a headset is connected\r\n        if (this._webVRready) {\r\n            if (!this._webVRpresenting) {\r\n                this._scene.getEngine().onVRRequestPresentComplete.addOnce((result) => {\r\n                    this.onAfterEnteringVRObservable.notifyObservers({ success: result });\r\n                });\r\n                this._webVRCamera.position = this._position;\r\n                this._scene.activeCamera = this._webVRCamera;\r\n            }\r\n        }\r\n        else if (this._vrDeviceOrientationCamera) {\r\n            this._vrDeviceOrientationCamera.position = this._position;\r\n            if (this._scene.activeCamera) {\r\n                this._vrDeviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\r\n            }\r\n            this._scene.activeCamera = this._vrDeviceOrientationCamera;\r\n            this._scene.getEngine().enterFullscreen(this.requestPointerLockOnFullScreen);\r\n            this.updateButtonVisibility();\r\n            this._vrDeviceOrientationCamera.onViewMatrixChangedObservable.addOnce(() => {\r\n                this.onAfterEnteringVRObservable.notifyObservers({ success: true });\r\n            });\r\n        }\r\n\r\n        if (this._scene.activeCamera && this._inputElement) {\r\n            this._scene.activeCamera.attachControl();\r\n        }\r\n\r\n        if (this._interactionsEnabled) {\r\n            this._scene.registerBeforeRender(this.beforeRender);\r\n        }\r\n\r\n        if (this._displayLaserPointer) {\r\n            [this._leftController, this._rightController].forEach((controller) => {\r\n                if (controller) {\r\n                    controller._activatePointer();\r\n                }\r\n            });\r\n        }\r\n\r\n        this._hasEnteredVR = true;\r\n    }\r\n\r\n    /**\r\n     * Attempt to exit VR, or fullscreen.\r\n     */\r\n    public exitVR() {\r\n        if (this.xr) {\r\n            this.xr.baseExperience.exitXRAsync();\r\n            return;\r\n        }\r\n        if (this._hasEnteredVR) {\r\n            if (this.onExitingVRObservable) {\r\n                try {\r\n                    this.onExitingVRObservable.notifyObservers(this);\r\n                }\r\n                catch (err) {\r\n                    Logger.Warn(\"Error in your custom logic onExitingVR: \" + err);\r\n                }\r\n            }\r\n            if (this._webVRpresenting) {\r\n                this._scene.getEngine().disableVR();\r\n            }\r\n            if (this._scene.activeCamera) {\r\n                this._position = this._scene.activeCamera.position.clone();\r\n\r\n            }\r\n\r\n            if (this.vrDeviceOrientationCamera) {\r\n                this.vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\r\n            }\r\n\r\n            if (this._deviceOrientationCamera) {\r\n                this._deviceOrientationCamera.position = this._position;\r\n                this._scene.activeCamera = this._deviceOrientationCamera;\r\n\r\n                // Restore angular sensibility\r\n                if (this._cachedAngularSensibility.angularSensibilityX) {\r\n                    (<any>this._deviceOrientationCamera).angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\r\n                    this._cachedAngularSensibility.angularSensibilityX = null;\r\n                }\r\n                if (this._cachedAngularSensibility.angularSensibilityY) {\r\n                    (<any>this._deviceOrientationCamera).angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\r\n                    this._cachedAngularSensibility.angularSensibilityY = null;\r\n                }\r\n                if (this._cachedAngularSensibility.angularSensibility) {\r\n                    (<any>this._deviceOrientationCamera).angularSensibility = this._cachedAngularSensibility.angularSensibility;\r\n                    this._cachedAngularSensibility.angularSensibility = null;\r\n                }\r\n            } else if (this._existingCamera) {\r\n                this._existingCamera.position = this._position;\r\n                this._scene.activeCamera = this._existingCamera;\r\n                if (this._inputElement) {\r\n                    this._scene.activeCamera.attachControl();\r\n                }\r\n\r\n                // Restore angular sensibility\r\n                if (this._cachedAngularSensibility.angularSensibilityX) {\r\n                    (<any>this._existingCamera).angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\r\n                    this._cachedAngularSensibility.angularSensibilityX = null;\r\n                }\r\n                if (this._cachedAngularSensibility.angularSensibilityY) {\r\n                    (<any>this._existingCamera).angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\r\n                    this._cachedAngularSensibility.angularSensibilityY = null;\r\n                }\r\n                if (this._cachedAngularSensibility.angularSensibility) {\r\n                    (<any>this._existingCamera).angularSensibility = this._cachedAngularSensibility.angularSensibility;\r\n                    this._cachedAngularSensibility.angularSensibility = null;\r\n                }\r\n            }\r\n\r\n            this.updateButtonVisibility();\r\n\r\n            if (this._interactionsEnabled) {\r\n                this._scene.unregisterBeforeRender(this.beforeRender);\r\n                this._cameraGazer._gazeTracker.isVisible = false;\r\n                if (this._leftController) {\r\n                    this._leftController._gazeTracker.isVisible = false;\r\n                }\r\n                if (this._rightController) {\r\n                    this._rightController._gazeTracker.isVisible = false;\r\n                }\r\n            }\r\n\r\n            // resize to update width and height when exiting vr exits fullscreen\r\n            this._scene.getEngine().resize();\r\n\r\n            [this._leftController, this._rightController].forEach((controller) => {\r\n                if (controller) {\r\n                    controller._deactivatePointer();\r\n                }\r\n            });\r\n\r\n            this._hasEnteredVR = false;\r\n\r\n            // Update engine state to re enable non-vr camera input\r\n            var engine = this._scene.getEngine();\r\n            if (engine._onVrDisplayPresentChange) {\r\n                engine._onVrDisplayPresentChange();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The position of the vr experience helper.\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    /**\r\n     * Sets the position of the vr experience helper.\r\n     */\r\n    public set position(value: Vector3) {\r\n        this._position = value;\r\n\r\n        if (this._scene.activeCamera) {\r\n            this._scene.activeCamera.position = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables controllers and user interactions such as selecting and object or clicking on an object.\r\n     */\r\n    public enableInteractions() {\r\n        if (!this._interactionsEnabled) {\r\n            this._interactionsRequested = true;\r\n\r\n            // in XR it is enabled by default, but just to make sure, re-attach\r\n            if (this.xr) {\r\n                if (this.xr.baseExperience.state === WebXRState.IN_XR) {\r\n                    this.xr.pointerSelection.attach();\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (this._leftController) {\r\n                this._enableInteractionOnController(this._leftController);\r\n            }\r\n\r\n            if (this._rightController) {\r\n                this._enableInteractionOnController(this._rightController);\r\n            }\r\n\r\n            this.raySelectionPredicate = (mesh) => {\r\n                return mesh.isVisible && (mesh.isPickable || mesh.name === this._floorMeshName);\r\n            };\r\n\r\n            this.meshSelectionPredicate = () => {\r\n                return true;\r\n            };\r\n\r\n            this._raySelectionPredicate = (mesh) => {\r\n                if (this._isTeleportationFloor(mesh) || (mesh.name.indexOf(\"gazeTracker\") === -1\r\n                    && mesh.name.indexOf(\"teleportationTarget\") === -1\r\n                    && mesh.name.indexOf(\"torusTeleportation\") === -1)) {\r\n                    return this.raySelectionPredicate(mesh);\r\n                }\r\n                return false;\r\n            };\r\n\r\n            this._interactionsEnabled = true;\r\n        }\r\n    }\r\n\r\n    private get _noControllerIsActive() {\r\n        return !(this._leftController && this._leftController._activePointer) && !(this._rightController && this._rightController._activePointer);\r\n    }\r\n\r\n    private beforeRender = () => {\r\n        if (this._leftController && this._leftController._activePointer) {\r\n            this._castRayAndSelectObject(this._leftController);\r\n        }\r\n\r\n        if (this._rightController && this._rightController._activePointer) {\r\n            this._castRayAndSelectObject(this._rightController);\r\n        }\r\n\r\n        if (this._noControllerIsActive && (this._scene.getEngine().isPointerLock || this.enableGazeEvenWhenNoPointerLock)) {\r\n            this._castRayAndSelectObject(this._cameraGazer);\r\n        } else {\r\n            this._cameraGazer._gazeTracker.isVisible = false;\r\n        }\r\n\r\n    }\r\n\r\n    private _isTeleportationFloor(mesh: AbstractMesh): boolean {\r\n        for (var i = 0; i < this._floorMeshesCollection.length; i++) {\r\n            if (this._floorMeshesCollection[i].id === mesh.id) {\r\n                return true;\r\n            }\r\n        }\r\n        if (this._floorMeshName && mesh.name === this._floorMeshName) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Adds a floor mesh to be used for teleportation.\r\n     * @param floorMesh the mesh to be used for teleportation.\r\n     */\r\n    public addFloorMesh(floorMesh: Mesh): void {\r\n        if (!this._floorMeshesCollection) {\r\n            return;\r\n        }\r\n\r\n        if (this._floorMeshesCollection.indexOf(floorMesh) > -1) {\r\n            return;\r\n        }\r\n\r\n        this._floorMeshesCollection.push(floorMesh);\r\n    }\r\n\r\n    /**\r\n     * Removes a floor mesh from being used for teleportation.\r\n     * @param floorMesh the mesh to be removed.\r\n     */\r\n    public removeFloorMesh(floorMesh: Mesh): void {\r\n        if (!this._floorMeshesCollection) {\r\n            return;\r\n        }\r\n\r\n        const meshIndex = this._floorMeshesCollection.indexOf(floorMesh);\r\n        if (meshIndex !== -1) {\r\n            this._floorMeshesCollection.splice(meshIndex, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables interactions and teleportation using the VR controllers and gaze.\r\n     * @param vrTeleportationOptions options to modify teleportation behavior.\r\n     */\r\n    public enableTeleportation(vrTeleportationOptions: VRTeleportationOptions = {}) {\r\n        if (!this._teleportationInitialized) {\r\n            this._teleportationRequested = true;\r\n\r\n            this.enableInteractions();\r\n\r\n            if (this.webVROptions.useXR && (vrTeleportationOptions.floorMeshes || vrTeleportationOptions.floorMeshName)) {\r\n                const floorMeshes: AbstractMesh[] = vrTeleportationOptions.floorMeshes || [];\r\n                if (!floorMeshes.length) {\r\n                    const floorMesh = this._scene.getMeshByName(vrTeleportationOptions.floorMeshName!);\r\n                    if (floorMesh) {\r\n                        floorMeshes.push(floorMesh);\r\n                    }\r\n                }\r\n                if (this.xr) {\r\n                    floorMeshes.forEach((mesh) => {\r\n                        this.xr.teleportation.addFloorMesh(mesh);\r\n                    });\r\n                    if (!this.xr.teleportation.attached) {\r\n                        this.xr.teleportation.attach();\r\n                    }\r\n                    return;\r\n                } else if (!this.xrTestDone) {\r\n                    const waitForXr = () => {\r\n                        if (this.xrTestDone) {\r\n                            this._scene.unregisterBeforeRender(waitForXr);\r\n                            if (this.xr) {\r\n                                if (!this.xr.teleportation.attached) {\r\n                                    this.xr.teleportation.attach();\r\n                                }\r\n                            } else {\r\n                                this.enableTeleportation(vrTeleportationOptions);\r\n                            }\r\n                        }\r\n                    };\r\n                    this._scene.registerBeforeRender(waitForXr);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (vrTeleportationOptions.floorMeshName) {\r\n                this._floorMeshName = vrTeleportationOptions.floorMeshName;\r\n            }\r\n            if (vrTeleportationOptions.floorMeshes) {\r\n                this._floorMeshesCollection = vrTeleportationOptions.floorMeshes;\r\n            }\r\n\r\n            if (vrTeleportationOptions.teleportationMode) {\r\n                this._teleportationMode = vrTeleportationOptions.teleportationMode;\r\n            }\r\n            if (vrTeleportationOptions.teleportationTime && vrTeleportationOptions.teleportationTime > 0) {\r\n                this._teleportationTime = vrTeleportationOptions.teleportationTime;\r\n            }\r\n            if (vrTeleportationOptions.teleportationSpeed && vrTeleportationOptions.teleportationSpeed > 0) {\r\n                this._teleportationSpeed = vrTeleportationOptions.teleportationSpeed;\r\n            }\r\n            if (vrTeleportationOptions.easingFunction !== undefined) {\r\n                this._teleportationEasing = vrTeleportationOptions.easingFunction;\r\n            }\r\n\r\n            if (this._leftController != null) {\r\n                this._enableTeleportationOnController(this._leftController);\r\n            }\r\n            if (this._rightController != null) {\r\n                this._enableTeleportationOnController(this._rightController);\r\n            }\r\n\r\n            // Creates an image processing post process for the vignette not relying\r\n            // on the main scene configuration for image processing to reduce setup and spaces\r\n            // (gamma/linear) conflicts.\r\n            const imageProcessingConfiguration = new ImageProcessingConfiguration();\r\n            imageProcessingConfiguration.vignetteColor = new Color4(0, 0, 0, 0);\r\n            imageProcessingConfiguration.vignetteEnabled = true;\r\n            this._postProcessMove = new ImageProcessingPostProcess(\"postProcessMove\",\r\n                1.0,\r\n                this._webVRCamera,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                imageProcessingConfiguration);\r\n\r\n            this._webVRCamera.detachPostProcess(this._postProcessMove);\r\n            this._teleportationInitialized = true;\r\n            if (this._isDefaultTeleportationTarget) {\r\n                this._createTeleportationCircles();\r\n                this._teleportationTarget.scaling.scaleInPlace(this._webVRCamera.deviceScaleFactor);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onNewGamepadConnected = (gamepad: Gamepad) => {\r\n        if (gamepad.type !== Gamepad.POSE_ENABLED) {\r\n            if (gamepad.leftStick) {\r\n                gamepad.onleftstickchanged((stickValues) => {\r\n                    if (this._teleportationInitialized && this.teleportationEnabled) {\r\n                        // Listening to classic/xbox gamepad only if no VR controller is active\r\n                        if ((!this._leftController && !this._rightController) ||\r\n                            ((this._leftController && !this._leftController._activePointer) &&\r\n                                (this._rightController && !this._rightController._activePointer))) {\r\n                            this._checkTeleportWithRay(stickValues, this._cameraGazer);\r\n                            this._checkTeleportBackwards(stickValues, this._cameraGazer);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (gamepad.rightStick) {\r\n                gamepad.onrightstickchanged((stickValues) => {\r\n                    if (this._teleportationInitialized) {\r\n                        this._checkRotate(stickValues, this._cameraGazer);\r\n                    }\r\n                });\r\n            }\r\n            if (gamepad.type === Gamepad.XBOX) {\r\n                (<Xbox360Pad>gamepad).onbuttondown((buttonPressed: Xbox360Button) => {\r\n                    if (this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\r\n                        this._cameraGazer._selectionPointerDown();\r\n                    }\r\n                });\r\n                (<Xbox360Pad>gamepad).onbuttonup((buttonPressed: Xbox360Button) => {\r\n                    if (this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\r\n                        this._cameraGazer._selectionPointerUp();\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            var webVRController = <WebVRController>gamepad;\r\n            var controller = new VRExperienceHelperControllerGazer(webVRController, this._scene, this._cameraGazer._gazeTracker);\r\n\r\n            if (webVRController.hand === \"right\" || (this._leftController && this._leftController.webVRController != webVRController)) {\r\n                this._rightController = controller;\r\n            } else {\r\n                this._leftController = controller;\r\n            }\r\n\r\n            this._tryEnableInteractionOnController(controller);\r\n        }\r\n    }\r\n\r\n    // This only succeeds if the controller's mesh exists for the controller so this must be called whenever new controller is connected or when mesh is loaded\r\n    private _tryEnableInteractionOnController = (controller: VRExperienceHelperControllerGazer) => {\r\n        if (this._interactionsRequested && !controller._interactionsEnabled) {\r\n            this._enableInteractionOnController(controller);\r\n        }\r\n        if (this._teleportationRequested && !controller._teleportationEnabled) {\r\n            this._enableTeleportationOnController(controller);\r\n        }\r\n    }\r\n\r\n    private _onNewGamepadDisconnected = (gamepad: Gamepad) => {\r\n        if (gamepad instanceof WebVRController) {\r\n\r\n            if (gamepad.hand === \"left\" && this._leftController != null) {\r\n                this._leftController.dispose();\r\n                this._leftController = null;\r\n            }\r\n            if (gamepad.hand === \"right\" && this._rightController != null) {\r\n                this._rightController.dispose();\r\n                this._rightController = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _enableInteractionOnController(controller: VRExperienceHelperControllerGazer) {\r\n        var controllerMesh = controller.webVRController.mesh;\r\n        if (controllerMesh) {\r\n\r\n            controller._interactionsEnabled = true;\r\n            if (this.isInVRMode && this._displayLaserPointer) {\r\n                controller._activatePointer();\r\n            }\r\n            if (this.webVROptions.laserToggle) {\r\n                controller.webVRController.onMainButtonStateChangedObservable.add((stateObject) => {\r\n                    // Enabling / disabling laserPointer\r\n                    if (this._displayLaserPointer && stateObject.value === 1) {\r\n                        if (controller._activePointer) {\r\n                            controller._deactivatePointer();\r\n                        } else {\r\n                            controller._activatePointer();\r\n                        }\r\n                        if (this.displayGaze) {\r\n                            controller._gazeTracker.isVisible = controller._activePointer;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            controller.webVRController.onTriggerStateChangedObservable.add((stateObject) => {\r\n                var gazer: VRExperienceHelperGazer = controller;\r\n                if (this._noControllerIsActive) {\r\n                    gazer = this._cameraGazer;\r\n                }\r\n                if (!gazer._pointerDownOnMeshAsked) {\r\n                    if (stateObject.value > this._padSensibilityUp) {\r\n                        gazer._selectionPointerDown();\r\n                    }\r\n                } else if (stateObject.value < this._padSensibilityDown) {\r\n                    gazer._selectionPointerUp();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private _checkTeleportWithRay(stateObject: StickValues, gazer: VRExperienceHelperGazer) {\r\n        // Dont teleport if another gaze already requested teleportation\r\n        if (this._teleportationRequestInitiated && !gazer._teleportationRequestInitiated) {\r\n            return;\r\n        }\r\n        if (!gazer._teleportationRequestInitiated) {\r\n            if (stateObject.y < -this._padSensibilityUp && gazer._dpadPressed) {\r\n                gazer._activatePointer();\r\n                gazer._teleportationRequestInitiated = true;\r\n            }\r\n        } else {\r\n            // Listening to the proper controller values changes to confirm teleportation\r\n            if (Math.sqrt(stateObject.y * stateObject.y + stateObject.x * stateObject.x) < this._padSensibilityDown) {\r\n                if (this._teleportActive) {\r\n                    this.teleportCamera(this._haloCenter);\r\n                }\r\n\r\n                gazer._teleportationRequestInitiated = false;\r\n            }\r\n        }\r\n    }\r\n    private _checkRotate(stateObject: StickValues, gazer: VRExperienceHelperGazer) {\r\n        // Only rotate when user is not currently selecting a teleportation location\r\n        if (gazer._teleportationRequestInitiated) {\r\n            return;\r\n        }\r\n\r\n        if (!gazer._rotationLeftAsked) {\r\n            if (stateObject.x < -this._padSensibilityUp && gazer._dpadPressed) {\r\n                gazer._rotationLeftAsked = true;\r\n                if (this._rotationAllowed) {\r\n                    this._rotateCamera(false);\r\n                }\r\n            }\r\n        } else {\r\n            if (stateObject.x > -this._padSensibilityDown) {\r\n                gazer._rotationLeftAsked = false;\r\n            }\r\n        }\r\n\r\n        if (!gazer._rotationRightAsked) {\r\n            if (stateObject.x > this._padSensibilityUp && gazer._dpadPressed) {\r\n                gazer._rotationRightAsked = true;\r\n                if (this._rotationAllowed) {\r\n                    this._rotateCamera(true);\r\n                }\r\n            }\r\n        } else {\r\n            if (stateObject.x < this._padSensibilityDown) {\r\n                gazer._rotationRightAsked = false;\r\n            }\r\n        }\r\n    }\r\n    private _checkTeleportBackwards(stateObject: StickValues, gazer: VRExperienceHelperGazer) {\r\n        // Only teleport backwards when user is not currently selecting a teleportation location\r\n        if (gazer._teleportationRequestInitiated) {\r\n            return;\r\n        }\r\n        // Teleport backwards\r\n        if (stateObject.y > this._padSensibilityUp && gazer._dpadPressed) {\r\n            if (!gazer._teleportationBackRequestInitiated) {\r\n                if (!this.currentVRCamera) {\r\n                    return;\r\n                }\r\n\r\n                // Get rotation and position of the current camera\r\n                var rotation = Quaternion.FromRotationMatrix(this.currentVRCamera.getWorldMatrix().getRotationMatrix());\r\n                var position = this.currentVRCamera.position;\r\n\r\n                // If the camera has device position, use that instead\r\n                if ((<WebVRFreeCamera>this.currentVRCamera).devicePosition && (<WebVRFreeCamera>this.currentVRCamera).deviceRotationQuaternion) {\r\n                    rotation = (<WebVRFreeCamera>this.currentVRCamera).deviceRotationQuaternion;\r\n                    position = (<WebVRFreeCamera>this.currentVRCamera).devicePosition;\r\n                }\r\n\r\n                // Get matrix with only the y rotation of the device rotation\r\n                rotation.toEulerAnglesToRef(this._workingVector);\r\n                this._workingVector.z = 0;\r\n                this._workingVector.x = 0;\r\n                Quaternion.RotationYawPitchRollToRef(this._workingVector.y, this._workingVector.x, this._workingVector.z, this._workingQuaternion);\r\n                this._workingQuaternion.toRotationMatrix(this._workingMatrix);\r\n\r\n                // Rotate backwards ray by device rotation to cast at the ground behind the user\r\n                Vector3.TransformCoordinatesToRef(this._teleportBackwardsVector, this._workingMatrix, this._workingVector);\r\n\r\n                // Teleport if ray hit the ground and is not to far away eg. backwards off a cliff\r\n                var ray = new Ray(position, this._workingVector);\r\n                var hit = this._scene.pickWithRay(ray, this._raySelectionPredicate);\r\n                if (hit && hit.pickedPoint && hit.pickedMesh && this._isTeleportationFloor(hit.pickedMesh) && hit.distance < 5) {\r\n                    this.teleportCamera(hit.pickedPoint);\r\n                }\r\n\r\n                gazer._teleportationBackRequestInitiated = true;\r\n            }\r\n        } else {\r\n            gazer._teleportationBackRequestInitiated = false;\r\n        }\r\n\r\n    }\r\n\r\n    private _enableTeleportationOnController(controller: VRExperienceHelperControllerGazer) {\r\n        var controllerMesh = controller.webVRController.mesh;\r\n        if (controllerMesh) {\r\n            if (!controller._interactionsEnabled) {\r\n                this._enableInteractionOnController(controller);\r\n            }\r\n            controller._interactionsEnabled = true;\r\n            controller._teleportationEnabled = true;\r\n            if (controller.webVRController.controllerType === PoseEnabledControllerType.VIVE) {\r\n                controller._dpadPressed = false;\r\n                controller.webVRController.onPadStateChangedObservable.add((stateObject) => {\r\n                    controller._dpadPressed = stateObject.pressed;\r\n                    if (!controller._dpadPressed) {\r\n                        controller._rotationLeftAsked = false;\r\n                        controller._rotationRightAsked = false;\r\n                        controller._teleportationBackRequestInitiated = false;\r\n                    }\r\n                });\r\n            }\r\n            controller.webVRController.onPadValuesChangedObservable.add((stateObject) => {\r\n                if (this.teleportationEnabled) {\r\n                    this._checkTeleportBackwards(stateObject, controller);\r\n                    this._checkTeleportWithRay(stateObject, controller);\r\n                }\r\n                this._checkRotate(stateObject, controller);\r\n            });\r\n        }\r\n    }\r\n\r\n    private _createTeleportationCircles() {\r\n        this._teleportationTarget = Mesh.CreateGround(\"teleportationTarget\", 2, 2, 2, this._scene);\r\n        this._teleportationTarget.isPickable = false;\r\n\r\n        var length = 512;\r\n        var dynamicTexture = new DynamicTexture(\"DynamicTexture\", length, this._scene, true);\r\n        dynamicTexture.hasAlpha = true;\r\n        var context = dynamicTexture.getContext();\r\n\r\n        var centerX = length / 2;\r\n        var centerY = length / 2;\r\n        var radius = 200;\r\n\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.fillStyle = this._teleportationFillColor;\r\n        context.fill();\r\n        context.lineWidth = 10;\r\n        context.strokeStyle = this._teleportationBorderColor;\r\n        context.stroke();\r\n        context.closePath();\r\n        dynamicTexture.update();\r\n\r\n        var teleportationCircleMaterial = new StandardMaterial(\"TextPlaneMaterial\", this._scene);\r\n        teleportationCircleMaterial.diffuseTexture = dynamicTexture;\r\n        this._teleportationTarget.material = teleportationCircleMaterial;\r\n\r\n        var torus = Mesh.CreateTorus(\"torusTeleportation\", 0.75, 0.1, 25, this._scene, false);\r\n        torus.isPickable = false;\r\n        torus.parent = this._teleportationTarget;\r\n\r\n        var animationInnerCircle = new Animation(\"animationInnerCircle\", \"position.y\", 30, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n\r\n        var keys = [];\r\n        keys.push({\r\n            frame: 0,\r\n            value: 0\r\n        });\r\n        keys.push({\r\n            frame: 30,\r\n            value: 0.4\r\n        });\r\n        keys.push({\r\n            frame: 60,\r\n            value: 0\r\n        });\r\n\r\n        animationInnerCircle.setKeys(keys);\r\n\r\n        var easingFunction = new SineEase();\r\n        easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\r\n        animationInnerCircle.setEasingFunction(easingFunction);\r\n\r\n        torus.animations = [];\r\n        torus.animations.push(animationInnerCircle);\r\n\r\n        this._scene.beginAnimation(torus, 0, 60, true);\r\n\r\n        this._hideTeleportationTarget();\r\n    }\r\n\r\n    private _displayTeleportationTarget() {\r\n        this._teleportActive = true;\r\n        if (this._teleportationInitialized) {\r\n            this._teleportationTarget.isVisible = true;\r\n            if (this._isDefaultTeleportationTarget) {\r\n                (<Mesh>this._teleportationTarget.getChildren()[0]).isVisible = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _hideTeleportationTarget() {\r\n        this._teleportActive = false;\r\n        if (this._teleportationInitialized) {\r\n            this._teleportationTarget.isVisible = false;\r\n            if (this._isDefaultTeleportationTarget) {\r\n                (<Mesh>this._teleportationTarget.getChildren()[0]).isVisible = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _rotateCamera(right: boolean) {\r\n        if (!(this.currentVRCamera instanceof FreeCamera)) {\r\n            return;\r\n        }\r\n\r\n        if (right) {\r\n            this._rotationAngle++;\r\n        }\r\n        else {\r\n            this._rotationAngle--;\r\n        }\r\n\r\n        this.currentVRCamera.animations = [];\r\n\r\n        var target = Quaternion.FromRotationMatrix(Matrix.RotationY(Math.PI / 4 * this._rotationAngle));\r\n\r\n        var animationRotation = new Animation(\"animationRotation\", \"rotationQuaternion\", 90, Animation.ANIMATIONTYPE_QUATERNION,\r\n            Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        var animationRotationKeys = [];\r\n        animationRotationKeys.push({\r\n            frame: 0,\r\n            value: this.currentVRCamera.rotationQuaternion\r\n        });\r\n        animationRotationKeys.push({\r\n            frame: 6,\r\n            value: target\r\n        });\r\n\r\n        animationRotation.setKeys(animationRotationKeys);\r\n\r\n        animationRotation.setEasingFunction(this._circleEase);\r\n\r\n        this.currentVRCamera.animations.push(animationRotation);\r\n\r\n        this._postProcessMove.animations = [];\r\n\r\n        var animationPP = new Animation(\"animationPP\", \"vignetteWeight\", 90, Animation.ANIMATIONTYPE_FLOAT,\r\n            Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        var vignetteWeightKeys = [];\r\n        vignetteWeightKeys.push({\r\n            frame: 0,\r\n            value: 0\r\n        });\r\n        vignetteWeightKeys.push({\r\n            frame: 3,\r\n            value: 4\r\n        });\r\n        vignetteWeightKeys.push({\r\n            frame: 6,\r\n            value: 0\r\n        });\r\n\r\n        animationPP.setKeys(vignetteWeightKeys);\r\n        animationPP.setEasingFunction(this._circleEase);\r\n        this._postProcessMove.animations.push(animationPP);\r\n\r\n        var animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", 90, Animation.ANIMATIONTYPE_FLOAT,\r\n            Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        var vignetteStretchKeys = [];\r\n        vignetteStretchKeys.push({\r\n            frame: 0,\r\n            value: 0\r\n        });\r\n        vignetteStretchKeys.push({\r\n            frame: 3,\r\n            value: 10\r\n        });\r\n        vignetteStretchKeys.push({\r\n            frame: 6,\r\n            value: 0\r\n        });\r\n\r\n        animationPP2.setKeys(vignetteStretchKeys);\r\n        animationPP2.setEasingFunction(this._circleEase);\r\n        this._postProcessMove.animations.push(animationPP2);\r\n\r\n        this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\r\n        this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\r\n        this._postProcessMove.samples = 4;\r\n        this._webVRCamera.attachPostProcess(this._postProcessMove);\r\n        this._scene.beginAnimation(this._postProcessMove, 0, 6, false, 1, () => {\r\n            this._webVRCamera.detachPostProcess(this._postProcessMove);\r\n        });\r\n        this._scene.beginAnimation(this.currentVRCamera, 0, 6, false, 1);\r\n    }\r\n\r\n    private _moveTeleportationSelectorTo(hit: PickingInfo, gazer: VRExperienceHelperGazer, ray: Ray) {\r\n        if (hit.pickedPoint) {\r\n            if (gazer._teleportationRequestInitiated) {\r\n                this._displayTeleportationTarget();\r\n                this._haloCenter.copyFrom(hit.pickedPoint);\r\n                this._teleportationTarget.position.copyFrom(hit.pickedPoint);\r\n            }\r\n\r\n            var pickNormal = this._convertNormalToDirectionOfRay(hit.getNormal(true, false), ray);\r\n            if (pickNormal) {\r\n                var axis1 = Vector3.Cross(Axis.Y, pickNormal);\r\n                var axis2 = Vector3.Cross(pickNormal, axis1);\r\n                Vector3.RotationFromAxisToRef(axis2, pickNormal, axis1, this._teleportationTarget.rotation);\r\n            }\r\n            this._teleportationTarget.position.y += 0.1;\r\n        }\r\n    }\r\n    private _workingVector = Vector3.Zero();\r\n    private _workingQuaternion = Quaternion.Identity();\r\n    private _workingMatrix = Matrix.Identity();\r\n\r\n    /**\r\n     * Time Constant Teleportation Mode\r\n     */\r\n    public static readonly TELEPORTATIONMODE_CONSTANTTIME = 0;\r\n    /**\r\n     * Speed Constant Teleportation Mode\r\n     */\r\n    public static readonly TELEPORTATIONMODE_CONSTANTSPEED = 1;\r\n\r\n    /**\r\n     * Teleports the users feet to the desired location\r\n     * @param location The location where the user's feet should be placed\r\n     */\r\n    public teleportCamera(location: Vector3) {\r\n        if (!(this.currentVRCamera instanceof FreeCamera)) {\r\n            return;\r\n        }\r\n        // Teleport the hmd to where the user is looking by moving the anchor to where they are looking minus the\r\n        // offset of the headset from the anchor.\r\n        if (this.webVRCamera.leftCamera) {\r\n            this._workingVector.copyFrom(this.webVRCamera.leftCamera.globalPosition);\r\n            this._workingVector.subtractInPlace(this.webVRCamera.position);\r\n            location.subtractToRef(this._workingVector, this._workingVector);\r\n        } else {\r\n            this._workingVector.copyFrom(location);\r\n        }\r\n        // Add height to account for user's height offset\r\n        if (this.isInVRMode) {\r\n            this._workingVector.y += this.webVRCamera.deviceDistanceToRoomGround() * this._webVRCamera.deviceScaleFactor;\r\n        } else {\r\n            this._workingVector.y += this._defaultHeight;\r\n        }\r\n\r\n        this.onBeforeCameraTeleport.notifyObservers(this._workingVector);\r\n\r\n        // Animations FPS\r\n        const FPS = 90;\r\n        var speedRatio, lastFrame;\r\n        if (this._teleportationMode == VRExperienceHelper.TELEPORTATIONMODE_CONSTANTSPEED) {\r\n            lastFrame = FPS;\r\n            var dist = Vector3.Distance(this.currentVRCamera.position, this._workingVector);\r\n            speedRatio = this._teleportationSpeed / dist;\r\n        } else {\r\n            // teleportationMode is TELEPORTATIONMODE_CONSTANTTIME\r\n            lastFrame = Math.round(this._teleportationTime * FPS / 1000);\r\n            speedRatio = 1;\r\n        }\r\n\r\n        // Create animation from the camera's position to the new location\r\n        this.currentVRCamera.animations = [];\r\n        var animationCameraTeleportation = new Animation(\"animationCameraTeleportation\", \"position\", FPS, Animation.ANIMATIONTYPE_VECTOR3, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n        var animationCameraTeleportationKeys = [{\r\n            frame: 0,\r\n            value: this.currentVRCamera.position\r\n        },\r\n        {\r\n            frame: lastFrame,\r\n            value: this._workingVector\r\n        }\r\n        ];\r\n\r\n        animationCameraTeleportation.setKeys(animationCameraTeleportationKeys);\r\n        animationCameraTeleportation.setEasingFunction(this._teleportationEasing);\r\n        this.currentVRCamera.animations.push(animationCameraTeleportation);\r\n\r\n        this._postProcessMove.animations = [];\r\n\r\n        // Calculate the mid frame for vignette animations\r\n        var midFrame = Math.round(lastFrame / 2);\r\n\r\n        var animationPP = new Animation(\"animationPP\", \"vignetteWeight\", FPS, Animation.ANIMATIONTYPE_FLOAT,\r\n            Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        var vignetteWeightKeys = [];\r\n        vignetteWeightKeys.push({\r\n            frame: 0,\r\n            value: 0\r\n        });\r\n        vignetteWeightKeys.push({\r\n            frame: midFrame,\r\n            value: 8\r\n        });\r\n        vignetteWeightKeys.push({\r\n            frame: lastFrame,\r\n            value: 0\r\n        });\r\n\r\n        animationPP.setKeys(vignetteWeightKeys);\r\n        this._postProcessMove.animations.push(animationPP);\r\n\r\n        var animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", FPS, Animation.ANIMATIONTYPE_FLOAT,\r\n            Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        var vignetteStretchKeys = [];\r\n        vignetteStretchKeys.push({\r\n            frame: 0,\r\n            value: 0\r\n        });\r\n        vignetteStretchKeys.push({\r\n            frame: midFrame,\r\n            value: 10\r\n        });\r\n        vignetteStretchKeys.push({\r\n            frame: lastFrame,\r\n            value: 0\r\n        });\r\n\r\n        animationPP2.setKeys(vignetteStretchKeys);\r\n        this._postProcessMove.animations.push(animationPP2);\r\n\r\n        this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\r\n        this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\r\n\r\n        this._webVRCamera.attachPostProcess(this._postProcessMove);\r\n        this._scene.beginAnimation(this._postProcessMove, 0, lastFrame, false, speedRatio, () => {\r\n            this._webVRCamera.detachPostProcess(this._postProcessMove);\r\n        });\r\n        this._scene.beginAnimation(this.currentVRCamera, 0, lastFrame, false, speedRatio, () => {\r\n            this.onAfterCameraTeleport.notifyObservers(this._workingVector);\r\n        });\r\n\r\n        this._hideTeleportationTarget();\r\n    }\r\n\r\n    private _convertNormalToDirectionOfRay(normal: Nullable<Vector3>, ray: Ray) {\r\n        if (normal) {\r\n            var angle = Math.acos(Vector3.Dot(normal, ray.direction));\r\n            if (angle < Math.PI / 2) {\r\n                normal.scaleInPlace(-1);\r\n            }\r\n        }\r\n        return normal;\r\n    }\r\n\r\n    private _castRayAndSelectObject(gazer: VRExperienceHelperGazer) {\r\n        if (!(this.currentVRCamera instanceof FreeCamera)) {\r\n            return;\r\n        }\r\n\r\n        var ray = gazer._getForwardRay(this._rayLength);\r\n        var hit = this._scene.pickWithRay(ray, this._raySelectionPredicate);\r\n\r\n        if (hit) {\r\n            // Populate the controllers mesh that can be used for drag/drop\r\n            if ((<any>gazer)._laserPointer) {\r\n                hit.originMesh = (<any>gazer)._laserPointer.parent;\r\n            }\r\n            this._scene.simulatePointerMove(hit, { pointerId: gazer._id });\r\n        }\r\n        gazer._currentHit = hit;\r\n\r\n        // Moving the gazeTracker on the mesh face targetted\r\n        if (hit && hit.pickedPoint) {\r\n            if (this._displayGaze) {\r\n                let multiplier = 1;\r\n\r\n                gazer._gazeTracker.isVisible = true;\r\n\r\n                if (gazer._isActionableMesh) {\r\n                    multiplier = 3;\r\n                }\r\n                if (this.updateGazeTrackerScale) {\r\n                    gazer._gazeTracker.scaling.x = hit.distance * multiplier;\r\n                    gazer._gazeTracker.scaling.y = hit.distance * multiplier;\r\n                    gazer._gazeTracker.scaling.z = hit.distance * multiplier;\r\n                }\r\n\r\n                var pickNormal = this._convertNormalToDirectionOfRay(hit.getNormal(), ray);\r\n                // To avoid z-fighting\r\n                let deltaFighting = 0.002;\r\n\r\n                if (pickNormal) {\r\n                    var axis1 = Vector3.Cross(Axis.Y, pickNormal);\r\n                    var axis2 = Vector3.Cross(pickNormal, axis1);\r\n                    Vector3.RotationFromAxisToRef(axis2, pickNormal, axis1, gazer._gazeTracker.rotation);\r\n                }\r\n                gazer._gazeTracker.position.copyFrom(hit.pickedPoint);\r\n\r\n                if (gazer._gazeTracker.position.x < 0) {\r\n                    gazer._gazeTracker.position.x += deltaFighting;\r\n                }\r\n                else {\r\n                    gazer._gazeTracker.position.x -= deltaFighting;\r\n                }\r\n                if (gazer._gazeTracker.position.y < 0) {\r\n                    gazer._gazeTracker.position.y += deltaFighting;\r\n                }\r\n                else {\r\n                    gazer._gazeTracker.position.y -= deltaFighting;\r\n                }\r\n                if (gazer._gazeTracker.position.z < 0) {\r\n                    gazer._gazeTracker.position.z += deltaFighting;\r\n                }\r\n                else {\r\n                    gazer._gazeTracker.position.z -= deltaFighting;\r\n                }\r\n            }\r\n\r\n            // Changing the size of the laser pointer based on the distance from the targetted point\r\n            gazer._updatePointerDistance(hit.distance);\r\n        }\r\n        else {\r\n            gazer._updatePointerDistance();\r\n            gazer._gazeTracker.isVisible = false;\r\n        }\r\n\r\n        if (hit && hit.pickedMesh) {\r\n            // The object selected is the floor, we're in a teleportation scenario\r\n            if (this._teleportationInitialized && this._isTeleportationFloor(hit.pickedMesh) && hit.pickedPoint) {\r\n                // Moving the teleportation area to this targetted point\r\n\r\n                //Raise onSelectedMeshUnselected observable if ray collided floor mesh/meshes and a non floor mesh was previously selected\r\n                if (gazer._currentMeshSelected && !this._isTeleportationFloor(gazer._currentMeshSelected)) {\r\n                    this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\r\n                }\r\n\r\n                gazer._currentMeshSelected = null;\r\n                if (gazer._teleportationRequestInitiated) {\r\n                    this._moveTeleportationSelectorTo(hit, gazer, ray);\r\n                }\r\n                return;\r\n            }\r\n            // If not, we're in a selection scenario\r\n            //this._teleportationAllowed = false;\r\n            if (hit.pickedMesh !== gazer._currentMeshSelected) {\r\n                if (this.meshSelectionPredicate(hit.pickedMesh)) {\r\n                    this.onNewMeshPicked.notifyObservers(hit);\r\n                    gazer._currentMeshSelected = hit.pickedMesh;\r\n                    if (hit.pickedMesh.isPickable && hit.pickedMesh.actionManager) {\r\n                        this.changeGazeColor(this._pickedGazeColor);\r\n                        this.changeLaserColor(this._pickedLaserColor);\r\n                        gazer._isActionableMesh = true;\r\n                    }\r\n                    else {\r\n                        this.changeGazeColor(this._gazeColor);\r\n                        this.changeLaserColor(this._laserColor);\r\n                        gazer._isActionableMesh = false;\r\n                    }\r\n                    try {\r\n                        this.onNewMeshSelected.notifyObservers(hit.pickedMesh);\r\n                        let gazerAsControllerGazer = gazer as VRExperienceHelperControllerGazer;\r\n                        if (gazerAsControllerGazer.webVRController) {\r\n                            this.onMeshSelectedWithController.notifyObservers({ mesh: hit.pickedMesh, controller: gazerAsControllerGazer.webVRController });\r\n                        }\r\n                    }\r\n                    catch (err) {\r\n                        Logger.Warn(\"Error while raising onNewMeshSelected or onMeshSelectedWithController: \" + err);\r\n                    }\r\n                }\r\n                else {\r\n                    this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\r\n                    gazer._currentMeshSelected = null;\r\n                    this.changeGazeColor(this._gazeColor);\r\n                    this.changeLaserColor(this._laserColor);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\r\n            gazer._currentMeshSelected = null;\r\n            //this._teleportationAllowed = false;\r\n            this.changeGazeColor(this._gazeColor);\r\n            this.changeLaserColor(this._laserColor);\r\n        }\r\n    }\r\n\r\n    private _notifySelectedMeshUnselected(mesh: Nullable<AbstractMesh>) {\r\n        if (mesh) {\r\n            this.onSelectedMeshUnselected.notifyObservers(mesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Permanently set new colors for the laser pointer\r\n     * @param color the new laser color\r\n     * @param pickedColor the new laser color when picked mesh detected\r\n     */\r\n    public setLaserColor(color: Color3, pickedColor: Color3 = this._pickedLaserColor) {\r\n        this._laserColor = color;\r\n        this._pickedLaserColor = pickedColor;\r\n    }\r\n\r\n    /**\r\n     * Set lighting enabled / disabled on the laser pointer of both controllers\r\n     * @param enabled should the lighting be enabled on the laser pointer\r\n     */\r\n    public setLaserLightingState(enabled: boolean = true) {\r\n        if (this._leftController) {\r\n            this._leftController._setLaserPointerLightingDisabled(!enabled);\r\n\r\n        }\r\n        if (this._rightController) {\r\n            this._rightController._setLaserPointerLightingDisabled(!enabled);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Permanently set new colors for the gaze pointer\r\n     * @param color the new gaze color\r\n     * @param pickedColor the new gaze color when picked mesh detected\r\n     */\r\n    public setGazeColor(color: Color3, pickedColor: Color3 = this._pickedGazeColor) {\r\n        this._gazeColor = color;\r\n        this._pickedGazeColor = pickedColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the color of the laser ray from the vr controllers.\r\n     * @param color new color for the ray.\r\n     */\r\n    public changeLaserColor(color: Color3) {\r\n        if (!this.updateControllerLaserColor) {\r\n            return;\r\n        }\r\n\r\n        if (this._leftController) {\r\n            this._leftController._setLaserPointerColor(color);\r\n\r\n        }\r\n        if (this._rightController) {\r\n            this._rightController._setLaserPointerColor(color);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the color of the ray from the vr headsets gaze.\r\n     * @param color new color for the ray.\r\n     */\r\n    public changeGazeColor(color: Color3) {\r\n        if (!this.updateGazeTrackerColor) {\r\n            return;\r\n        }\r\n        if (!(<StandardMaterial>this._cameraGazer._gazeTracker.material)) {\r\n            return;\r\n        }\r\n        (<StandardMaterial>this._cameraGazer._gazeTracker.material).emissiveColor = color;\r\n        if (this._leftController) {\r\n            (<StandardMaterial>this._leftController._gazeTracker.material).emissiveColor = color;\r\n        }\r\n        if (this._rightController) {\r\n            (<StandardMaterial>this._rightController._gazeTracker.material).emissiveColor = color;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits VR and disposes of the vr experience helper\r\n     */\r\n    public dispose() {\r\n        if (this.isInVRMode) {\r\n            this.exitVR();\r\n        }\r\n\r\n        if (this._postProcessMove) {\r\n            this._postProcessMove.dispose();\r\n        }\r\n\r\n        if (this._webVRCamera) {\r\n            this._webVRCamera.dispose();\r\n        }\r\n        if (this._vrDeviceOrientationCamera) {\r\n            this._vrDeviceOrientationCamera.dispose();\r\n        }\r\n        if (!this._useCustomVRButton && this._btnVR && this._btnVR.parentNode) {\r\n            document.body.removeChild(this._btnVR);\r\n        }\r\n\r\n        if (this._deviceOrientationCamera && (this._scene.activeCamera != this._deviceOrientationCamera)) {\r\n            this._deviceOrientationCamera.dispose();\r\n        }\r\n\r\n        if (this._cameraGazer) {\r\n            this._cameraGazer.dispose();\r\n        }\r\n        if (this._leftController) {\r\n            this._leftController.dispose();\r\n        }\r\n        if (this._rightController) {\r\n            this._rightController.dispose();\r\n        }\r\n\r\n        if (this._teleportationTarget) {\r\n            this._teleportationTarget.dispose();\r\n        }\r\n\r\n        if (this.xr) {\r\n            this.xr.dispose();\r\n        }\r\n\r\n        this._floorMeshesCollection = [];\r\n\r\n        document.removeEventListener(\"keydown\", this._onKeyDown);\r\n        window.removeEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\r\n\r\n        window.removeEventListener(\"resize\", this._onResize);\r\n        document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\r\n        document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\r\n        document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\r\n        document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\r\n        (<any>document).onmsfullscreenchange = null;\r\n\r\n        this._scene.getEngine().onVRDisplayChangedObservable.removeCallback(this._onVRDisplayChanged);\r\n        this._scene.getEngine().onVRRequestPresentStart.removeCallback(this._onVRRequestPresentStart);\r\n        this._scene.getEngine().onVRRequestPresentComplete.removeCallback(this._onVRRequestPresentComplete);\r\n        window.removeEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\r\n\r\n        this._scene.gamepadManager.onGamepadConnectedObservable.removeCallback(this._onNewGamepadConnected);\r\n        this._scene.gamepadManager.onGamepadDisconnectedObservable.removeCallback(this._onNewGamepadDisconnected);\r\n\r\n        this._scene.unregisterBeforeRender(this.beforeRender);\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the VRExperienceHelper class\r\n     * @returns \"VRExperienceHelper\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRExperienceHelper\";\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}