{"ast":null,"code":"import { Tools } from \"../../../Misc/tools\";\nimport { SceneComponentConstants } from \"../../../sceneComponent\";\n/**\r\n * Defines the Procedural Texture scene component responsible to manage any Procedural Texture\r\n * in a given scene.\r\n */\n\nvar ProceduralTextureSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function ProceduralTextureSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_PROCEDURALTEXTURE;\n    this.scene = scene;\n    this.scene.proceduralTextures = new Array();\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  ProceduralTextureSceneComponent.prototype.register = function () {\n    this.scene._beforeClearStage.registerStep(SceneComponentConstants.STEP_BEFORECLEAR_PROCEDURALTEXTURE, this, this._beforeClear);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  ProceduralTextureSceneComponent.prototype.rebuild = function () {// Nothing to do here.\n  };\n  /**\r\n   * Disposes the component and the associated ressources.\r\n   */\n\n\n  ProceduralTextureSceneComponent.prototype.dispose = function () {// Nothing to do here.\n  };\n\n  ProceduralTextureSceneComponent.prototype._beforeClear = function () {\n    if (this.scene.proceduralTexturesEnabled) {\n      Tools.StartPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\n\n      for (var proceduralIndex = 0; proceduralIndex < this.scene.proceduralTextures.length; proceduralIndex++) {\n        var proceduralTexture = this.scene.proceduralTextures[proceduralIndex];\n\n        if (proceduralTexture._shouldRender()) {\n          proceduralTexture.render();\n        }\n      }\n\n      Tools.EndPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\n    }\n  };\n\n  return ProceduralTextureSceneComponent;\n}();\n\nexport { ProceduralTextureSceneComponent };","map":{"version":3,"sources":["../../../../../sourceES6/core/Materials/Textures/Procedurals/proceduralTextureSceneComponent.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,QAAsB,qBAAtB;AAEA,SAAS,uBAAT,QAAyD,yBAAzD;AAaA;;;;;AAIA,IAAA,+BAAA;AAAA;AAAA,YAAA;AAWI;;;;AAIA,WAAA,+BAAA,CAAY,KAAZ,EAAwB;AAdxB;;;AAGgB,SAAA,IAAA,GAAO,uBAAuB,CAAC,sBAA/B;AAYZ,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,KAAL,CAAW,kBAAX,GAAgC,IAAI,KAAJ,EAAhC;AACH;AAED;;;;;AAGO,EAAA,+BAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACI,SAAK,KAAL,CAAW,iBAAX,CAA6B,YAA7B,CAA0C,uBAAuB,CAAC,kCAAlE,EAAsG,IAAtG,EAA4G,KAAK,YAAjH;AACH,GAFM;AAIP;;;;;;AAIO,EAAA,+BAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA,CACI;AACH,GAFM;AAIP;;;;;AAGO,EAAA,+BAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA,CACI;AACH,GAFM;;AAIC,EAAA,+BAAA,CAAA,SAAA,CAAA,YAAA,GAAR,YAAA;AACI,QAAI,KAAK,KAAL,CAAW,yBAAf,EAA0C;AACtC,MAAA,KAAK,CAAC,uBAAN,CAA8B,qBAA9B,EAAqD,KAAK,KAAL,CAAW,kBAAX,CAA8B,MAA9B,GAAuC,CAA5F;;AACA,WAAK,IAAI,eAAe,GAAG,CAA3B,EAA8B,eAAe,GAAG,KAAK,KAAL,CAAW,kBAAX,CAA8B,MAA9E,EAAsF,eAAe,EAArG,EAAyG;AACrG,YAAI,iBAAiB,GAAG,KAAK,KAAL,CAAW,kBAAX,CAA8B,eAA9B,CAAxB;;AACA,YAAI,iBAAiB,CAAC,aAAlB,EAAJ,EAAuC;AACnC,UAAA,iBAAiB,CAAC,MAAlB;AACH;AACJ;;AACD,MAAA,KAAK,CAAC,qBAAN,CAA4B,qBAA5B,EAAmD,KAAK,KAAL,CAAW,kBAAX,CAA8B,MAA9B,GAAuC,CAA1F;AACH;AACJ,GAXO;;AAYZ,SAAA,+BAAA;AAAC,CAtDD,EAAA","sourcesContent":["import { Tools } from \"../../../Misc/tools\";\r\nimport { Scene } from \"../../../scene\";\r\nimport { SceneComponentConstants, ISceneComponent } from \"../../../sceneComponent\";\r\n\r\nimport { ProceduralTexture } from \"./proceduralTexture\";\r\n\r\ndeclare module \"../../../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /**\r\n         * The list of procedural textures added to the scene\r\n         * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures\r\n         */\r\n        proceduralTextures: Array<ProceduralTexture>;\r\n    }\r\n}\r\n/**\r\n * Defines the Procedural Texture scene component responsible to manage any Procedural Texture\r\n * in a given scene.\r\n */\r\nexport class ProceduralTextureSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_PROCEDURALTEXTURE;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n        this.scene.proceduralTextures = new Array<ProceduralTexture>();\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeClearStage.registerStep(SceneComponentConstants.STEP_BEFORECLEAR_PROCEDURALTEXTURE, this, this._beforeClear);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do here.\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated ressources.\r\n     */\r\n    public dispose(): void {\r\n        // Nothing to do here.\r\n    }\r\n\r\n    private _beforeClear(): void {\r\n        if (this.scene.proceduralTexturesEnabled) {\r\n            Tools.StartPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\r\n            for (var proceduralIndex = 0; proceduralIndex < this.scene.proceduralTextures.length; proceduralIndex++) {\r\n                var proceduralTexture = this.scene.proceduralTextures[proceduralIndex];\r\n                if (proceduralTexture._shouldRender()) {\r\n                    proceduralTexture.render();\r\n                }\r\n            }\r\n            Tools.EndPerformanceCounter(\"Procedural textures\", this.scene.proceduralTextures.length > 0);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}