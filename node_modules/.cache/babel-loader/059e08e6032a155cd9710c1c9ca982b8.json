{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/grain.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, SerializationHelper } from '../Misc/decorators';\n/**\r\n * The GrainPostProcess adds noise to the image at mid luminance levels\r\n */\n\nvar GrainPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(GrainPostProcess, _super);\n  /**\r\n   * Creates a new instance of @see GrainPostProcess\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function GrainPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"grain\", [\"intensity\", \"animatedSeed\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n    /**\r\n     * The intensity of the grain added (default: 30)\r\n     */\n\n\n    _this.intensity = 30;\n    /**\r\n     * If the grain should be randomized on every frame\r\n     */\n\n    _this.animated = false;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setFloat('intensity', _this.intensity);\n      effect.setFloat('animatedSeed', _this.animated ? Math.random() + 1 : 1);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"GrainPostProcess\" string\r\n   */\n\n\n  GrainPostProcess.prototype.getClassName = function () {\n    return \"GrainPostProcess\";\n  };\n  /** @hidden */\n\n\n  GrainPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new GrainPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], GrainPostProcess.prototype, \"intensity\", void 0);\n\n  __decorate([serialize()], GrainPostProcess.prototype, \"animated\", void 0);\n\n  return GrainPostProcess;\n}(PostProcess);\n\nexport { GrainPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.GrainPostProcess\"] = GrainPostProcess;","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/grainPostProcess.ts"],"names":[],"mappings":";AAGA,SAAS,WAAT,QAAgD,eAAhD;AAIA,OAAO,2BAAP;AACA,SAAS,UAAT,QAA2B,mBAA3B;AACA,SAAS,SAAT,EAAoB,mBAApB,QAA+C,oBAA/C;AAIA;;;;AAGA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;AAoBlC;;;;;;;;;;;;;AAWA,WAAA,gBAAA,CAAY,IAAZ,EAA0B,OAA1B,EAAgE,MAAhE,EAA0F,YAA1F,EAAiH,MAAjH,EAAkI,QAAlI,EAAsJ,WAAtJ,EAA+K,gBAA/K,EAAuM;AAAjD,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,CAAA;AAAuB;;AAAE,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,KAAA;AAAwB;;AAAvM,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,OAAZ,EAAqB,CAAC,WAAD,EAAc,cAAd,CAArB,EAAoD,EAApD,EAAwD,OAAxD,EAAiE,MAAjE,EAAyE,YAAzE,EAAuF,MAAvF,EAA+F,QAA/F,EAAyG,IAAzG,EAA+G,WAA/G,EAA4H,SAA5H,EAAuI,IAAvI,EAA6I,gBAA7I,KAA8J,IADlK;AA9BA;;;;;AAIO,IAAA,KAAA,CAAA,SAAA,GAAoB,EAApB;AACP;;;;AAIO,IAAA,KAAA,CAAA,QAAA,GAAoB,KAApB;;AAuBH,IAAA,KAAI,CAAC,iBAAL,CAAuB,GAAvB,CAA2B,UAAC,MAAD,EAAe;AACtC,MAAA,MAAM,CAAC,QAAP,CAAgB,WAAhB,EAA6B,KAAI,CAAC,SAAlC;AACA,MAAA,MAAM,CAAC,QAAP,CAAgB,cAAhB,EAAgC,KAAI,CAAC,QAAL,GAAgB,IAAI,CAAC,MAAL,KAAgB,CAAhC,GAAoC,CAApE;AACH,KAHD;;;AAIH;AAzBD;;;;;;AAIO,EAAA,gBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,kBAAP;AACH,GAFM;AAuBP;;;AACc,EAAA,gBAAA,CAAA,MAAA,GAAd,UAAqB,iBAArB,EAA6C,YAA7C,EAAmE,KAAnE,EAAiF,OAAjF,EAAgG;AAC5F,WAAO,mBAAmB,CAAC,KAApB,CAA0B,YAAA;AAC7B,aAAO,IAAI,gBAAJ,CACH,iBAAiB,CAAC,IADf,EAEH,iBAAiB,CAAC,OAFf,EAEwB,YAFxB,EAGH,iBAAiB,CAAC,wBAHf,EAIH,KAAK,CAAC,SAAN,EAJG,EAIgB,iBAAiB,CAAC,QAJlC,CAAP;AAKH,KANM,EAMJ,iBANI,EAMe,KANf,EAMsB,OANtB,CAAP;AAOH,GARa;;AAnCd,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,0BAAA,E,WAAA,E,KAA8B,CAA9B,CAAA;;AAKA,EAAA,UAAA,CAAA,CADC,SAAS,EACV,CAAA,E,0BAAA,E,UAAA,E,KAAiC,CAAjC,CAAA;;AAuCJ,SAAA,gBAAA;AAAC,CAjDD,CAAsC,WAAtC,CAAA;;SAAa,gB;AAmDb,UAAU,CAAC,eAAX,CAA2B,0BAA3B,IAAyD,gBAAzD","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\n\r\nimport \"../Shaders/grain.fragment\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { serialize, SerializationHelper } from '../Misc/decorators';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The GrainPostProcess adds noise to the image at mid luminance levels\r\n */\r\nexport class GrainPostProcess extends PostProcess {\r\n    /**\r\n     * The intensity of the grain added (default: 30)\r\n     */\r\n    @serialize()\r\n    public intensity: number = 30;\r\n    /**\r\n     * If the grain should be randomized on every frame\r\n     */\r\n    @serialize()\r\n    public animated: boolean = false;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"GrainPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"GrainPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of @see GrainPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0, blockCompilation = false) {\r\n        super(name, \"grain\", [\"intensity\", \"animatedSeed\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat('intensity', this.intensity);\r\n            effect.setFloat('animatedSeed', this.animated ? Math.random() + 1 : 1);\r\n        });\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(() => {\r\n            return new GrainPostProcess(\r\n                parsedPostProcess.name,\r\n                parsedPostProcess.options, targetCamera,\r\n                parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.reusable);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.GrainPostProcess\"] = GrainPostProcess;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}