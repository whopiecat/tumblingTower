{"ast":null,"code":"import { Matrix } from \"../Maths/math.vector\";\n/**\r\n * Configuration needed for prepass-capable materials\r\n */\n\nvar PrePassConfiguration =\n/** @class */\nfunction () {\n  function PrePassConfiguration() {\n    /**\r\n     * Previous world matrices of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\n    this.previousWorldMatrices = {};\n    /**\r\n     * Previous bones of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\n\n    this.previousBones = {};\n  }\n  /**\r\n   * Add the required uniforms to the current list.\r\n   * @param uniforms defines the current uniform list.\r\n   */\n\n\n  PrePassConfiguration.AddUniforms = function (uniforms) {\n    uniforms.push(\"previousWorld\", \"previousViewProjection\");\n  };\n  /**\r\n   * Add the required samplers to the current list.\r\n   * @param samplers defines the current sampler list.\r\n   */\n\n\n  PrePassConfiguration.AddSamplers = function (samplers) {// pass\n  };\n  /**\r\n   * Binds the material data.\r\n   * @param effect defines the effect to update\r\n   * @param scene defines the scene the material belongs to.\r\n   * @param mesh The mesh\r\n   * @param world World matrix of this mesh\r\n   * @param isFrozen Is the material frozen\r\n   */\n\n\n  PrePassConfiguration.prototype.bindForSubMesh = function (effect, scene, mesh, world, isFrozen) {\n    if (scene.prePassRenderer && scene.prePassRenderer.enabled) {\n      if (scene.prePassRenderer.getIndex(2) !== -1) {\n        if (!this.previousWorldMatrices[mesh.uniqueId]) {\n          this.previousWorldMatrices[mesh.uniqueId] = Matrix.Identity();\n        }\n\n        if (!this.previousViewProjection) {\n          this.previousViewProjection = scene.getTransformMatrix();\n        }\n\n        effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\n        effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\n        this.previousWorldMatrices[mesh.uniqueId] = world.clone();\n        this.previousViewProjection = scene.getTransformMatrix().clone();\n      }\n    }\n  };\n\n  return PrePassConfiguration;\n}();\n\nexport { PrePassConfiguration };","map":{"version":3,"sources":["../../../sourceES6/core/Materials/prePassConfiguration.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,sBAAvB;AAMA;;;;AAGA,IAAA,oBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,oBAAA,GAAA;AACI;;;;AAIO,SAAA,qBAAA,GAAqD,EAArD;AAMP;;;;;AAIO,SAAA,aAAA,GAAmD,EAAnD;AA6CV;AA3CG;;;;;;AAIc,EAAA,oBAAA,CAAA,WAAA,GAAd,UAA0B,QAA1B,EAA4C;AACxC,IAAA,QAAQ,CAAC,IAAT,CAAc,eAAd,EAA+B,wBAA/B;AACH,GAFa;AAId;;;;;;AAIc,EAAA,oBAAA,CAAA,WAAA,GAAd,UAA0B,QAA1B,EAA4C,CACxC;AACH,GAFa;AAId;;;;;;;;;;AAQO,EAAA,oBAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,MAAtB,EAAsC,KAAtC,EAAoD,IAApD,EAAgE,KAAhE,EAA+E,QAA/E,EAAgG;AAC5F,QAAI,KAAK,CAAC,eAAN,IAAyB,KAAK,CAAC,eAAN,CAAsB,OAAnD,EAA4D;AACxD,UAAI,KAAK,CAAC,eAAN,CAAsB,QAAtB,CAA+B,CAA/B,MAAsC,CAAC,CAA3C,EAA8C;AAC1C,YAAI,CAAC,KAAK,qBAAL,CAA2B,IAAI,CAAC,QAAhC,CAAL,EAAgD;AAC5C,eAAK,qBAAL,CAA2B,IAAI,CAAC,QAAhC,IAA4C,MAAM,CAAC,QAAP,EAA5C;AACH;;AAED,YAAI,CAAC,KAAK,sBAAV,EAAkC;AAC9B,eAAK,sBAAL,GAA8B,KAAK,CAAC,kBAAN,EAA9B;AACH;;AAED,QAAA,MAAM,CAAC,SAAP,CAAiB,eAAjB,EAAkC,KAAK,qBAAL,CAA2B,IAAI,CAAC,QAAhC,CAAlC;AACA,QAAA,MAAM,CAAC,SAAP,CAAiB,wBAAjB,EAA2C,KAAK,sBAAhD;AAEA,aAAK,qBAAL,CAA2B,IAAI,CAAC,QAAhC,IAA4C,KAAK,CAAC,KAAN,EAA5C;AACA,aAAK,sBAAL,GAA8B,KAAK,CAAC,kBAAN,GAA2B,KAA3B,EAA9B;AACH;AACJ;AACJ,GAlBM;;AAmBX,SAAA,oBAAA;AAAC,CA5DD,EAAA","sourcesContent":["import { Matrix } from \"../Maths/math.vector\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Scene } from \"../scene\";\r\nimport { Effect } from \"../Materials/effect\";\r\n\r\n\r\n/**\r\n * Configuration needed for prepass-capable materials\r\n */\r\nexport class PrePassConfiguration {\r\n    /**\r\n     * Previous world matrices of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\r\n    public previousWorldMatrices: { [index: number]: Matrix } = {};\r\n    /**\r\n     * Previous view project matrix\r\n     * Used for computing velocity\r\n     */\r\n    public previousViewProjection: Matrix;\r\n    /**\r\n     * Previous bones of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\r\n    public previousBones: { [index: number]: Float32Array } = {};\r\n\r\n    /**\r\n     * Add the required uniforms to the current list.\r\n     * @param uniforms defines the current uniform list.\r\n     */\r\n    public static AddUniforms(uniforms: string[]): void {\r\n        uniforms.push(\"previousWorld\", \"previousViewProjection\");\r\n    }\r\n\r\n    /**\r\n     * Add the required samplers to the current list.\r\n     * @param samplers defines the current sampler list.\r\n     */\r\n    public static AddSamplers(samplers: string[]): void {\r\n        // pass\r\n    }\r\n\r\n    /**\r\n     * Binds the material data.\r\n     * @param effect defines the effect to update\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param mesh The mesh\r\n     * @param world World matrix of this mesh\r\n     * @param isFrozen Is the material frozen\r\n     */\r\n    public bindForSubMesh(effect: Effect, scene: Scene, mesh: Mesh, world: Matrix, isFrozen: boolean): void {\r\n        if (scene.prePassRenderer && scene.prePassRenderer.enabled) {\r\n            if (scene.prePassRenderer.getIndex(2) !== -1) {\r\n                if (!this.previousWorldMatrices[mesh.uniqueId]) {\r\n                    this.previousWorldMatrices[mesh.uniqueId] = Matrix.Identity();\r\n                }\r\n\r\n                if (!this.previousViewProjection) {\r\n                    this.previousViewProjection = scene.getTransformMatrix();\r\n                }\r\n\r\n                effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\r\n                effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\r\n\r\n                this.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n                this.previousViewProjection = scene.getTransformMatrix().clone();\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}