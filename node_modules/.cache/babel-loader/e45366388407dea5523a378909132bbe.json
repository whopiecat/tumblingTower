{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/vrMultiviewToSingleview.fragment\";\nimport \"../Engines/Extensions/engine.multiview\";\n/**\r\n * VRMultiviewToSingleview used to convert multiview texture arrays to standard textures for scenarios such as webVR\r\n * This will not be used for webXR as it supports displaying texture arrays directly\r\n */\n\nvar VRMultiviewToSingleviewPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(VRMultiviewToSingleviewPostProcess, _super);\n  /**\r\n   * Initializes a VRMultiviewToSingleview\r\n   * @param name name of the post process\r\n   * @param camera camera to be applied to\r\n   * @param scaleFactor scaling factor to the size of the output texture\r\n   */\n\n\n  function VRMultiviewToSingleviewPostProcess(name, camera, scaleFactor) {\n    var _this = _super.call(this, name, \"vrMultiviewToSingleview\", [\"imageIndex\"], [\"multiviewSampler\"], scaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE) || this;\n\n    _this.onSizeChangedObservable.add(function () {});\n\n    _this.onApplyObservable.add(function (effect) {\n      if (camera._scene.activeCamera && camera._scene.activeCamera.isLeftCamera) {\n        effect.setInt(\"imageIndex\", 0);\n      } else {\n        effect.setInt(\"imageIndex\", 1);\n      }\n\n      effect.setTexture(\"multiviewSampler\", camera._multiviewTexture);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"VRMultiviewToSingleviewPostProcess\" string\r\n   */\n\n\n  VRMultiviewToSingleviewPostProcess.prototype.getClassName = function () {\n    return \"VRMultiviewToSingleviewPostProcess\";\n  };\n\n  return VRMultiviewToSingleviewPostProcess;\n}(PostProcess);\n\nexport { VRMultiviewToSingleviewPostProcess };","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/vrMultiviewToSingleviewPostProcess.ts"],"names":[],"mappings":";AAEA,SAAS,OAAT,QAAwB,+BAAxB;AACA,SAAS,WAAT,QAA4B,eAA5B;AAEA,OAAO,6CAAP;AACA,OAAO,wCAAP;AAEA;;;;;AAIA,IAAA,kCAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwD,EAAA,SAAA,CAAA,kCAAA,EAAA,MAAA,CAAA;AASpD;;;;;;;;AAMA,WAAA,kCAAA,CAAY,IAAZ,EAA0B,MAA1B,EAA0C,WAA1C,EAA6D;AAA7D,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,yBAAZ,EAAuC,CAAC,YAAD,CAAvC,EAAuD,CAAC,kBAAD,CAAvD,EAA6E,WAA7E,EAA0F,MAA1F,EAAkG,OAAO,CAAC,qBAA1G,KAAgI,IADpI;;AAGI,IAAA,KAAI,CAAC,uBAAL,CAA6B,GAA7B,CAAiC,YAAA,CAChC,CADD;;AAEA,IAAA,KAAI,CAAC,iBAAL,CAAuB,GAAvB,CAA2B,UAAC,MAAD,EAAe;AACtC,UAAI,MAAM,CAAC,MAAP,CAAc,YAAd,IAA8B,MAAM,CAAC,MAAP,CAAc,YAAd,CAA2B,YAA7D,EAA2E;AACvE,QAAA,MAAM,CAAC,MAAP,CAAc,YAAd,EAA4B,CAA5B;AACH,OAFD,MAEM;AACF,QAAA,MAAM,CAAC,MAAP,CAAc,YAAd,EAA4B,CAA5B;AACH;;AACD,MAAA,MAAM,CAAC,UAAP,CAAkB,kBAAlB,EAAsC,MAAM,CAAC,iBAA7C;AACH,KAPD;;;AAQH;AA3BD;;;;;;AAIO,EAAA,kCAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,oCAAP;AACH,GAFM;;AAwBX,SAAA,kCAAA;AAAC,CA7BD,CAAwD,WAAxD,CAAA","sourcesContent":["import { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { PostProcess } from \"./postProcess\";\r\n\r\nimport \"../Shaders/vrMultiviewToSingleview.fragment\";\r\nimport \"../Engines/Extensions/engine.multiview\";\r\n\r\n/**\r\n * VRMultiviewToSingleview used to convert multiview texture arrays to standard textures for scenarios such as webVR\r\n * This will not be used for webXR as it supports displaying texture arrays directly\r\n */\r\nexport class VRMultiviewToSingleviewPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"VRMultiviewToSingleviewPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRMultiviewToSingleviewPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Initializes a VRMultiviewToSingleview\r\n     * @param name name of the post process\r\n     * @param camera camera to be applied to\r\n     * @param scaleFactor scaling factor to the size of the output texture\r\n     */\r\n    constructor(name: string, camera: Camera, scaleFactor: number) {\r\n        super(name, \"vrMultiviewToSingleview\", [\"imageIndex\"], [\"multiviewSampler\"], scaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE);\r\n\r\n        this.onSizeChangedObservable.add(() => {\r\n        });\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (camera._scene.activeCamera && camera._scene.activeCamera.isLeftCamera) {\r\n                effect.setInt(\"imageIndex\", 0);\r\n            }else {\r\n                effect.setInt(\"imageIndex\", 1);\r\n            }\r\n            effect.setTexture(\"multiviewSampler\", camera._multiviewTexture);\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}