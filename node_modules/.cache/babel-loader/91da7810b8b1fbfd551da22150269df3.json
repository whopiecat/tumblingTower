{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable\";\nimport { Vector3, Matrix } from \"../Maths/math.vector\";\nimport { Mesh } from \"../Meshes/mesh\";\nimport { BoxBuilder } from \"../Meshes/Builders/boxBuilder\";\nimport { CylinderBuilder } from \"../Meshes/Builders/cylinderBuilder\";\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\nimport { Gizmo } from \"./gizmo\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\nimport { Color3 } from '../Maths/math.color';\n/**\r\n * Single axis scale gizmo\r\n */\n\nvar AxisScaleGizmo =\n/** @class */\nfunction (_super) {\n  __extends(AxisScaleGizmo, _super);\n  /**\r\n   * Creates an AxisScaleGizmo\r\n   * @param gizmoLayer The utility layer the gizmo will be added to\r\n   * @param dragAxis The axis which the gizmo will be able to scale on\r\n   * @param color The color of the gizmo\r\n   * @param thickness display gizmo axis thickness\r\n   */\n\n\n  function AxisScaleGizmo(dragAxis, color, gizmoLayer, parent, thickness) {\n    if (color === void 0) {\n      color = Color3.Gray();\n    }\n\n    if (gizmoLayer === void 0) {\n      gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer;\n    }\n\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    if (thickness === void 0) {\n      thickness = 1;\n    }\n\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    var _this = _super.call(this, gizmoLayer) || this;\n\n    _this._pointerObserver = null;\n    /**\r\n     * Scale distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\n\n    _this.snapDistance = 0;\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\n\n    _this.onSnapObservable = new Observable();\n    /**\r\n     * If the scaling operation should be done on all axis (default: false)\r\n     */\n\n    _this.uniformScaling = false;\n    /**\r\n     * Custom sensitivity value for the drag strength\r\n     */\n\n    _this.sensitivity = 1;\n    _this._isEnabled = true;\n    _this._parent = null;\n    _this._dragging = false;\n    _this._tmpVector = new Vector3();\n    _this._tmpMatrix = new Matrix();\n    _this._tmpMatrix2 = new Matrix();\n    _this._parent = parent; // Create Material\n\n    _this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    _this._coloredMaterial.diffuseColor = color;\n    _this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\n    _this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    _this._hoverMaterial.diffuseColor = Color3.Yellow();\n    _this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    _this._disableMaterial.diffuseColor = Color3.Gray();\n    _this._disableMaterial.alpha = 0.4; // Build mesh + Collider\n\n    _this._gizmoMesh = new Mesh(\"axis\", gizmoLayer.utilityLayerScene);\n\n    var _h = _this._createGizmoMesh(_this._gizmoMesh, thickness),\n        arrowMesh = _h.arrowMesh,\n        arrowTail = _h.arrowTail;\n\n    var collider = _this._createGizmoMesh(_this._gizmoMesh, thickness + 4, true);\n\n    _this._gizmoMesh.lookAt(_this._rootMesh.position.add(dragAxis));\n\n    _this._rootMesh.addChild(_this._gizmoMesh);\n\n    _this._gizmoMesh.scaling.scaleInPlace(1 / 3); // Closure of inital prop values for resetting\n\n\n    var nodePosition = arrowMesh.position.clone();\n    var linePosition = arrowTail.position.clone();\n    var lineScale = arrowTail.scaling.clone();\n\n    var increaseGizmoMesh = function (dragDistance) {\n      var dragStrength = dragDistance * (3 / _this._rootMesh.scaling.length()) * 6;\n      arrowMesh.position.z += dragStrength / 3.5;\n      arrowTail.scaling.y += dragStrength;\n      arrowTail.position.z = arrowMesh.position.z / 2;\n    };\n\n    var resetGizmoMesh = function () {\n      arrowMesh.position.set(nodePosition.x, nodePosition.y, nodePosition.z);\n      arrowTail.position.set(linePosition.x, linePosition.y, linePosition.z);\n      arrowTail.scaling.set(lineScale.x, lineScale.y, lineScale.z);\n      _this._dragging = false;\n    }; // Add drag behavior to handle events when the gizmo is dragged\n\n\n    _this.dragBehavior = new PointerDragBehavior({\n      dragAxis: dragAxis\n    });\n    _this.dragBehavior.moveAttached = false;\n\n    _this._rootMesh.addBehavior(_this.dragBehavior);\n\n    var currentSnapDragDistance = 0;\n    var tmpVector = new Vector3();\n    var tmpSnapEvent = {\n      snapDistance: 0\n    };\n\n    _this.dragBehavior.onDragObservable.add(function (event) {\n      if (_this.attachedNode) {\n        // Drag strength is modified by the scale of the gizmo (eg. for small objects like boombox the strength will be increased to match the behavior of larger objects)\n        var dragStrength = _this.sensitivity * event.dragDistance * (_this.scaleRatio * 3 / _this._rootMesh.scaling.length()); // Snapping logic\n\n\n        var snapped = false;\n        var dragSteps = 0;\n\n        if (_this.uniformScaling) {\n          _this.attachedNode.getWorldMatrix().decompose(tmpVector);\n\n          tmpVector.normalize();\n\n          if (tmpVector.y < 0) {\n            tmpVector.scaleInPlace(-1);\n          }\n        } else {\n          tmpVector.copyFrom(dragAxis);\n        }\n\n        if (_this.snapDistance == 0) {\n          tmpVector.scaleToRef(dragStrength, tmpVector);\n        } else {\n          currentSnapDragDistance += dragStrength;\n\n          if (Math.abs(currentSnapDragDistance) > _this.snapDistance) {\n            dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / _this.snapDistance);\n\n            if (currentSnapDragDistance < 0) {\n              dragSteps *= -1;\n            }\n\n            currentSnapDragDistance = currentSnapDragDistance % _this.snapDistance;\n            tmpVector.scaleToRef(_this.snapDistance * dragSteps, tmpVector);\n            snapped = true;\n          } else {\n            tmpVector.scaleInPlace(0);\n          }\n        }\n\n        Matrix.ScalingToRef(1 + tmpVector.x, 1 + tmpVector.y, 1 + tmpVector.z, _this._tmpMatrix2);\n\n        _this._tmpMatrix2.multiplyToRef(_this.attachedNode.getWorldMatrix(), _this._tmpMatrix);\n\n        _this._tmpMatrix.decompose(_this._tmpVector);\n\n        var maxScale = 100000;\n\n        if (Math.abs(_this._tmpVector.x) < maxScale && Math.abs(_this._tmpVector.y) < maxScale && Math.abs(_this._tmpVector.z) < maxScale) {\n          _this.attachedNode.getWorldMatrix().copyFrom(_this._tmpMatrix);\n        }\n\n        if (snapped) {\n          tmpSnapEvent.snapDistance = _this.snapDistance * dragSteps;\n\n          _this.onSnapObservable.notifyObservers(tmpSnapEvent);\n        }\n\n        _this._matrixChanged();\n      }\n    }); // On Drag Listener: to move gizmo mesh with user action\n\n\n    _this.dragBehavior.onDragStartObservable.add(function () {\n      _this._dragging = true;\n    });\n\n    _this.dragBehavior.onDragObservable.add(function (e) {\n      return increaseGizmoMesh(e.dragDistance);\n    });\n\n    _this.dragBehavior.onDragEndObservable.add(resetGizmoMesh); // Listeners for Universal Scalar\n\n\n    (_c = (_b = (_a = parent === null || parent === void 0 ? void 0 : parent.uniformScaleGizmo) === null || _a === void 0 ? void 0 : _a.dragBehavior) === null || _b === void 0 ? void 0 : _b.onDragObservable) === null || _c === void 0 ? void 0 : _c.add(function (e) {\n      return increaseGizmoMesh(e.delta.y);\n    });\n    (_f = (_e = (_d = parent === null || parent === void 0 ? void 0 : parent.uniformScaleGizmo) === null || _d === void 0 ? void 0 : _d.dragBehavior) === null || _e === void 0 ? void 0 : _e.onDragEndObservable) === null || _f === void 0 ? void 0 : _f.add(resetGizmoMesh);\n    var cache = {\n      gizmoMeshes: [arrowMesh, arrowTail],\n      colliderMeshes: [collider.arrowMesh, collider.arrowTail],\n      material: _this._coloredMaterial,\n      hoverMaterial: _this._hoverMaterial,\n      disableMaterial: _this._disableMaterial,\n      active: false\n    };\n    (_g = _this._parent) === null || _g === void 0 ? void 0 : _g.addToAxisCache(_this._gizmoMesh, cache);\n    _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n      var _a;\n\n      if (_this._customMeshSet) {\n        return;\n      }\n\n      _this._isHovered = !!(cache.colliderMeshes.indexOf((_a = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) != -1);\n\n      if (!_this._parent) {\n        var material = _this._isHovered || _this._dragging ? _this._hoverMaterial : _this._coloredMaterial;\n        cache.gizmoMeshes.forEach(function (m) {\n          m.material = material;\n\n          if (m.color) {\n            m.color = material.diffuseColor;\n          }\n        });\n      }\n    });\n\n    var light = gizmoLayer._getSharedGizmoLight();\n\n    light.includedOnlyMeshes = light.includedOnlyMeshes.concat(_this._rootMesh.getChildMeshes());\n    return _this;\n  }\n  /** Create Geometry for Gizmo */\n\n\n  AxisScaleGizmo.prototype._createGizmoMesh = function (parentMesh, thickness, isCollider) {\n    if (isCollider === void 0) {\n      isCollider = false;\n    }\n\n    var arrowMesh = BoxBuilder.CreateBox(\"yPosMesh\", {\n      size: 0.4 * (1 + (thickness - 1) / 4)\n    }, this.gizmoLayer.utilityLayerScene);\n    var arrowTail = CylinderBuilder.CreateCylinder(\"cylinder\", {\n      diameterTop: 0.005 * thickness,\n      height: 0.275,\n      diameterBottom: 0.005 * thickness,\n      tessellation: 96\n    }, this.gizmoLayer.utilityLayerScene); // Position arrow pointing in its drag axis\n\n    arrowMesh.scaling.scaleInPlace(0.1);\n    arrowMesh.material = this._coloredMaterial;\n    arrowMesh.rotation.x = Math.PI / 2;\n    arrowMesh.position.z += 0.3;\n    arrowTail.material = this._coloredMaterial;\n    arrowTail.position.z += 0.275 / 2;\n    arrowTail.rotation.x = Math.PI / 2;\n\n    if (isCollider) {\n      arrowMesh.visibility = 0;\n      arrowTail.visibility = 0;\n    }\n\n    parentMesh.addChild(arrowMesh);\n    parentMesh.addChild(arrowTail);\n    return {\n      arrowMesh: arrowMesh,\n      arrowTail: arrowTail\n    };\n  };\n\n  AxisScaleGizmo.prototype._attachedNodeChanged = function (value) {\n    if (this.dragBehavior) {\n      this.dragBehavior.enabled = value ? true : false;\n    }\n  };\n\n  Object.defineProperty(AxisScaleGizmo.prototype, \"isEnabled\", {\n    get: function () {\n      return this._isEnabled;\n    },\n\n    /**\r\n     * If the gizmo is enabled\r\n     */\n    set: function (value) {\n      this._isEnabled = value;\n\n      if (!value) {\n        this.attachedMesh = null;\n        this.attachedNode = null;\n      } else {\n        if (this._parent) {\n          this.attachedMesh = this._parent.attachedMesh;\n          this.attachedNode = this._parent.attachedNode;\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Disposes of the gizmo\r\n   */\n\n  AxisScaleGizmo.prototype.dispose = function () {\n    this.onSnapObservable.clear();\n    this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n    this.dragBehavior.detach();\n\n    if (this._gizmoMesh) {\n      this._gizmoMesh.dispose();\n    }\n\n    [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(function (matl) {\n      if (matl) {\n        matl.dispose();\n      }\n    });\n\n    _super.prototype.dispose.call(this);\n  };\n  /**\r\n   * Disposes and replaces the current meshes in the gizmo with the specified mesh\r\n   * @param mesh The mesh to replace the default mesh of the gizmo\r\n   * @param useGizmoMaterial If the gizmo's default material should be used (default: false)\r\n   */\n\n\n  AxisScaleGizmo.prototype.setCustomMesh = function (mesh, useGizmoMaterial) {\n    var _this = this;\n\n    if (useGizmoMaterial === void 0) {\n      useGizmoMaterial = false;\n    }\n\n    _super.prototype.setCustomMesh.call(this, mesh);\n\n    if (useGizmoMaterial) {\n      this._rootMesh.getChildMeshes().forEach(function (m) {\n        m.material = _this._coloredMaterial;\n\n        if (m.color) {\n          m.color = _this._coloredMaterial.diffuseColor;\n        }\n      });\n\n      this._customMeshSet = false;\n    }\n  };\n\n  return AxisScaleGizmo;\n}(Gizmo);\n\nexport { AxisScaleGizmo };","map":{"version":3,"sources":["../../../sourceES6/core/Gizmos/axisScaleGizmo.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observer, Observable } from \"../Misc/observable\";\r\nimport { Nullable } from \"../types\";\r\nimport { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { Vector3, Matrix } from \"../Maths/math.vector\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Node } from \"../node\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { LinesMesh } from \"../Meshes/linesMesh\";\r\nimport { BoxBuilder } from \"../Meshes/Builders/boxBuilder\";\r\nimport { CylinderBuilder } from \"../Meshes/Builders/cylinderBuilder\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\r\nimport { Gizmo, GizmoAxisCache } from \"./gizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { ScaleGizmo } from \"./scaleGizmo\";\r\nimport { Color3 } from '../Maths/math.color';\r\n\r\n/**\r\n * Single axis scale gizmo\r\n */\r\nexport class AxisScaleGizmo extends Gizmo {\r\n    /**\r\n     * Drag behavior responsible for the gizmos dragging interactions\r\n     */\r\n    public dragBehavior: PointerDragBehavior;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>> = null;\r\n    /**\r\n     * Scale distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public snapDistance = 0;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\r\n    public onSnapObservable = new Observable<{ snapDistance: number }>();\r\n    /**\r\n     * If the scaling operation should be done on all axis (default: false)\r\n     */\r\n    public uniformScaling = false;\r\n    /**\r\n     * Custom sensitivity value for the drag strength\r\n     */\r\n    public sensitivity = 1;\r\n\r\n    private _isEnabled: boolean = true;\r\n    private _parent: Nullable<ScaleGizmo> = null;\r\n\r\n    private _gizmoMesh: Mesh;\r\n    private _coloredMaterial: StandardMaterial;\r\n    private _hoverMaterial: StandardMaterial;\r\n    private _disableMaterial: StandardMaterial;\r\n    private _dragging: boolean = false;\r\n    private _tmpVector = new Vector3();\r\n    private _tmpMatrix = new Matrix();\r\n    private _tmpMatrix2 = new Matrix();\r\n\r\n    /**\r\n     * Creates an AxisScaleGizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param dragAxis The axis which the gizmo will be able to scale on\r\n     * @param color The color of the gizmo\r\n     * @param thickness display gizmo axis thickness\r\n     */\r\n    constructor(dragAxis: Vector3, color: Color3 = Color3.Gray(), gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer, parent: Nullable<ScaleGizmo> = null, thickness: number = 1) {\r\n        super(gizmoLayer);\r\n        this._parent = parent;\r\n        // Create Material\r\n        this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._coloredMaterial.diffuseColor = color;\r\n        this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\r\n\r\n        this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._hoverMaterial.diffuseColor = Color3.Yellow();\r\n\r\n        this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._disableMaterial.diffuseColor = Color3.Gray();\r\n        this._disableMaterial.alpha = 0.4;\r\n\r\n        // Build mesh + Collider\r\n        this._gizmoMesh = new Mesh(\"axis\", gizmoLayer.utilityLayerScene);\r\n        const { arrowMesh, arrowTail } = this._createGizmoMesh(this._gizmoMesh, thickness);\r\n        const collider = this._createGizmoMesh(this._gizmoMesh, thickness + 4, true);\r\n\r\n        this._gizmoMesh.lookAt(this._rootMesh.position.add(dragAxis));\r\n        this._rootMesh.addChild(this._gizmoMesh);\r\n        this._gizmoMesh.scaling.scaleInPlace(1 / 3);\r\n\r\n        // Closure of inital prop values for resetting\r\n        const nodePosition = arrowMesh.position.clone();\r\n        const linePosition = arrowTail.position.clone();\r\n        const lineScale = arrowTail.scaling.clone();\r\n\r\n        const increaseGizmoMesh = (dragDistance: number) => {\r\n            const dragStrength = (dragDistance * (3 / this._rootMesh.scaling.length())) * 6;\r\n\r\n            arrowMesh.position.z += dragStrength / 3.5;\r\n            arrowTail.scaling.y += dragStrength;\r\n            arrowTail.position.z = arrowMesh.position.z / 2;\r\n        };\r\n\r\n        const resetGizmoMesh = () => {\r\n            arrowMesh.position.set(nodePosition.x, nodePosition.y, nodePosition.z);\r\n            arrowTail.position.set(linePosition.x, linePosition.y, linePosition.z);\r\n            arrowTail.scaling.set(lineScale.x, lineScale.y, lineScale.z);\r\n            this._dragging = false;\r\n        };\r\n\r\n        // Add drag behavior to handle events when the gizmo is dragged\r\n        this.dragBehavior = new PointerDragBehavior({ dragAxis: dragAxis });\r\n        this.dragBehavior.moveAttached = false;\r\n        this._rootMesh.addBehavior(this.dragBehavior);\r\n\r\n        var currentSnapDragDistance = 0;\r\n        var tmpVector = new Vector3();\r\n        var tmpSnapEvent = { snapDistance: 0 };\r\n        this.dragBehavior.onDragObservable.add((event) => {\r\n            if (this.attachedNode) {\r\n                // Drag strength is modified by the scale of the gizmo (eg. for small objects like boombox the strength will be increased to match the behavior of larger objects)\r\n                var dragStrength = this.sensitivity * event.dragDistance * ((this.scaleRatio * 3) / this._rootMesh.scaling.length());\r\n\r\n                // Snapping logic\r\n                var snapped = false;\r\n                var dragSteps = 0;\r\n                if (this.uniformScaling) {\r\n                    this.attachedNode.getWorldMatrix().decompose(tmpVector);\r\n                    tmpVector.normalize();\r\n                    if (tmpVector.y < 0) {\r\n                        tmpVector.scaleInPlace(-1);\r\n                    }\r\n                } else {\r\n                    tmpVector.copyFrom(dragAxis);\r\n                }\r\n                if (this.snapDistance == 0) {\r\n                    tmpVector.scaleToRef(dragStrength, tmpVector);\r\n                } else {\r\n                    currentSnapDragDistance += dragStrength;\r\n                    if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\r\n                        dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\r\n                        if (currentSnapDragDistance < 0) {\r\n                            dragSteps *= -1;\r\n                        }\r\n                        currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\r\n                        tmpVector.scaleToRef(this.snapDistance * dragSteps, tmpVector);\r\n                        snapped = true;\r\n                    } else {\r\n                        tmpVector.scaleInPlace(0);\r\n                    }\r\n                }\r\n\r\n                Matrix.ScalingToRef(1 + tmpVector.x, 1 + tmpVector.y, 1 + tmpVector.z, this._tmpMatrix2);\r\n\r\n                this._tmpMatrix2.multiplyToRef(this.attachedNode.getWorldMatrix(), this._tmpMatrix);\r\n                this._tmpMatrix.decompose(this._tmpVector);\r\n\r\n                let maxScale = 100000;\r\n                if (Math.abs(this._tmpVector.x) < maxScale && Math.abs(this._tmpVector.y) < maxScale && Math.abs(this._tmpVector.z) < maxScale) {\r\n                    this.attachedNode.getWorldMatrix().copyFrom(this._tmpMatrix);\r\n                }\r\n\r\n                if (snapped) {\r\n                    tmpSnapEvent.snapDistance = this.snapDistance * dragSteps;\r\n                    this.onSnapObservable.notifyObservers(tmpSnapEvent);\r\n                }\r\n                this._matrixChanged();\r\n            }\r\n        });\r\n        // On Drag Listener: to move gizmo mesh with user action\r\n        this.dragBehavior.onDragStartObservable.add(() => { this._dragging = true; });\r\n        this.dragBehavior.onDragObservable.add((e) => increaseGizmoMesh(e.dragDistance));\r\n        this.dragBehavior.onDragEndObservable.add(resetGizmoMesh);\r\n\r\n        // Listeners for Universal Scalar\r\n        parent?.uniformScaleGizmo?.dragBehavior?.onDragObservable?.add((e) => increaseGizmoMesh(e.delta.y));\r\n        parent?.uniformScaleGizmo?.dragBehavior?.onDragEndObservable?.add(resetGizmoMesh);\r\n\r\n        const cache: GizmoAxisCache = {\r\n            gizmoMeshes: [arrowMesh, arrowTail],\r\n            colliderMeshes: [collider.arrowMesh, collider.arrowTail],\r\n            material: this._coloredMaterial,\r\n            hoverMaterial: this._hoverMaterial,\r\n            disableMaterial: this._disableMaterial,\r\n            active: false\r\n        };\r\n        this._parent?.addToAxisCache(this._gizmoMesh, cache);\r\n\r\n        this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (this._customMeshSet) {\r\n                return;\r\n            }\r\n            this._isHovered = !!(cache.colliderMeshes.indexOf(<Mesh>pointerInfo?.pickInfo?.pickedMesh) != -1);\r\n            if (!this._parent) {\r\n                var material = this._isHovered || this._dragging ? this._hoverMaterial : this._coloredMaterial;\r\n                cache.gizmoMeshes.forEach((m: Mesh) => {\r\n                    m.material = material;\r\n                    if ((<LinesMesh>m).color) {\r\n                        (<LinesMesh>m).color = material.diffuseColor;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        var light = gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes());\r\n    }\r\n\r\n    /** Create Geometry for Gizmo */\r\n    private _createGizmoMesh(parentMesh: AbstractMesh, thickness: number, isCollider = false) {\r\n        var arrowMesh = BoxBuilder.CreateBox(\"yPosMesh\", { size: 0.4 * (1 + (thickness - 1) / 4) }, this.gizmoLayer.utilityLayerScene);\r\n        var arrowTail = CylinderBuilder.CreateCylinder(\"cylinder\", { diameterTop: 0.005 * thickness, height: 0.275, diameterBottom: 0.005 * thickness, tessellation: 96 }, this.gizmoLayer.utilityLayerScene);\r\n\r\n        // Position arrow pointing in its drag axis\r\n        arrowMesh.scaling.scaleInPlace(0.1);\r\n        arrowMesh.material = this._coloredMaterial;\r\n        arrowMesh.rotation.x = Math.PI / 2;\r\n        arrowMesh.position.z += 0.3;\r\n\r\n        arrowTail.material = this._coloredMaterial;\r\n        arrowTail.position.z += 0.275 / 2;\r\n        arrowTail.rotation.x = Math.PI / 2;\r\n\r\n        if (isCollider) {\r\n            arrowMesh.visibility = 0;\r\n            arrowTail.visibility = 0;\r\n        }\r\n\r\n        parentMesh.addChild(arrowMesh);\r\n        parentMesh.addChild(arrowTail);\r\n\r\n        return { arrowMesh, arrowTail };\r\n    }\r\n\r\n    protected _attachedNodeChanged(value: Nullable<Node>) {\r\n        if (this.dragBehavior) {\r\n            this.dragBehavior.enabled = value ? true : false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the gizmo is enabled\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        this._isEnabled = value;\r\n        if (!value) {\r\n            this.attachedMesh = null;\r\n            this.attachedNode = null;\r\n        }\r\n        else {\r\n            if (this._parent) {\r\n                this.attachedMesh = this._parent.attachedMesh;\r\n                this.attachedNode = this._parent.attachedNode;\r\n            }\r\n        }\r\n    }\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        this.onSnapObservable.clear();\r\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n        this.dragBehavior.detach();\r\n        if (this._gizmoMesh) {\r\n            this._gizmoMesh.dispose();\r\n        }\r\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach((matl) => {\r\n            if (matl) {\r\n                matl.dispose();\r\n            }\r\n        });\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Disposes and replaces the current meshes in the gizmo with the specified mesh\r\n     * @param mesh The mesh to replace the default mesh of the gizmo\r\n     * @param useGizmoMaterial If the gizmo's default material should be used (default: false)\r\n     */\r\n    public setCustomMesh(mesh: Mesh, useGizmoMaterial: boolean = false) {\r\n        super.setCustomMesh(mesh);\r\n        if (useGizmoMaterial) {\r\n            this._rootMesh.getChildMeshes().forEach((m) => {\r\n                m.material = this._coloredMaterial;\r\n                if ((<LinesMesh>m).color) {\r\n                    (<LinesMesh>m).color = this._coloredMaterial.diffuseColor;\r\n                }\r\n            });\r\n            this._customMeshSet = false;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}