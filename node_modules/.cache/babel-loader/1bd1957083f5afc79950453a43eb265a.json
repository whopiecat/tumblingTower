{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/refraction.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { SerializationHelper, serialize } from '../Misc/decorators';\n/**\r\n * Post process which applies a refractin texture\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#refraction\r\n */\n\nvar RefractionPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(RefractionPostProcess, _super);\n  /**\r\n   * Initializes the RefractionPostProcess\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#refraction\r\n   * @param name The name of the effect.\r\n   * @param refractionTextureUrl Url of the refraction texture to use\r\n   * @param color the base color of the refraction (used to taint the rendering)\r\n   * @param depth simulated refraction depth\r\n   * @param colorLevel the coefficient of the base color (0 to remove base color tainting)\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   */\n\n\n  function RefractionPostProcess(name, refractionTextureUrl, color, depth, colorLevel, options, camera, samplingMode, engine, reusable) {\n    var _this = _super.call(this, name, \"refraction\", [\"baseColor\", \"depth\", \"colorLevel\"], [\"refractionSampler\"], options, camera, samplingMode, engine, reusable) || this;\n\n    _this._ownRefractionTexture = true;\n    _this.color = color;\n    _this.depth = depth;\n    _this.colorLevel = colorLevel;\n    _this.refractionTextureUrl = refractionTextureUrl;\n\n    _this.onActivateObservable.add(function (cam) {\n      _this._refTexture = _this._refTexture || new Texture(refractionTextureUrl, cam.getScene());\n    });\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setColor3(\"baseColor\", _this.color);\n      effect.setFloat(\"depth\", _this.depth);\n      effect.setFloat(\"colorLevel\", _this.colorLevel);\n      effect.setTexture(\"refractionSampler\", _this._refTexture);\n    });\n\n    return _this;\n  }\n\n  Object.defineProperty(RefractionPostProcess.prototype, \"refractionTexture\", {\n    /**\r\n     * Gets or sets the refraction texture\r\n     * Please note that you are responsible for disposing the texture if you set it manually\r\n     */\n    get: function () {\n      return this._refTexture;\n    },\n    set: function (value) {\n      if (this._refTexture && this._ownRefractionTexture) {\n        this._refTexture.dispose();\n      }\n\n      this._refTexture = value;\n      this._ownRefractionTexture = false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"RefractionPostProcess\" string\r\n   */\n\n  RefractionPostProcess.prototype.getClassName = function () {\n    return \"RefractionPostProcess\";\n  }; // Methods\n\n  /**\r\n   * Disposes of the post process\r\n   * @param camera Camera to dispose post process on\r\n   */\n\n\n  RefractionPostProcess.prototype.dispose = function (camera) {\n    if (this._refTexture && this._ownRefractionTexture) {\n      this._refTexture.dispose();\n\n      this._refTexture = null;\n    }\n\n    _super.prototype.dispose.call(this, camera);\n  };\n  /** @hidden */\n\n\n  RefractionPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new RefractionPostProcess(parsedPostProcess.name, parsedPostProcess.refractionTextureUrl, parsedPostProcess.color, parsedPostProcess.depth, parsedPostProcess.colorLevel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], RefractionPostProcess.prototype, \"color\", void 0);\n\n  __decorate([serialize()], RefractionPostProcess.prototype, \"depth\", void 0);\n\n  __decorate([serialize()], RefractionPostProcess.prototype, \"colorLevel\", void 0);\n\n  __decorate([serialize()], RefractionPostProcess.prototype, \"refractionTextureUrl\", void 0);\n\n  return RefractionPostProcess;\n}(PostProcess);\n\nexport { RefractionPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.RefractionPostProcess\"] = RefractionPostProcess;","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/refractionPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { Color3 } from \"../Maths/math.color\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/refraction.fragment\";\r\nimport { _TypeStore } from '../Misc/typeStore';\r\nimport { SerializationHelper, serialize } from '../Misc/decorators';\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Post process which applies a refractin texture\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#refraction\r\n */\r\nexport class RefractionPostProcess extends PostProcess {\r\n    private _refTexture: Texture;\r\n    private _ownRefractionTexture = true;\r\n\r\n    /** the base color of the refraction (used to taint the rendering) */\r\n    @serialize()\r\n    public color: Color3;\r\n\r\n    /** simulated refraction depth */\r\n    @serialize()\r\n    public depth: number;\r\n\r\n    /** the coefficient of the base color (0 to remove base color tainting) */\r\n    @serialize()\r\n    public colorLevel: number;\r\n\r\n    /** Gets the url used to load the refraction texture */\r\n    @serialize()\r\n    public refractionTextureUrl: string;\r\n\r\n    /**\r\n     * Gets or sets the refraction texture\r\n     * Please note that you are responsible for disposing the texture if you set it manually\r\n     */\r\n    public get refractionTexture(): Texture {\r\n        return this._refTexture;\r\n    }\r\n\r\n    public set refractionTexture(value: Texture) {\r\n        if (this._refTexture && this._ownRefractionTexture) {\r\n            this._refTexture.dispose();\r\n        }\r\n\r\n        this._refTexture = value;\r\n        this._ownRefractionTexture = false;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"RefractionPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"RefractionPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Initializes the RefractionPostProcess\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#refraction\r\n     * @param name The name of the effect.\r\n     * @param refractionTextureUrl Url of the refraction texture to use\r\n     * @param color the base color of the refraction (used to taint the rendering)\r\n     * @param depth simulated refraction depth\r\n     * @param colorLevel the coefficient of the base color (0 to remove base color tainting)\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        refractionTextureUrl: string,\r\n        color: Color3,\r\n        depth: number,\r\n        colorLevel: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Camera,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean\r\n    ) {\r\n        super(name, \"refraction\", [\"baseColor\", \"depth\", \"colorLevel\"], [\"refractionSampler\"], options, camera, samplingMode, engine, reusable);\r\n\r\n        this.color = color;\r\n        this.depth = depth;\r\n        this.colorLevel = colorLevel;\r\n        this.refractionTextureUrl = refractionTextureUrl;\r\n\r\n        this.onActivateObservable.add((cam: Camera) => {\r\n            this._refTexture = this._refTexture || new Texture(refractionTextureUrl, cam.getScene());\r\n        });\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setColor3(\"baseColor\", this.color);\r\n            effect.setFloat(\"depth\", this.depth);\r\n            effect.setFloat(\"colorLevel\", this.colorLevel);\r\n\r\n            effect.setTexture(\"refractionSampler\", this._refTexture);\r\n        });\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Disposes of the post process\r\n     * @param camera Camera to dispose post process on\r\n     */\r\n    public dispose(camera: Camera): void {\r\n        if (this._refTexture && this._ownRefractionTexture) {\r\n            this._refTexture.dispose();\r\n            (<any>this._refTexture) = null;\r\n        }\r\n\r\n        super.dispose(camera);\r\n    }\r\n\r\n    /** @hidden */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(() => {\r\n            return new RefractionPostProcess(\r\n                parsedPostProcess.name, parsedPostProcess.refractionTextureUrl,\r\n                parsedPostProcess.color, parsedPostProcess.depth,\r\n                parsedPostProcess.colorLevel,\r\n                parsedPostProcess.options, targetCamera,\r\n                parsedPostProcess.renderTargetSamplingMode,\r\n                scene.getEngine(), parsedPostProcess.reusable);\r\n        }, parsedPostProcess, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.RefractionPostProcess\"] = RefractionPostProcess;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}