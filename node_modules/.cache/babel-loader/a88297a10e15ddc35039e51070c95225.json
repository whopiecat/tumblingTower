{"ast":null,"code":"import { PhysicsImpostor } from \"../../Physics/physicsImpostor\";\nimport { PhysicsJoint } from \"../../Physics/physicsJoint\";\nimport { PhysicsEngine } from \"../../Physics/physicsEngine\";\nimport { Vector3, Quaternion } from \"../../Maths/math.vector\";\nimport { Logger } from \"../../Misc/logger\";\nimport { PhysicsRaycastResult } from \"../physicsRaycastResult\";\n/** @hidden */\n\nvar OimoJSPlugin =\n/** @class */\nfunction () {\n  function OimoJSPlugin(_useDeltaForWorldStep, iterations, oimoInjection) {\n    if (_useDeltaForWorldStep === void 0) {\n      _useDeltaForWorldStep = true;\n    }\n\n    if (oimoInjection === void 0) {\n      oimoInjection = OIMO;\n    }\n\n    this._useDeltaForWorldStep = _useDeltaForWorldStep;\n    this.name = \"OimoJSPlugin\";\n    this._fixedTimeStep = 1 / 60;\n    this._tmpImpostorsArray = [];\n    this._tmpPositionVector = Vector3.Zero();\n    this.BJSOIMO = oimoInjection;\n    this.world = new this.BJSOIMO.World({\n      iterations: iterations\n    });\n    this.world.clear();\n    this._raycastResult = new PhysicsRaycastResult();\n  }\n\n  OimoJSPlugin.prototype.setGravity = function (gravity) {\n    this.world.gravity.set(gravity.x, gravity.y, gravity.z);\n  };\n\n  OimoJSPlugin.prototype.setTimeStep = function (timeStep) {\n    this.world.timeStep = timeStep;\n  };\n\n  OimoJSPlugin.prototype.getTimeStep = function () {\n    return this.world.timeStep;\n  };\n\n  OimoJSPlugin.prototype.executeStep = function (delta, impostors) {\n    var _this = this;\n\n    impostors.forEach(function (impostor) {\n      impostor.beforeStep();\n    });\n    this.world.timeStep = this._useDeltaForWorldStep ? delta : this._fixedTimeStep;\n    this.world.step();\n    impostors.forEach(function (impostor) {\n      impostor.afterStep(); //update the ordered impostors array\n\n      _this._tmpImpostorsArray[impostor.uniqueId] = impostor;\n    }); //check for collisions\n\n    var contact = this.world.contacts;\n\n    while (contact !== null) {\n      if (contact.touching && !contact.body1.sleeping && !contact.body2.sleeping) {\n        contact = contact.next;\n        continue;\n      } //is this body colliding with any other? get the impostor\n\n\n      var mainImpostor = this._tmpImpostorsArray[+contact.body1.name];\n      var collidingImpostor = this._tmpImpostorsArray[+contact.body2.name];\n\n      if (!mainImpostor || !collidingImpostor) {\n        contact = contact.next;\n        continue;\n      }\n\n      mainImpostor.onCollide({\n        body: collidingImpostor.physicsBody,\n        point: null\n      });\n      collidingImpostor.onCollide({\n        body: mainImpostor.physicsBody,\n        point: null\n      });\n      contact = contact.next;\n    }\n  };\n\n  OimoJSPlugin.prototype.applyImpulse = function (impostor, force, contactPoint) {\n    var mass = impostor.physicsBody.mass;\n    impostor.physicsBody.applyImpulse(contactPoint.scale(this.world.invScale), force.scale(this.world.invScale * mass));\n  };\n\n  OimoJSPlugin.prototype.applyForce = function (impostor, force, contactPoint) {\n    Logger.Warn(\"Oimo doesn't support applying force. Using impule instead.\");\n    this.applyImpulse(impostor, force, contactPoint);\n  };\n\n  OimoJSPlugin.prototype.generatePhysicsBody = function (impostor) {\n    var _this = this; //parent-child relationship. Does this impostor has a parent impostor?\n\n\n    if (impostor.parent) {\n      if (impostor.physicsBody) {\n        this.removePhysicsBody(impostor); //TODO is that needed?\n\n        impostor.forceUpdate();\n      }\n\n      return;\n    }\n\n    if (impostor.isBodyInitRequired()) {\n      var bodyConfig = {\n        name: impostor.uniqueId,\n        //Oimo must have mass, also for static objects.\n        config: [impostor.getParam(\"mass\") || 0.001, impostor.getParam(\"friction\"), impostor.getParam(\"restitution\")],\n        size: [],\n        type: [],\n        pos: [],\n        posShape: [],\n        rot: [],\n        rotShape: [],\n        move: impostor.getParam(\"mass\") !== 0,\n        density: impostor.getParam(\"mass\"),\n        friction: impostor.getParam(\"friction\"),\n        restitution: impostor.getParam(\"restitution\"),\n        //Supporting older versions of Oimo\n        world: this.world\n      };\n      var impostors = [impostor];\n\n      var addToArray = function (parent) {\n        if (!parent.getChildMeshes) {\n          return;\n        }\n\n        parent.getChildMeshes().forEach(function (m) {\n          if (m.physicsImpostor) {\n            impostors.push(m.physicsImpostor); //m.physicsImpostor._init();\n          }\n        });\n      };\n\n      addToArray(impostor.object);\n\n      var checkWithEpsilon_1 = function (value) {\n        return Math.max(value, PhysicsEngine.Epsilon);\n      };\n\n      var globalQuaternion_1 = new Quaternion();\n      impostors.forEach(function (i) {\n        if (!i.object.rotationQuaternion) {\n          return;\n        } //get the correct bounding box\n\n\n        var oldQuaternion = i.object.rotationQuaternion;\n        globalQuaternion_1.copyFrom(oldQuaternion);\n        i.object.rotationQuaternion.set(0, 0, 0, 1);\n        i.object.computeWorldMatrix(true);\n        var rot = globalQuaternion_1.toEulerAngles();\n        var extendSize = i.getObjectExtendSize();\n        var radToDeg = 57.295779513082320876;\n\n        if (i === impostor) {\n          var center = impostor.getObjectCenter();\n          impostor.object.getAbsolutePivotPoint().subtractToRef(center, _this._tmpPositionVector);\n\n          _this._tmpPositionVector.divideInPlace(impostor.object.scaling); //Can also use Array.prototype.push.apply\n\n\n          bodyConfig.pos.push(center.x);\n          bodyConfig.pos.push(center.y);\n          bodyConfig.pos.push(center.z);\n          bodyConfig.posShape.push(0, 0, 0);\n          bodyConfig.rotShape.push(0, 0, 0);\n        } else {\n          var localPosition = i.object.position.clone();\n          bodyConfig.posShape.push(localPosition.x);\n          bodyConfig.posShape.push(localPosition.y);\n          bodyConfig.posShape.push(localPosition.z); // bodyConfig.pos.push(0, 0, 0);\n\n          bodyConfig.rotShape.push(rot.x * radToDeg, rot.y * radToDeg, rot.z * radToDeg);\n        }\n\n        i.object.rotationQuaternion.copyFrom(globalQuaternion_1); // register mesh\n\n        switch (i.type) {\n          case PhysicsImpostor.ParticleImpostor:\n            Logger.Warn(\"No Particle support in OIMO.js. using SphereImpostor instead\");\n\n          case PhysicsImpostor.SphereImpostor:\n            var radiusX = extendSize.x;\n            var radiusY = extendSize.y;\n            var radiusZ = extendSize.z;\n            var size = Math.max(checkWithEpsilon_1(radiusX), checkWithEpsilon_1(radiusY), checkWithEpsilon_1(radiusZ)) / 2;\n            bodyConfig.type.push(\"sphere\"); //due to the way oimo works with compounds, add 3 times\n\n            bodyConfig.size.push(size);\n            bodyConfig.size.push(size);\n            bodyConfig.size.push(size);\n            break;\n\n          case PhysicsImpostor.CylinderImpostor:\n            var sizeX = checkWithEpsilon_1(extendSize.x) / 2;\n            var sizeY = checkWithEpsilon_1(extendSize.y);\n            bodyConfig.type.push(\"cylinder\");\n            bodyConfig.size.push(sizeX);\n            bodyConfig.size.push(sizeY); //due to the way oimo works with compounds, add one more value.\n\n            bodyConfig.size.push(sizeY);\n            break;\n\n          case PhysicsImpostor.PlaneImpostor:\n          case PhysicsImpostor.BoxImpostor:\n          default:\n            var sizeX = checkWithEpsilon_1(extendSize.x);\n            var sizeY = checkWithEpsilon_1(extendSize.y);\n            var sizeZ = checkWithEpsilon_1(extendSize.z);\n            bodyConfig.type.push(\"box\"); //if (i === impostor) {\n\n            bodyConfig.size.push(sizeX);\n            bodyConfig.size.push(sizeY);\n            bodyConfig.size.push(sizeZ); //} else {\n            //    bodyConfig.size.push(0,0,0);\n            //}\n\n            break;\n        } //actually not needed, but hey...\n\n\n        i.object.rotationQuaternion = oldQuaternion;\n      });\n      impostor.physicsBody = this.world.add(bodyConfig); // set the quaternion, ignoring the previously defined (euler) rotation\n\n      impostor.physicsBody.resetQuaternion(globalQuaternion_1); // update with delta 0, so the body will receive the new rotation.\n\n      impostor.physicsBody.updatePosition(0);\n    } else {\n      this._tmpPositionVector.copyFromFloats(0, 0, 0);\n    }\n\n    impostor.setDeltaPosition(this._tmpPositionVector); //this._tmpPositionVector.addInPlace(impostor.mesh.getBoundingInfo().boundingBox.center);\n    //this.setPhysicsBodyTransformation(impostor, this._tmpPositionVector, impostor.mesh.rotationQuaternion);\n  };\n\n  OimoJSPlugin.prototype.removePhysicsBody = function (impostor) {\n    //impostor.physicsBody.dispose();\n    //Same as : (older oimo versions)\n    this.world.removeRigidBody(impostor.physicsBody);\n  };\n\n  OimoJSPlugin.prototype.generateJoint = function (impostorJoint) {\n    var mainBody = impostorJoint.mainImpostor.physicsBody;\n    var connectedBody = impostorJoint.connectedImpostor.physicsBody;\n\n    if (!mainBody || !connectedBody) {\n      return;\n    }\n\n    var jointData = impostorJoint.joint.jointData;\n    var options = jointData.nativeParams || {};\n    var type;\n    var nativeJointData = {\n      body1: mainBody,\n      body2: connectedBody,\n      axe1: options.axe1 || (jointData.mainAxis ? jointData.mainAxis.asArray() : null),\n      axe2: options.axe2 || (jointData.connectedAxis ? jointData.connectedAxis.asArray() : null),\n      pos1: options.pos1 || (jointData.mainPivot ? jointData.mainPivot.asArray() : null),\n      pos2: options.pos2 || (jointData.connectedPivot ? jointData.connectedPivot.asArray() : null),\n      min: options.min,\n      max: options.max,\n      collision: options.collision || jointData.collision,\n      spring: options.spring,\n      //supporting older version of Oimo\n      world: this.world\n    };\n\n    switch (impostorJoint.joint.type) {\n      case PhysicsJoint.BallAndSocketJoint:\n        type = \"jointBall\";\n        break;\n\n      case PhysicsJoint.SpringJoint:\n        Logger.Warn(\"OIMO.js doesn't support Spring Constraint. Simulating using DistanceJoint instead\");\n        var springData = jointData;\n        nativeJointData.min = springData.length || nativeJointData.min; //Max should also be set, just make sure it is at least min\n\n        nativeJointData.max = Math.max(nativeJointData.min, nativeJointData.max);\n\n      case PhysicsJoint.DistanceJoint:\n        type = \"jointDistance\";\n        nativeJointData.max = jointData.maxDistance;\n        break;\n\n      case PhysicsJoint.PrismaticJoint:\n        type = \"jointPrisme\";\n        break;\n\n      case PhysicsJoint.SliderJoint:\n        type = \"jointSlide\";\n        break;\n\n      case PhysicsJoint.WheelJoint:\n        type = \"jointWheel\";\n        break;\n\n      case PhysicsJoint.HingeJoint:\n      default:\n        type = \"jointHinge\";\n        break;\n    }\n\n    nativeJointData.type = type;\n    impostorJoint.joint.physicsJoint = this.world.add(nativeJointData);\n  };\n\n  OimoJSPlugin.prototype.removeJoint = function (impostorJoint) {\n    //Bug in Oimo prevents us from disposing a joint in the playground\n    //joint.joint.physicsJoint.dispose();\n    //So we will bruteforce it!\n    try {\n      this.world.removeJoint(impostorJoint.joint.physicsJoint);\n    } catch (e) {\n      Logger.Warn(e);\n    }\n  };\n\n  OimoJSPlugin.prototype.isSupported = function () {\n    return this.BJSOIMO !== undefined;\n  };\n\n  OimoJSPlugin.prototype.setTransformationFromPhysicsBody = function (impostor) {\n    if (!impostor.physicsBody.sleeping) {\n      if (impostor.physicsBody.shapes.next) {\n        var parent_1 = impostor.physicsBody.shapes;\n\n        while (parent_1.next) {\n          parent_1 = parent_1.next;\n        }\n\n        impostor.object.position.set(parent_1.position.x, parent_1.position.y, parent_1.position.z);\n      } else {\n        var pos = impostor.physicsBody.getPosition();\n        impostor.object.position.set(pos.x, pos.y, pos.z);\n      } //}\n\n\n      if (impostor.object.rotationQuaternion) {\n        var quat = impostor.physicsBody.getQuaternion();\n        impostor.object.rotationQuaternion.set(quat.x, quat.y, quat.z, quat.w);\n      }\n    }\n  };\n\n  OimoJSPlugin.prototype.setPhysicsBodyTransformation = function (impostor, newPosition, newRotation) {\n    var body = impostor.physicsBody; // disable bidirectional for compound meshes\n\n    if (impostor.physicsBody.shapes.next) {\n      return;\n    }\n\n    body.position.set(newPosition.x, newPosition.y, newPosition.z);\n    body.orientation.set(newRotation.x, newRotation.y, newRotation.z, newRotation.w);\n    body.syncShapes();\n    body.awake();\n  };\n  /*private _getLastShape(body: any): any {\r\n      var lastShape = body.shapes;\r\n      while (lastShape.next) {\r\n          lastShape = lastShape.next;\r\n      }\r\n      return lastShape;\r\n  }*/\n\n\n  OimoJSPlugin.prototype.setLinearVelocity = function (impostor, velocity) {\n    impostor.physicsBody.linearVelocity.set(velocity.x, velocity.y, velocity.z);\n  };\n\n  OimoJSPlugin.prototype.setAngularVelocity = function (impostor, velocity) {\n    impostor.physicsBody.angularVelocity.set(velocity.x, velocity.y, velocity.z);\n  };\n\n  OimoJSPlugin.prototype.getLinearVelocity = function (impostor) {\n    var v = impostor.physicsBody.linearVelocity;\n\n    if (!v) {\n      return null;\n    }\n\n    return new Vector3(v.x, v.y, v.z);\n  };\n\n  OimoJSPlugin.prototype.getAngularVelocity = function (impostor) {\n    var v = impostor.physicsBody.angularVelocity;\n\n    if (!v) {\n      return null;\n    }\n\n    return new Vector3(v.x, v.y, v.z);\n  };\n\n  OimoJSPlugin.prototype.setBodyMass = function (impostor, mass) {\n    var staticBody = mass === 0; //this will actually set the body's density and not its mass.\n    //But this is how oimo treats the mass variable.\n\n    impostor.physicsBody.shapes.density = staticBody ? 1 : mass;\n    impostor.physicsBody.setupMass(staticBody ? 0x2 : 0x1);\n  };\n\n  OimoJSPlugin.prototype.getBodyMass = function (impostor) {\n    return impostor.physicsBody.shapes.density;\n  };\n\n  OimoJSPlugin.prototype.getBodyFriction = function (impostor) {\n    return impostor.physicsBody.shapes.friction;\n  };\n\n  OimoJSPlugin.prototype.setBodyFriction = function (impostor, friction) {\n    impostor.physicsBody.shapes.friction = friction;\n  };\n\n  OimoJSPlugin.prototype.getBodyRestitution = function (impostor) {\n    return impostor.physicsBody.shapes.restitution;\n  };\n\n  OimoJSPlugin.prototype.setBodyRestitution = function (impostor, restitution) {\n    impostor.physicsBody.shapes.restitution = restitution;\n  };\n\n  OimoJSPlugin.prototype.sleepBody = function (impostor) {\n    impostor.physicsBody.sleep();\n  };\n\n  OimoJSPlugin.prototype.wakeUpBody = function (impostor) {\n    impostor.physicsBody.awake();\n  };\n\n  OimoJSPlugin.prototype.updateDistanceJoint = function (joint, maxDistance, minDistance) {\n    joint.physicsJoint.limitMotor.upperLimit = maxDistance;\n\n    if (minDistance !== void 0) {\n      joint.physicsJoint.limitMotor.lowerLimit = minDistance;\n    }\n  };\n\n  OimoJSPlugin.prototype.setMotor = function (joint, speed, force, motorIndex) {\n    if (force !== undefined) {\n      Logger.Warn(\"OimoJS plugin currently has unexpected behavior when using setMotor with force parameter\");\n    } else {\n      force = 1e6;\n    }\n\n    speed *= -1; //TODO separate rotational and transational motors.\n\n    var motor = motorIndex ? joint.physicsJoint.rotationalLimitMotor2 : joint.physicsJoint.rotationalLimitMotor1 || joint.physicsJoint.rotationalLimitMotor || joint.physicsJoint.limitMotor;\n\n    if (motor) {\n      motor.setMotor(speed, force);\n    }\n  };\n\n  OimoJSPlugin.prototype.setLimit = function (joint, upperLimit, lowerLimit, motorIndex) {\n    //TODO separate rotational and transational motors.\n    var motor = motorIndex ? joint.physicsJoint.rotationalLimitMotor2 : joint.physicsJoint.rotationalLimitMotor1 || joint.physicsJoint.rotationalLimitMotor || joint.physicsJoint.limitMotor;\n\n    if (motor) {\n      motor.setLimit(upperLimit, lowerLimit === void 0 ? -upperLimit : lowerLimit);\n    }\n  };\n\n  OimoJSPlugin.prototype.syncMeshWithImpostor = function (mesh, impostor) {\n    var body = impostor.physicsBody;\n    mesh.position.x = body.position.x;\n    mesh.position.y = body.position.y;\n    mesh.position.z = body.position.z;\n\n    if (mesh.rotationQuaternion) {\n      mesh.rotationQuaternion.x = body.orientation.x;\n      mesh.rotationQuaternion.y = body.orientation.y;\n      mesh.rotationQuaternion.z = body.orientation.z;\n      mesh.rotationQuaternion.w = body.orientation.s;\n    }\n  };\n\n  OimoJSPlugin.prototype.getRadius = function (impostor) {\n    return impostor.physicsBody.shapes.radius;\n  };\n\n  OimoJSPlugin.prototype.getBoxSizeToRef = function (impostor, result) {\n    var shape = impostor.physicsBody.shapes;\n    result.x = shape.halfWidth * 2;\n    result.y = shape.halfHeight * 2;\n    result.z = shape.halfDepth * 2;\n  };\n\n  OimoJSPlugin.prototype.dispose = function () {\n    this.world.clear();\n  };\n  /**\r\n   * Does a raycast in the physics world\r\n   * @param from when should the ray start?\r\n   * @param to when should the ray end?\r\n   * @returns PhysicsRaycastResult\r\n   */\n\n\n  OimoJSPlugin.prototype.raycast = function (from, to) {\n    Logger.Warn(\"raycast is not currently supported by the Oimo physics plugin\");\n\n    this._raycastResult.reset(from, to);\n\n    return this._raycastResult;\n  };\n\n  return OimoJSPlugin;\n}();\n\nexport { OimoJSPlugin };","map":{"version":3,"sources":["../../../../sourceES6/core/Physics/Plugins/oimoJSPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { IPhysicsEnginePlugin, PhysicsImpostorJoint } from \"../../Physics/IPhysicsEngine\";\r\nimport { PhysicsImpostor, IPhysicsEnabledObject } from \"../../Physics/physicsImpostor\";\r\nimport { PhysicsJoint, IMotorEnabledJoint, DistanceJointData, SpringJointData } from \"../../Physics/physicsJoint\";\r\nimport { PhysicsEngine } from \"../../Physics/physicsEngine\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Vector3, Quaternion } from \"../../Maths/math.vector\";\r\nimport { Nullable } from \"../../types\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { PhysicsRaycastResult } from \"../physicsRaycastResult\";\r\n\r\ndeclare var OIMO: any;\r\n\r\n/** @hidden */\r\nexport class OimoJSPlugin implements IPhysicsEnginePlugin {\r\n    public world: any;\r\n    public name: string = \"OimoJSPlugin\";\r\n    public BJSOIMO: any;\r\n    private _raycastResult: PhysicsRaycastResult;\r\n    private _fixedTimeStep: number = 1 / 60;\r\n\r\n    constructor(private _useDeltaForWorldStep: boolean = true, iterations?: number, oimoInjection = OIMO) {\r\n        this.BJSOIMO = oimoInjection;\r\n        this.world = new this.BJSOIMO.World({\r\n            iterations: iterations,\r\n        });\r\n        this.world.clear();\r\n        this._raycastResult = new PhysicsRaycastResult();\r\n    }\r\n\r\n    public setGravity(gravity: Vector3) {\r\n        this.world.gravity.set(gravity.x, gravity.y, gravity.z);\r\n    }\r\n\r\n    public setTimeStep(timeStep: number) {\r\n        this.world.timeStep = timeStep;\r\n    }\r\n\r\n    public getTimeStep(): number {\r\n        return this.world.timeStep;\r\n    }\r\n\r\n    private _tmpImpostorsArray: Array<PhysicsImpostor> = [];\r\n\r\n    public executeStep(delta: number, impostors: Array<PhysicsImpostor>) {\r\n        impostors.forEach(function (impostor) {\r\n            impostor.beforeStep();\r\n        });\r\n\r\n        this.world.timeStep = this._useDeltaForWorldStep ? delta : this._fixedTimeStep;\r\n        this.world.step();\r\n\r\n        impostors.forEach((impostor) => {\r\n            impostor.afterStep();\r\n            //update the ordered impostors array\r\n            this._tmpImpostorsArray[impostor.uniqueId] = impostor;\r\n        });\r\n\r\n        //check for collisions\r\n        var contact = this.world.contacts;\r\n\r\n        while (contact !== null) {\r\n            if (contact.touching && !contact.body1.sleeping && !contact.body2.sleeping) {\r\n                contact = contact.next;\r\n                continue;\r\n            }\r\n            //is this body colliding with any other? get the impostor\r\n            var mainImpostor = this._tmpImpostorsArray[+contact.body1.name];\r\n            var collidingImpostor = this._tmpImpostorsArray[+contact.body2.name];\r\n\r\n            if (!mainImpostor || !collidingImpostor) {\r\n                contact = contact.next;\r\n                continue;\r\n            }\r\n\r\n            mainImpostor.onCollide({ body: collidingImpostor.physicsBody, point: null});\r\n            collidingImpostor.onCollide({ body: mainImpostor.physicsBody, point: null });\r\n            contact = contact.next;\r\n        }\r\n    }\r\n\r\n    public applyImpulse(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3) {\r\n        var mass = impostor.physicsBody.mass;\r\n        impostor.physicsBody.applyImpulse(contactPoint.scale(this.world.invScale), force.scale(this.world.invScale * mass));\r\n    }\r\n    public applyForce(impostor: PhysicsImpostor, force: Vector3, contactPoint: Vector3) {\r\n        Logger.Warn(\"Oimo doesn't support applying force. Using impule instead.\");\r\n        this.applyImpulse(impostor, force, contactPoint);\r\n    }\r\n    public generatePhysicsBody(impostor: PhysicsImpostor) {\r\n        //parent-child relationship. Does this impostor has a parent impostor?\r\n        if (impostor.parent) {\r\n            if (impostor.physicsBody) {\r\n                this.removePhysicsBody(impostor);\r\n                //TODO is that needed?\r\n                impostor.forceUpdate();\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (impostor.isBodyInitRequired()) {\r\n            var bodyConfig: any = {\r\n                name: impostor.uniqueId,\r\n                //Oimo must have mass, also for static objects.\r\n                config: [impostor.getParam(\"mass\") || 0.001, impostor.getParam(\"friction\"), impostor.getParam(\"restitution\")],\r\n                size: [],\r\n                type: [],\r\n                pos: [],\r\n                posShape: [],\r\n                rot: [],\r\n                rotShape: [],\r\n                move: impostor.getParam(\"mass\") !== 0,\r\n                density: impostor.getParam(\"mass\"),\r\n                friction: impostor.getParam(\"friction\"),\r\n                restitution: impostor.getParam(\"restitution\"),\r\n                //Supporting older versions of Oimo\r\n                world: this.world,\r\n            };\r\n\r\n            var impostors = [impostor];\r\n            let addToArray = (parent: IPhysicsEnabledObject) => {\r\n                if (!parent.getChildMeshes) {\r\n                    return;\r\n                }\r\n                parent.getChildMeshes().forEach(function (m) {\r\n                    if (m.physicsImpostor) {\r\n                        impostors.push(m.physicsImpostor);\r\n                        //m.physicsImpostor._init();\r\n                    }\r\n                });\r\n            };\r\n            addToArray(impostor.object);\r\n\r\n            let checkWithEpsilon = (value: number): number => {\r\n                return Math.max(value, PhysicsEngine.Epsilon);\r\n            };\r\n\r\n            const globalQuaternion: Quaternion = new Quaternion();\r\n\r\n            impostors.forEach((i) => {\r\n                if (!i.object.rotationQuaternion) {\r\n                    return;\r\n                }\r\n                //get the correct bounding box\r\n                var oldQuaternion = i.object.rotationQuaternion;\r\n                globalQuaternion.copyFrom(oldQuaternion);\r\n\r\n                i.object.rotationQuaternion.set(0, 0, 0, 1);\r\n                i.object.computeWorldMatrix(true);\r\n\r\n                var rot = globalQuaternion.toEulerAngles();\r\n                var extendSize = i.getObjectExtendSize();\r\n\r\n                const radToDeg = 57.295779513082320876;\r\n\r\n                if (i === impostor) {\r\n                    var center = impostor.getObjectCenter();\r\n\r\n                    impostor.object.getAbsolutePivotPoint().subtractToRef(center, this._tmpPositionVector);\r\n                    this._tmpPositionVector.divideInPlace(impostor.object.scaling);\r\n\r\n                    //Can also use Array.prototype.push.apply\r\n                    bodyConfig.pos.push(center.x);\r\n                    bodyConfig.pos.push(center.y);\r\n                    bodyConfig.pos.push(center.z);\r\n                    bodyConfig.posShape.push(0, 0, 0);\r\n\r\n                    bodyConfig.rotShape.push(0, 0, 0);\r\n                } else {\r\n                    let localPosition = i.object.position.clone();\r\n                    bodyConfig.posShape.push(localPosition.x);\r\n                    bodyConfig.posShape.push(localPosition.y);\r\n                    bodyConfig.posShape.push(localPosition.z);\r\n\r\n                    // bodyConfig.pos.push(0, 0, 0);\r\n\r\n                    bodyConfig.rotShape.push(rot.x * radToDeg, rot.y * radToDeg, rot.z * radToDeg);\r\n                }\r\n\r\n                i.object.rotationQuaternion.copyFrom(globalQuaternion);\r\n\r\n                // register mesh\r\n                switch (i.type) {\r\n                    case PhysicsImpostor.ParticleImpostor:\r\n                        Logger.Warn(\"No Particle support in OIMO.js. using SphereImpostor instead\");\r\n                    case PhysicsImpostor.SphereImpostor:\r\n                        var radiusX = extendSize.x;\r\n                        var radiusY = extendSize.y;\r\n                        var radiusZ = extendSize.z;\r\n\r\n                        var size = Math.max(checkWithEpsilon(radiusX), checkWithEpsilon(radiusY), checkWithEpsilon(radiusZ)) / 2;\r\n\r\n                        bodyConfig.type.push(\"sphere\");\r\n                        //due to the way oimo works with compounds, add 3 times\r\n                        bodyConfig.size.push(size);\r\n                        bodyConfig.size.push(size);\r\n                        bodyConfig.size.push(size);\r\n                        break;\r\n\r\n                    case PhysicsImpostor.CylinderImpostor:\r\n                        var sizeX = checkWithEpsilon(extendSize.x) / 2;\r\n                        var sizeY = checkWithEpsilon(extendSize.y);\r\n                        bodyConfig.type.push(\"cylinder\");\r\n                        bodyConfig.size.push(sizeX);\r\n                        bodyConfig.size.push(sizeY);\r\n                        //due to the way oimo works with compounds, add one more value.\r\n                        bodyConfig.size.push(sizeY);\r\n                        break;\r\n\r\n                    case PhysicsImpostor.PlaneImpostor:\r\n                    case PhysicsImpostor.BoxImpostor:\r\n                    default:\r\n                        var sizeX = checkWithEpsilon(extendSize.x);\r\n                        var sizeY = checkWithEpsilon(extendSize.y);\r\n                        var sizeZ = checkWithEpsilon(extendSize.z);\r\n\r\n                        bodyConfig.type.push(\"box\");\r\n                        //if (i === impostor) {\r\n                        bodyConfig.size.push(sizeX);\r\n                        bodyConfig.size.push(sizeY);\r\n                        bodyConfig.size.push(sizeZ);\r\n                        //} else {\r\n                        //    bodyConfig.size.push(0,0,0);\r\n                        //}\r\n                        break;\r\n                }\r\n\r\n                //actually not needed, but hey...\r\n                i.object.rotationQuaternion = oldQuaternion;\r\n            });\r\n            impostor.physicsBody = this.world.add(bodyConfig);\r\n            // set the quaternion, ignoring the previously defined (euler) rotation\r\n            impostor.physicsBody.resetQuaternion(globalQuaternion);\r\n            // update with delta 0, so the body will receive the new rotation.\r\n            impostor.physicsBody.updatePosition(0);\r\n        } else {\r\n            this._tmpPositionVector.copyFromFloats(0, 0, 0);\r\n        }\r\n\r\n        impostor.setDeltaPosition(this._tmpPositionVector);\r\n\r\n        //this._tmpPositionVector.addInPlace(impostor.mesh.getBoundingInfo().boundingBox.center);\r\n        //this.setPhysicsBodyTransformation(impostor, this._tmpPositionVector, impostor.mesh.rotationQuaternion);\r\n    }\r\n\r\n    private _tmpPositionVector: Vector3 = Vector3.Zero();\r\n\r\n    public removePhysicsBody(impostor: PhysicsImpostor) {\r\n        //impostor.physicsBody.dispose();\r\n        //Same as : (older oimo versions)\r\n        this.world.removeRigidBody(impostor.physicsBody);\r\n    }\r\n\r\n    public generateJoint(impostorJoint: PhysicsImpostorJoint) {\r\n        var mainBody = impostorJoint.mainImpostor.physicsBody;\r\n        var connectedBody = impostorJoint.connectedImpostor.physicsBody;\r\n\r\n        if (!mainBody || !connectedBody) {\r\n            return;\r\n        }\r\n        var jointData = impostorJoint.joint.jointData;\r\n        var options = jointData.nativeParams || {};\r\n        var type;\r\n        var nativeJointData: any = {\r\n            body1: mainBody,\r\n            body2: connectedBody,\r\n\r\n            axe1: options.axe1 || (jointData.mainAxis ? jointData.mainAxis.asArray() : null),\r\n            axe2: options.axe2 || (jointData.connectedAxis ? jointData.connectedAxis.asArray() : null),\r\n            pos1: options.pos1 || (jointData.mainPivot ? jointData.mainPivot.asArray() : null),\r\n            pos2: options.pos2 || (jointData.connectedPivot ? jointData.connectedPivot.asArray() : null),\r\n\r\n            min: options.min,\r\n            max: options.max,\r\n            collision: options.collision || jointData.collision,\r\n            spring: options.spring,\r\n\r\n            //supporting older version of Oimo\r\n            world: this.world,\r\n        };\r\n        switch (impostorJoint.joint.type) {\r\n            case PhysicsJoint.BallAndSocketJoint:\r\n                type = \"jointBall\";\r\n                break;\r\n            case PhysicsJoint.SpringJoint:\r\n                Logger.Warn(\"OIMO.js doesn't support Spring Constraint. Simulating using DistanceJoint instead\");\r\n                var springData = <SpringJointData>jointData;\r\n                nativeJointData.min = springData.length || nativeJointData.min;\r\n                //Max should also be set, just make sure it is at least min\r\n                nativeJointData.max = Math.max(nativeJointData.min, nativeJointData.max);\r\n            case PhysicsJoint.DistanceJoint:\r\n                type = \"jointDistance\";\r\n                nativeJointData.max = (<DistanceJointData>jointData).maxDistance;\r\n                break;\r\n            case PhysicsJoint.PrismaticJoint:\r\n                type = \"jointPrisme\";\r\n                break;\r\n            case PhysicsJoint.SliderJoint:\r\n                type = \"jointSlide\";\r\n                break;\r\n            case PhysicsJoint.WheelJoint:\r\n                type = \"jointWheel\";\r\n                break;\r\n            case PhysicsJoint.HingeJoint:\r\n            default:\r\n                type = \"jointHinge\";\r\n                break;\r\n        }\r\n        nativeJointData.type = type;\r\n        impostorJoint.joint.physicsJoint = this.world.add(nativeJointData);\r\n    }\r\n\r\n    public removeJoint(impostorJoint: PhysicsImpostorJoint) {\r\n        //Bug in Oimo prevents us from disposing a joint in the playground\r\n        //joint.joint.physicsJoint.dispose();\r\n        //So we will bruteforce it!\r\n        try {\r\n            this.world.removeJoint(impostorJoint.joint.physicsJoint);\r\n        } catch (e) {\r\n            Logger.Warn(e);\r\n        }\r\n    }\r\n\r\n    public isSupported(): boolean {\r\n        return this.BJSOIMO !== undefined;\r\n    }\r\n\r\n    public setTransformationFromPhysicsBody(impostor: PhysicsImpostor) {\r\n        if (!impostor.physicsBody.sleeping) {\r\n            if (impostor.physicsBody.shapes.next) {\r\n                let parent = impostor.physicsBody.shapes;\r\n                while (parent.next) {\r\n                    parent = parent.next;\r\n                }\r\n                impostor.object.position.set(parent.position.x, parent.position.y, parent.position.z);\r\n            } else {\r\n                const pos = impostor.physicsBody.getPosition();\r\n                impostor.object.position.set(pos.x, pos.y, pos.z);\r\n            }\r\n            //}\r\n\r\n            if (impostor.object.rotationQuaternion) {\r\n                const quat = impostor.physicsBody.getQuaternion();\r\n                impostor.object.rotationQuaternion.set(quat.x, quat.y, quat.z, quat.w);\r\n            }\r\n        }\r\n    }\r\n\r\n    public setPhysicsBodyTransformation(impostor: PhysicsImpostor, newPosition: Vector3, newRotation: Quaternion) {\r\n        var body = impostor.physicsBody;\r\n        // disable bidirectional for compound meshes\r\n        if (impostor.physicsBody.shapes.next) {\r\n            return;\r\n        }\r\n        body.position.set(newPosition.x, newPosition.y, newPosition.z);\r\n        body.orientation.set(newRotation.x, newRotation.y, newRotation.z, newRotation.w);\r\n        body.syncShapes();\r\n        body.awake();\r\n    }\r\n\r\n    /*private _getLastShape(body: any): any {\r\n        var lastShape = body.shapes;\r\n        while (lastShape.next) {\r\n            lastShape = lastShape.next;\r\n        }\r\n        return lastShape;\r\n    }*/\r\n\r\n    public setLinearVelocity(impostor: PhysicsImpostor, velocity: Vector3) {\r\n        impostor.physicsBody.linearVelocity.set(velocity.x, velocity.y, velocity.z);\r\n    }\r\n\r\n    public setAngularVelocity(impostor: PhysicsImpostor, velocity: Vector3) {\r\n        impostor.physicsBody.angularVelocity.set(velocity.x, velocity.y, velocity.z);\r\n    }\r\n\r\n    public getLinearVelocity(impostor: PhysicsImpostor): Nullable<Vector3> {\r\n        var v = impostor.physicsBody.linearVelocity;\r\n        if (!v) {\r\n            return null;\r\n        }\r\n        return new Vector3(v.x, v.y, v.z);\r\n    }\r\n    public getAngularVelocity(impostor: PhysicsImpostor): Nullable<Vector3> {\r\n        var v = impostor.physicsBody.angularVelocity;\r\n        if (!v) {\r\n            return null;\r\n        }\r\n        return new Vector3(v.x, v.y, v.z);\r\n    }\r\n\r\n    public setBodyMass(impostor: PhysicsImpostor, mass: number) {\r\n        var staticBody: boolean = mass === 0;\r\n        //this will actually set the body's density and not its mass.\r\n        //But this is how oimo treats the mass variable.\r\n        impostor.physicsBody.shapes.density = staticBody ? 1 : mass;\r\n        impostor.physicsBody.setupMass(staticBody ? 0x2 : 0x1);\r\n    }\r\n\r\n    public getBodyMass(impostor: PhysicsImpostor): number {\r\n        return impostor.physicsBody.shapes.density;\r\n    }\r\n\r\n    public getBodyFriction(impostor: PhysicsImpostor): number {\r\n        return impostor.physicsBody.shapes.friction;\r\n    }\r\n\r\n    public setBodyFriction(impostor: PhysicsImpostor, friction: number) {\r\n        impostor.physicsBody.shapes.friction = friction;\r\n    }\r\n\r\n    public getBodyRestitution(impostor: PhysicsImpostor): number {\r\n        return impostor.physicsBody.shapes.restitution;\r\n    }\r\n\r\n    public setBodyRestitution(impostor: PhysicsImpostor, restitution: number) {\r\n        impostor.physicsBody.shapes.restitution = restitution;\r\n    }\r\n\r\n    public sleepBody(impostor: PhysicsImpostor) {\r\n        impostor.physicsBody.sleep();\r\n    }\r\n\r\n    public wakeUpBody(impostor: PhysicsImpostor) {\r\n        impostor.physicsBody.awake();\r\n    }\r\n\r\n    public updateDistanceJoint(joint: PhysicsJoint, maxDistance: number, minDistance?: number) {\r\n        joint.physicsJoint.limitMotor.upperLimit = maxDistance;\r\n        if (minDistance !== void 0) {\r\n            joint.physicsJoint.limitMotor.lowerLimit = minDistance;\r\n        }\r\n    }\r\n\r\n    public setMotor(joint: IMotorEnabledJoint, speed: number, force?: number, motorIndex?: number) {\r\n        if (force !== undefined) {\r\n            Logger.Warn(\"OimoJS plugin currently has unexpected behavior when using setMotor with force parameter\");\r\n        } else {\r\n            force = 1e6;\r\n        }\r\n        speed *= -1;\r\n\r\n        //TODO separate rotational and transational motors.\r\n        var motor = motorIndex ? joint.physicsJoint.rotationalLimitMotor2 : joint.physicsJoint.rotationalLimitMotor1 || joint.physicsJoint.rotationalLimitMotor || joint.physicsJoint.limitMotor;\r\n        if (motor) {\r\n            motor.setMotor(speed, force);\r\n        }\r\n    }\r\n\r\n    public setLimit(joint: IMotorEnabledJoint, upperLimit: number, lowerLimit?: number, motorIndex?: number) {\r\n        //TODO separate rotational and transational motors.\r\n        var motor = motorIndex ? joint.physicsJoint.rotationalLimitMotor2 : joint.physicsJoint.rotationalLimitMotor1 || joint.physicsJoint.rotationalLimitMotor || joint.physicsJoint.limitMotor;\r\n        if (motor) {\r\n            motor.setLimit(upperLimit, lowerLimit === void 0 ? -upperLimit : lowerLimit);\r\n        }\r\n    }\r\n\r\n    public syncMeshWithImpostor(mesh: AbstractMesh, impostor: PhysicsImpostor) {\r\n        var body = impostor.physicsBody;\r\n\r\n        mesh.position.x = body.position.x;\r\n        mesh.position.y = body.position.y;\r\n        mesh.position.z = body.position.z;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            mesh.rotationQuaternion.x = body.orientation.x;\r\n            mesh.rotationQuaternion.y = body.orientation.y;\r\n            mesh.rotationQuaternion.z = body.orientation.z;\r\n            mesh.rotationQuaternion.w = body.orientation.s;\r\n        }\r\n    }\r\n\r\n    public getRadius(impostor: PhysicsImpostor): number {\r\n        return impostor.physicsBody.shapes.radius;\r\n    }\r\n\r\n    public getBoxSizeToRef(impostor: PhysicsImpostor, result: Vector3): void {\r\n        var shape = impostor.physicsBody.shapes;\r\n        result.x = shape.halfWidth * 2;\r\n        result.y = shape.halfHeight * 2;\r\n        result.z = shape.halfDepth * 2;\r\n    }\r\n\r\n    public dispose() {\r\n        this.world.clear();\r\n    }\r\n\r\n    /**\r\n     * Does a raycast in the physics world\r\n     * @param from when should the ray start?\r\n     * @param to when should the ray end?\r\n     * @returns PhysicsRaycastResult\r\n     */\r\n    public raycast(from: Vector3, to: Vector3): PhysicsRaycastResult {\r\n        Logger.Warn(\"raycast is not currently supported by the Oimo physics plugin\");\r\n\r\n        this._raycastResult.reset(from, to);\r\n\r\n        return this._raycastResult;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}