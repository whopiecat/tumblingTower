{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector\";\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\nimport { AxisDragGizmo } from \"../Gizmos/axisDragGizmo\";\nimport { Color3 } from '../Maths/math.color';\n/**\r\n     * The Axes viewer will show 3 axes in a specific point in space\r\n     */\n\nvar AxesViewer =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new AxesViewer\r\n   * @param scene defines the hosting scene\r\n   * @param scaleLines defines a number used to scale line length (1 by default)\r\n   * @param renderingGroupId defines a number used to set the renderingGroupId of the meshes (2 by default)\r\n   * @param xAxis defines the node hierarchy used to render the x-axis\r\n   * @param yAxis defines the node hierarchy used to render the y-axis\r\n   * @param zAxis defines the node hierarchy used to render the z-axis\r\n   */\n  function AxesViewer(scene, scaleLines, renderingGroupId, xAxis, yAxis, zAxis) {\n    if (scaleLines === void 0) {\n      scaleLines = 1;\n    }\n\n    if (renderingGroupId === void 0) {\n      renderingGroupId = 2;\n    }\n\n    this._scaleLinesFactor = 4;\n    this._instanced = false;\n    /**\r\n     * Gets the hosting scene\r\n     */\n\n    this.scene = null;\n    /**\r\n     * Gets or sets a number used to scale line length\r\n     */\n\n    this.scaleLines = 1;\n    this.scaleLines = scaleLines;\n\n    if (!xAxis) {\n      var redColoredMaterial = new StandardMaterial(\"\", scene);\n      redColoredMaterial.disableLighting = true;\n      redColoredMaterial.emissiveColor = Color3.Red().scale(0.5);\n      xAxis = AxisDragGizmo._CreateArrow(scene, redColoredMaterial);\n    }\n\n    if (!yAxis) {\n      var greenColoredMaterial = new StandardMaterial(\"\", scene);\n      greenColoredMaterial.disableLighting = true;\n      greenColoredMaterial.emissiveColor = Color3.Green().scale(0.5);\n      yAxis = AxisDragGizmo._CreateArrow(scene, greenColoredMaterial);\n    }\n\n    if (!zAxis) {\n      var blueColoredMaterial = new StandardMaterial(\"\", scene);\n      blueColoredMaterial.disableLighting = true;\n      blueColoredMaterial.emissiveColor = Color3.Blue().scale(0.5);\n      zAxis = AxisDragGizmo._CreateArrow(scene, blueColoredMaterial);\n    }\n\n    this._xAxis = xAxis;\n\n    this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    this._yAxis = yAxis;\n\n    this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    this._zAxis = zAxis;\n\n    this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    if (renderingGroupId != null) {\n      AxesViewer._SetRenderingGroupId(this._xAxis, renderingGroupId);\n\n      AxesViewer._SetRenderingGroupId(this._yAxis, renderingGroupId);\n\n      AxesViewer._SetRenderingGroupId(this._zAxis, renderingGroupId);\n    }\n\n    this.scene = scene;\n    this.update(new Vector3(), Vector3.Right(), Vector3.Up(), Vector3.Forward());\n  }\n\n  Object.defineProperty(AxesViewer.prototype, \"xAxis\", {\n    /** Gets the node hierarchy used to render x-axis */\n    get: function () {\n      return this._xAxis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AxesViewer.prototype, \"yAxis\", {\n    /** Gets the node hierarchy used to render y-axis */\n    get: function () {\n      return this._yAxis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AxesViewer.prototype, \"zAxis\", {\n    /** Gets the node hierarchy used to render z-axis */\n    get: function () {\n      return this._zAxis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Force the viewer to update\r\n   * @param position defines the position of the viewer\r\n   * @param xaxis defines the x axis of the viewer\r\n   * @param yaxis defines the y axis of the viewer\r\n   * @param zaxis defines the z axis of the viewer\r\n   */\n\n  AxesViewer.prototype.update = function (position, xaxis, yaxis, zaxis) {\n    this._xAxis.position.copyFrom(position);\n\n    this._xAxis.setDirection(xaxis);\n\n    this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    this._yAxis.position.copyFrom(position);\n\n    this._yAxis.setDirection(yaxis);\n\n    this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    this._zAxis.position.copyFrom(position);\n\n    this._zAxis.setDirection(zaxis);\n\n    this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n  };\n  /**\r\n   * Creates an instance of this axes viewer.\r\n   * @returns a new axes viewer with instanced meshes\r\n   */\n\n\n  AxesViewer.prototype.createInstance = function () {\n    var xAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._xAxis);\n\n    var yAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._yAxis);\n\n    var zAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._zAxis);\n\n    var axesViewer = new AxesViewer(this.scene, this.scaleLines, null, xAxis, yAxis, zAxis);\n    axesViewer._instanced = true;\n    return axesViewer;\n  };\n  /** Releases resources */\n\n\n  AxesViewer.prototype.dispose = function () {\n    if (this._xAxis) {\n      this._xAxis.dispose(false, !this._instanced);\n    }\n\n    if (this._yAxis) {\n      this._yAxis.dispose(false, !this._instanced);\n    }\n\n    if (this._zAxis) {\n      this._zAxis.dispose(false, !this._instanced);\n    }\n\n    this.scene = null;\n  };\n\n  AxesViewer._SetRenderingGroupId = function (node, id) {\n    node.getChildMeshes().forEach(function (mesh) {\n      mesh.renderingGroupId = id;\n    });\n  };\n\n  return AxesViewer;\n}();\n\nexport { AxesViewer };","map":{"version":3,"sources":["../../../sourceES6/core/Debug/axesViewer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector3 } from \"../Maths/math.vector\";\r\nimport { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { AxisDragGizmo } from \"../Gizmos/axisDragGizmo\";\r\nimport { Color3 } from '../Maths/math.color';\r\n\r\n/**\r\n     * The Axes viewer will show 3 axes in a specific point in space\r\n     */\r\nexport class AxesViewer {\r\n    private _xAxis: TransformNode;\r\n    private _yAxis: TransformNode;\r\n    private _zAxis: TransformNode;\r\n    private _scaleLinesFactor = 4;\r\n    private _instanced = false;\r\n\r\n    /**\r\n     * Gets the hosting scene\r\n     */\r\n    public scene: Nullable<Scene> = null;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale line length\r\n     */\r\n    public scaleLines = 1;\r\n\r\n    /** Gets the node hierarchy used to render x-axis */\r\n    public get xAxis(): TransformNode {\r\n        return this._xAxis;\r\n    }\r\n\r\n    /** Gets the node hierarchy used to render y-axis */\r\n    public get yAxis(): TransformNode {\r\n        return this._yAxis;\r\n    }\r\n\r\n    /** Gets the node hierarchy used to render z-axis */\r\n    public get zAxis(): TransformNode {\r\n        return this._zAxis;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AxesViewer\r\n     * @param scene defines the hosting scene\r\n     * @param scaleLines defines a number used to scale line length (1 by default)\r\n     * @param renderingGroupId defines a number used to set the renderingGroupId of the meshes (2 by default)\r\n     * @param xAxis defines the node hierarchy used to render the x-axis\r\n     * @param yAxis defines the node hierarchy used to render the y-axis\r\n     * @param zAxis defines the node hierarchy used to render the z-axis\r\n     */\r\n    constructor(scene: Scene, scaleLines = 1, renderingGroupId: Nullable<number> = 2, xAxis?: TransformNode, yAxis?: TransformNode, zAxis?: TransformNode) {\r\n        this.scaleLines = scaleLines;\r\n\r\n        if (!xAxis) {\r\n            var redColoredMaterial = new StandardMaterial(\"\", scene);\r\n            redColoredMaterial.disableLighting = true;\r\n            redColoredMaterial.emissiveColor = Color3.Red().scale(0.5);\r\n            xAxis = AxisDragGizmo._CreateArrow(scene, redColoredMaterial);\r\n        }\r\n\r\n        if (!yAxis) {\r\n            var greenColoredMaterial = new StandardMaterial(\"\", scene);\r\n            greenColoredMaterial.disableLighting = true;\r\n            greenColoredMaterial.emissiveColor = Color3.Green().scale(0.5);\r\n            yAxis = AxisDragGizmo._CreateArrow(scene, greenColoredMaterial);\r\n        }\r\n\r\n        if (!zAxis) {\r\n            var blueColoredMaterial = new StandardMaterial(\"\", scene);\r\n            blueColoredMaterial.disableLighting = true;\r\n            blueColoredMaterial.emissiveColor = Color3.Blue().scale(0.5);\r\n            zAxis = AxisDragGizmo._CreateArrow(scene, blueColoredMaterial);\r\n        }\r\n\r\n        this._xAxis = xAxis;\r\n        this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n        this._yAxis = yAxis;\r\n        this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n        this._zAxis = zAxis;\r\n        this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n\r\n        if (renderingGroupId != null) {\r\n            AxesViewer._SetRenderingGroupId(this._xAxis, renderingGroupId);\r\n            AxesViewer._SetRenderingGroupId(this._yAxis, renderingGroupId);\r\n            AxesViewer._SetRenderingGroupId(this._zAxis, renderingGroupId);\r\n        }\r\n\r\n        this.scene = scene;\r\n        this.update(new Vector3(), Vector3.Right(), Vector3.Up(), Vector3.Forward());\r\n    }\r\n\r\n    /**\r\n     * Force the viewer to update\r\n     * @param position defines the position of the viewer\r\n     * @param xaxis defines the x axis of the viewer\r\n     * @param yaxis defines the y axis of the viewer\r\n     * @param zaxis defines the z axis of the viewer\r\n     */\r\n    public update(position: Vector3, xaxis: Vector3, yaxis: Vector3, zaxis: Vector3): void {\r\n        this._xAxis.position.copyFrom(position);\r\n        this._xAxis.setDirection(xaxis);\r\n        this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n\r\n        this._yAxis.position.copyFrom(position);\r\n        this._yAxis.setDirection(yaxis);\r\n        this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n\r\n        this._zAxis.position.copyFrom(position);\r\n        this._zAxis.setDirection(zaxis);\r\n        this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of this axes viewer.\r\n     * @returns a new axes viewer with instanced meshes\r\n     */\r\n    public createInstance(): AxesViewer {\r\n        const xAxis = AxisDragGizmo._CreateArrowInstance(this.scene!, this._xAxis);\r\n        const yAxis = AxisDragGizmo._CreateArrowInstance(this.scene!, this._yAxis);\r\n        const zAxis = AxisDragGizmo._CreateArrowInstance(this.scene!, this._zAxis);\r\n        const axesViewer = new AxesViewer(this.scene!, this.scaleLines, null, xAxis, yAxis, zAxis);\r\n        axesViewer._instanced = true;\r\n        return axesViewer;\r\n    }\r\n\r\n    /** Releases resources */\r\n    public dispose() {\r\n        if (this._xAxis) {\r\n            this._xAxis.dispose(false, !this._instanced);\r\n        }\r\n\r\n        if (this._yAxis) {\r\n            this._yAxis.dispose(false, !this._instanced);\r\n        }\r\n\r\n        if (this._zAxis) {\r\n            this._zAxis.dispose(false, !this._instanced);\r\n        }\r\n\r\n        this.scene = null;\r\n    }\r\n\r\n    private static _SetRenderingGroupId(node: TransformNode, id: number) {\r\n        node.getChildMeshes().forEach((mesh) => {\r\n            mesh.renderingGroupId = id;\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}