{"ast":null,"code":"/**\r\n * Gather the list of clipboard event types as constants.\r\n */\nvar ClipboardEventTypes =\n/** @class */\nfunction () {\n  function ClipboardEventTypes() {}\n  /**\r\n   * The clipboard event is fired when a copy command is active (pressed).\r\n   */\n\n\n  ClipboardEventTypes.COPY = 0x01; //\n\n  /**\r\n   *  The clipboard event is fired when a cut command is active (pressed).\r\n   */\n\n  ClipboardEventTypes.CUT = 0x02;\n  /**\r\n   * The clipboard event is fired when a paste command is active (pressed).\r\n   */\n\n  ClipboardEventTypes.PASTE = 0x03;\n  return ClipboardEventTypes;\n}();\n\nexport { ClipboardEventTypes };\n/**\r\n * This class is used to store clipboard related info for the onClipboardObservable event.\r\n */\n\nvar ClipboardInfo =\n/** @class */\nfunction () {\n  /**\r\n   *Creates an instance of ClipboardInfo.\r\n   * @param type Defines the type of event (BABYLON.ClipboardEventTypes)\r\n   * @param event Defines the related dom event\r\n   */\n  function ClipboardInfo(\n  /**\r\n   * Defines the type of event (BABYLON.ClipboardEventTypes)\r\n   */\n  type,\n  /**\r\n   * Defines the related dom event\r\n   */\n  event) {\n    this.type = type;\n    this.event = event;\n  }\n  /**\r\n   *  Get the clipboard event's type from the keycode.\r\n   * @param keyCode Defines the keyCode for the current keyboard event.\r\n   * @return {number}\r\n   */\n\n\n  ClipboardInfo.GetTypeFromCharacter = function (keyCode) {\n    var charCode = keyCode; //TODO: add codes for extended ASCII\n\n    switch (charCode) {\n      case 67:\n        return ClipboardEventTypes.COPY;\n\n      case 86:\n        return ClipboardEventTypes.PASTE;\n\n      case 88:\n        return ClipboardEventTypes.CUT;\n\n      default:\n        return -1;\n    }\n  };\n\n  return ClipboardInfo;\n}();\n\nexport { ClipboardInfo };","map":{"version":3,"sources":["../../../sourceES6/core/Events/clipboardEvents.ts"],"names":[],"mappings":"AAAA;;;AAGA,IAAA,mBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,mBAAA,GAAA,CAcC;AAbG;;;;;AAGuB,EAAA,mBAAA,CAAA,IAAA,GAAO,IAAP,CAJ3B,CAIwC;;AACpC;;;;AAGuB,EAAA,mBAAA,CAAA,GAAA,GAAM,IAAN;AAEvB;;;;AAGuB,EAAA,mBAAA,CAAA,KAAA,GAAQ,IAAR;AAC3B,SAAA,mBAAA;AAAC,CAdD,EAAA;;SAAa,mB;AAeb;;;;AAGA,IAAA,aAAA;AAAA;AAAA,YAAA;AACI;;;;;AAKA,WAAA,aAAA;AACI;;;AAGO,EAAA,IAJX;AAKI;;;AAGO,EAAA,KARX,EAQgC;AAJrB,SAAA,IAAA,GAAA,IAAA;AAIA,SAAA,KAAA,GAAA,KAAA;AACV;AAED;;;;;;;AAKc,EAAA,aAAA,CAAA,oBAAA,GAAd,UAAmC,OAAnC,EAAkD;AAC9C,QAAI,QAAQ,GAAG,OAAf,CAD8C,CAE9C;;AACA,YAAQ,QAAR;AACI,WAAK,EAAL;AAAS,eAAO,mBAAmB,CAAC,IAA3B;;AACT,WAAK,EAAL;AAAS,eAAO,mBAAmB,CAAC,KAA3B;;AACT,WAAK,EAAL;AAAS,eAAO,mBAAmB,CAAC,GAA3B;;AACT;AAAS,eAAO,CAAC,CAAR;AAJb;AAMH,GATa;;AAUlB,SAAA,aAAA;AAAC,CAhCD,EAAA","sourcesContent":["/**\n * Gather the list of clipboard event types as constants.\n */\nexport class ClipboardEventTypes {\n    /**\n     * The clipboard event is fired when a copy command is active (pressed).\n     */\n    public static readonly COPY = 0x01; //\n    /**\n     *  The clipboard event is fired when a cut command is active (pressed).\n     */\n    public static readonly CUT = 0x02;\n\n    /**\n     * The clipboard event is fired when a paste command is active (pressed).\n     */\n    public static readonly PASTE = 0x03;\n}\n/**\n * This class is used to store clipboard related info for the onClipboardObservable event.\n */\nexport class ClipboardInfo {\n    /**\n     *Creates an instance of ClipboardInfo.\n     * @param type Defines the type of event (BABYLON.ClipboardEventTypes)\n     * @param event Defines the related dom event\n     */\n    constructor(\n        /**\n         * Defines the type of event (BABYLON.ClipboardEventTypes)\n         */\n        public type: number,\n        /**\n         * Defines the related dom event\n         */\n        public event: ClipboardEvent) {\n    }\n\n    /**\n     *  Get the clipboard event's type from the keycode.\n     * @param keyCode Defines the keyCode for the current keyboard event.\n     * @return {number}\n     */\n    public static GetTypeFromCharacter(keyCode: number): number {\n        let charCode = keyCode;\n        //TODO: add codes for extended ASCII\n        switch (charCode) {\n            case 67: return ClipboardEventTypes.COPY;\n            case 86: return ClipboardEventTypes.PASTE;\n            case 88: return ClipboardEventTypes.CUT;\n            default: return -1;\n        }\n    }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}