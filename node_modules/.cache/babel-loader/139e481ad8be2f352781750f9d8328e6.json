{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\nimport { Tools } from '../../Misc/tools';\n/**\r\n * Manage the keyboard inputs to control the movement of a follow camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FollowCameraKeyboardMoveInput =\n/** @class */\nfunction () {\n  function FollowCameraKeyboardMoveInput() {\n    /**\r\n     * Defines the list of key codes associated with the up action (increase heightOffset)\r\n     */\n    this.keysHeightOffsetIncr = [38];\n    /**\r\n     * Defines the list of key codes associated with the down action (decrease heightOffset)\r\n     */\n\n    this.keysHeightOffsetDecr = [40];\n    /**\r\n     * Defines whether the Alt modifier key is required to move up/down (alter heightOffset)\r\n     */\n\n    this.keysHeightOffsetModifierAlt = false;\n    /**\r\n     * Defines whether the Ctrl modifier key is required to move up/down (alter heightOffset)\r\n     */\n\n    this.keysHeightOffsetModifierCtrl = false;\n    /**\r\n     * Defines whether the Shift modifier key is required to move up/down (alter heightOffset)\r\n     */\n\n    this.keysHeightOffsetModifierShift = false;\n    /**\r\n     * Defines the list of key codes associated with the left action (increase rotationOffset)\r\n     */\n\n    this.keysRotationOffsetIncr = [37];\n    /**\r\n     * Defines the list of key codes associated with the right action (decrease rotationOffset)\r\n     */\n\n    this.keysRotationOffsetDecr = [39];\n    /**\r\n     * Defines whether the Alt modifier key is required to move left/right (alter rotationOffset)\r\n     */\n\n    this.keysRotationOffsetModifierAlt = false;\n    /**\r\n     * Defines whether the Ctrl modifier key is required to move left/right (alter rotationOffset)\r\n     */\n\n    this.keysRotationOffsetModifierCtrl = false;\n    /**\r\n     * Defines whether the Shift modifier key is required to move left/right (alter rotationOffset)\r\n     */\n\n    this.keysRotationOffsetModifierShift = false;\n    /**\r\n     * Defines the list of key codes associated with the zoom-in action (decrease radius)\r\n     */\n\n    this.keysRadiusIncr = [40];\n    /**\r\n     * Defines the list of key codes associated with the zoom-out action (increase radius)\r\n     */\n\n    this.keysRadiusDecr = [38];\n    /**\r\n     * Defines whether the Alt modifier key is required to zoom in/out (alter radius value)\r\n     */\n\n    this.keysRadiusModifierAlt = true;\n    /**\r\n     * Defines whether the Ctrl modifier key is required to zoom in/out (alter radius value)\r\n     */\n\n    this.keysRadiusModifierCtrl = false;\n    /**\r\n     * Defines whether the Shift modifier key is required to zoom in/out (alter radius value)\r\n     */\n\n    this.keysRadiusModifierShift = false;\n    /**\r\n     * Defines the rate of change of heightOffset.\r\n     */\n\n    this.heightSensibility = 1;\n    /**\r\n     * Defines the rate of change of rotationOffset.\r\n     */\n\n    this.rotationSensibility = 1;\n    /**\r\n     * Defines the rate of change of radius.\r\n     */\n\n    this.radiusSensibility = 1;\n    this._keys = new Array();\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this;\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n      _this._keys = [];\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n      var evt = info.event;\n\n      if (!evt.metaKey) {\n        if (info.type === KeyboardEventTypes.KEYDOWN) {\n          _this._ctrlPressed = evt.ctrlKey;\n          _this._altPressed = evt.altKey;\n          _this._shiftPressed = evt.shiftKey;\n\n          if (_this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 || _this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 || _this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 || _this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 || _this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 || _this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index === -1) {\n              _this._keys.push(evt.keyCode);\n            }\n\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        } else {\n          if (_this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 || _this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 || _this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 || _this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 || _this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 || _this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index >= 0) {\n              _this._keys.splice(index, 1);\n            }\n\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.detachControl = function (ignored) {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n\n    this._keys = [];\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.checkInputs = function () {\n    var _this = this;\n\n    if (this._onKeyboardObserver) {\n      this._keys.forEach(function (keyCode) {\n        if (_this.keysHeightOffsetIncr.indexOf(keyCode) !== -1 && _this._modifierHeightOffset()) {\n          _this.camera.heightOffset += _this.heightSensibility;\n        } else if (_this.keysHeightOffsetDecr.indexOf(keyCode) !== -1 && _this._modifierHeightOffset()) {\n          _this.camera.heightOffset -= _this.heightSensibility;\n        } else if (_this.keysRotationOffsetIncr.indexOf(keyCode) !== -1 && _this._modifierRotationOffset()) {\n          _this.camera.rotationOffset += _this.rotationSensibility;\n          _this.camera.rotationOffset %= 360;\n        } else if (_this.keysRotationOffsetDecr.indexOf(keyCode) !== -1 && _this._modifierRotationOffset()) {\n          _this.camera.rotationOffset -= _this.rotationSensibility;\n          _this.camera.rotationOffset %= 360;\n        } else if (_this.keysRadiusIncr.indexOf(keyCode) !== -1 && _this._modifierRadius()) {\n          _this.camera.radius += _this.radiusSensibility;\n        } else if (_this.keysRadiusDecr.indexOf(keyCode) !== -1 && _this._modifierRadius()) {\n          _this.camera.radius -= _this.radiusSensibility;\n        }\n      });\n    }\n  };\n  /**\r\n   * Gets the class name of the current input.\r\n   * @returns the class name\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.getClassName = function () {\n    return \"FollowCameraKeyboardMoveInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.getSimpleName = function () {\n    return \"keyboard\";\n  };\n  /**\r\n   * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\r\n   * allow modification of the heightOffset value.\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype._modifierHeightOffset = function () {\n    return this.keysHeightOffsetModifierAlt === this._altPressed && this.keysHeightOffsetModifierCtrl === this._ctrlPressed && this.keysHeightOffsetModifierShift === this._shiftPressed;\n  };\n  /**\r\n   * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\r\n   * allow modification of the rotationOffset value.\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype._modifierRotationOffset = function () {\n    return this.keysRotationOffsetModifierAlt === this._altPressed && this.keysRotationOffsetModifierCtrl === this._ctrlPressed && this.keysRotationOffsetModifierShift === this._shiftPressed;\n  };\n  /**\r\n   * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\r\n   * allow modification of the radius value.\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype._modifierRadius = function () {\n    return this.keysRadiusModifierAlt === this._altPressed && this.keysRadiusModifierCtrl === this._ctrlPressed && this.keysRadiusModifierShift === this._shiftPressed;\n  };\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetIncr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetDecr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierAlt\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierCtrl\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierShift\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetIncr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetDecr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierAlt\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierCtrl\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierShift\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusIncr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusDecr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierAlt\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierCtrl\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierShift\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"heightSensibility\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"rotationSensibility\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"radiusSensibility\", void 0);\n\n  return FollowCameraKeyboardMoveInput;\n}();\n\nexport { FollowCameraKeyboardMoveInput };\nCameraInputTypes[\"FollowCameraKeyboardMoveInput\"] = FollowCameraKeyboardMoveInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/followCameraKeyboardMoveInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { ICameraInput, CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { FollowCamera } from \"../../Cameras/followCamera\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { Nullable } from \"../../types\";\nimport { Observer } from \"../../Misc/observable\";\nimport { Engine } from \"../../Engines/engine\";\nimport { KeyboardInfo, KeyboardEventTypes } from \"../../Events/keyboardEvents\";\nimport { Scene } from \"../../scene\";\nimport { Tools } from '../../Misc/tools';\n\n/**\n * Manage the keyboard inputs to control the movement of a follow camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\nexport class FollowCameraKeyboardMoveInput implements ICameraInput<FollowCamera> {\n    /**\n     * Defines the camera the input is attached to.\n     */\n    public camera: FollowCamera;\n\n    /**\n     * Defines the list of key codes associated with the up action (increase heightOffset)\n     */\n    @serialize()\n    public keysHeightOffsetIncr = [38];\n\n    /**\n     * Defines the list of key codes associated with the down action (decrease heightOffset)\n     */\n    @serialize()\n    public keysHeightOffsetDecr = [40];\n\n    /**\n     * Defines whether the Alt modifier key is required to move up/down (alter heightOffset)\n     */\n    @serialize()\n    public keysHeightOffsetModifierAlt: boolean = false;\n\n    /**\n     * Defines whether the Ctrl modifier key is required to move up/down (alter heightOffset)\n     */\n    @serialize()\n    public keysHeightOffsetModifierCtrl: boolean = false;\n\n    /**\n     * Defines whether the Shift modifier key is required to move up/down (alter heightOffset)\n     */\n    @serialize()\n    public keysHeightOffsetModifierShift: boolean = false;\n\n    /**\n     * Defines the list of key codes associated with the left action (increase rotationOffset)\n     */\n    @serialize()\n    public keysRotationOffsetIncr = [37];\n\n    /**\n     * Defines the list of key codes associated with the right action (decrease rotationOffset)\n     */\n    @serialize()\n    public keysRotationOffsetDecr = [39];\n\n    /**\n     * Defines whether the Alt modifier key is required to move left/right (alter rotationOffset)\n     */\n    @serialize()\n    public keysRotationOffsetModifierAlt: boolean = false;\n\n    /**\n     * Defines whether the Ctrl modifier key is required to move left/right (alter rotationOffset)\n     */\n    @serialize()\n    public keysRotationOffsetModifierCtrl: boolean = false;\n\n    /**\n     * Defines whether the Shift modifier key is required to move left/right (alter rotationOffset)\n     */\n    @serialize()\n    public keysRotationOffsetModifierShift: boolean = false;\n\n    /**\n     * Defines the list of key codes associated with the zoom-in action (decrease radius)\n     */\n    @serialize()\n    public keysRadiusIncr = [40];\n\n    /**\n     * Defines the list of key codes associated with the zoom-out action (increase radius)\n     */\n    @serialize()\n    public keysRadiusDecr = [38];\n\n    /**\n     * Defines whether the Alt modifier key is required to zoom in/out (alter radius value)\n     */\n    @serialize()\n    public keysRadiusModifierAlt: boolean = true;\n\n    /**\n     * Defines whether the Ctrl modifier key is required to zoom in/out (alter radius value)\n     */\n    @serialize()\n    public keysRadiusModifierCtrl: boolean = false;\n\n    /**\n     * Defines whether the Shift modifier key is required to zoom in/out (alter radius value)\n     */\n    @serialize()\n    public keysRadiusModifierShift: boolean = false;\n\n    /**\n     * Defines the rate of change of heightOffset.\n     */\n    @serialize()\n    public heightSensibility: number = 1;\n\n    /**\n     * Defines the rate of change of rotationOffset.\n     */\n    @serialize()\n    public rotationSensibility: number = 1;\n\n    /**\n     * Defines the rate of change of radius.\n     */\n    @serialize()\n    public radiusSensibility: number = 1;\n\n    private _keys = new Array<number>();\n    private _ctrlPressed: boolean;\n    private _altPressed: boolean;\n    private _shiftPressed: boolean;\n    private _onCanvasBlurObserver: Nullable<Observer<Engine>>;\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\n    private _engine: Engine;\n    private _scene: Scene;\n\n    /**\n     * Attach the input controls to a specific dom element to get the input from.\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n     */\n    public attachControl(noPreventDefault?: boolean): void {\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n        if (this._onCanvasBlurObserver) {\n            return;\n        }\n\n        this._scene = this.camera.getScene();\n        this._engine = this._scene.getEngine();\n\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\n            this._keys = [];\n        });\n\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\n            let evt = info.event;\n            if (!evt.metaKey) {\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\n                    this._ctrlPressed = evt.ctrlKey;\n                    this._altPressed = evt.altKey;\n                    this._shiftPressed = evt.shiftKey;\n\n                    if (this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n                        var index = this._keys.indexOf(evt.keyCode);\n\n                        if (index === -1) {\n                            this._keys.push(evt.keyCode);\n                        }\n\n                        if (evt.preventDefault) {\n                            if (!noPreventDefault) {\n                                evt.preventDefault();\n                            }\n                        }\n                    }\n                } else {\n                    if (this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 ||\n                        this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n                        var index = this._keys.indexOf(evt.keyCode);\n\n                        if (index >= 0) {\n                            this._keys.splice(index, 1);\n                        }\n\n                        if (evt.preventDefault) {\n                            if (!noPreventDefault) {\n                                evt.preventDefault();\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Detach the current controls from the specified dom element.\n     */\n    public detachControl(): void;\n\n    /**\n     * Detach the current controls from the specified dom element.\n     * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\n     */\n    public detachControl(ignored?: any): void {\n        if (this._scene) {\n            if (this._onKeyboardObserver) {\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n            }\n            if (this._onCanvasBlurObserver) {\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n            }\n            this._onKeyboardObserver = null;\n            this._onCanvasBlurObserver = null;\n        }\n\n        this._keys = [];\n    }\n\n    /**\n     * Update the current camera state depending on the inputs that have been used this frame.\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n     */\n    public checkInputs(): void {\n        if (this._onKeyboardObserver) {\n            this._keys.forEach((keyCode) => {\n                if (this.keysHeightOffsetIncr.indexOf(keyCode) !== -1 &&\n                           this._modifierHeightOffset()) {\n                    this.camera.heightOffset += this.heightSensibility;\n                } else if (this.keysHeightOffsetDecr.indexOf(keyCode) !== -1 &&\n                           this._modifierHeightOffset()) {\n                    this.camera.heightOffset -= this.heightSensibility;\n                } else if (this.keysRotationOffsetIncr.indexOf(keyCode) !== -1 &&\n                           this._modifierRotationOffset()) {\n                    this.camera.rotationOffset += this.rotationSensibility;\n                    this.camera.rotationOffset %= 360;\n                } else if (this.keysRotationOffsetDecr.indexOf(keyCode) !== -1 &&\n                           this._modifierRotationOffset()) {\n                    this.camera.rotationOffset -= this.rotationSensibility;\n                    this.camera.rotationOffset %= 360;\n                } else if (this.keysRadiusIncr.indexOf(keyCode) !== -1 &&\n                           this._modifierRadius()) {\n                    this.camera.radius += this.radiusSensibility;\n                } else if (this.keysRadiusDecr.indexOf(keyCode) !== -1 &&\n                           this._modifierRadius()) {\n                    this.camera.radius -= this.radiusSensibility;\n                }\n            });\n        }\n    }\n\n    /**\n     * Gets the class name of the current input.\n     * @returns the class name\n     */\n    public getClassName(): string {\n        return \"FollowCameraKeyboardMoveInput\";\n    }\n\n    /**\n     * Get the friendly name associated with the input class.\n     * @returns the input friendly name\n     */\n    public getSimpleName(): string {\n        return \"keyboard\";\n    }\n\n    /**\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n     * allow modification of the heightOffset value.\n     */\n    private _modifierHeightOffset(): boolean {\n        return (this.keysHeightOffsetModifierAlt === this._altPressed &&\n                this.keysHeightOffsetModifierCtrl === this._ctrlPressed &&\n                this.keysHeightOffsetModifierShift === this._shiftPressed);\n    }\n\n    /**\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n     * allow modification of the rotationOffset value.\n     */\n    private _modifierRotationOffset(): boolean {\n        return (this.keysRotationOffsetModifierAlt === this._altPressed &&\n                this.keysRotationOffsetModifierCtrl === this._ctrlPressed &&\n                this.keysRotationOffsetModifierShift === this._shiftPressed);\n    }\n\n    /**\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n     * allow modification of the radius value.\n     */\n    private _modifierRadius(): boolean {\n        return (this.keysRadiusModifierAlt === this._altPressed &&\n                this.keysRadiusModifierCtrl === this._ctrlPressed &&\n                this.keysRadiusModifierShift === this._shiftPressed);\n    }\n}\n\n(<any>CameraInputTypes)[\"FollowCameraKeyboardMoveInput\"] = FollowCameraKeyboardMoveInput;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}