{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { BaseCameraPointersInput } from \"../../Cameras/Inputs/BaseCameraPointersInput\";\n/**\r\n * Manage the pointers inputs to control an follow camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FollowCameraPointersInput =\n/** @class */\nfunction (_super) {\n  __extends(FollowCameraPointersInput, _super);\n\n  function FollowCameraPointersInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Defines the pointer angular sensibility along the X axis or how fast is\r\n     * the camera rotating.\r\n     * A negative number will reverse the axis direction.\r\n     */\n\n\n    _this.angularSensibilityX = 1;\n    /**\r\n     * Defines the pointer angular sensibility along the Y axis or how fast is\r\n     * the camera rotating.\r\n     * A negative number will reverse the axis direction.\r\n     */\n\n    _this.angularSensibilityY = 1;\n    /**\r\n     * Defines the pointer pinch precision or how fast is the camera zooming.\r\n     * A negative number will reverse the axis direction.\r\n     */\n\n    _this.pinchPrecision = 10000.0;\n    /**\r\n     * pinchDeltaPercentage will be used instead of pinchPrecision if different\r\n     * from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when\r\n     * pinch zoom is used.\r\n     */\n\n    _this.pinchDeltaPercentage = 0;\n    /**\r\n     * Pointer X axis controls zoom. (X axis modifies camera.radius value.)\r\n     */\n\n    _this.axisXControlRadius = false;\n    /**\r\n     * Pointer X axis controls height. (X axis modifies camera.heightOffset value.)\r\n     */\n\n    _this.axisXControlHeight = false;\n    /**\r\n     * Pointer X axis controls angle. (X axis modifies camera.rotationOffset value.)\r\n     */\n\n    _this.axisXControlRotation = true;\n    /**\r\n     * Pointer Y axis controls zoom. (Y axis modifies camera.radius value.)\r\n     */\n\n    _this.axisYControlRadius = false;\n    /**\r\n     * Pointer Y axis controls height. (Y axis modifies camera.heightOffset value.)\r\n     */\n\n    _this.axisYControlHeight = true;\n    /**\r\n     * Pointer Y axis controls angle. (Y axis modifies camera.rotationOffset value.)\r\n     */\n\n    _this.axisYControlRotation = false;\n    /**\r\n     * Pinch controls zoom. (Pinch modifies camera.radius value.)\r\n     */\n\n    _this.axisPinchControlRadius = true;\n    /**\r\n     * Pinch controls height. (Pinch modifies camera.heightOffset value.)\r\n     */\n\n    _this.axisPinchControlHeight = false;\n    /**\r\n     * Pinch controls angle. (Pinch modifies camera.rotationOffset value.)\r\n     */\n\n    _this.axisPinchControlRotation = false;\n    /**\r\n     * Log error messages if basic misconfiguration has occurred.\r\n     */\n\n    _this.warningEnable = true;\n    /* Check for obvious misconfiguration. */\n\n    _this._warningCounter = 0;\n    return _this;\n  }\n  /**\r\n   * Gets the class name of the current input.\r\n   * @returns the class name\r\n   */\n\n\n  FollowCameraPointersInput.prototype.getClassName = function () {\n    return \"FollowCameraPointersInput\";\n  };\n\n  FollowCameraPointersInput.prototype.onTouch = function (pointA, offsetX, offsetY) {\n    this._warning();\n\n    if (this.axisXControlRotation) {\n      this.camera.rotationOffset += offsetX / this.angularSensibilityX;\n    } else if (this.axisYControlRotation) {\n      this.camera.rotationOffset += offsetY / this.angularSensibilityX;\n    }\n\n    if (this.axisXControlHeight) {\n      this.camera.heightOffset += offsetX / this.angularSensibilityY;\n    } else if (this.axisYControlHeight) {\n      this.camera.heightOffset += offsetY / this.angularSensibilityY;\n    }\n\n    if (this.axisXControlRadius) {\n      this.camera.radius -= offsetX / this.angularSensibilityY;\n    } else if (this.axisYControlRadius) {\n      this.camera.radius -= offsetY / this.angularSensibilityY;\n    }\n  };\n\n  FollowCameraPointersInput.prototype.onMultiTouch = function (pointA, pointB, previousPinchSquaredDistance, pinchSquaredDistance, previousMultiTouchPanPosition, multiTouchPanPosition) {\n    if (previousPinchSquaredDistance === 0 && previousMultiTouchPanPosition === null) {\n      // First time this method is called for new pinch.\n      // Next time this is called there will be a\n      // previousPinchSquaredDistance and pinchSquaredDistance to compare.\n      return;\n    }\n\n    if (pinchSquaredDistance === 0 && multiTouchPanPosition === null) {\n      // Last time this method is called at the end of a pinch.\n      return;\n    }\n\n    var pinchDelta = (pinchSquaredDistance - previousPinchSquaredDistance) / (this.pinchPrecision * (this.angularSensibilityX + this.angularSensibilityY) / 2);\n\n    if (this.pinchDeltaPercentage) {\n      pinchDelta *= 0.01 * this.pinchDeltaPercentage;\n\n      if (this.axisPinchControlRotation) {\n        this.camera.rotationOffset += pinchDelta * this.camera.rotationOffset;\n      }\n\n      if (this.axisPinchControlHeight) {\n        this.camera.heightOffset += pinchDelta * this.camera.heightOffset;\n      }\n\n      if (this.axisPinchControlRadius) {\n        this.camera.radius -= pinchDelta * this.camera.radius;\n      }\n    } else {\n      if (this.axisPinchControlRotation) {\n        this.camera.rotationOffset += pinchDelta;\n      }\n\n      if (this.axisPinchControlHeight) {\n        this.camera.heightOffset += pinchDelta;\n      }\n\n      if (this.axisPinchControlRadius) {\n        this.camera.radius -= pinchDelta;\n      }\n    }\n  };\n\n  FollowCameraPointersInput.prototype._warning = function () {\n    if (!this.warningEnable || this._warningCounter++ % 100 !== 0) {\n      return;\n    }\n\n    var warn = \"It probably only makes sense to control ONE camera \" + \"property with each pointer axis. Set 'warningEnable = false' \" + \"if you are sure. Currently enabled: \";\n    console.assert(this.axisXControlRotation + this.axisXControlHeight + this.axisXControlRadius <= 1, warn + \"axisXControlRotation: \" + this.axisXControlRotation + \", axisXControlHeight: \" + this.axisXControlHeight + \", axisXControlRadius: \" + this.axisXControlRadius);\n    console.assert(this.axisYControlRotation + this.axisYControlHeight + this.axisYControlRadius <= 1, warn + \"axisYControlRotation: \" + this.axisYControlRotation + \", axisYControlHeight: \" + this.axisYControlHeight + \", axisYControlRadius: \" + this.axisYControlRadius);\n    console.assert(this.axisPinchControlRotation + this.axisPinchControlHeight + this.axisPinchControlRadius <= 1, warn + \"axisPinchControlRotation: \" + this.axisPinchControlRotation + \", axisPinchControlHeight: \" + this.axisPinchControlHeight + \", axisPinchControlRadius: \" + this.axisPinchControlRadius);\n  };\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"angularSensibilityX\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"angularSensibilityY\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"pinchPrecision\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"pinchDeltaPercentage\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisXControlRadius\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisXControlHeight\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisXControlRotation\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisYControlRadius\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisYControlHeight\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisYControlRotation\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisPinchControlRadius\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisPinchControlHeight\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisPinchControlRotation\", void 0);\n\n  return FollowCameraPointersInput;\n}(BaseCameraPointersInput);\n\nexport { FollowCameraPointersInput };\nCameraInputTypes[\"FollowCameraPointersInput\"] = FollowCameraPointersInput;","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/Inputs/followCameraPointersInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport { FollowCamera } from \"../../Cameras/followCamera\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { BaseCameraPointersInput } from \"../../Cameras/Inputs/BaseCameraPointersInput\";\r\nimport { PointerTouch } from \"../../Events/pointerEvents\";\r\n\r\n/**\r\n * Manage the pointers inputs to control an follow camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FollowCameraPointersInput extends BaseCameraPointersInput {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FollowCamera;\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FollowCameraPointersInput\";\r\n    }\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility along the X axis or how fast is\r\n     * the camera rotating.\r\n     * A negative number will reverse the axis direction.\r\n     */\r\n    @serialize()\r\n    public angularSensibilityX = 1;\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility along the Y axis or how fast is\r\n     * the camera rotating.\r\n     * A negative number will reverse the axis direction.\r\n     */\r\n    @serialize()\r\n    public angularSensibilityY = 1;\r\n\r\n    /**\r\n     * Defines the pointer pinch precision or how fast is the camera zooming.\r\n     * A negative number will reverse the axis direction.\r\n     */\r\n    @serialize()\r\n    public pinchPrecision = 10000.0;\r\n\r\n    /**\r\n     * pinchDeltaPercentage will be used instead of pinchPrecision if different\r\n     * from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when\r\n     * pinch zoom is used.\r\n     */\r\n    @serialize()\r\n    public pinchDeltaPercentage = 0;\r\n\r\n    /**\r\n     * Pointer X axis controls zoom. (X axis modifies camera.radius value.)\r\n     */\r\n    @serialize()\r\n    public axisXControlRadius: boolean = false;\r\n\r\n    /**\r\n     * Pointer X axis controls height. (X axis modifies camera.heightOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisXControlHeight: boolean = false;\r\n\r\n    /**\r\n     * Pointer X axis controls angle. (X axis modifies camera.rotationOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisXControlRotation: boolean = true;\r\n\r\n    /**\r\n     * Pointer Y axis controls zoom. (Y axis modifies camera.radius value.)\r\n     */\r\n    @serialize()\r\n    public axisYControlRadius: boolean = false;\r\n\r\n    /**\r\n     * Pointer Y axis controls height. (Y axis modifies camera.heightOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisYControlHeight: boolean = true;\r\n\r\n    /**\r\n     * Pointer Y axis controls angle. (Y axis modifies camera.rotationOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisYControlRotation: boolean = false;\r\n\r\n    /**\r\n     * Pinch controls zoom. (Pinch modifies camera.radius value.)\r\n     */\r\n    @serialize()\r\n    public axisPinchControlRadius: boolean = true;\r\n\r\n    /**\r\n     * Pinch controls height. (Pinch modifies camera.heightOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisPinchControlHeight: boolean = false;\r\n\r\n    /**\r\n     * Pinch controls angle. (Pinch modifies camera.rotationOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisPinchControlRotation: boolean = false;\r\n\r\n    /**\r\n     * Log error messages if basic misconfiguration has occurred.\r\n     */\r\n    public warningEnable: boolean = true;\r\n\r\n    protected onTouch(pointA: Nullable<PointerTouch>,\r\n                      offsetX: number,\r\n                      offsetY: number): void\r\n    {\r\n        this._warning();\r\n\r\n        if (this.axisXControlRotation) {\r\n            this.camera.rotationOffset += offsetX / this.angularSensibilityX;\r\n        } else if (this.axisYControlRotation) {\r\n            this.camera.rotationOffset += offsetY / this.angularSensibilityX;\r\n        }\r\n\r\n        if (this.axisXControlHeight) {\r\n            this.camera.heightOffset += offsetX / this.angularSensibilityY;\r\n        } else if (this.axisYControlHeight) {\r\n            this.camera.heightOffset += offsetY / this.angularSensibilityY;\r\n        }\r\n\r\n        if (this.axisXControlRadius) {\r\n            this.camera.radius -= offsetX / this.angularSensibilityY;\r\n        } else if (this.axisYControlRadius) {\r\n            this.camera.radius -= offsetY / this.angularSensibilityY;\r\n        }\r\n    }\r\n\r\n    protected onMultiTouch(pointA: Nullable<PointerTouch>,\r\n                           pointB: Nullable<PointerTouch>,\r\n                           previousPinchSquaredDistance: number,\r\n                           pinchSquaredDistance: number,\r\n                           previousMultiTouchPanPosition: Nullable<PointerTouch>,\r\n                           multiTouchPanPosition: Nullable<PointerTouch>): void\r\n    {\r\n        if (previousPinchSquaredDistance === 0 && previousMultiTouchPanPosition === null) {\r\n            // First time this method is called for new pinch.\r\n            // Next time this is called there will be a\r\n            // previousPinchSquaredDistance and pinchSquaredDistance to compare.\r\n            return;\r\n        }\r\n        if (pinchSquaredDistance === 0 && multiTouchPanPosition === null) {\r\n            // Last time this method is called at the end of a pinch.\r\n            return;\r\n        }\r\n        var pinchDelta =\r\n            (pinchSquaredDistance - previousPinchSquaredDistance) /\r\n            (this.pinchPrecision * (this.angularSensibilityX + this.angularSensibilityY) / 2);\r\n\r\n        if (this.pinchDeltaPercentage) {\r\n            pinchDelta *= 0.01 * this.pinchDeltaPercentage;\r\n            if (this.axisPinchControlRotation) {\r\n                this.camera.rotationOffset += pinchDelta * this.camera.rotationOffset;\r\n            }\r\n            if (this.axisPinchControlHeight) {\r\n                this.camera.heightOffset += pinchDelta * this.camera.heightOffset;\r\n            }\r\n            if (this.axisPinchControlRadius) {\r\n                this.camera.radius -= pinchDelta * this.camera.radius;\r\n            }\r\n        } else {\r\n            if (this.axisPinchControlRotation) {\r\n                this.camera.rotationOffset += pinchDelta;\r\n            }\r\n\r\n            if (this.axisPinchControlHeight) {\r\n                this.camera.heightOffset += pinchDelta;\r\n            }\r\n\r\n            if (this.axisPinchControlRadius) {\r\n                this.camera.radius -= pinchDelta;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Check for obvious misconfiguration. */\r\n    private _warningCounter: number = 0;\r\n    private _warning(): void {\r\n        if (!this.warningEnable || this._warningCounter++ % 100 !== 0) {\r\n            return;\r\n        }\r\n        let warn = \"It probably only makes sense to control ONE camera \" +\r\n                   \"property with each pointer axis. Set 'warningEnable = false' \" +\r\n                   \"if you are sure. Currently enabled: \";\r\n\r\n        console.assert((<number>(<unknown>this.axisXControlRotation) +\r\n                        <number>(<unknown>this.axisXControlHeight) +\r\n                        <number>(<unknown>this.axisXControlRadius)) <= 1,\r\n                       warn +\r\n                       \"axisXControlRotation: \" + this.axisXControlRotation +\r\n                       \", axisXControlHeight: \" + this.axisXControlHeight +\r\n                       \", axisXControlRadius: \" + this.axisXControlRadius);\r\n        console.assert((<number>(<unknown>this.axisYControlRotation) +\r\n                        <number>(<unknown>this.axisYControlHeight) +\r\n                        <number>(<unknown>this.axisYControlRadius)) <= 1,\r\n                       warn +\r\n                       \"axisYControlRotation: \" + this.axisYControlRotation +\r\n                       \", axisYControlHeight: \" + this.axisYControlHeight +\r\n                       \", axisYControlRadius: \" + this.axisYControlRadius);\r\n        console.assert((<number>(<unknown>this.axisPinchControlRotation) +\r\n                        <number>(<unknown>this.axisPinchControlHeight) +\r\n                        <number>(<unknown>this.axisPinchControlRadius)) <= 1,\r\n                       warn +\r\n                       \"axisPinchControlRotation: \" + this.axisPinchControlRotation +\r\n                       \", axisPinchControlHeight: \" + this.axisPinchControlHeight +\r\n                       \", axisPinchControlRadius: \" + this.axisPinchControlRadius);\r\n    }\r\n}\r\n(<any>CameraInputTypes)[\"FollowCameraPointersInput\"] = FollowCameraPointersInput;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}