{"ast":null,"code":"var PromiseStates;\n\n(function (PromiseStates) {\n  PromiseStates[PromiseStates[\"Pending\"] = 0] = \"Pending\";\n  PromiseStates[PromiseStates[\"Fulfilled\"] = 1] = \"Fulfilled\";\n  PromiseStates[PromiseStates[\"Rejected\"] = 2] = \"Rejected\";\n})(PromiseStates || (PromiseStates = {}));\n\nvar FulFillmentAgregator =\n/** @class */\nfunction () {\n  function FulFillmentAgregator() {\n    this.count = 0;\n    this.target = 0;\n    this.results = [];\n  }\n\n  return FulFillmentAgregator;\n}();\n\nvar InternalPromise =\n/** @class */\nfunction () {\n  function InternalPromise(resolver) {\n    var _this = this;\n\n    this._state = PromiseStates.Pending;\n    this._children = new Array();\n    this._rejectWasConsumed = false;\n\n    if (!resolver) {\n      return;\n    }\n\n    try {\n      resolver(function (value) {\n        _this._resolve(value);\n      }, function (reason) {\n        _this._reject(reason);\n      });\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  Object.defineProperty(InternalPromise.prototype, \"_result\", {\n    get: function () {\n      return this._resultValue;\n    },\n    set: function (value) {\n      this._resultValue = value;\n\n      if (this._parent && this._parent._result === undefined) {\n        this._parent._result = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  InternalPromise.prototype.catch = function (onRejected) {\n    return this.then(undefined, onRejected);\n  };\n\n  InternalPromise.prototype.then = function (onFulfilled, onRejected) {\n    var _this = this;\n\n    var newPromise = new InternalPromise();\n    newPromise._onFulfilled = onFulfilled;\n    newPromise._onRejected = onRejected; // Composition\n\n    this._children.push(newPromise);\n\n    newPromise._parent = this;\n\n    if (this._state !== PromiseStates.Pending) {\n      setTimeout(function () {\n        if (_this._state === PromiseStates.Fulfilled || _this._rejectWasConsumed) {\n          var returnedValue = newPromise._resolve(_this._result);\n\n          if (returnedValue !== undefined && returnedValue !== null) {\n            if (returnedValue._state !== undefined) {\n              var returnedPromise = returnedValue;\n\n              newPromise._children.push(returnedPromise);\n\n              returnedPromise._parent = newPromise;\n              newPromise = returnedPromise;\n            } else {\n              newPromise._result = returnedValue;\n            }\n          }\n        } else {\n          newPromise._reject(_this._reason);\n        }\n      });\n    }\n\n    return newPromise;\n  };\n\n  InternalPromise.prototype._moveChildren = function (children) {\n    var _a;\n\n    var _this = this;\n\n    (_a = this._children).push.apply(_a, children.splice(0, children.length));\n\n    this._children.forEach(function (child) {\n      child._parent = _this;\n    });\n\n    if (this._state === PromiseStates.Fulfilled) {\n      for (var _i = 0, _b = this._children; _i < _b.length; _i++) {\n        var child = _b[_i];\n\n        child._resolve(this._result);\n      }\n    } else if (this._state === PromiseStates.Rejected) {\n      for (var _c = 0, _d = this._children; _c < _d.length; _c++) {\n        var child = _d[_c];\n\n        child._reject(this._reason);\n      }\n    }\n  };\n\n  InternalPromise.prototype._resolve = function (value) {\n    try {\n      this._state = PromiseStates.Fulfilled;\n      var returnedValue = null;\n\n      if (this._onFulfilled) {\n        returnedValue = this._onFulfilled(value);\n      }\n\n      if (returnedValue !== undefined && returnedValue !== null) {\n        if (returnedValue._state !== undefined) {\n          // Transmit children\n          var returnedPromise = returnedValue;\n          returnedPromise._parent = this;\n\n          returnedPromise._moveChildren(this._children);\n\n          value = returnedPromise._result;\n        } else {\n          value = returnedValue;\n        }\n      }\n\n      this._result = value;\n\n      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n        var child = _a[_i];\n\n        child._resolve(value);\n      }\n\n      this._children.length = 0;\n      delete this._onFulfilled;\n      delete this._onRejected;\n    } catch (e) {\n      this._reject(e, true);\n    }\n  };\n\n  InternalPromise.prototype._reject = function (reason, onLocalThrow) {\n    if (onLocalThrow === void 0) {\n      onLocalThrow = false;\n    }\n\n    this._state = PromiseStates.Rejected;\n    this._reason = reason;\n\n    if (this._onRejected && !onLocalThrow) {\n      try {\n        this._onRejected(reason);\n\n        this._rejectWasConsumed = true;\n      } catch (e) {\n        reason = e;\n      }\n    }\n\n    for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n      var child = _a[_i];\n\n      if (this._rejectWasConsumed) {\n        child._resolve(null);\n      } else {\n        child._reject(reason);\n      }\n    }\n\n    this._children.length = 0;\n    delete this._onFulfilled;\n    delete this._onRejected;\n  };\n\n  InternalPromise.resolve = function (value) {\n    var newPromise = new InternalPromise();\n\n    newPromise._resolve(value);\n\n    return newPromise;\n  };\n\n  InternalPromise._RegisterForFulfillment = function (promise, agregator, index) {\n    promise.then(function (value) {\n      agregator.results[index] = value;\n      agregator.count++;\n\n      if (agregator.count === agregator.target) {\n        agregator.rootPromise._resolve(agregator.results);\n      }\n\n      return null;\n    }, function (reason) {\n      if (agregator.rootPromise._state !== PromiseStates.Rejected) {\n        agregator.rootPromise._reject(reason);\n      }\n    });\n  };\n\n  InternalPromise.all = function (promises) {\n    var newPromise = new InternalPromise();\n    var agregator = new FulFillmentAgregator();\n    agregator.target = promises.length;\n    agregator.rootPromise = newPromise;\n\n    if (promises.length) {\n      for (var index = 0; index < promises.length; index++) {\n        InternalPromise._RegisterForFulfillment(promises[index], agregator, index);\n      }\n    } else {\n      newPromise._resolve([]);\n    }\n\n    return newPromise;\n  };\n\n  InternalPromise.race = function (promises) {\n    var newPromise = new InternalPromise();\n\n    if (promises.length) {\n      for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {\n        var promise = promises_1[_i];\n        promise.then(function (value) {\n          if (newPromise) {\n            newPromise._resolve(value);\n\n            newPromise = null;\n          }\n\n          return null;\n        }, function (reason) {\n          if (newPromise) {\n            newPromise._reject(reason);\n\n            newPromise = null;\n          }\n        });\n      }\n    }\n\n    return newPromise;\n  };\n\n  return InternalPromise;\n}();\n/**\r\n * Helper class that provides a small promise polyfill\r\n */\n\n\nvar PromisePolyfill =\n/** @class */\nfunction () {\n  function PromisePolyfill() {}\n  /**\r\n   * Static function used to check if the polyfill is required\r\n   * If this is the case then the function will inject the polyfill to window.Promise\r\n   * @param force defines a boolean used to force the injection (mostly for testing purposes)\r\n   */\n\n\n  PromisePolyfill.Apply = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    if (force || typeof Promise === 'undefined') {\n      var root = window;\n      root.Promise = InternalPromise;\n    }\n  };\n\n  return PromisePolyfill;\n}();\n\nexport { PromisePolyfill };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/promise.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\n\r\nenum PromiseStates {\r\n    Pending,\r\n    Fulfilled,\r\n    Rejected\r\n}\r\n\r\nclass FulFillmentAgregator<T> {\r\n    public count = 0;\r\n    public target = 0;\r\n    public rootPromise: InternalPromise<T>;\r\n    public results: any[] = [];\r\n}\r\n\r\nclass InternalPromise<T> {\r\n    private _state = PromiseStates.Pending;\r\n    private _resultValue?: Nullable<T>;\r\n    private _reason: any;\r\n    private _children = new Array<InternalPromise<T>>();\r\n    private _parent: Nullable<InternalPromise<T>>;\r\n    private _onFulfilled?: (fulfillment?: Nullable<T>) => Nullable<InternalPromise<T>> | T;\r\n    private _onRejected?: (reason: any) => void;\r\n    private _rejectWasConsumed = false;\r\n\r\n    private get _result(): Nullable<T> | undefined {\r\n        return this._resultValue;\r\n    }\r\n\r\n    private set _result(value: Nullable<T> | undefined) {\r\n        this._resultValue = value;\r\n\r\n        if (this._parent && this._parent._result === undefined) {\r\n            this._parent._result = value;\r\n        }\r\n    }\r\n\r\n    public constructor(resolver?: (\r\n        resolve: (value?: Nullable<T>) => void,\r\n        reject: (reason: any) => void\r\n    ) => void) {\r\n\r\n        if (!resolver) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            resolver((value?: Nullable<T>) => {\r\n                this._resolve(value);\r\n            }, (reason: any) => {\r\n                this._reject(reason);\r\n            });\r\n        } catch (e) {\r\n            this._reject(e);\r\n        }\r\n    }\r\n\r\n    public catch(onRejected: (reason: any) => void): InternalPromise<T> {\r\n        return this.then(undefined, onRejected);\r\n    }\r\n\r\n    public then(onFulfilled?: (fulfillment?: Nullable<T>) => Nullable<InternalPromise<T>> | T, onRejected?: (reason: any) => void): InternalPromise<T> {\r\n        let newPromise = new InternalPromise<T>();\r\n        newPromise._onFulfilled = onFulfilled;\r\n        newPromise._onRejected = onRejected;\r\n\r\n        // Composition\r\n        this._children.push(newPromise);\r\n        newPromise._parent = this;\r\n\r\n        if (this._state !== PromiseStates.Pending) {\r\n            setTimeout(() => {\r\n                if (this._state === PromiseStates.Fulfilled || this._rejectWasConsumed) {\r\n                    let returnedValue: any = newPromise._resolve(this._result);\r\n\r\n                    if (returnedValue !== undefined && returnedValue !== null) {\r\n                        if ((<any>returnedValue)._state !== undefined) {\r\n                            let returnedPromise = returnedValue as InternalPromise<T>;\r\n                            newPromise._children.push(returnedPromise);\r\n                            returnedPromise._parent = newPromise;\r\n                            newPromise = returnedPromise;\r\n                        } else {\r\n                            newPromise._result = (<T>returnedValue);\r\n                        }\r\n                    }\r\n                } else {\r\n                    newPromise._reject(this._reason);\r\n                }\r\n            });\r\n        }\r\n\r\n        return newPromise;\r\n    }\r\n\r\n    private _moveChildren(children: InternalPromise<T>[]): void {\r\n        this._children.push(...children.splice(0, children.length));\r\n\r\n        this._children.forEach((child) => {\r\n            child._parent = this;\r\n        });\r\n\r\n        if (this._state === PromiseStates.Fulfilled) {\r\n            for (var child of this._children) {\r\n                child._resolve(this._result);\r\n            }\r\n        } else if (this._state === PromiseStates.Rejected) {\r\n            for (var child of this._children) {\r\n                child._reject(this._reason);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolve(value?: Nullable<T>): void {\r\n        try {\r\n            this._state = PromiseStates.Fulfilled;\r\n            let returnedValue: Nullable<InternalPromise<T>> | T = null;\r\n\r\n            if (this._onFulfilled) {\r\n                returnedValue = this._onFulfilled(value);\r\n            }\r\n\r\n            if (returnedValue !== undefined && returnedValue !== null) {\r\n                if ((<InternalPromise<T>>returnedValue)._state !== undefined) {\r\n                    // Transmit children\r\n                    let returnedPromise = returnedValue as InternalPromise<T>;\r\n                    returnedPromise._parent = this;\r\n                    returnedPromise._moveChildren(this._children);\r\n\r\n                    value = returnedPromise._result;\r\n                } else {\r\n                    value = <T>returnedValue;\r\n                }\r\n            }\r\n\r\n            this._result = value;\r\n\r\n            for (var child of this._children) {\r\n                child._resolve(value);\r\n            }\r\n\r\n            this._children.length = 0;\r\n            delete this._onFulfilled;\r\n            delete this._onRejected;\r\n        } catch (e) {\r\n            this._reject(e, true);\r\n        }\r\n    }\r\n\r\n    private _reject(reason: any, onLocalThrow = false): void {\r\n        this._state = PromiseStates.Rejected;\r\n        this._reason = reason;\r\n\r\n        if (this._onRejected && !onLocalThrow) {\r\n            try {\r\n                this._onRejected(reason);\r\n                this._rejectWasConsumed = true;\r\n            }\r\n            catch (e) {\r\n                reason = e;\r\n            }\r\n        }\r\n\r\n        for (var child of this._children) {\r\n            if (this._rejectWasConsumed) {\r\n                child._resolve(null);\r\n            } else {\r\n                child._reject(reason);\r\n            }\r\n        }\r\n\r\n        this._children.length = 0;\r\n        delete this._onFulfilled;\r\n        delete this._onRejected;\r\n    }\r\n\r\n    public static resolve<T>(value: T): InternalPromise<T> {\r\n        let newPromise = new InternalPromise<T>();\r\n\r\n        newPromise._resolve(value);\r\n\r\n        return newPromise;\r\n    }\r\n\r\n    private static _RegisterForFulfillment<T>(promise: InternalPromise<T>, agregator: FulFillmentAgregator<T[]>, index: number) {\r\n        promise.then((value?: Nullable<T>) => {\r\n            agregator.results[index] = value;\r\n            agregator.count++;\r\n\r\n            if (agregator.count === agregator.target) {\r\n                agregator.rootPromise._resolve(agregator.results);\r\n            }\r\n            return null;\r\n        }, (reason: any) => {\r\n            if (agregator.rootPromise._state !== PromiseStates.Rejected) {\r\n                agregator.rootPromise._reject(reason);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static all<T>(promises: InternalPromise<T>[]): InternalPromise<T[]> {\r\n        let newPromise = new InternalPromise<T[]>();\r\n        let agregator = new FulFillmentAgregator<T[]>();\r\n        agregator.target = promises.length;\r\n        agregator.rootPromise = newPromise;\r\n\r\n        if (promises.length) {\r\n            for (var index = 0; index < promises.length; index++) {\r\n                InternalPromise._RegisterForFulfillment(promises[index], agregator, index);\r\n            }\r\n        } else {\r\n            newPromise._resolve([]);\r\n        }\r\n\r\n        return newPromise;\r\n    }\r\n\r\n    public static race<T>(promises: InternalPromise<T>[]): InternalPromise<T> {\r\n        let newPromise: Nullable<InternalPromise<T>> = new InternalPromise();\r\n\r\n        if (promises.length) {\r\n            for (const promise of promises) {\r\n                promise.then((value?: Nullable<T>) => {\r\n                    if (newPromise) {\r\n                        newPromise._resolve(value);\r\n                        newPromise = null;\r\n                    }\r\n                    return null;\r\n                }, (reason: any) => {\r\n                    if (newPromise) {\r\n                        newPromise._reject(reason);\r\n                        newPromise = null;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return newPromise;\r\n    }\r\n}\r\n\r\n/**\r\n * Helper class that provides a small promise polyfill\r\n */\r\nexport class PromisePolyfill {\r\n    /**\r\n     * Static function used to check if the polyfill is required\r\n     * If this is the case then the function will inject the polyfill to window.Promise\r\n     * @param force defines a boolean used to force the injection (mostly for testing purposes)\r\n     */\r\n    public static Apply(force = false): void {\r\n        if (force || typeof Promise === 'undefined') {\r\n            let root: any = window;\r\n            root.Promise = InternalPromise;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}