{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector\";\nimport { VertexBuffer } from \"../Meshes/buffer\";\nimport { SubMesh } from \"../Meshes/subMesh\";\nimport { Mesh } from \"../Meshes/mesh\";\nimport { AsyncLoop } from \"../Misc/tools\";\nimport { Epsilon } from '../Maths/math.constants';\n/**\r\n * Class used to specify simplification options\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\n\nvar SimplificationSettings =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a SimplificationSettings\r\n   * @param quality expected quality\r\n   * @param distance distance when this optimized version should be used\r\n   * @param optimizeMesh already optimized mesh\r\n   */\n  function SimplificationSettings(\n  /** expected quality */\n  quality,\n  /** distance when this optimized version should be used */\n  distance,\n  /** already optimized mesh  */\n  optimizeMesh) {\n    this.quality = quality;\n    this.distance = distance;\n    this.optimizeMesh = optimizeMesh;\n  }\n\n  return SimplificationSettings;\n}();\n\nexport { SimplificationSettings };\n/**\r\n * Queue used to order the simplification tasks\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\n\nvar SimplificationQueue =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new queue\r\n   */\n  function SimplificationQueue() {\n    this.running = false;\n    this._simplificationArray = [];\n  }\n  /**\r\n   * Adds a new simplification task\r\n   * @param task defines a task to add\r\n   */\n\n\n  SimplificationQueue.prototype.addTask = function (task) {\n    this._simplificationArray.push(task);\n  };\n  /**\r\n   * Execute next task\r\n   */\n\n\n  SimplificationQueue.prototype.executeNext = function () {\n    var task = this._simplificationArray.pop();\n\n    if (task) {\n      this.running = true;\n      this.runSimplification(task);\n    } else {\n      this.running = false;\n    }\n  };\n  /**\r\n   * Execute a simplification task\r\n   * @param task defines the task to run\r\n   */\n\n\n  SimplificationQueue.prototype.runSimplification = function (task) {\n    var _this = this;\n\n    if (task.parallelProcessing) {\n      //parallel simplifier\n      task.settings.forEach(function (setting) {\n        var simplifier = _this.getSimplifier(task);\n\n        simplifier.simplify(setting, function (newMesh) {\n          if (setting.distance !== undefined) {\n            task.mesh.addLODLevel(setting.distance, newMesh);\n          }\n\n          newMesh.isVisible = true; //check if it is the last\n\n          if (setting.quality === task.settings[task.settings.length - 1].quality && task.successCallback) {\n            //all done, run the success callback.\n            task.successCallback();\n          }\n\n          _this.executeNext();\n        });\n      });\n    } else {\n      //single simplifier.\n      var simplifier = this.getSimplifier(task);\n\n      var runDecimation = function (setting, callback) {\n        simplifier.simplify(setting, function (newMesh) {\n          if (setting.distance !== undefined) {\n            task.mesh.addLODLevel(setting.distance, newMesh);\n          }\n\n          newMesh.isVisible = true; //run the next quality level\n\n          callback();\n        });\n      };\n\n      AsyncLoop.Run(task.settings.length, function (loop) {\n        runDecimation(task.settings[loop.index], function () {\n          loop.executeNext();\n        });\n      }, function () {\n        //execution ended, run the success callback.\n        if (task.successCallback) {\n          task.successCallback();\n        }\n\n        _this.executeNext();\n      });\n    }\n  };\n\n  SimplificationQueue.prototype.getSimplifier = function (task) {\n    switch (task.simplificationType) {\n      case SimplificationType.QUADRATIC:\n      default:\n        return new QuadraticErrorSimplification(task.mesh);\n    }\n  };\n\n  return SimplificationQueue;\n}();\n\nexport { SimplificationQueue };\n/**\r\n * The implemented types of simplification\r\n * At the moment only Quadratic Error Decimation is implemented\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\n\nexport var SimplificationType;\n\n(function (SimplificationType) {\n  /** Quadratic error decimation */\n  SimplificationType[SimplificationType[\"QUADRATIC\"] = 0] = \"QUADRATIC\";\n})(SimplificationType || (SimplificationType = {}));\n\nvar DecimationTriangle =\n/** @class */\nfunction () {\n  function DecimationTriangle(vertices) {\n    this.vertices = vertices;\n    this.error = new Array(4);\n    this.deleted = false;\n    this.isDirty = false;\n    this.deletePending = false;\n    this.borderFactor = 0;\n  }\n\n  return DecimationTriangle;\n}();\n\nvar DecimationVertex =\n/** @class */\nfunction () {\n  function DecimationVertex(position, id) {\n    this.position = position;\n    this.id = id;\n    this.isBorder = true;\n    this.q = new QuadraticMatrix();\n    this.triangleCount = 0;\n    this.triangleStart = 0;\n    this.originalOffsets = [];\n  }\n\n  DecimationVertex.prototype.updatePosition = function (newPosition) {\n    this.position.copyFrom(newPosition);\n  };\n\n  return DecimationVertex;\n}();\n\nvar QuadraticMatrix =\n/** @class */\nfunction () {\n  function QuadraticMatrix(data) {\n    this.data = new Array(10);\n\n    for (var i = 0; i < 10; ++i) {\n      if (data && data[i]) {\n        this.data[i] = data[i];\n      } else {\n        this.data[i] = 0;\n      }\n    }\n  }\n\n  QuadraticMatrix.prototype.det = function (a11, a12, a13, a21, a22, a23, a31, a32, a33) {\n    var det = this.data[a11] * this.data[a22] * this.data[a33] + this.data[a13] * this.data[a21] * this.data[a32] + this.data[a12] * this.data[a23] * this.data[a31] - this.data[a13] * this.data[a22] * this.data[a31] - this.data[a11] * this.data[a23] * this.data[a32] - this.data[a12] * this.data[a21] * this.data[a33];\n    return det;\n  };\n\n  QuadraticMatrix.prototype.addInPlace = function (matrix) {\n    for (var i = 0; i < 10; ++i) {\n      this.data[i] += matrix.data[i];\n    }\n  };\n\n  QuadraticMatrix.prototype.addArrayInPlace = function (data) {\n    for (var i = 0; i < 10; ++i) {\n      this.data[i] += data[i];\n    }\n  };\n\n  QuadraticMatrix.prototype.add = function (matrix) {\n    var m = new QuadraticMatrix();\n\n    for (var i = 0; i < 10; ++i) {\n      m.data[i] = this.data[i] + matrix.data[i];\n    }\n\n    return m;\n  };\n\n  QuadraticMatrix.FromData = function (a, b, c, d) {\n    return new QuadraticMatrix(QuadraticMatrix.DataFromNumbers(a, b, c, d));\n  }; //returning an array to avoid garbage collection\n\n\n  QuadraticMatrix.DataFromNumbers = function (a, b, c, d) {\n    return [a * a, a * b, a * c, a * d, b * b, b * c, b * d, c * c, c * d, d * d];\n  };\n\n  return QuadraticMatrix;\n}();\n\nvar Reference =\n/** @class */\nfunction () {\n  function Reference(vertexId, triangleId) {\n    this.vertexId = vertexId;\n    this.triangleId = triangleId;\n  }\n\n  return Reference;\n}();\n/**\r\n * An implementation of the Quadratic Error simplification algorithm.\r\n * Original paper : http://www1.cs.columbia.edu/~cs4162/html05s/garland97.pdf\r\n * Ported mostly from QSlim and http://voxels.blogspot.de/2014/05/quadric-mesh-simplification-with-source.html to babylon JS\r\n * @author RaananW\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\n\n\nvar QuadraticErrorSimplification =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new QuadraticErrorSimplification\r\n   * @param _mesh defines the target mesh\r\n   */\n  function QuadraticErrorSimplification(_mesh) {\n    this._mesh = _mesh;\n    /** Gets or sets the number pf sync interations */\n\n    this.syncIterations = 5000;\n    this.aggressiveness = 7;\n    this.decimationIterations = 100;\n    this.boundingBoxEpsilon = Epsilon;\n  }\n  /**\r\n   * Simplification of a given mesh according to the given settings.\r\n   * Since this requires computation, it is assumed that the function runs async.\r\n   * @param settings The settings of the simplification, including quality and distance\r\n   * @param successCallback A callback that will be called after the mesh was simplified.\r\n   */\n\n\n  QuadraticErrorSimplification.prototype.simplify = function (settings, successCallback) {\n    var _this = this;\n\n    this.initDecimatedMesh(); //iterating through the submeshes array, one after the other.\n\n    AsyncLoop.Run(this._mesh.subMeshes.length, function (loop) {\n      _this.initWithMesh(loop.index, function () {\n        _this.runDecimation(settings, loop.index, function () {\n          loop.executeNext();\n        });\n      }, settings.optimizeMesh);\n    }, function () {\n      setTimeout(function () {\n        successCallback(_this._reconstructedMesh);\n      }, 0);\n    });\n  };\n\n  QuadraticErrorSimplification.prototype.runDecimation = function (settings, submeshIndex, successCallback) {\n    var _this = this;\n\n    var targetCount = ~~(this.triangles.length * settings.quality);\n    var deletedTriangles = 0;\n    var triangleCount = this.triangles.length;\n\n    var iterationFunction = function (iteration, callback) {\n      setTimeout(function () {\n        if (iteration % 5 === 0) {\n          _this.updateMesh(iteration === 0);\n        }\n\n        for (var i = 0; i < _this.triangles.length; ++i) {\n          _this.triangles[i].isDirty = false;\n        }\n\n        var threshold = 0.000000001 * Math.pow(iteration + 3, _this.aggressiveness);\n\n        var trianglesIterator = function (i) {\n          var tIdx = ~~((_this.triangles.length / 2 + i) % _this.triangles.length);\n          var t = _this.triangles[tIdx];\n\n          if (!t) {\n            return;\n          }\n\n          if (t.error[3] > threshold || t.deleted || t.isDirty) {\n            return;\n          }\n\n          for (var j = 0; j < 3; ++j) {\n            if (t.error[j] < threshold) {\n              var deleted0 = [];\n              var deleted1 = [];\n              var v0 = t.vertices[j];\n              var v1 = t.vertices[(j + 1) % 3];\n\n              if (v0.isBorder || v1.isBorder) {\n                continue;\n              }\n\n              var p = Vector3.Zero(); // var n = Vector3.Zero();\n              // var uv = Vector2.Zero();\n              // var color = new Color4(0, 0, 0, 1);\n\n              _this.calculateError(v0, v1, p);\n\n              var delTr = new Array();\n\n              if (_this.isFlipped(v0, v1, p, deleted0, delTr)) {\n                continue;\n              }\n\n              if (_this.isFlipped(v1, v0, p, deleted1, delTr)) {\n                continue;\n              }\n\n              if (deleted0.indexOf(true) < 0 || deleted1.indexOf(true) < 0) {\n                continue;\n              }\n\n              var uniqueArray = new Array();\n              delTr.forEach(function (deletedT) {\n                if (uniqueArray.indexOf(deletedT) === -1) {\n                  deletedT.deletePending = true;\n                  uniqueArray.push(deletedT);\n                }\n              });\n\n              if (uniqueArray.length % 2 !== 0) {\n                continue;\n              }\n\n              v0.q = v1.q.add(v0.q);\n              v0.updatePosition(p);\n              var tStart = _this.references.length;\n              deletedTriangles = _this.updateTriangles(v0, v0, deleted0, deletedTriangles);\n              deletedTriangles = _this.updateTriangles(v0, v1, deleted1, deletedTriangles);\n              var tCount = _this.references.length - tStart;\n\n              if (tCount <= v0.triangleCount) {\n                if (tCount) {\n                  for (var c = 0; c < tCount; c++) {\n                    _this.references[v0.triangleStart + c] = _this.references[tStart + c];\n                  }\n                }\n              } else {\n                v0.triangleStart = tStart;\n              }\n\n              v0.triangleCount = tCount;\n              break;\n            }\n          }\n        };\n\n        AsyncLoop.SyncAsyncForLoop(_this.triangles.length, _this.syncIterations, trianglesIterator, callback, function () {\n          return triangleCount - deletedTriangles <= targetCount;\n        });\n      }, 0);\n    };\n\n    AsyncLoop.Run(this.decimationIterations, function (loop) {\n      if (triangleCount - deletedTriangles <= targetCount) {\n        loop.breakLoop();\n      } else {\n        iterationFunction(loop.index, function () {\n          loop.executeNext();\n        });\n      }\n    }, function () {\n      setTimeout(function () {\n        //reconstruct this part of the mesh\n        _this.reconstructMesh(submeshIndex);\n\n        successCallback();\n      }, 0);\n    });\n  };\n\n  QuadraticErrorSimplification.prototype.initWithMesh = function (submeshIndex, callback, optimizeMesh) {\n    var _this = this;\n\n    this.vertices = [];\n    this.triangles = [];\n\n    var positionData = this._mesh.getVerticesData(VertexBuffer.PositionKind);\n\n    var indices = this._mesh.getIndices();\n\n    var submesh = this._mesh.subMeshes[submeshIndex];\n\n    var findInVertices = function (positionToSearch) {\n      if (optimizeMesh) {\n        for (var ii = 0; ii < _this.vertices.length; ++ii) {\n          if (_this.vertices[ii].position.equalsWithEpsilon(positionToSearch, 0.0001)) {\n            return _this.vertices[ii];\n          }\n        }\n      }\n\n      return null;\n    };\n\n    var vertexReferences = [];\n\n    var vertexInit = function (i) {\n      if (!positionData) {\n        return;\n      }\n\n      var offset = i + submesh.verticesStart;\n      var position = Vector3.FromArray(positionData, offset * 3);\n      var vertex = findInVertices(position) || new DecimationVertex(position, _this.vertices.length);\n      vertex.originalOffsets.push(offset);\n\n      if (vertex.id === _this.vertices.length) {\n        _this.vertices.push(vertex);\n      }\n\n      vertexReferences.push(vertex.id);\n    }; //var totalVertices = mesh.getTotalVertices();\n\n\n    var totalVertices = submesh.verticesCount;\n    AsyncLoop.SyncAsyncForLoop(totalVertices, this.syncIterations / 4 >> 0, vertexInit, function () {\n      var indicesInit = function (i) {\n        if (!indices) {\n          return;\n        }\n\n        var offset = submesh.indexStart / 3 + i;\n        var pos = offset * 3;\n        var i0 = indices[pos + 0];\n        var i1 = indices[pos + 1];\n        var i2 = indices[pos + 2];\n        var v0 = _this.vertices[vertexReferences[i0 - submesh.verticesStart]];\n        var v1 = _this.vertices[vertexReferences[i1 - submesh.verticesStart]];\n        var v2 = _this.vertices[vertexReferences[i2 - submesh.verticesStart]];\n        var triangle = new DecimationTriangle([v0, v1, v2]);\n        triangle.originalOffset = pos;\n\n        _this.triangles.push(triangle);\n      };\n\n      AsyncLoop.SyncAsyncForLoop(submesh.indexCount / 3, _this.syncIterations, indicesInit, function () {\n        _this.init(callback);\n      });\n    });\n  };\n\n  QuadraticErrorSimplification.prototype.init = function (callback) {\n    var _this = this;\n\n    var triangleInit1 = function (i) {\n      var t = _this.triangles[i];\n      t.normal = Vector3.Cross(t.vertices[1].position.subtract(t.vertices[0].position), t.vertices[2].position.subtract(t.vertices[0].position)).normalize();\n\n      for (var j = 0; j < 3; j++) {\n        t.vertices[j].q.addArrayInPlace(QuadraticMatrix.DataFromNumbers(t.normal.x, t.normal.y, t.normal.z, -Vector3.Dot(t.normal, t.vertices[0].position)));\n      }\n    };\n\n    AsyncLoop.SyncAsyncForLoop(this.triangles.length, this.syncIterations, triangleInit1, function () {\n      var triangleInit2 = function (i) {\n        var t = _this.triangles[i];\n\n        for (var j = 0; j < 3; ++j) {\n          t.error[j] = _this.calculateError(t.vertices[j], t.vertices[(j + 1) % 3]);\n        }\n\n        t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\n      };\n\n      AsyncLoop.SyncAsyncForLoop(_this.triangles.length, _this.syncIterations, triangleInit2, function () {\n        callback();\n      });\n    });\n  };\n\n  QuadraticErrorSimplification.prototype.reconstructMesh = function (submeshIndex) {\n    var newTriangles = [];\n    var i;\n\n    for (i = 0; i < this.vertices.length; ++i) {\n      this.vertices[i].triangleCount = 0;\n    }\n\n    var t;\n    var j;\n\n    for (i = 0; i < this.triangles.length; ++i) {\n      if (!this.triangles[i].deleted) {\n        t = this.triangles[i];\n\n        for (j = 0; j < 3; ++j) {\n          t.vertices[j].triangleCount = 1;\n        }\n\n        newTriangles.push(t);\n      }\n    }\n\n    var newPositionData = this._reconstructedMesh.getVerticesData(VertexBuffer.PositionKind) || [];\n    var newNormalData = this._reconstructedMesh.getVerticesData(VertexBuffer.NormalKind) || [];\n    var newUVsData = this._reconstructedMesh.getVerticesData(VertexBuffer.UVKind) || [];\n    var newColorsData = this._reconstructedMesh.getVerticesData(VertexBuffer.ColorKind) || [];\n\n    var normalData = this._mesh.getVerticesData(VertexBuffer.NormalKind);\n\n    var uvs = this._mesh.getVerticesData(VertexBuffer.UVKind);\n\n    var colorsData = this._mesh.getVerticesData(VertexBuffer.ColorKind);\n\n    var vertexCount = 0;\n\n    for (i = 0; i < this.vertices.length; ++i) {\n      var vertex = this.vertices[i];\n      vertex.id = vertexCount;\n\n      if (vertex.triangleCount) {\n        vertex.originalOffsets.forEach(function (originalOffset) {\n          newPositionData.push(vertex.position.x);\n          newPositionData.push(vertex.position.y);\n          newPositionData.push(vertex.position.z);\n\n          if (normalData && normalData.length) {\n            newNormalData.push(normalData[originalOffset * 3]);\n            newNormalData.push(normalData[originalOffset * 3 + 1]);\n            newNormalData.push(normalData[originalOffset * 3 + 2]);\n          }\n\n          if (uvs && uvs.length) {\n            newUVsData.push(uvs[originalOffset * 2]);\n            newUVsData.push(uvs[originalOffset * 2 + 1]);\n          }\n\n          if (colorsData && colorsData.length) {\n            newColorsData.push(colorsData[originalOffset * 4]);\n            newColorsData.push(colorsData[originalOffset * 4 + 1]);\n            newColorsData.push(colorsData[originalOffset * 4 + 2]);\n            newColorsData.push(colorsData[originalOffset * 4 + 3]);\n          }\n\n          ++vertexCount;\n        });\n      }\n    }\n\n    var startingIndex = this._reconstructedMesh.getTotalIndices();\n\n    var startingVertex = this._reconstructedMesh.getTotalVertices();\n\n    var submeshesArray = this._reconstructedMesh.subMeshes;\n    this._reconstructedMesh.subMeshes = [];\n\n    var newIndicesArray = this._reconstructedMesh.getIndices(); //[];\n\n\n    var originalIndices = this._mesh.getIndices();\n\n    for (i = 0; i < newTriangles.length; ++i) {\n      t = newTriangles[i]; //now get the new referencing point for each vertex\n\n      [0, 1, 2].forEach(function (idx) {\n        var id = originalIndices[t.originalOffset + idx];\n        var offset = t.vertices[idx].originalOffsets.indexOf(id);\n\n        if (offset < 0) {\n          offset = 0;\n        }\n\n        newIndicesArray.push(t.vertices[idx].id + offset + startingVertex);\n      });\n    } //overwriting the old vertex buffers and indices.\n\n\n    this._reconstructedMesh.setIndices(newIndicesArray);\n\n    this._reconstructedMesh.setVerticesData(VertexBuffer.PositionKind, newPositionData);\n\n    if (newNormalData.length > 0) {\n      this._reconstructedMesh.setVerticesData(VertexBuffer.NormalKind, newNormalData);\n    }\n\n    if (newUVsData.length > 0) {\n      this._reconstructedMesh.setVerticesData(VertexBuffer.UVKind, newUVsData);\n    }\n\n    if (newColorsData.length > 0) {\n      this._reconstructedMesh.setVerticesData(VertexBuffer.ColorKind, newColorsData);\n    } //create submesh\n\n\n    var originalSubmesh = this._mesh.subMeshes[submeshIndex];\n\n    if (submeshIndex > 0) {\n      this._reconstructedMesh.subMeshes = [];\n      submeshesArray.forEach(function (submesh) {\n        SubMesh.AddToMesh(submesh.materialIndex, submesh.verticesStart, submesh.verticesCount,\n        /* 0, newPositionData.length/3, */\n        submesh.indexStart, submesh.indexCount, submesh.getMesh());\n      });\n      SubMesh.AddToMesh(originalSubmesh.materialIndex, startingVertex, vertexCount,\n      /* 0, newPositionData.length / 3, */\n      startingIndex, newTriangles.length * 3, this._reconstructedMesh);\n    }\n  };\n\n  QuadraticErrorSimplification.prototype.initDecimatedMesh = function () {\n    this._reconstructedMesh = new Mesh(this._mesh.name + \"Decimated\", this._mesh.getScene());\n    this._reconstructedMesh.material = this._mesh.material;\n    this._reconstructedMesh.parent = this._mesh.parent;\n    this._reconstructedMesh.isVisible = false;\n    this._reconstructedMesh.renderingGroupId = this._mesh.renderingGroupId;\n  };\n\n  QuadraticErrorSimplification.prototype.isFlipped = function (vertex1, vertex2, point, deletedArray, delTr) {\n    for (var i = 0; i < vertex1.triangleCount; ++i) {\n      var t = this.triangles[this.references[vertex1.triangleStart + i].triangleId];\n\n      if (t.deleted) {\n        continue;\n      }\n\n      var s = this.references[vertex1.triangleStart + i].vertexId;\n      var v1 = t.vertices[(s + 1) % 3];\n      var v2 = t.vertices[(s + 2) % 3];\n\n      if (v1 === vertex2 || v2 === vertex2) {\n        deletedArray[i] = true;\n        delTr.push(t);\n        continue;\n      }\n\n      var d1 = v1.position.subtract(point);\n      d1 = d1.normalize();\n      var d2 = v2.position.subtract(point);\n      d2 = d2.normalize();\n\n      if (Math.abs(Vector3.Dot(d1, d2)) > 0.999) {\n        return true;\n      }\n\n      var normal = Vector3.Cross(d1, d2).normalize();\n      deletedArray[i] = false;\n\n      if (Vector3.Dot(normal, t.normal) < 0.2) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  QuadraticErrorSimplification.prototype.updateTriangles = function (origVertex, vertex, deletedArray, deletedTriangles) {\n    var newDeleted = deletedTriangles;\n\n    for (var i = 0; i < vertex.triangleCount; ++i) {\n      var ref = this.references[vertex.triangleStart + i];\n      var t = this.triangles[ref.triangleId];\n\n      if (t.deleted) {\n        continue;\n      }\n\n      if (deletedArray[i] && t.deletePending) {\n        t.deleted = true;\n        newDeleted++;\n        continue;\n      }\n\n      t.vertices[ref.vertexId] = origVertex;\n      t.isDirty = true;\n      t.error[0] = this.calculateError(t.vertices[0], t.vertices[1]) + t.borderFactor / 2;\n      t.error[1] = this.calculateError(t.vertices[1], t.vertices[2]) + t.borderFactor / 2;\n      t.error[2] = this.calculateError(t.vertices[2], t.vertices[0]) + t.borderFactor / 2;\n      t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\n      this.references.push(ref);\n    }\n\n    return newDeleted;\n  };\n\n  QuadraticErrorSimplification.prototype.identifyBorder = function () {\n    for (var i = 0; i < this.vertices.length; ++i) {\n      var vCount = [];\n      var vId = [];\n      var v = this.vertices[i];\n      var j;\n\n      for (j = 0; j < v.triangleCount; ++j) {\n        var triangle = this.triangles[this.references[v.triangleStart + j].triangleId];\n\n        for (var ii = 0; ii < 3; ii++) {\n          var ofs = 0;\n          var vv = triangle.vertices[ii];\n\n          while (ofs < vCount.length) {\n            if (vId[ofs] === vv.id) {\n              break;\n            }\n\n            ++ofs;\n          }\n\n          if (ofs === vCount.length) {\n            vCount.push(1);\n            vId.push(vv.id);\n          } else {\n            vCount[ofs]++;\n          }\n        }\n      }\n\n      for (j = 0; j < vCount.length; ++j) {\n        if (vCount[j] === 1) {\n          this.vertices[vId[j]].isBorder = true;\n        } else {\n          this.vertices[vId[j]].isBorder = false;\n        }\n      }\n    }\n  };\n\n  QuadraticErrorSimplification.prototype.updateMesh = function (identifyBorders) {\n    if (identifyBorders === void 0) {\n      identifyBorders = false;\n    }\n\n    var i;\n\n    if (!identifyBorders) {\n      var newTrianglesVector = [];\n\n      for (i = 0; i < this.triangles.length; ++i) {\n        if (!this.triangles[i].deleted) {\n          newTrianglesVector.push(this.triangles[i]);\n        }\n      }\n\n      this.triangles = newTrianglesVector;\n    }\n\n    for (i = 0; i < this.vertices.length; ++i) {\n      this.vertices[i].triangleCount = 0;\n      this.vertices[i].triangleStart = 0;\n    }\n\n    var t;\n    var j;\n    var v;\n\n    for (i = 0; i < this.triangles.length; ++i) {\n      t = this.triangles[i];\n\n      for (j = 0; j < 3; ++j) {\n        v = t.vertices[j];\n        v.triangleCount++;\n      }\n    }\n\n    var tStart = 0;\n\n    for (i = 0; i < this.vertices.length; ++i) {\n      this.vertices[i].triangleStart = tStart;\n      tStart += this.vertices[i].triangleCount;\n      this.vertices[i].triangleCount = 0;\n    }\n\n    var newReferences = new Array(this.triangles.length * 3);\n\n    for (i = 0; i < this.triangles.length; ++i) {\n      t = this.triangles[i];\n\n      for (j = 0; j < 3; ++j) {\n        v = t.vertices[j];\n        newReferences[v.triangleStart + v.triangleCount] = new Reference(j, i);\n        v.triangleCount++;\n      }\n    }\n\n    this.references = newReferences;\n\n    if (identifyBorders) {\n      this.identifyBorder();\n    }\n  };\n\n  QuadraticErrorSimplification.prototype.vertexError = function (q, point) {\n    var x = point.x;\n    var y = point.y;\n    var z = point.z;\n    return q.data[0] * x * x + 2 * q.data[1] * x * y + 2 * q.data[2] * x * z + 2 * q.data[3] * x + q.data[4] * y * y + 2 * q.data[5] * y * z + 2 * q.data[6] * y + q.data[7] * z * z + 2 * q.data[8] * z + q.data[9];\n  };\n\n  QuadraticErrorSimplification.prototype.calculateError = function (vertex1, vertex2, pointResult) {\n    var q = vertex1.q.add(vertex2.q);\n    var border = vertex1.isBorder && vertex2.isBorder;\n    var error = 0;\n    var qDet = q.det(0, 1, 2, 1, 4, 5, 2, 5, 7);\n\n    if (qDet !== 0 && !border) {\n      if (!pointResult) {\n        pointResult = Vector3.Zero();\n      }\n\n      pointResult.x = -1 / qDet * q.det(1, 2, 3, 4, 5, 6, 5, 7, 8);\n      pointResult.y = 1 / qDet * q.det(0, 2, 3, 1, 5, 6, 2, 7, 8);\n      pointResult.z = -1 / qDet * q.det(0, 1, 3, 1, 4, 6, 2, 5, 8);\n      error = this.vertexError(q, pointResult);\n    } else {\n      var p3 = vertex1.position.add(vertex2.position).divide(new Vector3(2, 2, 2)); //var norm3 = (vertex1.normal.add(vertex2.normal)).divide(new Vector3(2, 2, 2)).normalize();\n\n      var error1 = this.vertexError(q, vertex1.position);\n      var error2 = this.vertexError(q, vertex2.position);\n      var error3 = this.vertexError(q, p3);\n      error = Math.min(error1, error2, error3);\n\n      if (error === error1) {\n        if (pointResult) {\n          pointResult.copyFrom(vertex1.position);\n        }\n      } else if (error === error2) {\n        if (pointResult) {\n          pointResult.copyFrom(vertex2.position);\n        }\n      } else {\n        if (pointResult) {\n          pointResult.copyFrom(p3);\n        }\n      }\n    }\n\n    return error;\n  };\n\n  return QuadraticErrorSimplification;\n}();\n\nexport { QuadraticErrorSimplification };","map":{"version":3,"sources":["../../../sourceES6/core/Meshes/meshSimplification.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,QAAwB,sBAAxB;AACA,SAAS,YAAT,QAA6B,kBAA7B;AACA,SAAS,OAAT,QAAwB,mBAAxB;AACA,SAAS,IAAT,QAAqB,gBAArB;AACA,SAAS,SAAT,QAA0B,eAA1B;AACA,SAAS,OAAT,QAAwB,yBAAxB;AAoCA;;;;;AAIA,IAAA,sBAAA;AAAA;AAAA,YAAA;AACI;;;;;;AAMA,WAAA,sBAAA;AACI;AACO,EAAA,OAFX;AAGI;AACO,EAAA,QAJX;AAKI;AACO,EAAA,YANX,EAMiC;AAJtB,SAAA,OAAA,GAAA,OAAA;AAEA,SAAA,QAAA,GAAA,QAAA;AAEA,SAAA,YAAA,GAAA,YAAA;AACV;;AACL,SAAA,sBAAA;AAAC,CAfD,EAAA;;;AA2CA;;;;;AAIA,IAAA,mBAAA;AAAA;AAAA,YAAA;AAQI;;;AAGA,WAAA,mBAAA,GAAA;AACI,SAAK,OAAL,GAAe,KAAf;AACA,SAAK,oBAAL,GAA4B,EAA5B;AACH;AAED;;;;;;AAIO,EAAA,mBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,IAAf,EAAwC;AACpC,SAAK,oBAAL,CAA0B,IAA1B,CAA+B,IAA/B;AACH,GAFM;AAIP;;;;;AAGO,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACI,QAAI,IAAI,GAAG,KAAK,oBAAL,CAA0B,GAA1B,EAAX;;AACA,QAAI,IAAJ,EAAU;AACN,WAAK,OAAL,GAAe,IAAf;AACA,WAAK,iBAAL,CAAuB,IAAvB;AACH,KAHD,MAGO;AACH,WAAK,OAAL,GAAe,KAAf;AACH;AACJ,GARM;AAUP;;;;;;AAIO,EAAA,mBAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,UAAyB,IAAzB,EAAkD;AAAlD,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,IAAI,CAAC,kBAAT,EAA6B;AACzB;AACA,MAAA,IAAI,CAAC,QAAL,CAAc,OAAd,CAAsB,UAAC,OAAD,EAAQ;AAC1B,YAAI,UAAU,GAAG,KAAI,CAAC,aAAL,CAAmB,IAAnB,CAAjB;;AACA,QAAA,UAAU,CAAC,QAAX,CAAoB,OAApB,EAA6B,UAAC,OAAD,EAAQ;AACjC,cAAI,OAAO,CAAC,QAAR,KAAqB,SAAzB,EAAoC;AAChC,YAAA,IAAI,CAAC,IAAL,CAAU,WAAV,CAAsB,OAAO,CAAC,QAA9B,EAAwC,OAAxC;AACH;;AACD,UAAA,OAAO,CAAC,SAAR,GAAoB,IAApB,CAJiC,CAKjC;;AACA,cAAI,OAAO,CAAC,OAAR,KAAoB,IAAI,CAAC,QAAL,CAAc,IAAI,CAAC,QAAL,CAAc,MAAd,GAAuB,CAArC,EAAwC,OAA5D,IAAuE,IAAI,CAAC,eAAhF,EAAiG;AAC7F;AACA,YAAA,IAAI,CAAC,eAAL;AACH;;AACD,UAAA,KAAI,CAAC,WAAL;AACH,SAXD;AAYH,OAdD;AAeH,KAjBD,MAiBO;AACH;AACA,UAAI,UAAU,GAAG,KAAK,aAAL,CAAmB,IAAnB,CAAjB;;AAEA,UAAI,aAAa,GAAG,UAAC,OAAD,EAAmC,QAAnC,EAAuD;AACvE,QAAA,UAAU,CAAC,QAAX,CAAoB,OAApB,EAA6B,UAAC,OAAD,EAAQ;AACjC,cAAI,OAAO,CAAC,QAAR,KAAqB,SAAzB,EAAoC;AAChC,YAAA,IAAI,CAAC,IAAL,CAAU,WAAV,CAAsB,OAAO,CAAC,QAA9B,EAAwC,OAAxC;AACH;;AACD,UAAA,OAAO,CAAC,SAAR,GAAoB,IAApB,CAJiC,CAKjC;;AACA,UAAA,QAAQ;AACX,SAPD;AAQH,OATD;;AAWA,MAAA,SAAS,CAAC,GAAV,CAAc,IAAI,CAAC,QAAL,CAAc,MAA5B,EAAoC,UAAC,IAAD,EAAgB;AAChD,QAAA,aAAa,CAAC,IAAI,CAAC,QAAL,CAAc,IAAI,CAAC,KAAnB,CAAD,EAA4B,YAAA;AACrC,UAAA,IAAI,CAAC,WAAL;AACH,SAFY,CAAb;AAGH,OAJD,EAIG,YAAA;AACC;AACA,YAAI,IAAI,CAAC,eAAT,EAA0B;AACtB,UAAA,IAAI,CAAC,eAAL;AACH;;AACD,QAAA,KAAI,CAAC,WAAL;AACH,OAVD;AAWH;AACJ,GA7CM;;AA+CC,EAAA,mBAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,IAAtB,EAA+C;AAC3C,YAAQ,IAAI,CAAC,kBAAb;AACI,WAAK,kBAAkB,CAAC,SAAxB;AACA;AACI,eAAO,IAAI,4BAAJ,CAAiC,IAAI,CAAC,IAAtC,CAAP;AAHR;AAKH,GANO;;AAOZ,SAAA,mBAAA;AAAC,CA/FD,EAAA;;;AAiGA;;;;;;AAKA,OAAA,IAAY,kBAAZ;;AAAA,CAAA,UAAY,kBAAZ,EAA8B;AAC1B;AACA,EAAA,kBAAA,CAAA,kBAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACH,CAHD,EAAY,kBAAkB,KAAlB,kBAAkB,GAAA,EAAA,CAA9B;;AAKA,IAAA,kBAAA;AAAA;AAAA,YAAA;AAUI,WAAA,kBAAA,CAAmB,QAAnB,EAAoD;AAAjC,SAAA,QAAA,GAAA,QAAA;AACf,SAAK,KAAL,GAAa,IAAI,KAAJ,CAAkB,CAAlB,CAAb;AACA,SAAK,OAAL,GAAe,KAAf;AACA,SAAK,OAAL,GAAe,KAAf;AACA,SAAK,aAAL,GAAqB,KAArB;AACA,SAAK,YAAL,GAAoB,CAApB;AACH;;AACL,SAAA,kBAAA;AAAC,CAjBD,EAAA;;AAmBA,IAAA,gBAAA;AAAA;AAAA,YAAA;AASI,WAAA,gBAAA,CAAmB,QAAnB,EAA6C,EAA7C,EAAuD;AAApC,SAAA,QAAA,GAAA,QAAA;AAA0B,SAAA,EAAA,GAAA,EAAA;AACzC,SAAK,QAAL,GAAgB,IAAhB;AACA,SAAK,CAAL,GAAS,IAAI,eAAJ,EAAT;AACA,SAAK,aAAL,GAAqB,CAArB;AACA,SAAK,aAAL,GAAqB,CAArB;AACA,SAAK,eAAL,GAAuB,EAAvB;AACH;;AAEM,EAAA,gBAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,WAAtB,EAA0C;AACtC,SAAK,QAAL,CAAc,QAAd,CAAuB,WAAvB;AACH,GAFM;;AAGX,SAAA,gBAAA;AAAC,CApBD,EAAA;;AAsBA,IAAA,eAAA;AAAA;AAAA,YAAA;AAGI,WAAA,eAAA,CAAY,IAAZ,EAAgC;AAC5B,SAAK,IAAL,GAAY,IAAI,KAAJ,CAAU,EAAV,CAAZ;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,EAAE,CAA1B,EAA6B;AACzB,UAAI,IAAI,IAAI,IAAI,CAAC,CAAD,CAAhB,EAAqB;AACjB,aAAK,IAAL,CAAU,CAAV,IAAe,IAAI,CAAC,CAAD,CAAnB;AACH,OAFD,MAEO;AACH,aAAK,IAAL,CAAU,CAAV,IAAe,CAAf;AACH;AACJ;AACJ;;AAEM,EAAA,eAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,GAAX,EAAwB,GAAxB,EAAqC,GAArC,EAAkD,GAAlD,EAA+D,GAA/D,EAA4E,GAA5E,EAAyF,GAAzF,EAAsG,GAAtG,EAAmH,GAAnH,EAA8H;AAC1H,QAAI,GAAG,GAAG,KAAK,IAAL,CAAU,GAAV,IAAiB,KAAK,IAAL,CAAU,GAAV,CAAjB,GAAkC,KAAK,IAAL,CAAU,GAAV,CAAlC,GAAmD,KAAK,IAAL,CAAU,GAAV,IAAiB,KAAK,IAAL,CAAU,GAAV,CAAjB,GAAkC,KAAK,IAAL,CAAU,GAAV,CAArF,GACN,KAAK,IAAL,CAAU,GAAV,IAAiB,KAAK,IAAL,CAAU,GAAV,CAAjB,GAAkC,KAAK,IAAL,CAAU,GAAV,CAD5B,GAC6C,KAAK,IAAL,CAAU,GAAV,IAAiB,KAAK,IAAL,CAAU,GAAV,CAAjB,GAAkC,KAAK,IAAL,CAAU,GAAV,CAD/E,GAEN,KAAK,IAAL,CAAU,GAAV,IAAiB,KAAK,IAAL,CAAU,GAAV,CAAjB,GAAkC,KAAK,IAAL,CAAU,GAAV,CAF5B,GAE6C,KAAK,IAAL,CAAU,GAAV,IAAiB,KAAK,IAAL,CAAU,GAAV,CAAjB,GAAkC,KAAK,IAAL,CAAU,GAAV,CAFzF;AAGA,WAAO,GAAP;AACH,GALM;;AAOA,EAAA,eAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,MAAlB,EAAyC;AACrC,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,EAAE,CAA1B,EAA6B;AACzB,WAAK,IAAL,CAAU,CAAV,KAAgB,MAAM,CAAC,IAAP,CAAY,CAAZ,CAAhB;AACH;AACJ,GAJM;;AAMA,EAAA,eAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,IAAvB,EAA0C;AACtC,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,EAAE,CAA1B,EAA6B;AACzB,WAAK,IAAL,CAAU,CAAV,KAAgB,IAAI,CAAC,CAAD,CAApB;AACH;AACJ,GAJM;;AAMA,EAAA,eAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,MAAX,EAAkC;AAC9B,QAAI,CAAC,GAAG,IAAI,eAAJ,EAAR;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,EAAE,CAA1B,EAA6B;AACzB,MAAA,CAAC,CAAC,IAAF,CAAO,CAAP,IAAY,KAAK,IAAL,CAAU,CAAV,IAAe,MAAM,CAAC,IAAP,CAAY,CAAZ,CAA3B;AACH;;AACD,WAAO,CAAP;AACH,GANM;;AAQO,EAAA,eAAA,CAAA,QAAA,GAAd,UAAuB,CAAvB,EAAkC,CAAlC,EAA6C,CAA7C,EAAwD,CAAxD,EAAiE;AAC7D,WAAO,IAAI,eAAJ,CAAoB,eAAe,CAAC,eAAhB,CAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,CAApB,CAAP;AACH,GAFa,CAzClB,CA6CI;;;AACc,EAAA,eAAA,CAAA,eAAA,GAAd,UAA8B,CAA9B,EAAyC,CAAzC,EAAoD,CAApD,EAA+D,CAA/D,EAAwE;AACpE,WAAO,CAAC,CAAC,GAAG,CAAL,EAAQ,CAAC,GAAG,CAAZ,EAAe,CAAC,GAAG,CAAnB,EAAsB,CAAC,GAAG,CAA1B,EAA6B,CAAC,GAAG,CAAjC,EAAoC,CAAC,GAAG,CAAxC,EAA2C,CAAC,GAAG,CAA/C,EAAkD,CAAC,GAAG,CAAtD,EAAyD,CAAC,GAAG,CAA7D,EAAgE,CAAC,GAAG,CAApE,CAAP;AACH,GAFa;;AAGlB,SAAA,eAAA;AAAC,CAjDD,EAAA;;AAmDA,IAAA,SAAA;AAAA;AAAA,YAAA;AACI,WAAA,SAAA,CAAmB,QAAnB,EAA4C,UAA5C,EAA8D;AAA3C,SAAA,QAAA,GAAA,QAAA;AAAyB,SAAA,UAAA,GAAA,UAAA;AAAuB;;AACvE,SAAA,SAAA;AAAC,CAFD,EAAA;AAIA;;;;;;;;;AAOA,IAAA,4BAAA;AAAA;AAAA,YAAA;AAoBI;;;;AAIA,WAAA,4BAAA,CAAoB,KAApB,EAA+B;AAAX,SAAA,KAAA,GAAA,KAAA;AAhBpB;;AACO,SAAA,cAAA,GAAiB,IAAjB;AAgBH,SAAK,cAAL,GAAsB,CAAtB;AACA,SAAK,oBAAL,GAA4B,GAA5B;AACA,SAAK,kBAAL,GAA0B,OAA1B;AACH;AAED;;;;;;;;AAMO,EAAA,4BAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,QAAhB,EAAmD,eAAnD,EAAkG;AAAlG,QAAA,KAAA,GAAA,IAAA;;AACI,SAAK,iBAAL,GAD8F,CAE9F;;AACA,IAAA,SAAS,CAAC,GAAV,CAAc,KAAK,KAAL,CAAW,SAAX,CAAqB,MAAnC,EAA2C,UAAC,IAAD,EAAgB;AACvD,MAAA,KAAI,CAAC,YAAL,CAAkB,IAAI,CAAC,KAAvB,EAA8B,YAAA;AAC1B,QAAA,KAAI,CAAC,aAAL,CAAmB,QAAnB,EAA6B,IAAI,CAAC,KAAlC,EAAyC,YAAA;AACrC,UAAA,IAAI,CAAC,WAAL;AACH,SAFD;AAGH,OAJD,EAIG,QAAQ,CAAC,YAJZ;AAKH,KAND,EAMG,YAAA;AACC,MAAA,UAAU,CAAC,YAAA;AACP,QAAA,eAAe,CAAC,KAAI,CAAC,kBAAN,CAAf;AACH,OAFS,EAEP,CAFO,CAAV;AAGH,KAVD;AAWH,GAdM;;AAgBC,EAAA,4BAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,QAAtB,EAAyD,YAAzD,EAA+E,eAA/E,EAA0G;AAA1G,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,WAAW,GAAG,CAAC,EAAE,KAAK,SAAL,CAAe,MAAf,GAAwB,QAAQ,CAAC,OAAnC,CAAnB;AACA,QAAI,gBAAgB,GAAG,CAAvB;AAEA,QAAI,aAAa,GAAG,KAAK,SAAL,CAAe,MAAnC;;AAEA,QAAI,iBAAiB,GAAG,UAAC,SAAD,EAAoB,QAApB,EAAwC;AAC5D,MAAA,UAAU,CAAC,YAAA;AACP,YAAI,SAAS,GAAG,CAAZ,KAAkB,CAAtB,EAAyB;AACrB,UAAA,KAAI,CAAC,UAAL,CAAgB,SAAS,KAAK,CAA9B;AACH;;AAED,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAI,CAAC,SAAL,CAAe,MAAnC,EAA2C,EAAE,CAA7C,EAAgD;AAC5C,UAAA,KAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,OAAlB,GAA4B,KAA5B;AACH;;AAED,YAAI,SAAS,GAAG,cAAc,IAAI,CAAC,GAAL,CAAU,SAAS,GAAG,CAAtB,EAA0B,KAAI,CAAC,cAA/B,CAA9B;;AAEA,YAAI,iBAAiB,GAAG,UAAC,CAAD,EAAU;AAC9B,cAAI,IAAI,GAAG,CAAC,EAAE,CAAE,KAAI,CAAC,SAAL,CAAe,MAAf,GAAwB,CAAzB,GAA8B,CAA/B,IAAoC,KAAI,CAAC,SAAL,CAAe,MAArD,CAAZ;AACA,cAAI,CAAC,GAAG,KAAI,CAAC,SAAL,CAAe,IAAf,CAAR;;AACA,cAAI,CAAC,CAAL,EAAQ;AAAE;AAAS;;AACnB,cAAI,CAAC,CAAC,KAAF,CAAQ,CAAR,IAAa,SAAb,IAA0B,CAAC,CAAC,OAA5B,IAAuC,CAAC,CAAC,OAA7C,EAAsD;AAAE;AAAS;;AACjE,eAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AACxB,gBAAI,CAAC,CAAC,KAAF,CAAQ,CAAR,IAAa,SAAjB,EAA4B;AACxB,kBAAI,QAAQ,GAAmB,EAA/B;AACA,kBAAI,QAAQ,GAAmB,EAA/B;AAEA,kBAAI,EAAE,GAAG,CAAC,CAAC,QAAF,CAAW,CAAX,CAAT;AACA,kBAAI,EAAE,GAAG,CAAC,CAAC,QAAF,CAAW,CAAC,CAAC,GAAG,CAAL,IAAU,CAArB,CAAT;;AAEA,kBAAI,EAAE,CAAC,QAAH,IAAe,EAAE,CAAC,QAAtB,EAAgC;AAAE;AAAW;;AAE7C,kBAAI,CAAC,GAAG,OAAO,CAAC,IAAR,EAAR,CATwB,CAUxB;AACA;AACA;;AAEA,cAAA,KAAI,CAAC,cAAL,CAAoB,EAApB,EAAwB,EAAxB,EAA4B,CAA5B;;AAEA,kBAAI,KAAK,GAAG,IAAI,KAAJ,EAAZ;;AAEA,kBAAI,KAAI,CAAC,SAAL,CAAe,EAAf,EAAmB,EAAnB,EAAuB,CAAvB,EAA0B,QAA1B,EAAoC,KAApC,CAAJ,EAAgD;AAAE;AAAW;;AAC7D,kBAAI,KAAI,CAAC,SAAL,CAAe,EAAf,EAAmB,EAAnB,EAAuB,CAAvB,EAA0B,QAA1B,EAAoC,KAApC,CAAJ,EAAgD;AAAE;AAAW;;AAE7D,kBAAI,QAAQ,CAAC,OAAT,CAAiB,IAAjB,IAAyB,CAAzB,IAA8B,QAAQ,CAAC,OAAT,CAAiB,IAAjB,IAAyB,CAA3D,EAA8D;AAC1D;AACH;;AAED,kBAAI,WAAW,GAAG,IAAI,KAAJ,EAAlB;AACA,cAAA,KAAK,CAAC,OAAN,CAAc,UAAC,QAAD,EAAS;AACnB,oBAAI,WAAW,CAAC,OAAZ,CAAoB,QAApB,MAAkC,CAAC,CAAvC,EAA0C;AACtC,kBAAA,QAAQ,CAAC,aAAT,GAAyB,IAAzB;AACA,kBAAA,WAAW,CAAC,IAAZ,CAAiB,QAAjB;AACH;AACJ,eALD;;AAOA,kBAAI,WAAW,CAAC,MAAZ,GAAqB,CAArB,KAA2B,CAA/B,EAAkC;AAC9B;AACH;;AAED,cAAA,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAH,CAAK,GAAL,CAAS,EAAE,CAAC,CAAZ,CAAP;AAEA,cAAA,EAAE,CAAC,cAAH,CAAkB,CAAlB;AAEA,kBAAI,MAAM,GAAG,KAAI,CAAC,UAAL,CAAgB,MAA7B;AAEA,cAAA,gBAAgB,GAAG,KAAI,CAAC,eAAL,CAAqB,EAArB,EAAyB,EAAzB,EAA6B,QAA7B,EAAuC,gBAAvC,CAAnB;AACA,cAAA,gBAAgB,GAAG,KAAI,CAAC,eAAL,CAAqB,EAArB,EAAyB,EAAzB,EAA6B,QAA7B,EAAuC,gBAAvC,CAAnB;AAEA,kBAAI,MAAM,GAAG,KAAI,CAAC,UAAL,CAAgB,MAAhB,GAAyB,MAAtC;;AAEA,kBAAI,MAAM,IAAI,EAAE,CAAC,aAAjB,EAAgC;AAC5B,oBAAI,MAAJ,EAAY;AACR,uBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAC7B,oBAAA,KAAI,CAAC,UAAL,CAAgB,EAAE,CAAC,aAAH,GAAmB,CAAnC,IAAwC,KAAI,CAAC,UAAL,CAAgB,MAAM,GAAG,CAAzB,CAAxC;AACH;AACJ;AACJ,eAND,MAMO;AACH,gBAAA,EAAE,CAAC,aAAH,GAAmB,MAAnB;AACH;;AAED,cAAA,EAAE,CAAC,aAAH,GAAmB,MAAnB;AACA;AACH;AACJ;AACJ,SApED;;AAqEA,QAAA,SAAS,CAAC,gBAAV,CAA2B,KAAI,CAAC,SAAL,CAAe,MAA1C,EAAkD,KAAI,CAAC,cAAvD,EAAuE,iBAAvE,EAA0F,QAA1F,EAAoG,YAAA;AAAQ,iBAAQ,aAAa,GAAG,gBAAhB,IAAoC,WAA5C;AAA2D,SAAvK;AACH,OAjFS,EAiFP,CAjFO,CAAV;AAkFH,KAnFD;;AAqFA,IAAA,SAAS,CAAC,GAAV,CAAc,KAAK,oBAAnB,EAAyC,UAAC,IAAD,EAAgB;AACrD,UAAI,aAAa,GAAG,gBAAhB,IAAoC,WAAxC,EAAqD;AAAE,QAAA,IAAI,CAAC,SAAL;AAAmB,OAA1E,MACK;AACD,QAAA,iBAAiB,CAAC,IAAI,CAAC,KAAN,EAAa,YAAA;AAC1B,UAAA,IAAI,CAAC,WAAL;AACH,SAFgB,CAAjB;AAGH;AACJ,KAPD,EAOG,YAAA;AACC,MAAA,UAAU,CAAC,YAAA;AACP;AACA,QAAA,KAAI,CAAC,eAAL,CAAqB,YAArB;;AACA,QAAA,eAAe;AAClB,OAJS,EAIP,CAJO,CAAV;AAKH,KAbD;AAcH,GAzGO;;AA2GA,EAAA,4BAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,YAArB,EAA2C,QAA3C,EAA+D,YAA/D,EAAqF;AAArF,QAAA,KAAA,GAAA,IAAA;;AAEI,SAAK,QAAL,GAAgB,EAAhB;AACA,SAAK,SAAL,GAAiB,EAAjB;;AAEA,QAAI,YAAY,GAAG,KAAK,KAAL,CAAW,eAAX,CAA2B,YAAY,CAAC,YAAxC,CAAnB;;AAEA,QAAI,OAAO,GAAG,KAAK,KAAL,CAAW,UAAX,EAAd;;AACA,QAAI,OAAO,GAAG,KAAK,KAAL,CAAW,SAAX,CAAqB,YAArB,CAAd;;AAEA,QAAI,cAAc,GAAG,UAAC,gBAAD,EAA0B;AAC3C,UAAI,YAAJ,EAAkB;AACd,aAAK,IAAI,EAAE,GAAG,CAAd,EAAiB,EAAE,GAAG,KAAI,CAAC,QAAL,CAAc,MAApC,EAA4C,EAAE,EAA9C,EAAkD;AAC9C,cAAI,KAAI,CAAC,QAAL,CAAc,EAAd,EAAkB,QAAlB,CAA2B,iBAA3B,CAA6C,gBAA7C,EAA+D,MAA/D,CAAJ,EAA4E;AACxE,mBAAO,KAAI,CAAC,QAAL,CAAc,EAAd,CAAP;AACH;AACJ;AACJ;;AACD,aAAO,IAAP;AACH,KATD;;AAWA,QAAI,gBAAgB,GAAkB,EAAtC;;AAEA,QAAI,UAAU,GAAG,UAAC,CAAD,EAAU;AACvB,UAAI,CAAC,YAAL,EAAmB;AACf;AACH;;AAED,UAAI,MAAM,GAAG,CAAC,GAAG,OAAO,CAAC,aAAzB;AACA,UAAI,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,YAAlB,EAAgC,MAAM,GAAG,CAAzC,CAAf;AAEA,UAAI,MAAM,GAAG,cAAc,CAAC,QAAD,CAAd,IAA4B,IAAI,gBAAJ,CAAqB,QAArB,EAA+B,KAAI,CAAC,QAAL,CAAc,MAA7C,CAAzC;AACA,MAAA,MAAM,CAAC,eAAP,CAAuB,IAAvB,CAA4B,MAA5B;;AACA,UAAI,MAAM,CAAC,EAAP,KAAc,KAAI,CAAC,QAAL,CAAc,MAAhC,EAAwC;AACpC,QAAA,KAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,MAAnB;AACH;;AACD,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,MAAM,CAAC,EAA7B;AACH,KAdD,CAvBiF,CAsCjF;;;AACA,QAAI,aAAa,GAAG,OAAO,CAAC,aAA5B;AACA,IAAA,SAAS,CAAC,gBAAV,CAA2B,aAA3B,EAA2C,KAAK,cAAL,GAAsB,CAAvB,IAA6B,CAAvE,EAA0E,UAA1E,EAAsF,YAAA;AAElF,UAAI,WAAW,GAAG,UAAC,CAAD,EAAU;AACxB,YAAI,CAAC,OAAL,EAAc;AACV;AACH;;AAED,YAAI,MAAM,GAAI,OAAO,CAAC,UAAR,GAAqB,CAAtB,GAA2B,CAAxC;AACA,YAAI,GAAG,GAAI,MAAM,GAAG,CAApB;AACA,YAAI,EAAE,GAAG,OAAO,CAAC,GAAG,GAAG,CAAP,CAAhB;AACA,YAAI,EAAE,GAAG,OAAO,CAAC,GAAG,GAAG,CAAP,CAAhB;AACA,YAAI,EAAE,GAAG,OAAO,CAAC,GAAG,GAAG,CAAP,CAAhB;AACA,YAAI,EAAE,GAAqB,KAAI,CAAC,QAAL,CAAc,gBAAgB,CAAC,EAAE,GAAG,OAAO,CAAC,aAAd,CAA9B,CAA3B;AACA,YAAI,EAAE,GAAqB,KAAI,CAAC,QAAL,CAAc,gBAAgB,CAAC,EAAE,GAAG,OAAO,CAAC,aAAd,CAA9B,CAA3B;AACA,YAAI,EAAE,GAAqB,KAAI,CAAC,QAAL,CAAc,gBAAgB,CAAC,EAAE,GAAG,OAAO,CAAC,aAAd,CAA9B,CAA3B;AACA,YAAI,QAAQ,GAAG,IAAI,kBAAJ,CAAuB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAvB,CAAf;AACA,QAAA,QAAQ,CAAC,cAAT,GAA0B,GAA1B;;AACA,QAAA,KAAI,CAAC,SAAL,CAAe,IAAf,CAAoB,QAApB;AACH,OAhBD;;AAiBA,MAAA,SAAS,CAAC,gBAAV,CAA2B,OAAO,CAAC,UAAR,GAAqB,CAAhD,EAAmD,KAAI,CAAC,cAAxD,EAAwE,WAAxE,EAAqF,YAAA;AACjF,QAAA,KAAI,CAAC,IAAL,CAAU,QAAV;AACH,OAFD;AAGH,KAtBD;AAuBH,GA/DO;;AAiEA,EAAA,4BAAA,CAAA,SAAA,CAAA,IAAA,GAAR,UAAa,QAAb,EAA+B;AAA/B,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,aAAa,GAAG,UAAC,CAAD,EAAU;AAC1B,UAAI,CAAC,GAAG,KAAI,CAAC,SAAL,CAAe,CAAf,CAAR;AACA,MAAA,CAAC,CAAC,MAAF,GAAW,OAAO,CAAC,KAAR,CAAc,CAAC,CAAC,QAAF,CAAW,CAAX,EAAc,QAAd,CAAuB,QAAvB,CAAgC,CAAC,CAAC,QAAF,CAAW,CAAX,EAAc,QAA9C,CAAd,EAAuE,CAAC,CAAC,QAAF,CAAW,CAAX,EAAc,QAAd,CAAuB,QAAvB,CAAgC,CAAC,CAAC,QAAF,CAAW,CAAX,EAAc,QAA9C,CAAvE,EAAgI,SAAhI,EAAX;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,QAAA,CAAC,CAAC,QAAF,CAAW,CAAX,EAAc,CAAd,CAAgB,eAAhB,CAAgC,eAAe,CAAC,eAAhB,CAAgC,CAAC,CAAC,MAAF,CAAS,CAAzC,EAA4C,CAAC,CAAC,MAAF,CAAS,CAArD,EAAwD,CAAC,CAAC,MAAF,CAAS,CAAjE,EAAoE,CAAE,OAAO,CAAC,GAAR,CAAY,CAAC,CAAC,MAAd,EAAsB,CAAC,CAAC,QAAF,CAAW,CAAX,EAAc,QAApC,CAAtE,CAAhC;AACH;AACJ,KAND;;AAOA,IAAA,SAAS,CAAC,gBAAV,CAA2B,KAAK,SAAL,CAAe,MAA1C,EAAkD,KAAK,cAAvD,EAAuE,aAAvE,EAAsF,YAAA;AAElF,UAAI,aAAa,GAAG,UAAC,CAAD,EAAU;AAC1B,YAAI,CAAC,GAAG,KAAI,CAAC,SAAL,CAAe,CAAf,CAAR;;AACA,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AACxB,UAAA,CAAC,CAAC,KAAF,CAAQ,CAAR,IAAa,KAAI,CAAC,cAAL,CAAoB,CAAC,CAAC,QAAF,CAAW,CAAX,CAApB,EAAmC,CAAC,CAAC,QAAF,CAAW,CAAC,CAAC,GAAG,CAAL,IAAU,CAArB,CAAnC,CAAb;AACH;;AACD,QAAA,CAAC,CAAC,KAAF,CAAQ,CAAR,IAAa,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAT,EAAqB,CAAC,CAAC,KAAF,CAAQ,CAAR,CAArB,EAAiC,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAjC,CAAb;AACH,OAND;;AAOA,MAAA,SAAS,CAAC,gBAAV,CAA2B,KAAI,CAAC,SAAL,CAAe,MAA1C,EAAkD,KAAI,CAAC,cAAvD,EAAuE,aAAvE,EAAsF,YAAA;AAClF,QAAA,QAAQ;AACX,OAFD;AAGH,KAZD;AAaH,GArBO;;AAuBA,EAAA,4BAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,YAAxB,EAA4C;AAExC,QAAI,YAAY,GAA8B,EAA9C;AACA,QAAI,CAAJ;;AACA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,KAAK,QAAL,CAAc,MAA9B,EAAsC,EAAE,CAAxC,EAA2C;AACvC,WAAK,QAAL,CAAc,CAAd,EAAiB,aAAjB,GAAiC,CAAjC;AACH;;AACD,QAAI,CAAJ;AACA,QAAI,CAAJ;;AACA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,KAAK,SAAL,CAAe,MAA/B,EAAuC,EAAE,CAAzC,EAA4C;AACxC,UAAI,CAAC,KAAK,SAAL,CAAe,CAAf,EAAkB,OAAvB,EAAgC;AAC5B,QAAA,CAAC,GAAG,KAAK,SAAL,CAAe,CAAf,CAAJ;;AACA,aAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,CAAhB,EAAmB,EAAE,CAArB,EAAwB;AACpB,UAAA,CAAC,CAAC,QAAF,CAAW,CAAX,EAAc,aAAd,GAA8B,CAA9B;AACH;;AACD,QAAA,YAAY,CAAC,IAAb,CAAkB,CAAlB;AACH;AACJ;;AAED,QAAI,eAAe,GAAc,KAAK,kBAAL,CAAwB,eAAxB,CAAwC,YAAY,CAAC,YAArD,KAAsE,EAAvG;AACA,QAAI,aAAa,GAAc,KAAK,kBAAL,CAAwB,eAAxB,CAAwC,YAAY,CAAC,UAArD,KAAoE,EAAnG;AACA,QAAI,UAAU,GAAc,KAAK,kBAAL,CAAwB,eAAxB,CAAwC,YAAY,CAAC,MAArD,KAAgE,EAA5F;AACA,QAAI,aAAa,GAAc,KAAK,kBAAL,CAAwB,eAAxB,CAAwC,YAAY,CAAC,SAArD,KAAmE,EAAlG;;AAEA,QAAI,UAAU,GAAG,KAAK,KAAL,CAAW,eAAX,CAA2B,YAAY,CAAC,UAAxC,CAAjB;;AACA,QAAI,GAAG,GAAG,KAAK,KAAL,CAAW,eAAX,CAA2B,YAAY,CAAC,MAAxC,CAAV;;AACA,QAAI,UAAU,GAAG,KAAK,KAAL,CAAW,eAAX,CAA2B,YAAY,CAAC,SAAxC,CAAjB;;AAEA,QAAI,WAAW,GAAG,CAAlB;;AACA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,KAAK,QAAL,CAAc,MAA9B,EAAsC,EAAE,CAAxC,EAA2C;AACvC,UAAI,MAAM,GAAG,KAAK,QAAL,CAAc,CAAd,CAAb;AACA,MAAA,MAAM,CAAC,EAAP,GAAY,WAAZ;;AACA,UAAI,MAAM,CAAC,aAAX,EAA0B;AACtB,QAAA,MAAM,CAAC,eAAP,CAAuB,OAAvB,CAA+B,UAAC,cAAD,EAAe;AAE1C,UAAA,eAAe,CAAC,IAAhB,CAAqB,MAAM,CAAC,QAAP,CAAgB,CAArC;AACA,UAAA,eAAe,CAAC,IAAhB,CAAqB,MAAM,CAAC,QAAP,CAAgB,CAArC;AACA,UAAA,eAAe,CAAC,IAAhB,CAAqB,MAAM,CAAC,QAAP,CAAgB,CAArC;;AAEA,cAAI,UAAU,IAAI,UAAU,CAAC,MAA7B,EAAqC;AACjC,YAAA,aAAa,CAAC,IAAd,CAAmB,UAAU,CAAC,cAAc,GAAG,CAAlB,CAA7B;AACA,YAAA,aAAa,CAAC,IAAd,CAAmB,UAAU,CAAE,cAAc,GAAG,CAAlB,GAAuB,CAAxB,CAA7B;AACA,YAAA,aAAa,CAAC,IAAd,CAAmB,UAAU,CAAE,cAAc,GAAG,CAAlB,GAAuB,CAAxB,CAA7B;AACH;;AACD,cAAI,GAAG,IAAI,GAAG,CAAC,MAAf,EAAuB;AACnB,YAAA,UAAU,CAAC,IAAX,CAAgB,GAAG,CAAE,cAAc,GAAG,CAAnB,CAAnB;AACA,YAAA,UAAU,CAAC,IAAX,CAAgB,GAAG,CAAE,cAAc,GAAG,CAAlB,GAAuB,CAAxB,CAAnB;AACH;;AACD,cAAI,UAAU,IAAI,UAAU,CAAC,MAA7B,EAAqC;AACjC,YAAA,aAAa,CAAC,IAAd,CAAmB,UAAU,CAAE,cAAc,GAAG,CAAnB,CAA7B;AACA,YAAA,aAAa,CAAC,IAAd,CAAmB,UAAU,CAAE,cAAc,GAAG,CAAlB,GAAuB,CAAxB,CAA7B;AACA,YAAA,aAAa,CAAC,IAAd,CAAmB,UAAU,CAAE,cAAc,GAAG,CAAlB,GAAuB,CAAxB,CAA7B;AACA,YAAA,aAAa,CAAC,IAAd,CAAmB,UAAU,CAAE,cAAc,GAAG,CAAlB,GAAuB,CAAxB,CAA7B;AACH;;AACD,YAAE,WAAF;AACH,SAtBD;AAuBH;AACJ;;AAED,QAAI,aAAa,GAAG,KAAK,kBAAL,CAAwB,eAAxB,EAApB;;AACA,QAAI,cAAc,GAAG,KAAK,kBAAL,CAAwB,gBAAxB,EAArB;;AAEA,QAAI,cAAc,GAAG,KAAK,kBAAL,CAAwB,SAA7C;AACA,SAAK,kBAAL,CAAwB,SAAxB,GAAoC,EAApC;;AAEA,QAAI,eAAe,GAAuB,KAAK,kBAAL,CAAwB,UAAxB,EAA1C,CAjEwC,CAiEwC;;;AAChF,QAAI,eAAe,GAAiB,KAAK,KAAL,CAAW,UAAX,EAApC;;AACA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,YAAY,CAAC,MAA7B,EAAqC,EAAE,CAAvC,EAA0C;AACtC,MAAA,CAAC,GAAG,YAAY,CAAC,CAAD,CAAhB,CADsC,CACjB;;AACrB,OAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,OAAV,CAAkB,UAAC,GAAD,EAAI;AAClB,YAAI,EAAE,GAAG,eAAe,CAAC,CAAC,CAAC,cAAF,GAAmB,GAApB,CAAxB;AACA,YAAI,MAAM,GAAG,CAAC,CAAC,QAAF,CAAW,GAAX,EAAgB,eAAhB,CAAgC,OAAhC,CAAwC,EAAxC,CAAb;;AACA,YAAI,MAAM,GAAG,CAAb,EAAgB;AAAE,UAAA,MAAM,GAAG,CAAT;AAAa;;AAC/B,QAAA,eAAe,CAAC,IAAhB,CAAqB,CAAC,CAAC,QAAF,CAAW,GAAX,EAAgB,EAAhB,GAAqB,MAArB,GAA8B,cAAnD;AACH,OALD;AAMH,KA3EuC,CA6ExC;;;AAEA,SAAK,kBAAL,CAAwB,UAAxB,CAAmC,eAAnC;;AACA,SAAK,kBAAL,CAAwB,eAAxB,CAAwC,YAAY,CAAC,YAArD,EAAmE,eAAnE;;AACA,QAAI,aAAa,CAAC,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,WAAK,kBAAL,CAAwB,eAAxB,CAAwC,YAAY,CAAC,UAArD,EAAiE,aAAjE;AACH;;AACD,QAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;AACvB,WAAK,kBAAL,CAAwB,eAAxB,CAAwC,YAAY,CAAC,MAArD,EAA6D,UAA7D;AACH;;AACD,QAAI,aAAa,CAAC,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,WAAK,kBAAL,CAAwB,eAAxB,CAAwC,YAAY,CAAC,SAArD,EAAgE,aAAhE;AACH,KAzFuC,CA2FxC;;;AACA,QAAI,eAAe,GAAG,KAAK,KAAL,CAAW,SAAX,CAAqB,YAArB,CAAtB;;AACA,QAAI,YAAY,GAAG,CAAnB,EAAsB;AAClB,WAAK,kBAAL,CAAwB,SAAxB,GAAoC,EAApC;AACA,MAAA,cAAc,CAAC,OAAf,CAAuB,UAAC,OAAD,EAAQ;AAC3B,QAAA,OAAO,CAAC,SAAR,CAAkB,OAAO,CAAC,aAA1B,EAAyC,OAAO,CAAC,aAAjD,EAAgE,OAAO,CAAC,aAAxE;AAAuF;AAAkC,QAAA,OAAO,CAAC,UAAjI,EAA6I,OAAO,CAAC,UAArJ,EAAiK,OAAO,CAAC,OAAR,EAAjK;AACH,OAFD;AAGA,MAAA,OAAO,CAAC,SAAR,CAAkB,eAAe,CAAC,aAAlC,EAAiD,cAAjD,EAAiE,WAAjE;AAA8E;AAAoC,MAAA,aAAlH,EAAiI,YAAY,CAAC,MAAb,GAAsB,CAAvJ,EAA0J,KAAK,kBAA/J;AACH;AACJ,GApGO;;AAsGA,EAAA,4BAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,YAAA;AACI,SAAK,kBAAL,GAA0B,IAAI,IAAJ,CAAS,KAAK,KAAL,CAAW,IAAX,GAAkB,WAA3B,EAAwC,KAAK,KAAL,CAAW,QAAX,EAAxC,CAA1B;AACA,SAAK,kBAAL,CAAwB,QAAxB,GAAmC,KAAK,KAAL,CAAW,QAA9C;AACA,SAAK,kBAAL,CAAwB,MAAxB,GAAiC,KAAK,KAAL,CAAW,MAA5C;AACA,SAAK,kBAAL,CAAwB,SAAxB,GAAoC,KAApC;AACA,SAAK,kBAAL,CAAwB,gBAAxB,GAA2C,KAAK,KAAL,CAAW,gBAAtD;AACH,GANO;;AAQA,EAAA,4BAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,OAAlB,EAA6C,OAA7C,EAAwE,KAAxE,EAAwF,YAAxF,EAAsH,KAAtH,EAAsJ;AAElJ,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,aAA5B,EAA2C,EAAE,CAA7C,EAAgD;AAC5C,UAAI,CAAC,GAAG,KAAK,SAAL,CAAe,KAAK,UAAL,CAAgB,OAAO,CAAC,aAAR,GAAwB,CAAxC,EAA2C,UAA1D,CAAR;;AACA,UAAI,CAAC,CAAC,OAAN,EAAe;AAAE;AAAW;;AAE5B,UAAI,CAAC,GAAG,KAAK,UAAL,CAAgB,OAAO,CAAC,aAAR,GAAwB,CAAxC,EAA2C,QAAnD;AAEA,UAAI,EAAE,GAAG,CAAC,CAAC,QAAF,CAAW,CAAC,CAAC,GAAG,CAAL,IAAU,CAArB,CAAT;AACA,UAAI,EAAE,GAAG,CAAC,CAAC,QAAF,CAAW,CAAC,CAAC,GAAG,CAAL,IAAU,CAArB,CAAT;;AAEA,UAAK,EAAE,KAAK,OAAP,IAAkB,EAAE,KAAK,OAA9B,EAAwC;AACpC,QAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,IAAlB;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,CAAX;AACA;AACH;;AAED,UAAI,EAAE,GAAG,EAAE,CAAC,QAAH,CAAY,QAAZ,CAAqB,KAArB,CAAT;AACA,MAAA,EAAE,GAAG,EAAE,CAAC,SAAH,EAAL;AACA,UAAI,EAAE,GAAG,EAAE,CAAC,QAAH,CAAY,QAAZ,CAAqB,KAArB,CAAT;AACA,MAAA,EAAE,GAAG,EAAE,CAAC,SAAH,EAAL;;AACA,UAAI,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,GAAR,CAAY,EAAZ,EAAgB,EAAhB,CAAT,IAAgC,KAApC,EAA2C;AAAE,eAAO,IAAP;AAAc;;AAC3D,UAAI,MAAM,GAAG,OAAO,CAAC,KAAR,CAAc,EAAd,EAAkB,EAAlB,EAAsB,SAAtB,EAAb;AACA,MAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,KAAlB;;AACA,UAAI,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAoB,CAAC,CAAC,MAAtB,IAAgC,GAApC,EAAyC;AAAE,eAAO,IAAP;AAAc;AAC5D;;AAED,WAAO,KAAP;AACH,GA5BO;;AA8BA,EAAA,4BAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,UAAxB,EAAsD,MAAtD,EAAgF,YAAhF,EAA8G,gBAA9G,EAAsI;AAClI,QAAI,UAAU,GAAG,gBAAjB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,aAA3B,EAA0C,EAAE,CAA5C,EAA+C;AAC3C,UAAI,GAAG,GAAG,KAAK,UAAL,CAAgB,MAAM,CAAC,aAAP,GAAuB,CAAvC,CAAV;AACA,UAAI,CAAC,GAAG,KAAK,SAAL,CAAe,GAAG,CAAC,UAAnB,CAAR;;AACA,UAAI,CAAC,CAAC,OAAN,EAAe;AAAE;AAAW;;AAC5B,UAAI,YAAY,CAAC,CAAD,CAAZ,IAAmB,CAAC,CAAC,aAAzB,EAAwC;AACpC,QAAA,CAAC,CAAC,OAAF,GAAY,IAAZ;AACA,QAAA,UAAU;AACV;AACH;;AACD,MAAA,CAAC,CAAC,QAAF,CAAW,GAAG,CAAC,QAAf,IAA2B,UAA3B;AACA,MAAA,CAAC,CAAC,OAAF,GAAY,IAAZ;AACA,MAAA,CAAC,CAAC,KAAF,CAAQ,CAAR,IAAa,KAAK,cAAL,CAAoB,CAAC,CAAC,QAAF,CAAW,CAAX,CAApB,EAAmC,CAAC,CAAC,QAAF,CAAW,CAAX,CAAnC,IAAqD,CAAC,CAAC,YAAF,GAAiB,CAAnF;AACA,MAAA,CAAC,CAAC,KAAF,CAAQ,CAAR,IAAa,KAAK,cAAL,CAAoB,CAAC,CAAC,QAAF,CAAW,CAAX,CAApB,EAAmC,CAAC,CAAC,QAAF,CAAW,CAAX,CAAnC,IAAqD,CAAC,CAAC,YAAF,GAAiB,CAAnF;AACA,MAAA,CAAC,CAAC,KAAF,CAAQ,CAAR,IAAa,KAAK,cAAL,CAAoB,CAAC,CAAC,QAAF,CAAW,CAAX,CAApB,EAAmC,CAAC,CAAC,QAAF,CAAW,CAAX,CAAnC,IAAqD,CAAC,CAAC,YAAF,GAAiB,CAAnF;AACA,MAAA,CAAC,CAAC,KAAF,CAAQ,CAAR,IAAa,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAT,EAAqB,CAAC,CAAC,KAAF,CAAQ,CAAR,CAArB,EAAiC,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAjC,CAAb;AACA,WAAK,UAAL,CAAgB,IAAhB,CAAqB,GAArB;AACH;;AACD,WAAO,UAAP;AACH,GApBO;;AAsBA,EAAA,4BAAA,CAAA,SAAA,CAAA,cAAA,GAAR,YAAA;AAEI,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,QAAL,CAAc,MAAlC,EAA0C,EAAE,CAA5C,EAA+C;AAC3C,UAAI,MAAM,GAAkB,EAA5B;AACA,UAAI,GAAG,GAAkB,EAAzB;AACA,UAAI,CAAC,GAAG,KAAK,QAAL,CAAc,CAAd,CAAR;AACA,UAAI,CAAJ;;AACA,WAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,CAAC,CAAC,aAAlB,EAAiC,EAAE,CAAnC,EAAsC;AAClC,YAAI,QAAQ,GAAG,KAAK,SAAL,CAAe,KAAK,UAAL,CAAgB,CAAC,CAAC,aAAF,GAAkB,CAAlC,EAAqC,UAApD,CAAf;;AACA,aAAK,IAAI,EAAE,GAAG,CAAd,EAAiB,EAAE,GAAG,CAAtB,EAAyB,EAAE,EAA3B,EAA+B;AAC3B,cAAI,GAAG,GAAG,CAAV;AACA,cAAI,EAAE,GAAG,QAAQ,CAAC,QAAT,CAAkB,EAAlB,CAAT;;AACA,iBAAO,GAAG,GAAG,MAAM,CAAC,MAApB,EAA4B;AACxB,gBAAI,GAAG,CAAC,GAAD,CAAH,KAAa,EAAE,CAAC,EAApB,EAAwB;AAAE;AAAQ;;AAClC,cAAE,GAAF;AACH;;AACD,cAAI,GAAG,KAAK,MAAM,CAAC,MAAnB,EAA2B;AACvB,YAAA,MAAM,CAAC,IAAP,CAAY,CAAZ;AACA,YAAA,GAAG,CAAC,IAAJ,CAAS,EAAE,CAAC,EAAZ;AACH,WAHD,MAGO;AACH,YAAA,MAAM,CAAC,GAAD,CAAN;AACH;AACJ;AACJ;;AAED,WAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,MAAM,CAAC,MAAvB,EAA+B,EAAE,CAAjC,EAAoC;AAChC,YAAI,MAAM,CAAC,CAAD,CAAN,KAAc,CAAlB,EAAqB;AACjB,eAAK,QAAL,CAAc,GAAG,CAAC,CAAD,CAAjB,EAAsB,QAAtB,GAAiC,IAAjC;AACH,SAFD,MAEO;AACH,eAAK,QAAL,CAAc,GAAG,CAAC,CAAD,CAAjB,EAAsB,QAAtB,GAAiC,KAAjC;AACH;AACJ;AAEJ;AACJ,GAlCO;;AAoCA,EAAA,4BAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,eAAnB,EAAmD;AAAhC,QAAA,eAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,eAAA,GAAA,KAAA;AAAgC;;AAC/C,QAAI,CAAJ;;AACA,QAAI,CAAC,eAAL,EAAsB;AAClB,UAAI,kBAAkB,GAA8B,EAApD;;AACA,WAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,KAAK,SAAL,CAAe,MAA/B,EAAuC,EAAE,CAAzC,EAA4C;AACxC,YAAI,CAAC,KAAK,SAAL,CAAe,CAAf,EAAkB,OAAvB,EAAgC;AAC5B,UAAA,kBAAkB,CAAC,IAAnB,CAAwB,KAAK,SAAL,CAAe,CAAf,CAAxB;AACH;AACJ;;AACD,WAAK,SAAL,GAAiB,kBAAjB;AACH;;AAED,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,KAAK,QAAL,CAAc,MAA9B,EAAsC,EAAE,CAAxC,EAA2C;AACvC,WAAK,QAAL,CAAc,CAAd,EAAiB,aAAjB,GAAiC,CAAjC;AACA,WAAK,QAAL,CAAc,CAAd,EAAiB,aAAjB,GAAiC,CAAjC;AACH;;AACD,QAAI,CAAJ;AACA,QAAI,CAAJ;AACA,QAAI,CAAJ;;AACA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,KAAK,SAAL,CAAe,MAA/B,EAAuC,EAAE,CAAzC,EAA4C;AACxC,MAAA,CAAC,GAAG,KAAK,SAAL,CAAe,CAAf,CAAJ;;AACA,WAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,CAAhB,EAAmB,EAAE,CAArB,EAAwB;AACpB,QAAA,CAAC,GAAG,CAAC,CAAC,QAAF,CAAW,CAAX,CAAJ;AACA,QAAA,CAAC,CAAC,aAAF;AACH;AACJ;;AAED,QAAI,MAAM,GAAG,CAAb;;AAEA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,KAAK,QAAL,CAAc,MAA9B,EAAsC,EAAE,CAAxC,EAA2C;AACvC,WAAK,QAAL,CAAc,CAAd,EAAiB,aAAjB,GAAiC,MAAjC;AACA,MAAA,MAAM,IAAI,KAAK,QAAL,CAAc,CAAd,EAAiB,aAA3B;AACA,WAAK,QAAL,CAAc,CAAd,EAAiB,aAAjB,GAAiC,CAAjC;AACH;;AAED,QAAI,aAAa,GAAqB,IAAI,KAAJ,CAAU,KAAK,SAAL,CAAe,MAAf,GAAwB,CAAlC,CAAtC;;AACA,SAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,KAAK,SAAL,CAAe,MAA/B,EAAuC,EAAE,CAAzC,EAA4C;AACxC,MAAA,CAAC,GAAG,KAAK,SAAL,CAAe,CAAf,CAAJ;;AACA,WAAK,CAAC,GAAG,CAAT,EAAY,CAAC,GAAG,CAAhB,EAAmB,EAAE,CAArB,EAAwB;AACpB,QAAA,CAAC,GAAG,CAAC,CAAC,QAAF,CAAW,CAAX,CAAJ;AACA,QAAA,aAAa,CAAC,CAAC,CAAC,aAAF,GAAkB,CAAC,CAAC,aAArB,CAAb,GAAmD,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAnD;AACA,QAAA,CAAC,CAAC,aAAF;AACH;AACJ;;AACD,SAAK,UAAL,GAAkB,aAAlB;;AAEA,QAAI,eAAJ,EAAqB;AACjB,WAAK,cAAL;AACH;AACJ,GAjDO;;AAmDA,EAAA,4BAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,CAApB,EAAwC,KAAxC,EAAsD;AAClD,QAAI,CAAC,GAAG,KAAK,CAAC,CAAd;AACA,QAAI,CAAC,GAAG,KAAK,CAAC,CAAd;AACA,QAAI,CAAC,GAAG,KAAK,CAAC,CAAd;AACA,WAAO,CAAC,CAAC,IAAF,CAAO,CAAP,IAAY,CAAZ,GAAgB,CAAhB,GAAoB,IAAI,CAAC,CAAC,IAAF,CAAO,CAAP,CAAJ,GAAgB,CAAhB,GAAoB,CAAxC,GAA4C,IAAI,CAAC,CAAC,IAAF,CAAO,CAAP,CAAJ,GAAgB,CAAhB,GAAoB,CAAhE,GAAoE,IAAI,CAAC,CAAC,IAAF,CAAO,CAAP,CAAJ,GAAgB,CAApF,GAAwF,CAAC,CAAC,IAAF,CAAO,CAAP,IAAY,CAAZ,GAAgB,CAAxG,GACD,IAAI,CAAC,CAAC,IAAF,CAAO,CAAP,CAAJ,GAAgB,CAAhB,GAAoB,CADnB,GACuB,IAAI,CAAC,CAAC,IAAF,CAAO,CAAP,CAAJ,GAAgB,CADvC,GAC2C,CAAC,CAAC,IAAF,CAAO,CAAP,IAAY,CAAZ,GAAgB,CAD3D,GAC+D,IAAI,CAAC,CAAC,IAAF,CAAO,CAAP,CAAJ,GAAgB,CAD/E,GACmF,CAAC,CAAC,IAAF,CAAO,CAAP,CAD1F;AAEH,GANO;;AAQA,EAAA,4BAAA,CAAA,SAAA,CAAA,cAAA,GAAR,UAAuB,OAAvB,EAAkD,OAAlD,EAA6E,WAA7E,EAAkG;AAC9F,QAAI,CAAC,GAAG,OAAO,CAAC,CAAR,CAAU,GAAV,CAAc,OAAO,CAAC,CAAtB,CAAR;AACA,QAAI,MAAM,GAAG,OAAO,CAAC,QAAR,IAAoB,OAAO,CAAC,QAAzC;AACA,QAAI,KAAK,GAAW,CAApB;AACA,QAAI,IAAI,GAAG,CAAC,CAAC,GAAF,CAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAAX;;AAEA,QAAI,IAAI,KAAK,CAAT,IAAc,CAAC,MAAnB,EAA2B;AACvB,UAAI,CAAC,WAAL,EAAkB;AACd,QAAA,WAAW,GAAG,OAAO,CAAC,IAAR,EAAd;AACH;;AACD,MAAA,WAAW,CAAC,CAAZ,GAAgB,CAAC,CAAD,GAAK,IAAL,GAAa,CAAC,CAAC,GAAF,CAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAA7B;AACA,MAAA,WAAW,CAAC,CAAZ,GAAgB,IAAI,IAAJ,GAAY,CAAC,CAAC,GAAF,CAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAA5B;AACA,MAAA,WAAW,CAAC,CAAZ,GAAgB,CAAC,CAAD,GAAK,IAAL,GAAa,CAAC,CAAC,GAAF,CAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAA7B;AACA,MAAA,KAAK,GAAG,KAAK,WAAL,CAAiB,CAAjB,EAAoB,WAApB,CAAR;AACH,KARD,MAQO;AACH,UAAI,EAAE,GAAI,OAAO,CAAC,QAAR,CAAiB,GAAjB,CAAqB,OAAO,CAAC,QAA7B,CAAD,CAAyC,MAAzC,CAAgD,IAAI,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAhD,CAAT,CADG,CAEH;;AACA,UAAI,MAAM,GAAG,KAAK,WAAL,CAAiB,CAAjB,EAAoB,OAAO,CAAC,QAA5B,CAAb;AACA,UAAI,MAAM,GAAG,KAAK,WAAL,CAAiB,CAAjB,EAAoB,OAAO,CAAC,QAA5B,CAAb;AACA,UAAI,MAAM,GAAG,KAAK,WAAL,CAAiB,CAAjB,EAAoB,EAApB,CAAb;AACA,MAAA,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CAAR;;AACA,UAAI,KAAK,KAAK,MAAd,EAAsB;AAClB,YAAI,WAAJ,EAAiB;AACb,UAAA,WAAW,CAAC,QAAZ,CAAqB,OAAO,CAAC,QAA7B;AACH;AACJ,OAJD,MAIO,IAAI,KAAK,KAAK,MAAd,EAAsB;AACzB,YAAI,WAAJ,EAAiB;AACb,UAAA,WAAW,CAAC,QAAZ,CAAqB,OAAO,CAAC,QAA7B;AACH;AACJ,OAJM,MAIA;AACH,YAAI,WAAJ,EAAiB;AACb,UAAA,WAAW,CAAC,QAAZ,CAAqB,EAArB;AACH;AACJ;AACJ;;AACD,WAAO,KAAP;AACH,GApCO;;AAqCZ,SAAA,4BAAA;AAAC,CA7hBD,EAAA","sourcesContent":["import { IndicesArray } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Meshes/buffer\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { AsyncLoop } from \"../Misc/tools\";\r\nimport { Epsilon } from '../Maths/math.constants';\r\n/**\r\n * A simplifier interface for future simplification implementations\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport interface ISimplifier {\r\n    /**\r\n     * Simplification of a given mesh according to the given settings.\r\n     * Since this requires computation, it is assumed that the function runs async.\r\n     * @param settings The settings of the simplification, including quality and distance\r\n     * @param successCallback A callback that will be called after the mesh was simplified.\r\n     * @param errorCallback in case of an error, this callback will be called. optional.\r\n     */\r\n    simplify(settings: ISimplificationSettings, successCallback: (simplifiedMeshes: Mesh) => void, errorCallback?: () => void): void;\r\n}\r\n\r\n/**\r\n * Expected simplification settings.\r\n * Quality should be between 0 and 1 (1 being 100%, 0 being 0%)\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport interface ISimplificationSettings {\r\n    /**\r\n     * Gets or sets the expected quality\r\n     */\r\n    quality: number;\r\n    /**\r\n     * Gets or sets the distance when this optimized version should be used\r\n     */\r\n    distance: number;\r\n    /**\r\n     * Gets an already optimized mesh\r\n     */\r\n    optimizeMesh?: boolean;\r\n}\r\n\r\n/**\r\n * Class used to specify simplification options\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport class SimplificationSettings implements ISimplificationSettings {\r\n    /**\r\n     * Creates a SimplificationSettings\r\n     * @param quality expected quality\r\n     * @param distance distance when this optimized version should be used\r\n     * @param optimizeMesh already optimized mesh\r\n     */\r\n    constructor(\r\n        /** expected quality */\r\n        public quality: number,\r\n        /** distance when this optimized version should be used */\r\n        public distance: number,\r\n        /** already optimized mesh  */\r\n        public optimizeMesh?: boolean) {\r\n    }\r\n}\r\n\r\n/**\r\n * Interface used to define a simplification task\r\n */\r\nexport interface ISimplificationTask {\r\n    /**\r\n     * Array of settings\r\n     */\r\n    settings: Array<ISimplificationSettings>;\r\n    /**\r\n     * Simplification type\r\n     */\r\n    simplificationType: SimplificationType;\r\n    /**\r\n     * Mesh to simplify\r\n     */\r\n    mesh: Mesh;\r\n    /**\r\n     * Callback called on success\r\n     */\r\n    successCallback?: () => void;\r\n    /**\r\n     * Defines if parallel processing can be used\r\n     */\r\n    parallelProcessing: boolean;\r\n}\r\n\r\n/**\r\n * Queue used to order the simplification tasks\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport class SimplificationQueue {\r\n    private _simplificationArray: Array<ISimplificationTask>;\r\n\r\n    /**\r\n     * Gets a boolean indicating that the process is still running\r\n     */\r\n    public running: boolean;\r\n\r\n    /**\r\n     * Creates a new queue\r\n     */\r\n    constructor() {\r\n        this.running = false;\r\n        this._simplificationArray = [];\r\n    }\r\n\r\n    /**\r\n     * Adds a new simplification task\r\n     * @param task defines a task to add\r\n     */\r\n    public addTask(task: ISimplificationTask) {\r\n        this._simplificationArray.push(task);\r\n    }\r\n\r\n    /**\r\n     * Execute next task\r\n     */\r\n    public executeNext() {\r\n        var task = this._simplificationArray.pop();\r\n        if (task) {\r\n            this.running = true;\r\n            this.runSimplification(task);\r\n        } else {\r\n            this.running = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a simplification task\r\n     * @param task defines the task to run\r\n     */\r\n    public runSimplification(task: ISimplificationTask) {\r\n        if (task.parallelProcessing) {\r\n            //parallel simplifier\r\n            task.settings.forEach((setting) => {\r\n                var simplifier = this.getSimplifier(task);\r\n                simplifier.simplify(setting, (newMesh) => {\r\n                    if (setting.distance !== undefined) {\r\n                        task.mesh.addLODLevel(setting.distance, newMesh);\r\n                    }\r\n                    newMesh.isVisible = true;\r\n                    //check if it is the last\r\n                    if (setting.quality === task.settings[task.settings.length - 1].quality && task.successCallback) {\r\n                        //all done, run the success callback.\r\n                        task.successCallback();\r\n                    }\r\n                    this.executeNext();\r\n                });\r\n            });\r\n        } else {\r\n            //single simplifier.\r\n            var simplifier = this.getSimplifier(task);\r\n\r\n            var runDecimation = (setting: ISimplificationSettings, callback: () => void) => {\r\n                simplifier.simplify(setting, (newMesh) => {\r\n                    if (setting.distance !== undefined) {\r\n                        task.mesh.addLODLevel(setting.distance, newMesh);\r\n                    }\r\n                    newMesh.isVisible = true;\r\n                    //run the next quality level\r\n                    callback();\r\n                });\r\n            };\r\n\r\n            AsyncLoop.Run(task.settings.length, (loop: AsyncLoop) => {\r\n                runDecimation(task.settings[loop.index], () => {\r\n                    loop.executeNext();\r\n                });\r\n            }, () => {\r\n                //execution ended, run the success callback.\r\n                if (task.successCallback) {\r\n                    task.successCallback();\r\n                }\r\n                this.executeNext();\r\n            });\r\n        }\r\n    }\r\n\r\n    private getSimplifier(task: ISimplificationTask): ISimplifier {\r\n        switch (task.simplificationType) {\r\n            case SimplificationType.QUADRATIC:\r\n            default:\r\n                return new QuadraticErrorSimplification(task.mesh);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * The implemented types of simplification\r\n * At the moment only Quadratic Error Decimation is implemented\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport enum SimplificationType {\r\n    /** Quadratic error decimation */\r\n    QUADRATIC\r\n}\r\n\r\nclass DecimationTriangle {\r\n    public normal: Vector3;\r\n    public error: Array<number>;\r\n    public deleted: boolean;\r\n    public isDirty: boolean;\r\n    public borderFactor: number;\r\n    public deletePending: boolean;\r\n\r\n    public originalOffset: number;\r\n\r\n    constructor(public vertices: Array<DecimationVertex>) {\r\n        this.error = new Array<number>(4);\r\n        this.deleted = false;\r\n        this.isDirty = false;\r\n        this.deletePending = false;\r\n        this.borderFactor = 0;\r\n    }\r\n}\r\n\r\nclass DecimationVertex {\r\n    public q: QuadraticMatrix;\r\n    public isBorder: boolean;\r\n\r\n    public triangleStart: number;\r\n    public triangleCount: number;\r\n\r\n    public originalOffsets: Array<number>;\r\n\r\n    constructor(public position: Vector3, public id: number) {\r\n        this.isBorder = true;\r\n        this.q = new QuadraticMatrix();\r\n        this.triangleCount = 0;\r\n        this.triangleStart = 0;\r\n        this.originalOffsets = [];\r\n    }\r\n\r\n    public updatePosition(newPosition: Vector3) {\r\n        this.position.copyFrom(newPosition);\r\n    }\r\n}\r\n\r\nclass QuadraticMatrix {\r\n    public data: Array<number>;\r\n\r\n    constructor(data?: Array<number>) {\r\n        this.data = new Array(10);\r\n        for (var i = 0; i < 10; ++i) {\r\n            if (data && data[i]) {\r\n                this.data[i] = data[i];\r\n            } else {\r\n                this.data[i] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public det(a11: number, a12: number, a13: number, a21: number, a22: number, a23: number, a31: number, a32: number, a33: number): number {\r\n        var det = this.data[a11] * this.data[a22] * this.data[a33] + this.data[a13] * this.data[a21] * this.data[a32] +\r\n            this.data[a12] * this.data[a23] * this.data[a31] - this.data[a13] * this.data[a22] * this.data[a31] -\r\n            this.data[a11] * this.data[a23] * this.data[a32] - this.data[a12] * this.data[a21] * this.data[a33];\r\n        return det;\r\n    }\r\n\r\n    public addInPlace(matrix: QuadraticMatrix) {\r\n        for (var i = 0; i < 10; ++i) {\r\n            this.data[i] += matrix.data[i];\r\n        }\r\n    }\r\n\r\n    public addArrayInPlace(data: Array<number>) {\r\n        for (var i = 0; i < 10; ++i) {\r\n            this.data[i] += data[i];\r\n        }\r\n    }\r\n\r\n    public add(matrix: QuadraticMatrix): QuadraticMatrix {\r\n        var m = new QuadraticMatrix();\r\n        for (var i = 0; i < 10; ++i) {\r\n            m.data[i] = this.data[i] + matrix.data[i];\r\n        }\r\n        return m;\r\n    }\r\n\r\n    public static FromData(a: number, b: number, c: number, d: number): QuadraticMatrix {\r\n        return new QuadraticMatrix(QuadraticMatrix.DataFromNumbers(a, b, c, d));\r\n    }\r\n\r\n    //returning an array to avoid garbage collection\r\n    public static DataFromNumbers(a: number, b: number, c: number, d: number) {\r\n        return [a * a, a * b, a * c, a * d, b * b, b * c, b * d, c * c, c * d, d * d];\r\n    }\r\n}\r\n\r\nclass Reference {\r\n    constructor(public vertexId: number, public triangleId: number) { }\r\n}\r\n\r\n/**\r\n * An implementation of the Quadratic Error simplification algorithm.\r\n * Original paper : http://www1.cs.columbia.edu/~cs4162/html05s/garland97.pdf\r\n * Ported mostly from QSlim and http://voxels.blogspot.de/2014/05/quadric-mesh-simplification-with-source.html to babylon JS\r\n * @author RaananW\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport class QuadraticErrorSimplification implements ISimplifier {\r\n\r\n    private triangles: Array<DecimationTriangle>;\r\n    private vertices: Array<DecimationVertex>;\r\n    private references: Array<Reference>;\r\n\r\n    private _reconstructedMesh: Mesh;\r\n\r\n    /** Gets or sets the number pf sync interations */\r\n    public syncIterations = 5000;\r\n\r\n    /** Gets or sets the aggressiveness of the simplifier */\r\n    public aggressiveness: number;\r\n\r\n    /** Gets or sets the number of allowed iterations for decimation */\r\n    public decimationIterations: number;\r\n\r\n    /** Gets or sets the espilon to use for bounding box computation */\r\n    public boundingBoxEpsilon: number;\r\n\r\n    /**\r\n     * Creates a new QuadraticErrorSimplification\r\n     * @param _mesh defines the target mesh\r\n     */\r\n    constructor(private _mesh: Mesh) {\r\n        this.aggressiveness = 7;\r\n        this.decimationIterations = 100;\r\n        this.boundingBoxEpsilon = Epsilon;\r\n    }\r\n\r\n    /**\r\n     * Simplification of a given mesh according to the given settings.\r\n     * Since this requires computation, it is assumed that the function runs async.\r\n     * @param settings The settings of the simplification, including quality and distance\r\n     * @param successCallback A callback that will be called after the mesh was simplified.\r\n     */\r\n    public simplify(settings: ISimplificationSettings, successCallback: (simplifiedMesh: Mesh) => void) {\r\n        this.initDecimatedMesh();\r\n        //iterating through the submeshes array, one after the other.\r\n        AsyncLoop.Run(this._mesh.subMeshes.length, (loop: AsyncLoop) => {\r\n            this.initWithMesh(loop.index, () => {\r\n                this.runDecimation(settings, loop.index, () => {\r\n                    loop.executeNext();\r\n                });\r\n            }, settings.optimizeMesh);\r\n        }, () => {\r\n            setTimeout(() => {\r\n                successCallback(this._reconstructedMesh);\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    private runDecimation(settings: ISimplificationSettings, submeshIndex: number, successCallback: () => void) {\r\n        var targetCount = ~~(this.triangles.length * settings.quality);\r\n        var deletedTriangles = 0;\r\n\r\n        var triangleCount = this.triangles.length;\r\n\r\n        var iterationFunction = (iteration: number, callback: () => void) => {\r\n            setTimeout(() => {\r\n                if (iteration % 5 === 0) {\r\n                    this.updateMesh(iteration === 0);\r\n                }\r\n\r\n                for (var i = 0; i < this.triangles.length; ++i) {\r\n                    this.triangles[i].isDirty = false;\r\n                }\r\n\r\n                var threshold = 0.000000001 * Math.pow((iteration + 3), this.aggressiveness);\r\n\r\n                var trianglesIterator = (i: number) => {\r\n                    var tIdx = ~~(((this.triangles.length / 2) + i) % this.triangles.length);\r\n                    var t = this.triangles[tIdx];\r\n                    if (!t) { return; }\r\n                    if (t.error[3] > threshold || t.deleted || t.isDirty) { return; }\r\n                    for (var j = 0; j < 3; ++j) {\r\n                        if (t.error[j] < threshold) {\r\n                            var deleted0: Array<boolean> = [];\r\n                            var deleted1: Array<boolean> = [];\r\n\r\n                            var v0 = t.vertices[j];\r\n                            var v1 = t.vertices[(j + 1) % 3];\r\n\r\n                            if (v0.isBorder || v1.isBorder) { continue; }\r\n\r\n                            var p = Vector3.Zero();\r\n                            // var n = Vector3.Zero();\r\n                            // var uv = Vector2.Zero();\r\n                            // var color = new Color4(0, 0, 0, 1);\r\n\r\n                            this.calculateError(v0, v1, p);\r\n\r\n                            var delTr = new Array<DecimationTriangle>();\r\n\r\n                            if (this.isFlipped(v0, v1, p, deleted0, delTr)) { continue; }\r\n                            if (this.isFlipped(v1, v0, p, deleted1, delTr)) { continue; }\r\n\r\n                            if (deleted0.indexOf(true) < 0 || deleted1.indexOf(true) < 0) {\r\n                                continue;\r\n                            }\r\n\r\n                            var uniqueArray = new Array<DecimationTriangle>();\r\n                            delTr.forEach((deletedT) => {\r\n                                if (uniqueArray.indexOf(deletedT) === -1) {\r\n                                    deletedT.deletePending = true;\r\n                                    uniqueArray.push(deletedT);\r\n                                }\r\n                            });\r\n\r\n                            if (uniqueArray.length % 2 !== 0) {\r\n                                continue;\r\n                            }\r\n\r\n                            v0.q = v1.q.add(v0.q);\r\n\r\n                            v0.updatePosition(p);\r\n\r\n                            var tStart = this.references.length;\r\n\r\n                            deletedTriangles = this.updateTriangles(v0, v0, deleted0, deletedTriangles);\r\n                            deletedTriangles = this.updateTriangles(v0, v1, deleted1, deletedTriangles);\r\n\r\n                            var tCount = this.references.length - tStart;\r\n\r\n                            if (tCount <= v0.triangleCount) {\r\n                                if (tCount) {\r\n                                    for (var c = 0; c < tCount; c++) {\r\n                                        this.references[v0.triangleStart + c] = this.references[tStart + c];\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                v0.triangleStart = tStart;\r\n                            }\r\n\r\n                            v0.triangleCount = tCount;\r\n                            break;\r\n                        }\r\n                    }\r\n                };\r\n                AsyncLoop.SyncAsyncForLoop(this.triangles.length, this.syncIterations, trianglesIterator, callback, () => { return (triangleCount - deletedTriangles <= targetCount); });\r\n            }, 0);\r\n        };\r\n\r\n        AsyncLoop.Run(this.decimationIterations, (loop: AsyncLoop) => {\r\n            if (triangleCount - deletedTriangles <= targetCount) { loop.breakLoop(); }\r\n            else {\r\n                iterationFunction(loop.index, () => {\r\n                    loop.executeNext();\r\n                });\r\n            }\r\n        }, () => {\r\n            setTimeout(() => {\r\n                //reconstruct this part of the mesh\r\n                this.reconstructMesh(submeshIndex);\r\n                successCallback();\r\n            }, 0);\r\n        });\r\n    }\r\n\r\n    private initWithMesh(submeshIndex: number, callback: Function, optimizeMesh?: boolean) {\r\n\r\n        this.vertices = [];\r\n        this.triangles = [];\r\n\r\n        var positionData = this._mesh.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        var indices = this._mesh.getIndices();\r\n        var submesh = this._mesh.subMeshes[submeshIndex];\r\n\r\n        var findInVertices = (positionToSearch: Vector3) => {\r\n            if (optimizeMesh) {\r\n                for (var ii = 0; ii < this.vertices.length; ++ii) {\r\n                    if (this.vertices[ii].position.equalsWithEpsilon(positionToSearch, 0.0001)) {\r\n                        return this.vertices[ii];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        var vertexReferences: Array<number> = [];\r\n\r\n        var vertexInit = (i: number) => {\r\n            if (!positionData) {\r\n                return;\r\n            }\r\n\r\n            var offset = i + submesh.verticesStart;\r\n            var position = Vector3.FromArray(positionData, offset * 3);\r\n\r\n            var vertex = findInVertices(position) || new DecimationVertex(position, this.vertices.length);\r\n            vertex.originalOffsets.push(offset);\r\n            if (vertex.id === this.vertices.length) {\r\n                this.vertices.push(vertex);\r\n            }\r\n            vertexReferences.push(vertex.id);\r\n        };\r\n        //var totalVertices = mesh.getTotalVertices();\r\n        var totalVertices = submesh.verticesCount;\r\n        AsyncLoop.SyncAsyncForLoop(totalVertices, (this.syncIterations / 4) >> 0, vertexInit, () => {\r\n\r\n            var indicesInit = (i: number) => {\r\n                if (!indices) {\r\n                    return;\r\n                }\r\n\r\n                var offset = (submesh.indexStart / 3) + i;\r\n                var pos = (offset * 3);\r\n                var i0 = indices[pos + 0];\r\n                var i1 = indices[pos + 1];\r\n                var i2 = indices[pos + 2];\r\n                var v0: DecimationVertex = this.vertices[vertexReferences[i0 - submesh.verticesStart]];\r\n                var v1: DecimationVertex = this.vertices[vertexReferences[i1 - submesh.verticesStart]];\r\n                var v2: DecimationVertex = this.vertices[vertexReferences[i2 - submesh.verticesStart]];\r\n                var triangle = new DecimationTriangle([v0, v1, v2]);\r\n                triangle.originalOffset = pos;\r\n                this.triangles.push(triangle);\r\n            };\r\n            AsyncLoop.SyncAsyncForLoop(submesh.indexCount / 3, this.syncIterations, indicesInit, () => {\r\n                this.init(callback);\r\n            });\r\n        });\r\n    }\r\n\r\n    private init(callback: Function) {\r\n        var triangleInit1 = (i: number) => {\r\n            var t = this.triangles[i];\r\n            t.normal = Vector3.Cross(t.vertices[1].position.subtract(t.vertices[0].position), t.vertices[2].position.subtract(t.vertices[0].position)).normalize();\r\n            for (var j = 0; j < 3; j++) {\r\n                t.vertices[j].q.addArrayInPlace(QuadraticMatrix.DataFromNumbers(t.normal.x, t.normal.y, t.normal.z, -(Vector3.Dot(t.normal, t.vertices[0].position))));\r\n            }\r\n        };\r\n        AsyncLoop.SyncAsyncForLoop(this.triangles.length, this.syncIterations, triangleInit1, () => {\r\n\r\n            var triangleInit2 = (i: number) => {\r\n                var t = this.triangles[i];\r\n                for (var j = 0; j < 3; ++j) {\r\n                    t.error[j] = this.calculateError(t.vertices[j], t.vertices[(j + 1) % 3]);\r\n                }\r\n                t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\r\n            };\r\n            AsyncLoop.SyncAsyncForLoop(this.triangles.length, this.syncIterations, triangleInit2, () => {\r\n                callback();\r\n            });\r\n        });\r\n    }\r\n\r\n    private reconstructMesh(submeshIndex: number) {\r\n\r\n        var newTriangles: Array<DecimationTriangle> = [];\r\n        var i: number;\r\n        for (i = 0; i < this.vertices.length; ++i) {\r\n            this.vertices[i].triangleCount = 0;\r\n        }\r\n        var t: DecimationTriangle;\r\n        var j: number;\r\n        for (i = 0; i < this.triangles.length; ++i) {\r\n            if (!this.triangles[i].deleted) {\r\n                t = this.triangles[i];\r\n                for (j = 0; j < 3; ++j) {\r\n                    t.vertices[j].triangleCount = 1;\r\n                }\r\n                newTriangles.push(t);\r\n            }\r\n        }\r\n\r\n        var newPositionData = <number[]>(this._reconstructedMesh.getVerticesData(VertexBuffer.PositionKind) || []);\r\n        var newNormalData = <number[]>(this._reconstructedMesh.getVerticesData(VertexBuffer.NormalKind) || []);\r\n        var newUVsData = <number[]>(this._reconstructedMesh.getVerticesData(VertexBuffer.UVKind) || []);\r\n        var newColorsData = <number[]>(this._reconstructedMesh.getVerticesData(VertexBuffer.ColorKind) || []);\r\n\r\n        var normalData = this._mesh.getVerticesData(VertexBuffer.NormalKind);\r\n        var uvs = this._mesh.getVerticesData(VertexBuffer.UVKind);\r\n        var colorsData = this._mesh.getVerticesData(VertexBuffer.ColorKind);\r\n\r\n        var vertexCount = 0;\r\n        for (i = 0; i < this.vertices.length; ++i) {\r\n            var vertex = this.vertices[i];\r\n            vertex.id = vertexCount;\r\n            if (vertex.triangleCount) {\r\n                vertex.originalOffsets.forEach((originalOffset) => {\r\n\r\n                    newPositionData.push(vertex.position.x);\r\n                    newPositionData.push(vertex.position.y);\r\n                    newPositionData.push(vertex.position.z);\r\n\r\n                    if (normalData && normalData.length) {\r\n                        newNormalData.push(normalData[originalOffset * 3]);\r\n                        newNormalData.push(normalData[(originalOffset * 3) + 1]);\r\n                        newNormalData.push(normalData[(originalOffset * 3) + 2]);\r\n                    }\r\n                    if (uvs && uvs.length) {\r\n                        newUVsData.push(uvs[(originalOffset * 2)]);\r\n                        newUVsData.push(uvs[(originalOffset * 2) + 1]);\r\n                    }\r\n                    if (colorsData && colorsData.length) {\r\n                        newColorsData.push(colorsData[(originalOffset * 4)]);\r\n                        newColorsData.push(colorsData[(originalOffset * 4) + 1]);\r\n                        newColorsData.push(colorsData[(originalOffset * 4) + 2]);\r\n                        newColorsData.push(colorsData[(originalOffset * 4) + 3]);\r\n                    }\r\n                    ++vertexCount;\r\n                });\r\n            }\r\n        }\r\n\r\n        var startingIndex = this._reconstructedMesh.getTotalIndices();\r\n        var startingVertex = this._reconstructedMesh.getTotalVertices();\r\n\r\n        var submeshesArray = this._reconstructedMesh.subMeshes;\r\n        this._reconstructedMesh.subMeshes = [];\r\n\r\n        var newIndicesArray: number[] = <number[]>this._reconstructedMesh.getIndices(); //[];\r\n        var originalIndices = <IndicesArray>this._mesh.getIndices();\r\n        for (i = 0; i < newTriangles.length; ++i) {\r\n            t = newTriangles[i]; //now get the new referencing point for each vertex\r\n            [0, 1, 2].forEach((idx) => {\r\n                var id = originalIndices[t.originalOffset + idx];\r\n                var offset = t.vertices[idx].originalOffsets.indexOf(id);\r\n                if (offset < 0) { offset = 0; }\r\n                newIndicesArray.push(t.vertices[idx].id + offset + startingVertex);\r\n            });\r\n        }\r\n\r\n        //overwriting the old vertex buffers and indices.\r\n\r\n        this._reconstructedMesh.setIndices(newIndicesArray);\r\n        this._reconstructedMesh.setVerticesData(VertexBuffer.PositionKind, newPositionData);\r\n        if (newNormalData.length > 0) {\r\n            this._reconstructedMesh.setVerticesData(VertexBuffer.NormalKind, newNormalData);\r\n        }\r\n        if (newUVsData.length > 0) {\r\n            this._reconstructedMesh.setVerticesData(VertexBuffer.UVKind, newUVsData);\r\n        }\r\n        if (newColorsData.length > 0) {\r\n            this._reconstructedMesh.setVerticesData(VertexBuffer.ColorKind, newColorsData);\r\n        }\r\n\r\n        //create submesh\r\n        var originalSubmesh = this._mesh.subMeshes[submeshIndex];\r\n        if (submeshIndex > 0) {\r\n            this._reconstructedMesh.subMeshes = [];\r\n            submeshesArray.forEach((submesh) => {\r\n                SubMesh.AddToMesh(submesh.materialIndex, submesh.verticesStart, submesh.verticesCount, /* 0, newPositionData.length/3, */submesh.indexStart, submesh.indexCount, submesh.getMesh());\r\n            });\r\n            SubMesh.AddToMesh(originalSubmesh.materialIndex, startingVertex, vertexCount, /* 0, newPositionData.length / 3, */startingIndex, newTriangles.length * 3, this._reconstructedMesh);\r\n        }\r\n    }\r\n\r\n    private initDecimatedMesh() {\r\n        this._reconstructedMesh = new Mesh(this._mesh.name + \"Decimated\", this._mesh.getScene());\r\n        this._reconstructedMesh.material = this._mesh.material;\r\n        this._reconstructedMesh.parent = this._mesh.parent;\r\n        this._reconstructedMesh.isVisible = false;\r\n        this._reconstructedMesh.renderingGroupId = this._mesh.renderingGroupId;\r\n    }\r\n\r\n    private isFlipped(vertex1: DecimationVertex, vertex2: DecimationVertex, point: Vector3, deletedArray: Array<boolean>, delTr: Array<DecimationTriangle>): boolean {\r\n\r\n        for (var i = 0; i < vertex1.triangleCount; ++i) {\r\n            var t = this.triangles[this.references[vertex1.triangleStart + i].triangleId];\r\n            if (t.deleted) { continue; }\r\n\r\n            var s = this.references[vertex1.triangleStart + i].vertexId;\r\n\r\n            var v1 = t.vertices[(s + 1) % 3];\r\n            var v2 = t.vertices[(s + 2) % 3];\r\n\r\n            if ((v1 === vertex2 || v2 === vertex2)) {\r\n                deletedArray[i] = true;\r\n                delTr.push(t);\r\n                continue;\r\n            }\r\n\r\n            var d1 = v1.position.subtract(point);\r\n            d1 = d1.normalize();\r\n            var d2 = v2.position.subtract(point);\r\n            d2 = d2.normalize();\r\n            if (Math.abs(Vector3.Dot(d1, d2)) > 0.999) { return true; }\r\n            var normal = Vector3.Cross(d1, d2).normalize();\r\n            deletedArray[i] = false;\r\n            if (Vector3.Dot(normal, t.normal) < 0.2) { return true; }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private updateTriangles(origVertex: DecimationVertex, vertex: DecimationVertex, deletedArray: Array<boolean>, deletedTriangles: number): number {\r\n        var newDeleted = deletedTriangles;\r\n        for (var i = 0; i < vertex.triangleCount; ++i) {\r\n            var ref = this.references[vertex.triangleStart + i];\r\n            var t = this.triangles[ref.triangleId];\r\n            if (t.deleted) { continue; }\r\n            if (deletedArray[i] && t.deletePending) {\r\n                t.deleted = true;\r\n                newDeleted++;\r\n                continue;\r\n            }\r\n            t.vertices[ref.vertexId] = origVertex;\r\n            t.isDirty = true;\r\n            t.error[0] = this.calculateError(t.vertices[0], t.vertices[1]) + (t.borderFactor / 2);\r\n            t.error[1] = this.calculateError(t.vertices[1], t.vertices[2]) + (t.borderFactor / 2);\r\n            t.error[2] = this.calculateError(t.vertices[2], t.vertices[0]) + (t.borderFactor / 2);\r\n            t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\r\n            this.references.push(ref);\r\n        }\r\n        return newDeleted;\r\n    }\r\n\r\n    private identifyBorder() {\r\n\r\n        for (var i = 0; i < this.vertices.length; ++i) {\r\n            var vCount: Array<number> = [];\r\n            var vId: Array<number> = [];\r\n            var v = this.vertices[i];\r\n            var j: number;\r\n            for (j = 0; j < v.triangleCount; ++j) {\r\n                var triangle = this.triangles[this.references[v.triangleStart + j].triangleId];\r\n                for (var ii = 0; ii < 3; ii++) {\r\n                    var ofs = 0;\r\n                    var vv = triangle.vertices[ii];\r\n                    while (ofs < vCount.length) {\r\n                        if (vId[ofs] === vv.id) { break; }\r\n                        ++ofs;\r\n                    }\r\n                    if (ofs === vCount.length) {\r\n                        vCount.push(1);\r\n                        vId.push(vv.id);\r\n                    } else {\r\n                        vCount[ofs]++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (j = 0; j < vCount.length; ++j) {\r\n                if (vCount[j] === 1) {\r\n                    this.vertices[vId[j]].isBorder = true;\r\n                } else {\r\n                    this.vertices[vId[j]].isBorder = false;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private updateMesh(identifyBorders: boolean = false) {\r\n        var i: number;\r\n        if (!identifyBorders) {\r\n            var newTrianglesVector: Array<DecimationTriangle> = [];\r\n            for (i = 0; i < this.triangles.length; ++i) {\r\n                if (!this.triangles[i].deleted) {\r\n                    newTrianglesVector.push(this.triangles[i]);\r\n                }\r\n            }\r\n            this.triangles = newTrianglesVector;\r\n        }\r\n\r\n        for (i = 0; i < this.vertices.length; ++i) {\r\n            this.vertices[i].triangleCount = 0;\r\n            this.vertices[i].triangleStart = 0;\r\n        }\r\n        var t: DecimationTriangle;\r\n        var j: number;\r\n        var v: DecimationVertex;\r\n        for (i = 0; i < this.triangles.length; ++i) {\r\n            t = this.triangles[i];\r\n            for (j = 0; j < 3; ++j) {\r\n                v = t.vertices[j];\r\n                v.triangleCount++;\r\n            }\r\n        }\r\n\r\n        var tStart = 0;\r\n\r\n        for (i = 0; i < this.vertices.length; ++i) {\r\n            this.vertices[i].triangleStart = tStart;\r\n            tStart += this.vertices[i].triangleCount;\r\n            this.vertices[i].triangleCount = 0;\r\n        }\r\n\r\n        var newReferences: Array<Reference> = new Array(this.triangles.length * 3);\r\n        for (i = 0; i < this.triangles.length; ++i) {\r\n            t = this.triangles[i];\r\n            for (j = 0; j < 3; ++j) {\r\n                v = t.vertices[j];\r\n                newReferences[v.triangleStart + v.triangleCount] = new Reference(j, i);\r\n                v.triangleCount++;\r\n            }\r\n        }\r\n        this.references = newReferences;\r\n\r\n        if (identifyBorders) {\r\n            this.identifyBorder();\r\n        }\r\n    }\r\n\r\n    private vertexError(q: QuadraticMatrix, point: Vector3): number {\r\n        var x = point.x;\r\n        var y = point.y;\r\n        var z = point.z;\r\n        return q.data[0] * x * x + 2 * q.data[1] * x * y + 2 * q.data[2] * x * z + 2 * q.data[3] * x + q.data[4] * y * y\r\n            + 2 * q.data[5] * y * z + 2 * q.data[6] * y + q.data[7] * z * z + 2 * q.data[8] * z + q.data[9];\r\n    }\r\n\r\n    private calculateError(vertex1: DecimationVertex, vertex2: DecimationVertex, pointResult?: Vector3): number {\r\n        var q = vertex1.q.add(vertex2.q);\r\n        var border = vertex1.isBorder && vertex2.isBorder;\r\n        var error: number = 0;\r\n        var qDet = q.det(0, 1, 2, 1, 4, 5, 2, 5, 7);\r\n\r\n        if (qDet !== 0 && !border) {\r\n            if (!pointResult) {\r\n                pointResult = Vector3.Zero();\r\n            }\r\n            pointResult.x = -1 / qDet * (q.det(1, 2, 3, 4, 5, 6, 5, 7, 8));\r\n            pointResult.y = 1 / qDet * (q.det(0, 2, 3, 1, 5, 6, 2, 7, 8));\r\n            pointResult.z = -1 / qDet * (q.det(0, 1, 3, 1, 4, 6, 2, 5, 8));\r\n            error = this.vertexError(q, pointResult);\r\n        } else {\r\n            var p3 = (vertex1.position.add(vertex2.position)).divide(new Vector3(2, 2, 2));\r\n            //var norm3 = (vertex1.normal.add(vertex2.normal)).divide(new Vector3(2, 2, 2)).normalize();\r\n            var error1 = this.vertexError(q, vertex1.position);\r\n            var error2 = this.vertexError(q, vertex2.position);\r\n            var error3 = this.vertexError(q, p3);\r\n            error = Math.min(error1, error2, error3);\r\n            if (error === error1) {\r\n                if (pointResult) {\r\n                    pointResult.copyFrom(vertex1.position);\r\n                }\r\n            } else if (error === error2) {\r\n                if (pointResult) {\r\n                    pointResult.copyFrom(vertex2.position);\r\n                }\r\n            } else {\r\n                if (pointResult) {\r\n                    pointResult.copyFrom(p3);\r\n                }\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}