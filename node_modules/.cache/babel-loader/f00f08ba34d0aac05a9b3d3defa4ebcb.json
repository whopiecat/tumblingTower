{"ast":null,"code":"import { Color3 } from \"../Maths/math.color\";\nimport { Texture } from \"../Materials/Textures/texture\";\n/**\r\n * This represents one of the lens effect in a `lensFlareSystem`.\r\n * It controls one of the indiviual texture used in the effect.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n */\n\nvar LensFlare =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new Lens Flare.\r\n   * This represents one of the lens effect in a `lensFlareSystem`.\r\n   * It controls one of the indiviual texture used in the effect.\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n   * @param size Define the size of the lens flare in the system (a floating value between 0 and 1)\r\n   * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n   * @param color Define the lens color\r\n   * @param imgUrl Define the lens texture url\r\n   * @param system Define the `lensFlareSystem` this flare is part of\r\n   */\n  function LensFlare(\n  /**\r\n   * Define the size of the lens flare in the system (a floating value between 0 and 1)\r\n   */\n  size,\n  /**\r\n   * Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n   */\n  position, color, imgUrl, system) {\n    this.size = size;\n    this.position = position;\n    /**\r\n     * Define the alpha mode to render this particular lens.\r\n     */\n\n    this.alphaMode = 6;\n    this.color = color || new Color3(1, 1, 1);\n    this.texture = imgUrl ? new Texture(imgUrl, system.getScene(), true) : null;\n    this._system = system;\n    system.lensFlares.push(this);\n  }\n  /**\r\n   * Creates a new Lens Flare.\r\n   * This represents one of the lens effect in a `lensFlareSystem`.\r\n   * It controls one of the indiviual texture used in the effect.\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n   * @param size Define the size of the lens flare (a floating value between 0 and 1)\r\n   * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n   * @param color Define the lens color\r\n   * @param imgUrl Define the lens texture url\r\n   * @param system Define the `lensFlareSystem` this flare is part of\r\n   * @returns The newly created Lens Flare\r\n   */\n\n\n  LensFlare.AddFlare = function (size, position, color, imgUrl, system) {\n    return new LensFlare(size, position, color, imgUrl, system);\n  };\n  /**\r\n   * Dispose and release the lens flare with its associated resources.\r\n   */\n\n\n  LensFlare.prototype.dispose = function () {\n    if (this.texture) {\n      this.texture.dispose();\n    } // Remove from scene\n\n\n    var index = this._system.lensFlares.indexOf(this);\n\n    this._system.lensFlares.splice(index, 1);\n  };\n\n  return LensFlare;\n}();\n\nexport { LensFlare };","map":{"version":3,"sources":["../../../sourceES6/core/LensFlares/lensFlare.ts"],"names":[],"mappings":"AACA,SAAS,MAAT,QAAuB,qBAAvB;AACA,SAAS,OAAT,QAAwB,+BAAxB;AAGA;;;;;;AAKA,IAAA,SAAA;AAAA;AAAA,YAAA;AAkCI;;;;;;;;;;;AAWA,WAAA,SAAA;AACI;;;AAGO,EAAA,IAJX;AAKI;;;AAGO,EAAA,QARX,EASI,KATJ,EAUI,MAVJ,EAWI,MAXJ,EAW2B;AAPhB,SAAA,IAAA,GAAA,IAAA;AAIA,SAAA,QAAA,GAAA,QAAA;AA1CX;;;;AAGO,SAAA,SAAA,GAAoB,CAApB;AA4CH,SAAK,KAAL,GAAa,KAAK,IAAI,IAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAAtB;AACA,SAAK,OAAL,GAAe,MAAM,GAAG,IAAI,OAAJ,CAAY,MAAZ,EAAoB,MAAM,CAAC,QAAP,EAApB,EAAuC,IAAvC,CAAH,GAAkD,IAAvE;AACA,SAAK,OAAL,GAAe,MAAf;AAEA,IAAA,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAuB,IAAvB;AACH;AA7CD;;;;;;;;;;;;;;AAYc,EAAA,SAAA,CAAA,QAAA,GAAd,UAAuB,IAAvB,EAAqC,QAArC,EAAuD,KAAvD,EAAsE,MAAtE,EAAsF,MAAtF,EAA6G;AACzG,WAAO,IAAI,SAAJ,CAAc,IAAd,EAAoB,QAApB,EAA8B,KAA9B,EAAqC,MAArC,EAA6C,MAA7C,CAAP;AACH,GAFa;AAmCd;;;;;AAGO,EAAA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,QAAI,KAAK,OAAT,EAAkB;AACd,WAAK,OAAL,CAAa,OAAb;AACH,KAHL,CAKI;;;AACA,QAAI,KAAK,GAAG,KAAK,OAAL,CAAa,UAAb,CAAwB,OAAxB,CAAgC,IAAhC,CAAZ;;AACA,SAAK,OAAL,CAAa,UAAb,CAAwB,MAAxB,CAA+B,KAA/B,EAAsC,CAAtC;AACH,GARM;;AASX,SAAA,SAAA;AAAC,CA7ED,EAAA","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { LensFlareSystem } from \"./lensFlareSystem\";\r\n\r\n/**\r\n * This represents one of the lens effect in a `lensFlareSystem`.\r\n * It controls one of the indiviual texture used in the effect.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n */\r\nexport class LensFlare {\r\n    /**\r\n     * Define the lens color.\r\n     */\r\n    public color: Color3;\r\n\r\n    /**\r\n     * Define the lens texture.\r\n     */\r\n    public texture: Nullable<Texture>;\r\n\r\n    /**\r\n     * Define the alpha mode to render this particular lens.\r\n     */\r\n    public alphaMode: number = 6;\r\n\r\n    private _system: LensFlareSystem;\r\n\r\n    /**\r\n     * Creates a new Lens Flare.\r\n     * This represents one of the lens effect in a `lensFlareSystem`.\r\n     * It controls one of the indiviual texture used in the effect.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n     * @param size Define the size of the lens flare (a floating value between 0 and 1)\r\n     * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n     * @param color Define the lens color\r\n     * @param imgUrl Define the lens texture url\r\n     * @param system Define the `lensFlareSystem` this flare is part of\r\n     * @returns The newly created Lens Flare\r\n     */\r\n    public static AddFlare(size: number, position: number, color: Color3, imgUrl: string, system: LensFlareSystem): LensFlare {\r\n        return new LensFlare(size, position, color, imgUrl, system);\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new Lens Flare.\r\n     * This represents one of the lens effect in a `lensFlareSystem`.\r\n     * It controls one of the indiviual texture used in the effect.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n     * @param size Define the size of the lens flare in the system (a floating value between 0 and 1)\r\n     * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n     * @param color Define the lens color\r\n     * @param imgUrl Define the lens texture url\r\n     * @param system Define the `lensFlareSystem` this flare is part of\r\n     */\r\n    constructor(\r\n        /**\r\n         * Define the size of the lens flare in the system (a floating value between 0 and 1)\r\n         */\r\n        public size: number,\r\n        /**\r\n         * Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n         */\r\n        public position: number,\r\n        color: Color3,\r\n        imgUrl: string,\r\n        system: LensFlareSystem) {\r\n\r\n        this.color = color || new Color3(1, 1, 1);\r\n        this.texture = imgUrl ? new Texture(imgUrl, system.getScene(), true) : null;\r\n        this._system = system;\r\n\r\n        system.lensFlares.push(this);\r\n    }\r\n\r\n    /**\r\n     * Dispose and release the lens flare with its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        if (this.texture) {\r\n            this.texture.dispose();\r\n        }\r\n\r\n        // Remove from scene\r\n        var index = this._system.lensFlares.indexOf(this);\r\n        this._system.lensFlares.splice(index, 1);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}