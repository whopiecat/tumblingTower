{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\nimport { Logger } from '../../Misc/logger';\nimport { RenderTargetCreationOptions } from '../../Materials/Textures/renderTargetCreationOptions';\nimport { ThinEngine } from '../thinEngine';\n\nThinEngine.prototype.createRenderTargetTexture = function (size, options) {\n  var fullOptions = new RenderTargetCreationOptions();\n\n  if (options !== undefined && typeof options === \"object\") {\n    fullOptions.generateMipMaps = options.generateMipMaps;\n    fullOptions.generateDepthBuffer = !!options.generateDepthBuffer;\n    fullOptions.generateStencilBuffer = !!options.generateStencilBuffer;\n    fullOptions.type = options.type === undefined ? 0 : options.type;\n    fullOptions.samplingMode = options.samplingMode === undefined ? 3 : options.samplingMode;\n    fullOptions.format = options.format === undefined ? 5 : options.format;\n  } else {\n    fullOptions.generateMipMaps = options;\n    fullOptions.generateDepthBuffer = true;\n    fullOptions.generateStencilBuffer = false;\n    fullOptions.type = 0;\n    fullOptions.samplingMode = 3;\n    fullOptions.format = 5;\n  }\n\n  if (fullOptions.type === 1 && !this._caps.textureFloatLinearFiltering) {\n    // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n    fullOptions.samplingMode = 1;\n  } else if (fullOptions.type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n    // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n    fullOptions.samplingMode = 1;\n  }\n\n  if (fullOptions.type === 1 && !this._caps.textureFloat) {\n    fullOptions.type = 0;\n    Logger.Warn(\"Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type\");\n  }\n\n  var gl = this._gl;\n  var texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\n  var width = size.width || size;\n  var height = size.height || size;\n  var layers = size.layers || 0;\n\n  var filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps ? true : false);\n\n  var target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\n\n  var sizedFormat = this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format);\n\n  var internalFormat = this._getInternalFormat(fullOptions.format);\n\n  var type = this._getWebGLTextureType(fullOptions.type); // Bind\n\n\n  this._bindTextureDirectly(target, texture);\n\n  if (layers !== 0) {\n    texture.is2DArray = true;\n    gl.texImage3D(target, 0, sizedFormat, width, height, layers, 0, internalFormat, type, null);\n  } else {\n    gl.texImage2D(target, 0, sizedFormat, width, height, 0, internalFormat, type, null);\n  }\n\n  gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, filters.mag);\n  gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, filters.min);\n  gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); // MipMaps\n\n  if (fullOptions.generateMipMaps) {\n    this._gl.generateMipmap(target);\n  }\n\n  this._bindTextureDirectly(target, null);\n\n  var currentFrameBuffer = this._currentFramebuffer; // Create the framebuffer\n\n  var framebuffer = gl.createFramebuffer();\n\n  this._bindUnboundFramebuffer(framebuffer);\n\n  texture._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer ? true : false, fullOptions.generateDepthBuffer, width, height); // No need to rebind on every frame\n\n  if (!texture.is2DArray) {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._webGLTexture, 0);\n  }\n\n  this._bindUnboundFramebuffer(currentFrameBuffer);\n\n  texture._framebuffer = framebuffer;\n  texture.baseWidth = width;\n  texture.baseHeight = height;\n  texture.width = width;\n  texture.height = height;\n  texture.depth = layers;\n  texture.isReady = true;\n  texture.samples = 1;\n  texture.generateMipMaps = fullOptions.generateMipMaps ? true : false;\n  texture.samplingMode = fullOptions.samplingMode;\n  texture.type = fullOptions.type;\n  texture.format = fullOptions.format;\n  texture._generateDepthBuffer = fullOptions.generateDepthBuffer;\n  texture._generateStencilBuffer = fullOptions.generateStencilBuffer ? true : false;\n\n  this._internalTexturesCache.push(texture);\n\n  return texture;\n};\n\nThinEngine.prototype.createDepthStencilTexture = function (size, options) {\n  if (options.isCube) {\n    var width = size.width || size;\n    return this._createDepthStencilCubeTexture(width, options);\n  } else {\n    return this._createDepthStencilTexture(size, options);\n  }\n};\n\nThinEngine.prototype._createDepthStencilTexture = function (size, options) {\n  var gl = this._gl;\n  var layers = size.layers || 0;\n  var target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\n  var internalTexture = new InternalTexture(this, InternalTextureSource.Depth);\n\n  if (!this._caps.depthTextureExtension) {\n    Logger.Error(\"Depth texture is not supported by your browser or hardware.\");\n    return internalTexture;\n  }\n\n  var internalOptions = __assign({\n    bilinearFiltering: false,\n    comparisonFunction: 0,\n    generateStencil: false\n  }, options);\n\n  this._bindTextureDirectly(target, internalTexture, true);\n\n  this._setupDepthStencilTexture(internalTexture, size, internalOptions.generateStencil, internalOptions.bilinearFiltering, internalOptions.comparisonFunction);\n\n  var type = internalOptions.generateStencil ? gl.UNSIGNED_INT_24_8 : gl.UNSIGNED_INT;\n  var internalFormat = internalOptions.generateStencil ? gl.DEPTH_STENCIL : gl.DEPTH_COMPONENT;\n  var sizedFormat = internalFormat;\n\n  if (this.webGLVersion > 1) {\n    sizedFormat = internalOptions.generateStencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n  }\n\n  if (internalTexture.is2DArray) {\n    gl.texImage3D(target, 0, sizedFormat, internalTexture.width, internalTexture.height, layers, 0, internalFormat, type, null);\n  } else {\n    gl.texImage2D(target, 0, sizedFormat, internalTexture.width, internalTexture.height, 0, internalFormat, type, null);\n  }\n\n  this._bindTextureDirectly(target, null);\n\n  return internalTexture;\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/Extensions/engine.renderTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\r\nimport { Logger } from '../../Misc/logger';\r\nimport { RenderTargetCreationOptions } from '../../Materials/Textures/renderTargetCreationOptions';\r\n\r\nimport { ThinEngine } from '../thinEngine';\r\nimport { DepthTextureCreationOptions } from '../depthTextureCreationOptions';\r\n\r\n/**\r\n * Type used to define a render target texture size (either with a number or with a rect width and height)\r\n */\r\nexport type RenderTargetTextureSize = number | { width: number, height: number, layers?: number };\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a new render target texture\r\n         * @param size defines the size of the texture\r\n         * @param options defines the options used to create the texture\r\n         * @returns a new render target texture stored in an InternalTexture\r\n         */\r\n        createRenderTargetTexture(size: RenderTargetTextureSize, options: boolean | RenderTargetCreationOptions): InternalTexture;\r\n\r\n        /**\r\n         * Creates a depth stencil texture.\r\n         * This is only available in WebGL 2 or with the depth texture extension available.\r\n         * @param size The size of face edge in the texture.\r\n         * @param options The options defining the texture.\r\n         * @returns The texture\r\n         */\r\n        createDepthStencilTexture(size: RenderTargetTextureSize, options: DepthTextureCreationOptions): InternalTexture;\r\n\r\n        /** @hidden */\r\n        _createDepthStencilTexture(size: RenderTargetTextureSize, options: DepthTextureCreationOptions): InternalTexture;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createRenderTargetTexture = function(this: ThinEngine, size: RenderTargetTextureSize, options: boolean | RenderTargetCreationOptions): InternalTexture {\r\n    const fullOptions = new RenderTargetCreationOptions();\r\n    if (options !== undefined && typeof options === \"object\") {\r\n        fullOptions.generateMipMaps = options.generateMipMaps;\r\n        fullOptions.generateDepthBuffer = !!options.generateDepthBuffer;\r\n        fullOptions.generateStencilBuffer = !!options.generateStencilBuffer;\r\n        fullOptions.type = options.type === undefined ? 0 : options.type;\r\n        fullOptions.samplingMode = options.samplingMode === undefined ? 3 : options.samplingMode;\r\n        fullOptions.format = options.format === undefined ? 5 : options.format;\r\n    } else {\r\n        fullOptions.generateMipMaps = <boolean>options;\r\n        fullOptions.generateDepthBuffer = true;\r\n        fullOptions.generateStencilBuffer = false;\r\n        fullOptions.type = 0;\r\n        fullOptions.samplingMode = 3;\r\n        fullOptions.format = 5;\r\n    }\r\n\r\n    if (fullOptions.type === 1 && !this._caps.textureFloatLinearFiltering) {\r\n        // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\r\n        fullOptions.samplingMode = 1;\r\n    }\r\n    else if (fullOptions.type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\r\n        // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\r\n        fullOptions.samplingMode = 1;\r\n    }\r\n    if (fullOptions.type === 1 && !this._caps.textureFloat) {\r\n        fullOptions.type = 0;\r\n        Logger.Warn(\"Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type\");\r\n    }\r\n\r\n    const gl = this._gl;\r\n    const texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\r\n    const width = (<{ width: number, height: number, layers?: number }>size).width || <number>size;\r\n    const height = (<{ width: number, height: number, layers?: number }>size).height || <number>size;\r\n    const layers = (<{ width: number, height: number, layers?: number }>size).layers || 0;\r\n    const filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps ? true : false);\r\n    const target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\r\n    const sizedFormat = this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format);\r\n    const internalFormat = this._getInternalFormat(fullOptions.format);\r\n    const type = this._getWebGLTextureType(fullOptions.type);\r\n\r\n    // Bind\r\n    this._bindTextureDirectly(target, texture);\r\n\r\n    if (layers !== 0) {\r\n        texture.is2DArray = true;\r\n        gl.texImage3D(target, 0, sizedFormat, width, height, layers, 0, internalFormat, type, null);\r\n    }\r\n    else {\r\n        gl.texImage2D(target, 0, sizedFormat, width, height, 0, internalFormat, type, null);\r\n    }\r\n\r\n    gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, filters.mag);\r\n    gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, filters.min);\r\n    gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n    // MipMaps\r\n    if (fullOptions.generateMipMaps) {\r\n        this._gl.generateMipmap(target);\r\n    }\r\n\r\n    this._bindTextureDirectly(target, null);\r\n\r\n    const currentFrameBuffer = this._currentFramebuffer;\r\n\r\n    // Create the framebuffer\r\n    const framebuffer = gl.createFramebuffer();\r\n    this._bindUnboundFramebuffer(framebuffer);\r\n    texture._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer ? true : false, fullOptions.generateDepthBuffer, width, height);\r\n\r\n    // No need to rebind on every frame\r\n    if (!texture.is2DArray) {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._webGLTexture, 0);\r\n    }\r\n\r\n    this._bindUnboundFramebuffer(currentFrameBuffer);\r\n\r\n    texture._framebuffer = framebuffer;\r\n    texture.baseWidth = width;\r\n    texture.baseHeight = height;\r\n    texture.width = width;\r\n    texture.height = height;\r\n    texture.depth = layers;\r\n    texture.isReady = true;\r\n    texture.samples = 1;\r\n    texture.generateMipMaps = fullOptions.generateMipMaps ? true : false;\r\n    texture.samplingMode = fullOptions.samplingMode;\r\n    texture.type = fullOptions.type;\r\n    texture.format = fullOptions.format;\r\n    texture._generateDepthBuffer = fullOptions.generateDepthBuffer;\r\n    texture._generateStencilBuffer = fullOptions.generateStencilBuffer ? true : false;\r\n\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    return texture;\r\n};\r\n\r\nThinEngine.prototype.createDepthStencilTexture = function(size: RenderTargetTextureSize, options: DepthTextureCreationOptions): InternalTexture {\r\n    if (options.isCube) {\r\n        let width = (<{ width: number, height: number }>size).width || <number>size;\r\n        return this._createDepthStencilCubeTexture(width, options);\r\n    }\r\n    else {\r\n        return this._createDepthStencilTexture(size, options);\r\n    }\r\n};\r\n\r\nThinEngine.prototype._createDepthStencilTexture = function(size: RenderTargetTextureSize, options: DepthTextureCreationOptions): InternalTexture {\r\n    const gl = this._gl;\r\n    const layers = (<{ width: number, height: number, layers?: number }>size).layers || 0;\r\n    const target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\r\n    const internalTexture = new InternalTexture(this, InternalTextureSource.Depth);\r\n    if (!this._caps.depthTextureExtension) {\r\n        Logger.Error(\"Depth texture is not supported by your browser or hardware.\");\r\n        return internalTexture;\r\n    }\r\n\r\n    const internalOptions = {\r\n        bilinearFiltering: false,\r\n        comparisonFunction: 0,\r\n        generateStencil: false,\r\n        ...options\r\n    };\r\n\r\n    this._bindTextureDirectly(target, internalTexture, true);\r\n\r\n    this._setupDepthStencilTexture(internalTexture, size, internalOptions.generateStencil, internalOptions.bilinearFiltering, internalOptions.comparisonFunction);\r\n\r\n    const type = internalOptions.generateStencil ? gl.UNSIGNED_INT_24_8 : gl.UNSIGNED_INT;\r\n    const internalFormat = internalOptions.generateStencil ? gl.DEPTH_STENCIL : gl.DEPTH_COMPONENT;\r\n    let sizedFormat = internalFormat;\r\n    if (this.webGLVersion > 1) {\r\n        sizedFormat = internalOptions.generateStencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\r\n    }\r\n\r\n    if (internalTexture.is2DArray) {\r\n        gl.texImage3D(target, 0, sizedFormat, internalTexture.width, internalTexture.height, layers, 0, internalFormat, type, null);\r\n    }\r\n    else {\r\n        gl.texImage2D(target, 0, sizedFormat, internalTexture.width, internalTexture.height, 0, internalFormat, type, null);\r\n    }\r\n\r\n    this._bindTextureDirectly(target, null);\r\n\r\n    return internalTexture;\r\n};"],"sourceRoot":""},"metadata":{},"sourceType":"module"}