{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { Mesh } from \"../../Meshes/mesh\";\nimport { Axis, Space } from \"../../Maths/math.axis\";\nimport { Color3 } from \"../../Maths/math.color\";\nimport { WebXRControllerComponent } from \"./webXRControllerComponent\";\nimport { SphereBuilder } from \"../../Meshes/Builders/sphereBuilder\";\nimport { StandardMaterial } from \"../../Materials/standardMaterial\";\nimport { Logger } from \"../../Misc/logger\";\n/**\r\n * A profiled motion controller has its profile loaded from an online repository.\r\n * The class is responsible of loading the model, mapping the keys and enabling model-animations\r\n */\n\nvar WebXRProfiledMotionController =\n/** @class */\nfunction (_super) {\n  __extends(WebXRProfiledMotionController, _super);\n\n  function WebXRProfiledMotionController(scene, xrInput, _profile, _repositoryUrl) {\n    var _this = _super.call(this, scene, _profile.layouts[xrInput.handedness || \"none\"], xrInput.gamepad, xrInput.handedness) || this;\n\n    _this._repositoryUrl = _repositoryUrl;\n    _this._buttonMeshMapping = {};\n    _this._touchDots = {};\n    _this.profileId = _profile.profileId;\n    return _this;\n  }\n\n  WebXRProfiledMotionController.prototype.dispose = function () {\n    var _this = this;\n\n    _super.prototype.dispose.call(this);\n\n    Object.keys(this._touchDots).forEach(function (visResKey) {\n      _this._touchDots[visResKey].dispose();\n    });\n  };\n\n  WebXRProfiledMotionController.prototype._getFilenameAndPath = function () {\n    return {\n      filename: this.layout.assetPath,\n      path: this._repositoryUrl + \"/profiles/\" + this.profileId + \"/\"\n    };\n  };\n\n  WebXRProfiledMotionController.prototype._getModelLoadingConstraints = function () {\n    var glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\n\n    if (!glbLoaded) {\n      Logger.Warn(\"glTF / glb loaded was not registered, using generic controller instead\");\n    }\n\n    return glbLoaded;\n  };\n\n  WebXRProfiledMotionController.prototype._processLoadedModel = function (_meshes) {\n    var _this = this;\n\n    this.getComponentIds().forEach(function (type) {\n      var componentInLayout = _this.layout.components[type];\n      _this._buttonMeshMapping[type] = {\n        mainMesh: _this._getChildByName(_this.rootMesh, componentInLayout.rootNodeName),\n        states: {}\n      };\n      Object.keys(componentInLayout.visualResponses).forEach(function (visualResponseKey) {\n        var visResponse = componentInLayout.visualResponses[visualResponseKey];\n\n        if (visResponse.valueNodeProperty === \"transform\") {\n          _this._buttonMeshMapping[type].states[visualResponseKey] = {\n            valueMesh: _this._getChildByName(_this.rootMesh, visResponse.valueNodeName),\n            minMesh: _this._getChildByName(_this.rootMesh, visResponse.minNodeName),\n            maxMesh: _this._getChildByName(_this.rootMesh, visResponse.maxNodeName)\n          };\n        } else {\n          // visibility, usually for touchpads\n          var nameOfMesh = componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && componentInLayout.touchPointNodeName ? componentInLayout.touchPointNodeName : visResponse.valueNodeName;\n          _this._buttonMeshMapping[type].states[visualResponseKey] = {\n            valueMesh: _this._getChildByName(_this.rootMesh, nameOfMesh)\n          };\n\n          if (componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && !_this._touchDots[visualResponseKey]) {\n            var dot = SphereBuilder.CreateSphere(visualResponseKey + \"dot\", {\n              diameter: 0.0015,\n              segments: 8\n            }, _this.scene);\n            dot.material = new StandardMaterial(visualResponseKey + \"mat\", _this.scene);\n            dot.material.diffuseColor = Color3.Red();\n            dot.parent = _this._buttonMeshMapping[type].states[visualResponseKey].valueMesh || null;\n            dot.isVisible = false;\n            _this._touchDots[visualResponseKey] = dot;\n          }\n        }\n      });\n    });\n  };\n\n  WebXRProfiledMotionController.prototype._setRootMesh = function (meshes) {\n    this.rootMesh = new Mesh(this.profileId + \"-\" + this.handedness, this.scene);\n    this.rootMesh.isPickable = false;\n    var rootMesh; // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\n\n    for (var i = 0; i < meshes.length; i++) {\n      var mesh = meshes[i];\n      mesh.isPickable = false;\n\n      if (!mesh.parent) {\n        // Handle root node, attach to the new parentMesh\n        rootMesh = mesh;\n      }\n    }\n\n    if (rootMesh) {\n      rootMesh.setParent(this.rootMesh);\n    }\n\n    if (!this.scene.useRightHandedSystem) {\n      this.rootMesh.rotate(Axis.Y, Math.PI, Space.WORLD);\n    }\n  };\n\n  WebXRProfiledMotionController.prototype._updateModel = function (_xrFrame) {\n    var _this = this;\n\n    if (this.disableAnimation) {\n      return;\n    }\n\n    this.getComponentIds().forEach(function (id) {\n      var component = _this.getComponent(id);\n\n      if (!component.hasChanges) {\n        return;\n      }\n\n      var meshes = _this._buttonMeshMapping[id];\n      var componentInLayout = _this.layout.components[id];\n      Object.keys(componentInLayout.visualResponses).forEach(function (visualResponseKey) {\n        var visResponse = componentInLayout.visualResponses[visualResponseKey];\n        var value = component.value;\n\n        if (visResponse.componentProperty === \"xAxis\") {\n          value = component.axes.x;\n        } else if (visResponse.componentProperty === \"yAxis\") {\n          value = component.axes.y;\n        }\n\n        if (visResponse.valueNodeProperty === \"transform\") {\n          _this._lerpTransform(meshes.states[visualResponseKey], value, visResponse.componentProperty !== \"button\");\n        } else {\n          // visibility\n          var valueMesh = meshes.states[visualResponseKey].valueMesh;\n\n          if (valueMesh) {\n            valueMesh.isVisible = component.touched || component.pressed;\n          }\n\n          if (_this._touchDots[visualResponseKey]) {\n            _this._touchDots[visualResponseKey].isVisible = component.touched || component.pressed;\n          }\n        }\n      });\n    });\n  };\n\n  return WebXRProfiledMotionController;\n}(WebXRAbstractMotionController);\n\nexport { WebXRProfiledMotionController };","map":{"version":3,"sources":["../../../../sourceES6/core/XR/motionController/webXRProfiledMotionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { WebXRAbstractMotionController, IMotionControllerProfile, IMotionControllerMeshMap } from \"./webXRAbstractMotionController\";\r\nimport { Scene } from \"../../scene\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { Axis, Space } from \"../../Maths/math.axis\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { WebXRControllerComponent } from \"./webXRControllerComponent\";\r\nimport { SphereBuilder } from \"../../Meshes/Builders/sphereBuilder\";\r\nimport { StandardMaterial } from \"../../Materials/standardMaterial\";\r\nimport { Logger } from \"../../Misc/logger\";\r\n\r\n/**\r\n * A profiled motion controller has its profile loaded from an online repository.\r\n * The class is responsible of loading the model, mapping the keys and enabling model-animations\r\n */\r\nexport class WebXRProfiledMotionController extends WebXRAbstractMotionController {\r\n    private _buttonMeshMapping: {\r\n        [buttonName: string]: {\r\n            mainMesh?: AbstractMesh;\r\n            states: {\r\n                [state: string]: IMotionControllerMeshMap;\r\n            };\r\n        };\r\n    } = {};\r\n    private _touchDots: { [visKey: string]: AbstractMesh } = {};\r\n\r\n    /**\r\n     * The profile ID of this controller. Will be populated when the controller initializes.\r\n     */\r\n    public profileId: string;\r\n\r\n    constructor(scene: Scene, xrInput: XRInputSource, _profile: IMotionControllerProfile, private _repositoryUrl: string) {\r\n        super(scene, _profile.layouts[xrInput.handedness || \"none\"], xrInput.gamepad as any, xrInput.handedness);\r\n        this.profileId = _profile.profileId;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        Object.keys(this._touchDots).forEach((visResKey) => {\r\n            this._touchDots[visResKey].dispose();\r\n        });\r\n    }\r\n\r\n    protected _getFilenameAndPath(): { filename: string; path: string } {\r\n        return {\r\n            filename: this.layout.assetPath,\r\n            path: `${this._repositoryUrl}/profiles/${this.profileId}/`,\r\n        };\r\n    }\r\n\r\n    protected _getModelLoadingConstraints(): boolean {\r\n        const glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\r\n        if (!glbLoaded) {\r\n            Logger.Warn(\"glTF / glb loaded was not registered, using generic controller instead\");\r\n        }\r\n        return glbLoaded;\r\n    }\r\n\r\n    protected _processLoadedModel(_meshes: AbstractMesh[]): void {\r\n        this.getComponentIds().forEach((type) => {\r\n            const componentInLayout = this.layout.components[type];\r\n            this._buttonMeshMapping[type] = {\r\n                mainMesh: this._getChildByName(this.rootMesh!, componentInLayout.rootNodeName),\r\n                states: {},\r\n            };\r\n            Object.keys(componentInLayout.visualResponses).forEach((visualResponseKey) => {\r\n                const visResponse = componentInLayout.visualResponses[visualResponseKey];\r\n                if (visResponse.valueNodeProperty === \"transform\") {\r\n                    this._buttonMeshMapping[type].states[visualResponseKey] = {\r\n                        valueMesh: this._getChildByName(this.rootMesh!, visResponse.valueNodeName!),\r\n                        minMesh: this._getChildByName(this.rootMesh!, visResponse.minNodeName!),\r\n                        maxMesh: this._getChildByName(this.rootMesh!, visResponse.maxNodeName!),\r\n                    };\r\n                } else {\r\n                    // visibility, usually for touchpads\r\n                    const nameOfMesh = componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && componentInLayout.touchPointNodeName ? componentInLayout.touchPointNodeName : visResponse.valueNodeName!;\r\n                    this._buttonMeshMapping[type].states[visualResponseKey] = {\r\n                        valueMesh: this._getChildByName(this.rootMesh!, nameOfMesh),\r\n                    };\r\n                    if (componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && !this._touchDots[visualResponseKey]) {\r\n                        const dot = SphereBuilder.CreateSphere(\r\n                            visualResponseKey + \"dot\",\r\n                            {\r\n                                diameter: 0.0015,\r\n                                segments: 8,\r\n                            },\r\n                            this.scene\r\n                        );\r\n                        dot.material = new StandardMaterial(visualResponseKey + \"mat\", this.scene);\r\n                        (<StandardMaterial>dot.material).diffuseColor = Color3.Red();\r\n                        dot.parent = this._buttonMeshMapping[type].states[visualResponseKey].valueMesh || null;\r\n                        dot.isVisible = false;\r\n                        this._touchDots[visualResponseKey] = dot;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    protected _setRootMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \"-\" + this.handedness, this.scene);\r\n        this.rootMesh.isPickable = false;\r\n        let rootMesh;\r\n        // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\r\n        for (let i = 0; i < meshes.length; i++) {\r\n            let mesh = meshes[i];\r\n\r\n            mesh.isPickable = false;\r\n\r\n            if (!mesh.parent) {\r\n                // Handle root node, attach to the new parentMesh\r\n                rootMesh = mesh;\r\n            }\r\n        }\r\n\r\n        if (rootMesh) {\r\n            rootMesh.setParent(this.rootMesh);\r\n        }\r\n        if (!this.scene.useRightHandedSystem) {\r\n            this.rootMesh.rotate(Axis.Y, Math.PI, Space.WORLD);\r\n        }\r\n    }\r\n\r\n    protected _updateModel(_xrFrame: XRFrame): void {\r\n        if (this.disableAnimation) {\r\n            return;\r\n        }\r\n        this.getComponentIds().forEach((id) => {\r\n            const component = this.getComponent(id);\r\n            if (!component.hasChanges) {\r\n                return;\r\n            }\r\n            const meshes = this._buttonMeshMapping[id];\r\n            const componentInLayout = this.layout.components[id];\r\n            Object.keys(componentInLayout.visualResponses).forEach((visualResponseKey) => {\r\n                const visResponse = componentInLayout.visualResponses[visualResponseKey];\r\n                let value = component.value;\r\n                if (visResponse.componentProperty === \"xAxis\") {\r\n                    value = component.axes.x;\r\n                } else if (visResponse.componentProperty === \"yAxis\") {\r\n                    value = component.axes.y;\r\n                }\r\n                if (visResponse.valueNodeProperty === \"transform\") {\r\n                    this._lerpTransform(meshes.states[visualResponseKey], value, visResponse.componentProperty !== \"button\");\r\n                } else {\r\n                    // visibility\r\n                    const valueMesh = meshes.states[visualResponseKey].valueMesh;\r\n                    if (valueMesh) {\r\n                        valueMesh.isVisible = component.touched || component.pressed;\r\n                    }\r\n                    if (this._touchDots[visualResponseKey]) {\r\n                        this._touchDots[visualResponseKey].isVisible = component.touched || component.pressed;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}