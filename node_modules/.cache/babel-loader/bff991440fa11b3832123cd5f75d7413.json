{"ast":null,"code":"import { Observable } from \"../Misc/observable\";\n/**\r\n * COnfiguration object for WebXR output canvas\r\n */\n\nvar WebXRManagedOutputCanvasOptions =\n/** @class */\nfunction () {\n  function WebXRManagedOutputCanvasOptions() {}\n  /**\r\n   * Get the default values of the configuration object\r\n   * @param engine defines the engine to use (can be null)\r\n   * @returns default values of this configuration object\r\n   */\n\n\n  WebXRManagedOutputCanvasOptions.GetDefaults = function (engine) {\n    var defaults = new WebXRManagedOutputCanvasOptions();\n    defaults.canvasOptions = {\n      antialias: true,\n      depth: true,\n      stencil: engine ? engine.isStencilEnable : true,\n      alpha: true,\n      multiview: false,\n      framebufferScaleFactor: 1\n    };\n    defaults.newCanvasCssStyle = \"position:absolute; bottom:0px;right:0px;z-index:10;width:90%;height:100%;background-color: #000000;\";\n    return defaults;\n  };\n\n  return WebXRManagedOutputCanvasOptions;\n}();\n\nexport { WebXRManagedOutputCanvasOptions };\n/**\r\n * Creates a canvas that is added/removed from the webpage when entering/exiting XR\r\n */\n\nvar WebXRManagedOutputCanvas =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes the canvas to be added/removed upon entering/exiting xr\r\n   * @param _xrSessionManager The XR Session manager\r\n   * @param _options optional configuration for this canvas output. defaults will be used if not provided\r\n   */\n  function WebXRManagedOutputCanvas(_xrSessionManager, _options) {\n    var _this = this;\n\n    if (_options === void 0) {\n      _options = WebXRManagedOutputCanvasOptions.GetDefaults();\n    }\n\n    this._options = _options;\n    this._canvas = null;\n    /**\r\n     * xr layer for the canvas\r\n     */\n\n    this.xrLayer = null;\n    /**\r\n     * Obseervers registered here will be triggered when the xr layer was initialized\r\n     */\n\n    this.onXRLayerInitObservable = new Observable();\n    this._engine = _xrSessionManager.scene.getEngine();\n\n    if (!_options.canvasElement) {\n      var canvas = document.createElement(\"canvas\");\n      canvas.style.cssText = this._options.newCanvasCssStyle || \"position:absolute; bottom:0px;right:0px;\";\n\n      this._setManagedOutputCanvas(canvas);\n    } else {\n      this._setManagedOutputCanvas(_options.canvasElement);\n    }\n\n    _xrSessionManager.onXRSessionInit.add(function () {\n      _this._addCanvas();\n    });\n\n    _xrSessionManager.onXRSessionEnded.add(function () {\n      _this._removeCanvas();\n    });\n  }\n  /**\r\n   * Disposes of the object\r\n   */\n\n\n  WebXRManagedOutputCanvas.prototype.dispose = function () {\n    this._removeCanvas();\n\n    this._setManagedOutputCanvas(null);\n  };\n  /**\r\n   * Initializes the xr layer for the session\r\n   * @param xrSession xr session\r\n   * @returns a promise that will resolve once the XR Layer has been created\r\n   */\n\n\n  WebXRManagedOutputCanvas.prototype.initializeXRLayerAsync = function (xrSession) {\n    var _this = this;\n\n    var createLayer = function () {\n      var layer = new XRWebGLLayer(xrSession, _this.canvasContext, _this._options.canvasOptions);\n\n      _this.onXRLayerInitObservable.notifyObservers(layer);\n\n      return layer;\n    }; // support canvases without makeXRCompatible\n\n\n    if (!this.canvasContext.makeXRCompatible) {\n      this.xrLayer = createLayer();\n      return Promise.resolve(this.xrLayer);\n    }\n\n    return this.canvasContext.makeXRCompatible().then(function () {\n      _this.xrLayer = createLayer();\n      return _this.xrLayer;\n    });\n  };\n\n  WebXRManagedOutputCanvas.prototype._addCanvas = function () {\n    var _this = this;\n\n    if (this._canvas && this._canvas !== this._engine.getRenderingCanvas()) {\n      document.body.appendChild(this._canvas);\n    }\n\n    if (this.xrLayer) {\n      this._setCanvasSize(true);\n    } else {\n      this.onXRLayerInitObservable.addOnce(function (layer) {\n        _this._setCanvasSize(true, layer);\n      });\n    }\n  };\n\n  WebXRManagedOutputCanvas.prototype._removeCanvas = function () {\n    if (this._canvas && document.body.contains(this._canvas) && this._canvas !== this._engine.getRenderingCanvas()) {\n      document.body.removeChild(this._canvas);\n    }\n\n    this._setCanvasSize(false);\n  };\n\n  WebXRManagedOutputCanvas.prototype._setCanvasSize = function (init, xrLayer) {\n    if (init === void 0) {\n      init = true;\n    }\n\n    if (xrLayer === void 0) {\n      xrLayer = this.xrLayer;\n    }\n\n    if (!this._canvas) {\n      return;\n    }\n\n    if (init) {\n      if (xrLayer) {\n        if (this._canvas !== this._engine.getRenderingCanvas()) {\n          this._canvas.style.width = xrLayer.framebufferWidth + \"px\";\n          this._canvas.style.height = xrLayer.framebufferHeight + \"px\";\n        } else {\n          this._engine.setSize(xrLayer.framebufferWidth, xrLayer.framebufferHeight);\n        }\n      }\n    } else {\n      if (this._originalCanvasSize) {\n        if (this._canvas !== this._engine.getRenderingCanvas()) {\n          this._canvas.style.width = this._originalCanvasSize.width + \"px\";\n          this._canvas.style.height = this._originalCanvasSize.height + \"px\";\n        } else {\n          this._engine.setSize(this._originalCanvasSize.width, this._originalCanvasSize.height);\n        }\n      }\n    }\n  };\n\n  WebXRManagedOutputCanvas.prototype._setManagedOutputCanvas = function (canvas) {\n    this._removeCanvas();\n\n    if (!canvas) {\n      this._canvas = null;\n      this.canvasContext = null;\n    } else {\n      this._originalCanvasSize = {\n        width: canvas.offsetWidth,\n        height: canvas.offsetHeight\n      };\n      this._canvas = canvas;\n      this.canvasContext = this._canvas.getContext(\"webgl2\");\n\n      if (!this.canvasContext) {\n        this.canvasContext = this._canvas.getContext(\"webgl\");\n      }\n    }\n  };\n\n  return WebXRManagedOutputCanvas;\n}();\n\nexport { WebXRManagedOutputCanvas };","map":{"version":3,"sources":["../../../sourceES6/core/XR/webXRManagedOutputCanvas.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { WebXRRenderTarget } from \"./webXRTypes\";\r\nimport { WebXRSessionManager } from \"./webXRSessionManager\";\r\nimport { Observable } from \"../Misc/observable\";\r\n\r\n/**\r\n * COnfiguration object for WebXR output canvas\r\n */\r\nexport class WebXRManagedOutputCanvasOptions {\r\n    /**\r\n     * An optional canvas in case you wish to create it yourself and provide it here.\r\n     * If not provided, a new canvas will be created\r\n     */\r\n    public canvasElement?: HTMLCanvasElement;\r\n    /**\r\n     * Options for this XR Layer output\r\n     */\r\n    public canvasOptions?: XRWebGLLayerInit;\r\n    /**\r\n     * CSS styling for a newly created canvas (if not provided)\r\n     */\r\n    public newCanvasCssStyle?: string;\r\n\r\n    /**\r\n     * Get the default values of the configuration object\r\n     * @param engine defines the engine to use (can be null)\r\n     * @returns default values of this configuration object\r\n     */\r\n    public static GetDefaults(engine?: ThinEngine): WebXRManagedOutputCanvasOptions {\r\n        const defaults = new WebXRManagedOutputCanvasOptions();\r\n        defaults.canvasOptions = {\r\n            antialias: true,\r\n            depth: true,\r\n            stencil: engine ? engine.isStencilEnable : true,\r\n            alpha: true,\r\n            multiview: false,\r\n            framebufferScaleFactor: 1,\r\n        };\r\n\r\n        defaults.newCanvasCssStyle = \"position:absolute; bottom:0px;right:0px;z-index:10;width:90%;height:100%;background-color: #000000;\";\r\n\r\n        return defaults;\r\n    }\r\n}\r\n/**\r\n * Creates a canvas that is added/removed from the webpage when entering/exiting XR\r\n */\r\nexport class WebXRManagedOutputCanvas implements WebXRRenderTarget {\r\n    private _canvas: Nullable<HTMLCanvasElement> = null;\r\n    private _engine: ThinEngine;\r\n    private _originalCanvasSize: {\r\n        width: number;\r\n        height: number;\r\n    };\r\n\r\n    /**\r\n     * Rendering context of the canvas which can be used to display/mirror xr content\r\n     */\r\n    public canvasContext: WebGLRenderingContext;\r\n    /**\r\n     * xr layer for the canvas\r\n     */\r\n    public xrLayer: Nullable<XRWebGLLayer> = null;\r\n\r\n    /**\r\n     * Obseervers registered here will be triggered when the xr layer was initialized\r\n     */\r\n    public onXRLayerInitObservable: Observable<XRWebGLLayer> = new Observable();\r\n\r\n    /**\r\n     * Initializes the canvas to be added/removed upon entering/exiting xr\r\n     * @param _xrSessionManager The XR Session manager\r\n     * @param _options optional configuration for this canvas output. defaults will be used if not provided\r\n     */\r\n    constructor(_xrSessionManager: WebXRSessionManager, private _options: WebXRManagedOutputCanvasOptions = WebXRManagedOutputCanvasOptions.GetDefaults()) {\r\n        this._engine = _xrSessionManager.scene.getEngine();\r\n        if (!_options.canvasElement) {\r\n            const canvas = document.createElement(\"canvas\");\r\n            canvas.style.cssText = this._options.newCanvasCssStyle || \"position:absolute; bottom:0px;right:0px;\";\r\n            this._setManagedOutputCanvas(canvas);\r\n        } else {\r\n            this._setManagedOutputCanvas(_options.canvasElement);\r\n        }\r\n\r\n        _xrSessionManager.onXRSessionInit.add(() => {\r\n            this._addCanvas();\r\n        });\r\n\r\n        _xrSessionManager.onXRSessionEnded.add(() => {\r\n            this._removeCanvas();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disposes of the object\r\n     */\r\n    public dispose() {\r\n        this._removeCanvas();\r\n        this._setManagedOutputCanvas(null);\r\n    }\r\n\r\n    /**\r\n     * Initializes the xr layer for the session\r\n     * @param xrSession xr session\r\n     * @returns a promise that will resolve once the XR Layer has been created\r\n     */\r\n    public initializeXRLayerAsync(xrSession: XRSession): Promise<XRWebGLLayer> {\r\n        const createLayer = () => {\r\n            const layer = new XRWebGLLayer(xrSession, this.canvasContext, this._options.canvasOptions);\r\n            this.onXRLayerInitObservable.notifyObservers(layer);\r\n            return layer;\r\n        };\r\n\r\n        // support canvases without makeXRCompatible\r\n        if (!(this.canvasContext as any).makeXRCompatible) {\r\n            this.xrLayer = createLayer();\r\n            return Promise.resolve(this.xrLayer);\r\n        }\r\n\r\n        return (this.canvasContext as any).makeXRCompatible().then(() => {\r\n            this.xrLayer = createLayer();\r\n            return this.xrLayer;\r\n        });\r\n    }\r\n\r\n    private _addCanvas() {\r\n        if (this._canvas && this._canvas !== this._engine.getRenderingCanvas()) {\r\n            document.body.appendChild(this._canvas);\r\n        }\r\n        if (this.xrLayer) {\r\n            this._setCanvasSize(true);\r\n        } else {\r\n            this.onXRLayerInitObservable.addOnce((layer) => {\r\n                this._setCanvasSize(true, layer);\r\n            });\r\n        }\r\n    }\r\n\r\n    private _removeCanvas() {\r\n        if (this._canvas && document.body.contains(this._canvas) && this._canvas !== this._engine.getRenderingCanvas()) {\r\n            document.body.removeChild(this._canvas);\r\n        }\r\n        this._setCanvasSize(false);\r\n    }\r\n\r\n    private _setCanvasSize(init: boolean = true, xrLayer = this.xrLayer) {\r\n        if (!this._canvas) {\r\n            return;\r\n        }\r\n        if (init) {\r\n            if (xrLayer) {\r\n                if (this._canvas !== this._engine.getRenderingCanvas()) {\r\n                    this._canvas.style.width = xrLayer.framebufferWidth + \"px\";\r\n                    this._canvas.style.height = xrLayer.framebufferHeight + \"px\";\r\n                } else {\r\n                    this._engine.setSize(xrLayer.framebufferWidth, xrLayer.framebufferHeight);\r\n                }\r\n            }\r\n        } else {\r\n            if (this._originalCanvasSize) {\r\n                if (this._canvas !== this._engine.getRenderingCanvas()) {\r\n                    this._canvas.style.width = this._originalCanvasSize.width + \"px\";\r\n                    this._canvas.style.height = this._originalCanvasSize.height + \"px\";\r\n                } else {\r\n                    this._engine.setSize(this._originalCanvasSize.width, this._originalCanvasSize.height);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setManagedOutputCanvas(canvas: Nullable<HTMLCanvasElement>) {\r\n        this._removeCanvas();\r\n        if (!canvas) {\r\n            this._canvas = null;\r\n            (this.canvasContext as any) = null;\r\n        } else {\r\n            this._originalCanvasSize = {\r\n                width: canvas.offsetWidth,\r\n                height: canvas.offsetHeight,\r\n            };\r\n            this._canvas = canvas;\r\n            this.canvasContext = <any>this._canvas.getContext(\"webgl2\");\r\n            if (!this.canvasContext) {\r\n                this.canvasContext = <any>this._canvas.getContext(\"webgl\");\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}