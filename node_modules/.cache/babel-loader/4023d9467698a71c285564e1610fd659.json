{"ast":null,"code":"import { Vector4 } from \"../../Maths/math.vector\";\nimport { Color4 } from '../../Maths/math.color';\nimport { Mesh } from \"../mesh\";\nimport { VertexData } from \"../mesh.vertexData\";\n\nVertexData.CreatePolyhedron = function (options) {\n  // provided polyhedron types :\n  // 0 : Tetrahedron, 1 : Octahedron, 2 : Dodecahedron, 3 : Icosahedron, 4 : Rhombicuboctahedron, 5 : Triangular Prism, 6 : Pentagonal Prism, 7 : Hexagonal Prism, 8 : Square Pyramid (J1)\n  // 9 : Pentagonal Pyramid (J2), 10 : Triangular Dipyramid (J12), 11 : Pentagonal Dipyramid (J13), 12 : Elongated Square Dipyramid (J15), 13 : Elongated Pentagonal Dipyramid (J16), 14 : Elongated Pentagonal Cupola (J20)\n  var polyhedra = [];\n  polyhedra[0] = {\n    vertex: [[0, 0, 1.732051], [1.632993, 0, -0.5773503], [-0.8164966, 1.414214, -0.5773503], [-0.8164966, -1.414214, -0.5773503]],\n    face: [[0, 1, 2], [0, 2, 3], [0, 3, 1], [1, 3, 2]]\n  };\n  polyhedra[1] = {\n    vertex: [[0, 0, 1.414214], [1.414214, 0, 0], [0, 1.414214, 0], [-1.414214, 0, 0], [0, -1.414214, 0], [0, 0, -1.414214]],\n    face: [[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 1], [1, 4, 5], [1, 5, 2], [2, 5, 3], [3, 5, 4]]\n  };\n  polyhedra[2] = {\n    vertex: [[0, 0, 1.070466], [0.7136442, 0, 0.7978784], [-0.3568221, 0.618034, 0.7978784], [-0.3568221, -0.618034, 0.7978784], [0.7978784, 0.618034, 0.3568221], [0.7978784, -0.618034, 0.3568221], [-0.9341724, 0.381966, 0.3568221], [0.1362939, 1, 0.3568221], [0.1362939, -1, 0.3568221], [-0.9341724, -0.381966, 0.3568221], [0.9341724, 0.381966, -0.3568221], [0.9341724, -0.381966, -0.3568221], [-0.7978784, 0.618034, -0.3568221], [-0.1362939, 1, -0.3568221], [-0.1362939, -1, -0.3568221], [-0.7978784, -0.618034, -0.3568221], [0.3568221, 0.618034, -0.7978784], [0.3568221, -0.618034, -0.7978784], [-0.7136442, 0, -0.7978784], [0, 0, -1.070466]],\n    face: [[0, 1, 4, 7, 2], [0, 2, 6, 9, 3], [0, 3, 8, 5, 1], [1, 5, 11, 10, 4], [2, 7, 13, 12, 6], [3, 9, 15, 14, 8], [4, 10, 16, 13, 7], [5, 8, 14, 17, 11], [6, 12, 18, 15, 9], [10, 11, 17, 19, 16], [12, 13, 16, 19, 18], [14, 15, 18, 19, 17]]\n  };\n  polyhedra[3] = {\n    vertex: [[0, 0, 1.175571], [1.051462, 0, 0.5257311], [0.3249197, 1, 0.5257311], [-0.8506508, 0.618034, 0.5257311], [-0.8506508, -0.618034, 0.5257311], [0.3249197, -1, 0.5257311], [0.8506508, 0.618034, -0.5257311], [0.8506508, -0.618034, -0.5257311], [-0.3249197, 1, -0.5257311], [-1.051462, 0, -0.5257311], [-0.3249197, -1, -0.5257311], [0, 0, -1.175571]],\n    face: [[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 5], [0, 5, 1], [1, 5, 7], [1, 7, 6], [1, 6, 2], [2, 6, 8], [2, 8, 3], [3, 8, 9], [3, 9, 4], [4, 9, 10], [4, 10, 5], [5, 10, 7], [6, 7, 11], [6, 11, 8], [7, 10, 11], [8, 11, 9], [9, 11, 10]]\n  };\n  polyhedra[4] = {\n    vertex: [[0, 0, 1.070722], [0.7148135, 0, 0.7971752], [-0.104682, 0.7071068, 0.7971752], [-0.6841528, 0.2071068, 0.7971752], [-0.104682, -0.7071068, 0.7971752], [0.6101315, 0.7071068, 0.5236279], [1.04156, 0.2071068, 0.1367736], [0.6101315, -0.7071068, 0.5236279], [-0.3574067, 1, 0.1367736], [-0.7888348, -0.5, 0.5236279], [-0.9368776, 0.5, 0.1367736], [-0.3574067, -1, 0.1367736], [0.3574067, 1, -0.1367736], [0.9368776, -0.5, -0.1367736], [0.7888348, 0.5, -0.5236279], [0.3574067, -1, -0.1367736], [-0.6101315, 0.7071068, -0.5236279], [-1.04156, -0.2071068, -0.1367736], [-0.6101315, -0.7071068, -0.5236279], [0.104682, 0.7071068, -0.7971752], [0.6841528, -0.2071068, -0.7971752], [0.104682, -0.7071068, -0.7971752], [-0.7148135, 0, -0.7971752], [0, 0, -1.070722]],\n    face: [[0, 2, 3], [1, 6, 5], [4, 9, 11], [7, 15, 13], [8, 16, 10], [12, 14, 19], [17, 22, 18], [20, 21, 23], [0, 1, 5, 2], [0, 3, 9, 4], [0, 4, 7, 1], [1, 7, 13, 6], [2, 5, 12, 8], [2, 8, 10, 3], [3, 10, 17, 9], [4, 11, 15, 7], [5, 6, 14, 12], [6, 13, 20, 14], [8, 12, 19, 16], [9, 17, 18, 11], [10, 16, 22, 17], [11, 18, 21, 15], [13, 15, 21, 20], [14, 20, 23, 19], [16, 19, 23, 22], [18, 22, 23, 21]]\n  };\n  polyhedra[5] = {\n    vertex: [[0, 0, 1.322876], [1.309307, 0, 0.1889822], [-0.9819805, 0.8660254, 0.1889822], [0.1636634, -1.299038, 0.1889822], [0.3273268, 0.8660254, -0.9449112], [-0.8183171, -0.4330127, -0.9449112]],\n    face: [[0, 3, 1], [2, 4, 5], [0, 1, 4, 2], [0, 2, 5, 3], [1, 3, 5, 4]]\n  };\n  polyhedra[6] = {\n    vertex: [[0, 0, 1.159953], [1.013464, 0, 0.5642542], [-0.3501431, 0.9510565, 0.5642542], [-0.7715208, -0.6571639, 0.5642542], [0.6633206, 0.9510565, -0.03144481], [0.8682979, -0.6571639, -0.3996071], [-1.121664, 0.2938926, -0.03144481], [-0.2348831, -1.063314, -0.3996071], [0.5181548, 0.2938926, -0.9953061], [-0.5850262, -0.112257, -0.9953061]],\n    face: [[0, 1, 4, 2], [0, 2, 6, 3], [1, 5, 8, 4], [3, 6, 9, 7], [5, 7, 9, 8], [0, 3, 7, 5, 1], [2, 4, 8, 9, 6]]\n  };\n  polyhedra[7] = {\n    vertex: [[0, 0, 1.118034], [0.8944272, 0, 0.6708204], [-0.2236068, 0.8660254, 0.6708204], [-0.7826238, -0.4330127, 0.6708204], [0.6708204, 0.8660254, 0.2236068], [1.006231, -0.4330127, -0.2236068], [-1.006231, 0.4330127, 0.2236068], [-0.6708204, -0.8660254, -0.2236068], [0.7826238, 0.4330127, -0.6708204], [0.2236068, -0.8660254, -0.6708204], [-0.8944272, 0, -0.6708204], [0, 0, -1.118034]],\n    face: [[0, 1, 4, 2], [0, 2, 6, 3], [1, 5, 8, 4], [3, 6, 10, 7], [5, 9, 11, 8], [7, 10, 11, 9], [0, 3, 7, 9, 5, 1], [2, 4, 8, 11, 10, 6]]\n  };\n  polyhedra[8] = {\n    vertex: [[-0.729665, 0.670121, 0.319155], [-0.655235, -0.29213, -0.754096], [-0.093922, -0.607123, 0.537818], [0.702196, 0.595691, 0.485187], [0.776626, -0.36656, -0.588064]],\n    face: [[1, 4, 2], [0, 1, 2], [3, 0, 2], [4, 3, 2], [4, 1, 0, 3]]\n  };\n  polyhedra[9] = {\n    vertex: [[-0.868849, -0.100041, 0.61257], [-0.329458, 0.976099, 0.28078], [-0.26629, -0.013796, -0.477654], [-0.13392, -1.034115, 0.229829], [0.738834, 0.707117, -0.307018], [0.859683, -0.535264, -0.338508]],\n    face: [[3, 0, 2], [5, 3, 2], [4, 5, 2], [1, 4, 2], [0, 1, 2], [0, 3, 5, 4, 1]]\n  };\n  polyhedra[10] = {\n    vertex: [[-0.610389, 0.243975, 0.531213], [-0.187812, -0.48795, -0.664016], [-0.187812, 0.9759, -0.664016], [0.187812, -0.9759, 0.664016], [0.798201, 0.243975, 0.132803]],\n    face: [[1, 3, 0], [3, 4, 0], [3, 1, 4], [0, 2, 1], [0, 4, 2], [2, 4, 1]]\n  };\n  polyhedra[11] = {\n    vertex: [[-1.028778, 0.392027, -0.048786], [-0.640503, -0.646161, 0.621837], [-0.125162, -0.395663, -0.540059], [0.004683, 0.888447, -0.651988], [0.125161, 0.395663, 0.540059], [0.632925, -0.791376, 0.433102], [1.031672, 0.157063, -0.354165]],\n    face: [[3, 2, 0], [2, 1, 0], [2, 5, 1], [0, 4, 3], [0, 1, 4], [4, 1, 5], [2, 3, 6], [3, 4, 6], [5, 2, 6], [4, 5, 6]]\n  };\n  polyhedra[12] = {\n    vertex: [[-0.669867, 0.334933, -0.529576], [-0.669867, 0.334933, 0.529577], [-0.4043, 1.212901, 0], [-0.334933, -0.669867, -0.529576], [-0.334933, -0.669867, 0.529577], [0.334933, 0.669867, -0.529576], [0.334933, 0.669867, 0.529577], [0.4043, -1.212901, 0], [0.669867, -0.334933, -0.529576], [0.669867, -0.334933, 0.529577]],\n    face: [[8, 9, 7], [6, 5, 2], [3, 8, 7], [5, 0, 2], [4, 3, 7], [0, 1, 2], [9, 4, 7], [1, 6, 2], [9, 8, 5, 6], [8, 3, 0, 5], [3, 4, 1, 0], [4, 9, 6, 1]]\n  };\n  polyhedra[13] = {\n    vertex: [[-0.931836, 0.219976, -0.264632], [-0.636706, 0.318353, 0.692816], [-0.613483, -0.735083, -0.264632], [-0.326545, 0.979634, 0], [-0.318353, -0.636706, 0.692816], [-0.159176, 0.477529, -0.856368], [0.159176, -0.477529, -0.856368], [0.318353, 0.636706, 0.692816], [0.326545, -0.979634, 0], [0.613482, 0.735082, -0.264632], [0.636706, -0.318353, 0.692816], [0.931835, -0.219977, -0.264632]],\n    face: [[11, 10, 8], [7, 9, 3], [6, 11, 8], [9, 5, 3], [2, 6, 8], [5, 0, 3], [4, 2, 8], [0, 1, 3], [10, 4, 8], [1, 7, 3], [10, 11, 9, 7], [11, 6, 5, 9], [6, 2, 0, 5], [2, 4, 1, 0], [4, 10, 7, 1]]\n  };\n  polyhedra[14] = {\n    vertex: [[-0.93465, 0.300459, -0.271185], [-0.838689, -0.260219, -0.516017], [-0.711319, 0.717591, 0.128359], [-0.710334, -0.156922, 0.080946], [-0.599799, 0.556003, -0.725148], [-0.503838, -0.004675, -0.969981], [-0.487004, 0.26021, 0.48049], [-0.460089, -0.750282, -0.512622], [-0.376468, 0.973135, -0.325605], [-0.331735, -0.646985, 0.084342], [-0.254001, 0.831847, 0.530001], [-0.125239, -0.494738, -0.966586], [0.029622, 0.027949, 0.730817], [0.056536, -0.982543, -0.262295], [0.08085, 1.087391, 0.076037], [0.125583, -0.532729, 0.485984], [0.262625, 0.599586, 0.780328], [0.391387, -0.726999, -0.716259], [0.513854, -0.868287, 0.139347], [0.597475, 0.85513, 0.326364], [0.641224, 0.109523, 0.783723], [0.737185, -0.451155, 0.538891], [0.848705, -0.612742, -0.314616], [0.976075, 0.365067, 0.32976], [1.072036, -0.19561, 0.084927]],\n    face: [[15, 18, 21], [12, 20, 16], [6, 10, 2], [3, 0, 1], [9, 7, 13], [2, 8, 4, 0], [0, 4, 5, 1], [1, 5, 11, 7], [7, 11, 17, 13], [13, 17, 22, 18], [18, 22, 24, 21], [21, 24, 23, 20], [20, 23, 19, 16], [16, 19, 14, 10], [10, 14, 8, 2], [15, 9, 13, 18], [12, 15, 21, 20], [6, 12, 16, 10], [3, 6, 2, 0], [9, 3, 1, 7], [9, 15, 12, 6, 3], [22, 17, 11, 5, 4, 8, 14, 19, 23, 24]]\n  };\n  var type = options.type && (options.type < 0 || options.type >= polyhedra.length) ? 0 : options.type || 0;\n  var size = options.size;\n  var sizeX = options.sizeX || size || 1;\n  var sizeY = options.sizeY || size || 1;\n  var sizeZ = options.sizeZ || size || 1;\n  var data = options.custom || polyhedra[type];\n  var nbfaces = data.face.length;\n  var faceUV = options.faceUV || new Array(nbfaces);\n  var faceColors = options.faceColors;\n  var flat = options.flat === undefined ? true : options.flat;\n  var sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n  var positions = new Array();\n  var indices = new Array();\n  var normals = new Array();\n  var uvs = new Array();\n  var colors = new Array();\n  var index = 0;\n  var faceIdx = 0; // face cursor in the array \"indexes\"\n\n  var indexes = new Array();\n  var i = 0;\n  var f = 0;\n  var u, v, ang, x, y, tmp; // default face colors and UV if undefined\n\n  if (flat) {\n    for (f = 0; f < nbfaces; f++) {\n      if (faceColors && faceColors[f] === undefined) {\n        faceColors[f] = new Color4(1, 1, 1, 1);\n      }\n\n      if (faceUV && faceUV[f] === undefined) {\n        faceUV[f] = new Vector4(0, 0, 1, 1);\n      }\n    }\n  }\n\n  if (!flat) {\n    for (i = 0; i < data.vertex.length; i++) {\n      positions.push(data.vertex[i][0] * sizeX, data.vertex[i][1] * sizeY, data.vertex[i][2] * sizeZ);\n      uvs.push(0, 0);\n    }\n\n    for (f = 0; f < nbfaces; f++) {\n      for (i = 0; i < data.face[f].length - 2; i++) {\n        indices.push(data.face[f][0], data.face[f][i + 2], data.face[f][i + 1]);\n      }\n    }\n  } else {\n    for (f = 0; f < nbfaces; f++) {\n      var fl = data.face[f].length; // number of vertices of the current face\n\n      ang = 2 * Math.PI / fl;\n      x = 0.5 * Math.tan(ang / 2);\n      y = 0.5; // positions, uvs, colors\n\n      for (i = 0; i < fl; i++) {\n        // positions\n        positions.push(data.vertex[data.face[f][i]][0] * sizeX, data.vertex[data.face[f][i]][1] * sizeY, data.vertex[data.face[f][i]][2] * sizeZ);\n        indexes.push(index);\n        index++; // uvs\n\n        u = faceUV[f].x + (faceUV[f].z - faceUV[f].x) * (0.5 + x);\n        v = faceUV[f].y + (faceUV[f].w - faceUV[f].y) * (y - 0.5);\n        uvs.push(u, v);\n        tmp = x * Math.cos(ang) - y * Math.sin(ang);\n        y = x * Math.sin(ang) + y * Math.cos(ang);\n        x = tmp; // colors\n\n        if (faceColors) {\n          colors.push(faceColors[f].r, faceColors[f].g, faceColors[f].b, faceColors[f].a);\n        }\n      } // indices from indexes\n\n\n      for (i = 0; i < fl - 2; i++) {\n        indices.push(indexes[0 + faceIdx], indexes[i + 2 + faceIdx], indexes[i + 1 + faceIdx]);\n      }\n\n      faceIdx += fl;\n    }\n  }\n\n  VertexData.ComputeNormals(positions, indices, normals);\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\n\n  var vertexData = new VertexData();\n  vertexData.positions = positions;\n  vertexData.indices = indices;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n\n  if (faceColors && flat) {\n    vertexData.colors = colors;\n  }\n\n  return vertexData;\n};\n\nMesh.CreatePolyhedron = function (name, options, scene) {\n  return PolyhedronBuilder.CreatePolyhedron(name, options, scene);\n};\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\n\n\nvar PolyhedronBuilder =\n/** @class */\nfunction () {\n  function PolyhedronBuilder() {}\n  /**\r\n   * Creates a polyhedron mesh\r\n   * * The parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embbeded types. Please refer to the type sheet in the tutorial to choose the wanted type\r\n   * * The parameter `size` (positive float, default 1) sets the polygon size\r\n   * * You can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value)\r\n   * * You can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overwrittes the parameter `type`\r\n   * * A `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\r\n   * * You can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`)\r\n   * * To understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors\r\n   * * The parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored\r\n   * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n   * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n   * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n   * @param name defines the name of the mesh\r\n   * @param options defines the options used to create the mesh\r\n   * @param scene defines the hosting scene\r\n   * @returns the polyhedron mesh\r\n   * @see https://doc.babylonjs.com/how_to/polyhedra_shapes\r\n   */\n\n\n  PolyhedronBuilder.CreatePolyhedron = function (name, options, scene) {\n    if (scene === void 0) {\n      scene = null;\n    }\n\n    var polyhedron = new Mesh(name, scene);\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n    polyhedron._originalBuilderSideOrientation = options.sideOrientation;\n    var vertexData = VertexData.CreatePolyhedron(options);\n    vertexData.applyToMesh(polyhedron, options.updatable);\n    return polyhedron;\n  };\n\n  return PolyhedronBuilder;\n}();\n\nexport { PolyhedronBuilder };","map":{"version":3,"sources":["../../../../sourceES6/core/Meshes/Builders/polyhedronBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene } from \"../../scene\";\r\nimport { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from '../../Maths/math.color';\r\nimport { Mesh, _CreationDataStorage } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { Nullable } from '../../types';\r\n\r\nVertexData.CreatePolyhedron = function(options: { type?: number, size?: number, sizeX?: number, sizeY?: number, sizeZ?: number, custom?: any, faceUV?: Vector4[], faceColors?: Color4[], flat?: boolean, sideOrientation?: number, frontUVs?: Vector4, backUVs?: Vector4 }): VertexData {\r\n    // provided polyhedron types :\r\n    // 0 : Tetrahedron, 1 : Octahedron, 2 : Dodecahedron, 3 : Icosahedron, 4 : Rhombicuboctahedron, 5 : Triangular Prism, 6 : Pentagonal Prism, 7 : Hexagonal Prism, 8 : Square Pyramid (J1)\r\n    // 9 : Pentagonal Pyramid (J2), 10 : Triangular Dipyramid (J12), 11 : Pentagonal Dipyramid (J13), 12 : Elongated Square Dipyramid (J15), 13 : Elongated Pentagonal Dipyramid (J16), 14 : Elongated Pentagonal Cupola (J20)\r\n    var polyhedra: { vertex: number[][], face: number[][] }[] = [];\r\n    polyhedra[0] = { vertex: [[0, 0, 1.732051], [1.632993, 0, -0.5773503], [-0.8164966, 1.414214, -0.5773503], [-0.8164966, -1.414214, -0.5773503]], face: [[0, 1, 2], [0, 2, 3], [0, 3, 1], [1, 3, 2]] };\r\n    polyhedra[1] = { vertex: [[0, 0, 1.414214], [1.414214, 0, 0], [0, 1.414214, 0], [-1.414214, 0, 0], [0, -1.414214, 0], [0, 0, -1.414214]], face: [[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 1], [1, 4, 5], [1, 5, 2], [2, 5, 3], [3, 5, 4]] };\r\n    polyhedra[2] = {\r\n        vertex: [[0, 0, 1.070466], [0.7136442, 0, 0.7978784], [-0.3568221, 0.618034, 0.7978784], [-0.3568221, -0.618034, 0.7978784], [0.7978784, 0.618034, 0.3568221], [0.7978784, -0.618034, 0.3568221], [-0.9341724, 0.381966, 0.3568221], [0.1362939, 1, 0.3568221], [0.1362939, -1, 0.3568221], [-0.9341724, -0.381966, 0.3568221], [0.9341724, 0.381966, -0.3568221], [0.9341724, -0.381966, -0.3568221], [-0.7978784, 0.618034, -0.3568221], [-0.1362939, 1, -0.3568221], [-0.1362939, -1, -0.3568221], [-0.7978784, -0.618034, -0.3568221], [0.3568221, 0.618034, -0.7978784], [0.3568221, -0.618034, -0.7978784], [-0.7136442, 0, -0.7978784], [0, 0, -1.070466]],\r\n        face: [[0, 1, 4, 7, 2], [0, 2, 6, 9, 3], [0, 3, 8, 5, 1], [1, 5, 11, 10, 4], [2, 7, 13, 12, 6], [3, 9, 15, 14, 8], [4, 10, 16, 13, 7], [5, 8, 14, 17, 11], [6, 12, 18, 15, 9], [10, 11, 17, 19, 16], [12, 13, 16, 19, 18], [14, 15, 18, 19, 17]]\r\n    };\r\n    polyhedra[3] = {\r\n        vertex: [[0, 0, 1.175571], [1.051462, 0, 0.5257311], [0.3249197, 1, 0.5257311], [-0.8506508, 0.618034, 0.5257311], [-0.8506508, -0.618034, 0.5257311], [0.3249197, -1, 0.5257311], [0.8506508, 0.618034, -0.5257311], [0.8506508, -0.618034, -0.5257311], [-0.3249197, 1, -0.5257311], [-1.051462, 0, -0.5257311], [-0.3249197, -1, -0.5257311], [0, 0, -1.175571]],\r\n        face: [[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 5], [0, 5, 1], [1, 5, 7], [1, 7, 6], [1, 6, 2], [2, 6, 8], [2, 8, 3], [3, 8, 9], [3, 9, 4], [4, 9, 10], [4, 10, 5], [5, 10, 7], [6, 7, 11], [6, 11, 8], [7, 10, 11], [8, 11, 9], [9, 11, 10]]\r\n    };\r\n    polyhedra[4] = {\r\n        vertex: [[0, 0, 1.070722], [0.7148135, 0, 0.7971752], [-0.104682, 0.7071068, 0.7971752], [-0.6841528, 0.2071068, 0.7971752], [-0.104682, -0.7071068, 0.7971752], [0.6101315, 0.7071068, 0.5236279], [1.04156, 0.2071068, 0.1367736], [0.6101315, -0.7071068, 0.5236279], [-0.3574067, 1, 0.1367736], [-0.7888348, -0.5, 0.5236279], [-0.9368776, 0.5, 0.1367736], [-0.3574067, -1, 0.1367736], [0.3574067, 1, -0.1367736], [0.9368776, -0.5, -0.1367736], [0.7888348, 0.5, -0.5236279], [0.3574067, -1, -0.1367736], [-0.6101315, 0.7071068, -0.5236279], [-1.04156, -0.2071068, -0.1367736], [-0.6101315, -0.7071068, -0.5236279], [0.104682, 0.7071068, -0.7971752], [0.6841528, -0.2071068, -0.7971752], [0.104682, -0.7071068, -0.7971752], [-0.7148135, 0, -0.7971752], [0, 0, -1.070722]],\r\n        face: [[0, 2, 3], [1, 6, 5], [4, 9, 11], [7, 15, 13], [8, 16, 10], [12, 14, 19], [17, 22, 18], [20, 21, 23], [0, 1, 5, 2], [0, 3, 9, 4], [0, 4, 7, 1], [1, 7, 13, 6], [2, 5, 12, 8], [2, 8, 10, 3], [3, 10, 17, 9], [4, 11, 15, 7], [5, 6, 14, 12], [6, 13, 20, 14], [8, 12, 19, 16], [9, 17, 18, 11], [10, 16, 22, 17], [11, 18, 21, 15], [13, 15, 21, 20], [14, 20, 23, 19], [16, 19, 23, 22], [18, 22, 23, 21]]\r\n    };\r\n    polyhedra[5] = { vertex: [[0, 0, 1.322876], [1.309307, 0, 0.1889822], [-0.9819805, 0.8660254, 0.1889822], [0.1636634, -1.299038, 0.1889822], [0.3273268, 0.8660254, -0.9449112], [-0.8183171, -0.4330127, -0.9449112]], face: [[0, 3, 1], [2, 4, 5], [0, 1, 4, 2], [0, 2, 5, 3], [1, 3, 5, 4]] };\r\n    polyhedra[6] = { vertex: [[0, 0, 1.159953], [1.013464, 0, 0.5642542], [-0.3501431, 0.9510565, 0.5642542], [-0.7715208, -0.6571639, 0.5642542], [0.6633206, 0.9510565, -0.03144481], [0.8682979, -0.6571639, -0.3996071], [-1.121664, 0.2938926, -0.03144481], [-0.2348831, -1.063314, -0.3996071], [0.5181548, 0.2938926, -0.9953061], [-0.5850262, -0.112257, -0.9953061]], face: [[0, 1, 4, 2], [0, 2, 6, 3], [1, 5, 8, 4], [3, 6, 9, 7], [5, 7, 9, 8], [0, 3, 7, 5, 1], [2, 4, 8, 9, 6]] };\r\n    polyhedra[7] = { vertex: [[0, 0, 1.118034], [0.8944272, 0, 0.6708204], [-0.2236068, 0.8660254, 0.6708204], [-0.7826238, -0.4330127, 0.6708204], [0.6708204, 0.8660254, 0.2236068], [1.006231, -0.4330127, -0.2236068], [-1.006231, 0.4330127, 0.2236068], [-0.6708204, -0.8660254, -0.2236068], [0.7826238, 0.4330127, -0.6708204], [0.2236068, -0.8660254, -0.6708204], [-0.8944272, 0, -0.6708204], [0, 0, -1.118034]], face: [[0, 1, 4, 2], [0, 2, 6, 3], [1, 5, 8, 4], [3, 6, 10, 7], [5, 9, 11, 8], [7, 10, 11, 9], [0, 3, 7, 9, 5, 1], [2, 4, 8, 11, 10, 6]] };\r\n    polyhedra[8] = { vertex: [[-0.729665, 0.670121, 0.319155], [-0.655235, -0.29213, -0.754096], [-0.093922, -0.607123, 0.537818], [0.702196, 0.595691, 0.485187], [0.776626, -0.36656, -0.588064]], face: [[1, 4, 2], [0, 1, 2], [3, 0, 2], [4, 3, 2], [4, 1, 0, 3]] };\r\n    polyhedra[9] = { vertex: [[-0.868849, -0.100041, 0.61257], [-0.329458, 0.976099, 0.28078], [-0.26629, -0.013796, -0.477654], [-0.13392, -1.034115, 0.229829], [0.738834, 0.707117, -0.307018], [0.859683, -0.535264, -0.338508]], face: [[3, 0, 2], [5, 3, 2], [4, 5, 2], [1, 4, 2], [0, 1, 2], [0, 3, 5, 4, 1]] };\r\n    polyhedra[10] = { vertex: [[-0.610389, 0.243975, 0.531213], [-0.187812, -0.48795, -0.664016], [-0.187812, 0.9759, -0.664016], [0.187812, -0.9759, 0.664016], [0.798201, 0.243975, 0.132803]], face: [[1, 3, 0], [3, 4, 0], [3, 1, 4], [0, 2, 1], [0, 4, 2], [2, 4, 1]] };\r\n    polyhedra[11] = { vertex: [[-1.028778, 0.392027, -0.048786], [-0.640503, -0.646161, 0.621837], [-0.125162, -0.395663, -0.540059], [0.004683, 0.888447, -0.651988], [0.125161, 0.395663, 0.540059], [0.632925, -0.791376, 0.433102], [1.031672, 0.157063, -0.354165]], face: [[3, 2, 0], [2, 1, 0], [2, 5, 1], [0, 4, 3], [0, 1, 4], [4, 1, 5], [2, 3, 6], [3, 4, 6], [5, 2, 6], [4, 5, 6]] };\r\n    polyhedra[12] = { vertex: [[-0.669867, 0.334933, -0.529576], [-0.669867, 0.334933, 0.529577], [-0.4043, 1.212901, 0], [-0.334933, -0.669867, -0.529576], [-0.334933, -0.669867, 0.529577], [0.334933, 0.669867, -0.529576], [0.334933, 0.669867, 0.529577], [0.4043, -1.212901, 0], [0.669867, -0.334933, -0.529576], [0.669867, -0.334933, 0.529577]], face: [[8, 9, 7], [6, 5, 2], [3, 8, 7], [5, 0, 2], [4, 3, 7], [0, 1, 2], [9, 4, 7], [1, 6, 2], [9, 8, 5, 6], [8, 3, 0, 5], [3, 4, 1, 0], [4, 9, 6, 1]] };\r\n    polyhedra[13] = { vertex: [[-0.931836, 0.219976, -0.264632], [-0.636706, 0.318353, 0.692816], [-0.613483, -0.735083, -0.264632], [-0.326545, 0.979634, 0], [-0.318353, -0.636706, 0.692816], [-0.159176, 0.477529, -0.856368], [0.159176, -0.477529, -0.856368], [0.318353, 0.636706, 0.692816], [0.326545, -0.979634, 0], [0.613482, 0.735082, -0.264632], [0.636706, -0.318353, 0.692816], [0.931835, -0.219977, -0.264632]], face: [[11, 10, 8], [7, 9, 3], [6, 11, 8], [9, 5, 3], [2, 6, 8], [5, 0, 3], [4, 2, 8], [0, 1, 3], [10, 4, 8], [1, 7, 3], [10, 11, 9, 7], [11, 6, 5, 9], [6, 2, 0, 5], [2, 4, 1, 0], [4, 10, 7, 1]] };\r\n    polyhedra[14] = {\r\n        vertex: [[-0.93465, 0.300459, -0.271185], [-0.838689, -0.260219, -0.516017], [-0.711319, 0.717591, 0.128359], [-0.710334, -0.156922, 0.080946], [-0.599799, 0.556003, -0.725148], [-0.503838, -0.004675, -0.969981], [-0.487004, 0.26021, 0.48049], [-0.460089, -0.750282, -0.512622], [-0.376468, 0.973135, -0.325605], [-0.331735, -0.646985, 0.084342], [-0.254001, 0.831847, 0.530001], [-0.125239, -0.494738, -0.966586], [0.029622, 0.027949, 0.730817], [0.056536, -0.982543, -0.262295], [0.08085, 1.087391, 0.076037], [0.125583, -0.532729, 0.485984], [0.262625, 0.599586, 0.780328], [0.391387, -0.726999, -0.716259], [0.513854, -0.868287, 0.139347], [0.597475, 0.85513, 0.326364], [0.641224, 0.109523, 0.783723], [0.737185, -0.451155, 0.538891], [0.848705, -0.612742, -0.314616], [0.976075, 0.365067, 0.32976], [1.072036, -0.19561, 0.084927]],\r\n        face: [[15, 18, 21], [12, 20, 16], [6, 10, 2], [3, 0, 1], [9, 7, 13], [2, 8, 4, 0], [0, 4, 5, 1], [1, 5, 11, 7], [7, 11, 17, 13], [13, 17, 22, 18], [18, 22, 24, 21], [21, 24, 23, 20], [20, 23, 19, 16], [16, 19, 14, 10], [10, 14, 8, 2], [15, 9, 13, 18], [12, 15, 21, 20], [6, 12, 16, 10], [3, 6, 2, 0], [9, 3, 1, 7], [9, 15, 12, 6, 3], [22, 17, 11, 5, 4, 8, 14, 19, 23, 24]]\r\n    };\r\n\r\n    var type: number = options.type && (options.type < 0 || options.type >= polyhedra.length) ? 0 : options.type || 0;\r\n    var size = options.size;\r\n    var sizeX: number = options.sizeX || size || 1;\r\n    var sizeY: number = options.sizeY || size || 1;\r\n    var sizeZ: number = options.sizeZ || size || 1;\r\n    var data: { vertex: number[][], face: number[][], name?: string, category?: string } = options.custom || polyhedra[type];\r\n    var nbfaces = data.face.length;\r\n    var faceUV = options.faceUV || new Array(nbfaces);\r\n    var faceColors = options.faceColors;\r\n    var flat = (options.flat === undefined) ? true : options.flat;\r\n    var sideOrientation = (options.sideOrientation === 0) ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    var positions = new Array<number>();\r\n    var indices = new Array<number>();\r\n    var normals = new Array<number>();\r\n    var uvs = new Array<number>();\r\n    var colors = new Array<number>();\r\n    var index = 0;\r\n    var faceIdx = 0;  // face cursor in the array \"indexes\"\r\n    var indexes = new Array<number>();\r\n    var i = 0;\r\n    var f = 0;\r\n    var u: number, v: number, ang: number, x: number, y: number, tmp: number;\r\n\r\n    // default face colors and UV if undefined\r\n    if (flat) {\r\n        for (f = 0; f < nbfaces; f++) {\r\n            if (faceColors && faceColors[f] === undefined) {\r\n                faceColors[f] = new Color4(1, 1, 1, 1);\r\n            }\r\n            if (faceUV && faceUV[f] === undefined) {\r\n                faceUV[f] = new Vector4(0, 0, 1, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!flat) {\r\n\r\n        for (i = 0; i < data.vertex.length; i++) {\r\n            positions.push(data.vertex[i][0] * sizeX, data.vertex[i][1] * sizeY, data.vertex[i][2] * sizeZ);\r\n            uvs.push(0, 0);\r\n        }\r\n        for (f = 0; f < nbfaces; f++) {\r\n            for (i = 0; i < data.face[f].length - 2; i++) {\r\n                indices.push(data.face[f][0], data.face[f][i + 2], data.face[f][i + 1]);\r\n            }\r\n        }\r\n\r\n    } else {\r\n\r\n        for (f = 0; f < nbfaces; f++) {\r\n            var fl = data.face[f].length;  // number of vertices of the current face\r\n            ang = 2 * Math.PI / fl;\r\n            x = 0.5 * Math.tan(ang / 2);\r\n            y = 0.5;\r\n\r\n            // positions, uvs, colors\r\n            for (i = 0; i < fl; i++) {\r\n                // positions\r\n                positions.push(data.vertex[data.face[f][i]][0] * sizeX, data.vertex[data.face[f][i]][1] * sizeY, data.vertex[data.face[f][i]][2] * sizeZ);\r\n                indexes.push(index);\r\n                index++;\r\n                // uvs\r\n                u = faceUV[f].x + (faceUV[f].z - faceUV[f].x) * (0.5 + x);\r\n                v = faceUV[f].y + (faceUV[f].w - faceUV[f].y) * (y - 0.5);\r\n                uvs.push(u, v);\r\n                tmp = x * Math.cos(ang) - y * Math.sin(ang);\r\n                y = x * Math.sin(ang) + y * Math.cos(ang);\r\n                x = tmp;\r\n                // colors\r\n                if (faceColors) {\r\n                    colors.push(faceColors[f].r, faceColors[f].g, faceColors[f].b, faceColors[f].a);\r\n                }\r\n            }\r\n\r\n            // indices from indexes\r\n            for (i = 0; i < fl - 2; i++) {\r\n                indices.push(indexes[0 + faceIdx], indexes[i + 2 + faceIdx], indexes[i + 1 + faceIdx]);\r\n            }\r\n            faceIdx += fl;\r\n        }\r\n    }\r\n\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    var vertexData = new VertexData();\r\n    vertexData.positions = positions;\r\n    vertexData.indices = indices;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    if (faceColors && flat) {\r\n        vertexData.colors = colors;\r\n    }\r\n    return vertexData;\r\n};\r\n\r\nMesh.CreatePolyhedron = (name: string, options: { type?: number, size?: number, sizeX?: number, sizeY?: number, sizeZ?: number, custom?: any, faceUV?: Vector4[], faceColors?: Color4[], updatable?: boolean, sideOrientation?: number }, scene: Scene): Mesh => {\r\n    return PolyhedronBuilder.CreatePolyhedron(name, options, scene);\r\n};\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\r\nexport class PolyhedronBuilder {\r\n    /**\r\n     * Creates a polyhedron mesh\r\n     * * The parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embbeded types. Please refer to the type sheet in the tutorial to choose the wanted type\r\n     * * The parameter `size` (positive float, default 1) sets the polygon size\r\n     * * You can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value)\r\n     * * You can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overwrittes the parameter `type`\r\n     * * A `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\r\n     * * You can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`)\r\n     * * To understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors\r\n     * * The parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored\r\n     * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n     * @param name defines the name of the mesh\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns the polyhedron mesh\r\n     * @see https://doc.babylonjs.com/how_to/polyhedra_shapes\r\n     */\r\n    public static CreatePolyhedron(name: string, options: { type?: number, size?: number, sizeX?: number, sizeY?: number, sizeZ?: number, custom?: any, faceUV?: Vector4[], faceColors?: Color4[], flat?: boolean, updatable?: boolean, sideOrientation?: number, frontUVs?: Vector4, backUVs?: Vector4 }, scene: Nullable<Scene> = null): Mesh {\r\n        var polyhedron = new Mesh(name, scene);\r\n\r\n        options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n        polyhedron._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n        var vertexData = VertexData.CreatePolyhedron(options);\r\n\r\n        vertexData.applyToMesh(polyhedron, options.updatable);\r\n\r\n        return polyhedron;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}