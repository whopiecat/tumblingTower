{"ast":null,"code":"import { Scalar } from \"./math.scalar\";\nimport { Vector2, Vector3, Quaternion, Matrix } from \"./math.vector\";\nimport { Epsilon } from \"./math.constants\";\n/**\r\n * Defines potential orientation for back face culling\r\n */\n\nexport var Orientation;\n\n(function (Orientation) {\n  /**\r\n   * Clockwise\r\n   */\n  Orientation[Orientation[\"CW\"] = 0] = \"CW\";\n  /** Counter clockwise */\n\n  Orientation[Orientation[\"CCW\"] = 1] = \"CCW\";\n})(Orientation || (Orientation = {}));\n/** Class used to represent a Bezier curve */\n\n\nvar BezierCurve =\n/** @class */\nfunction () {\n  function BezierCurve() {}\n  /**\r\n   * Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats\r\n   * @param t defines the time\r\n   * @param x1 defines the left coordinate on X axis\r\n   * @param y1 defines the left coordinate on Y axis\r\n   * @param x2 defines the right coordinate on X axis\r\n   * @param y2 defines the right coordinate on Y axis\r\n   * @returns the interpolated value\r\n   */\n\n\n  BezierCurve.Interpolate = function (t, x1, y1, x2, y2) {\n    // Extract X (which is equal to time here)\n    var f0 = 1 - 3 * x2 + 3 * x1;\n    var f1 = 3 * x2 - 6 * x1;\n    var f2 = 3 * x1;\n    var refinedT = t;\n\n    for (var i = 0; i < 5; i++) {\n      var refinedT2 = refinedT * refinedT;\n      var refinedT3 = refinedT2 * refinedT;\n      var x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;\n      var slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2);\n      refinedT -= (x - t) * slope;\n      refinedT = Math.min(1, Math.max(0, refinedT));\n    } // Resolve cubic bezier for the given x\n\n\n    return 3 * Math.pow(1 - refinedT, 2) * refinedT * y1 + 3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 + Math.pow(refinedT, 3);\n  };\n\n  return BezierCurve;\n}();\n\nexport { BezierCurve };\n/**\r\n * Defines angle representation\r\n */\n\nvar Angle =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an Angle object of \"radians\" radians (float).\r\n   * @param radians the angle in radians\r\n   */\n  function Angle(radians) {\n    this._radians = radians;\n\n    if (this._radians < 0.0) {\n      this._radians += 2.0 * Math.PI;\n    }\n  }\n  /**\r\n   * Get value in degrees\r\n   * @returns the Angle value in degrees (float)\r\n   */\n\n\n  Angle.prototype.degrees = function () {\n    return this._radians * 180.0 / Math.PI;\n  };\n  /**\r\n   * Get value in radians\r\n   * @returns the Angle value in radians (float)\r\n   */\n\n\n  Angle.prototype.radians = function () {\n    return this._radians;\n  };\n  /**\r\n   * Gets a new Angle object valued with the gradient angle, in radians, of the line joining two points\r\n   * @param a defines first point as the origin\r\n   * @param b defines point\r\n   * @returns a new Angle\r\n   */\n\n\n  Angle.BetweenTwoPoints = function (a, b) {\n    var delta = b.subtract(a);\n    var theta = Math.atan2(delta.y, delta.x);\n    return new Angle(theta);\n  };\n  /**\r\n   * Gets a new Angle object from the given float in radians\r\n   * @param radians defines the angle value in radians\r\n   * @returns a new Angle\r\n   */\n\n\n  Angle.FromRadians = function (radians) {\n    return new Angle(radians);\n  };\n  /**\r\n   * Gets a new Angle object from the given float in degrees\r\n   * @param degrees defines the angle value in degrees\r\n   * @returns a new Angle\r\n   */\n\n\n  Angle.FromDegrees = function (degrees) {\n    return new Angle(degrees * Math.PI / 180.0);\n  };\n\n  return Angle;\n}();\n\nexport { Angle };\n/**\r\n * This represents an arc in a 2d space.\r\n */\n\nvar Arc2 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an Arc object from the three given points : start, middle and end.\r\n   * @param startPoint Defines the start point of the arc\r\n   * @param midPoint Defines the midlle point of the arc\r\n   * @param endPoint Defines the end point of the arc\r\n   */\n  function Arc2(\n  /** Defines the start point of the arc */\n  startPoint,\n  /** Defines the mid point of the arc */\n  midPoint,\n  /** Defines the end point of the arc */\n  endPoint) {\n    this.startPoint = startPoint;\n    this.midPoint = midPoint;\n    this.endPoint = endPoint;\n    var temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);\n    var startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2;\n    var midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2;\n    var det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) - (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);\n    this.centerPoint = new Vector2((startToMid * (midPoint.y - endPoint.y) - midToEnd * (startPoint.y - midPoint.y)) / det, ((startPoint.x - midPoint.x) * midToEnd - (midPoint.x - endPoint.x) * startToMid) / det);\n    this.radius = this.centerPoint.subtract(this.startPoint).length();\n    this.startAngle = Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);\n    var a1 = this.startAngle.degrees();\n    var a2 = Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();\n    var a3 = Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees(); // angles correction\n\n    if (a2 - a1 > +180.0) {\n      a2 -= 360.0;\n    }\n\n    if (a2 - a1 < -180.0) {\n      a2 += 360.0;\n    }\n\n    if (a3 - a2 > +180.0) {\n      a3 -= 360.0;\n    }\n\n    if (a3 - a2 < -180.0) {\n      a3 += 360.0;\n    }\n\n    this.orientation = a2 - a1 < 0 ? Orientation.CW : Orientation.CCW;\n    this.angle = Angle.FromDegrees(this.orientation === Orientation.CW ? a1 - a3 : a3 - a1);\n  }\n\n  return Arc2;\n}();\n\nexport { Arc2 };\n/**\r\n * Represents a 2D path made up of multiple 2D points\r\n */\n\nvar Path2 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a Path2 object from the starting 2D coordinates x and y.\r\n   * @param x the starting points x value\r\n   * @param y the starting points y value\r\n   */\n  function Path2(x, y) {\n    this._points = new Array();\n    this._length = 0.0;\n    /**\r\n     * If the path start and end point are the same\r\n     */\n\n    this.closed = false;\n\n    this._points.push(new Vector2(x, y));\n  }\n  /**\r\n   * Adds a new segment until the given coordinates (x, y) to the current Path2.\r\n   * @param x the added points x value\r\n   * @param y the added points y value\r\n   * @returns the updated Path2.\r\n   */\n\n\n  Path2.prototype.addLineTo = function (x, y) {\n    if (this.closed) {\n      return this;\n    }\n\n    var newPoint = new Vector2(x, y);\n    var previousPoint = this._points[this._points.length - 1];\n\n    this._points.push(newPoint);\n\n    this._length += newPoint.subtract(previousPoint).length();\n    return this;\n  };\n  /**\r\n   * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\r\n   * @param midX middle point x value\r\n   * @param midY middle point y value\r\n   * @param endX end point x value\r\n   * @param endY end point y value\r\n   * @param numberOfSegments (default: 36)\r\n   * @returns the updated Path2.\r\n   */\n\n\n  Path2.prototype.addArcTo = function (midX, midY, endX, endY, numberOfSegments) {\n    if (numberOfSegments === void 0) {\n      numberOfSegments = 36;\n    }\n\n    if (this.closed) {\n      return this;\n    }\n\n    var startPoint = this._points[this._points.length - 1];\n    var midPoint = new Vector2(midX, midY);\n    var endPoint = new Vector2(endX, endY);\n    var arc = new Arc2(startPoint, midPoint, endPoint);\n    var increment = arc.angle.radians() / numberOfSegments;\n\n    if (arc.orientation === Orientation.CW) {\n      increment *= -1;\n    }\n\n    var currentAngle = arc.startAngle.radians() + increment;\n\n    for (var i = 0; i < numberOfSegments; i++) {\n      var x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;\n      var y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;\n      this.addLineTo(x, y);\n      currentAngle += increment;\n    }\n\n    return this;\n  };\n  /**\r\n   * Closes the Path2.\r\n   * @returns the Path2.\r\n   */\n\n\n  Path2.prototype.close = function () {\n    this.closed = true;\n    return this;\n  };\n  /**\r\n   * Gets the sum of the distance between each sequential point in the path\r\n   * @returns the Path2 total length (float).\r\n   */\n\n\n  Path2.prototype.length = function () {\n    var result = this._length;\n\n    if (this.closed) {\n      var lastPoint = this._points[this._points.length - 1];\n      var firstPoint = this._points[0];\n      result += firstPoint.subtract(lastPoint).length();\n    }\n\n    return result;\n  };\n  /**\r\n   * Gets the points which construct the path\r\n   * @returns the Path2 internal array of points.\r\n   */\n\n\n  Path2.prototype.getPoints = function () {\n    return this._points;\n  };\n  /**\r\n   * Retreives the point at the distance aways from the starting point\r\n   * @param normalizedLengthPosition the length along the path to retreive the point from\r\n   * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\r\n   */\n\n\n  Path2.prototype.getPointAtLengthPosition = function (normalizedLengthPosition) {\n    if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {\n      return Vector2.Zero();\n    }\n\n    var lengthPosition = normalizedLengthPosition * this.length();\n    var previousOffset = 0;\n\n    for (var i = 0; i < this._points.length; i++) {\n      var j = (i + 1) % this._points.length;\n      var a = this._points[i];\n      var b = this._points[j];\n      var bToA = b.subtract(a);\n      var nextOffset = bToA.length() + previousOffset;\n\n      if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {\n        var dir = bToA.normalize();\n        var localOffset = lengthPosition - previousOffset;\n        return new Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset);\n      }\n\n      previousOffset = nextOffset;\n    }\n\n    return Vector2.Zero();\n  };\n  /**\r\n   * Creates a new path starting from an x and y position\r\n   * @param x starting x value\r\n   * @param y starting y value\r\n   * @returns a new Path2 starting at the coordinates (x, y).\r\n   */\n\n\n  Path2.StartingAt = function (x, y) {\n    return new Path2(x, y);\n  };\n\n  return Path2;\n}();\n\nexport { Path2 };\n/**\r\n * Represents a 3D path made up of multiple 3D points\r\n */\n\nvar Path3D =\n/** @class */\nfunction () {\n  /**\r\n   * new Path3D(path, normal, raw)\r\n   * Creates a Path3D. A Path3D is a logical math object, so not a mesh.\r\n   * please read the description in the tutorial : https://doc.babylonjs.com/how_to/how_to_use_path3d\r\n   * @param path an array of Vector3, the curve axis of the Path3D\r\n   * @param firstNormal (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\r\n   * @param raw (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.\r\n   * @param alignTangentsWithPath (optional, default false) : boolean, if true the tangents will be aligned with the path.\r\n   */\n  function Path3D(\n  /**\r\n   * an array of Vector3, the curve axis of the Path3D\r\n   */\n  path, firstNormal, raw, alignTangentsWithPath) {\n    if (firstNormal === void 0) {\n      firstNormal = null;\n    }\n\n    if (alignTangentsWithPath === void 0) {\n      alignTangentsWithPath = false;\n    }\n\n    this.path = path;\n    this._curve = new Array();\n    this._distances = new Array();\n    this._tangents = new Array();\n    this._normals = new Array();\n    this._binormals = new Array(); // holds interpolated point data\n\n    this._pointAtData = {\n      id: 0,\n      point: Vector3.Zero(),\n      previousPointArrayIndex: 0,\n      position: 0,\n      subPosition: 0,\n      interpolateReady: false,\n      interpolationMatrix: Matrix.Identity()\n    };\n\n    for (var p = 0; p < path.length; p++) {\n      this._curve[p] = path[p].clone(); // hard copy\n    }\n\n    this._raw = raw || false;\n    this._alignTangentsWithPath = alignTangentsWithPath;\n\n    this._compute(firstNormal, alignTangentsWithPath);\n  }\n  /**\r\n   * Returns the Path3D array of successive Vector3 designing its curve.\r\n   * @returns the Path3D array of successive Vector3 designing its curve.\r\n   */\n\n\n  Path3D.prototype.getCurve = function () {\n    return this._curve;\n  };\n  /**\r\n   * Returns the Path3D array of successive Vector3 designing its curve.\r\n   * @returns the Path3D array of successive Vector3 designing its curve.\r\n   */\n\n\n  Path3D.prototype.getPoints = function () {\n    return this._curve;\n  };\n  /**\r\n   * @returns the computed length (float) of the path.\r\n   */\n\n\n  Path3D.prototype.length = function () {\n    return this._distances[this._distances.length - 1];\n  };\n  /**\r\n   * Returns an array populated with tangent vectors on each Path3D curve point.\r\n   * @returns an array populated with tangent vectors on each Path3D curve point.\r\n   */\n\n\n  Path3D.prototype.getTangents = function () {\n    return this._tangents;\n  };\n  /**\r\n   * Returns an array populated with normal vectors on each Path3D curve point.\r\n   * @returns an array populated with normal vectors on each Path3D curve point.\r\n   */\n\n\n  Path3D.prototype.getNormals = function () {\n    return this._normals;\n  };\n  /**\r\n   * Returns an array populated with binormal vectors on each Path3D curve point.\r\n   * @returns an array populated with binormal vectors on each Path3D curve point.\r\n   */\n\n\n  Path3D.prototype.getBinormals = function () {\n    return this._binormals;\n  };\n  /**\r\n   * Returns an array populated with distances (float) of the i-th point from the first curve point.\r\n   * @returns an array populated with distances (float) of the i-th point from the first curve point.\r\n   */\n\n\n  Path3D.prototype.getDistances = function () {\n    return this._distances;\n  };\n  /**\r\n   * Returns an interpolated point along this path\r\n   * @param position the position of the point along this path, from 0.0 to 1.0\r\n   * @returns a new Vector3 as the point\r\n   */\n\n\n  Path3D.prototype.getPointAt = function (position) {\n    return this._updatePointAtData(position).point;\n  };\n  /**\r\n   * Returns the tangent vector of an interpolated Path3D curve point at the specified position along this path.\r\n   * @param position the position of the point along this path, from 0.0 to 1.0\r\n   * @param interpolated (optional, default false) : boolean, if true returns an interpolated tangent instead of the tangent of the previous path point.\r\n   * @returns a tangent vector corresponding to the interpolated Path3D curve point, if not interpolated, the tangent is taken from the precomputed tangents array.\r\n   */\n\n\n  Path3D.prototype.getTangentAt = function (position, interpolated) {\n    if (interpolated === void 0) {\n      interpolated = false;\n    }\n\n    this._updatePointAtData(position, interpolated);\n\n    return interpolated ? Vector3.TransformCoordinates(Vector3.Forward(), this._pointAtData.interpolationMatrix) : this._tangents[this._pointAtData.previousPointArrayIndex];\n  };\n  /**\r\n   * Returns the tangent vector of an interpolated Path3D curve point at the specified position along this path.\r\n   * @param position the position of the point along this path, from 0.0 to 1.0\r\n   * @param interpolated (optional, default false) : boolean, if true returns an interpolated normal instead of the normal of the previous path point.\r\n   * @returns a normal vector corresponding to the interpolated Path3D curve point, if not interpolated, the normal is taken from the precomputed normals array.\r\n   */\n\n\n  Path3D.prototype.getNormalAt = function (position, interpolated) {\n    if (interpolated === void 0) {\n      interpolated = false;\n    }\n\n    this._updatePointAtData(position, interpolated);\n\n    return interpolated ? Vector3.TransformCoordinates(Vector3.Right(), this._pointAtData.interpolationMatrix) : this._normals[this._pointAtData.previousPointArrayIndex];\n  };\n  /**\r\n   * Returns the binormal vector of an interpolated Path3D curve point at the specified position along this path.\r\n   * @param position the position of the point along this path, from 0.0 to 1.0\r\n   * @param interpolated (optional, default false) : boolean, if true returns an interpolated binormal instead of the binormal of the previous path point.\r\n   * @returns a binormal vector corresponding to the interpolated Path3D curve point, if not interpolated, the binormal is taken from the precomputed binormals array.\r\n   */\n\n\n  Path3D.prototype.getBinormalAt = function (position, interpolated) {\n    if (interpolated === void 0) {\n      interpolated = false;\n    }\n\n    this._updatePointAtData(position, interpolated);\n\n    return interpolated ? Vector3.TransformCoordinates(Vector3.UpReadOnly, this._pointAtData.interpolationMatrix) : this._binormals[this._pointAtData.previousPointArrayIndex];\n  };\n  /**\r\n   * Returns the distance (float) of an interpolated Path3D curve point at the specified position along this path.\r\n   * @param position the position of the point along this path, from 0.0 to 1.0\r\n   * @returns the distance of the interpolated Path3D curve point at the specified position along this path.\r\n   */\n\n\n  Path3D.prototype.getDistanceAt = function (position) {\n    return this.length() * position;\n  };\n  /**\r\n   * Returns the array index of the previous point of an interpolated point along this path\r\n   * @param position the position of the point to interpolate along this path, from 0.0 to 1.0\r\n   * @returns the array index\r\n   */\n\n\n  Path3D.prototype.getPreviousPointIndexAt = function (position) {\n    this._updatePointAtData(position);\n\n    return this._pointAtData.previousPointArrayIndex;\n  };\n  /**\r\n   * Returns the position of an interpolated point relative to the two path points it lies between, from 0.0 (point A) to 1.0 (point B)\r\n   * @param position the position of the point to interpolate along this path, from 0.0 to 1.0\r\n   * @returns the sub position\r\n   */\n\n\n  Path3D.prototype.getSubPositionAt = function (position) {\n    this._updatePointAtData(position);\n\n    return this._pointAtData.subPosition;\n  };\n  /**\r\n   * Returns the position of the closest virtual point on this path to an arbitrary Vector3, from 0.0 to 1.0\r\n   * @param target the vector of which to get the closest position to\r\n   * @returns the position of the closest virtual point on this path to the target vector\r\n   */\n\n\n  Path3D.prototype.getClosestPositionTo = function (target) {\n    var smallestDistance = Number.MAX_VALUE;\n    var closestPosition = 0.0;\n\n    for (var i = 0; i < this._curve.length - 1; i++) {\n      var point = this._curve[i + 0];\n\n      var tangent = this._curve[i + 1].subtract(point).normalize();\n\n      var subLength = this._distances[i + 1] - this._distances[i + 0];\n      var subPosition = Math.min(Math.max(Vector3.Dot(tangent, target.subtract(point).normalize()), 0.0) * Vector3.Distance(point, target) / subLength, 1.0);\n      var distance = Vector3.Distance(point.add(tangent.scale(subPosition * subLength)), target);\n\n      if (distance < smallestDistance) {\n        smallestDistance = distance;\n        closestPosition = (this._distances[i + 0] + subLength * subPosition) / this.length();\n      }\n    }\n\n    return closestPosition;\n  };\n  /**\r\n   * Returns a sub path (slice) of this path\r\n   * @param start the position of the fist path point, from 0.0 to 1.0, or a negative value, which will get wrapped around from the end of the path to 0.0 to 1.0 values\r\n   * @param end the position of the last path point, from 0.0 to 1.0, or a negative value, which will get wrapped around from the end of the path to 0.0 to 1.0 values\r\n   * @returns a sub path (slice) of this path\r\n   */\n\n\n  Path3D.prototype.slice = function (start, end) {\n    if (start === void 0) {\n      start = 0.0;\n    }\n\n    if (end === void 0) {\n      end = 1.0;\n    }\n\n    if (start < 0.0) {\n      start = 1 - start * -1.0 % 1.0;\n    }\n\n    if (end < 0.0) {\n      end = 1 - end * -1.0 % 1.0;\n    }\n\n    if (start > end) {\n      var _start = start;\n      start = end;\n      end = _start;\n    }\n\n    var curvePoints = this.getCurve();\n    var startPoint = this.getPointAt(start);\n    var startIndex = this.getPreviousPointIndexAt(start);\n    var endPoint = this.getPointAt(end);\n    var endIndex = this.getPreviousPointIndexAt(end) + 1;\n    var slicePoints = [];\n\n    if (start !== 0.0) {\n      startIndex++;\n      slicePoints.push(startPoint);\n    }\n\n    slicePoints.push.apply(slicePoints, curvePoints.slice(startIndex, endIndex));\n\n    if (end !== 1.0 || start === 1.0) {\n      slicePoints.push(endPoint);\n    }\n\n    return new Path3D(slicePoints, this.getNormalAt(start), this._raw, this._alignTangentsWithPath);\n  };\n  /**\r\n   * Forces the Path3D tangent, normal, binormal and distance recomputation.\r\n   * @param path path which all values are copied into the curves points\r\n   * @param firstNormal which should be projected onto the curve\r\n   * @param alignTangentsWithPath (optional, default false) : boolean, if true the tangents will be aligned with the path\r\n   * @returns the same object updated.\r\n   */\n\n\n  Path3D.prototype.update = function (path, firstNormal, alignTangentsWithPath) {\n    if (firstNormal === void 0) {\n      firstNormal = null;\n    }\n\n    if (alignTangentsWithPath === void 0) {\n      alignTangentsWithPath = false;\n    }\n\n    for (var p = 0; p < path.length; p++) {\n      this._curve[p].x = path[p].x;\n      this._curve[p].y = path[p].y;\n      this._curve[p].z = path[p].z;\n    }\n\n    this._compute(firstNormal, alignTangentsWithPath);\n\n    return this;\n  }; // private function compute() : computes tangents, normals and binormals\n\n\n  Path3D.prototype._compute = function (firstNormal, alignTangentsWithPath) {\n    if (alignTangentsWithPath === void 0) {\n      alignTangentsWithPath = false;\n    }\n\n    var l = this._curve.length;\n\n    if (l < 2) {\n      return;\n    } // first and last tangents\n\n\n    this._tangents[0] = this._getFirstNonNullVector(0);\n\n    if (!this._raw) {\n      this._tangents[0].normalize();\n    }\n\n    this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);\n\n    if (!this._raw) {\n      this._tangents[l - 1].normalize();\n    } // normals and binormals at first point : arbitrary vector with _normalVector()\n\n\n    var tg0 = this._tangents[0];\n\n    var pp0 = this._normalVector(tg0, firstNormal);\n\n    this._normals[0] = pp0;\n\n    if (!this._raw) {\n      this._normals[0].normalize();\n    }\n\n    this._binormals[0] = Vector3.Cross(tg0, this._normals[0]);\n\n    if (!this._raw) {\n      this._binormals[0].normalize();\n    }\n\n    this._distances[0] = 0.0; // normals and binormals : next points\n\n    var prev; // previous vector (segment)\n\n    var cur; // current vector (segment)\n\n    var curTang; // current tangent\n    // previous normal\n\n    var prevNor; // previous normal\n\n    var prevBinor; // previous binormal\n\n    for (var i = 1; i < l; i++) {\n      // tangents\n      prev = this._getLastNonNullVector(i);\n\n      if (i < l - 1) {\n        cur = this._getFirstNonNullVector(i);\n        this._tangents[i] = alignTangentsWithPath ? cur : prev.add(cur);\n\n        this._tangents[i].normalize();\n      }\n\n      this._distances[i] = this._distances[i - 1] + this._curve[i].subtract(this._curve[i - 1]).length(); // normals and binormals\n      // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html\n\n      curTang = this._tangents[i];\n      prevBinor = this._binormals[i - 1];\n      this._normals[i] = Vector3.Cross(prevBinor, curTang);\n\n      if (!this._raw) {\n        if (this._normals[i].length() === 0) {\n          prevNor = this._normals[i - 1];\n          this._normals[i] = prevNor.clone();\n        } else {\n          this._normals[i].normalize();\n        }\n      }\n\n      this._binormals[i] = Vector3.Cross(curTang, this._normals[i]);\n\n      if (!this._raw) {\n        this._binormals[i].normalize();\n      }\n    }\n\n    this._pointAtData.id = NaN;\n  }; // private function getFirstNonNullVector(index)\n  // returns the first non null vector from index : curve[index + N].subtract(curve[index])\n\n\n  Path3D.prototype._getFirstNonNullVector = function (index) {\n    var i = 1;\n\n    var nNVector = this._curve[index + i].subtract(this._curve[index]);\n\n    while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {\n      i++;\n      nNVector = this._curve[index + i].subtract(this._curve[index]);\n    }\n\n    return nNVector;\n  }; // private function getLastNonNullVector(index)\n  // returns the last non null vector from index : curve[index].subtract(curve[index - N])\n\n\n  Path3D.prototype._getLastNonNullVector = function (index) {\n    var i = 1;\n\n    var nLVector = this._curve[index].subtract(this._curve[index - i]);\n\n    while (nLVector.length() === 0 && index > i + 1) {\n      i++;\n      nLVector = this._curve[index].subtract(this._curve[index - i]);\n    }\n\n    return nLVector;\n  }; // private function normalVector(v0, vt, va) :\n  // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane\n  // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0\n\n\n  Path3D.prototype._normalVector = function (vt, va) {\n    var normal0;\n    var tgl = vt.length();\n\n    if (tgl === 0.0) {\n      tgl = 1.0;\n    }\n\n    if (va === undefined || va === null) {\n      var point;\n\n      if (!Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, Epsilon)) {\n        // search for a point in the plane\n        point = new Vector3(0.0, -1.0, 0.0);\n      } else if (!Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, Epsilon)) {\n        point = new Vector3(1.0, 0.0, 0.0);\n      } else if (!Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, Epsilon)) {\n        point = new Vector3(0.0, 0.0, 1.0);\n      } else {\n        point = Vector3.Zero();\n      }\n\n      normal0 = Vector3.Cross(vt, point);\n    } else {\n      normal0 = Vector3.Cross(vt, va);\n      Vector3.CrossToRef(normal0, vt, normal0);\n    }\n\n    normal0.normalize();\n    return normal0;\n  };\n  /**\r\n   * Updates the point at data for an interpolated point along this curve\r\n   * @param position the position of the point along this curve, from 0.0 to 1.0\r\n   * @interpolateTNB wether to compute the interpolated tangent, normal and binormal\r\n   * @returns the (updated) point at data\r\n   */\n\n\n  Path3D.prototype._updatePointAtData = function (position, interpolateTNB) {\n    if (interpolateTNB === void 0) {\n      interpolateTNB = false;\n    } // set an id for caching the result\n\n\n    if (this._pointAtData.id === position) {\n      if (!this._pointAtData.interpolateReady) {\n        this._updateInterpolationMatrix();\n      }\n\n      return this._pointAtData;\n    } else {\n      this._pointAtData.id = position;\n    }\n\n    var curvePoints = this.getPoints(); // clamp position between 0.0 and 1.0\n\n    if (position <= 0.0) {\n      return this._setPointAtData(0.0, 0.0, curvePoints[0], 0, interpolateTNB);\n    } else if (position >= 1.0) {\n      return this._setPointAtData(1.0, 1.0, curvePoints[curvePoints.length - 1], curvePoints.length - 1, interpolateTNB);\n    }\n\n    var previousPoint = curvePoints[0];\n    var currentPoint;\n    var currentLength = 0.0;\n    var targetLength = position * this.length();\n\n    for (var i = 1; i < curvePoints.length; i++) {\n      currentPoint = curvePoints[i];\n      var distance = Vector3.Distance(previousPoint, currentPoint);\n      currentLength += distance;\n\n      if (currentLength === targetLength) {\n        return this._setPointAtData(position, 1.0, currentPoint, i, interpolateTNB);\n      } else if (currentLength > targetLength) {\n        var toLength = currentLength - targetLength;\n        var diff = toLength / distance;\n        var dir = previousPoint.subtract(currentPoint);\n        var point = currentPoint.add(dir.scaleInPlace(diff));\n        return this._setPointAtData(position, 1 - diff, point, i - 1, interpolateTNB);\n      }\n\n      previousPoint = currentPoint;\n    }\n\n    return this._pointAtData;\n  };\n  /**\r\n   * Updates the point at data from the specified parameters\r\n   * @param position where along the path the interpolated point is, from 0.0 to 1.0\r\n   * @param point the interpolated point\r\n   * @param parentIndex the index of an existing curve point that is on, or else positionally the first behind, the interpolated point\r\n   */\n\n\n  Path3D.prototype._setPointAtData = function (position, subPosition, point, parentIndex, interpolateTNB) {\n    this._pointAtData.point = point;\n    this._pointAtData.position = position;\n    this._pointAtData.subPosition = subPosition;\n    this._pointAtData.previousPointArrayIndex = parentIndex;\n    this._pointAtData.interpolateReady = interpolateTNB;\n\n    if (interpolateTNB) {\n      this._updateInterpolationMatrix();\n    }\n\n    return this._pointAtData;\n  };\n  /**\r\n   * Updates the point at interpolation matrix for the tangents, normals and binormals\r\n   */\n\n\n  Path3D.prototype._updateInterpolationMatrix = function () {\n    this._pointAtData.interpolationMatrix = Matrix.Identity();\n    var parentIndex = this._pointAtData.previousPointArrayIndex;\n\n    if (parentIndex !== this._tangents.length - 1) {\n      var index = parentIndex + 1;\n\n      var tangentFrom = this._tangents[parentIndex].clone();\n\n      var normalFrom = this._normals[parentIndex].clone();\n\n      var binormalFrom = this._binormals[parentIndex].clone();\n\n      var tangentTo = this._tangents[index].clone();\n\n      var normalTo = this._normals[index].clone();\n\n      var binormalTo = this._binormals[index].clone();\n\n      var quatFrom = Quaternion.RotationQuaternionFromAxis(normalFrom, binormalFrom, tangentFrom);\n      var quatTo = Quaternion.RotationQuaternionFromAxis(normalTo, binormalTo, tangentTo);\n      var quatAt = Quaternion.Slerp(quatFrom, quatTo, this._pointAtData.subPosition);\n      quatAt.toRotationMatrix(this._pointAtData.interpolationMatrix);\n    }\n  };\n\n  return Path3D;\n}();\n\nexport { Path3D };\n/**\r\n * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\r\n * A Curve3 is designed from a series of successive Vector3.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_curve3\r\n */\n\nvar Curve3 =\n/** @class */\nfunction () {\n  /**\r\n   * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\r\n   * A Curve3 is designed from a series of successive Vector3.\r\n   * Tuto : https://doc.babylonjs.com/how_to/how_to_use_curve3#curve3-object\r\n   * @param points points which make up the curve\r\n   */\n  function Curve3(points) {\n    this._length = 0.0;\n    this._points = points;\n    this._length = this._computeLength(points);\n  }\n  /**\r\n   * Returns a Curve3 object along a Quadratic Bezier curve : https://doc.babylonjs.com/how_to/how_to_use_curve3#quadratic-bezier-curve\r\n   * @param v0 (Vector3) the origin point of the Quadratic Bezier\r\n   * @param v1 (Vector3) the control point\r\n   * @param v2 (Vector3) the end point of the Quadratic Bezier\r\n   * @param nbPoints (integer) the wanted number of points in the curve\r\n   * @returns the created Curve3\r\n   */\n\n\n  Curve3.CreateQuadraticBezier = function (v0, v1, v2, nbPoints) {\n    nbPoints = nbPoints > 2 ? nbPoints : 3;\n    var bez = new Array();\n\n    var equation = function (t, val0, val1, val2) {\n      var res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\n      return res;\n    };\n\n    for (var i = 0; i <= nbPoints; i++) {\n      bez.push(new Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));\n    }\n\n    return new Curve3(bez);\n  };\n  /**\r\n   * Returns a Curve3 object along a Cubic Bezier curve : https://doc.babylonjs.com/how_to/how_to_use_curve3#cubic-bezier-curve\r\n   * @param v0 (Vector3) the origin point of the Cubic Bezier\r\n   * @param v1 (Vector3) the first control point\r\n   * @param v2 (Vector3) the second control point\r\n   * @param v3 (Vector3) the end point of the Cubic Bezier\r\n   * @param nbPoints (integer) the wanted number of points in the curve\r\n   * @returns the created Curve3\r\n   */\n\n\n  Curve3.CreateCubicBezier = function (v0, v1, v2, v3, nbPoints) {\n    nbPoints = nbPoints > 3 ? nbPoints : 4;\n    var bez = new Array();\n\n    var equation = function (t, val0, val1, val2, val3) {\n      var res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 + 3.0 * t * (1.0 - t) * (1.0 - t) * val1 + 3.0 * t * t * (1.0 - t) * val2 + t * t * t * val3;\n      return res;\n    };\n\n    for (var i = 0; i <= nbPoints; i++) {\n      bez.push(new Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));\n    }\n\n    return new Curve3(bez);\n  };\n  /**\r\n   * Returns a Curve3 object along a Hermite Spline curve : https://doc.babylonjs.com/how_to/how_to_use_curve3#hermite-spline\r\n   * @param p1 (Vector3) the origin point of the Hermite Spline\r\n   * @param t1 (Vector3) the tangent vector at the origin point\r\n   * @param p2 (Vector3) the end point of the Hermite Spline\r\n   * @param t2 (Vector3) the tangent vector at the end point\r\n   * @param nbPoints (integer) the wanted number of points in the curve\r\n   * @returns the created Curve3\r\n   */\n\n\n  Curve3.CreateHermiteSpline = function (p1, t1, p2, t2, nbPoints) {\n    var hermite = new Array();\n    var step = 1.0 / nbPoints;\n\n    for (var i = 0; i <= nbPoints; i++) {\n      hermite.push(Vector3.Hermite(p1, t1, p2, t2, i * step));\n    }\n\n    return new Curve3(hermite);\n  };\n  /**\r\n   * Returns a Curve3 object along a CatmullRom Spline curve :\r\n   * @param points (array of Vector3) the points the spline must pass through. At least, four points required\r\n   * @param nbPoints (integer) the wanted number of points between each curve control points\r\n   * @param closed (boolean) optional with default false, when true forms a closed loop from the points\r\n   * @returns the created Curve3\r\n   */\n\n\n  Curve3.CreateCatmullRomSpline = function (points, nbPoints, closed) {\n    var catmullRom = new Array();\n    var step = 1.0 / nbPoints;\n    var amount = 0.0;\n\n    if (closed) {\n      var pointsCount = points.length;\n\n      for (var i = 0; i < pointsCount; i++) {\n        amount = 0;\n\n        for (var c = 0; c < nbPoints; c++) {\n          catmullRom.push(Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount));\n          amount += step;\n        }\n      }\n\n      catmullRom.push(catmullRom[0]);\n    } else {\n      var totalPoints = new Array();\n      totalPoints.push(points[0].clone());\n      Array.prototype.push.apply(totalPoints, points);\n      totalPoints.push(points[points.length - 1].clone());\n\n      for (var i = 0; i < totalPoints.length - 3; i++) {\n        amount = 0;\n\n        for (var c = 0; c < nbPoints; c++) {\n          catmullRom.push(Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\n          amount += step;\n        }\n      }\n\n      i--;\n      catmullRom.push(Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\n    }\n\n    return new Curve3(catmullRom);\n  };\n  /**\r\n   * @returns the Curve3 stored array of successive Vector3\r\n   */\n\n\n  Curve3.prototype.getPoints = function () {\n    return this._points;\n  };\n  /**\r\n   * @returns the computed length (float) of the curve.\r\n   */\n\n\n  Curve3.prototype.length = function () {\n    return this._length;\n  };\n  /**\r\n   * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\r\n   * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.\r\n   * curveA and curveB keep unchanged.\r\n   * @param curve the curve to continue from this curve\r\n   * @returns the newly constructed curve\r\n   */\n\n\n  Curve3.prototype.continue = function (curve) {\n    var lastPoint = this._points[this._points.length - 1];\n\n    var continuedPoints = this._points.slice();\n\n    var curvePoints = curve.getPoints();\n\n    for (var i = 1; i < curvePoints.length; i++) {\n      continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));\n    }\n\n    var continuedCurve = new Curve3(continuedPoints);\n    return continuedCurve;\n  };\n\n  Curve3.prototype._computeLength = function (path) {\n    var l = 0;\n\n    for (var i = 1; i < path.length; i++) {\n      l += path[i].subtract(path[i - 1]).length();\n    }\n\n    return l;\n  };\n\n  return Curve3;\n}();\n\nexport { Curve3 };","map":{"version":3,"sources":["../../../sourceES6/core/Maths/math.path.ts"],"names":[],"mappings":"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","sourcesContent":["import { DeepImmutable, Nullable } from \"../types\";\r\nimport { Scalar } from \"./math.scalar\";\r\nimport { Vector2, Vector3, Quaternion, Matrix } from \"./math.vector\";\r\nimport { Epsilon } from \"./math.constants\";\r\n\r\n/**\r\n * Defines potential orientation for back face culling\r\n */\r\nexport enum Orientation {\r\n    /**\r\n     * Clockwise\r\n     */\r\n    CW = 0,\r\n    /** Counter clockwise */\r\n    CCW = 1,\r\n}\r\n\r\n/** Class used to represent a Bezier curve */\r\nexport class BezierCurve {\r\n    /**\r\n     * Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats\r\n     * @param t defines the time\r\n     * @param x1 defines the left coordinate on X axis\r\n     * @param y1 defines the left coordinate on Y axis\r\n     * @param x2 defines the right coordinate on X axis\r\n     * @param y2 defines the right coordinate on Y axis\r\n     * @returns the interpolated value\r\n     */\r\n    public static Interpolate(t: number, x1: number, y1: number, x2: number, y2: number): number {\r\n        // Extract X (which is equal to time here)\r\n        var f0 = 1 - 3 * x2 + 3 * x1;\r\n        var f1 = 3 * x2 - 6 * x1;\r\n        var f2 = 3 * x1;\r\n\r\n        var refinedT = t;\r\n        for (var i = 0; i < 5; i++) {\r\n            var refinedT2 = refinedT * refinedT;\r\n            var refinedT3 = refinedT2 * refinedT;\r\n\r\n            var x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;\r\n            var slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2);\r\n            refinedT -= (x - t) * slope;\r\n            refinedT = Math.min(1, Math.max(0, refinedT));\r\n        }\r\n\r\n        // Resolve cubic bezier for the given x\r\n        return 3 * Math.pow(1 - refinedT, 2) * refinedT * y1 + 3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 + Math.pow(refinedT, 3);\r\n    }\r\n}\r\n\r\n/**\r\n * Defines angle representation\r\n */\r\nexport class Angle {\r\n    private _radians: number;\r\n\r\n    /**\r\n     * Creates an Angle object of \"radians\" radians (float).\r\n     * @param radians the angle in radians\r\n     */\r\n    constructor(radians: number) {\r\n        this._radians = radians;\r\n        if (this._radians < 0.0) {\r\n            this._radians += 2.0 * Math.PI;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get value in degrees\r\n     * @returns the Angle value in degrees (float)\r\n     */\r\n    public degrees() {\r\n        return (this._radians * 180.0) / Math.PI;\r\n    }\r\n\r\n    /**\r\n     * Get value in radians\r\n     * @returns the Angle value in radians (float)\r\n     */\r\n    public radians() {\r\n        return this._radians;\r\n    }\r\n\r\n    /**\r\n     * Gets a new Angle object valued with the gradient angle, in radians, of the line joining two points\r\n     * @param a defines first point as the origin\r\n     * @param b defines point\r\n     * @returns a new Angle\r\n     */\r\n    public static BetweenTwoPoints(a: DeepImmutable<Vector2>, b: DeepImmutable<Vector2>): Angle {\r\n        var delta = b.subtract(a);\r\n        var theta = Math.atan2(delta.y, delta.x);\r\n        return new Angle(theta);\r\n    }\r\n\r\n    /**\r\n     * Gets a new Angle object from the given float in radians\r\n     * @param radians defines the angle value in radians\r\n     * @returns a new Angle\r\n     */\r\n    public static FromRadians(radians: number): Angle {\r\n        return new Angle(radians);\r\n    }\r\n    /**\r\n     * Gets a new Angle object from the given float in degrees\r\n     * @param degrees defines the angle value in degrees\r\n     * @returns a new Angle\r\n     */\r\n    public static FromDegrees(degrees: number): Angle {\r\n        return new Angle((degrees * Math.PI) / 180.0);\r\n    }\r\n}\r\n\r\n/**\r\n * This represents an arc in a 2d space.\r\n */\r\nexport class Arc2 {\r\n    /**\r\n     * Defines the center point of the arc.\r\n     */\r\n    public centerPoint: Vector2;\r\n    /**\r\n     * Defines the radius of the arc.\r\n     */\r\n    public radius: number;\r\n    /**\r\n     * Defines the angle of the arc (from mid point to end point).\r\n     */\r\n    public angle: Angle;\r\n    /**\r\n     * Defines the start angle of the arc (from start point to middle point).\r\n     */\r\n    public startAngle: Angle;\r\n    /**\r\n     * Defines the orientation of the arc (clock wise/counter clock wise).\r\n     */\r\n    public orientation: Orientation;\r\n\r\n    /**\r\n     * Creates an Arc object from the three given points : start, middle and end.\r\n     * @param startPoint Defines the start point of the arc\r\n     * @param midPoint Defines the midlle point of the arc\r\n     * @param endPoint Defines the end point of the arc\r\n     */\r\n    constructor(\r\n        /** Defines the start point of the arc */\r\n        public startPoint: Vector2,\r\n        /** Defines the mid point of the arc */\r\n        public midPoint: Vector2,\r\n        /** Defines the end point of the arc */\r\n        public endPoint: Vector2\r\n    ) {\r\n        var temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);\r\n        var startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2;\r\n        var midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2;\r\n        var det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) - (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);\r\n\r\n        this.centerPoint = new Vector2((startToMid * (midPoint.y - endPoint.y) - midToEnd * (startPoint.y - midPoint.y)) / det, ((startPoint.x - midPoint.x) * midToEnd - (midPoint.x - endPoint.x) * startToMid) / det);\r\n\r\n        this.radius = this.centerPoint.subtract(this.startPoint).length();\r\n\r\n        this.startAngle = Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);\r\n\r\n        var a1 = this.startAngle.degrees();\r\n        var a2 = Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();\r\n        var a3 = Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();\r\n\r\n        // angles correction\r\n        if (a2 - a1 > +180.0) {\r\n            a2 -= 360.0;\r\n        }\r\n        if (a2 - a1 < -180.0) {\r\n            a2 += 360.0;\r\n        }\r\n        if (a3 - a2 > +180.0) {\r\n            a3 -= 360.0;\r\n        }\r\n        if (a3 - a2 < -180.0) {\r\n            a3 += 360.0;\r\n        }\r\n\r\n        this.orientation = a2 - a1 < 0 ? Orientation.CW : Orientation.CCW;\r\n        this.angle = Angle.FromDegrees(this.orientation === Orientation.CW ? a1 - a3 : a3 - a1);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a 2D path made up of multiple 2D points\r\n */\r\nexport class Path2 {\r\n    private _points = new Array<Vector2>();\r\n    private _length = 0.0;\r\n\r\n    /**\r\n     * If the path start and end point are the same\r\n     */\r\n    public closed = false;\r\n\r\n    /**\r\n     * Creates a Path2 object from the starting 2D coordinates x and y.\r\n     * @param x the starting points x value\r\n     * @param y the starting points y value\r\n     */\r\n    constructor(x: number, y: number) {\r\n        this._points.push(new Vector2(x, y));\r\n    }\r\n\r\n    /**\r\n     * Adds a new segment until the given coordinates (x, y) to the current Path2.\r\n     * @param x the added points x value\r\n     * @param y the added points y value\r\n     * @returns the updated Path2.\r\n     */\r\n    public addLineTo(x: number, y: number): Path2 {\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n        var newPoint = new Vector2(x, y);\r\n        var previousPoint = this._points[this._points.length - 1];\r\n        this._points.push(newPoint);\r\n        this._length += newPoint.subtract(previousPoint).length();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\r\n     * @param midX middle point x value\r\n     * @param midY middle point y value\r\n     * @param endX end point x value\r\n     * @param endY end point y value\r\n     * @param numberOfSegments (default: 36)\r\n     * @returns the updated Path2.\r\n     */\r\n    public addArcTo(midX: number, midY: number, endX: number, endY: number, numberOfSegments = 36): Path2 {\r\n        if (this.closed) {\r\n            return this;\r\n        }\r\n        var startPoint = this._points[this._points.length - 1];\r\n        var midPoint = new Vector2(midX, midY);\r\n        var endPoint = new Vector2(endX, endY);\r\n\r\n        var arc = new Arc2(startPoint, midPoint, endPoint);\r\n\r\n        var increment = arc.angle.radians() / numberOfSegments;\r\n        if (arc.orientation === Orientation.CW) {\r\n            increment *= -1;\r\n        }\r\n        var currentAngle = arc.startAngle.radians() + increment;\r\n\r\n        for (var i = 0; i < numberOfSegments; i++) {\r\n            var x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;\r\n            var y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;\r\n            this.addLineTo(x, y);\r\n            currentAngle += increment;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Closes the Path2.\r\n     * @returns the Path2.\r\n     */\r\n    public close(): Path2 {\r\n        this.closed = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Gets the sum of the distance between each sequential point in the path\r\n     * @returns the Path2 total length (float).\r\n     */\r\n    public length(): number {\r\n        var result = this._length;\r\n\r\n        if (this.closed) {\r\n            var lastPoint = this._points[this._points.length - 1];\r\n            var firstPoint = this._points[0];\r\n            result += firstPoint.subtract(lastPoint).length();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the points which construct the path\r\n     * @returns the Path2 internal array of points.\r\n     */\r\n    public getPoints(): Vector2[] {\r\n        return this._points;\r\n    }\r\n\r\n    /**\r\n     * Retreives the point at the distance aways from the starting point\r\n     * @param normalizedLengthPosition the length along the path to retreive the point from\r\n     * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\r\n     */\r\n    public getPointAtLengthPosition(normalizedLengthPosition: number): Vector2 {\r\n        if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {\r\n            return Vector2.Zero();\r\n        }\r\n\r\n        var lengthPosition = normalizedLengthPosition * this.length();\r\n\r\n        var previousOffset = 0;\r\n        for (var i = 0; i < this._points.length; i++) {\r\n            var j = (i + 1) % this._points.length;\r\n\r\n            var a = this._points[i];\r\n            var b = this._points[j];\r\n            var bToA = b.subtract(a);\r\n\r\n            var nextOffset = bToA.length() + previousOffset;\r\n            if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {\r\n                var dir = bToA.normalize();\r\n                var localOffset = lengthPosition - previousOffset;\r\n\r\n                return new Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset);\r\n            }\r\n            previousOffset = nextOffset;\r\n        }\r\n\r\n        return Vector2.Zero();\r\n    }\r\n\r\n    /**\r\n     * Creates a new path starting from an x and y position\r\n     * @param x starting x value\r\n     * @param y starting y value\r\n     * @returns a new Path2 starting at the coordinates (x, y).\r\n     */\r\n    public static StartingAt(x: number, y: number): Path2 {\r\n        return new Path2(x, y);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a 3D path made up of multiple 3D points\r\n */\r\nexport class Path3D {\r\n    private _curve = new Array<Vector3>();\r\n    private _distances = new Array<number>();\r\n    private _tangents = new Array<Vector3>();\r\n    private _normals = new Array<Vector3>();\r\n    private _binormals = new Array<Vector3>();\r\n    private _raw: boolean;\r\n    private _alignTangentsWithPath: boolean;\r\n\r\n    // holds interpolated point data\r\n    private readonly _pointAtData = {\r\n        id: 0,\r\n        point: Vector3.Zero(),\r\n        previousPointArrayIndex: 0,\r\n\r\n        position: 0,\r\n        subPosition: 0,\r\n\r\n        interpolateReady: false,\r\n        interpolationMatrix: Matrix.Identity(),\r\n    };\r\n\r\n    /**\r\n     * new Path3D(path, normal, raw)\r\n     * Creates a Path3D. A Path3D is a logical math object, so not a mesh.\r\n     * please read the description in the tutorial : https://doc.babylonjs.com/how_to/how_to_use_path3d\r\n     * @param path an array of Vector3, the curve axis of the Path3D\r\n     * @param firstNormal (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\r\n     * @param raw (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.\r\n     * @param alignTangentsWithPath (optional, default false) : boolean, if true the tangents will be aligned with the path.\r\n     */\r\n    constructor(\r\n        /**\r\n         * an array of Vector3, the curve axis of the Path3D\r\n         */\r\n        public path: Vector3[],\r\n        firstNormal: Nullable<Vector3> = null,\r\n        raw?: boolean,\r\n        alignTangentsWithPath = false\r\n    ) {\r\n        for (var p = 0; p < path.length; p++) {\r\n            this._curve[p] = path[p].clone(); // hard copy\r\n        }\r\n        this._raw = raw || false;\r\n        this._alignTangentsWithPath = alignTangentsWithPath;\r\n        this._compute(firstNormal, alignTangentsWithPath);\r\n    }\r\n\r\n    /**\r\n     * Returns the Path3D array of successive Vector3 designing its curve.\r\n     * @returns the Path3D array of successive Vector3 designing its curve.\r\n     */\r\n    public getCurve(): Vector3[] {\r\n        return this._curve;\r\n    }\r\n\r\n    /**\r\n     * Returns the Path3D array of successive Vector3 designing its curve.\r\n     * @returns the Path3D array of successive Vector3 designing its curve.\r\n     */\r\n    public getPoints(): Vector3[] {\r\n        return this._curve;\r\n    }\r\n\r\n    /**\r\n     * @returns the computed length (float) of the path.\r\n     */\r\n    public length() {\r\n        return this._distances[this._distances.length - 1];\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with tangent vectors on each Path3D curve point.\r\n     * @returns an array populated with tangent vectors on each Path3D curve point.\r\n     */\r\n    public getTangents(): Vector3[] {\r\n        return this._tangents;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with normal vectors on each Path3D curve point.\r\n     * @returns an array populated with normal vectors on each Path3D curve point.\r\n     */\r\n    public getNormals(): Vector3[] {\r\n        return this._normals;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with binormal vectors on each Path3D curve point.\r\n     * @returns an array populated with binormal vectors on each Path3D curve point.\r\n     */\r\n    public getBinormals(): Vector3[] {\r\n        return this._binormals;\r\n    }\r\n\r\n    /**\r\n     * Returns an array populated with distances (float) of the i-th point from the first curve point.\r\n     * @returns an array populated with distances (float) of the i-th point from the first curve point.\r\n     */\r\n    public getDistances(): number[] {\r\n        return this._distances;\r\n    }\r\n\r\n    /**\r\n     * Returns an interpolated point along this path\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @returns a new Vector3 as the point\r\n     */\r\n    public getPointAt(position: number): Vector3 {\r\n        return this._updatePointAtData(position).point;\r\n    }\r\n\r\n    /**\r\n     * Returns the tangent vector of an interpolated Path3D curve point at the specified position along this path.\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @param interpolated (optional, default false) : boolean, if true returns an interpolated tangent instead of the tangent of the previous path point.\r\n     * @returns a tangent vector corresponding to the interpolated Path3D curve point, if not interpolated, the tangent is taken from the precomputed tangents array.\r\n     */\r\n    public getTangentAt(position: number, interpolated = false): Vector3 {\r\n        this._updatePointAtData(position, interpolated);\r\n        return interpolated ? Vector3.TransformCoordinates(Vector3.Forward(), this._pointAtData.interpolationMatrix) : this._tangents[this._pointAtData.previousPointArrayIndex];\r\n    }\r\n\r\n    /**\r\n     * Returns the tangent vector of an interpolated Path3D curve point at the specified position along this path.\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @param interpolated (optional, default false) : boolean, if true returns an interpolated normal instead of the normal of the previous path point.\r\n     * @returns a normal vector corresponding to the interpolated Path3D curve point, if not interpolated, the normal is taken from the precomputed normals array.\r\n     */\r\n    public getNormalAt(position: number, interpolated = false): Vector3 {\r\n        this._updatePointAtData(position, interpolated);\r\n        return interpolated ? Vector3.TransformCoordinates(Vector3.Right(), this._pointAtData.interpolationMatrix) : this._normals[this._pointAtData.previousPointArrayIndex];\r\n    }\r\n\r\n    /**\r\n     * Returns the binormal vector of an interpolated Path3D curve point at the specified position along this path.\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @param interpolated (optional, default false) : boolean, if true returns an interpolated binormal instead of the binormal of the previous path point.\r\n     * @returns a binormal vector corresponding to the interpolated Path3D curve point, if not interpolated, the binormal is taken from the precomputed binormals array.\r\n     */\r\n    public getBinormalAt(position: number, interpolated = false): Vector3 {\r\n        this._updatePointAtData(position, interpolated);\r\n        return interpolated ? Vector3.TransformCoordinates(Vector3.UpReadOnly, this._pointAtData.interpolationMatrix) : this._binormals[this._pointAtData.previousPointArrayIndex];\r\n    }\r\n\r\n    /**\r\n     * Returns the distance (float) of an interpolated Path3D curve point at the specified position along this path.\r\n     * @param position the position of the point along this path, from 0.0 to 1.0\r\n     * @returns the distance of the interpolated Path3D curve point at the specified position along this path.\r\n     */\r\n    public getDistanceAt(position: number): number {\r\n        return this.length() * position;\r\n    }\r\n\r\n    /**\r\n     * Returns the array index of the previous point of an interpolated point along this path\r\n     * @param position the position of the point to interpolate along this path, from 0.0 to 1.0\r\n     * @returns the array index\r\n     */\r\n    public getPreviousPointIndexAt(position: number) {\r\n        this._updatePointAtData(position);\r\n        return this._pointAtData.previousPointArrayIndex;\r\n    }\r\n\r\n    /**\r\n     * Returns the position of an interpolated point relative to the two path points it lies between, from 0.0 (point A) to 1.0 (point B)\r\n     * @param position the position of the point to interpolate along this path, from 0.0 to 1.0\r\n     * @returns the sub position\r\n     */\r\n    public getSubPositionAt(position: number) {\r\n        this._updatePointAtData(position);\r\n        return this._pointAtData.subPosition;\r\n    }\r\n\r\n    /**\r\n     * Returns the position of the closest virtual point on this path to an arbitrary Vector3, from 0.0 to 1.0\r\n     * @param target the vector of which to get the closest position to\r\n     * @returns the position of the closest virtual point on this path to the target vector\r\n     */\r\n    public getClosestPositionTo(target: Vector3) {\r\n        let smallestDistance = Number.MAX_VALUE;\r\n        let closestPosition = 0.0;\r\n        for (let i = 0; i < this._curve.length - 1; i++) {\r\n            let point = this._curve[i + 0];\r\n            let tangent = this._curve[i + 1].subtract(point).normalize();\r\n            let subLength = this._distances[i + 1] - this._distances[i + 0];\r\n            let subPosition = Math.min((Math.max(Vector3.Dot(tangent, target.subtract(point).normalize()), 0.0) * Vector3.Distance(point, target)) / subLength, 1.0);\r\n            let distance = Vector3.Distance(point.add(tangent.scale(subPosition * subLength)), target);\r\n\r\n            if (distance < smallestDistance) {\r\n                smallestDistance = distance;\r\n                closestPosition = (this._distances[i + 0] + subLength * subPosition) / this.length();\r\n            }\r\n        }\r\n        return closestPosition;\r\n    }\r\n\r\n    /**\r\n     * Returns a sub path (slice) of this path\r\n     * @param start the position of the fist path point, from 0.0 to 1.0, or a negative value, which will get wrapped around from the end of the path to 0.0 to 1.0 values\r\n     * @param end the position of the last path point, from 0.0 to 1.0, or a negative value, which will get wrapped around from the end of the path to 0.0 to 1.0 values\r\n     * @returns a sub path (slice) of this path\r\n     */\r\n    public slice(start: number = 0.0, end: number = 1.0) {\r\n        if (start < 0.0) {\r\n            start = 1 - ((start * -1.0) % 1.0);\r\n        }\r\n        if (end < 0.0) {\r\n            end = 1 - ((end * -1.0) % 1.0);\r\n        }\r\n        if (start > end) {\r\n            let _start = start;\r\n            start = end;\r\n            end = _start;\r\n        }\r\n        let curvePoints = this.getCurve();\r\n\r\n        let startPoint = this.getPointAt(start);\r\n        let startIndex = this.getPreviousPointIndexAt(start);\r\n\r\n        let endPoint = this.getPointAt(end);\r\n        let endIndex = this.getPreviousPointIndexAt(end) + 1;\r\n\r\n        let slicePoints: Vector3[] = [];\r\n        if (start !== 0.0) {\r\n            startIndex++;\r\n            slicePoints.push(startPoint);\r\n        }\r\n\r\n        slicePoints.push(...curvePoints.slice(startIndex, endIndex));\r\n        if (end !== 1.0 || start === 1.0) {\r\n            slicePoints.push(endPoint);\r\n        }\r\n        return new Path3D(slicePoints, this.getNormalAt(start), this._raw, this._alignTangentsWithPath);\r\n    }\r\n\r\n    /**\r\n     * Forces the Path3D tangent, normal, binormal and distance recomputation.\r\n     * @param path path which all values are copied into the curves points\r\n     * @param firstNormal which should be projected onto the curve\r\n     * @param alignTangentsWithPath (optional, default false) : boolean, if true the tangents will be aligned with the path\r\n     * @returns the same object updated.\r\n     */\r\n    public update(path: Vector3[], firstNormal: Nullable<Vector3> = null, alignTangentsWithPath = false): Path3D {\r\n        for (var p = 0; p < path.length; p++) {\r\n            this._curve[p].x = path[p].x;\r\n            this._curve[p].y = path[p].y;\r\n            this._curve[p].z = path[p].z;\r\n        }\r\n        this._compute(firstNormal, alignTangentsWithPath);\r\n        return this;\r\n    }\r\n\r\n    // private function compute() : computes tangents, normals and binormals\r\n    private _compute(firstNormal: Nullable<Vector3>, alignTangentsWithPath = false): void {\r\n        const l = this._curve.length;\r\n\r\n        if (l < 2) {\r\n            return;\r\n        }\r\n\r\n        // first and last tangents\r\n        this._tangents[0] = this._getFirstNonNullVector(0);\r\n        if (!this._raw) {\r\n            this._tangents[0].normalize();\r\n        }\r\n        this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);\r\n        if (!this._raw) {\r\n            this._tangents[l - 1].normalize();\r\n        }\r\n\r\n        // normals and binormals at first point : arbitrary vector with _normalVector()\r\n        var tg0 = this._tangents[0];\r\n        var pp0 = this._normalVector(tg0, firstNormal);\r\n        this._normals[0] = pp0;\r\n        if (!this._raw) {\r\n            this._normals[0].normalize();\r\n        }\r\n        this._binormals[0] = Vector3.Cross(tg0, this._normals[0]);\r\n        if (!this._raw) {\r\n            this._binormals[0].normalize();\r\n        }\r\n        this._distances[0] = 0.0;\r\n\r\n        // normals and binormals : next points\r\n        var prev: Vector3; // previous vector (segment)\r\n        var cur: Vector3; // current vector (segment)\r\n        var curTang: Vector3; // current tangent\r\n        // previous normal\r\n        var prevNor: Vector3; // previous normal\r\n        var prevBinor: Vector3; // previous binormal\r\n\r\n        for (var i = 1; i < l; i++) {\r\n            // tangents\r\n            prev = this._getLastNonNullVector(i);\r\n            if (i < l - 1) {\r\n                cur = this._getFirstNonNullVector(i);\r\n                this._tangents[i] = alignTangentsWithPath ? cur : prev.add(cur);\r\n                this._tangents[i].normalize();\r\n            }\r\n            this._distances[i] = this._distances[i - 1] + this._curve[i].subtract(this._curve[i - 1]).length();\r\n\r\n            // normals and binormals\r\n            // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html\r\n            curTang = this._tangents[i];\r\n            prevBinor = this._binormals[i - 1];\r\n            this._normals[i] = Vector3.Cross(prevBinor, curTang);\r\n            if (!this._raw) {\r\n                if (this._normals[i].length() === 0) {\r\n                    prevNor = this._normals[i - 1];\r\n                    this._normals[i] = prevNor.clone();\r\n                } else {\r\n                    this._normals[i].normalize();\r\n                }\r\n            }\r\n            this._binormals[i] = Vector3.Cross(curTang, this._normals[i]);\r\n            if (!this._raw) {\r\n                this._binormals[i].normalize();\r\n            }\r\n        }\r\n        this._pointAtData.id = NaN;\r\n    }\r\n\r\n    // private function getFirstNonNullVector(index)\r\n    // returns the first non null vector from index : curve[index + N].subtract(curve[index])\r\n    private _getFirstNonNullVector(index: number): Vector3 {\r\n        var i = 1;\r\n        var nNVector: Vector3 = this._curve[index + i].subtract(this._curve[index]);\r\n        while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {\r\n            i++;\r\n            nNVector = this._curve[index + i].subtract(this._curve[index]);\r\n        }\r\n        return nNVector;\r\n    }\r\n\r\n    // private function getLastNonNullVector(index)\r\n    // returns the last non null vector from index : curve[index].subtract(curve[index - N])\r\n    private _getLastNonNullVector(index: number): Vector3 {\r\n        var i = 1;\r\n        var nLVector: Vector3 = this._curve[index].subtract(this._curve[index - i]);\r\n        while (nLVector.length() === 0 && index > i + 1) {\r\n            i++;\r\n            nLVector = this._curve[index].subtract(this._curve[index - i]);\r\n        }\r\n        return nLVector;\r\n    }\r\n\r\n    // private function normalVector(v0, vt, va) :\r\n    // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane\r\n    // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0\r\n    private _normalVector(vt: Vector3, va: Nullable<Vector3>): Vector3 {\r\n        var normal0: Vector3;\r\n        var tgl = vt.length();\r\n        if (tgl === 0.0) {\r\n            tgl = 1.0;\r\n        }\r\n\r\n        if (va === undefined || va === null) {\r\n            var point: Vector3;\r\n            if (!Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, Epsilon)) {\r\n                // search for a point in the plane\r\n                point = new Vector3(0.0, -1.0, 0.0);\r\n            } else if (!Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, Epsilon)) {\r\n                point = new Vector3(1.0, 0.0, 0.0);\r\n            } else if (!Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, Epsilon)) {\r\n                point = new Vector3(0.0, 0.0, 1.0);\r\n            } else {\r\n                point = Vector3.Zero();\r\n            }\r\n            normal0 = Vector3.Cross(vt, point);\r\n        } else {\r\n            normal0 = Vector3.Cross(vt, va);\r\n            Vector3.CrossToRef(normal0, vt, normal0);\r\n        }\r\n        normal0.normalize();\r\n        return normal0;\r\n    }\r\n\r\n    /**\r\n     * Updates the point at data for an interpolated point along this curve\r\n     * @param position the position of the point along this curve, from 0.0 to 1.0\r\n     * @interpolateTNB wether to compute the interpolated tangent, normal and binormal\r\n     * @returns the (updated) point at data\r\n     */\r\n    private _updatePointAtData(position: number, interpolateTNB: boolean = false) {\r\n        // set an id for caching the result\r\n        if (this._pointAtData.id === position) {\r\n            if (!this._pointAtData.interpolateReady) {\r\n                this._updateInterpolationMatrix();\r\n            }\r\n            return this._pointAtData;\r\n        } else {\r\n            this._pointAtData.id = position;\r\n        }\r\n        let curvePoints = this.getPoints();\r\n\r\n        // clamp position between 0.0 and 1.0\r\n        if (position <= 0.0) {\r\n            return this._setPointAtData(0.0, 0.0, curvePoints[0], 0, interpolateTNB);\r\n        } else if (position >= 1.0) {\r\n            return this._setPointAtData(1.0, 1.0, curvePoints[curvePoints.length - 1], curvePoints.length - 1, interpolateTNB);\r\n        }\r\n\r\n        let previousPoint: Vector3 = curvePoints[0];\r\n        let currentPoint: Vector3;\r\n        let currentLength = 0.0;\r\n        let targetLength = position * this.length();\r\n\r\n        for (let i = 1; i < curvePoints.length; i++) {\r\n            currentPoint = curvePoints[i];\r\n            let distance = Vector3.Distance(previousPoint, currentPoint);\r\n            currentLength += distance;\r\n            if (currentLength === targetLength) {\r\n                return this._setPointAtData(position, 1.0, currentPoint, i, interpolateTNB);\r\n            } else if (currentLength > targetLength) {\r\n                let toLength = currentLength - targetLength;\r\n                let diff = toLength / distance;\r\n                let dir = previousPoint.subtract(currentPoint);\r\n                let point = currentPoint.add(dir.scaleInPlace(diff));\r\n                return this._setPointAtData(position, 1 - diff, point, i - 1, interpolateTNB);\r\n            }\r\n            previousPoint = currentPoint;\r\n        }\r\n        return this._pointAtData;\r\n    }\r\n\r\n    /**\r\n     * Updates the point at data from the specified parameters\r\n     * @param position where along the path the interpolated point is, from 0.0 to 1.0\r\n     * @param point the interpolated point\r\n     * @param parentIndex the index of an existing curve point that is on, or else positionally the first behind, the interpolated point\r\n     */\r\n    private _setPointAtData(position: number, subPosition: number, point: Vector3, parentIndex: number, interpolateTNB: boolean) {\r\n        this._pointAtData.point = point;\r\n        this._pointAtData.position = position;\r\n        this._pointAtData.subPosition = subPosition;\r\n        this._pointAtData.previousPointArrayIndex = parentIndex;\r\n        this._pointAtData.interpolateReady = interpolateTNB;\r\n\r\n        if (interpolateTNB) {\r\n            this._updateInterpolationMatrix();\r\n        }\r\n        return this._pointAtData;\r\n    }\r\n\r\n    /**\r\n     * Updates the point at interpolation matrix for the tangents, normals and binormals\r\n     */\r\n    private _updateInterpolationMatrix() {\r\n        this._pointAtData.interpolationMatrix = Matrix.Identity();\r\n        let parentIndex = this._pointAtData.previousPointArrayIndex;\r\n\r\n        if (parentIndex !== this._tangents.length - 1) {\r\n            let index = parentIndex + 1;\r\n\r\n            let tangentFrom = this._tangents[parentIndex].clone();\r\n            let normalFrom = this._normals[parentIndex].clone();\r\n            let binormalFrom = this._binormals[parentIndex].clone();\r\n\r\n            let tangentTo = this._tangents[index].clone();\r\n            let normalTo = this._normals[index].clone();\r\n            let binormalTo = this._binormals[index].clone();\r\n\r\n            let quatFrom = Quaternion.RotationQuaternionFromAxis(normalFrom, binormalFrom, tangentFrom);\r\n            let quatTo = Quaternion.RotationQuaternionFromAxis(normalTo, binormalTo, tangentTo);\r\n            let quatAt = Quaternion.Slerp(quatFrom, quatTo, this._pointAtData.subPosition);\r\n\r\n            quatAt.toRotationMatrix(this._pointAtData.interpolationMatrix);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\r\n * A Curve3 is designed from a series of successive Vector3.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_curve3\r\n */\r\nexport class Curve3 {\r\n    private _points: Vector3[];\r\n    private _length: number = 0.0;\r\n\r\n    /**\r\n     * Returns a Curve3 object along a Quadratic Bezier curve : https://doc.babylonjs.com/how_to/how_to_use_curve3#quadratic-bezier-curve\r\n     * @param v0 (Vector3) the origin point of the Quadratic Bezier\r\n     * @param v1 (Vector3) the control point\r\n     * @param v2 (Vector3) the end point of the Quadratic Bezier\r\n     * @param nbPoints (integer) the wanted number of points in the curve\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateQuadraticBezier(v0: DeepImmutable<Vector3>, v1: DeepImmutable<Vector3>, v2: DeepImmutable<Vector3>, nbPoints: number): Curve3 {\r\n        nbPoints = nbPoints > 2 ? nbPoints : 3;\r\n        var bez = new Array<Vector3>();\r\n        var equation = (t: number, val0: number, val1: number, val2: number) => {\r\n            var res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\r\n            return res;\r\n        };\r\n        for (var i = 0; i <= nbPoints; i++) {\r\n            bez.push(new Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));\r\n        }\r\n        return new Curve3(bez);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along a Cubic Bezier curve : https://doc.babylonjs.com/how_to/how_to_use_curve3#cubic-bezier-curve\r\n     * @param v0 (Vector3) the origin point of the Cubic Bezier\r\n     * @param v1 (Vector3) the first control point\r\n     * @param v2 (Vector3) the second control point\r\n     * @param v3 (Vector3) the end point of the Cubic Bezier\r\n     * @param nbPoints (integer) the wanted number of points in the curve\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateCubicBezier(v0: DeepImmutable<Vector3>, v1: DeepImmutable<Vector3>, v2: DeepImmutable<Vector3>, v3: DeepImmutable<Vector3>, nbPoints: number): Curve3 {\r\n        nbPoints = nbPoints > 3 ? nbPoints : 4;\r\n        var bez = new Array<Vector3>();\r\n        var equation = (t: number, val0: number, val1: number, val2: number, val3: number) => {\r\n            var res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 + 3.0 * t * (1.0 - t) * (1.0 - t) * val1 + 3.0 * t * t * (1.0 - t) * val2 + t * t * t * val3;\r\n            return res;\r\n        };\r\n        for (var i = 0; i <= nbPoints; i++) {\r\n            bez.push(new Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));\r\n        }\r\n        return new Curve3(bez);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along a Hermite Spline curve : https://doc.babylonjs.com/how_to/how_to_use_curve3#hermite-spline\r\n     * @param p1 (Vector3) the origin point of the Hermite Spline\r\n     * @param t1 (Vector3) the tangent vector at the origin point\r\n     * @param p2 (Vector3) the end point of the Hermite Spline\r\n     * @param t2 (Vector3) the tangent vector at the end point\r\n     * @param nbPoints (integer) the wanted number of points in the curve\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateHermiteSpline(p1: DeepImmutable<Vector3>, t1: DeepImmutable<Vector3>, p2: DeepImmutable<Vector3>, t2: DeepImmutable<Vector3>, nbPoints: number): Curve3 {\r\n        var hermite = new Array<Vector3>();\r\n        var step = 1.0 / nbPoints;\r\n        for (var i = 0; i <= nbPoints; i++) {\r\n            hermite.push(Vector3.Hermite(p1, t1, p2, t2, i * step));\r\n        }\r\n        return new Curve3(hermite);\r\n    }\r\n\r\n    /**\r\n     * Returns a Curve3 object along a CatmullRom Spline curve :\r\n     * @param points (array of Vector3) the points the spline must pass through. At least, four points required\r\n     * @param nbPoints (integer) the wanted number of points between each curve control points\r\n     * @param closed (boolean) optional with default false, when true forms a closed loop from the points\r\n     * @returns the created Curve3\r\n     */\r\n    public static CreateCatmullRomSpline(points: DeepImmutable<Vector3[]>, nbPoints: number, closed?: boolean): Curve3 {\r\n        var catmullRom = new Array<Vector3>();\r\n        var step = 1.0 / nbPoints;\r\n        var amount = 0.0;\r\n        if (closed) {\r\n            var pointsCount = points.length;\r\n            for (var i = 0; i < pointsCount; i++) {\r\n                amount = 0;\r\n                for (var c = 0; c < nbPoints; c++) {\r\n                    catmullRom.push(Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount));\r\n                    amount += step;\r\n                }\r\n            }\r\n            catmullRom.push(catmullRom[0]);\r\n        } else {\r\n            var totalPoints = new Array<Vector3>();\r\n            totalPoints.push(points[0].clone());\r\n            Array.prototype.push.apply(totalPoints, points);\r\n            totalPoints.push(points[points.length - 1].clone());\r\n            for (var i = 0; i < totalPoints.length - 3; i++) {\r\n                amount = 0;\r\n                for (var c = 0; c < nbPoints; c++) {\r\n                    catmullRom.push(Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\r\n                    amount += step;\r\n                }\r\n            }\r\n            i--;\r\n            catmullRom.push(Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\r\n        }\r\n        return new Curve3(catmullRom);\r\n    }\r\n\r\n    /**\r\n     * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\r\n     * A Curve3 is designed from a series of successive Vector3.\r\n     * Tuto : https://doc.babylonjs.com/how_to/how_to_use_curve3#curve3-object\r\n     * @param points points which make up the curve\r\n     */\r\n    constructor(points: Vector3[]) {\r\n        this._points = points;\r\n        this._length = this._computeLength(points);\r\n    }\r\n\r\n    /**\r\n     * @returns the Curve3 stored array of successive Vector3\r\n     */\r\n    public getPoints() {\r\n        return this._points;\r\n    }\r\n\r\n    /**\r\n     * @returns the computed length (float) of the curve.\r\n     */\r\n    public length() {\r\n        return this._length;\r\n    }\r\n\r\n    /**\r\n     * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\r\n     * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.\r\n     * curveA and curveB keep unchanged.\r\n     * @param curve the curve to continue from this curve\r\n     * @returns the newly constructed curve\r\n     */\r\n    public continue(curve: DeepImmutable<Curve3>): Curve3 {\r\n        var lastPoint = this._points[this._points.length - 1];\r\n        var continuedPoints = this._points.slice();\r\n        var curvePoints = curve.getPoints();\r\n        for (var i = 1; i < curvePoints.length; i++) {\r\n            continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));\r\n        }\r\n        var continuedCurve = new Curve3(continuedPoints);\r\n        return continuedCurve;\r\n    }\r\n\r\n    private _computeLength(path: DeepImmutable<Vector3[]>): number {\r\n        var l = 0;\r\n        for (var i = 1; i < path.length; i++) {\r\n            l += path[i].subtract(path[i - 1]).length();\r\n        }\r\n        return l;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}