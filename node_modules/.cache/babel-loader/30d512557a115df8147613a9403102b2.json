{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\nimport { MaterialHelper } from '../../../materialHelper';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\nimport { InputBlock } from '../Input/inputBlock';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { PBRBaseMaterial } from '../../../PBR/pbrBaseMaterial';\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\nimport { SheenBlock } from './sheenBlock';\nimport { BRDFTextureTools } from '../../../../Misc/brdfTextureTools';\nimport { MaterialFlags } from '../../../materialFlags';\nimport { AnisotropyBlock } from './anisotropyBlock';\nimport { ReflectionBlock } from './reflectionBlock';\nimport { ClearCoatBlock } from './clearCoatBlock';\nimport { SubSurfaceBlock } from './subSurfaceBlock';\nimport { Color3, TmpColors } from '../../../../Maths/math.color';\nvar mapOutputToVariable = {\n  \"ambientClr\": [\"finalAmbient\", \"\"],\n  \"diffuseDir\": [\"finalDiffuse\", \"\"],\n  \"specularDir\": [\"finalSpecularScaled\", \"!defined(UNLIT) && defined(SPECULARTERM)\"],\n  \"clearcoatDir\": [\"finalClearCoatScaled\", \"!defined(UNLIT) && defined(CLEARCOAT)\"],\n  \"sheenDir\": [\"finalSheenScaled\", \"!defined(UNLIT) && defined(SHEEN)\"],\n  \"diffuseInd\": [\"finalIrradiance\", \"!defined(UNLIT) && defined(REFLECTION)\"],\n  \"specularInd\": [\"finalRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION)\"],\n  \"clearcoatInd\": [\"clearcoatOut.finalClearCoatRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(CLEARCOAT)\"],\n  \"sheenInd\": [\"sheenOut.finalSheenRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(SHEEN) && defined(ENVIRONMENTBRDF)\"],\n  \"refraction\": [\"subSurfaceOut.finalRefraction\", \"!defined(UNLIT) && defined(SS_REFRACTION)\"],\n  \"lighting\": [\"finalColor.rgb\", \"\"],\n  \"shadow\": [\"shadow\", \"\"],\n  \"alpha\": [\"alpha\", \"\"]\n};\n/**\r\n * Block used to implement the PBR metallic/roughness model\r\n */\n\nvar PBRMetallicRoughnessBlock =\n/** @class */\nfunction (_super) {\n  __extends(PBRMetallicRoughnessBlock, _super);\n  /**\r\n   * Create a new ReflectionBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function PBRMetallicRoughnessBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.VertexAndFragment) || this;\n\n    _this._environmentBRDFTexture = null;\n    _this._metallicReflectanceColor = Color3.White();\n    _this._metallicF0Factor = 1;\n    /**\r\n     * Intensity of the direct lights e.g. the four lights available in your scene.\r\n     * This impacts both the direct diffuse and specular highlights.\r\n     */\n\n    _this.directIntensity = 1.0;\n    /**\r\n     * Intensity of the environment e.g. how much the environment will light the object\r\n     * either through harmonics for rough material or through the refelction for shiny ones.\r\n     */\n\n    _this.environmentIntensity = 1.0;\n    /**\r\n     * This is a special control allowing the reduction of the specular highlights coming from the\r\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\r\n     */\n\n    _this.specularIntensity = 1.0;\n    /**\r\n     * Defines the  falloff type used in this material.\r\n     * It by default is Physical.\r\n     */\n\n    _this.lightFalloff = 0;\n    /**\r\n     * Specifies that alpha test should be used\r\n     */\n\n    _this.useAlphaTest = false;\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\n\n    _this.alphaTestCutoff = 0.5;\n    /**\r\n     * Specifies that alpha blending should be used\r\n     */\n\n    _this.useAlphaBlending = false;\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.\r\n     */\n\n    _this.useRadianceOverAlpha = true;\n    /**\r\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When sun reflects on it you can not see what is behind.\r\n     */\n\n    _this.useSpecularOverAlpha = true;\n    /**\r\n     * Enables specular anti aliasing in the PBR shader.\r\n     * It will both interacts on the Geometry for analytical and IBL lighting.\r\n     * It also prefilter the roughness map based on the bump values.\r\n     */\n\n    _this.enableSpecularAntiAliasing = false;\n    /**\r\n     * Enables realtime filtering on the texture.\r\n     */\n\n    _this.realTimeFiltering = false;\n    /**\r\n     * Quality switch for realtime filtering\r\n     */\n\n    _this.realTimeFilteringQuality = 8;\n    /**\r\n     * Defines if the material uses energy conservation.\r\n     */\n\n    _this.useEnergyConservation = true;\n    /**\r\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\r\n     * too much the area relying on ambient texture to define their ambient occlusion.\r\n     */\n\n    _this.useRadianceOcclusion = true;\n    /**\r\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\r\n     * makes the reflect vector face the model (under horizon).\r\n     */\n\n    _this.useHorizonOcclusion = true;\n    /**\r\n     * If set to true, no lighting calculations will be applied.\r\n     */\n\n    _this.unlit = false;\n    /**\r\n     * Force normal to face away from face.\r\n     */\n\n    _this.forceNormalForward = false;\n    /**\r\n     * Defines the material debug mode.\r\n     * It helps seeing only some components of the material while troubleshooting.\r\n     */\n\n    _this.debugMode = 0;\n    /**\r\n     * Specify from where on screen the debug mode should start.\r\n     * The value goes from -1 (full screen) to 1 (not visible)\r\n     * It helps with side by side comparison against the final render\r\n     * This defaults to 0\r\n     */\n\n    _this.debugLimit = 0;\n    /**\r\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\r\n     * You can use the factor to better multiply the final value.\r\n     */\n\n    _this.debugFactor = 1;\n    _this._isUnique = true;\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false);\n\n    _this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"perturbedNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"baseColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"metallic\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"ambientOcc\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"opacity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"ambientColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"reflection\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"reflection\", _this, NodeMaterialConnectionPointDirection.Input, ReflectionBlock, \"ReflectionBlock\"));\n\n    _this.registerInput(\"clearcoat\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"clearcoat\", _this, NodeMaterialConnectionPointDirection.Input, ClearCoatBlock, \"ClearCoatBlock\"));\n\n    _this.registerInput(\"sheen\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"sheen\", _this, NodeMaterialConnectionPointDirection.Input, SheenBlock, \"SheenBlock\"));\n\n    _this.registerInput(\"subsurface\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"subsurface\", _this, NodeMaterialConnectionPointDirection.Input, SubSurfaceBlock, \"SubSurfaceBlock\"));\n\n    _this.registerInput(\"anisotropy\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"anisotropy\", _this, NodeMaterialConnectionPointDirection.Input, AnisotropyBlock, \"AnisotropyBlock\"));\n\n    _this.registerOutput(\"ambientClr\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"diffuseDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"specularDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"clearcoatDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"sheenDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"diffuseInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"specularInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"clearcoatInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"sheenInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"lighting\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"shadow\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"alpha\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n\n  PBRMetallicRoughnessBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"vLightingIntensity\");\n\n    state._excludeVariableName(\"geometricNormalW\");\n\n    state._excludeVariableName(\"normalW\");\n\n    state._excludeVariableName(\"faceNormal\");\n\n    state._excludeVariableName(\"albedoOpacityOut\");\n\n    state._excludeVariableName(\"surfaceAlbedo\");\n\n    state._excludeVariableName(\"alpha\");\n\n    state._excludeVariableName(\"aoOut\");\n\n    state._excludeVariableName(\"baseColor\");\n\n    state._excludeVariableName(\"reflectivityOut\");\n\n    state._excludeVariableName(\"microSurface\");\n\n    state._excludeVariableName(\"roughness\");\n\n    state._excludeVariableName(\"NdotVUnclamped\");\n\n    state._excludeVariableName(\"NdotV\");\n\n    state._excludeVariableName(\"alphaG\");\n\n    state._excludeVariableName(\"AARoughnessFactors\");\n\n    state._excludeVariableName(\"environmentBrdf\");\n\n    state._excludeVariableName(\"ambientMonochrome\");\n\n    state._excludeVariableName(\"seo\");\n\n    state._excludeVariableName(\"eho\");\n\n    state._excludeVariableName(\"environmentRadiance\");\n\n    state._excludeVariableName(\"irradianceVector\");\n\n    state._excludeVariableName(\"environmentIrradiance\");\n\n    state._excludeVariableName(\"diffuseBase\");\n\n    state._excludeVariableName(\"specularBase\");\n\n    state._excludeVariableName(\"preInfo\");\n\n    state._excludeVariableName(\"info\");\n\n    state._excludeVariableName(\"shadow\");\n\n    state._excludeVariableName(\"finalDiffuse\");\n\n    state._excludeVariableName(\"finalAmbient\");\n\n    state._excludeVariableName(\"ambientOcclusionForDirectDiffuse\");\n\n    state._excludeVariableName(\"finalColor\");\n\n    state._excludeVariableName(\"vClipSpacePosition\");\n\n    state._excludeVariableName(\"vDebugMode\");\n  };\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  PBRMetallicRoughnessBlock.prototype.getClassName = function () {\n    return \"PBRMetallicRoughnessBlock\";\n  };\n\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"worldPosition\", {\n    /**\r\n     * Gets the world position input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"worldNormal\", {\n    /**\r\n     * Gets the world normal input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"view\", {\n    /**\r\n     * Gets the view matrix parameter\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"cameraPosition\", {\n    /**\r\n     * Gets the camera position input component\r\n     */\n    get: function () {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"perturbedNormal\", {\n    /**\r\n     * Gets the perturbed normal input component\r\n     */\n    get: function () {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"baseColor\", {\n    /**\r\n     * Gets the base color input component\r\n     */\n    get: function () {\n      return this._inputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"metallic\", {\n    /**\r\n     * Gets the metallic input component\r\n     */\n    get: function () {\n      return this._inputs[6];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"roughness\", {\n    /**\r\n     * Gets the roughness input component\r\n     */\n    get: function () {\n      return this._inputs[7];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"ambientOcc\", {\n    /**\r\n     * Gets the ambient occlusion input component\r\n     */\n    get: function () {\n      return this._inputs[8];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"opacity\", {\n    /**\r\n     * Gets the opacity input component\r\n     */\n    get: function () {\n      return this._inputs[9];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"indexOfRefraction\", {\n    /**\r\n     * Gets the index of refraction input component\r\n     */\n    get: function () {\n      return this._inputs[10];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"ambientColor\", {\n    /**\r\n     * Gets the ambient color input component\r\n     */\n    get: function () {\n      return this._inputs[11];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"reflection\", {\n    /**\r\n     * Gets the reflection object parameters\r\n     */\n    get: function () {\n      return this._inputs[12];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"clearcoat\", {\n    /**\r\n     * Gets the clear coat object parameters\r\n     */\n    get: function () {\n      return this._inputs[13];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"sheen\", {\n    /**\r\n     * Gets the sheen object parameters\r\n     */\n    get: function () {\n      return this._inputs[14];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"subsurface\", {\n    /**\r\n     * Gets the sub surface object parameters\r\n     */\n    get: function () {\n      return this._inputs[15];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"anisotropy\", {\n    /**\r\n     * Gets the anisotropy object parameters\r\n     */\n    get: function () {\n      return this._inputs[16];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"ambientClr\", {\n    /**\r\n     * Gets the ambient output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"diffuseDir\", {\n    /**\r\n     * Gets the diffuse output component\r\n     */\n    get: function () {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"specularDir\", {\n    /**\r\n     * Gets the specular output component\r\n     */\n    get: function () {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"clearcoatDir\", {\n    /**\r\n     * Gets the clear coat output component\r\n     */\n    get: function () {\n      return this._outputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"sheenDir\", {\n    /**\r\n     * Gets the sheen output component\r\n     */\n    get: function () {\n      return this._outputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"diffuseIndirect\", {\n    /**\r\n     * Gets the indirect diffuse output component\r\n     */\n    get: function () {\n      return this._outputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"specularIndirect\", {\n    /**\r\n     * Gets the indirect specular output component\r\n     */\n    get: function () {\n      return this._outputs[6];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"clearcoatIndirect\", {\n    /**\r\n     * Gets the indirect clear coat output component\r\n     */\n    get: function () {\n      return this._outputs[7];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"sheenIndirect\", {\n    /**\r\n     * Gets the indirect sheen output component\r\n     */\n    get: function () {\n      return this._outputs[8];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"refraction\", {\n    /**\r\n     * Gets the refraction output component\r\n     */\n    get: function () {\n      return this._outputs[9];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"lighting\", {\n    /**\r\n     * Gets the global lighting output component\r\n     */\n    get: function () {\n      return this._outputs[10];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"shadow\", {\n    /**\r\n     * Gets the shadow output component\r\n     */\n    get: function () {\n      return this._outputs[11];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"alpha\", {\n    /**\r\n     * Gets the alpha output component\r\n     */\n    get: function () {\n      return this._outputs[12];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PBRMetallicRoughnessBlock.prototype.autoConfigure = function (material) {\n    if (!this.cameraPosition.isConnected) {\n      var cameraPositionInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.CameraPosition;\n      });\n\n      if (!cameraPositionInput) {\n        cameraPositionInput = new InputBlock(\"cameraPosition\");\n        cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\n      }\n\n      cameraPositionInput.output.connectTo(this.cameraPosition);\n    }\n\n    if (!this.view.isConnected) {\n      var viewInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.View;\n      });\n\n      if (!viewInput) {\n        viewInput = new InputBlock(\"view\");\n        viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\n      }\n\n      viewInput.output.connectTo(this.view);\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    // General\n    defines.setValue(\"PBR\", true);\n    defines.setValue(\"METALLICWORKFLOW\", true);\n    defines.setValue(\"DEBUGMODE\", this.debugMode, true);\n    defines.setValue(\"NORMALXYSCALE\", true);\n    defines.setValue(\"BUMP\", this.perturbedNormal.isConnected, true);\n    defines.setValue(\"LODBASEDMICROSFURACE\", this._scene.getEngine().getCaps().textureLOD); // Albedo & Opacity\n\n    defines.setValue(\"ALBEDO\", false, true);\n    defines.setValue(\"OPACITY\", this.opacity.isConnected, true); // Ambient occlusion\n\n    defines.setValue(\"AMBIENT\", true, true);\n    defines.setValue(\"AMBIENTINGRAYSCALE\", false, true); // Reflectivity\n\n    defines.setValue(\"REFLECTIVITY\", false, true);\n    defines.setValue(\"AOSTOREINMETALMAPRED\", false, true);\n    defines.setValue(\"METALLNESSSTOREINMETALMAPBLUE\", false, true);\n    defines.setValue(\"ROUGHNESSSTOREINMETALMAPALPHA\", false, true);\n    defines.setValue(\"ROUGHNESSSTOREINMETALMAPGREEN\", false, true); // Lighting & colors\n\n    if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\n      defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\n      defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\n    } else if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\n      defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\n      defines.setValue(\"USEGLTFLIGHTFALLOFF\", true);\n    } else {\n      defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", true);\n      defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\n    } // Transparency\n\n\n    var alphaTestCutOffString = this.alphaTestCutoff.toString();\n    defines.setValue(\"ALPHABLEND\", this.useAlphaBlending, true);\n    defines.setValue(\"ALPHAFROMALBEDO\", false, true);\n    defines.setValue(\"ALPHATEST\", this.useAlphaTest, true);\n    defines.setValue(\"ALPHATESTVALUE\", alphaTestCutOffString.indexOf('.') < 0 ? alphaTestCutOffString + \".\" : alphaTestCutOffString, true);\n    defines.setValue(\"OPACITYRGB\", false, true); // Rendering\n\n    defines.setValue(\"RADIANCEOVERALPHA\", this.useRadianceOverAlpha, true);\n    defines.setValue(\"SPECULAROVERALPHA\", this.useSpecularOverAlpha, true);\n    defines.setValue(\"SPECULARAA\", this._scene.getEngine().getCaps().standardDerivatives && this.enableSpecularAntiAliasing, true);\n    defines.setValue(\"REALTIME_FILTERING\", this.realTimeFiltering, true);\n\n    if (this._scene.getEngine().webGLVersion > 1) {\n      defines.setValue(\"NUM_SAMPLES\", this.realTimeFilteringQuality + \"u\", true);\n    } else {\n      defines.setValue(\"NUM_SAMPLES\", \"\" + this.realTimeFilteringQuality, true);\n    } // Advanced\n\n\n    defines.setValue(\"BRDF_V_HEIGHT_CORRELATED\", true);\n    defines.setValue(\"MS_BRDF_ENERGY_CONSERVATION\", this.useEnergyConservation, true);\n    defines.setValue(\"RADIANCEOCCLUSION\", this.useRadianceOcclusion, true);\n    defines.setValue(\"HORIZONOCCLUSION\", this.useHorizonOcclusion, true);\n    defines.setValue(\"UNLIT\", this.unlit, true);\n    defines.setValue(\"FORCENORMALFORWARD\", this.forceNormalForward, true);\n\n    if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n      defines.setValue(\"ENVIRONMENTBRDF\", true);\n      defines.setValue(\"ENVIRONMENTBRDF_RGBD\", this._environmentBRDFTexture.isRGBD, true);\n    } else {\n      defines.setValue(\"ENVIRONMENTBRDF\", false);\n      defines.setValue(\"ENVIRONMENTBRDF_RGBD\", false);\n    }\n\n    if (!defines._areLightsDirty) {\n      return;\n    }\n\n    var scene = mesh.getScene();\n\n    if (!this.light) {\n      // Lights\n      MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, nodeMaterial.maxSimultaneousLights);\n      defines._needNormals = true; // Multiview\n\n      MaterialHelper.PrepareDefinesForMultiview(scene, defines);\n    } else {\n      var state = {\n        needNormals: false,\n        needRebuild: false,\n        lightmapMode: false,\n        shadowEnabled: false,\n        specularEnabled: false\n      };\n      MaterialHelper.PrepareDefinesForLight(scene, mesh, this.light, this._lightId, defines, true, state);\n\n      if (state.needRebuild) {\n        defines.rebuild();\n      }\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype.updateUniformsAndSamples = function (state, nodeMaterial, defines, uniformBuffers) {\n    for (var lightIndex = 0; lightIndex < nodeMaterial.maxSimultaneousLights; lightIndex++) {\n      if (!defines[\"LIGHT\" + lightIndex]) {\n        break;\n      }\n\n      var onlyUpdateBuffersList = state.uniforms.indexOf(\"vLightData\" + lightIndex) >= 0;\n      MaterialHelper.PrepareUniformsAndSamplersForLight(lightIndex, state.uniforms, state.samplers, defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex], uniformBuffers, onlyUpdateBuffersList);\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    var _a, _b;\n\n    if (!mesh) {\n      return;\n    }\n\n    var scene = mesh.getScene();\n\n    if (!this.light) {\n      MaterialHelper.BindLights(scene, mesh, effect, true, nodeMaterial.maxSimultaneousLights);\n    } else {\n      MaterialHelper.BindLight(this.light, this._lightId, scene, effect, true);\n    }\n\n    effect.setTexture(this._environmentBrdfSamplerName, this._environmentBRDFTexture);\n    effect.setFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\n    var ambientScene = this._scene.ambientColor;\n\n    if (ambientScene) {\n      effect.setColor3(\"ambientFromScene\", ambientScene);\n    }\n\n    var invertNormal = scene.useRightHandedSystem === (scene._mirroredCameraPosition != null);\n    effect.setFloat(this._invertNormalName, invertNormal ? -1 : 1);\n    effect.setFloat4(\"vLightingIntensity\", this.directIntensity, 1, this.environmentIntensity * this._scene.environmentIntensity, this.specularIntensity); // reflectivity bindings\n\n    var outside_ior = 1; // consider air as clear coat and other layers would remap in the shader.\n\n    var ior = (_b = (_a = this.indexOfRefraction.connectInputBlock) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1.5; // We are here deriving our default reflectance from a common value for none metallic surface.\n    // Based of the schlick fresnel approximation model\n    // for dielectrics.\n\n    var f0 = Math.pow((ior - outside_ior) / (ior + outside_ior), 2); // Tweak the default F0 and F90 based on our given setup\n\n    this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\n\n    var metallicF90 = this._metallicF0Factor;\n    effect.setColor4(this._vMetallicReflectanceFactorsName, TmpColors.Color3[0], metallicF90);\n  };\n\n  PBRMetallicRoughnessBlock.prototype._injectVertexCode = function (state) {\n    var _a, _b;\n\n    var worldPos = this.worldPosition;\n    var comments = \"//\" + this.name; // Declaration\n\n    if (!this.light) {\n      // Emit for all lights\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n\n      this._lightId = 0;\n      state.sharedData.dynamicUniformBlocks.push(this);\n    } else {\n      this._lightId = (state.counters[\"lightCounter\"] !== undefined ? state.counters[\"lightCounter\"] : -1) + 1;\n      state.counters[\"lightCounter\"] = this._lightId;\n\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      }, this._lightId.toString());\n    } // Inject code in vertex\n\n\n    var worldPosVaryingName = \"v_\" + worldPos.associatedVariableName;\n\n    if (state._emitVaryingFromString(worldPosVaryingName, \"vec4\")) {\n      state.compilationString += worldPosVaryingName + \" = \" + worldPos.associatedVariableName + \";\\r\\n\";\n    }\n\n    var reflectionBlock = this.reflection.isConnected ? (_a = this.reflection.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n\n    if (reflectionBlock) {\n      reflectionBlock.viewConnectionPoint = this.view;\n    }\n\n    state.compilationString += (_b = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.handleVertexSide(state)) !== null && _b !== void 0 ? _b : \"\";\n\n    state._emitUniformFromString(\"vDebugMode\", \"vec2\", \"defined(IGNORE) || DEBUGMODE > 0\");\n\n    state._emitUniformFromString(\"ambientFromScene\", \"vec3\");\n\n    if (state._emitVaryingFromString(\"vClipSpacePosition\", \"vec4\", \"defined(IGNORE) || DEBUGMODE > 0\")) {\n      state._injectAtEnd += \"#if DEBUGMODE > 0\\r\\n\";\n      state._injectAtEnd += \"vClipSpacePosition = gl_Position;\\r\\n\";\n      state._injectAtEnd += \"#endif\\r\\n\";\n    }\n\n    if (this.light) {\n      state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }, {\n          search: /worldPos/g,\n          replace: worldPos.associatedVariableName\n        }]\n      });\n    } else {\n      state.compilationString += \"vec4 worldPos = \" + worldPos.associatedVariableName + \";\\r\\n\";\n\n      if (this.view.isConnected) {\n        state.compilationString += \"mat4 view = \" + this.view.associatedVariableName + \";\\r\\n\";\n      }\n\n      state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype._getAlbedoOpacityCode = function () {\n    var code = \"albedoOpacityOutParams albedoOpacityOut;\\r\\n\";\n    var albedoColor = this.baseColor.isConnected ? this.baseColor.associatedVariableName : \"vec3(1.)\";\n    var opacity = this.opacity.isConnected ? this.opacity.associatedVariableName : \"1.\";\n    code += \"albedoOpacityBlock(\\n                vec4(\" + albedoColor + \", 1.),\\n            #ifdef ALBEDO\\n                vec4(1.),\\n                vec2(1., 1.),\\n            #endif\\n            #ifdef OPACITY\\n                vec4(\" + opacity + \"),\\n                vec2(1., 1.),\\n            #endif\\n                albedoOpacityOut\\n            );\\n\\n            vec3 surfaceAlbedo = albedoOpacityOut.surfaceAlbedo;\\n            float alpha = albedoOpacityOut.alpha;\\r\\n\";\n    return code;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._getAmbientOcclusionCode = function () {\n    var code = \"ambientOcclusionOutParams aoOut;\\r\\n\";\n    var ao = this.ambientOcc.isConnected ? this.ambientOcc.associatedVariableName : \"1.\";\n    code += \"ambientOcclusionBlock(\\n            #ifdef AMBIENT\\n                vec3(\" + ao + \"),\\n                vec4(0., 1.0, 1.0, 0.),\\n            #endif\\n                aoOut\\n            );\\r\\n\";\n    return code;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._getReflectivityCode = function (state) {\n    var code = \"reflectivityOutParams reflectivityOut;\\r\\n\";\n    var aoIntensity = \"1.\";\n    this._vMetallicReflectanceFactorsName = state._getFreeVariableName(\"vMetallicReflectanceFactors\");\n\n    state._emitUniformFromString(this._vMetallicReflectanceFactorsName, \"vec4\");\n\n    code += \"vec3 baseColor = surfaceAlbedo;\\n\\n            reflectivityBlock(\\n                vec4(\" + this.metallic.associatedVariableName + \", \" + this.roughness.associatedVariableName + \", 0., 0.),\\n            #ifdef METALLICWORKFLOW\\n                surfaceAlbedo,\\n                \" + this._vMetallicReflectanceFactorsName + \",\\n            #endif\\n            #ifdef REFLECTIVITY\\n                vec3(0., 0., \" + aoIntensity + \"),\\n                vec4(1.),\\n            #endif\\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY)  && defined(AOSTOREINMETALMAPRED)\\n                aoOut.ambientOcclusionColor,\\n            #endif\\n            #ifdef MICROSURFACEMAP\\n                microSurfaceTexel, <== not handled!\\n            #endif\\n                reflectivityOut\\n            );\\n\\n            float microSurface = reflectivityOut.microSurface;\\n            float roughness = reflectivityOut.roughness;\\n\\n            #ifdef METALLICWORKFLOW\\n                surfaceAlbedo = reflectivityOut.surfaceAlbedo;\\n            #endif\\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY) && defined(AOSTOREINMETALMAPRED)\\n                aoOut.ambientOcclusionColor = reflectivityOut.ambientOcclusionColor;\\n            #endif\\r\\n\";\n    return code;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._buildBlock = function (state) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14;\n\n    _super.prototype._buildBlock.call(this, state);\n\n    this._scene = state.sharedData.scene;\n\n    if (!this._environmentBRDFTexture) {\n      this._environmentBRDFTexture = BRDFTextureTools.GetEnvironmentBRDFTexture(this._scene);\n    }\n\n    var reflectionBlock = this.reflection.isConnected ? (_a = this.reflection.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n\n    if (reflectionBlock) {\n      // Need those variables to be setup when calling _injectVertexCode\n      reflectionBlock.worldPositionConnectionPoint = this.worldPosition;\n      reflectionBlock.cameraPositionConnectionPoint = this.cameraPosition;\n      reflectionBlock.worldNormalConnectionPoint = this.worldNormal;\n    }\n\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      // Vertex\n      this._injectVertexCode(state);\n\n      return this;\n    } // Fragment\n\n\n    state.sharedData.bindableBlocks.push(this);\n    state.sharedData.blocksWithDefines.push(this);\n    var comments = \"//\" + this.name;\n    var worldPosVarName = \"v_\" + this.worldPosition.associatedVariableName;\n    var normalShading = this.perturbedNormal;\n    this._environmentBrdfSamplerName = state._getFreeVariableName(\"environmentBrdfSampler\");\n\n    state._emit2DSampler(this._environmentBrdfSamplerName);\n\n    state.sharedData.hints.needAlphaBlending = state.sharedData.hints.needAlphaBlending || this.useAlphaBlending;\n    state.sharedData.hints.needAlphaTesting = state.sharedData.hints.needAlphaTesting || this.useAlphaTest;\n\n    state._emitExtension(\"lod\", \"#extension GL_EXT_shader_texture_lod : enable\", \"defined(LODBASEDMICROSFURACE)\");\n\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\"); //\n    // Includes\n    //\n\n\n    if (!this.light) {\n      // Emit for all lights\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    } else {\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      }, this._lightId.toString());\n    }\n\n    state._emitFunctionFromInclude(\"helperFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"importanceSampling\", comments);\n\n    state._emitFunctionFromInclude(\"pbrHelperFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"shadowsFragmentFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"pbrDirectLightingSetupFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"pbrDirectLightingFalloffFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBRDFFunctions\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_b = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _b !== void 0 ? _b : \"REFLECTIONMAP_SKYBOX\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"hdrFilteringFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"pbrDirectLightingFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"pbrIBLFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockAlbedoOpacity\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockReflectivity\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockAmbientOcclusion\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockAlphaFresnel\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockAnisotropic\", comments); //\n    // code\n    //\n\n\n    state._emitUniformFromString(\"vLightingIntensity\", \"vec4\"); // _____________________________ Geometry Information ____________________________\n\n\n    this._vNormalWName = state._getFreeVariableName(\"vNormalW\");\n    state.compilationString += \"vec4 \" + this._vNormalWName + \" = normalize(\" + this.worldNormal.associatedVariableName + \");\\r\\n\";\n\n    if (state._registerTempVariable(\"viewDirectionW\")) {\n      state.compilationString += \"vec3 viewDirectionW = normalize(\" + this.cameraPosition.associatedVariableName + \" - \" + worldPosVarName + \".xyz);\\r\\n\";\n    }\n\n    state.compilationString += \"vec3 geometricNormalW = \" + this._vNormalWName + \".xyz;\\r\\n\";\n    state.compilationString += \"vec3 normalW = \" + (normalShading.isConnected ? \"normalize(\" + normalShading.associatedVariableName + \".xyz)\" : \"geometricNormalW\") + \";\\r\\n\";\n    this._invertNormalName = state._getFreeVariableName(\"invertNormal\");\n\n    state._emitUniformFromString(this._invertNormalName, \"float\");\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockNormalFinal\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }, {\n        search: /vEyePosition.w/g,\n        replace: this._invertNormalName\n      }]\n    }); // _____________________________ Albedo & Opacity ______________________________\n\n    state.compilationString += this._getAlbedoOpacityCode();\n    state.compilationString += state._emitCodeFromInclude(\"depthPrePass\", comments); // _____________________________ AO  _______________________________\n\n    state.compilationString += this._getAmbientOcclusionCode();\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockLightmapInit\", comments); // _____________________________ UNLIT  _______________________________\n\n    state.compilationString += \"#ifdef UNLIT\\n                vec3 diffuseBase = vec3(1., 1., 1.);\\n            #else\\r\\n\"; // _____________________________ Reflectivity _______________________________\n\n    state.compilationString += this._getReflectivityCode(state); // _____________________________ Geometry info _________________________________\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockGeometryInfo\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_c = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _c !== void 0 ? _c : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_d = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _d !== void 0 ? _d : \"REFLECTIONMAP_3D\"\n      }]\n    }); // _____________________________ Anisotropy _______________________________________\n\n    var anisotropyBlock = this.anisotropy.isConnected ? (_e = this.anisotropy.connectedPoint) === null || _e === void 0 ? void 0 : _e.ownerBlock : null;\n\n    if (anisotropyBlock) {\n      anisotropyBlock.worldPositionConnectionPoint = this.worldPosition;\n      anisotropyBlock.worldNormalConnectionPoint = this.worldNormal;\n      state.compilationString += anisotropyBlock.getCode(state, !this.perturbedNormal.isConnected);\n    } // _____________________________ Reflection _______________________________________\n\n\n    if (reflectionBlock && reflectionBlock.hasTexture) {\n      state.compilationString += reflectionBlock.getCode(state, anisotropyBlock ? \"anisotropicOut.anisotropicNormal\" : \"normalW\");\n    }\n\n    state._emitFunctionFromInclude(\"pbrBlockReflection\", comments, {\n      replaceStrings: [{\n        search: /computeReflectionCoords/g,\n        replace: \"computeReflectionCoordsPBR\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_f = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _f !== void 0 ? _f : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_OPPOSITEZ/g,\n        replace: (_g = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _g !== void 0 ? _g : \"REFLECTIONMAP_OPPOSITEZ\"\n      }, {\n        search: /REFLECTIONMAP_PROJECTION/g,\n        replace: (_h = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _h !== void 0 ? _h : \"REFLECTIONMAP_PROJECTION\"\n      }, {\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_j = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _j !== void 0 ? _j : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /LODINREFLECTIONALPHA/g,\n        replace: (_k = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _k !== void 0 ? _k : \"LODINREFLECTIONALPHA\"\n      }, {\n        search: /LINEARSPECULARREFLECTION/g,\n        replace: (_l = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _l !== void 0 ? _l : \"LINEARSPECULARREFLECTION\"\n      }, {\n        search: /vReflectionFilteringInfo/g,\n        replace: (_m = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionFilteringInfoName) !== null && _m !== void 0 ? _m : \"vReflectionFilteringInfo\"\n      }]\n    }); // ___________________ Compute Reflectance aka R0 F0 info _________________________\n\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance0\", comments, {\n      replaceStrings: [{\n        search: /metallicReflectanceFactors/g,\n        replace: this._vMetallicReflectanceFactorsName\n      }]\n    }); // ________________________________ Sheen ______________________________\n\n    var sheenBlock = this.sheen.isConnected ? (_o = this.sheen.connectedPoint) === null || _o === void 0 ? void 0 : _o.ownerBlock : null;\n\n    if (sheenBlock) {\n      state.compilationString += sheenBlock.getCode(reflectionBlock);\n    }\n\n    state._emitFunctionFromInclude(\"pbrBlockSheen\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_p = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _p !== void 0 ? _p : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_q = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _q !== void 0 ? _q : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /LODINREFLECTIONALPHA/g,\n        replace: (_r = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _r !== void 0 ? _r : \"LODINREFLECTIONALPHA\"\n      }, {\n        search: /LINEARSPECULARREFLECTION/g,\n        replace: (_s = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _s !== void 0 ? _s : \"LINEARSPECULARREFLECTION\"\n      }]\n    }); // _____________________________ Clear Coat ____________________________\n\n\n    var clearcoatBlock = this.clearcoat.isConnected ? (_t = this.clearcoat.connectedPoint) === null || _t === void 0 ? void 0 : _t.ownerBlock : null;\n    var generateTBNSpace = !this.perturbedNormal.isConnected && !this.anisotropy.isConnected;\n    var isTangentConnectedToPerturbNormal = this.perturbedNormal.isConnected && ((_u = this.perturbedNormal.connectedPoint) === null || _u === void 0 ? void 0 : _u.ownerBlock).worldTangent.isConnected;\n    var isTangentConnectedToAnisotropy = this.anisotropy.isConnected && ((_v = this.anisotropy.connectedPoint) === null || _v === void 0 ? void 0 : _v.ownerBlock).worldTangent.isConnected;\n    var vTBNAvailable = isTangentConnectedToPerturbNormal || !this.perturbedNormal.isConnected && isTangentConnectedToAnisotropy;\n    state.compilationString += ClearCoatBlock.GetCode(state, clearcoatBlock, reflectionBlock, worldPosVarName, generateTBNSpace, vTBNAvailable, this.worldNormal.associatedVariableName);\n\n    if (generateTBNSpace) {\n      vTBNAvailable = (_w = clearcoatBlock === null || clearcoatBlock === void 0 ? void 0 : clearcoatBlock.worldTangent.isConnected) !== null && _w !== void 0 ? _w : false;\n    }\n\n    state._emitFunctionFromInclude(\"pbrBlockClearcoat\", comments, {\n      replaceStrings: [{\n        search: /computeReflectionCoords/g,\n        replace: \"computeReflectionCoordsPBR\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_x = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _x !== void 0 ? _x : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_OPPOSITEZ/g,\n        replace: (_y = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _y !== void 0 ? _y : \"REFLECTIONMAP_OPPOSITEZ\"\n      }, {\n        search: /REFLECTIONMAP_PROJECTION/g,\n        replace: (_z = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _z !== void 0 ? _z : \"REFLECTIONMAP_PROJECTION\"\n      }, {\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_0 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _0 !== void 0 ? _0 : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /LODINREFLECTIONALPHA/g,\n        replace: (_1 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _1 !== void 0 ? _1 : \"LODINREFLECTIONALPHA\"\n      }, {\n        search: /LINEARSPECULARREFLECTION/g,\n        replace: (_2 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _2 !== void 0 ? _2 : \"LINEARSPECULARREFLECTION\"\n      }, {\n        search: /defined\\(TANGENT\\)/g,\n        replace: vTBNAvailable ? \"defined(TANGENT)\" : \"defined(IGNORE)\"\n      }]\n    }); // _________________________ Specular Environment Reflectance __________________________\n\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_3 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _3 !== void 0 ? _3 : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_4 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _4 !== void 0 ? _4 : \"REFLECTIONMAP_3D\"\n      }]\n    }); // ___________________________________ SubSurface ______________________________________\n\n    var subsurfaceBlock = this.subsurface.isConnected ? (_5 = this.subsurface.connectedPoint) === null || _5 === void 0 ? void 0 : _5.ownerBlock : null;\n    var refractionBlock = this.subsurface.isConnected ? (_7 = ((_6 = this.subsurface.connectedPoint) === null || _6 === void 0 ? void 0 : _6.ownerBlock).refraction.connectedPoint) === null || _7 === void 0 ? void 0 : _7.ownerBlock : null;\n\n    if (refractionBlock) {\n      refractionBlock.viewConnectionPoint = this.view;\n      refractionBlock.indexOfRefractionConnectionPoint = this.indexOfRefraction;\n    }\n\n    state.compilationString += SubSurfaceBlock.GetCode(state, subsurfaceBlock, reflectionBlock, worldPosVarName);\n\n    state._emitFunctionFromInclude(\"pbrBlockSubSurface\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_8 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _8 !== void 0 ? _8 : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_OPPOSITEZ/g,\n        replace: (_9 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _9 !== void 0 ? _9 : \"REFLECTIONMAP_OPPOSITEZ\"\n      }, {\n        search: /REFLECTIONMAP_PROJECTION/g,\n        replace: (_10 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _10 !== void 0 ? _10 : \"REFLECTIONMAP_PROJECTION\"\n      }, {\n        search: /SS_REFRACTIONMAP_3D/g,\n        replace: (_11 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _11 !== void 0 ? _11 : \"SS_REFRACTIONMAP_3D\"\n      }, {\n        search: /SS_LODINREFRACTIONALPHA/g,\n        replace: (_12 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLODRefractionAlpha) !== null && _12 !== void 0 ? _12 : \"SS_LODINREFRACTIONALPHA\"\n      }, {\n        search: /SS_LINEARSPECULARREFRACTION/g,\n        replace: (_13 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLinearSpecularRefraction) !== null && _13 !== void 0 ? _13 : \"SS_LINEARSPECULARREFRACTION\"\n      }, {\n        search: /SS_REFRACTIONMAP_OPPOSITEZ/g,\n        replace: (_14 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineOppositeZ) !== null && _14 !== void 0 ? _14 : \"SS_REFRACTIONMAP_OPPOSITEZ\"\n      }]\n    }); // _____________________________ Direct Lighting Info __________________________________\n\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockDirectLighting\", comments);\n\n    if (this.light) {\n      state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      });\n    } else {\n      state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    } // _____________________________ Compute Final Lit Components ________________________\n\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalLitComponents\", comments); // _____________________________ UNLIT (2) ________________________\n\n    state.compilationString += \"#endif\\r\\n\"; // UNLIT\n    // _____________________________ Compute Final Unlit Components ________________________\n\n    var aoColor = this.ambientColor.isConnected ? this.ambientColor.associatedVariableName : \"vec3(0., 0., 0.)\";\n    var aoDirectLightIntensity = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS.toString();\n\n    if (aoDirectLightIntensity.indexOf('.') === -1) {\n      aoDirectLightIntensity += \".\";\n    }\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalUnlitComponents\", comments, {\n      replaceStrings: [{\n        search: /vec3 finalEmissive[\\s\\S]*?finalEmissive\\*=vLightingIntensity\\.y;/g,\n        replace: \"\"\n      }, {\n        search: /vAmbientColor/g,\n        replace: aoColor + \" * ambientFromScene\"\n      }, {\n        search: /vAmbientInfos\\.w/g,\n        replace: aoDirectLightIntensity\n      }]\n    }); // _____________________________ Output Final Color Composition ________________________\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalColorComposition\", comments, {\n      replaceStrings: [{\n        search: /finalEmissive/g,\n        replace: \"vec3(0.)\"\n      }]\n    }); // _____________________________ Apply image processing ________________________\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockImageProcessing\", comments, {\n      replaceStrings: [{\n        search: /visibility/g,\n        replace: \"1.\"\n      }]\n    }); // _____________________________ Generate debug code ________________________\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrDebug\", comments, {\n      replaceStrings: [{\n        search: /vNormalW/g,\n        replace: this._vNormalWName\n      }, {\n        search: /vPositionW/g,\n        replace: worldPosVarName\n      }, {\n        search: /albedoTexture\\.rgb;/g,\n        replace: \"vec3(1.);\\r\\ngl_FragColor.rgb = toGammaSpace(gl_FragColor.rgb);\\r\\n\"\n      }]\n    }); // _____________________________ Generate end points ________________________\n\n    for (var _i = 0, _15 = this._outputs; _i < _15.length; _i++) {\n      var output = _15[_i];\n\n      if (output.hasEndpoints) {\n        var remap = mapOutputToVariable[output.name];\n\n        if (remap) {\n          var varName = remap[0],\n              conditions = remap[1];\n\n          if (conditions) {\n            state.compilationString += \"#if \" + conditions + \"\\r\\n\";\n          }\n\n          state.compilationString += this._declareOutput(output, state) + \" = \" + varName + \";\\r\\n\";\n\n          if (conditions) {\n            state.compilationString += \"#else\\r\\n\";\n            state.compilationString += this._declareOutput(output, state) + \" = vec3(0.);\\r\\n\";\n            state.compilationString += \"#endif\\r\\n\";\n          }\n        } else {\n          console.error(\"There's no remapping for the \" + output.name + \" end point! No code generated\");\n        }\n      }\n    }\n\n    return this;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = \"\";\n    codeString += this._codeVariableName + \".lightFalloff = \" + this.lightFalloff + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useAlphaTest = \" + this.useAlphaTest + \";\\r\\n\";\n    codeString += this._codeVariableName + \".alphaTestCutoff = \" + this.alphaTestCutoff + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useAlphaBlending = \" + this.useAlphaBlending + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useRadianceOverAlpha = \" + this.useRadianceOverAlpha + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useSpecularOverAlpha = \" + this.useSpecularOverAlpha + \";\\r\\n\";\n    codeString += this._codeVariableName + \".enableSpecularAntiAliasing = \" + this.enableSpecularAntiAliasing + \";\\r\\n\";\n    codeString += this._codeVariableName + \".realTimeFiltering = \" + this.realTimeFiltering + \";\\r\\n\";\n    codeString += this._codeVariableName + \".realTimeFilteringQuality = \" + this.realTimeFilteringQuality + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useEnergyConservation = \" + this.useEnergyConservation + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useRadianceOcclusion = \" + this.useRadianceOcclusion + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useHorizonOcclusion = \" + this.useHorizonOcclusion + \";\\r\\n\";\n    codeString += this._codeVariableName + \".unlit = \" + this.unlit + \";\\r\\n\";\n    codeString += this._codeVariableName + \".forceNormalForward = \" + this.forceNormalForward + \";\\r\\n\";\n    codeString += this._codeVariableName + \".debugMode = \" + this.debugMode + \";\\r\\n\";\n    codeString += this._codeVariableName + \".debugLimit = \" + this.debugLimit + \";\\r\\n\";\n    codeString += this._codeVariableName + \".debugFactor = \" + this.debugFactor + \";\\r\\n\";\n    return codeString;\n  };\n\n  PBRMetallicRoughnessBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    if (this.light) {\n      serializationObject.lightId = this.light.id;\n    }\n\n    serializationObject.lightFalloff = this.lightFalloff;\n    serializationObject.useAlphaTest = this.useAlphaTest;\n    serializationObject.alphaTestCutoff = this.alphaTestCutoff;\n    serializationObject.useAlphaBlending = this.useAlphaBlending;\n    serializationObject.useRadianceOverAlpha = this.useRadianceOverAlpha;\n    serializationObject.useSpecularOverAlpha = this.useSpecularOverAlpha;\n    serializationObject.enableSpecularAntiAliasing = this.enableSpecularAntiAliasing;\n    serializationObject.realTimeFiltering = this.realTimeFiltering;\n    serializationObject.realTimeFilteringQuality = this.realTimeFilteringQuality;\n    serializationObject.useEnergyConservation = this.useEnergyConservation;\n    serializationObject.useRadianceOcclusion = this.useRadianceOcclusion;\n    serializationObject.useHorizonOcclusion = this.useHorizonOcclusion;\n    serializationObject.unlit = this.unlit;\n    serializationObject.forceNormalForward = this.forceNormalForward;\n    serializationObject.debugMode = this.debugMode;\n    serializationObject.debugLimit = this.debugLimit;\n    serializationObject.debugFactor = this.debugFactor;\n    return serializationObject;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    var _a, _b;\n\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    if (serializationObject.lightId) {\n      this.light = scene.getLightByID(serializationObject.lightId);\n    }\n\n    this.lightFalloff = (_a = serializationObject.lightFalloff) !== null && _a !== void 0 ? _a : 0;\n    this.useAlphaTest = serializationObject.useAlphaTest;\n    this.alphaTestCutoff = serializationObject.alphaTestCutoff;\n    this.useAlphaBlending = serializationObject.useAlphaBlending;\n    this.useRadianceOverAlpha = serializationObject.useRadianceOverAlpha;\n    this.useSpecularOverAlpha = serializationObject.useSpecularOverAlpha;\n    this.enableSpecularAntiAliasing = serializationObject.enableSpecularAntiAliasing;\n    this.realTimeFiltering = !!serializationObject.realTimeFiltering;\n    this.realTimeFilteringQuality = (_b = serializationObject.realTimeFilteringQuality) !== null && _b !== void 0 ? _b : 8;\n    this.useEnergyConservation = serializationObject.useEnergyConservation;\n    this.useRadianceOcclusion = serializationObject.useRadianceOcclusion;\n    this.useHorizonOcclusion = serializationObject.useHorizonOcclusion;\n    this.unlit = serializationObject.unlit;\n    this.forceNormalForward = !!serializationObject.forceNormalForward;\n    this.debugMode = serializationObject.debugMode;\n    this.debugLimit = serializationObject.debugLimit;\n    this.debugFactor = serializationObject.debugFactor;\n  };\n\n  __decorate([editableInPropertyPage(\"Direct lights\", PropertyTypeForEdition.Float, \"INTENSITY\", {\n    min: 0,\n    max: 1,\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"directIntensity\", void 0);\n\n  __decorate([editableInPropertyPage(\"Environment lights\", PropertyTypeForEdition.Float, \"INTENSITY\", {\n    min: 0,\n    max: 1,\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"environmentIntensity\", void 0);\n\n  __decorate([editableInPropertyPage(\"Specular highlights\", PropertyTypeForEdition.Float, \"INTENSITY\", {\n    min: 0,\n    max: 1,\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"specularIntensity\", void 0);\n\n  __decorate([editableInPropertyPage(\"Light falloff\", PropertyTypeForEdition.List, \"LIGHTING & COLORS\", {\n    \"notifiers\": {\n      \"update\": true\n    },\n    \"options\": [{\n      label: \"Physical\",\n      value: PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL\n    }, {\n      label: \"GLTF\",\n      value: PBRBaseMaterial.LIGHTFALLOFF_GLTF\n    }, {\n      label: \"Standard\",\n      value: PBRBaseMaterial.LIGHTFALLOFF_STANDARD\n    }]\n  })], PBRMetallicRoughnessBlock.prototype, \"lightFalloff\", void 0);\n\n  __decorate([editableInPropertyPage(\"Alpha Testing\", PropertyTypeForEdition.Boolean, \"OPACITY\")], PBRMetallicRoughnessBlock.prototype, \"useAlphaTest\", void 0);\n\n  __decorate([editableInPropertyPage(\"Alpha CutOff\", PropertyTypeForEdition.Float, \"OPACITY\", {\n    min: 0,\n    max: 1,\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"alphaTestCutoff\", void 0);\n\n  __decorate([editableInPropertyPage(\"Alpha blending\", PropertyTypeForEdition.Boolean, \"OPACITY\")], PBRMetallicRoughnessBlock.prototype, \"useAlphaBlending\", void 0);\n\n  __decorate([editableInPropertyPage(\"Radiance over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useRadianceOverAlpha\", void 0);\n\n  __decorate([editableInPropertyPage(\"Specular over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useSpecularOverAlpha\", void 0);\n\n  __decorate([editableInPropertyPage(\"Specular anti-aliasing\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"enableSpecularAntiAliasing\", void 0);\n\n  __decorate([editableInPropertyPage(\"Realtime filtering\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"realTimeFiltering\", void 0);\n\n  __decorate([editableInPropertyPage(\"Realtime filtering quality\", PropertyTypeForEdition.List, \"RENDERING\", {\n    \"notifiers\": {\n      \"update\": true\n    },\n    \"options\": [{\n      label: \"Low\",\n      value: 8\n    }, {\n      label: \"Medium\",\n      value: 16\n    }, {\n      label: \"High\",\n      value: 64\n    }]\n  })], PBRMetallicRoughnessBlock.prototype, \"realTimeFilteringQuality\", void 0);\n\n  __decorate([editableInPropertyPage(\"Energy Conservation\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useEnergyConservation\", void 0);\n\n  __decorate([editableInPropertyPage(\"Radiance occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useRadianceOcclusion\", void 0);\n\n  __decorate([editableInPropertyPage(\"Horizon occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useHorizonOcclusion\", void 0);\n\n  __decorate([editableInPropertyPage(\"Unlit\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"unlit\", void 0);\n\n  __decorate([editableInPropertyPage(\"Force normal forward\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"forceNormalForward\", void 0);\n\n  __decorate([editableInPropertyPage(\"Debug mode\", PropertyTypeForEdition.List, \"DEBUG\", {\n    \"notifiers\": {\n      \"update\": true\n    },\n    \"options\": [{\n      label: \"None\",\n      value: 0\n    }, // Geometry\n    {\n      label: \"Normalized position\",\n      value: 1\n    }, {\n      label: \"Normals\",\n      value: 2\n    }, {\n      label: \"Tangents\",\n      value: 3\n    }, {\n      label: \"Bitangents\",\n      value: 4\n    }, {\n      label: \"Bump Normals\",\n      value: 5\n    }, //{ label: \"UV1\", value: 6 },\n    //{ label: \"UV2\", value: 7 },\n    {\n      label: \"ClearCoat Normals\",\n      value: 8\n    }, {\n      label: \"ClearCoat Tangents\",\n      value: 9\n    }, {\n      label: \"ClearCoat Bitangents\",\n      value: 10\n    }, {\n      label: \"Anisotropic Normals\",\n      value: 11\n    }, {\n      label: \"Anisotropic Tangents\",\n      value: 12\n    }, {\n      label: \"Anisotropic Bitangents\",\n      value: 13\n    }, // Maps\n    //{ label: \"Emissive Map\", value: 23 },\n    //{ label: \"Light Map\", value: 24 },\n    // Env\n    {\n      label: \"Env Refraction\",\n      value: 40\n    }, {\n      label: \"Env Reflection\",\n      value: 41\n    }, {\n      label: \"Env Clear Coat\",\n      value: 42\n    }, // Lighting\n    {\n      label: \"Direct Diffuse\",\n      value: 50\n    }, {\n      label: \"Direct Specular\",\n      value: 51\n    }, {\n      label: \"Direct Clear Coat\",\n      value: 52\n    }, {\n      label: \"Direct Sheen\",\n      value: 53\n    }, {\n      label: \"Env Irradiance\",\n      value: 54\n    }, // Lighting Params\n    {\n      label: \"Surface Albedo\",\n      value: 60\n    }, {\n      label: \"Reflectance 0\",\n      value: 61\n    }, {\n      label: \"Metallic\",\n      value: 62\n    }, {\n      label: \"Metallic F0\",\n      value: 71\n    }, {\n      label: \"Roughness\",\n      value: 63\n    }, {\n      label: \"AlphaG\",\n      value: 64\n    }, {\n      label: \"NdotV\",\n      value: 65\n    }, {\n      label: \"ClearCoat Color\",\n      value: 66\n    }, {\n      label: \"ClearCoat Roughness\",\n      value: 67\n    }, {\n      label: \"ClearCoat NdotV\",\n      value: 68\n    }, {\n      label: \"Transmittance\",\n      value: 69\n    }, {\n      label: \"Refraction Transmittance\",\n      value: 70\n    }, // Misc\n    {\n      label: \"SEO\",\n      value: 80\n    }, {\n      label: \"EHO\",\n      value: 81\n    }, {\n      label: \"Energy Factor\",\n      value: 82\n    }, {\n      label: \"Specular Reflectance\",\n      value: 83\n    }, {\n      label: \"Clear Coat Reflectance\",\n      value: 84\n    }, {\n      label: \"Sheen Reflectance\",\n      value: 85\n    }, {\n      label: \"Luminance Over Alpha\",\n      value: 86\n    }, {\n      label: \"Alpha\",\n      value: 87\n    }]\n  })], PBRMetallicRoughnessBlock.prototype, \"debugMode\", void 0);\n\n  __decorate([editableInPropertyPage(\"Split position\", PropertyTypeForEdition.Float, \"DEBUG\", {\n    min: -1,\n    max: 1,\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"debugLimit\", void 0);\n\n  __decorate([editableInPropertyPage(\"Output factor\", PropertyTypeForEdition.Float, \"DEBUG\", {\n    min: 0,\n    max: 5,\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"debugFactor\", void 0);\n\n  return PBRMetallicRoughnessBlock;\n}(NodeMaterialBlock);\n\nexport { PBRMetallicRoughnessBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.PBRMetallicRoughnessBlock\"] = PBRMetallicRoughnessBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/PBR/pbrMetallicRoughnessBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { MaterialHelper } from '../../../materialHelper';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';\r\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\r\nimport { InputBlock } from '../Input/inputBlock';\r\nimport { Light } from '../../../../Lights/light';\r\nimport { Nullable } from '../../../../types';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\nimport { AbstractMesh } from '../../../../Meshes/abstractMesh';\r\nimport { Effect } from '../../../effect';\r\nimport { Mesh } from '../../../../Meshes/mesh';\r\nimport { PBRBaseMaterial } from '../../../PBR/pbrBaseMaterial';\r\nimport { Scene } from '../../../../scene';\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport { SheenBlock } from './sheenBlock';\r\nimport { BaseTexture } from '../../../Textures/baseTexture';\r\nimport { BRDFTextureTools } from '../../../../Misc/brdfTextureTools';\r\nimport { MaterialFlags } from '../../../materialFlags';\r\nimport { AnisotropyBlock } from './anisotropyBlock';\r\nimport { ReflectionBlock } from './reflectionBlock';\r\nimport { ClearCoatBlock } from './clearCoatBlock';\r\nimport { SubSurfaceBlock } from './subSurfaceBlock';\r\nimport { RefractionBlock } from './refractionBlock';\r\nimport { PerturbNormalBlock } from '../Fragment/perturbNormalBlock';\r\n\r\nimport { Color3, TmpColors } from '../../../../Maths/math.color';\r\n\r\nconst mapOutputToVariable: { [name: string] : [string, string] } = {\r\n    \"ambientClr\":   [\"finalAmbient\", \"\"],\r\n    \"diffuseDir\":   [\"finalDiffuse\", \"\"],\r\n    \"specularDir\":  [\"finalSpecularScaled\",                         \"!defined(UNLIT) && defined(SPECULARTERM)\"],\r\n    \"clearcoatDir\": [\"finalClearCoatScaled\",                        \"!defined(UNLIT) && defined(CLEARCOAT)\"],\r\n    \"sheenDir\":     [\"finalSheenScaled\",                            \"!defined(UNLIT) && defined(SHEEN)\"],\r\n    \"diffuseInd\":   [\"finalIrradiance\",                             \"!defined(UNLIT) && defined(REFLECTION)\"],\r\n    \"specularInd\":  [\"finalRadianceScaled\",                         \"!defined(UNLIT) && defined(REFLECTION)\"],\r\n    \"clearcoatInd\": [\"clearcoatOut.finalClearCoatRadianceScaled\",   \"!defined(UNLIT) && defined(REFLECTION) && defined(CLEARCOAT)\"],\r\n    \"sheenInd\":     [\"sheenOut.finalSheenRadianceScaled\",           \"!defined(UNLIT) && defined(REFLECTION) && defined(SHEEN) && defined(ENVIRONMENTBRDF)\"],\r\n    \"refraction\":   [\"subSurfaceOut.finalRefraction\",               \"!defined(UNLIT) && defined(SS_REFRACTION)\"],\r\n    \"lighting\":     [\"finalColor.rgb\", \"\"],\r\n    \"shadow\":       [\"shadow\", \"\"],\r\n    \"alpha\":        [\"alpha\", \"\"],\r\n};\r\n\r\n/**\r\n * Block used to implement the PBR metallic/roughness model\r\n */\r\nexport class PBRMetallicRoughnessBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the light associated with this block\r\n     */\r\n    public light: Nullable<Light>;\r\n\r\n    private _lightId: number;\r\n    private _scene: Scene;\r\n    private _environmentBRDFTexture: Nullable<BaseTexture> = null;\r\n    private _environmentBrdfSamplerName: string;\r\n    private _vNormalWName: string;\r\n    private _invertNormalName: string;\r\n    private _metallicReflectanceColor: Color3 = Color3.White();\r\n    private _metallicF0Factor = 1;\r\n    private _vMetallicReflectanceFactorsName: string;\r\n\r\n    /**\r\n     * Create a new ReflectionBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.VertexAndFragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false);\r\n        this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"perturbedNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"baseColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"metallic\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"ambientOcc\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"opacity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"ambientColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"reflection\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"reflection\", this, NodeMaterialConnectionPointDirection.Input, ReflectionBlock, \"ReflectionBlock\"));\r\n        this.registerInput(\"clearcoat\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"clearcoat\", this, NodeMaterialConnectionPointDirection.Input, ClearCoatBlock, \"ClearCoatBlock\"));\r\n        this.registerInput(\"sheen\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"sheen\", this, NodeMaterialConnectionPointDirection.Input, SheenBlock, \"SheenBlock\"));\r\n        this.registerInput(\"subsurface\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"subsurface\", this, NodeMaterialConnectionPointDirection.Input, SubSurfaceBlock, \"SubSurfaceBlock\"));\r\n        this.registerInput(\"anisotropy\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"anisotropy\", this, NodeMaterialConnectionPointDirection.Input, AnisotropyBlock, \"AnisotropyBlock\"));\r\n\r\n        this.registerOutput(\"ambientClr\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"diffuseDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"specularDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"clearcoatDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"sheenDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"diffuseInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"specularInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"clearcoatInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"sheenInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"lighting\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"shadow\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"alpha\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Intensity of the direct lights e.g. the four lights available in your scene.\r\n     * This impacts both the direct diffuse and specular highlights.\r\n     */\r\n    @editableInPropertyPage(\"Direct lights\", PropertyTypeForEdition.Float, \"INTENSITY\", { min: 0, max: 1, \"notifiers\": { \"update\": true }})\r\n    public directIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the environment e.g. how much the environment will light the object\r\n     * either through harmonics for rough material or through the refelction for shiny ones.\r\n     */\r\n    @editableInPropertyPage(\"Environment lights\", PropertyTypeForEdition.Float, \"INTENSITY\", { min: 0, max: 1, \"notifiers\": { \"update\": true }})\r\n    public environmentIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This is a special control allowing the reduction of the specular highlights coming from the\r\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\r\n     */\r\n    @editableInPropertyPage(\"Specular highlights\", PropertyTypeForEdition.Float, \"INTENSITY\", { min: 0, max: 1, \"notifiers\": { \"update\": true }})\r\n    public specularIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Defines the  falloff type used in this material.\r\n     * It by default is Physical.\r\n     */\r\n    @editableInPropertyPage(\"Light falloff\", PropertyTypeForEdition.List, \"LIGHTING & COLORS\", { \"notifiers\": { \"update\": true }, \"options\": [\r\n        { label: \"Physical\", value: PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL },\r\n        { label: \"GLTF\", value: PBRBaseMaterial.LIGHTFALLOFF_GLTF },\r\n        { label: \"Standard\", value: PBRBaseMaterial.LIGHTFALLOFF_STANDARD },\r\n    ]})\r\n    public lightFalloff = 0;\r\n\r\n    /**\r\n     * Specifies that alpha test should be used\r\n     */\r\n    @editableInPropertyPage(\"Alpha Testing\", PropertyTypeForEdition.Boolean, \"OPACITY\")\r\n    public useAlphaTest: boolean = false;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @editableInPropertyPage(\"Alpha CutOff\", PropertyTypeForEdition.Float, \"OPACITY\", { min: 0, max: 1, \"notifiers\": { \"update\": true }})\r\n    public alphaTestCutoff: number = 0.5;\r\n\r\n    /**\r\n     * Specifies that alpha blending should be used\r\n     */\r\n    @editableInPropertyPage(\"Alpha blending\", PropertyTypeForEdition.Boolean, \"OPACITY\")\r\n    public useAlphaBlending: boolean = false;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.\r\n     */\r\n    @editableInPropertyPage(\"Radiance over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", { \"notifiers\": { \"update\": true }})\r\n    public useRadianceOverAlpha: boolean = true;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When sun reflects on it you can not see what is behind.\r\n     */\r\n    @editableInPropertyPage(\"Specular over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", { \"notifiers\": { \"update\": true }})\r\n    public useSpecularOverAlpha: boolean = true;\r\n\r\n    /**\r\n     * Enables specular anti aliasing in the PBR shader.\r\n     * It will both interacts on the Geometry for analytical and IBL lighting.\r\n     * It also prefilter the roughness map based on the bump values.\r\n     */\r\n    @editableInPropertyPage(\"Specular anti-aliasing\", PropertyTypeForEdition.Boolean, \"RENDERING\", { \"notifiers\": { \"update\": true }})\r\n    public enableSpecularAntiAliasing: boolean = false;\r\n\r\n    /**\r\n     * Enables realtime filtering on the texture.\r\n     */\r\n    @editableInPropertyPage(\"Realtime filtering\", PropertyTypeForEdition.Boolean, \"RENDERING\", { \"notifiers\": { \"update\": true }})\r\n    public realTimeFiltering: boolean = false;\r\n\r\n    /**\r\n     * Quality switch for realtime filtering\r\n     */\r\n    @editableInPropertyPage(\"Realtime filtering quality\", PropertyTypeForEdition.List, \"RENDERING\", { \"notifiers\": { \"update\": true }, \"options\": [\r\n        { label: \"Low\", value: 8 },\r\n        { label: \"Medium\", value: 16 },\r\n        { label: \"High\", value: 64 },\r\n    ]})\r\n    public realTimeFilteringQuality = 8;\r\n\r\n    /**\r\n     * Defines if the material uses energy conservation.\r\n     */\r\n    @editableInPropertyPage(\"Energy Conservation\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { \"notifiers\": { \"update\": true }})\r\n    public useEnergyConservation: boolean = true;\r\n\r\n    /**\r\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\r\n     * too much the area relying on ambient texture to define their ambient occlusion.\r\n     */\r\n    @editableInPropertyPage(\"Radiance occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { \"notifiers\": { \"update\": true }})\r\n    public useRadianceOcclusion: boolean = true;\r\n\r\n    /**\r\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\r\n     * makes the reflect vector face the model (under horizon).\r\n     */\r\n    @editableInPropertyPage(\"Horizon occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { \"notifiers\": { \"update\": true }})\r\n    public useHorizonOcclusion: boolean = true;\r\n\r\n    /**\r\n     * If set to true, no lighting calculations will be applied.\r\n     */\r\n    @editableInPropertyPage(\"Unlit\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { \"notifiers\": { \"update\": true }})\r\n    public unlit: boolean = false;\r\n\r\n    /**\r\n     * Force normal to face away from face.\r\n     */\r\n    @editableInPropertyPage(\"Force normal forward\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { \"notifiers\": { \"update\": true }})\r\n    public forceNormalForward: boolean = false;\r\n\r\n    /**\r\n     * Defines the material debug mode.\r\n     * It helps seeing only some components of the material while troubleshooting.\r\n     */\r\n    @editableInPropertyPage(\"Debug mode\", PropertyTypeForEdition.List, \"DEBUG\", { \"notifiers\": { \"update\": true }, \"options\": [\r\n        { label: \"None\", value: 0 },\r\n        // Geometry\r\n        { label: \"Normalized position\", value: 1 },\r\n        { label: \"Normals\", value: 2 },\r\n        { label: \"Tangents\", value: 3 },\r\n        { label: \"Bitangents\", value: 4 },\r\n        { label: \"Bump Normals\", value: 5 },\r\n        //{ label: \"UV1\", value: 6 },\r\n        //{ label: \"UV2\", value: 7 },\r\n        { label: \"ClearCoat Normals\", value: 8 },\r\n        { label: \"ClearCoat Tangents\", value: 9 },\r\n        { label: \"ClearCoat Bitangents\", value: 10 },\r\n        { label: \"Anisotropic Normals\", value: 11 },\r\n        { label: \"Anisotropic Tangents\", value: 12 },\r\n        { label: \"Anisotropic Bitangents\", value: 13 },\r\n        // Maps\r\n        //{ label: \"Emissive Map\", value: 23 },\r\n        //{ label: \"Light Map\", value: 24 },\r\n        // Env\r\n        { label: \"Env Refraction\", value: 40 },\r\n        { label: \"Env Reflection\", value: 41 },\r\n        { label: \"Env Clear Coat\", value: 42 },\r\n        // Lighting\r\n        { label: \"Direct Diffuse\", value: 50 },\r\n        { label: \"Direct Specular\", value: 51 },\r\n        { label: \"Direct Clear Coat\", value: 52 },\r\n        { label: \"Direct Sheen\", value: 53 },\r\n        { label: \"Env Irradiance\", value: 54 },\r\n        // Lighting Params\r\n        { label: \"Surface Albedo\", value: 60 },\r\n        { label: \"Reflectance 0\", value: 61 },\r\n        { label: \"Metallic\", value: 62 },\r\n        { label: \"Metallic F0\", value: 71 },\r\n        { label: \"Roughness\", value: 63 },\r\n        { label: \"AlphaG\", value: 64 },\r\n        { label: \"NdotV\", value: 65 },\r\n        { label: \"ClearCoat Color\", value: 66 },\r\n        { label: \"ClearCoat Roughness\", value: 67 },\r\n        { label: \"ClearCoat NdotV\", value: 68 },\r\n        { label: \"Transmittance\", value: 69 },\r\n        { label: \"Refraction Transmittance\", value: 70 },\r\n        // Misc\r\n        { label: \"SEO\", value: 80 },\r\n        { label: \"EHO\", value: 81 },\r\n        { label: \"Energy Factor\", value: 82 },\r\n        { label: \"Specular Reflectance\", value: 83 },\r\n        { label: \"Clear Coat Reflectance\", value: 84 },\r\n        { label: \"Sheen Reflectance\", value: 85 },\r\n        { label: \"Luminance Over Alpha\", value: 86 },\r\n        { label: \"Alpha\", value: 87 },\r\n    ]})\r\n    public debugMode = 0;\r\n\r\n    /**\r\n     * Specify from where on screen the debug mode should start.\r\n     * The value goes from -1 (full screen) to 1 (not visible)\r\n     * It helps with side by side comparison against the final render\r\n     * This defaults to 0\r\n     */\r\n    @editableInPropertyPage(\"Split position\", PropertyTypeForEdition.Float, \"DEBUG\", { min: -1, max: 1, \"notifiers\": { \"update\": true }})\r\n    public debugLimit = 0;\r\n\r\n    /**\r\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\r\n     * You can use the factor to better multiply the final value.\r\n     */\r\n    @editableInPropertyPage(\"Output factor\", PropertyTypeForEdition.Float, \"DEBUG\", { min: 0, max: 5, \"notifiers\": { \"update\": true }})\r\n    public debugFactor = 1;\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"vLightingIntensity\");\r\n\r\n        state._excludeVariableName(\"geometricNormalW\");\r\n        state._excludeVariableName(\"normalW\");\r\n        state._excludeVariableName(\"faceNormal\");\r\n\r\n        state._excludeVariableName(\"albedoOpacityOut\");\r\n        state._excludeVariableName(\"surfaceAlbedo\");\r\n        state._excludeVariableName(\"alpha\");\r\n\r\n        state._excludeVariableName(\"aoOut\");\r\n\r\n        state._excludeVariableName(\"baseColor\");\r\n        state._excludeVariableName(\"reflectivityOut\");\r\n        state._excludeVariableName(\"microSurface\");\r\n        state._excludeVariableName(\"roughness\");\r\n\r\n        state._excludeVariableName(\"NdotVUnclamped\");\r\n        state._excludeVariableName(\"NdotV\");\r\n        state._excludeVariableName(\"alphaG\");\r\n        state._excludeVariableName(\"AARoughnessFactors\");\r\n        state._excludeVariableName(\"environmentBrdf\");\r\n        state._excludeVariableName(\"ambientMonochrome\");\r\n        state._excludeVariableName(\"seo\");\r\n        state._excludeVariableName(\"eho\");\r\n\r\n        state._excludeVariableName(\"environmentRadiance\");\r\n        state._excludeVariableName(\"irradianceVector\");\r\n        state._excludeVariableName(\"environmentIrradiance\");\r\n\r\n        state._excludeVariableName(\"diffuseBase\");\r\n        state._excludeVariableName(\"specularBase\");\r\n        state._excludeVariableName(\"preInfo\");\r\n        state._excludeVariableName(\"info\");\r\n        state._excludeVariableName(\"shadow\");\r\n\r\n        state._excludeVariableName(\"finalDiffuse\");\r\n        state._excludeVariableName(\"finalAmbient\");\r\n        state._excludeVariableName(\"ambientOcclusionForDirectDiffuse\");\r\n\r\n        state._excludeVariableName(\"finalColor\");\r\n\r\n        state._excludeVariableName(\"vClipSpacePosition\");\r\n        state._excludeVariableName(\"vDebugMode\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"PBRMetallicRoughnessBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the view matrix parameter\r\n     */\r\n    public get view(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the camera position input component\r\n     */\r\n    public get cameraPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the perturbed normal input component\r\n     */\r\n    public get perturbedNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the base color input component\r\n     */\r\n    public get baseColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the metallic input component\r\n     */\r\n    public get metallic(): NodeMaterialConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the roughness input component\r\n     */\r\n    public get roughness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient occlusion input component\r\n     */\r\n    public get ambientOcc(): NodeMaterialConnectionPoint {\r\n        return this._inputs[8];\r\n    }\r\n\r\n    /**\r\n     * Gets the opacity input component\r\n     */\r\n    public get opacity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[9];\r\n    }\r\n\r\n    /**\r\n     * Gets the index of refraction input component\r\n     */\r\n    public get indexOfRefraction(): NodeMaterialConnectionPoint {\r\n        return this._inputs[10];\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient color input component\r\n     */\r\n    public get ambientColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[11];\r\n    }\r\n\r\n    /**\r\n     * Gets the reflection object parameters\r\n     */\r\n    public get reflection(): NodeMaterialConnectionPoint {\r\n        return this._inputs[12];\r\n    }\r\n\r\n    /**\r\n     * Gets the clear coat object parameters\r\n     */\r\n    public get clearcoat(): NodeMaterialConnectionPoint {\r\n        return this._inputs[13];\r\n    }\r\n\r\n    /**\r\n     * Gets the sheen object parameters\r\n     */\r\n    public get sheen(): NodeMaterialConnectionPoint {\r\n        return this._inputs[14];\r\n    }\r\n\r\n    /**\r\n     * Gets the sub surface object parameters\r\n     */\r\n    public get subsurface(): NodeMaterialConnectionPoint {\r\n        return this._inputs[15];\r\n    }\r\n\r\n    /**\r\n     * Gets the anisotropy object parameters\r\n     */\r\n    public get anisotropy(): NodeMaterialConnectionPoint {\r\n        return this._inputs[16];\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient output component\r\n     */\r\n    public get ambientClr(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the diffuse output component\r\n     */\r\n    public get diffuseDir(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the specular output component\r\n     */\r\n    public get specularDir(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the clear coat output component\r\n     */\r\n    public get clearcoatDir(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the sheen output component\r\n     */\r\n    public get sheenDir(): NodeMaterialConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the indirect diffuse output component\r\n     */\r\n    public get diffuseIndirect(): NodeMaterialConnectionPoint {\r\n        return this._outputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the indirect specular output component\r\n     */\r\n    public get specularIndirect(): NodeMaterialConnectionPoint {\r\n        return this._outputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the indirect clear coat output component\r\n     */\r\n    public get clearcoatIndirect(): NodeMaterialConnectionPoint {\r\n        return this._outputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the indirect sheen output component\r\n     */\r\n    public get sheenIndirect(): NodeMaterialConnectionPoint {\r\n        return this._outputs[8];\r\n    }\r\n\r\n    /**\r\n     * Gets the refraction output component\r\n     */\r\n    public get refraction(): NodeMaterialConnectionPoint {\r\n        return this._outputs[9];\r\n    }\r\n\r\n    /**\r\n     * Gets the global lighting output component\r\n     */\r\n    public get lighting(): NodeMaterialConnectionPoint {\r\n        return this._outputs[10];\r\n    }\r\n\r\n    /**\r\n     * Gets the shadow output component\r\n     */\r\n    public get shadow(): NodeMaterialConnectionPoint {\r\n        return this._outputs[11];\r\n    }\r\n\r\n    /**\r\n     * Gets the alpha output component\r\n     */\r\n    public get alpha(): NodeMaterialConnectionPoint {\r\n        return this._outputs[12];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.cameraPosition.isConnected) {\r\n            let cameraPositionInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.CameraPosition);\r\n\r\n            if (!cameraPositionInput) {\r\n                cameraPositionInput = new InputBlock(\"cameraPosition\");\r\n                cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\r\n            }\r\n            cameraPositionInput.output.connectTo(this.cameraPosition);\r\n        }\r\n\r\n        if (!this.view.isConnected) {\r\n            let viewInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.View);\r\n\r\n            if (!viewInput) {\r\n                viewInput = new InputBlock(\"view\");\r\n                viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\r\n            }\r\n            viewInput.output.connectTo(this.view);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        // General\r\n        defines.setValue(\"PBR\", true);\r\n        defines.setValue(\"METALLICWORKFLOW\", true);\r\n        defines.setValue(\"DEBUGMODE\", this.debugMode, true);\r\n        defines.setValue(\"NORMALXYSCALE\", true);\r\n        defines.setValue(\"BUMP\", this.perturbedNormal.isConnected, true);\r\n        defines.setValue(\"LODBASEDMICROSFURACE\", this._scene.getEngine().getCaps().textureLOD);\r\n\r\n        // Albedo & Opacity\r\n        defines.setValue(\"ALBEDO\", false, true);\r\n        defines.setValue(\"OPACITY\", this.opacity.isConnected, true);\r\n\r\n        // Ambient occlusion\r\n        defines.setValue(\"AMBIENT\", true, true);\r\n        defines.setValue(\"AMBIENTINGRAYSCALE\", false, true);\r\n\r\n        // Reflectivity\r\n        defines.setValue(\"REFLECTIVITY\", false, true);\r\n        defines.setValue(\"AOSTOREINMETALMAPRED\", false, true);\r\n        defines.setValue(\"METALLNESSSTOREINMETALMAPBLUE\", false, true);\r\n        defines.setValue(\"ROUGHNESSSTOREINMETALMAPALPHA\", false, true);\r\n        defines.setValue(\"ROUGHNESSSTOREINMETALMAPGREEN\",  false, true);\r\n\r\n        // Lighting & colors\r\n        if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\r\n            defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\r\n            defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\r\n        } else if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\r\n            defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\r\n            defines.setValue(\"USEGLTFLIGHTFALLOFF\", true);\r\n        } else {\r\n            defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", true);\r\n            defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\r\n        }\r\n\r\n        // Transparency\r\n        const alphaTestCutOffString = this.alphaTestCutoff.toString();\r\n\r\n        defines.setValue(\"ALPHABLEND\", this.useAlphaBlending, true);\r\n        defines.setValue(\"ALPHAFROMALBEDO\", false, true);\r\n        defines.setValue(\"ALPHATEST\", this.useAlphaTest, true);\r\n        defines.setValue(\"ALPHATESTVALUE\", alphaTestCutOffString.indexOf('.') < 0 ? alphaTestCutOffString + \".\" : alphaTestCutOffString, true);\r\n        defines.setValue(\"OPACITYRGB\", false, true);\r\n\r\n        // Rendering\r\n        defines.setValue(\"RADIANCEOVERALPHA\", this.useRadianceOverAlpha, true);\r\n        defines.setValue(\"SPECULAROVERALPHA\", this.useSpecularOverAlpha, true);\r\n        defines.setValue(\"SPECULARAA\", this._scene.getEngine().getCaps().standardDerivatives && this.enableSpecularAntiAliasing, true);\r\n        defines.setValue(\"REALTIME_FILTERING\", this.realTimeFiltering, true);\r\n\r\n        if (this._scene.getEngine().webGLVersion > 1) {\r\n            defines.setValue(\"NUM_SAMPLES\", this.realTimeFilteringQuality + \"u\", true);\r\n        } else {\r\n            defines.setValue(\"NUM_SAMPLES\", \"\" + this.realTimeFilteringQuality, true);\r\n        }\r\n\r\n        // Advanced\r\n        defines.setValue(\"BRDF_V_HEIGHT_CORRELATED\", true);\r\n        defines.setValue(\"MS_BRDF_ENERGY_CONSERVATION\", this.useEnergyConservation, true);\r\n        defines.setValue(\"RADIANCEOCCLUSION\", this.useRadianceOcclusion, true);\r\n        defines.setValue(\"HORIZONOCCLUSION\", this.useHorizonOcclusion, true);\r\n        defines.setValue(\"UNLIT\", this.unlit, true);\r\n        defines.setValue(\"FORCENORMALFORWARD\", this.forceNormalForward, true);\r\n\r\n        if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n            defines.setValue(\"ENVIRONMENTBRDF\", true);\r\n            defines.setValue(\"ENVIRONMENTBRDF_RGBD\", this._environmentBRDFTexture.isRGBD, true);\r\n        } else {\r\n            defines.setValue(\"ENVIRONMENTBRDF\" , false);\r\n            defines.setValue(\"ENVIRONMENTBRDF_RGBD\", false);\r\n        }\r\n\r\n        if (!defines._areLightsDirty) {\r\n            return;\r\n        }\r\n\r\n        const scene = mesh.getScene();\r\n\r\n        if (!this.light) {\r\n            // Lights\r\n            MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, nodeMaterial.maxSimultaneousLights);\r\n            defines._needNormals = true;\r\n\r\n            // Multiview\r\n            MaterialHelper.PrepareDefinesForMultiview(scene, defines);\r\n        } else {\r\n            let state = {\r\n                needNormals: false,\r\n                needRebuild: false,\r\n                lightmapMode: false,\r\n                shadowEnabled: false,\r\n                specularEnabled: false\r\n            };\r\n\r\n            MaterialHelper.PrepareDefinesForLight(scene, mesh, this.light, this._lightId, defines, true, state);\r\n\r\n            if (state.needRebuild) {\r\n                defines.rebuild();\r\n            }\r\n        }\r\n    }\r\n\r\n    public updateUniformsAndSamples(state: NodeMaterialBuildState, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, uniformBuffers: string[]) {\r\n        for (var lightIndex = 0; lightIndex < nodeMaterial.maxSimultaneousLights; lightIndex++) {\r\n            if (!defines[\"LIGHT\" + lightIndex]) {\r\n                break;\r\n            }\r\n            const onlyUpdateBuffersList = state.uniforms.indexOf(\"vLightData\" + lightIndex) >= 0;\r\n            MaterialHelper.PrepareUniformsAndSamplersForLight(lightIndex, state.uniforms, state.samplers, defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex], uniformBuffers, onlyUpdateBuffersList);\r\n        }\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const scene = mesh.getScene();\r\n\r\n        if (!this.light) {\r\n            MaterialHelper.BindLights(scene, mesh, effect, true, nodeMaterial.maxSimultaneousLights);\r\n        } else {\r\n            MaterialHelper.BindLight(this.light, this._lightId, scene, effect, true);\r\n        }\r\n\r\n        effect.setTexture(this._environmentBrdfSamplerName, this._environmentBRDFTexture);\r\n\r\n        effect.setFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\r\n\r\n        const ambientScene = this._scene.ambientColor;\r\n\r\n        if (ambientScene) {\r\n            effect.setColor3(\"ambientFromScene\", ambientScene);\r\n        }\r\n\r\n        const invertNormal = (scene.useRightHandedSystem === (scene._mirroredCameraPosition != null));\r\n\r\n        effect.setFloat(this._invertNormalName, invertNormal ? -1 : 1);\r\n\r\n        effect.setFloat4(\"vLightingIntensity\", this.directIntensity, 1, this.environmentIntensity * this._scene.environmentIntensity, this.specularIntensity);\r\n\r\n        // reflectivity bindings\r\n        const outside_ior = 1; // consider air as clear coat and other layers would remap in the shader.\r\n        const ior = this.indexOfRefraction.connectInputBlock?.value ?? 1.5;\r\n\r\n        // We are here deriving our default reflectance from a common value for none metallic surface.\r\n        // Based of the schlick fresnel approximation model\r\n        // for dielectrics.\r\n        const f0 = Math.pow((ior - outside_ior) / (ior + outside_ior), 2);\r\n\r\n        // Tweak the default F0 and F90 based on our given setup\r\n        this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\r\n        const metallicF90 = this._metallicF0Factor;\r\n\r\n        effect.setColor4(this._vMetallicReflectanceFactorsName, TmpColors.Color3[0], metallicF90);\r\n    }\r\n\r\n    private _injectVertexCode(state: NodeMaterialBuildState) {\r\n        let worldPos = this.worldPosition;\r\n        let comments = `//${this.name}`;\r\n\r\n        // Declaration\r\n        if (!this.light) { // Emit for all lights\r\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\"\r\n            });\r\n            this._lightId = 0;\r\n\r\n            state.sharedData.dynamicUniformBlocks.push(this);\r\n        } else {\r\n            this._lightId = (state.counters[\"lightCounter\"] !== undefined ? state.counters[\"lightCounter\"] : -1) + 1;\r\n            state.counters[\"lightCounter\"] = this._lightId;\r\n\r\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\r\n                replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }]\r\n            }, this._lightId.toString());\r\n        }\r\n\r\n        // Inject code in vertex\r\n        let worldPosVaryingName = \"v_\" + worldPos.associatedVariableName;\r\n        if (state._emitVaryingFromString(worldPosVaryingName, \"vec4\")) {\r\n            state.compilationString += `${worldPosVaryingName} = ${worldPos.associatedVariableName};\\r\\n`;\r\n        }\r\n\r\n        const reflectionBlock = this.reflection.isConnected ? this.reflection.connectedPoint?.ownerBlock as ReflectionBlock : null;\r\n\r\n        if (reflectionBlock) {\r\n            reflectionBlock.viewConnectionPoint = this.view;\r\n        }\r\n\r\n        state.compilationString += reflectionBlock?.handleVertexSide(state) ?? \"\";\r\n\r\n        state._emitUniformFromString(\"vDebugMode\", \"vec2\", \"defined(IGNORE) || DEBUGMODE > 0\");\r\n        state._emitUniformFromString(\"ambientFromScene\", \"vec3\");\r\n\r\n        if (state._emitVaryingFromString(\"vClipSpacePosition\", \"vec4\", \"defined(IGNORE) || DEBUGMODE > 0\")) {\r\n            state._injectAtEnd += `#if DEBUGMODE > 0\\r\\n`;\r\n            state._injectAtEnd += `vClipSpacePosition = gl_Position;\\r\\n`;\r\n            state._injectAtEnd += `#endif\\r\\n`;\r\n        }\r\n\r\n        if (this.light) {\r\n            state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\r\n                replaceStrings: [\r\n                    { search: /{X}/g, replace: this._lightId.toString() },\r\n                    { search: /worldPos/g, replace: worldPos.associatedVariableName }\r\n                ]\r\n            });\r\n        } else {\r\n            state.compilationString += `vec4 worldPos = ${worldPos.associatedVariableName};\\r\\n`;\r\n            if (this.view.isConnected) {\r\n                state.compilationString += `mat4 view = ${this.view.associatedVariableName};\\r\\n`;\r\n            }\r\n            state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\"\r\n            });\r\n        }\r\n    }\r\n\r\n    private _getAlbedoOpacityCode(): string {\r\n        let code = `albedoOpacityOutParams albedoOpacityOut;\\r\\n`;\r\n\r\n        const albedoColor = this.baseColor.isConnected ? this.baseColor.associatedVariableName : \"vec3(1.)\";\r\n        const opacity = this.opacity.isConnected ? this.opacity.associatedVariableName : \"1.\";\r\n\r\n        code += `albedoOpacityBlock(\r\n                vec4(${albedoColor}, 1.),\r\n            #ifdef ALBEDO\r\n                vec4(1.),\r\n                vec2(1., 1.),\r\n            #endif\r\n            #ifdef OPACITY\r\n                vec4(${opacity}),\r\n                vec2(1., 1.),\r\n            #endif\r\n                albedoOpacityOut\r\n            );\r\n\r\n            vec3 surfaceAlbedo = albedoOpacityOut.surfaceAlbedo;\r\n            float alpha = albedoOpacityOut.alpha;\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    private _getAmbientOcclusionCode(): string {\r\n        let code = `ambientOcclusionOutParams aoOut;\\r\\n`;\r\n\r\n        const ao = this.ambientOcc.isConnected ? this.ambientOcc.associatedVariableName : \"1.\";\r\n\r\n        code += `ambientOcclusionBlock(\r\n            #ifdef AMBIENT\r\n                vec3(${ao}),\r\n                vec4(0., 1.0, 1.0, 0.),\r\n            #endif\r\n                aoOut\r\n            );\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    private _getReflectivityCode(state: NodeMaterialBuildState): string {\r\n        let code = `reflectivityOutParams reflectivityOut;\\r\\n`;\r\n\r\n        const aoIntensity = \"1.\";\r\n\r\n        this._vMetallicReflectanceFactorsName = state._getFreeVariableName(\"vMetallicReflectanceFactors\");\r\n        state._emitUniformFromString(this._vMetallicReflectanceFactorsName, \"vec4\");\r\n\r\n        code += `vec3 baseColor = surfaceAlbedo;\r\n\r\n            reflectivityBlock(\r\n                vec4(${this.metallic.associatedVariableName}, ${this.roughness.associatedVariableName}, 0., 0.),\r\n            #ifdef METALLICWORKFLOW\r\n                surfaceAlbedo,\r\n                ${this._vMetallicReflectanceFactorsName},\r\n            #endif\r\n            #ifdef REFLECTIVITY\r\n                vec3(0., 0., ${aoIntensity}),\r\n                vec4(1.),\r\n            #endif\r\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY)  && defined(AOSTOREINMETALMAPRED)\r\n                aoOut.ambientOcclusionColor,\r\n            #endif\r\n            #ifdef MICROSURFACEMAP\r\n                microSurfaceTexel, <== not handled!\r\n            #endif\r\n                reflectivityOut\r\n            );\r\n\r\n            float microSurface = reflectivityOut.microSurface;\r\n            float roughness = reflectivityOut.roughness;\r\n\r\n            #ifdef METALLICWORKFLOW\r\n                surfaceAlbedo = reflectivityOut.surfaceAlbedo;\r\n            #endif\r\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY) && defined(AOSTOREINMETALMAPRED)\r\n                aoOut.ambientOcclusionColor = reflectivityOut.ambientOcclusionColor;\r\n            #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        this._scene = state.sharedData.scene;\r\n\r\n        if (!this._environmentBRDFTexture) {\r\n            this._environmentBRDFTexture = BRDFTextureTools.GetEnvironmentBRDFTexture(this._scene);\r\n        }\r\n\r\n        const reflectionBlock = this.reflection.isConnected ? this.reflection.connectedPoint?.ownerBlock as ReflectionBlock : null;\r\n\r\n        if (reflectionBlock) {\r\n            // Need those variables to be setup when calling _injectVertexCode\r\n            reflectionBlock.worldPositionConnectionPoint = this.worldPosition;\r\n            reflectionBlock.cameraPositionConnectionPoint = this.cameraPosition;\r\n            reflectionBlock.worldNormalConnectionPoint = this.worldNormal;\r\n        }\r\n\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            // Vertex\r\n            this._injectVertexCode(state);\r\n\r\n            return this;\r\n        }\r\n\r\n        // Fragment\r\n        state.sharedData.bindableBlocks.push(this);\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        let comments = `//${this.name}`;\r\n        let worldPosVarName = \"v_\" + this.worldPosition.associatedVariableName;\r\n        let normalShading = this.perturbedNormal;\r\n\r\n        this._environmentBrdfSamplerName = state._getFreeVariableName(\"environmentBrdfSampler\");\r\n\r\n        state._emit2DSampler(this._environmentBrdfSamplerName);\r\n\r\n        state.sharedData.hints.needAlphaBlending = state.sharedData.hints.needAlphaBlending || this.useAlphaBlending;\r\n        state.sharedData.hints.needAlphaTesting = state.sharedData.hints.needAlphaTesting || this.useAlphaTest;\r\n\r\n        state._emitExtension(\"lod\", \"#extension GL_EXT_shader_texture_lod : enable\", \"defined(LODBASEDMICROSFURACE)\");\r\n        state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\r\n\r\n        //\r\n        // Includes\r\n        //\r\n        if (!this.light) { // Emit for all lights\r\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\"\r\n            });\r\n        } else {\r\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\r\n                replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }]\r\n            }, this._lightId.toString());\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n        state._emitFunctionFromInclude(\"importanceSampling\", comments);\r\n        state._emitFunctionFromInclude(\"pbrHelperFunctions\", comments);\r\n        state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\r\n\r\n        state._emitFunctionFromInclude(\"shadowsFragmentFunctions\", comments, {\r\n            replaceStrings: [\r\n                { search: /vPositionW/g, replace: worldPosVarName + \".xyz\" }\r\n            ]\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"pbrDirectLightingSetupFunctions\", comments, {\r\n            replaceStrings: [\r\n                { search: /vPositionW/g, replace: worldPosVarName + \".xyz\" }\r\n            ]\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"pbrDirectLightingFalloffFunctions\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBRDFFunctions\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" }\r\n            ]\r\n        });\r\n        state._emitFunctionFromInclude(\"hdrFilteringFunctions\", comments);\r\n\r\n        state._emitFunctionFromInclude(\"pbrDirectLightingFunctions\", comments, {\r\n            replaceStrings: [\r\n                { search: /vPositionW/g, replace: worldPosVarName + \".xyz\" }\r\n            ]\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"pbrIBLFunctions\", comments);\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockAlbedoOpacity\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBlockReflectivity\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBlockAmbientOcclusion\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBlockAlphaFresnel\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBlockAnisotropic\", comments);\r\n\r\n        //\r\n        // code\r\n        //\r\n\r\n        state._emitUniformFromString(\"vLightingIntensity\", \"vec4\");\r\n\r\n        // _____________________________ Geometry Information ____________________________\r\n        this._vNormalWName = state._getFreeVariableName(\"vNormalW\");\r\n\r\n        state.compilationString += `vec4 ${this._vNormalWName} = normalize(${this.worldNormal.associatedVariableName});\\r\\n`;\r\n\r\n        if (state._registerTempVariable(\"viewDirectionW\")) {\r\n            state.compilationString += `vec3 viewDirectionW = normalize(${this.cameraPosition.associatedVariableName} - ${worldPosVarName}.xyz);\\r\\n`;\r\n        }\r\n\r\n        state.compilationString += `vec3 geometricNormalW = ${this._vNormalWName}.xyz;\\r\\n`;\r\n\r\n        state.compilationString += `vec3 normalW = ${normalShading.isConnected ? \"normalize(\" + normalShading.associatedVariableName + \".xyz)\" : \"geometricNormalW\"};\\r\\n`;\r\n\r\n        this._invertNormalName = state._getFreeVariableName(\"invertNormal\");\r\n\r\n        state._emitUniformFromString(this._invertNormalName, \"float\");\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockNormalFinal\", comments, {\r\n            replaceStrings: [\r\n                { search: /vPositionW/g, replace: worldPosVarName + \".xyz\" },\r\n                { search: /vEyePosition.w/g, replace: this._invertNormalName },\r\n            ]\r\n        });\r\n\r\n        // _____________________________ Albedo & Opacity ______________________________\r\n        state.compilationString += this._getAlbedoOpacityCode();\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"depthPrePass\", comments);\r\n\r\n        // _____________________________ AO  _______________________________\r\n        state.compilationString += this._getAmbientOcclusionCode();\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockLightmapInit\", comments);\r\n\r\n        // _____________________________ UNLIT  _______________________________\r\n        state.compilationString += `#ifdef UNLIT\r\n                vec3 diffuseBase = vec3(1., 1., 1.);\r\n            #else\\r\\n`;\r\n\r\n        // _____________________________ Reflectivity _______________________________\r\n        state.compilationString += this._getReflectivityCode(state);\r\n\r\n        // _____________________________ Geometry info _________________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockGeometryInfo\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n            ]\r\n        });\r\n\r\n        // _____________________________ Anisotropy _______________________________________\r\n        const anisotropyBlock = this.anisotropy.isConnected ? this.anisotropy.connectedPoint?.ownerBlock as AnisotropyBlock : null;\r\n\r\n        if (anisotropyBlock) {\r\n            anisotropyBlock.worldPositionConnectionPoint = this.worldPosition;\r\n            anisotropyBlock.worldNormalConnectionPoint = this.worldNormal;\r\n\r\n            state.compilationString += anisotropyBlock.getCode(state, !this.perturbedNormal.isConnected);\r\n        }\r\n\r\n        // _____________________________ Reflection _______________________________________\r\n        if (reflectionBlock && reflectionBlock.hasTexture) {\r\n            state.compilationString += reflectionBlock.getCode(state, anisotropyBlock ? \"anisotropicOut.anisotropicNormal\" : \"normalW\");\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockReflection\", comments, {\r\n            replaceStrings: [\r\n                { search: /computeReflectionCoords/g, replace: \"computeReflectionCoordsPBR\" },\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n                { search: /REFLECTIONMAP_OPPOSITEZ/g, replace: reflectionBlock?._defineOppositeZ ?? \"REFLECTIONMAP_OPPOSITEZ\" },\r\n                { search: /REFLECTIONMAP_PROJECTION/g, replace: reflectionBlock?._defineProjectionName ?? \"REFLECTIONMAP_PROJECTION\" },\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /LODINREFLECTIONALPHA/g, replace: reflectionBlock?._defineLODReflectionAlpha ?? \"LODINREFLECTIONALPHA\" },\r\n                { search: /LINEARSPECULARREFLECTION/g, replace: reflectionBlock?._defineLinearSpecularReflection ?? \"LINEARSPECULARREFLECTION\" },\r\n                { search: /vReflectionFilteringInfo/g, replace: reflectionBlock?._vReflectionFilteringInfoName ?? \"vReflectionFilteringInfo\" },\r\n            ]\r\n        });\r\n\r\n        // ___________________ Compute Reflectance aka R0 F0 info _________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance0\", comments, {\r\n            replaceStrings: [\r\n                { search: /metallicReflectanceFactors/g, replace: this._vMetallicReflectanceFactorsName },\r\n            ]\r\n        });\r\n        // ________________________________ Sheen ______________________________\r\n        const sheenBlock = this.sheen.isConnected ? this.sheen.connectedPoint?.ownerBlock as SheenBlock : null;\r\n\r\n        if (sheenBlock) {\r\n            state.compilationString += sheenBlock.getCode(reflectionBlock);\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockSheen\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /LODINREFLECTIONALPHA/g, replace: reflectionBlock?._defineLODReflectionAlpha ?? \"LODINREFLECTIONALPHA\" },\r\n                { search: /LINEARSPECULARREFLECTION/g, replace: reflectionBlock?._defineLinearSpecularReflection ?? \"LINEARSPECULARREFLECTION\" },\r\n            ]\r\n        });\r\n\r\n        // _____________________________ Clear Coat ____________________________\r\n        const clearcoatBlock = this.clearcoat.isConnected ? this.clearcoat.connectedPoint?.ownerBlock as ClearCoatBlock : null;\r\n        const generateTBNSpace = !this.perturbedNormal.isConnected && !this.anisotropy.isConnected;\r\n        const isTangentConnectedToPerturbNormal = this.perturbedNormal.isConnected && (this.perturbedNormal.connectedPoint?.ownerBlock as PerturbNormalBlock).worldTangent.isConnected;\r\n        const isTangentConnectedToAnisotropy = this.anisotropy.isConnected && (this.anisotropy.connectedPoint?.ownerBlock as AnisotropyBlock).worldTangent.isConnected;\r\n        let vTBNAvailable = isTangentConnectedToPerturbNormal || (!this.perturbedNormal.isConnected && isTangentConnectedToAnisotropy);\r\n\r\n        state.compilationString += ClearCoatBlock.GetCode(state, clearcoatBlock, reflectionBlock, worldPosVarName, generateTBNSpace, vTBNAvailable, this.worldNormal.associatedVariableName);\r\n\r\n        if (generateTBNSpace) {\r\n            vTBNAvailable = clearcoatBlock?.worldTangent.isConnected ?? false;\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockClearcoat\", comments, {\r\n            replaceStrings: [\r\n                { search: /computeReflectionCoords/g, replace: \"computeReflectionCoordsPBR\" },\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n                { search: /REFLECTIONMAP_OPPOSITEZ/g, replace: reflectionBlock?._defineOppositeZ ?? \"REFLECTIONMAP_OPPOSITEZ\" },\r\n                { search: /REFLECTIONMAP_PROJECTION/g, replace: reflectionBlock?._defineProjectionName ?? \"REFLECTIONMAP_PROJECTION\" },\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /LODINREFLECTIONALPHA/g, replace: reflectionBlock?._defineLODReflectionAlpha ?? \"LODINREFLECTIONALPHA\" },\r\n                { search: /LINEARSPECULARREFLECTION/g, replace: reflectionBlock?._defineLinearSpecularReflection ?? \"LINEARSPECULARREFLECTION\" },\r\n                { search: /defined\\(TANGENT\\)/g, replace: vTBNAvailable ? \"defined(TANGENT)\" : \"defined(IGNORE)\" },\r\n            ]\r\n        });\r\n\r\n        // _________________________ Specular Environment Reflectance __________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n            ]\r\n        });\r\n\r\n        // ___________________________________ SubSurface ______________________________________\r\n        const subsurfaceBlock = this.subsurface.isConnected ? this.subsurface.connectedPoint?.ownerBlock as SubSurfaceBlock : null;\r\n        const refractionBlock = this.subsurface.isConnected ? (this.subsurface.connectedPoint?.ownerBlock as SubSurfaceBlock).refraction.connectedPoint?.ownerBlock as RefractionBlock : null;\r\n\r\n        if (refractionBlock) {\r\n            refractionBlock.viewConnectionPoint = this.view;\r\n            refractionBlock.indexOfRefractionConnectionPoint = this.indexOfRefraction;\r\n        }\r\n\r\n        state.compilationString += SubSurfaceBlock.GetCode(state, subsurfaceBlock, reflectionBlock, worldPosVarName);\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockSubSurface\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n                { search: /REFLECTIONMAP_OPPOSITEZ/g, replace: reflectionBlock?._defineOppositeZ ?? \"REFLECTIONMAP_OPPOSITEZ\" },\r\n                { search: /REFLECTIONMAP_PROJECTION/g, replace: reflectionBlock?._defineProjectionName ?? \"REFLECTIONMAP_PROJECTION\" },\r\n                { search: /SS_REFRACTIONMAP_3D/g, replace: refractionBlock?._define3DName ?? \"SS_REFRACTIONMAP_3D\" },\r\n                { search: /SS_LODINREFRACTIONALPHA/g, replace: refractionBlock?._defineLODRefractionAlpha ?? \"SS_LODINREFRACTIONALPHA\" },\r\n                { search: /SS_LINEARSPECULARREFRACTION/g, replace: refractionBlock?._defineLinearSpecularRefraction ?? \"SS_LINEARSPECULARREFRACTION\" },\r\n                { search: /SS_REFRACTIONMAP_OPPOSITEZ/g, replace: refractionBlock?._defineOppositeZ ?? \"SS_REFRACTIONMAP_OPPOSITEZ\" },\r\n            ]\r\n        });\r\n\r\n        // _____________________________ Direct Lighting Info __________________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockDirectLighting\", comments);\r\n\r\n        if (this.light) {\r\n            state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\r\n                replaceStrings: [\r\n                    { search: /{X}/g, replace: this._lightId.toString() }\r\n                ]\r\n            });\r\n        } else {\r\n            state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\"\r\n            });\r\n        }\r\n\r\n        // _____________________________ Compute Final Lit Components ________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalLitComponents\", comments);\r\n\r\n        // _____________________________ UNLIT (2) ________________________\r\n        state.compilationString += `#endif\\r\\n`; // UNLIT\r\n\r\n        // _____________________________ Compute Final Unlit Components ________________________\r\n        const aoColor = this.ambientColor.isConnected ? this.ambientColor.associatedVariableName : \"vec3(0., 0., 0.)\";\r\n\r\n        let aoDirectLightIntensity = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS.toString();\r\n\r\n        if (aoDirectLightIntensity.indexOf('.') === -1) {\r\n            aoDirectLightIntensity += \".\";\r\n        }\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalUnlitComponents\", comments, {\r\n            replaceStrings: [\r\n                { search: /vec3 finalEmissive[\\s\\S]*?finalEmissive\\*=vLightingIntensity\\.y;/g, replace: \"\" },\r\n                { search: /vAmbientColor/g, replace: aoColor + \" * ambientFromScene\" },\r\n                { search: /vAmbientInfos\\.w/g, replace: aoDirectLightIntensity },\r\n            ]\r\n        });\r\n\r\n        // _____________________________ Output Final Color Composition ________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalColorComposition\", comments, {\r\n            replaceStrings: [\r\n                { search: /finalEmissive/g, replace: \"vec3(0.)\" },\r\n            ]\r\n        });\r\n\r\n        // _____________________________ Apply image processing ________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockImageProcessing\", comments, {\r\n            replaceStrings: [\r\n                { search: /visibility/g, replace: \"1.\" },\r\n            ]\r\n        });\r\n\r\n        // _____________________________ Generate debug code ________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrDebug\", comments, {\r\n            replaceStrings: [\r\n                { search: /vNormalW/g, replace: this._vNormalWName },\r\n                { search: /vPositionW/g, replace: worldPosVarName },\r\n                { search: /albedoTexture\\.rgb;/g, replace: \"vec3(1.);\\r\\ngl_FragColor.rgb = toGammaSpace(gl_FragColor.rgb);\\r\\n\" },\r\n            ]\r\n        });\r\n\r\n        // _____________________________ Generate end points ________________________\r\n        for (var output of this._outputs) {\r\n            if (output.hasEndpoints) {\r\n                const remap = mapOutputToVariable[output.name];\r\n                if (remap) {\r\n                    const [varName, conditions] = remap;\r\n                    if (conditions) {\r\n                        state.compilationString += `#if ${conditions}\\r\\n`;\r\n                    }\r\n                    state.compilationString += `${this._declareOutput(output, state)} = ${varName};\\r\\n`;\r\n                    if (conditions) {\r\n                        state.compilationString += `#else\\r\\n`;\r\n                        state.compilationString += `${this._declareOutput(output, state)} = vec3(0.);\\r\\n`;\r\n                        state.compilationString += `#endif\\r\\n`;\r\n                    }\r\n                } else {\r\n                    console.error(`There's no remapping for the ${output.name} end point! No code generated`);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString: string = \"\";\r\n\r\n        codeString += `${this._codeVariableName}.lightFalloff = ${this.lightFalloff};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useAlphaTest = ${this.useAlphaTest};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.alphaTestCutoff = ${this.alphaTestCutoff};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useAlphaBlending = ${this.useAlphaBlending};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useRadianceOverAlpha = ${this.useRadianceOverAlpha};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useSpecularOverAlpha = ${this.useSpecularOverAlpha};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.enableSpecularAntiAliasing = ${this.enableSpecularAntiAliasing};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.realTimeFiltering = ${this.realTimeFiltering};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.realTimeFilteringQuality = ${this.realTimeFilteringQuality};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useEnergyConservation = ${this.useEnergyConservation};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useRadianceOcclusion = ${this.useRadianceOcclusion};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useHorizonOcclusion = ${this.useHorizonOcclusion};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.unlit = ${this.unlit};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.forceNormalForward = ${this.forceNormalForward};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.debugMode = ${this.debugMode};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.debugLimit = ${this.debugLimit};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.debugFactor = ${this.debugFactor};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        let serializationObject = super.serialize();\r\n\r\n        if (this.light) {\r\n            serializationObject.lightId = this.light.id;\r\n        }\r\n\r\n        serializationObject.lightFalloff = this.lightFalloff;\r\n        serializationObject.useAlphaTest = this.useAlphaTest;\r\n        serializationObject.alphaTestCutoff = this.alphaTestCutoff;\r\n        serializationObject.useAlphaBlending = this.useAlphaBlending;\r\n        serializationObject.useRadianceOverAlpha = this.useRadianceOverAlpha;\r\n        serializationObject.useSpecularOverAlpha = this.useSpecularOverAlpha;\r\n        serializationObject.enableSpecularAntiAliasing = this.enableSpecularAntiAliasing;\r\n        serializationObject.realTimeFiltering = this.realTimeFiltering;\r\n        serializationObject.realTimeFilteringQuality = this.realTimeFilteringQuality;\r\n        serializationObject.useEnergyConservation = this.useEnergyConservation;\r\n        serializationObject.useRadianceOcclusion = this.useRadianceOcclusion;\r\n        serializationObject.useHorizonOcclusion = this.useHorizonOcclusion;\r\n        serializationObject.unlit = this.unlit;\r\n        serializationObject.forceNormalForward = this.forceNormalForward;\r\n        serializationObject.debugMode = this.debugMode;\r\n        serializationObject.debugLimit = this.debugLimit;\r\n        serializationObject.debugFactor = this.debugFactor;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        if (serializationObject.lightId) {\r\n            this.light = scene.getLightByID(serializationObject.lightId);\r\n        }\r\n\r\n        this.lightFalloff = serializationObject.lightFalloff ?? 0;\r\n        this.useAlphaTest = serializationObject.useAlphaTest;\r\n        this.alphaTestCutoff = serializationObject.alphaTestCutoff;\r\n        this.useAlphaBlending = serializationObject.useAlphaBlending;\r\n        this.useRadianceOverAlpha = serializationObject.useRadianceOverAlpha;\r\n        this.useSpecularOverAlpha = serializationObject.useSpecularOverAlpha;\r\n        this.enableSpecularAntiAliasing = serializationObject.enableSpecularAntiAliasing;\r\n        this.realTimeFiltering = !!serializationObject.realTimeFiltering;\r\n        this.realTimeFilteringQuality = serializationObject.realTimeFilteringQuality ?? 8;\r\n        this.useEnergyConservation = serializationObject.useEnergyConservation;\r\n        this.useRadianceOcclusion = serializationObject.useRadianceOcclusion;\r\n        this.useHorizonOcclusion = serializationObject.useHorizonOcclusion;\r\n        this.unlit = serializationObject.unlit;\r\n        this.forceNormalForward = !!serializationObject.forceNormalForward;\r\n        this.debugMode = serializationObject.debugMode;\r\n        this.debugLimit = serializationObject.debugLimit;\r\n        this.debugFactor = serializationObject.debugFactor;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.PBRMetallicRoughnessBlock\"] = PBRMetallicRoughnessBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}