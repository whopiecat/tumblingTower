{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { MaterialHelper } from '../../../materialHelper';\nimport { InputBlock } from '../Input/inputBlock';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport \"../../../../Shaders/ShadersInclude/bonesDeclaration\";\nimport \"../../../../Shaders/ShadersInclude/bonesVertex\";\n/**\r\n * Block used to add support for vertex skinning (bones)\r\n */\n\nvar BonesBlock =\n/** @class */\nfunction (_super) {\n  __extends(BonesBlock, _super);\n  /**\r\n   * Creates a new BonesBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function BonesBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Vertex) || this;\n\n    _this.registerInput(\"matricesIndices\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"matricesWeights\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"matricesIndicesExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n\n    _this.registerInput(\"matricesWeightsExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n\n    _this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\n\n    return _this;\n  }\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n\n  BonesBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"boneSampler\");\n\n    state._excludeVariableName(\"boneTextureWidth\");\n\n    state._excludeVariableName(\"mBones\");\n\n    state._excludeVariableName(\"BonesPerMesh\");\n  };\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  BonesBlock.prototype.getClassName = function () {\n    return \"BonesBlock\";\n  };\n\n  Object.defineProperty(BonesBlock.prototype, \"matricesIndices\", {\n    /**\r\n     * Gets the matrix indices input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BonesBlock.prototype, \"matricesWeights\", {\n    /**\r\n     * Gets the matrix weights input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BonesBlock.prototype, \"matricesIndicesExtra\", {\n    /**\r\n     * Gets the extra matrix indices input component\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BonesBlock.prototype, \"matricesWeightsExtra\", {\n    /**\r\n     * Gets the extra matrix weights input component\r\n     */\n    get: function () {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BonesBlock.prototype, \"world\", {\n    /**\r\n     * Gets the world input component\r\n     */\n    get: function () {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BonesBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BonesBlock.prototype.autoConfigure = function (material) {\n    if (!this.matricesIndices.isConnected) {\n      var matricesIndicesInput = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"matricesIndices\";\n      });\n\n      if (!matricesIndicesInput) {\n        matricesIndicesInput = new InputBlock(\"matricesIndices\");\n        matricesIndicesInput.setAsAttribute(\"matricesIndices\");\n      }\n\n      matricesIndicesInput.output.connectTo(this.matricesIndices);\n    }\n\n    if (!this.matricesWeights.isConnected) {\n      var matricesWeightsInput = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"matricesWeights\";\n      });\n\n      if (!matricesWeightsInput) {\n        matricesWeightsInput = new InputBlock(\"matricesWeights\");\n        matricesWeightsInput.setAsAttribute(\"matricesWeights\");\n      }\n\n      matricesWeightsInput.output.connectTo(this.matricesWeights);\n    }\n\n    if (!this.world.isConnected) {\n      var worldInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.World;\n      });\n\n      if (!worldInput) {\n        worldInput = new InputBlock(\"world\");\n        worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\n      }\n\n      worldInput.output.connectTo(this.world);\n    }\n  };\n\n  BonesBlock.prototype.provideFallbacks = function (mesh, fallbacks) {\n    if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n      fallbacks.addCPUSkinningFallback(0, mesh);\n    }\n  };\n\n  BonesBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    MaterialHelper.BindBonesParameters(mesh, effect);\n  };\n\n  BonesBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    if (!defines._areAttributesDirty) {\n      return;\n    }\n\n    MaterialHelper.PrepareDefinesForBones(mesh, defines);\n  };\n\n  BonesBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state); // Register for compilation fallbacks\n\n\n    state.sharedData.blocksWithFallbacks.push(this); // Register for binding\n\n    state.sharedData.bindableBlocks.push(this); // Register for defines\n\n    state.sharedData.blocksWithDefines.push(this); // Register internal uniforms and samplers\n\n    state.uniforms.push(\"boneTextureWidth\");\n    state.uniforms.push(\"mBones\");\n    state.samplers.push(\"boneSampler\"); // Emit code\n\n    var comments = \"//\" + this.name;\n\n    state._emitFunctionFromInclude(\"bonesDeclaration\", comments, {\n      removeAttributes: true,\n      removeUniforms: false,\n      removeVaryings: true,\n      removeIfDef: false\n    });\n\n    var influenceVariablename = state._getFreeVariableName(\"influence\");\n\n    state.compilationString += state._emitCodeFromInclude(\"bonesVertex\", comments, {\n      replaceStrings: [{\n        search: /finalWorld=finalWorld\\*influence;/,\n        replace: \"\"\n      }, {\n        search: /influence/gm,\n        replace: influenceVariablename\n      }]\n    });\n    var output = this._outputs[0];\n    var worldInput = this.world;\n    state.compilationString += \"#if NUM_BONE_INFLUENCERS>0\\r\\n\";\n    state.compilationString += this._declareOutput(output, state) + (\" = \" + worldInput.associatedVariableName + \" * \" + influenceVariablename + \";\\r\\n\");\n    state.compilationString += \"#else\\r\\n\";\n    state.compilationString += this._declareOutput(output, state) + (\" = \" + worldInput.associatedVariableName + \";\\r\\n\");\n    state.compilationString += \"#endif\\r\\n\";\n    return this;\n  };\n\n  return BonesBlock;\n}(NodeMaterialBlock);\n\nexport { BonesBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.BonesBlock\"] = BonesBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Vertex/bonesBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { AbstractMesh } from '../../../../Meshes/abstractMesh';\r\nimport { Mesh } from '../../../../Meshes/mesh';\r\nimport { Effect } from '../../../effect';\r\nimport { MaterialHelper } from '../../../materialHelper';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';\r\nimport { InputBlock } from '../Input/inputBlock';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\n\r\nimport \"../../../../Shaders/ShadersInclude/bonesDeclaration\";\r\nimport \"../../../../Shaders/ShadersInclude/bonesVertex\";\r\nimport { EffectFallbacks } from '../../../effectFallbacks';\r\n\r\n/**\r\n * Block used to add support for vertex skinning (bones)\r\n */\r\nexport class BonesBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new BonesBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex);\r\n\r\n        this.registerInput(\"matricesIndices\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"matricesWeights\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"matricesIndicesExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"matricesWeightsExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"boneSampler\");\r\n        state._excludeVariableName(\"boneTextureWidth\");\r\n        state._excludeVariableName(\"mBones\");\r\n        state._excludeVariableName(\"BonesPerMesh\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"BonesBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix indices input component\r\n     */\r\n    public get matricesIndices(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix weights input component\r\n     */\r\n    public get matricesWeights(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the extra matrix indices input component\r\n     */\r\n    public get matricesIndicesExtra(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the extra matrix weights input component\r\n     */\r\n    public get matricesWeightsExtra(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the world input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.matricesIndices.isConnected) {\r\n            let matricesIndicesInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"matricesIndices\");\r\n\r\n            if (!matricesIndicesInput) {\r\n                matricesIndicesInput = new InputBlock(\"matricesIndices\");\r\n                matricesIndicesInput.setAsAttribute(\"matricesIndices\");\r\n            }\r\n            matricesIndicesInput.output.connectTo(this.matricesIndices);\r\n        }\r\n        if (!this.matricesWeights.isConnected) {\r\n            let matricesWeightsInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"matricesWeights\");\r\n\r\n            if (!matricesWeightsInput) {\r\n                matricesWeightsInput = new InputBlock(\"matricesWeights\");\r\n                matricesWeightsInput.setAsAttribute(\"matricesWeights\");\r\n            }\r\n            matricesWeightsInput.output.connectTo(this.matricesWeights);\r\n        }\r\n        if (!this.world.isConnected) {\r\n            let worldInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.World);\r\n\r\n            if (!worldInput) {\r\n                worldInput = new InputBlock(\"world\");\r\n                worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\r\n            }\r\n            worldInput.output.connectTo(this.world);\r\n        }\r\n    }\r\n\r\n    public provideFallbacks(mesh: AbstractMesh, fallbacks: EffectFallbacks) {\r\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n            fallbacks.addCPUSkinningFallback(0, mesh);\r\n        }\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        MaterialHelper.BindBonesParameters(mesh, effect);\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (!defines._areAttributesDirty) {\r\n            return;\r\n        }\r\n        MaterialHelper.PrepareDefinesForBones(mesh, defines);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        // Register for compilation fallbacks\r\n        state.sharedData.blocksWithFallbacks.push(this);\r\n\r\n        // Register for binding\r\n        state.sharedData.bindableBlocks.push(this);\r\n\r\n        // Register for defines\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        // Register internal uniforms and samplers\r\n        state.uniforms.push(\"boneTextureWidth\");\r\n        state.uniforms.push(\"mBones\");\r\n\r\n        state.samplers.push(\"boneSampler\");\r\n\r\n        // Emit code\r\n        let comments = `//${this.name}`;\r\n        state._emitFunctionFromInclude(\"bonesDeclaration\", comments, {\r\n            removeAttributes: true,\r\n            removeUniforms: false,\r\n            removeVaryings: true,\r\n            removeIfDef: false\r\n        });\r\n\r\n        let influenceVariablename = state._getFreeVariableName(\"influence\");\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"bonesVertex\", comments, {\r\n            replaceStrings: [\r\n                {\r\n                    search: /finalWorld=finalWorld\\*influence;/,\r\n                    replace: \"\"\r\n                },\r\n                {\r\n                    search: /influence/gm,\r\n                    replace: influenceVariablename\r\n                }\r\n            ]\r\n        });\r\n\r\n        let output = this._outputs[0];\r\n        let worldInput = this.world;\r\n\r\n        state.compilationString += `#if NUM_BONE_INFLUENCERS>0\\r\\n`;\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${worldInput.associatedVariableName} * ${influenceVariablename};\\r\\n`;\r\n        state.compilationString += `#else\\r\\n`;\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${worldInput.associatedVariableName};\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.BonesBlock\"] = BonesBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}