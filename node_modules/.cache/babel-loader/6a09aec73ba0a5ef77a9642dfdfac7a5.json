{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport \"../../../../Shaders/ShadersInclude/helperFunctions\";\nimport \"../../../../Shaders/ShadersInclude/imageProcessingDeclaration\";\nimport \"../../../../Shaders/ShadersInclude/imageProcessingFunctions\";\n/**\r\n * Block used to add image processing support to fragment shader\r\n */\n\nvar ImageProcessingBlock =\n/** @class */\nfunction (_super) {\n  __extends(ImageProcessingBlock, _super);\n  /**\r\n   * Create a new ImageProcessingBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function ImageProcessingBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color4);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color3);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  ImageProcessingBlock.prototype.getClassName = function () {\n    return \"ImageProcessingBlock\";\n  };\n\n  Object.defineProperty(ImageProcessingBlock.prototype, \"color\", {\n    /**\r\n     * Gets the color input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n  ImageProcessingBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"exposureLinear\");\n\n    state._excludeVariableName(\"contrast\");\n\n    state._excludeVariableName(\"vInverseScreenSize\");\n\n    state._excludeVariableName(\"vignetteSettings1\");\n\n    state._excludeVariableName(\"vignetteSettings2\");\n\n    state._excludeVariableName(\"vCameraColorCurveNegative\");\n\n    state._excludeVariableName(\"vCameraColorCurveNeutral\");\n\n    state._excludeVariableName(\"vCameraColorCurvePositive\");\n\n    state._excludeVariableName(\"txColorTransform\");\n\n    state._excludeVariableName(\"colorTransformSettings\");\n  };\n\n  ImageProcessingBlock.prototype.isReady = function (mesh, nodeMaterial, defines) {\n    if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\n      if (!nodeMaterial.imageProcessingConfiguration.isReady()) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  ImageProcessingBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\n      nodeMaterial.imageProcessingConfiguration.prepareDefines(defines);\n    }\n  };\n\n  ImageProcessingBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n\n    if (!nodeMaterial.imageProcessingConfiguration) {\n      return;\n    }\n\n    nodeMaterial.imageProcessingConfiguration.bind(effect);\n  };\n\n  ImageProcessingBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state); // Register for defines\n\n\n    state.sharedData.blocksWithDefines.push(this); // Register for blocking\n\n    state.sharedData.blockingBlocks.push(this); // Register for binding\n\n    state.sharedData.bindableBlocks.push(this); // Uniforms\n\n    state.uniforms.push(\"exposureLinear\");\n    state.uniforms.push(\"contrast\");\n    state.uniforms.push(\"vInverseScreenSize\");\n    state.uniforms.push(\"vignetteSettings1\");\n    state.uniforms.push(\"vignetteSettings2\");\n    state.uniforms.push(\"vCameraColorCurveNegative\");\n    state.uniforms.push(\"vCameraColorCurveNeutral\");\n    state.uniforms.push(\"vCameraColorCurvePositive\");\n    state.uniforms.push(\"txColorTransform\");\n    state.uniforms.push(\"colorTransformSettings\"); // Emit code\n\n    var color = this.color;\n    var output = this._outputs[0];\n    var comments = \"//\" + this.name;\n\n    state._emitFunctionFromInclude(\"helperFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"imageProcessingDeclaration\", comments);\n\n    state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\n\n    if (color.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Color4 || color.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Vector4) {\n      state.compilationString += this._declareOutput(output, state) + \" = \" + color.associatedVariableName + \";\\r\\n\";\n    } else {\n      state.compilationString += this._declareOutput(output, state) + \" = vec4(\" + color.associatedVariableName + \", 1.0);\\r\\n\";\n    }\n\n    state.compilationString += \"#ifdef IMAGEPROCESSINGPOSTPROCESS\\r\\n\";\n    state.compilationString += output.associatedVariableName + \".rgb = toLinearSpace(\" + color.associatedVariableName + \".rgb);\\r\\n\";\n    state.compilationString += \"#else\\r\\n\";\n    state.compilationString += \"#ifdef IMAGEPROCESSING\\r\\n\";\n    state.compilationString += output.associatedVariableName + \".rgb = toLinearSpace(\" + color.associatedVariableName + \".rgb);\\r\\n\";\n    state.compilationString += output.associatedVariableName + \" = applyImageProcessing(\" + output.associatedVariableName + \");\\r\\n\";\n    state.compilationString += \"#endif\\r\\n\";\n    state.compilationString += \"#endif\\r\\n\";\n    return this;\n  };\n\n  return ImageProcessingBlock;\n}(NodeMaterialBlock);\n\nexport { ImageProcessingBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.ImageProcessingBlock\"] = ImageProcessingBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Fragment/imageProcessingBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { AbstractMesh } from '../../../../Meshes/abstractMesh';\r\nimport { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';\r\nimport { Effect } from '../../../effect';\r\nimport { Mesh } from '../../../../Meshes/mesh';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\n\r\nimport \"../../../../Shaders/ShadersInclude/helperFunctions\";\r\nimport \"../../../../Shaders/ShadersInclude/imageProcessingDeclaration\";\r\nimport \"../../../../Shaders/ShadersInclude/imageProcessingFunctions\";\r\n\r\n/**\r\n * Block used to add image processing support to fragment shader\r\n */\r\nexport class ImageProcessingBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ImageProcessingBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color4);\r\n\r\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color3);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ImageProcessingBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"exposureLinear\");\r\n        state._excludeVariableName(\"contrast\");\r\n        state._excludeVariableName(\"vInverseScreenSize\");\r\n        state._excludeVariableName(\"vignetteSettings1\");\r\n        state._excludeVariableName(\"vignetteSettings2\");\r\n        state._excludeVariableName(\"vCameraColorCurveNegative\");\r\n        state._excludeVariableName(\"vCameraColorCurveNeutral\");\r\n        state._excludeVariableName(\"vCameraColorCurvePositive\");\r\n        state._excludeVariableName(\"txColorTransform\");\r\n        state._excludeVariableName(\"colorTransformSettings\");\r\n    }\r\n\r\n    public isReady(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\r\n            if (!nodeMaterial.imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\r\n            nodeMaterial.imageProcessingConfiguration.prepareDefines(defines);\r\n        }\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        if (!nodeMaterial.imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        nodeMaterial.imageProcessingConfiguration.bind(effect);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        // Register for defines\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        // Register for blocking\r\n        state.sharedData.blockingBlocks.push(this);\r\n\r\n        // Register for binding\r\n        state.sharedData.bindableBlocks.push(this);\r\n\r\n        // Uniforms\r\n        state.uniforms.push(\"exposureLinear\");\r\n        state.uniforms.push(\"contrast\");\r\n        state.uniforms.push(\"vInverseScreenSize\");\r\n        state.uniforms.push(\"vignetteSettings1\");\r\n        state.uniforms.push(\"vignetteSettings2\");\r\n        state.uniforms.push(\"vCameraColorCurveNegative\");\r\n        state.uniforms.push(\"vCameraColorCurveNeutral\");\r\n        state.uniforms.push(\"vCameraColorCurvePositive\");\r\n        state.uniforms.push(\"txColorTransform\");\r\n        state.uniforms.push(\"colorTransformSettings\");\r\n\r\n        // Emit code\r\n        let color = this.color;\r\n        let output = this._outputs[0];\r\n        let comments = `//${this.name}`;\r\n\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n        state._emitFunctionFromInclude(\"imageProcessingDeclaration\", comments);\r\n        state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\r\n\r\n        if (color.connectedPoint!.type === NodeMaterialBlockConnectionPointTypes.Color4 || (color.connectedPoint!.type === NodeMaterialBlockConnectionPointTypes.Vector4)) {\r\n            state.compilationString += `${this._declareOutput(output, state)} = ${color.associatedVariableName};\\r\\n`;\r\n        } else {\r\n            state.compilationString += `${this._declareOutput(output, state)} = vec4(${color.associatedVariableName}, 1.0);\\r\\n`;\r\n        }\r\n        state.compilationString += `#ifdef IMAGEPROCESSINGPOSTPROCESS\\r\\n`;\r\n        state.compilationString += `${output.associatedVariableName}.rgb = toLinearSpace(${color.associatedVariableName}.rgb);\\r\\n`;\r\n        state.compilationString += `#else\\r\\n`;\r\n        state.compilationString += `#ifdef IMAGEPROCESSING\\r\\n`;\r\n        state.compilationString += `${output.associatedVariableName}.rgb = toLinearSpace(${color.associatedVariableName}.rgb);\\r\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = applyImageProcessing(${output.associatedVariableName});\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ImageProcessingBlock\"] = ImageProcessingBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}