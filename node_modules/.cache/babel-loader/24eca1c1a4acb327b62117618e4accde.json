{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine\";\nimport { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\n\nThinEngine.prototype.createDynamicTexture = function (width, height, generateMipMaps, samplingMode) {\n  var texture = new InternalTexture(this, InternalTextureSource.Dynamic);\n  texture.baseWidth = width;\n  texture.baseHeight = height;\n\n  if (generateMipMaps) {\n    width = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(width, this._caps.maxTextureSize) : width;\n    height = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(height, this._caps.maxTextureSize) : height;\n  } //  this.resetTextureCache();\n\n\n  texture.width = width;\n  texture.height = height;\n  texture.isReady = false;\n  texture.generateMipMaps = generateMipMaps;\n  texture.samplingMode = samplingMode;\n  this.updateTextureSamplingMode(samplingMode, texture);\n\n  this._internalTexturesCache.push(texture);\n\n  return texture;\n};\n\nThinEngine.prototype.updateDynamicTexture = function (texture, source, invertY, premulAlpha, format, forceBindTexture) {\n  if (premulAlpha === void 0) {\n    premulAlpha = false;\n  }\n\n  if (forceBindTexture === void 0) {\n    forceBindTexture = false;\n  }\n\n  if (!texture) {\n    return;\n  }\n\n  var gl = this._gl;\n  var target = gl.TEXTURE_2D;\n\n  var wasPreviouslyBound = this._bindTextureDirectly(target, texture, true, forceBindTexture);\n\n  this._unpackFlipY(invertY === undefined ? texture.invertY : invertY);\n\n  if (premulAlpha) {\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\n  }\n\n  var textureType = this._getWebGLTextureType(texture.type);\n\n  var glformat = this._getInternalFormat(format ? format : texture.format);\n\n  var internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, glformat);\n\n  gl.texImage2D(target, 0, internalFormat, glformat, textureType, source);\n\n  if (texture.generateMipMaps) {\n    gl.generateMipmap(target);\n  }\n\n  if (!wasPreviouslyBound) {\n    this._bindTextureDirectly(target, null);\n  }\n\n  if (premulAlpha) {\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n  }\n\n  texture.isReady = true;\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/Extensions/engine.dynamicTexture.ts"],"names":[],"mappings":"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","sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\r\nimport { Nullable } from '../../types';\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a dynamic texture\r\n         * @param width defines the width of the texture\r\n         * @param height defines the height of the texture\r\n         * @param generateMipMaps defines if the engine should generate the mip levels\r\n         * @param samplingMode defines the required sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n         * @returns the dynamic texture inside an InternalTexture\r\n         */\r\n        createDynamicTexture(width: number, height: number, generateMipMaps: boolean, samplingMode: number): InternalTexture;\r\n\r\n        /**\r\n         * Update the content of a dynamic texture\r\n         * @param texture defines the texture to update\r\n         * @param source defines the source containing the data\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param premulAlpha defines if alpha is stored as premultiplied\r\n         * @param format defines the format of the data\r\n         * @param forceBindTexture if the texture should be forced to be bound eg. after a graphics context loss (Default: false)\r\n         */\r\n        updateDynamicTexture(texture: Nullable<InternalTexture>,\r\n            source: ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | OffscreenCanvas,\r\n            invertY?: boolean, premulAlpha?: boolean, format?: number, forceBindTexture?: boolean): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createDynamicTexture = function(width: number, height: number, generateMipMaps: boolean, samplingMode: number): InternalTexture {\r\n    var texture = new InternalTexture(this, InternalTextureSource.Dynamic);\r\n    texture.baseWidth = width;\r\n    texture.baseHeight = height;\r\n\r\n    if (generateMipMaps) {\r\n        width = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(width, this._caps.maxTextureSize) : width;\r\n        height = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(height, this._caps.maxTextureSize) : height;\r\n    }\r\n\r\n    //  this.resetTextureCache();\r\n    texture.width = width;\r\n    texture.height = height;\r\n    texture.isReady = false;\r\n    texture.generateMipMaps = generateMipMaps;\r\n    texture.samplingMode = samplingMode;\r\n\r\n    this.updateTextureSamplingMode(samplingMode, texture);\r\n\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    return texture;\r\n};\r\n\r\nThinEngine.prototype.updateDynamicTexture = function(texture: Nullable<InternalTexture>,\r\n    source: ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | OffscreenCanvas,\r\n    invertY?: boolean,\r\n    premulAlpha: boolean = false,\r\n    format?: number,\r\n    forceBindTexture: boolean = false): void {\r\n    if (!texture) {\r\n        return;\r\n    }\r\n\r\n    const gl = this._gl;\r\n    const target = gl.TEXTURE_2D;\r\n\r\n    const wasPreviouslyBound = this._bindTextureDirectly(target, texture, true, forceBindTexture);\r\n\r\n    this._unpackFlipY(invertY === undefined ? texture.invertY : invertY);\r\n\r\n    if (premulAlpha) {\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\r\n    }\r\n\r\n    const textureType = this._getWebGLTextureType(texture.type);\r\n    const glformat = this._getInternalFormat(format ? format : texture.format);\r\n    const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, glformat);\r\n\r\n    gl.texImage2D(target, 0, internalFormat, glformat, textureType, source);\r\n\r\n    if (texture.generateMipMaps) {\r\n        gl.generateMipmap(target);\r\n    }\r\n\r\n    if (!wasPreviouslyBound) {\r\n        this._bindTextureDirectly(target, null);\r\n    }\r\n\r\n    if (premulAlpha) {\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\r\n    }\r\n\r\n    texture.isReady = true;\r\n};"],"sourceRoot":""},"metadata":{},"sourceType":"module"}