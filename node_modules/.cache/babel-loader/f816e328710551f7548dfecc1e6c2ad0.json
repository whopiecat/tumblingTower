{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable\";\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../../Maths/math.vector\";\nimport { Ray } from \"../../Culling/ray\";\nimport { EngineStore } from \"../../Engines/engineStore\";\nimport { Gamepad } from \"../../Gamepads/gamepad\";\n/**\r\n* Defines the types of pose enabled controllers that are supported\r\n*/\n\nexport var PoseEnabledControllerType;\n\n(function (PoseEnabledControllerType) {\n  /**\r\n   * HTC Vive\r\n   */\n  PoseEnabledControllerType[PoseEnabledControllerType[\"VIVE\"] = 0] = \"VIVE\";\n  /**\r\n   * Oculus Rift\r\n   */\n\n  PoseEnabledControllerType[PoseEnabledControllerType[\"OCULUS\"] = 1] = \"OCULUS\";\n  /**\r\n   * Windows mixed reality\r\n   */\n\n  PoseEnabledControllerType[PoseEnabledControllerType[\"WINDOWS\"] = 2] = \"WINDOWS\";\n  /**\r\n   * Samsung gear VR\r\n   */\n\n  PoseEnabledControllerType[PoseEnabledControllerType[\"GEAR_VR\"] = 3] = \"GEAR_VR\";\n  /**\r\n   * Google Daydream\r\n   */\n\n  PoseEnabledControllerType[PoseEnabledControllerType[\"DAYDREAM\"] = 4] = \"DAYDREAM\";\n  /**\r\n   * Generic\r\n   */\n\n  PoseEnabledControllerType[PoseEnabledControllerType[\"GENERIC\"] = 5] = \"GENERIC\";\n})(PoseEnabledControllerType || (PoseEnabledControllerType = {}));\n/**\r\n * Defines the PoseEnabledControllerHelper object that is used initialize a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\r\n */\n\n\nvar PoseEnabledControllerHelper =\n/** @class */\nfunction () {\n  function PoseEnabledControllerHelper() {}\n  /**\r\n   * Initializes a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\r\n   * @param vrGamepad the gamepad to initialized\r\n   * @returns a vr controller of the type the gamepad identified as\r\n   */\n\n\n  PoseEnabledControllerHelper.InitiateController = function (vrGamepad) {\n    for (var _i = 0, _a = this._ControllerFactories; _i < _a.length; _i++) {\n      var factory = _a[_i];\n\n      if (factory.canCreate(vrGamepad)) {\n        return factory.create(vrGamepad);\n      }\n    }\n\n    if (this._DefaultControllerFactory) {\n      return this._DefaultControllerFactory(vrGamepad);\n    }\n\n    throw \"The type of gamepad you are trying to load needs to be imported first or is not supported.\";\n  };\n  /** @hidden */\n\n\n  PoseEnabledControllerHelper._ControllerFactories = [];\n  /** @hidden */\n\n  PoseEnabledControllerHelper._DefaultControllerFactory = null;\n  return PoseEnabledControllerHelper;\n}();\n\nexport { PoseEnabledControllerHelper };\n/**\r\n * Defines the PoseEnabledController object that contains state of a vr capable controller\r\n */\n\nvar PoseEnabledController =\n/** @class */\nfunction (_super) {\n  __extends(PoseEnabledController, _super);\n  /**\r\n   * Creates a new PoseEnabledController from a gamepad\r\n   * @param browserGamepad the gamepad that the PoseEnabledController should be created from\r\n   */\n\n\n  function PoseEnabledController(browserGamepad) {\n    var _this = _super.call(this, browserGamepad.id, browserGamepad.index, browserGamepad) || this;\n    /**\r\n     * If the controller is used in a webXR session\r\n     */\n\n\n    _this.isXR = false; // Represents device position and rotation in room space. Should only be used to help calculate babylon space values\n\n    _this._deviceRoomPosition = Vector3.Zero();\n    _this._deviceRoomRotationQuaternion = new Quaternion();\n    /**\r\n     * The device position in babylon space\r\n     */\n\n    _this.devicePosition = Vector3.Zero();\n    /**\r\n     * The device rotation in babylon space\r\n     */\n\n    _this.deviceRotationQuaternion = new Quaternion();\n    /**\r\n     * The scale factor of the device in babylon space\r\n     */\n\n    _this.deviceScaleFactor = 1; // Used to convert 6dof controllers to 3dof\n\n    _this._trackPosition = true;\n    _this._maxRotationDistFromHeadset = Math.PI / 5;\n    _this._draggedRoomRotation = 0;\n    _this._leftHandSystemQuaternion = new Quaternion();\n    /**\r\n     * Internal, matrix used to convert room space to babylon space\r\n     * @hidden\r\n     */\n\n    _this._deviceToWorld = Matrix.Identity();\n    /**\r\n     * Node to be used when casting a ray from the controller\r\n     * @hidden\r\n     */\n\n    _this._pointingPoseNode = null;\n    _this._workingMatrix = Matrix.Identity();\n    /**\r\n     * @hidden\r\n     */\n\n    _this._meshAttachedObservable = new Observable();\n    _this.type = Gamepad.POSE_ENABLED;\n    _this.controllerType = PoseEnabledControllerType.GENERIC;\n    _this.position = Vector3.Zero();\n    _this.rotationQuaternion = new Quaternion();\n    _this._calculatedPosition = Vector3.Zero();\n    _this._calculatedRotation = new Quaternion();\n    Quaternion.RotationYawPitchRollToRef(Math.PI, 0, 0, _this._leftHandSystemQuaternion);\n    return _this;\n  }\n  /**\r\n   * @hidden\r\n   */\n\n\n  PoseEnabledController.prototype._disableTrackPosition = function (fixedPosition) {\n    if (this._trackPosition) {\n      this._calculatedPosition.copyFrom(fixedPosition);\n\n      this._trackPosition = false;\n    }\n  };\n  /**\r\n   * Updates the state of the pose enbaled controller and mesh based on the current position and rotation of the controller\r\n   */\n\n\n  PoseEnabledController.prototype.update = function () {\n    _super.prototype.update.call(this);\n\n    this._updatePoseAndMesh();\n  };\n  /**\r\n   * Updates only the pose device and mesh without doing any button event checking\r\n   */\n\n\n  PoseEnabledController.prototype._updatePoseAndMesh = function () {\n    if (this.isXR) {\n      return;\n    }\n\n    var pose = this.browserGamepad.pose;\n    this.updateFromDevice(pose);\n\n    if (!this._trackPosition && EngineStore.LastCreatedScene && EngineStore.LastCreatedScene.activeCamera && EngineStore.LastCreatedScene.activeCamera.devicePosition) {\n      var camera = EngineStore.LastCreatedScene.activeCamera;\n\n      camera._computeDevicePosition();\n\n      this._deviceToWorld.setTranslation(camera.devicePosition);\n\n      if (camera.deviceRotationQuaternion) {\n        var camera = camera;\n\n        camera._deviceRoomRotationQuaternion.toEulerAnglesToRef(TmpVectors.Vector3[0]); // Find the radian distance away that the headset is from the controllers rotation\n\n\n        var distanceAway = Math.atan2(Math.sin(TmpVectors.Vector3[0].y - this._draggedRoomRotation), Math.cos(TmpVectors.Vector3[0].y - this._draggedRoomRotation));\n\n        if (Math.abs(distanceAway) > this._maxRotationDistFromHeadset) {\n          // Only rotate enouph to be within the _maxRotationDistFromHeadset\n          var rotationAmount = distanceAway - (distanceAway < 0 ? -this._maxRotationDistFromHeadset : this._maxRotationDistFromHeadset);\n          this._draggedRoomRotation += rotationAmount; // Rotate controller around headset\n\n          var sin = Math.sin(-rotationAmount);\n          var cos = Math.cos(-rotationAmount);\n          this._calculatedPosition.x = this._calculatedPosition.x * cos - this._calculatedPosition.z * sin;\n          this._calculatedPosition.z = this._calculatedPosition.x * sin + this._calculatedPosition.z * cos;\n        }\n      }\n    }\n\n    Vector3.TransformCoordinatesToRef(this._calculatedPosition, this._deviceToWorld, this.devicePosition);\n\n    this._deviceToWorld.getRotationMatrixToRef(this._workingMatrix);\n\n    Quaternion.FromRotationMatrixToRef(this._workingMatrix, this.deviceRotationQuaternion);\n    this.deviceRotationQuaternion.multiplyInPlace(this._calculatedRotation);\n\n    if (this._mesh) {\n      this._mesh.position.copyFrom(this.devicePosition);\n\n      if (this._mesh.rotationQuaternion) {\n        this._mesh.rotationQuaternion.copyFrom(this.deviceRotationQuaternion);\n      }\n    }\n  };\n  /**\r\n   * Updates the state of the pose enbaled controller based on the raw pose data from the device\r\n   * @param poseData raw pose fromthe device\r\n   */\n\n\n  PoseEnabledController.prototype.updateFromDevice = function (poseData) {\n    if (this.isXR) {\n      return;\n    }\n\n    if (poseData) {\n      this.rawPose = poseData;\n\n      if (poseData.position) {\n        this._deviceRoomPosition.copyFromFloats(poseData.position[0], poseData.position[1], -poseData.position[2]);\n\n        if (this._mesh && this._mesh.getScene().useRightHandedSystem) {\n          this._deviceRoomPosition.z *= -1;\n        }\n\n        if (this._trackPosition) {\n          this._deviceRoomPosition.scaleToRef(this.deviceScaleFactor, this._calculatedPosition);\n        }\n\n        this._calculatedPosition.addInPlace(this.position);\n      }\n\n      var pose = this.rawPose;\n\n      if (poseData.orientation && pose.orientation && pose.orientation.length === 4) {\n        this._deviceRoomRotationQuaternion.copyFromFloats(pose.orientation[0], pose.orientation[1], -pose.orientation[2], -pose.orientation[3]);\n\n        if (this._mesh) {\n          if (this._mesh.getScene().useRightHandedSystem) {\n            this._deviceRoomRotationQuaternion.z *= -1;\n            this._deviceRoomRotationQuaternion.w *= -1;\n          } else {\n            this._deviceRoomRotationQuaternion.multiplyToRef(this._leftHandSystemQuaternion, this._deviceRoomRotationQuaternion);\n          }\n        } // if the camera is set, rotate to the camera's rotation\n\n\n        this._deviceRoomRotationQuaternion.multiplyToRef(this.rotationQuaternion, this._calculatedRotation);\n      }\n    }\n  };\n  /**\r\n   * Attaches a mesh to the controller\r\n   * @param mesh the mesh to be attached\r\n   */\n\n\n  PoseEnabledController.prototype.attachToMesh = function (mesh) {\n    if (this._mesh) {\n      this._mesh.parent = null;\n    }\n\n    this._mesh = mesh;\n\n    if (this._poseControlledCamera) {\n      this._mesh.parent = this._poseControlledCamera;\n    }\n\n    if (!this._mesh.rotationQuaternion) {\n      this._mesh.rotationQuaternion = new Quaternion();\n    } // Sync controller mesh and pointing pose node's state with controller, this is done to avoid a frame where position is 0,0,0 when attaching mesh\n\n\n    if (!this.isXR) {\n      this._updatePoseAndMesh();\n\n      if (this._pointingPoseNode) {\n        var parents = [];\n        var obj = this._pointingPoseNode;\n\n        while (obj.parent) {\n          parents.push(obj.parent);\n          obj = obj.parent;\n        }\n\n        parents.reverse().forEach(function (p) {\n          p.computeWorldMatrix(true);\n        });\n      }\n    }\n\n    this._meshAttachedObservable.notifyObservers(mesh);\n  };\n  /**\r\n   * Attaches the controllers mesh to a camera\r\n   * @param camera the camera the mesh should be attached to\r\n   */\n\n\n  PoseEnabledController.prototype.attachToPoseControlledCamera = function (camera) {\n    this._poseControlledCamera = camera;\n\n    if (this._mesh) {\n      this._mesh.parent = this._poseControlledCamera;\n    }\n  };\n  /**\r\n   * Disposes of the controller\r\n   */\n\n\n  PoseEnabledController.prototype.dispose = function () {\n    if (this._mesh) {\n      this._mesh.dispose();\n    }\n\n    this._mesh = null;\n\n    _super.prototype.dispose.call(this);\n  };\n\n  Object.defineProperty(PoseEnabledController.prototype, \"mesh\", {\n    /**\r\n     * The mesh that is attached to the controller\r\n     */\n    get: function () {\n      return this._mesh;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets the ray of the controller in the direction the controller is pointing\r\n   * @param length the length the resulting ray should be\r\n   * @returns a ray in the direction the controller is pointing\r\n   */\n\n  PoseEnabledController.prototype.getForwardRay = function (length) {\n    if (length === void 0) {\n      length = 100;\n    }\n\n    if (!this.mesh) {\n      return new Ray(Vector3.Zero(), new Vector3(0, 0, 1), length);\n    }\n\n    var m = this._pointingPoseNode ? this._pointingPoseNode.getWorldMatrix() : this.mesh.getWorldMatrix();\n    var origin = m.getTranslation();\n    var forward = new Vector3(0, 0, -1);\n    var forwardWorld = Vector3.TransformNormal(forward, m);\n    var direction = Vector3.Normalize(forwardWorld);\n    return new Ray(origin, direction, length);\n  };\n  /**\r\n   * Name of the child mesh that can be used to cast a ray from the controller\r\n   */\n\n\n  PoseEnabledController.POINTING_POSE = \"POINTING_POSE\";\n  return PoseEnabledController;\n}(Gamepad);\n\nexport { PoseEnabledController };","map":{"version":3,"sources":["../../../../sourceES6/core/Gamepads/Controllers/poseEnabledController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport { Nullable } from \"../../types\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\nimport { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\n\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\nimport { WebVRFreeCamera, PoseControlled, DevicePose } from \"../../Cameras/VR/webVRCamera\";\r\nimport { TargetCamera } from \"../../Cameras/targetCamera\";\r\n\r\n/**\r\n* Defines the types of pose enabled controllers that are supported\r\n*/\r\nexport enum PoseEnabledControllerType {\r\n    /**\r\n     * HTC Vive\r\n     */\r\n    VIVE,\r\n    /**\r\n     * Oculus Rift\r\n     */\r\n    OCULUS,\r\n    /**\r\n     * Windows mixed reality\r\n     */\r\n    WINDOWS,\r\n    /**\r\n     * Samsung gear VR\r\n     */\r\n    GEAR_VR,\r\n    /**\r\n     * Google Daydream\r\n     */\r\n    DAYDREAM,\r\n    /**\r\n     * Generic\r\n     */\r\n    GENERIC\r\n}\r\n\r\n/**\r\n * Defines the MutableGamepadButton interface for the state of a gamepad button\r\n */\r\nexport interface MutableGamepadButton {\r\n    /**\r\n     * Value of the button/trigger\r\n     */\r\n    value: number;\r\n    /**\r\n     * If the button/trigger is currently touched\r\n     */\r\n    touched: boolean;\r\n    /**\r\n     * If the button/trigger is currently pressed\r\n     */\r\n    pressed: boolean;\r\n}\r\n\r\n/**\r\n * Defines the ExtendedGamepadButton interface for a gamepad button which includes state provided by a pose controller\r\n * @hidden\r\n */\r\nexport interface ExtendedGamepadButton extends GamepadButton {\r\n    /**\r\n     * If the button/trigger is currently pressed\r\n     */\r\n    readonly pressed: boolean;\r\n    /**\r\n     * If the button/trigger is currently touched\r\n     */\r\n    readonly touched: boolean;\r\n    /**\r\n     * Value of the button/trigger\r\n     */\r\n    readonly value: number;\r\n}\r\n\r\n/** @hidden */\r\nexport interface _GamePadFactory {\r\n    /**\r\n     * Returns whether or not the current gamepad can be created for this type of controller.\r\n     * @param gamepadInfo Defines the gamepad info as received from the controller APIs.\r\n     * @returns true if it can be created, otherwise false\r\n     */\r\n    canCreate(gamepadInfo: any): boolean;\r\n\r\n    /**\r\n     * Creates a new instance of the Gamepad.\r\n     * @param gamepadInfo Defines the gamepad info as received from the controller APIs.\r\n     * @returns the new gamepad instance\r\n     */\r\n    create(gamepadInfo: any): Gamepad;\r\n}\r\n\r\n/**\r\n * Defines the PoseEnabledControllerHelper object that is used initialize a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\r\n */\r\nexport class PoseEnabledControllerHelper {\r\n    /** @hidden */\r\n    public static _ControllerFactories: _GamePadFactory[] = [];\r\n\r\n    /** @hidden */\r\n    public static _DefaultControllerFactory: Nullable<(gamepadInfo: any) => Gamepad> = null;\r\n\r\n    /**\r\n     * Initializes a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\r\n     * @param vrGamepad the gamepad to initialized\r\n     * @returns a vr controller of the type the gamepad identified as\r\n     */\r\n    public static InitiateController(vrGamepad: any) {\r\n        for (let factory of this._ControllerFactories) {\r\n            if (factory.canCreate(vrGamepad)) {\r\n                return factory.create(vrGamepad);\r\n            }\r\n        }\r\n\r\n        if (this._DefaultControllerFactory) {\r\n            return this._DefaultControllerFactory(vrGamepad);\r\n        }\r\n\r\n        throw \"The type of gamepad you are trying to load needs to be imported first or is not supported.\";\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the PoseEnabledController object that contains state of a vr capable controller\r\n */\r\nexport class PoseEnabledController extends Gamepad implements PoseControlled {\r\n    /**\r\n     * If the controller is used in a webXR session\r\n     */\r\n    public isXR = false;\r\n    // Represents device position and rotation in room space. Should only be used to help calculate babylon space values\r\n    private _deviceRoomPosition = Vector3.Zero();\r\n    private _deviceRoomRotationQuaternion = new Quaternion();\r\n\r\n    /**\r\n     * The device position in babylon space\r\n     */\r\n    public devicePosition = Vector3.Zero();\r\n    /**\r\n     * The device rotation in babylon space\r\n     */\r\n    public deviceRotationQuaternion = new Quaternion();\r\n    /**\r\n     * The scale factor of the device in babylon space\r\n     */\r\n    public deviceScaleFactor: number = 1;\r\n\r\n    /**\r\n     * (Likely devicePosition should be used instead) The device position in its room space\r\n     */\r\n    public position: Vector3;\r\n    /**\r\n     * (Likely deviceRotationQuaternion should be used instead) The device rotation in its room space\r\n     */\r\n    public rotationQuaternion: Quaternion;\r\n    /**\r\n     * The type of controller (Eg. Windows mixed reality)\r\n     */\r\n    public controllerType: PoseEnabledControllerType;\r\n\r\n    protected _calculatedPosition: Vector3;\r\n    private _calculatedRotation: Quaternion;\r\n\r\n    /**\r\n     * The raw pose from the device\r\n     */\r\n    public rawPose: DevicePose; //GamepadPose;\r\n\r\n    // Used to convert 6dof controllers to 3dof\r\n    private _trackPosition = true;\r\n    private _maxRotationDistFromHeadset = Math.PI / 5;\r\n    private _draggedRoomRotation = 0;\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _disableTrackPosition(fixedPosition: Vector3) {\r\n        if (this._trackPosition) {\r\n            this._calculatedPosition.copyFrom(fixedPosition);\r\n            this._trackPosition = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal, the mesh attached to the controller\r\n     * @hidden\r\n     */\r\n    public _mesh: Nullable<AbstractMesh>; // a node that will be attached to this Gamepad\r\n    private _poseControlledCamera: TargetCamera;\r\n\r\n    private _leftHandSystemQuaternion: Quaternion = new Quaternion();\r\n\r\n    /**\r\n     * Internal, matrix used to convert room space to babylon space\r\n     * @hidden\r\n     */\r\n    public _deviceToWorld = Matrix.Identity();\r\n\r\n    /**\r\n     * Node to be used when casting a ray from the controller\r\n     * @hidden\r\n     */\r\n    public _pointingPoseNode: Nullable<TransformNode> = null;\r\n    /**\r\n     * Name of the child mesh that can be used to cast a ray from the controller\r\n     */\r\n    public static readonly POINTING_POSE = \"POINTING_POSE\";\r\n    /**\r\n     * Creates a new PoseEnabledController from a gamepad\r\n     * @param browserGamepad the gamepad that the PoseEnabledController should be created from\r\n     */\r\n    constructor(browserGamepad: any) {\r\n        super(browserGamepad.id, browserGamepad.index, browserGamepad);\r\n        this.type = Gamepad.POSE_ENABLED;\r\n        this.controllerType = PoseEnabledControllerType.GENERIC;\r\n        this.position = Vector3.Zero();\r\n        this.rotationQuaternion = new Quaternion();\r\n\r\n        this._calculatedPosition = Vector3.Zero();\r\n        this._calculatedRotation = new Quaternion();\r\n        Quaternion.RotationYawPitchRollToRef(Math.PI, 0, 0, this._leftHandSystemQuaternion);\r\n    }\r\n\r\n    private _workingMatrix = Matrix.Identity();\r\n    /**\r\n     * Updates the state of the pose enbaled controller and mesh based on the current position and rotation of the controller\r\n     */\r\n    public update() {\r\n        super.update();\r\n        this._updatePoseAndMesh();\r\n    }\r\n\r\n    /**\r\n     * Updates only the pose device and mesh without doing any button event checking\r\n     */\r\n    protected _updatePoseAndMesh() {\r\n        if (this.isXR) {\r\n            return;\r\n        }\r\n        var pose: GamepadPose = this.browserGamepad.pose;\r\n        this.updateFromDevice(pose);\r\n\r\n        if (!this._trackPosition && EngineStore.LastCreatedScene && EngineStore.LastCreatedScene.activeCamera && (<WebVRFreeCamera>EngineStore.LastCreatedScene.activeCamera).devicePosition) {\r\n            var camera = <WebVRFreeCamera>EngineStore.LastCreatedScene.activeCamera;\r\n            camera._computeDevicePosition();\r\n\r\n            this._deviceToWorld.setTranslation(camera.devicePosition);\r\n            if (camera.deviceRotationQuaternion) {\r\n                var camera = camera;\r\n                camera._deviceRoomRotationQuaternion.toEulerAnglesToRef(TmpVectors.Vector3[0]);\r\n\r\n                // Find the radian distance away that the headset is from the controllers rotation\r\n                var distanceAway = Math.atan2(Math.sin(TmpVectors.Vector3[0].y - this._draggedRoomRotation), Math.cos(TmpVectors.Vector3[0].y - this._draggedRoomRotation));\r\n                if (Math.abs(distanceAway) > this._maxRotationDistFromHeadset) {\r\n                    // Only rotate enouph to be within the _maxRotationDistFromHeadset\r\n                    var rotationAmount = distanceAway - (distanceAway < 0 ? -this._maxRotationDistFromHeadset : this._maxRotationDistFromHeadset);\r\n                    this._draggedRoomRotation += rotationAmount;\r\n\r\n                    // Rotate controller around headset\r\n                    var sin = Math.sin(-rotationAmount);\r\n                    var cos = Math.cos(-rotationAmount);\r\n                    this._calculatedPosition.x = this._calculatedPosition.x * cos - this._calculatedPosition.z * sin;\r\n                    this._calculatedPosition.z = this._calculatedPosition.x * sin + this._calculatedPosition.z * cos;\r\n                }\r\n            }\r\n        }\r\n\r\n        Vector3.TransformCoordinatesToRef(this._calculatedPosition, this._deviceToWorld, this.devicePosition);\r\n        this._deviceToWorld.getRotationMatrixToRef(this._workingMatrix);\r\n        Quaternion.FromRotationMatrixToRef(this._workingMatrix, this.deviceRotationQuaternion);\r\n        this.deviceRotationQuaternion.multiplyInPlace(this._calculatedRotation);\r\n\r\n        if (this._mesh) {\r\n            this._mesh.position.copyFrom(this.devicePosition);\r\n\r\n            if (this._mesh.rotationQuaternion) {\r\n                this._mesh.rotationQuaternion.copyFrom(this.deviceRotationQuaternion);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the pose enbaled controller based on the raw pose data from the device\r\n     * @param poseData raw pose fromthe device\r\n     */\r\n    updateFromDevice(poseData: DevicePose) {\r\n        if (this.isXR) {\r\n            return;\r\n        }\r\n        if (poseData) {\r\n            this.rawPose = poseData;\r\n            if (poseData.position) {\r\n                this._deviceRoomPosition.copyFromFloats(poseData.position[0], poseData.position[1], -poseData.position[2]);\r\n                if (this._mesh && this._mesh.getScene().useRightHandedSystem) {\r\n                    this._deviceRoomPosition.z *= -1;\r\n                }\r\n                if (this._trackPosition) {\r\n                    this._deviceRoomPosition.scaleToRef(this.deviceScaleFactor, this._calculatedPosition);\r\n                }\r\n                this._calculatedPosition.addInPlace(this.position);\r\n            }\r\n            let pose = this.rawPose;\r\n            if (poseData.orientation && pose.orientation && pose.orientation.length === 4) {\r\n                this._deviceRoomRotationQuaternion.copyFromFloats(pose.orientation[0], pose.orientation[1], -pose.orientation[2], -pose.orientation[3]);\r\n                if (this._mesh) {\r\n                    if (this._mesh.getScene().useRightHandedSystem) {\r\n                        this._deviceRoomRotationQuaternion.z *= -1;\r\n                        this._deviceRoomRotationQuaternion.w *= -1;\r\n                    } else {\r\n                        this._deviceRoomRotationQuaternion.multiplyToRef(this._leftHandSystemQuaternion, this._deviceRoomRotationQuaternion);\r\n                    }\r\n                }\r\n\r\n                // if the camera is set, rotate to the camera's rotation\r\n                this._deviceRoomRotationQuaternion.multiplyToRef(this.rotationQuaternion, this._calculatedRotation);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _meshAttachedObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * Attaches a mesh to the controller\r\n     * @param mesh the mesh to be attached\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh) {\r\n        if (this._mesh) {\r\n            this._mesh.parent = null;\r\n        }\r\n        this._mesh = mesh;\r\n        if (this._poseControlledCamera) {\r\n            this._mesh.parent = this._poseControlledCamera;\r\n        }\r\n        if (!this._mesh.rotationQuaternion) {\r\n            this._mesh.rotationQuaternion = new Quaternion();\r\n        }\r\n\r\n        // Sync controller mesh and pointing pose node's state with controller, this is done to avoid a frame where position is 0,0,0 when attaching mesh\r\n        if (!this.isXR) {\r\n            this._updatePoseAndMesh();\r\n            if (this._pointingPoseNode) {\r\n                var parents = [];\r\n                var obj: Node = this._pointingPoseNode;\r\n                while (obj.parent) {\r\n                    parents.push(obj.parent);\r\n                    obj = obj.parent;\r\n                }\r\n                parents.reverse().forEach((p) => { p.computeWorldMatrix(true); });\r\n            }\r\n        }\r\n\r\n        this._meshAttachedObservable.notifyObservers(mesh);\r\n    }\r\n\r\n    /**\r\n     * Attaches the controllers mesh to a camera\r\n     * @param camera the camera the mesh should be attached to\r\n     */\r\n    public attachToPoseControlledCamera(camera: TargetCamera) {\r\n        this._poseControlledCamera = camera;\r\n        if (this._mesh) {\r\n            this._mesh.parent = this._poseControlledCamera;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of the controller\r\n     */\r\n    public dispose() {\r\n        if (this._mesh) {\r\n            this._mesh.dispose();\r\n        }\r\n        this._mesh = null;\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * The mesh that is attached to the controller\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    /**\r\n     * Gets the ray of the controller in the direction the controller is pointing\r\n     * @param length the length the resulting ray should be\r\n     * @returns a ray in the direction the controller is pointing\r\n     */\r\n    public getForwardRay(length = 100): Ray {\r\n        if (!this.mesh) {\r\n            return new Ray(Vector3.Zero(), new Vector3(0, 0, 1), length);\r\n        }\r\n\r\n        var m = this._pointingPoseNode ? this._pointingPoseNode.getWorldMatrix() : this.mesh.getWorldMatrix();\r\n        var origin = m.getTranslation();\r\n\r\n        var forward = new Vector3(0, 0, -1);\r\n        var forwardWorld = Vector3.TransformNormal(forward, m);\r\n\r\n        var direction = Vector3.Normalize(forwardWorld);\r\n\r\n        return new Ray(origin, direction, length);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}