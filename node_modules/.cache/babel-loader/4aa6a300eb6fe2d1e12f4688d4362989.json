{"ast":null,"code":"import { Observable } from \"../../Misc/observable\";\nimport { RenderTargetCreationOptions } from \"../../Materials/Textures/renderTargetCreationOptions\";\nimport { _DevTools } from '../../Misc/devTools';\n/**\r\n * Defines the source of the internal texture\r\n */\n\nexport var InternalTextureSource;\n\n(function (InternalTextureSource) {\n  /**\r\n   * The source of the texture data is unknown\r\n   */\n  InternalTextureSource[InternalTextureSource[\"Unknown\"] = 0] = \"Unknown\";\n  /**\r\n  * Texture data comes from an URL\r\n  */\n\n  InternalTextureSource[InternalTextureSource[\"Url\"] = 1] = \"Url\";\n  /**\r\n   * Texture data is only used for temporary storage\r\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Temp\"] = 2] = \"Temp\";\n  /**\r\n   * Texture data comes from raw data (ArrayBuffer)\r\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Raw\"] = 3] = \"Raw\";\n  /**\r\n   * Texture content is dynamic (video or dynamic texture)\r\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Dynamic\"] = 4] = \"Dynamic\";\n  /**\r\n   * Texture content is generated by rendering to it\r\n   */\n\n  InternalTextureSource[InternalTextureSource[\"RenderTarget\"] = 5] = \"RenderTarget\";\n  /**\r\n   * Texture content is part of a multi render target process\r\n   */\n\n  InternalTextureSource[InternalTextureSource[\"MultiRenderTarget\"] = 6] = \"MultiRenderTarget\";\n  /**\r\n   * Texture data comes from a cube data file\r\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Cube\"] = 7] = \"Cube\";\n  /**\r\n   * Texture data comes from a raw cube data\r\n   */\n\n  InternalTextureSource[InternalTextureSource[\"CubeRaw\"] = 8] = \"CubeRaw\";\n  /**\r\n   * Texture data come from a prefiltered cube data file\r\n   */\n\n  InternalTextureSource[InternalTextureSource[\"CubePrefiltered\"] = 9] = \"CubePrefiltered\";\n  /**\r\n   * Texture content is raw 3D data\r\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Raw3D\"] = 10] = \"Raw3D\";\n  /**\r\n   * Texture content is raw 2D array data\r\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Raw2DArray\"] = 11] = \"Raw2DArray\";\n  /**\r\n   * Texture content is a depth texture\r\n   */\n\n  InternalTextureSource[InternalTextureSource[\"Depth\"] = 12] = \"Depth\";\n  /**\r\n   * Texture data comes from a raw cube data encoded with RGBD\r\n   */\n\n  InternalTextureSource[InternalTextureSource[\"CubeRawRGBD\"] = 13] = \"CubeRawRGBD\";\n})(InternalTextureSource || (InternalTextureSource = {}));\n/**\r\n * Class used to store data associated with WebGL texture data for the engine\r\n * This class should not be used directly\r\n */\n\n\nvar InternalTexture =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new InternalTexture\r\n   * @param engine defines the engine to use\r\n   * @param source defines the type of data that will be used\r\n   * @param delayAllocation if the texture allocation should be delayed (default: false)\r\n   */\n  function InternalTexture(engine, source, delayAllocation) {\n    if (delayAllocation === void 0) {\n      delayAllocation = false;\n    }\n    /**\r\n     * Defines if the texture is ready\r\n     */\n\n\n    this.isReady = false;\n    /**\r\n     * Defines if the texture is a cube texture\r\n     */\n\n    this.isCube = false;\n    /**\r\n     * Defines if the texture contains 3D data\r\n     */\n\n    this.is3D = false;\n    /**\r\n     * Defines if the texture contains 2D array data\r\n     */\n\n    this.is2DArray = false;\n    /**\r\n     * Defines if the texture contains multiview data\r\n     */\n\n    this.isMultiview = false;\n    /**\r\n     * Gets the URL used to load this texture\r\n     */\n\n    this.url = \"\";\n    /**\r\n     * Gets the sampling mode of the texture\r\n     */\n\n    this.samplingMode = -1;\n    /**\r\n     * Gets a boolean indicating if the texture needs mipmaps generation\r\n     */\n\n    this.generateMipMaps = false;\n    /**\r\n     * Gets the number of samples used by the texture (WebGL2+ only)\r\n     */\n\n    this.samples = 0;\n    /**\r\n     * Gets the type of the texture (int, float...)\r\n     */\n\n    this.type = -1;\n    /**\r\n     * Gets the format of the texture (RGB, RGBA...)\r\n     */\n\n    this.format = -1;\n    /**\r\n     * Observable called when the texture is loaded\r\n     */\n\n    this.onLoadedObservable = new Observable();\n    /**\r\n     * Gets the width of the texture\r\n     */\n\n    this.width = 0;\n    /**\r\n     * Gets the height of the texture\r\n     */\n\n    this.height = 0;\n    /**\r\n     * Gets the depth of the texture\r\n     */\n\n    this.depth = 0;\n    /**\r\n     * Gets the initial width of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\n\n    this.baseWidth = 0;\n    /**\r\n     * Gets the initial height of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\n\n    this.baseHeight = 0;\n    /**\r\n     * Gets the initial depth of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\n\n    this.baseDepth = 0;\n    /**\r\n     * Gets a boolean indicating if the texture is inverted on Y axis\r\n     */\n\n    this.invertY = false; // Private\n\n    /** @hidden */\n\n    this._invertVScale = false;\n    /** @hidden */\n\n    this._associatedChannel = -1;\n    /** @hidden */\n\n    this._source = InternalTextureSource.Unknown;\n    /** @hidden */\n\n    this._buffer = null;\n    /** @hidden */\n\n    this._bufferView = null;\n    /** @hidden */\n\n    this._bufferViewArray = null;\n    /** @hidden */\n\n    this._bufferViewArrayArray = null;\n    /** @hidden */\n\n    this._size = 0;\n    /** @hidden */\n\n    this._extension = \"\";\n    /** @hidden */\n\n    this._files = null;\n    /** @hidden */\n\n    this._workingCanvas = null;\n    /** @hidden */\n\n    this._workingContext = null;\n    /** @hidden */\n\n    this._framebuffer = null;\n    /** @hidden */\n\n    this._depthStencilBuffer = null;\n    /** @hidden */\n\n    this._MSAAFramebuffer = null;\n    /** @hidden */\n\n    this._MSAARenderBuffer = null;\n    /** @hidden */\n\n    this._attachments = null;\n    /** @hidden */\n\n    this._textureArray = null;\n    /** @hidden */\n\n    this._cachedCoordinatesMode = null;\n    /** @hidden */\n\n    this._cachedWrapU = null;\n    /** @hidden */\n\n    this._cachedWrapV = null;\n    /** @hidden */\n\n    this._cachedWrapR = null;\n    /** @hidden */\n\n    this._cachedAnisotropicFilteringLevel = null;\n    /** @hidden */\n\n    this._isDisabled = false;\n    /** @hidden */\n\n    this._compression = null;\n    /** @hidden */\n\n    this._generateStencilBuffer = false;\n    /** @hidden */\n\n    this._generateDepthBuffer = false;\n    /** @hidden */\n\n    this._comparisonFunction = 0;\n    /** @hidden */\n\n    this._sphericalPolynomial = null;\n    /** @hidden */\n\n    this._lodGenerationScale = 0;\n    /** @hidden */\n\n    this._lodGenerationOffset = 0; // Multiview\n\n    /** @hidden */\n\n    this._colorTextureArray = null;\n    /** @hidden */\n\n    this._depthStencilTextureArray = null; // The following three fields helps sharing generated fixed LODs for texture filtering\n    // In environment not supporting the textureLOD extension like EDGE. They are for internal use only.\n    // They are at the level of the gl texture to benefit from the cache.\n\n    /** @hidden */\n\n    this._lodTextureHigh = null;\n    /** @hidden */\n\n    this._lodTextureMid = null;\n    /** @hidden */\n\n    this._lodTextureLow = null;\n    /** @hidden */\n\n    this._isRGBD = false;\n    /** @hidden */\n\n    this._linearSpecularLOD = false;\n    /** @hidden */\n\n    this._irradianceTexture = null;\n    /** @hidden */\n\n    this._webGLTexture = null;\n    /** @hidden */\n\n    this._references = 1;\n    /** @hidden */\n\n    this._gammaSpace = null;\n    this._engine = engine;\n    this._source = source;\n\n    if (!delayAllocation) {\n      this._webGLTexture = engine._createTexture();\n    }\n  }\n  /**\r\n   * Gets the Engine the texture belongs to.\r\n   * @returns The babylon engine\r\n   */\n\n\n  InternalTexture.prototype.getEngine = function () {\n    return this._engine;\n  };\n\n  Object.defineProperty(InternalTexture.prototype, \"source\", {\n    /**\r\n     * Gets the data source type of the texture\r\n     */\n    get: function () {\n      return this._source;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Increments the number of references (ie. the number of Texture that point to it)\r\n   */\n\n  InternalTexture.prototype.incrementReferences = function () {\n    this._references++;\n  };\n  /**\r\n   * Change the size of the texture (not the size of the content)\r\n   * @param width defines the new width\r\n   * @param height defines the new height\r\n   * @param depth defines the new depth (1 by default)\r\n   */\n\n\n  InternalTexture.prototype.updateSize = function (width, height, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.baseWidth = width;\n    this.baseHeight = height;\n    this.baseDepth = depth;\n    this._size = width * height * depth;\n  };\n  /** @hidden */\n\n\n  InternalTexture.prototype._rebuild = function () {\n    var _this = this;\n\n    var _a;\n\n    var proxy;\n    this.isReady = false;\n    this._cachedCoordinatesMode = null;\n    this._cachedWrapU = null;\n    this._cachedWrapV = null;\n    this._cachedAnisotropicFilteringLevel = null;\n\n    switch (this.source) {\n      case InternalTextureSource.Temp:\n        return;\n\n      case InternalTextureSource.Url:\n        proxy = this._engine.createTexture((_a = this._originalUrl) !== null && _a !== void 0 ? _a : this.url, !this.generateMipMaps, this.invertY, null, this.samplingMode, function () {\n          proxy._swapAndDie(_this);\n\n          _this.isReady = true;\n        }, null, this._buffer, undefined, this.format);\n        return;\n\n      case InternalTextureSource.Raw:\n        proxy = this._engine.createRawTexture(this._bufferView, this.baseWidth, this.baseHeight, this.format, this.generateMipMaps, this.invertY, this.samplingMode, this._compression);\n\n        proxy._swapAndDie(this);\n\n        this.isReady = true;\n        return;\n\n      case InternalTextureSource.Raw3D:\n        proxy = this._engine.createRawTexture3D(this._bufferView, this.baseWidth, this.baseHeight, this.baseDepth, this.format, this.generateMipMaps, this.invertY, this.samplingMode, this._compression);\n\n        proxy._swapAndDie(this);\n\n        this.isReady = true;\n        return;\n\n      case InternalTextureSource.Raw2DArray:\n        proxy = this._engine.createRawTexture2DArray(this._bufferView, this.baseWidth, this.baseHeight, this.baseDepth, this.format, this.generateMipMaps, this.invertY, this.samplingMode, this._compression);\n\n        proxy._swapAndDie(this);\n\n        this.isReady = true;\n        return;\n\n      case InternalTextureSource.Dynamic:\n        proxy = this._engine.createDynamicTexture(this.baseWidth, this.baseHeight, this.generateMipMaps, this.samplingMode);\n\n        proxy._swapAndDie(this);\n\n        this._engine.updateDynamicTexture(this, this._engine.getRenderingCanvas(), this.invertY, undefined, undefined, true); // The engine will make sure to update content so no need to flag it as isReady = true\n\n\n        return;\n\n      case InternalTextureSource.RenderTarget:\n        var options = new RenderTargetCreationOptions();\n        options.generateDepthBuffer = this._generateDepthBuffer;\n        options.generateMipMaps = this.generateMipMaps;\n        options.generateStencilBuffer = this._generateStencilBuffer;\n        options.samplingMode = this.samplingMode;\n        options.type = this.type;\n\n        if (this.isCube) {\n          proxy = this._engine.createRenderTargetCubeTexture(this.width, options);\n        } else {\n          var size_1 = {\n            width: this.width,\n            height: this.height,\n            layers: this.is2DArray ? this.depth : undefined\n          };\n          proxy = this._engine.createRenderTargetTexture(size_1, options);\n        }\n\n        proxy._swapAndDie(this);\n\n        this.isReady = true;\n        return;\n\n      case InternalTextureSource.Depth:\n        var depthTextureOptions = {\n          bilinearFiltering: this.samplingMode !== 2,\n          comparisonFunction: this._comparisonFunction,\n          generateStencil: this._generateStencilBuffer,\n          isCube: this.isCube\n        };\n        var size = {\n          width: this.width,\n          height: this.height,\n          layers: this.is2DArray ? this.depth : undefined\n        };\n        proxy = this._engine.createDepthStencilTexture(size, depthTextureOptions);\n\n        proxy._swapAndDie(this);\n\n        this.isReady = true;\n        return;\n\n      case InternalTextureSource.Cube:\n        proxy = this._engine.createCubeTexture(this.url, null, this._files, !this.generateMipMaps, function () {\n          proxy._swapAndDie(_this);\n\n          _this.isReady = true;\n        }, null, this.format, this._extension);\n        return;\n\n      case InternalTextureSource.CubeRaw:\n        proxy = this._engine.createRawCubeTexture(this._bufferViewArray, this.width, this.format, this.type, this.generateMipMaps, this.invertY, this.samplingMode, this._compression);\n\n        proxy._swapAndDie(this);\n\n        this.isReady = true;\n        return;\n\n      case InternalTextureSource.CubeRawRGBD:\n        proxy = this._engine.createRawCubeTexture(null, this.width, this.format, this.type, this.generateMipMaps, this.invertY, this.samplingMode, this._compression);\n\n        InternalTexture._UpdateRGBDAsync(proxy, this._bufferViewArrayArray, this._sphericalPolynomial, this._lodGenerationScale, this._lodGenerationOffset).then(function () {\n          proxy._swapAndDie(_this);\n\n          _this.isReady = true;\n        });\n\n        return;\n\n      case InternalTextureSource.CubePrefiltered:\n        proxy = this._engine.createPrefilteredCubeTexture(this.url, null, this._lodGenerationScale, this._lodGenerationOffset, function (proxy) {\n          if (proxy) {\n            proxy._swapAndDie(_this);\n          }\n\n          _this.isReady = true;\n        }, null, this.format, this._extension);\n        proxy._sphericalPolynomial = this._sphericalPolynomial;\n        return;\n    }\n  };\n  /** @hidden */\n\n\n  InternalTexture.prototype._swapAndDie = function (target) {\n    target._webGLTexture = this._webGLTexture;\n    target._isRGBD = this._isRGBD;\n\n    if (this._framebuffer) {\n      target._framebuffer = this._framebuffer;\n    }\n\n    if (this._depthStencilBuffer) {\n      target._depthStencilBuffer = this._depthStencilBuffer;\n    }\n\n    target._depthStencilTexture = this._depthStencilTexture;\n\n    if (this._lodTextureHigh) {\n      if (target._lodTextureHigh) {\n        target._lodTextureHigh.dispose();\n      }\n\n      target._lodTextureHigh = this._lodTextureHigh;\n    }\n\n    if (this._lodTextureMid) {\n      if (target._lodTextureMid) {\n        target._lodTextureMid.dispose();\n      }\n\n      target._lodTextureMid = this._lodTextureMid;\n    }\n\n    if (this._lodTextureLow) {\n      if (target._lodTextureLow) {\n        target._lodTextureLow.dispose();\n      }\n\n      target._lodTextureLow = this._lodTextureLow;\n    }\n\n    if (this._irradianceTexture) {\n      if (target._irradianceTexture) {\n        target._irradianceTexture.dispose();\n      }\n\n      target._irradianceTexture = this._irradianceTexture;\n    }\n\n    var cache = this._engine.getLoadedTexturesCache();\n\n    var index = cache.indexOf(this);\n\n    if (index !== -1) {\n      cache.splice(index, 1);\n    }\n\n    var index = cache.indexOf(target);\n\n    if (index === -1) {\n      cache.push(target);\n    }\n  };\n  /**\r\n   * Dispose the current allocated resources\r\n   */\n\n\n  InternalTexture.prototype.dispose = function () {\n    if (!this._webGLTexture) {\n      return;\n    }\n\n    this._references--;\n\n    if (this._references === 0) {\n      this._engine._releaseTexture(this);\n\n      this._webGLTexture = null;\n    }\n  };\n  /** @hidden */\n\n\n  InternalTexture._UpdateRGBDAsync = function (internalTexture, data, sphericalPolynomial, lodScale, lodOffset) {\n    throw _DevTools.WarnImport(\"environmentTextureTools\");\n  };\n\n  return InternalTexture;\n}();\n\nexport { InternalTexture };","map":{"version":3,"sources":["../../../../sourceES6/core/Materials/Textures/internalTexture.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport { Nullable, int } from \"../../types\";\r\nimport { RenderTargetCreationOptions } from \"../../Materials/Textures/renderTargetCreationOptions\";\r\n\r\nimport { _DevTools } from '../../Misc/devTools';\r\nimport { Engine } from '../../Engines/engine';\r\n\r\ndeclare type ThinEngine = import(\"../../Engines/thinEngine\").ThinEngine;\r\ndeclare type BaseTexture = import(\"../../Materials/Textures/baseTexture\").BaseTexture;\r\ndeclare type SphericalPolynomial = import(\"../../Maths/sphericalPolynomial\").SphericalPolynomial;\r\n\r\n/**\r\n * Defines the source of the internal texture\r\n */\r\nexport enum InternalTextureSource {\r\n    /**\r\n     * The source of the texture data is unknown\r\n     */\r\n    Unknown,\r\n    /**\r\n    * Texture data comes from an URL\r\n    */\r\n    Url,\r\n    /**\r\n     * Texture data is only used for temporary storage\r\n     */\r\n    Temp,\r\n    /**\r\n     * Texture data comes from raw data (ArrayBuffer)\r\n     */\r\n    Raw,\r\n    /**\r\n     * Texture content is dynamic (video or dynamic texture)\r\n     */\r\n    Dynamic,\r\n    /**\r\n     * Texture content is generated by rendering to it\r\n     */\r\n    RenderTarget,\r\n    /**\r\n     * Texture content is part of a multi render target process\r\n     */\r\n    MultiRenderTarget,\r\n    /**\r\n     * Texture data comes from a cube data file\r\n     */\r\n    Cube,\r\n    /**\r\n     * Texture data comes from a raw cube data\r\n     */\r\n    CubeRaw,\r\n    /**\r\n     * Texture data come from a prefiltered cube data file\r\n     */\r\n    CubePrefiltered,\r\n    /**\r\n     * Texture content is raw 3D data\r\n     */\r\n    Raw3D,\r\n    /**\r\n     * Texture content is raw 2D array data\r\n     */\r\n    Raw2DArray,\r\n    /**\r\n     * Texture content is a depth texture\r\n     */\r\n    Depth,\r\n    /**\r\n     * Texture data comes from a raw cube data encoded with RGBD\r\n     */\r\n    CubeRawRGBD\r\n}\r\n\r\n/**\r\n * Class used to store data associated with WebGL texture data for the engine\r\n * This class should not be used directly\r\n */\r\nexport class InternalTexture {\r\n\r\n    /** @hidden */\r\n    public static _UpdateRGBDAsync = (internalTexture: InternalTexture, data: ArrayBufferView[][], sphericalPolynomial: Nullable<SphericalPolynomial>, lodScale: number, lodOffset: number): Promise<void> => {\r\n        throw _DevTools.WarnImport(\"environmentTextureTools\");\r\n    }\r\n\r\n    /**\r\n     * Defines if the texture is ready\r\n     */\r\n    public isReady: boolean = false;\r\n    /**\r\n     * Defines if the texture is a cube texture\r\n     */\r\n    public isCube: boolean = false;\r\n    /**\r\n     * Defines if the texture contains 3D data\r\n     */\r\n    public is3D: boolean = false;\r\n    /**\r\n     * Defines if the texture contains 2D array data\r\n     */\r\n    public is2DArray: boolean = false;\r\n    /**\r\n     * Defines if the texture contains multiview data\r\n     */\r\n    public isMultiview: boolean = false;\r\n    /**\r\n     * Gets the URL used to load this texture\r\n     */\r\n    public url: string = \"\";\r\n    /** @hidden */\r\n    public _originalUrl: string; // not empty only if different from url\r\n    /**\r\n     * Gets the sampling mode of the texture\r\n     */\r\n    public samplingMode: number = -1;\r\n    /**\r\n     * Gets a boolean indicating if the texture needs mipmaps generation\r\n     */\r\n    public generateMipMaps: boolean = false;\r\n    /**\r\n     * Gets the number of samples used by the texture (WebGL2+ only)\r\n     */\r\n    public samples: number = 0;\r\n    /**\r\n     * Gets the type of the texture (int, float...)\r\n     */\r\n    public type: number = -1;\r\n    /**\r\n     * Gets the format of the texture (RGB, RGBA...)\r\n     */\r\n    public format: number = -1;\r\n    /**\r\n     * Observable called when the texture is loaded\r\n     */\r\n    public onLoadedObservable = new Observable<InternalTexture>();\r\n    /**\r\n     * Gets the width of the texture\r\n     */\r\n    public width: number = 0;\r\n    /**\r\n     * Gets the height of the texture\r\n     */\r\n    public height: number = 0;\r\n    /**\r\n     * Gets the depth of the texture\r\n     */\r\n    public depth: number = 0;\r\n    /**\r\n     * Gets the initial width of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\r\n    public baseWidth: number = 0;\r\n    /**\r\n     * Gets the initial height of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\r\n    public baseHeight: number = 0;\r\n    /**\r\n     * Gets the initial depth of the texture (It could be rescaled if the current system does not support non power of two textures)\r\n     */\r\n    public baseDepth: number = 0;\r\n    /**\r\n     * Gets a boolean indicating if the texture is inverted on Y axis\r\n     */\r\n    public invertY: boolean = false;\r\n\r\n    // Private\r\n    /** @hidden */\r\n    public _invertVScale = false;\r\n    /** @hidden */\r\n    public _associatedChannel = -1;\r\n    /** @hidden */\r\n    public _source = InternalTextureSource.Unknown;\r\n    /** @hidden */\r\n    public _buffer: Nullable<string | ArrayBuffer | ArrayBufferView | HTMLImageElement | Blob | ImageBitmap> = null;\r\n    /** @hidden */\r\n    public _bufferView: Nullable<ArrayBufferView> = null;\r\n    /** @hidden */\r\n    public _bufferViewArray: Nullable<ArrayBufferView[]> = null;\r\n    /** @hidden */\r\n    public _bufferViewArrayArray: Nullable<ArrayBufferView[][]> = null;\r\n    /** @hidden */\r\n    public _size: number = 0;\r\n    /** @hidden */\r\n    public _extension: string = \"\";\r\n    /** @hidden */\r\n    public _files: Nullable<string[]> = null;\r\n    /** @hidden */\r\n    public _workingCanvas: Nullable<HTMLCanvasElement | OffscreenCanvas> = null;\r\n    /** @hidden */\r\n    public _workingContext: Nullable<CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D> = null;\r\n    /** @hidden */\r\n    public _framebuffer: Nullable<WebGLFramebuffer> = null;\r\n    /** @hidden */\r\n    public _depthStencilBuffer: Nullable<WebGLRenderbuffer> = null;\r\n    /** @hidden */\r\n    public _MSAAFramebuffer: Nullable<WebGLFramebuffer> = null;\r\n    /** @hidden */\r\n    public _MSAARenderBuffer: Nullable<WebGLRenderbuffer> = null;\r\n    /** @hidden */\r\n    public _attachments: Nullable<number[]> = null;\r\n    /** @hidden */\r\n    public _textureArray: Nullable<InternalTexture[]> = null;\r\n    /** @hidden */\r\n    public _cachedCoordinatesMode: Nullable<number> = null;\r\n    /** @hidden */\r\n    public _cachedWrapU: Nullable<number> = null;\r\n    /** @hidden */\r\n    public _cachedWrapV: Nullable<number> = null;\r\n    /** @hidden */\r\n    public _cachedWrapR: Nullable<number> = null;\r\n    /** @hidden */\r\n    public _cachedAnisotropicFilteringLevel: Nullable<number> = null;\r\n    /** @hidden */\r\n    public _isDisabled: boolean = false;\r\n    /** @hidden */\r\n    public _compression: Nullable<string> = null;\r\n    /** @hidden */\r\n    public _generateStencilBuffer: boolean = false;\r\n    /** @hidden */\r\n    public _generateDepthBuffer: boolean = false;\r\n    /** @hidden */\r\n    public _comparisonFunction: number = 0;\r\n    /** @hidden */\r\n    public _sphericalPolynomial: Nullable<SphericalPolynomial> = null;\r\n    /** @hidden */\r\n    public _lodGenerationScale: number = 0;\r\n    /** @hidden */\r\n    public _lodGenerationOffset: number = 0;\r\n    /** @hidden */\r\n    public _depthStencilTexture: Nullable<InternalTexture>;\r\n\r\n    // Multiview\r\n    /** @hidden */\r\n    public _colorTextureArray: Nullable<WebGLTexture> = null;\r\n    /** @hidden */\r\n    public _depthStencilTextureArray: Nullable<WebGLTexture> = null;\r\n\r\n    // The following three fields helps sharing generated fixed LODs for texture filtering\r\n    // In environment not supporting the textureLOD extension like EDGE. They are for internal use only.\r\n    // They are at the level of the gl texture to benefit from the cache.\r\n    /** @hidden */\r\n    public _lodTextureHigh: Nullable<BaseTexture> = null;\r\n    /** @hidden */\r\n    public _lodTextureMid: Nullable<BaseTexture> = null;\r\n    /** @hidden */\r\n    public _lodTextureLow: Nullable<BaseTexture> = null;\r\n    /** @hidden */\r\n    public _isRGBD: boolean = false;\r\n\r\n    /** @hidden */\r\n    public _linearSpecularLOD: boolean = false;\r\n    /** @hidden */\r\n    public _irradianceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /** @hidden */\r\n    public _webGLTexture: Nullable<WebGLTexture> = null;\r\n    /** @hidden */\r\n    public _references: number = 1;\r\n\r\n    /** @hidden */\r\n    public _gammaSpace: Nullable<boolean> = null;\r\n\r\n    private _engine: ThinEngine;\r\n\r\n    /**\r\n     * Gets the Engine the texture belongs to.\r\n     * @returns The babylon engine\r\n     */\r\n    public getEngine(): ThinEngine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * Gets the data source type of the texture\r\n     */\r\n    public get source(): InternalTextureSource {\r\n        return this._source;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InternalTexture\r\n     * @param engine defines the engine to use\r\n     * @param source defines the type of data that will be used\r\n     * @param delayAllocation if the texture allocation should be delayed (default: false)\r\n     */\r\n    constructor(engine: ThinEngine, source: InternalTextureSource, delayAllocation = false) {\r\n        this._engine = engine;\r\n        this._source = source;\r\n\r\n        if (!delayAllocation) {\r\n            this._webGLTexture = engine._createTexture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increments the number of references (ie. the number of Texture that point to it)\r\n     */\r\n    public incrementReferences(): void {\r\n        this._references++;\r\n    }\r\n\r\n    /**\r\n     * Change the size of the texture (not the size of the content)\r\n     * @param width defines the new width\r\n     * @param height defines the new height\r\n     * @param depth defines the new depth (1 by default)\r\n     */\r\n    public updateSize(width: int, height: int, depth: int = 1): void {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.depth = depth;\r\n\r\n        this.baseWidth = width;\r\n        this.baseHeight = height;\r\n        this.baseDepth = depth;\r\n\r\n        this._size = width * height * depth;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild(): void {\r\n        var proxy: InternalTexture;\r\n        this.isReady = false;\r\n        this._cachedCoordinatesMode = null;\r\n        this._cachedWrapU = null;\r\n        this._cachedWrapV = null;\r\n        this._cachedAnisotropicFilteringLevel = null;\r\n\r\n        switch (this.source) {\r\n            case InternalTextureSource.Temp:\r\n                return;\r\n\r\n            case InternalTextureSource.Url:\r\n                proxy = this._engine.createTexture(this._originalUrl ?? this.url, !this.generateMipMaps, this.invertY, null, this.samplingMode, () => {\r\n                    proxy._swapAndDie(this);\r\n                    this.isReady = true;\r\n                }, null, this._buffer, undefined, this.format);\r\n                return;\r\n\r\n            case InternalTextureSource.Raw:\r\n                proxy = this._engine.createRawTexture(this._bufferView, this.baseWidth, this.baseHeight, this.format, this.generateMipMaps,\r\n                    this.invertY, this.samplingMode, this._compression);\r\n                proxy._swapAndDie(this);\r\n\r\n                this.isReady = true;\r\n                return;\r\n\r\n            case InternalTextureSource.Raw3D:\r\n                proxy = this._engine.createRawTexture3D(this._bufferView, this.baseWidth, this.baseHeight, this.baseDepth, this.format, this.generateMipMaps,\r\n                    this.invertY, this.samplingMode, this._compression);\r\n                proxy._swapAndDie(this);\r\n\r\n                this.isReady = true;\r\n                return;\r\n\r\n            case InternalTextureSource.Raw2DArray:\r\n                proxy = this._engine.createRawTexture2DArray(this._bufferView, this.baseWidth, this.baseHeight, this.baseDepth, this.format, this.generateMipMaps,\r\n                    this.invertY, this.samplingMode, this._compression);\r\n                proxy._swapAndDie(this);\r\n\r\n                this.isReady = true;\r\n                return;\r\n\r\n            case InternalTextureSource.Dynamic:\r\n                proxy = this._engine.createDynamicTexture(this.baseWidth, this.baseHeight, this.generateMipMaps, this.samplingMode);\r\n                proxy._swapAndDie(this);\r\n                this._engine.updateDynamicTexture(this, this._engine.getRenderingCanvas()!, this.invertY, undefined, undefined, true);\r\n\r\n                // The engine will make sure to update content so no need to flag it as isReady = true\r\n                return;\r\n\r\n            case InternalTextureSource.RenderTarget:\r\n                let options = new RenderTargetCreationOptions();\r\n                options.generateDepthBuffer = this._generateDepthBuffer;\r\n                options.generateMipMaps = this.generateMipMaps;\r\n                options.generateStencilBuffer = this._generateStencilBuffer;\r\n                options.samplingMode = this.samplingMode;\r\n                options.type = this.type;\r\n\r\n                if (this.isCube) {\r\n                    proxy = this._engine.createRenderTargetCubeTexture(this.width, options);\r\n                } else {\r\n                    let size = {\r\n                        width: this.width,\r\n                        height: this.height,\r\n                        layers: this.is2DArray ? this.depth : undefined\r\n                    };\r\n\r\n                    proxy = (this._engine as Engine).createRenderTargetTexture(size, options);\r\n                }\r\n                proxy._swapAndDie(this);\r\n\r\n                this.isReady = true;\r\n                return;\r\n            case InternalTextureSource.Depth:\r\n                let depthTextureOptions = {\r\n                    bilinearFiltering: this.samplingMode !== 2,\r\n                    comparisonFunction: this._comparisonFunction,\r\n                    generateStencil: this._generateStencilBuffer,\r\n                    isCube: this.isCube\r\n                };\r\n\r\n                let size = {\r\n                    width: this.width,\r\n                    height: this.height,\r\n                    layers: this.is2DArray ? this.depth : undefined\r\n                };\r\n                proxy = this._engine.createDepthStencilTexture(size, depthTextureOptions);\r\n                proxy._swapAndDie(this);\r\n\r\n                this.isReady = true;\r\n                return;\r\n\r\n            case InternalTextureSource.Cube:\r\n                proxy = this._engine.createCubeTexture(this.url, null, this._files, !this.generateMipMaps, () => {\r\n                    proxy._swapAndDie(this);\r\n                    this.isReady = true;\r\n                }, null, this.format, this._extension);\r\n                return;\r\n\r\n            case InternalTextureSource.CubeRaw:\r\n                proxy = this._engine.createRawCubeTexture(this._bufferViewArray!, this.width, this.format, this.type, this.generateMipMaps, this.invertY, this.samplingMode, this._compression);\r\n                proxy._swapAndDie(this);\r\n                this.isReady = true;\r\n                return;\r\n\r\n            case InternalTextureSource.CubeRawRGBD:\r\n                proxy = this._engine.createRawCubeTexture(null, this.width, this.format, this.type, this.generateMipMaps, this.invertY, this.samplingMode, this._compression);\r\n                InternalTexture._UpdateRGBDAsync(proxy, this._bufferViewArrayArray!, this._sphericalPolynomial, this._lodGenerationScale, this._lodGenerationOffset).then(() => {\r\n                    proxy._swapAndDie(this);\r\n                    this.isReady = true;\r\n                });\r\n                return;\r\n\r\n            case InternalTextureSource.CubePrefiltered:\r\n                proxy = this._engine.createPrefilteredCubeTexture(this.url, null, this._lodGenerationScale, this._lodGenerationOffset, (proxy) => {\r\n                    if (proxy) {\r\n                        proxy._swapAndDie(this);\r\n                    }\r\n\r\n                    this.isReady = true;\r\n                }, null, this.format, this._extension);\r\n                proxy._sphericalPolynomial = this._sphericalPolynomial;\r\n                return;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _swapAndDie(target: InternalTexture): void {\r\n        target._webGLTexture = this._webGLTexture;\r\n        target._isRGBD = this._isRGBD;\r\n\r\n        if (this._framebuffer) {\r\n            target._framebuffer = this._framebuffer;\r\n        }\r\n\r\n        if (this._depthStencilBuffer) {\r\n            target._depthStencilBuffer = this._depthStencilBuffer;\r\n        }\r\n\r\n        target._depthStencilTexture = this._depthStencilTexture;\r\n\r\n        if (this._lodTextureHigh) {\r\n            if (target._lodTextureHigh) {\r\n                target._lodTextureHigh.dispose();\r\n            }\r\n            target._lodTextureHigh = this._lodTextureHigh;\r\n        }\r\n\r\n        if (this._lodTextureMid) {\r\n            if (target._lodTextureMid) {\r\n                target._lodTextureMid.dispose();\r\n            }\r\n            target._lodTextureMid = this._lodTextureMid;\r\n        }\r\n\r\n        if (this._lodTextureLow) {\r\n            if (target._lodTextureLow) {\r\n                target._lodTextureLow.dispose();\r\n            }\r\n            target._lodTextureLow = this._lodTextureLow;\r\n        }\r\n\r\n        if (this._irradianceTexture) {\r\n            if (target._irradianceTexture) {\r\n                target._irradianceTexture.dispose();\r\n            }\r\n            target._irradianceTexture = this._irradianceTexture;\r\n        }\r\n\r\n        let cache = this._engine.getLoadedTexturesCache();\r\n        var index = cache.indexOf(this);\r\n        if (index !== -1) {\r\n            cache.splice(index, 1);\r\n        }\r\n\r\n        var index = cache.indexOf(target);\r\n        if (index === -1) {\r\n            cache.push(target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the current allocated resources\r\n     */\r\n    public dispose(): void {\r\n        if (!this._webGLTexture) {\r\n            return;\r\n        }\r\n\r\n        this._references--;\r\n        if (this._references === 0) {\r\n            this._engine._releaseTexture(this);\r\n            this._webGLTexture = null;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}