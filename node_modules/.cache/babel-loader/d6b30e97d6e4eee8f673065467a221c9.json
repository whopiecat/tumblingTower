{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Mesh } from \"../../Meshes/mesh\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { WebVRController } from \"./webVRController\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\n/**\r\n     * Gear VR Controller\r\n     */\n\nvar GearVRController =\n/** @class */\nfunction (_super) {\n  __extends(GearVRController, _super);\n  /**\r\n   * Creates a new GearVRController from a gamepad\r\n   * @param vrGamepad the gamepad that the controller should be created from\r\n   */\n\n\n  function GearVRController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this;\n\n    _this._buttonIndexToObservableNameMap = ['onPadStateChangedObservable', 'onTriggerStateChangedObservable' // Trigger\n    ];\n    _this.controllerType = PoseEnabledControllerType.GEAR_VR; // Initial starting position defaults to where hand would be (incase of only 3dof controller)\n\n    _this._calculatedPosition = new Vector3(_this.hand == \"left\" ? -0.15 : 0.15, -0.5, 0.25);\n\n    _this._disableTrackPosition(_this._calculatedPosition);\n\n    return _this;\n  }\n  /**\r\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n   * @param scene scene in which to add meshes\r\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n   */\n\n\n  GearVRController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    SceneLoader.ImportMesh(\"\", GearVRController.MODEL_BASE_URL, GearVRController.MODEL_FILENAME, scene, function (newMeshes) {\n      // Offset the controller so it will rotate around the users wrist\n      var mesh = new Mesh(\"\", scene);\n      newMeshes[1].parent = mesh;\n      newMeshes[1].position.z = -0.15;\n      _this._defaultModel = mesh;\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n  /**\r\n   * Called once for each button that changed state since the last frame\r\n   * @param buttonIdx Which button index changed\r\n   * @param state New state of the button\r\n   * @param changes Which properties on the state changed since last frame\r\n   */\n\n\n  GearVRController.prototype._handleButtonChange = function (buttonIdx, state, changes) {\n    if (buttonIdx < this._buttonIndexToObservableNameMap.length) {\n      var observableName = this._buttonIndexToObservableNameMap[buttonIdx]; // Only emit events for buttons that we know how to map from index to observable\n\n      var observable = this[observableName];\n\n      if (observable) {\n        observable.notifyObservers(state);\n      }\n    }\n  };\n  /**\r\n   * Base Url for the controller model.\r\n   */\n\n\n  GearVRController.MODEL_BASE_URL = 'https://controllers.babylonjs.com/generic/';\n  /**\r\n   * File name for the controller model.\r\n   */\n\n  GearVRController.MODEL_FILENAME = 'generic.babylon';\n  /**\r\n   * Gamepad Id prefix used to identify this controller.\r\n   */\n\n  GearVRController.GAMEPAD_ID_PREFIX = 'Gear VR'; // id is 'Gear VR Controller'\n\n  return GearVRController;\n}(WebVRController);\n\nexport { GearVRController };\n\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: function (gamepadInfo) {\n    return gamepadInfo.id.indexOf(GearVRController.GAMEPAD_ID_PREFIX) === 0 || gamepadInfo.id.indexOf('Oculus Go') !== -1 || gamepadInfo.id.indexOf('Vive Focus') !== -1;\n  },\n  create: function (gamepadInfo) {\n    return new GearVRController(gamepadInfo);\n  }\n});","map":{"version":3,"sources":["../../../../sourceES6/core/Gamepads/Controllers/gearVRController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { GamepadButtonChanges } from \"../../Gamepads/gamepad\";\r\nimport { WebVRController } from \"./webVRController\";\r\nimport { PoseEnabledControllerType, ExtendedGamepadButton, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\n\r\n/**\r\n     * Gear VR Controller\r\n     */\r\nexport class GearVRController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = 'https://controllers.babylonjs.com/generic/';\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static MODEL_FILENAME: string = 'generic.babylon';\r\n\r\n    /**\r\n     * Gamepad Id prefix used to identify this controller.\r\n     */\r\n    public static readonly GAMEPAD_ID_PREFIX: string = 'Gear VR'; // id is 'Gear VR Controller'\r\n\r\n    private readonly _buttonIndexToObservableNameMap = [\r\n        'onPadStateChangedObservable', // Pad\r\n        'onTriggerStateChangedObservable' // Trigger\r\n    ];\r\n\r\n    /**\r\n     * Creates a new GearVRController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.GEAR_VR;\r\n        // Initial starting position defaults to where hand would be (incase of only 3dof controller)\r\n        this._calculatedPosition = new Vector3(this.hand == \"left\" ? -0.15 : 0.15, -0.5, 0.25);\r\n        this._disableTrackPosition(this._calculatedPosition);\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", GearVRController.MODEL_BASE_URL, GearVRController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            // Offset the controller so it will rotate around the users wrist\r\n            var mesh = new Mesh(\"\", scene);\r\n            newMeshes[1].parent = mesh;\r\n            newMeshes[1].position.z = -0.15;\r\n            this._defaultModel = mesh;\r\n            this.attachToMesh(this._defaultModel);\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     * @param changes Which properties on the state changed since last frame\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton, changes: GamepadButtonChanges) {\r\n        if (buttonIdx < this._buttonIndexToObservableNameMap.length) {\r\n            const observableName: string = this._buttonIndexToObservableNameMap[buttonIdx];\r\n\r\n            // Only emit events for buttons that we know how to map from index to observable\r\n            let observable = (<any>this)[observableName];\r\n            if (observable) {\r\n                observable.notifyObservers(state);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        return gamepadInfo.id.indexOf(GearVRController.GAMEPAD_ID_PREFIX) === 0 ||\r\n            gamepadInfo.id.indexOf('Oculus Go') !== -1 ||\r\n            gamepadInfo.id.indexOf('Vive Focus') !== -1;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new GearVRController(gamepadInfo);\r\n    }\r\n});\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}