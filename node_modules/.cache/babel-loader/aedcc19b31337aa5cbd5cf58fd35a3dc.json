{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Logger } from \"../../Misc/logger\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { WebVRController } from \"./webVRController\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\n/**\r\n * Google Daydream controller\r\n */\n\nvar DaydreamController =\n/** @class */\nfunction (_super) {\n  __extends(DaydreamController, _super);\n  /**\r\n   * Creates a new DaydreamController from a gamepad\r\n   * @param vrGamepad the gamepad that the controller should be created from\r\n   */\n\n\n  function DaydreamController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this;\n\n    _this.controllerType = PoseEnabledControllerType.DAYDREAM;\n    return _this;\n  }\n  /**\r\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n   * @param scene scene in which to add meshes\r\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n   */\n\n\n  DaydreamController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    SceneLoader.ImportMesh(\"\", DaydreamController.MODEL_BASE_URL, DaydreamController.MODEL_FILENAME, scene, function (newMeshes) {\n      _this._defaultModel = newMeshes[1];\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n  /**\r\n   * Called once for each button that changed state since the last frame\r\n   * @param buttonIdx Which button index changed\r\n   * @param state New state of the button\r\n   * @param changes Which properties on the state changed since last frame\r\n   */\n\n\n  DaydreamController.prototype._handleButtonChange = function (buttonIdx, state, changes) {\n    // Daydream controller only has 1 GamepadButton (on the trackpad).\n    if (buttonIdx === 0) {\n      var observable = this.onTriggerStateChangedObservable;\n\n      if (observable) {\n        observable.notifyObservers(state);\n      }\n    } else {\n      // If the app or home buttons are ever made available\n      Logger.Warn(\"Unrecognized Daydream button index: \" + buttonIdx);\n    }\n  };\n  /**\r\n   * Base Url for the controller model.\r\n   */\n\n\n  DaydreamController.MODEL_BASE_URL = 'https://controllers.babylonjs.com/generic/';\n  /**\r\n   * File name for the controller model.\r\n   */\n\n  DaydreamController.MODEL_FILENAME = 'generic.babylon';\n  /**\r\n   * Gamepad Id prefix used to identify Daydream Controller.\r\n   */\n\n  DaydreamController.GAMEPAD_ID_PREFIX = 'Daydream'; // id is 'Daydream Controller'\n\n  return DaydreamController;\n}(WebVRController);\n\nexport { DaydreamController };\n\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: function (gamepadInfo) {\n    return gamepadInfo.id.indexOf(DaydreamController.GAMEPAD_ID_PREFIX) === 0;\n  },\n  create: function (gamepadInfo) {\n    return new DaydreamController(gamepadInfo);\n  }\n});","map":{"version":3,"sources":["../../../../sourceES6/core/Gamepads/Controllers/daydreamController.ts"],"names":[],"mappings":";AAAA,SAAS,MAAT,QAAuB,mBAAvB;AAGA,SAAS,WAAT,QAA4B,2BAA5B;AAGA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,yBAAT,EAA2D,2BAA3D,QAA8F,yBAA9F;AAEA;;;;AAGA,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;AAgBpC;;;;;;AAIA,WAAA,kBAAA,CAAY,SAAZ,EAA0B;AAA1B,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,KAAgB,IADpB;;AAEI,IAAA,KAAI,CAAC,cAAL,GAAsB,yBAAyB,CAAC,QAAhD;;AACH;AAED;;;;;;;AAKO,EAAA,kBAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,KAA1B,EAAwC,UAAxC,EAAiF;AAAjF,QAAA,KAAA,GAAA,IAAA;;AACI,IAAA,WAAW,CAAC,UAAZ,CAAuB,EAAvB,EAA2B,kBAAkB,CAAC,cAA9C,EAA8D,kBAAkB,CAAC,cAAjF,EAAiG,KAAjG,EAAwG,UAAC,SAAD,EAAU;AAC9G,MAAA,KAAI,CAAC,aAAL,GAAqB,SAAS,CAAC,CAAD,CAA9B;;AACA,MAAA,KAAI,CAAC,YAAL,CAAkB,KAAI,CAAC,aAAvB;;AAEA,UAAI,UAAJ,EAAgB;AACZ,QAAA,UAAU,CAAC,KAAI,CAAC,aAAN,CAAV;AACH;AACJ,KAPD;AAQH,GATM;AAWP;;;;;;;;AAMU,EAAA,kBAAA,CAAA,SAAA,CAAA,mBAAA,GAAV,UAA8B,SAA9B,EAAiD,KAAjD,EAA+E,OAA/E,EAA4G;AACxG;AACA,QAAI,SAAS,KAAK,CAAlB,EAAqB;AACjB,UAAI,UAAU,GAAG,KAAK,+BAAtB;;AACA,UAAI,UAAJ,EAAgB;AACZ,QAAA,UAAU,CAAC,eAAX,CAA2B,KAA3B;AACH;AACJ,KALD,MAKO;AACH;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,yCAAuC,SAAnD;AACH;AACJ,GAXS;AA9CV;;;;;AAGc,EAAA,kBAAA,CAAA,cAAA,GAAyB,4CAAzB;AAEd;;;;AAGc,EAAA,kBAAA,CAAA,cAAA,GAAyB,iBAAzB;AAEd;;;;AAGuB,EAAA,kBAAA,CAAA,iBAAA,GAA4B,UAA5B,CAd3B,CAcmE;;AA6CnE,SAAA,kBAAA;AAAC,CA3DD,CAAwC,eAAxC,CAAA;;SAAa,kB;;AA6Db,2BAA2B,CAAC,oBAA5B,CAAiD,IAAjD,CAAsD;AAClD,EAAA,SAAS,EAAE,UAAC,WAAD,EAAY;AACnB,WAAO,WAAW,CAAC,EAAZ,CAAe,OAAf,CAAuB,kBAAkB,CAAC,iBAA1C,MAAiE,CAAxE;AACH,GAHiD;AAIlD,EAAA,MAAM,EAAE,UAAC,WAAD,EAAY;AAChB,WAAO,IAAI,kBAAJ,CAAuB,WAAvB,CAAP;AACH;AANiD,CAAtD","sourcesContent":["import { Logger } from \"../../Misc/logger\";\r\nimport { Scene } from \"../../scene\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\n\r\nimport { GamepadButtonChanges } from \"../../Gamepads/gamepad\";\r\nimport { WebVRController } from \"./webVRController\";\r\nimport { PoseEnabledControllerType, ExtendedGamepadButton, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\n\r\n/**\r\n * Google Daydream controller\r\n */\r\nexport class DaydreamController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = 'https://controllers.babylonjs.com/generic/';\r\n\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static MODEL_FILENAME: string = 'generic.babylon';\r\n\r\n    /**\r\n     * Gamepad Id prefix used to identify Daydream Controller.\r\n     */\r\n    public static readonly GAMEPAD_ID_PREFIX: string = 'Daydream'; // id is 'Daydream Controller'\r\n\r\n    /**\r\n     * Creates a new DaydreamController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.DAYDREAM;\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", DaydreamController.MODEL_BASE_URL, DaydreamController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            this._defaultModel = newMeshes[1];\r\n            this.attachToMesh(this._defaultModel);\r\n\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     * @param changes Which properties on the state changed since last frame\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton, changes: GamepadButtonChanges) {\r\n        // Daydream controller only has 1 GamepadButton (on the trackpad).\r\n        if (buttonIdx === 0) {\r\n            let observable = this.onTriggerStateChangedObservable;\r\n            if (observable) {\r\n                observable.notifyObservers(state);\r\n            }\r\n        } else {\r\n            // If the app or home buttons are ever made available\r\n            Logger.Warn(`Unrecognized Daydream button index: ${buttonIdx}`);\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        return gamepadInfo.id.indexOf(DaydreamController.GAMEPAD_ID_PREFIX) === 0;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new DaydreamController(gamepadInfo);\r\n    }\r\n});"],"sourceRoot":""},"metadata":{},"sourceType":"module"}