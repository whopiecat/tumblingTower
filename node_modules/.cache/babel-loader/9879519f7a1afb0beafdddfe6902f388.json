{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/highlights.fragment\";\n/**\r\n * Extracts highlights from the image\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses\r\n */\n\nvar HighlightsPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(HighlightsPostProcess, _super);\n  /**\r\n   * Extracts highlights from the image\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of texture for the post process (default: Engine.TEXTURETYPE_UNSIGNED_INT)\r\n   */\n\n\n  function HighlightsPostProcess(name, options, camera, samplingMode, engine, reusable, textureType) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    return _super.call(this, name, \"highlights\", null, null, options, camera, samplingMode, engine, reusable, null, textureType) || this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"HighlightsPostProcess\" string\r\n   */\n\n\n  HighlightsPostProcess.prototype.getClassName = function () {\n    return \"HighlightsPostProcess\";\n  };\n\n  return HighlightsPostProcess;\n}(PostProcess);\n\nexport { HighlightsPostProcess };","map":{"version":3,"sources":["../../../sourceES6/core/PostProcesses/highlightsPostProcess.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAAgD,eAAhD;AAIA,OAAO,gCAAP;AAEA;;;;;AAIA,IAAA,qBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2C,EAAA,SAAA,CAAA,qBAAA,EAAA,MAAA,CAAA;AASvC;;;;;;;;;;;;;AAWA,WAAA,qBAAA,CAAY,IAAZ,EAA0B,OAA1B,EAAgE,MAAhE,EAA0F,YAA1F,EAAiH,MAAjH,EAAkI,QAAlI,EAAsJ,WAAtJ,EAA6K;AAAvB,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,CAAA;AAAuB;;WACzK,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,YAAZ,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,OAAtC,EAA+C,MAA/C,EAAuD,YAAvD,EAAqE,MAArE,EAA6E,QAA7E,EAAuF,IAAvF,EAA6F,WAA7F,KAAyG,I;AAC5G;AArBD;;;;;;AAIO,EAAA,qBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,uBAAP;AACH,GAFM;;AAkBX,SAAA,qBAAA;AAAC,CAvBD,CAA2C,WAA3C,CAAA","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\n\r\nimport \"../Shaders/highlights.fragment\";\r\n\r\n/**\r\n * Extracts highlights from the image\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses\r\n */\r\nexport class HighlightsPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"HighlightsPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"HighlightsPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Extracts highlights from the image\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of texture for the post process (default: Engine.TEXTURETYPE_UNSIGNED_INT)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean, textureType: number = 0) {\r\n        super(name, \"highlights\", null, null, options, camera, samplingMode, engine, reusable, null, textureType);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}