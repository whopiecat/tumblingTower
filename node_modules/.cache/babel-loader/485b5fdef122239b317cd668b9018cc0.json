{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AxesViewer } from \"../Debug/axesViewer\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Axis } from '../Maths/math.axis';\n/**\r\n     * The BoneAxesViewer will attach 3 axes to a specific bone of a specific mesh\r\n     * @see demo here: https://www.babylonjs-playground.com/#0DE8F4#8\r\n     */\n\nvar BoneAxesViewer =\n/** @class */\nfunction (_super) {\n  __extends(BoneAxesViewer, _super);\n  /**\r\n   * Creates a new BoneAxesViewer\r\n   * @param scene defines the hosting scene\r\n   * @param bone defines the target bone\r\n   * @param mesh defines the target mesh\r\n   * @param scaleLines defines a scaling factor for line length (1 by default)\r\n   */\n\n\n  function BoneAxesViewer(scene, bone, mesh, scaleLines) {\n    if (scaleLines === void 0) {\n      scaleLines = 1;\n    }\n\n    var _this = _super.call(this, scene, scaleLines) || this;\n    /** Gets current position */\n\n\n    _this.pos = Vector3.Zero();\n    /** Gets direction of X axis */\n\n    _this.xaxis = Vector3.Zero();\n    /** Gets direction of Y axis */\n\n    _this.yaxis = Vector3.Zero();\n    /** Gets direction of Z axis */\n\n    _this.zaxis = Vector3.Zero();\n    _this.mesh = mesh;\n    _this.bone = bone;\n    return _this;\n  }\n  /**\r\n   * Force the viewer to update\r\n   */\n\n\n  BoneAxesViewer.prototype.update = function () {\n    if (!this.mesh || !this.bone) {\n      return;\n    }\n\n    var bone = this.bone;\n\n    bone._markAsDirtyAndCompose();\n\n    bone.getAbsolutePositionToRef(this.mesh, this.pos);\n    bone.getDirectionToRef(Axis.X, this.mesh, this.xaxis);\n    bone.getDirectionToRef(Axis.Y, this.mesh, this.yaxis);\n    bone.getDirectionToRef(Axis.Z, this.mesh, this.zaxis);\n\n    _super.prototype.update.call(this, this.pos, this.xaxis, this.yaxis, this.zaxis);\n  };\n  /** Releases resources */\n\n\n  BoneAxesViewer.prototype.dispose = function () {\n    if (this.mesh) {\n      this.mesh = null;\n      this.bone = null;\n\n      _super.prototype.dispose.call(this);\n    }\n  };\n\n  return BoneAxesViewer;\n}(AxesViewer);\n\nexport { BoneAxesViewer };","map":{"version":3,"sources":["../../../sourceES6/core/Debug/boneAxesViewer.ts"],"names":[],"mappings":";AACA,SAAS,UAAT,QAA2B,qBAA3B;AACA,SAAS,OAAT,QAAwB,sBAAxB;AAIA,SAAS,IAAT,QAAqB,oBAArB;AAEA;;;;;AAIA,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;AAoBhC;;;;;;;;;AAOA,WAAA,cAAA,CAAY,KAAZ,EAA0B,IAA1B,EAAsC,IAAtC,EAAkD,UAAlD,EAAgE;AAAd,QAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,UAAA,GAAA,CAAA;AAAc;;AAAhE,QAAA,KAAA,GAEI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,EAAa,UAAb,KAAwB,IAF5B;AAhBA;;;AACO,IAAA,KAAA,CAAA,GAAA,GAAM,OAAO,CAAC,IAAR,EAAN;AACP;;AACO,IAAA,KAAA,CAAA,KAAA,GAAQ,OAAO,CAAC,IAAR,EAAR;AACP;;AACO,IAAA,KAAA,CAAA,KAAA,GAAQ,OAAO,CAAC,IAAR,EAAR;AACP;;AACO,IAAA,KAAA,CAAA,KAAA,GAAQ,OAAO,CAAC,IAAR,EAAR;AAaH,IAAA,KAAI,CAAC,IAAL,GAAY,IAAZ;AACA,IAAA,KAAI,CAAC,IAAL,GAAY,IAAZ;;AAEH;AAED;;;;;AAGO,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AAEI,QAAI,CAAC,KAAK,IAAN,IAAc,CAAC,KAAK,IAAxB,EAA8B;AAC1B;AACH;;AAED,QAAI,IAAI,GAAG,KAAK,IAAhB;;AACA,IAAA,IAAI,CAAC,sBAAL;;AACA,IAAA,IAAI,CAAC,wBAAL,CAA8B,KAAK,IAAnC,EAAyC,KAAK,GAA9C;AACA,IAAA,IAAI,CAAC,iBAAL,CAAuB,IAAI,CAAC,CAA5B,EAA+B,KAAK,IAApC,EAA0C,KAAK,KAA/C;AACA,IAAA,IAAI,CAAC,iBAAL,CAAuB,IAAI,CAAC,CAA5B,EAA+B,KAAK,IAApC,EAA0C,KAAK,KAA/C;AACA,IAAA,IAAI,CAAC,iBAAL,CAAuB,IAAI,CAAC,CAA5B,EAA+B,KAAK,IAApC,EAA0C,KAAK,KAA/C;;AAEA,IAAA,MAAA,CAAA,SAAA,CAAM,MAAN,CAAY,IAAZ,CAAY,IAAZ,EAAa,KAAK,GAAlB,EAAuB,KAAK,KAA5B,EAAmC,KAAK,KAAxC,EAA+C,KAAK,KAApD;AAEH,GAfM;AAiBP;;;AACO,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AAEI,QAAI,KAAK,IAAT,EAAe;AACX,WAAK,IAAL,GAAY,IAAZ;AACA,WAAK,IAAL,GAAY,IAAZ;;AAEA,MAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;AAEH;AACJ,GATM;;AAWX,SAAA,cAAA;AAAC,CApED,CAAoC,UAApC,CAAA","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { AxesViewer } from \"../Debug/axesViewer\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Bone } from \"../Bones/bone\";\r\nimport { Scene } from \"../scene\";\r\nimport { Axis } from '../Maths/math.axis';\r\n\r\n/**\r\n     * The BoneAxesViewer will attach 3 axes to a specific bone of a specific mesh\r\n     * @see demo here: https://www.babylonjs-playground.com/#0DE8F4#8\r\n     */\r\nexport class BoneAxesViewer extends AxesViewer {\r\n\r\n    /**\r\n     * Gets or sets the target mesh where to display the axes viewer\r\n     */\r\n    public mesh: Nullable<Mesh>;\r\n    /**\r\n     * Gets or sets the target bone where to display the axes viewer\r\n     */\r\n    public bone: Nullable<Bone>;\r\n\r\n    /** Gets current position */\r\n    public pos = Vector3.Zero();\r\n    /** Gets direction of X axis */\r\n    public xaxis = Vector3.Zero();\r\n    /** Gets direction of Y axis */\r\n    public yaxis = Vector3.Zero();\r\n    /** Gets direction of Z axis */\r\n    public zaxis = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a new BoneAxesViewer\r\n     * @param scene defines the hosting scene\r\n     * @param bone defines the target bone\r\n     * @param mesh defines the target mesh\r\n     * @param scaleLines defines a scaling factor for line length (1 by default)\r\n     */\r\n    constructor(scene: Scene, bone: Bone, mesh: Mesh, scaleLines = 1) {\r\n\r\n        super(scene, scaleLines);\r\n\r\n        this.mesh = mesh;\r\n        this.bone = bone;\r\n\r\n    }\r\n\r\n    /**\r\n     * Force the viewer to update\r\n     */\r\n    public update(): void {\r\n\r\n        if (!this.mesh || !this.bone) {\r\n            return;\r\n        }\r\n\r\n        var bone = this.bone;\r\n        bone._markAsDirtyAndCompose();\r\n        bone.getAbsolutePositionToRef(this.mesh, this.pos);\r\n        bone.getDirectionToRef(Axis.X, this.mesh, this.xaxis);\r\n        bone.getDirectionToRef(Axis.Y, this.mesh, this.yaxis);\r\n        bone.getDirectionToRef(Axis.Z, this.mesh, this.zaxis);\r\n\r\n        super.update(this.pos, this.xaxis, this.yaxis, this.zaxis);\r\n\r\n    }\r\n\r\n    /** Releases resources */\r\n    public dispose() {\r\n\r\n        if (this.mesh) {\r\n            this.mesh = null;\r\n            this.bone = null;\r\n\r\n            super.dispose();\r\n\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}