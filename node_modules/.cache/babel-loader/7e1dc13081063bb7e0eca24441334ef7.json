{"ast":null,"code":"import { Logger } from \"../Misc/logger\";\nimport { Color3 } from \"../Maths/math.color\";\nimport { SubSurfaceScatteringPostProcess } from \"../PostProcesses/subSurfaceScatteringPostProcess\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { _DevTools } from '../Misc/devTools';\n/**\r\n * Contains all parameters needed for the prepass to perform\r\n * screen space subsurface scattering\r\n */\n\nvar SubSurfaceConfiguration =\n/** @class */\nfunction () {\n  /**\r\n   * Builds a subsurface configuration object\r\n   * @param scene The scene\r\n   */\n  function SubSurfaceConfiguration(scene) {\n    this._ssDiffusionS = [];\n    this._ssFilterRadii = [];\n    this._ssDiffusionD = [];\n    /**\r\n     * Is subsurface enabled\r\n     */\n\n    this.enabled = false;\n    /**\r\n     * Name of the configuration\r\n     */\n\n    this.name = SceneComponentConstants.NAME_SUBSURFACE;\n    /**\r\n     * Diffusion profile colors for subsurface scattering\r\n     * You can add one diffusion color using `addDiffusionProfile` on `scene.prePassRenderer`\r\n     * See ...\r\n     * Note that you can only store up to 5 of them\r\n     */\n\n    this.ssDiffusionProfileColors = [];\n    /**\r\n     * Defines the ratio real world => scene units.\r\n     * Used for subsurface scattering\r\n     */\n\n    this.metersPerUnit = 1;\n    /**\r\n     * Textures that should be present in the MRT for this effect to work\r\n     */\n\n    this.texturesRequired = [5, 6, 4, 0]; // Adding default diffusion profile\n\n    this.addDiffusionProfile(new Color3(1, 1, 1));\n    this._scene = scene;\n\n    SubSurfaceConfiguration._SceneComponentInitialization(this._scene);\n  }\n\n  Object.defineProperty(SubSurfaceConfiguration.prototype, \"ssDiffusionS\", {\n    /**\r\n     * Diffusion profile color for subsurface scattering\r\n     */\n    get: function () {\n      return this._ssDiffusionS;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceConfiguration.prototype, \"ssDiffusionD\", {\n    /**\r\n     * Diffusion profile max color channel value for subsurface scattering\r\n     */\n    get: function () {\n      return this._ssDiffusionD;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceConfiguration.prototype, \"ssFilterRadii\", {\n    /**\r\n     * Diffusion profile filter radius for subsurface scattering\r\n     */\n    get: function () {\n      return this._ssFilterRadii;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds a new diffusion profile.\r\n   * Useful for more realistic subsurface scattering on diverse materials.\r\n   * @param color The color of the diffusion profile. Should be the average color of the material.\r\n   * @return The index of the diffusion profile for the material subsurface configuration\r\n   */\n\n  SubSurfaceConfiguration.prototype.addDiffusionProfile = function (color) {\n    if (this.ssDiffusionD.length >= 5) {\n      // We only suppport 5 diffusion profiles\n      Logger.Error(\"You already reached the maximum number of diffusion profiles.\");\n      return 0; // default profile\n    } // Do not add doubles\n\n\n    for (var i = 0; i < this._ssDiffusionS.length / 3; i++) {\n      if (this._ssDiffusionS[i * 3] === color.r && this._ssDiffusionS[i * 3 + 1] === color.g && this._ssDiffusionS[i * 3 + 2] === color.b) {\n        return i;\n      }\n    }\n\n    this._ssDiffusionS.push(color.r, color.b, color.g);\n\n    this._ssDiffusionD.push(Math.max(Math.max(color.r, color.b), color.g));\n\n    this._ssFilterRadii.push(this.getDiffusionProfileParameters(color));\n\n    this.ssDiffusionProfileColors.push(color);\n    return this._ssDiffusionD.length - 1;\n  };\n  /**\r\n   * Creates the sss post process\r\n   * @return The created post process\r\n   */\n\n\n  SubSurfaceConfiguration.prototype.createPostProcess = function () {\n    this.postProcess = new SubSurfaceScatteringPostProcess(\"subSurfaceScattering\", this._scene, 1, null, undefined, this._scene.getEngine());\n    this.postProcess.autoClear = false;\n    return this.postProcess;\n  };\n  /**\r\n   * Deletes all diffusion profiles.\r\n   * Note that in order to render subsurface scattering, you should have at least 1 diffusion profile.\r\n   */\n\n\n  SubSurfaceConfiguration.prototype.clearAllDiffusionProfiles = function () {\n    this._ssDiffusionD = [];\n    this._ssDiffusionS = [];\n    this._ssFilterRadii = [];\n    this.ssDiffusionProfileColors = [];\n  };\n  /**\r\n   * Disposes this object\r\n   */\n\n\n  SubSurfaceConfiguration.prototype.dispose = function () {\n    this.clearAllDiffusionProfiles();\n    this.postProcess.dispose();\n  };\n  /**\r\n   * @hidden\r\n   * https://zero-radiance.github.io/post/sampling-diffusion/\r\n   *\r\n   * Importance sample the normalized diffuse reflectance profile for the computed value of 's'.\r\n   * ------------------------------------------------------------------------------------\r\n   * R[r, phi, s]   = s * (Exp[-r * s] + Exp[-r * s / 3]) / (8 * Pi * r)\r\n   * PDF[r, phi, s] = r * R[r, phi, s]\r\n   * CDF[r, s]      = 1 - 1/4 * Exp[-r * s] - 3/4 * Exp[-r * s / 3]\r\n   * ------------------------------------------------------------------------------------\r\n   * We importance sample the color channel with the widest scattering distance.\r\n   */\n\n\n  SubSurfaceConfiguration.prototype.getDiffusionProfileParameters = function (color) {\n    var cdf = 0.997;\n    var maxScatteringDistance = Math.max(color.r, color.g, color.b);\n    return this._sampleBurleyDiffusionProfile(cdf, maxScatteringDistance);\n  };\n  /**\r\n   * Performs sampling of a Normalized Burley diffusion profile in polar coordinates.\r\n   * 'u' is the random number (the value of the CDF): [0, 1).\r\n   * rcp(s) = 1 / ShapeParam = ScatteringDistance.\r\n   * Returns the sampled radial distance, s.t. (u = 0 -> r = 0) and (u = 1 -> r = Inf).\r\n   */\n\n\n  SubSurfaceConfiguration.prototype._sampleBurleyDiffusionProfile = function (u, rcpS) {\n    u = 1 - u; // Convert CDF to CCDF\n\n    var g = 1 + 4 * u * (2 * u + Math.sqrt(1 + 4 * u * u));\n    var n = Math.pow(g, -1.0 / 3.0); // g^(-1/3)\n\n    var p = g * n * n; // g^(+1/3)\n\n    var c = 1 + p + n; // 1 + g^(+1/3) + g^(-1/3)\n\n    var x = 3 * Math.log(c / (4 * u));\n    return x * rcpS;\n  };\n  /** @hidden */\n\n\n  SubSurfaceConfiguration._SceneComponentInitialization = function (_) {\n    throw _DevTools.WarnImport(\"PrePassRendererSceneComponent\");\n  };\n\n  return SubSurfaceConfiguration;\n}();\n\nexport { SubSurfaceConfiguration };","map":{"version":3,"sources":["../../../sourceES6/core/Rendering/subSurfaceConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { Scene } from \"../scene\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { SubSurfaceScatteringPostProcess } from \"../PostProcesses/subSurfaceScatteringPostProcess\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { PrePassEffectConfiguration } from \"./prePassEffectConfiguration\";\r\nimport { _DevTools } from '../Misc/devTools';\r\n\r\n\r\n/**\r\n * Contains all parameters needed for the prepass to perform\r\n * screen space subsurface scattering\r\n */\r\nexport class SubSurfaceConfiguration implements PrePassEffectConfiguration {\r\n    /** @hidden */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _DevTools.WarnImport(\"PrePassRendererSceneComponent\");\r\n    }\r\n\r\n    private _ssDiffusionS: number[] = [];\r\n    private _ssFilterRadii: number[] = [];\r\n    private _ssDiffusionD: number[] = [];\r\n\r\n    /**\r\n     * Post process to attach for screen space subsurface scattering\r\n     */\r\n    public postProcess: SubSurfaceScatteringPostProcess;\r\n\r\n    /**\r\n     * Diffusion profile color for subsurface scattering\r\n     */\r\n    public get ssDiffusionS() {\r\n        return this._ssDiffusionS;\r\n    }\r\n\r\n    /**\r\n     * Diffusion profile max color channel value for subsurface scattering\r\n     */\r\n    public get ssDiffusionD() {\r\n        return this._ssDiffusionD;\r\n    }\r\n\r\n    /**\r\n     * Diffusion profile filter radius for subsurface scattering\r\n     */\r\n    public get ssFilterRadii() {\r\n        return this._ssFilterRadii;\r\n    }\r\n\r\n    /**\r\n     * Is subsurface enabled\r\n     */\r\n    public enabled = false;\r\n\r\n    /**\r\n     * Name of the configuration\r\n     */\r\n    public name = SceneComponentConstants.NAME_SUBSURFACE;\r\n\r\n    /**\r\n     * Diffusion profile colors for subsurface scattering\r\n     * You can add one diffusion color using `addDiffusionProfile` on `scene.prePassRenderer`\r\n     * See ...\r\n     * Note that you can only store up to 5 of them\r\n     */\r\n    public ssDiffusionProfileColors: Color3[] = [];\r\n\r\n    /**\r\n     * Defines the ratio real world => scene units.\r\n     * Used for subsurface scattering\r\n     */\r\n    public metersPerUnit: number = 1;\r\n\r\n    /**\r\n     * Textures that should be present in the MRT for this effect to work\r\n     */\r\n    public readonly texturesRequired: number[] = [\r\n        5,\r\n        6,\r\n        4,\r\n        0,\r\n    ];\r\n\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Builds a subsurface configuration object\r\n     * @param scene The scene\r\n     */\r\n    constructor(scene: Scene) {\r\n        // Adding default diffusion profile\r\n        this.addDiffusionProfile(new Color3(1, 1, 1));\r\n        this._scene = scene;\r\n\r\n        SubSurfaceConfiguration._SceneComponentInitialization(this._scene);\r\n    }\r\n\r\n    /**\r\n     * Adds a new diffusion profile.\r\n     * Useful for more realistic subsurface scattering on diverse materials.\r\n     * @param color The color of the diffusion profile. Should be the average color of the material.\r\n     * @return The index of the diffusion profile for the material subsurface configuration\r\n     */\r\n    public addDiffusionProfile(color: Color3) : number {\r\n        if (this.ssDiffusionD.length >= 5) {\r\n            // We only suppport 5 diffusion profiles\r\n            Logger.Error(\"You already reached the maximum number of diffusion profiles.\");\r\n            return 0; // default profile\r\n        }\r\n\r\n        // Do not add doubles\r\n        for (let i = 0; i < this._ssDiffusionS.length / 3; i++) {\r\n            if (this._ssDiffusionS[i * 3] === color.r &&\r\n                this._ssDiffusionS[i * 3 + 1] === color.g &&\r\n                this._ssDiffusionS[i * 3 + 2] === color.b) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        this._ssDiffusionS.push(color.r, color.b, color.g);\r\n        this._ssDiffusionD.push(Math.max(Math.max(color.r, color.b), color.g));\r\n        this._ssFilterRadii.push(this.getDiffusionProfileParameters(color));\r\n        this.ssDiffusionProfileColors.push(color);\r\n\r\n        return this._ssDiffusionD.length - 1;\r\n    }\r\n\r\n    /**\r\n     * Creates the sss post process\r\n     * @return The created post process\r\n     */\r\n    public createPostProcess() : SubSurfaceScatteringPostProcess {\r\n        this.postProcess = new SubSurfaceScatteringPostProcess(\"subSurfaceScattering\", this._scene, 1, null, undefined, this._scene.getEngine());\r\n        this.postProcess.autoClear = false;\r\n\r\n        return this.postProcess;\r\n    }\r\n\r\n    /**\r\n     * Deletes all diffusion profiles.\r\n     * Note that in order to render subsurface scattering, you should have at least 1 diffusion profile.\r\n     */\r\n    public clearAllDiffusionProfiles() {\r\n        this._ssDiffusionD = [];\r\n        this._ssDiffusionS = [];\r\n        this._ssFilterRadii = [];\r\n        this.ssDiffusionProfileColors = [];\r\n    }\r\n\r\n    /**\r\n     * Disposes this object\r\n     */\r\n    public dispose() {\r\n        this.clearAllDiffusionProfiles();\r\n        this.postProcess.dispose();\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * https://zero-radiance.github.io/post/sampling-diffusion/\r\n     *\r\n     * Importance sample the normalized diffuse reflectance profile for the computed value of 's'.\r\n     * ------------------------------------------------------------------------------------\r\n     * R[r, phi, s]   = s * (Exp[-r * s] + Exp[-r * s / 3]) / (8 * Pi * r)\r\n     * PDF[r, phi, s] = r * R[r, phi, s]\r\n     * CDF[r, s]      = 1 - 1/4 * Exp[-r * s] - 3/4 * Exp[-r * s / 3]\r\n     * ------------------------------------------------------------------------------------\r\n     * We importance sample the color channel with the widest scattering distance.\r\n     */\r\n    public getDiffusionProfileParameters(color: Color3)\r\n    {\r\n        const cdf = 0.997;\r\n        const maxScatteringDistance = Math.max(color.r, color.g, color.b);\r\n\r\n        return this._sampleBurleyDiffusionProfile(cdf, maxScatteringDistance);\r\n    }\r\n\r\n    /**\r\n     * Performs sampling of a Normalized Burley diffusion profile in polar coordinates.\r\n     * 'u' is the random number (the value of the CDF): [0, 1).\r\n     * rcp(s) = 1 / ShapeParam = ScatteringDistance.\r\n     * Returns the sampled radial distance, s.t. (u = 0 -> r = 0) and (u = 1 -> r = Inf).\r\n     */\r\n    private _sampleBurleyDiffusionProfile(u: number, rcpS: number)\r\n    {\r\n        u = 1 - u; // Convert CDF to CCDF\r\n\r\n        let g = 1 + (4 * u) * (2 * u + Math.sqrt(1 + (4 * u) * u));\r\n        let n = Math.pow(g, -1.0 / 3.0);                      // g^(-1/3)\r\n        let p = (g * n) * n;                                   // g^(+1/3)\r\n        let c = 1 + p + n;                                     // 1 + g^(+1/3) + g^(-1/3)\r\n        let x = 3 * Math.log(c / (4 * u));\r\n\r\n        return x * rcpS;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}