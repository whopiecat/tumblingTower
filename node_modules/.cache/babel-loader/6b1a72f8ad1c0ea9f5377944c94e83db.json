{"ast":null,"code":"import { DeepCopier } from \"../../Misc/deepCopier\";\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector\";\nimport { Scalar } from \"../../Maths/math.scalar\";\nimport { VertexBuffer } from '../../Meshes/buffer';\n/**\r\n * Particle emitter emitting particles from the inside of a box.\r\n * It emits the particles randomly between 2 given directions.\r\n */\n\nvar MeshParticleEmitter =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance MeshParticleEmitter\r\n   * @param mesh defines the mesh to use as source\r\n   */\n  function MeshParticleEmitter(mesh) {\n    if (mesh === void 0) {\n      mesh = null;\n    }\n\n    this._indices = null;\n    this._positions = null;\n    this._normals = null;\n    this._storedNormal = Vector3.Zero();\n    this._mesh = null;\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\n\n    this.direction1 = new Vector3(0, 1.0, 0);\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\n\n    this.direction2 = new Vector3(0, 1.0, 0);\n    /**\r\n     * Gets or sets a boolean indicating that particle directions must be built from mesh face normals\r\n     */\n\n    this.useMeshNormalsForDirection = true;\n    this.mesh = mesh;\n  }\n\n  Object.defineProperty(MeshParticleEmitter.prototype, \"mesh\", {\n    /** Defines the mesh to use as source */\n    get: function () {\n      return this._mesh;\n    },\n    set: function (value) {\n      if (this._mesh === value) {\n        return;\n      }\n\n      this._mesh = value;\n\n      if (value) {\n        this._indices = value.getIndices();\n        this._positions = value.getVerticesData(VertexBuffer.PositionKind);\n        this._normals = value.getVerticesData(VertexBuffer.NormalKind);\n      } else {\n        this._indices = null;\n        this._positions = null;\n        this._normals = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Called by the particle System when the direction is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param directionToUpdate is the direction vector to update with the result\r\n   * @param particle is the particle we are computed the direction for\r\n   * @param isLocal defines if the direction should be set in local space\r\n   */\n\n  MeshParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n    if (this.useMeshNormalsForDirection && this._normals) {\n      Vector3.TransformNormalToRef(this._storedNormal, worldMatrix, directionToUpdate);\n      return;\n    }\n\n    var randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\n    var randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\n    var randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\n\n    if (isLocal) {\n      directionToUpdate.copyFromFloats(randX, randY, randZ);\n      return;\n    }\n\n    Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\n  };\n  /**\r\n   * Called by the particle System when the position is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param positionToUpdate is the position vector to update with the result\r\n   * @param particle is the particle we are computed the position for\r\n   * @param isLocal defines if the position should be set in local space\r\n   */\n\n\n  MeshParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n    if (!this._indices || !this._positions) {\n      return;\n    }\n\n    var randomFaceIndex = 3 * Math.random() * (this._indices.length / 3) | 0;\n    var bu = Math.random();\n    var bv = Math.random() * (1.0 - bu);\n    var bw = 1.0 - bu - bv;\n    var faceIndexA = this._indices[randomFaceIndex];\n    var faceIndexB = this._indices[randomFaceIndex + 1];\n    var faceIndexC = this._indices[randomFaceIndex + 2];\n    var vertexA = TmpVectors.Vector3[0];\n    var vertexB = TmpVectors.Vector3[1];\n    var vertexC = TmpVectors.Vector3[2];\n    var randomVertex = TmpVectors.Vector3[3];\n    Vector3.FromArrayToRef(this._positions, faceIndexA * 3, vertexA);\n    Vector3.FromArrayToRef(this._positions, faceIndexB * 3, vertexB);\n    Vector3.FromArrayToRef(this._positions, faceIndexC * 3, vertexC);\n    randomVertex.x = bu * vertexA.x + bv * vertexB.x + bw * vertexC.x;\n    randomVertex.y = bu * vertexA.y + bv * vertexB.y + bw * vertexC.y;\n    randomVertex.z = bu * vertexA.z + bv * vertexB.z + bw * vertexC.z;\n\n    if (isLocal) {\n      positionToUpdate.copyFromFloats(randomVertex.x, randomVertex.y, randomVertex.z);\n    } else {\n      Vector3.TransformCoordinatesFromFloatsToRef(randomVertex.x, randomVertex.y, randomVertex.z, worldMatrix, positionToUpdate);\n    }\n\n    if (this.useMeshNormalsForDirection && this._normals) {\n      Vector3.FromArrayToRef(this._normals, faceIndexA * 3, vertexA);\n      Vector3.FromArrayToRef(this._normals, faceIndexB * 3, vertexB);\n      Vector3.FromArrayToRef(this._normals, faceIndexC * 3, vertexC);\n      this._storedNormal.x = bu * vertexA.x + bv * vertexB.x + bw * vertexC.x;\n      this._storedNormal.y = bu * vertexA.y + bv * vertexB.y + bw * vertexC.y;\n      this._storedNormal.z = bu * vertexA.z + bv * vertexB.z + bw * vertexC.z;\n    }\n  };\n  /**\r\n   * Clones the current emitter and returns a copy of it\r\n   * @returns the new emitter\r\n   */\n\n\n  MeshParticleEmitter.prototype.clone = function () {\n    var newOne = new MeshParticleEmitter(this.mesh);\n    DeepCopier.DeepCopy(this, newOne);\n    return newOne;\n  };\n  /**\r\n   * Called by the GPUParticleSystem to setup the update shader\r\n   * @param effect defines the update shader\r\n   */\n\n\n  MeshParticleEmitter.prototype.applyToShader = function (effect) {\n    effect.setVector3(\"direction1\", this.direction1);\n    effect.setVector3(\"direction2\", this.direction2);\n  };\n  /**\r\n   * Returns a string to use to update the GPU particles update shader\r\n   * @returns a string containng the defines string\r\n   */\n\n\n  MeshParticleEmitter.prototype.getEffectDefines = function () {\n    return \"\";\n  };\n  /**\r\n   * Returns the string \"BoxParticleEmitter\"\r\n   * @returns a string containing the class name\r\n   */\n\n\n  MeshParticleEmitter.prototype.getClassName = function () {\n    return \"MeshParticleEmitter\";\n  };\n  /**\r\n   * Serializes the particle system to a JSON object.\r\n   * @returns the JSON object\r\n   */\n\n\n  MeshParticleEmitter.prototype.serialize = function () {\n    var _a;\n\n    var serializationObject = {};\n    serializationObject.type = this.getClassName();\n    serializationObject.direction1 = this.direction1.asArray();\n    serializationObject.direction2 = this.direction2.asArray();\n    serializationObject.meshId = (_a = this.mesh) === null || _a === void 0 ? void 0 : _a.id;\n    serializationObject.useMeshNormalsForDirection = this.useMeshNormalsForDirection;\n    return serializationObject;\n  };\n  /**\r\n   * Parse properties from a JSON object\r\n   * @param serializationObject defines the JSON object\r\n   * @param scene defines the hosting scene\r\n   */\n\n\n  MeshParticleEmitter.prototype.parse = function (serializationObject, scene) {\n    Vector3.FromArrayToRef(serializationObject.direction1, 0, this.direction1);\n    Vector3.FromArrayToRef(serializationObject.direction2, 0, this.direction2);\n\n    if (serializationObject.meshId && scene) {\n      this.mesh = scene.getLastMeshByID(serializationObject.meshId);\n    }\n\n    this.useMeshNormalsForDirection = serializationObject.useMeshNormalsForDirection;\n  };\n\n  return MeshParticleEmitter;\n}();\n\nexport { MeshParticleEmitter };","map":{"version":3,"sources":["../../../../sourceES6/core/Particles/EmitterTypes/meshParticleEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["import { DeepCopier } from \"../../Misc/deepCopier\";\r\nimport { Vector3, Matrix, TmpVectors } from \"../../Maths/math.vector\";\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\nimport { Effect } from \"../../Materials/effect\";\r\nimport { Particle } from \"../../Particles/particle\";\r\nimport { IParticleEmitterType } from \"./IParticleEmitterType\";\r\nimport { IndicesArray, Nullable, FloatArray } from '../../types';\r\nimport { VertexBuffer } from '../../Meshes/buffer';\r\nimport { Scene } from '../../scene';\r\nimport { AbstractMesh } from '../../Meshes/abstractMesh';\r\n/**\r\n * Particle emitter emitting particles from the inside of a box.\r\n * It emits the particles randomly between 2 given directions.\r\n */\r\nexport class MeshParticleEmitter implements IParticleEmitterType {\r\n    private _indices: Nullable<IndicesArray> = null;\r\n    private _positions: Nullable<FloatArray> = null;\r\n    private _normals: Nullable<FloatArray> = null;\r\n    private _storedNormal = Vector3.Zero();\r\n    private _mesh: Nullable<AbstractMesh> = null;\r\n\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\r\n    public direction1 = new Vector3(0, 1.0, 0);\r\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\r\n    public direction2 = new Vector3(0, 1.0, 0);\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that particle directions must be built from mesh face normals\r\n     */\r\n    public useMeshNormalsForDirection = true;\r\n\r\n    /** Defines the mesh to use as source */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    public set mesh(value: Nullable<AbstractMesh>) {\r\n        if (this._mesh === value) {\r\n            return;\r\n        }\r\n\r\n        this._mesh = value;\r\n\r\n        if (value) {\r\n            this._indices = value.getIndices();\r\n            this._positions = value.getVerticesData(VertexBuffer.PositionKind);\r\n            this._normals = value.getVerticesData(VertexBuffer.NormalKind);\r\n        } else {\r\n            this._indices = null;\r\n            this._positions = null;\r\n            this._normals = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance MeshParticleEmitter\r\n     * @param mesh defines the mesh to use as source\r\n     */\r\n    constructor(mesh: Nullable<AbstractMesh> = null) {\r\n        this.mesh = mesh;\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the direction is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param directionToUpdate is the direction vector to update with the result\r\n     * @param particle is the particle we are computed the direction for\r\n     * @param isLocal defines if the direction should be set in local space\r\n     */\r\n    public startDirectionFunction(worldMatrix: Matrix, directionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        if (this.useMeshNormalsForDirection && this._normals) {\r\n            Vector3.TransformNormalToRef(this._storedNormal, worldMatrix, directionToUpdate);\r\n            return;\r\n        }\r\n\r\n        var randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\r\n        var randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\r\n        var randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\r\n\r\n        if (isLocal) {\r\n            directionToUpdate.copyFromFloats(randX, randY, randZ);\r\n            return;\r\n        }\r\n\r\n        Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\r\n    }\r\n\r\n    /**\r\n     * Called by the particle System when the position is computed for the created particle.\r\n     * @param worldMatrix is the world matrix of the particle system\r\n     * @param positionToUpdate is the position vector to update with the result\r\n     * @param particle is the particle we are computed the position for\r\n     * @param isLocal defines if the position should be set in local space\r\n     */\r\n    public startPositionFunction(worldMatrix: Matrix, positionToUpdate: Vector3, particle: Particle, isLocal: boolean): void {\r\n        if (!this._indices || !this._positions) {\r\n            return;\r\n        }\r\n\r\n        let randomFaceIndex = 3 * Math.random() * (this._indices.length / 3) | 0;\r\n        let bu = Math.random();\r\n        let bv = Math.random() * (1.0 - bu);\r\n        let bw = 1.0 - bu - bv;\r\n\r\n        let faceIndexA = this._indices[randomFaceIndex];\r\n        let faceIndexB = this._indices[randomFaceIndex + 1];\r\n        let faceIndexC = this._indices[randomFaceIndex + 2];\r\n        let vertexA = TmpVectors.Vector3[0];\r\n        let vertexB = TmpVectors.Vector3[1];\r\n        let vertexC = TmpVectors.Vector3[2];\r\n        let randomVertex = TmpVectors.Vector3[3];\r\n\r\n        Vector3.FromArrayToRef(this._positions, faceIndexA * 3, vertexA);\r\n        Vector3.FromArrayToRef(this._positions, faceIndexB * 3, vertexB);\r\n        Vector3.FromArrayToRef(this._positions, faceIndexC * 3, vertexC);\r\n\r\n        randomVertex.x = bu * vertexA.x + bv * vertexB.x + bw * vertexC.x;\r\n        randomVertex.y = bu * vertexA.y + bv * vertexB.y + bw * vertexC.y;\r\n        randomVertex.z = bu * vertexA.z + bv * vertexB.z + bw * vertexC.z;\r\n\r\n        if (isLocal) {\r\n            positionToUpdate.copyFromFloats(randomVertex.x, randomVertex.y, randomVertex.z);\r\n        } else {\r\n            Vector3.TransformCoordinatesFromFloatsToRef(randomVertex.x, randomVertex.y, randomVertex.z, worldMatrix, positionToUpdate);\r\n        }\r\n\r\n        if (this.useMeshNormalsForDirection && this._normals) {\r\n            Vector3.FromArrayToRef(this._normals, faceIndexA * 3, vertexA);\r\n            Vector3.FromArrayToRef(this._normals, faceIndexB * 3, vertexB);\r\n            Vector3.FromArrayToRef(this._normals, faceIndexC * 3, vertexC);\r\n\r\n            this._storedNormal.x = bu * vertexA.x + bv * vertexB.x + bw * vertexC.x;\r\n            this._storedNormal.y = bu * vertexA.y + bv * vertexB.y + bw * vertexC.y;\r\n            this._storedNormal.z = bu * vertexA.z + bv * vertexB.z + bw * vertexC.z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the current emitter and returns a copy of it\r\n     * @returns the new emitter\r\n     */\r\n    public clone(): MeshParticleEmitter {\r\n        let newOne = new MeshParticleEmitter(this.mesh);\r\n\r\n        DeepCopier.DeepCopy(this, newOne);\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Called by the GPUParticleSystem to setup the update shader\r\n     * @param effect defines the update shader\r\n     */\r\n    public applyToShader(effect: Effect): void {\r\n        effect.setVector3(\"direction1\", this.direction1);\r\n        effect.setVector3(\"direction2\", this.direction2);\r\n    }\r\n\r\n    /**\r\n     * Returns a string to use to update the GPU particles update shader\r\n     * @returns a string containng the defines string\r\n     */\r\n    public getEffectDefines(): string {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"BoxParticleEmitter\"\r\n     * @returns a string containing the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"MeshParticleEmitter\";\r\n    }\r\n\r\n    /**\r\n     * Serializes the particle system to a JSON object.\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject: any = {};\r\n\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.direction1 = this.direction1.asArray();\r\n        serializationObject.direction2 = this.direction2.asArray();\r\n        serializationObject.meshId = this.mesh?.id;\r\n        serializationObject.useMeshNormalsForDirection = this.useMeshNormalsForDirection;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse properties from a JSON object\r\n     * @param serializationObject defines the JSON object\r\n     * @param scene defines the hosting scene\r\n     */\r\n    public parse(serializationObject: any, scene: Nullable<Scene>): void {\r\n        Vector3.FromArrayToRef(serializationObject.direction1, 0, this.direction1);\r\n        Vector3.FromArrayToRef(serializationObject.direction2, 0, this.direction2);\r\n\r\n        if (serializationObject.meshId && scene) {\r\n            this.mesh = scene.getLastMeshByID(serializationObject.meshId);\r\n        }\r\n\r\n        this.useMeshNormalsForDirection = serializationObject.useMeshNormalsForDirection;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}