{"ast":null,"code":"/** Defines the cross module used constants to avoid circular dependncies */\nvar Constants =\n/** @class */\nfunction () {\n  function Constants() {}\n  /** Defines that alpha blending is disabled */\n\n\n  Constants.ALPHA_DISABLE = 0;\n  /** Defines that alpha blending is SRC ALPHA * SRC + DEST */\n\n  Constants.ALPHA_ADD = 1;\n  /** Defines that alpha blending is SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\n\n  Constants.ALPHA_COMBINE = 2;\n  /** Defines that alpha blending is DEST - SRC * DEST */\n\n  Constants.ALPHA_SUBTRACT = 3;\n  /** Defines that alpha blending is SRC * DEST */\n\n  Constants.ALPHA_MULTIPLY = 4;\n  /** Defines that alpha blending is SRC ALPHA * SRC + (1 - SRC) * DEST */\n\n  Constants.ALPHA_MAXIMIZED = 5;\n  /** Defines that alpha blending is SRC + DEST */\n\n  Constants.ALPHA_ONEONE = 6;\n  /** Defines that alpha blending is SRC + (1 - SRC ALPHA) * DEST */\n\n  Constants.ALPHA_PREMULTIPLIED = 7;\n  /**\r\n   * Defines that alpha blending is SRC + (1 - SRC ALPHA) * DEST\r\n   * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\r\n   */\n\n  Constants.ALPHA_PREMULTIPLIED_PORTERDUFF = 8;\n  /** Defines that alpha blending is CST * SRC + (1 - CST) * DEST */\n\n  Constants.ALPHA_INTERPOLATE = 9;\n  /**\r\n   * Defines that alpha blending is SRC + (1 - SRC) * DEST\r\n   * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\r\n   */\n\n  Constants.ALPHA_SCREENMODE = 10;\n  /**\r\n   * Defines that alpha blending is SRC + DST\r\n   * Alpha will be set to SRC ALPHA + DST ALPHA\r\n   */\n\n  Constants.ALPHA_ONEONE_ONEONE = 11;\n  /**\r\n   * Defines that alpha blending is SRC * DST ALPHA + DST\r\n   * Alpha will be set to 0\r\n   */\n\n  Constants.ALPHA_ALPHATOCOLOR = 12;\n  /**\r\n   * Defines that alpha blending is SRC * (1 - DST) + DST * (1 - SRC)\r\n   */\n\n  Constants.ALPHA_REVERSEONEMINUS = 13;\n  /**\r\n   * Defines that alpha blending is SRC + DST * (1 - SRC ALPHA)\r\n   * Alpha will be set to SRC ALPHA + DST ALPHA * (1 - SRC ALPHA)\r\n   */\n\n  Constants.ALPHA_SRC_DSTONEMINUSSRCALPHA = 14;\n  /**\r\n   * Defines that alpha blending is SRC + DST\r\n   * Alpha will be set to SRC ALPHA\r\n   */\n\n  Constants.ALPHA_ONEONE_ONEZERO = 15;\n  /**\r\n   * Defines that alpha blending is SRC * (1 - DST) + DST * (1 - SRC)\r\n   * Alpha will be set to DST ALPHA\r\n   */\n\n  Constants.ALPHA_EXCLUSION = 16;\n  /** Defines that alpha blending equation a SUM */\n\n  Constants.ALPHA_EQUATION_ADD = 0;\n  /** Defines that alpha blending equation a SUBSTRACTION */\n\n  Constants.ALPHA_EQUATION_SUBSTRACT = 1;\n  /** Defines that alpha blending equation a REVERSE SUBSTRACTION */\n\n  Constants.ALPHA_EQUATION_REVERSE_SUBTRACT = 2;\n  /** Defines that alpha blending equation a MAX operation */\n\n  Constants.ALPHA_EQUATION_MAX = 3;\n  /** Defines that alpha blending equation a MIN operation */\n\n  Constants.ALPHA_EQUATION_MIN = 4;\n  /**\r\n   * Defines that alpha blending equation a DARKEN operation:\r\n   * It takes the min of the src and sums the alpha channels.\r\n   */\n\n  Constants.ALPHA_EQUATION_DARKEN = 5;\n  /** Defines that the ressource is not delayed*/\n\n  Constants.DELAYLOADSTATE_NONE = 0;\n  /** Defines that the ressource was successfully delay loaded */\n\n  Constants.DELAYLOADSTATE_LOADED = 1;\n  /** Defines that the ressource is currently delay loading */\n\n  Constants.DELAYLOADSTATE_LOADING = 2;\n  /** Defines that the ressource is delayed and has not started loading */\n\n  Constants.DELAYLOADSTATE_NOTLOADED = 4; // Depht or Stencil test Constants.\n\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\n\n  Constants.NEVER = 0x0200;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\n\n  Constants.ALWAYS = 0x0207;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\n\n  Constants.LESS = 0x0201;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\n\n  Constants.EQUAL = 0x0202;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\n\n  Constants.LEQUAL = 0x0203;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\n\n  Constants.GREATER = 0x0204;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\n\n  Constants.GEQUAL = 0x0206;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\n\n  Constants.NOTEQUAL = 0x0205; // Stencil Actions Constants.\n\n  /** Passed to stencilOperation to specify that stencil value must be kept */\n\n  Constants.KEEP = 0x1E00;\n  /** Passed to stencilOperation to specify that stencil value must be replaced */\n\n  Constants.REPLACE = 0x1E01;\n  /** Passed to stencilOperation to specify that stencil value must be incremented */\n\n  Constants.INCR = 0x1E02;\n  /** Passed to stencilOperation to specify that stencil value must be decremented */\n\n  Constants.DECR = 0x1E03;\n  /** Passed to stencilOperation to specify that stencil value must be inverted */\n\n  Constants.INVERT = 0x150A;\n  /** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\n\n  Constants.INCR_WRAP = 0x8507;\n  /** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\n\n  Constants.DECR_WRAP = 0x8508;\n  /** Texture is not repeating outside of 0..1 UVs */\n\n  Constants.TEXTURE_CLAMP_ADDRESSMODE = 0;\n  /** Texture is repeating outside of 0..1 UVs */\n\n  Constants.TEXTURE_WRAP_ADDRESSMODE = 1;\n  /** Texture is repeating and mirrored */\n\n  Constants.TEXTURE_MIRROR_ADDRESSMODE = 2;\n  /** ALPHA */\n\n  Constants.TEXTUREFORMAT_ALPHA = 0;\n  /** LUMINANCE */\n\n  Constants.TEXTUREFORMAT_LUMINANCE = 1;\n  /** LUMINANCE_ALPHA */\n\n  Constants.TEXTUREFORMAT_LUMINANCE_ALPHA = 2;\n  /** RGB */\n\n  Constants.TEXTUREFORMAT_RGB = 4;\n  /** RGBA */\n\n  Constants.TEXTUREFORMAT_RGBA = 5;\n  /** RED */\n\n  Constants.TEXTUREFORMAT_RED = 6;\n  /** RED (2nd reference) */\n\n  Constants.TEXTUREFORMAT_R = 6;\n  /** RG */\n\n  Constants.TEXTUREFORMAT_RG = 7;\n  /** RED_INTEGER */\n\n  Constants.TEXTUREFORMAT_RED_INTEGER = 8;\n  /** RED_INTEGER (2nd reference) */\n\n  Constants.TEXTUREFORMAT_R_INTEGER = 8;\n  /** RG_INTEGER */\n\n  Constants.TEXTUREFORMAT_RG_INTEGER = 9;\n  /** RGB_INTEGER */\n\n  Constants.TEXTUREFORMAT_RGB_INTEGER = 10;\n  /** RGBA_INTEGER */\n\n  Constants.TEXTUREFORMAT_RGBA_INTEGER = 11;\n  /** UNSIGNED_BYTE */\n\n  Constants.TEXTURETYPE_UNSIGNED_BYTE = 0;\n  /** UNSIGNED_BYTE (2nd reference) */\n\n  Constants.TEXTURETYPE_UNSIGNED_INT = 0;\n  /** FLOAT */\n\n  Constants.TEXTURETYPE_FLOAT = 1;\n  /** HALF_FLOAT */\n\n  Constants.TEXTURETYPE_HALF_FLOAT = 2;\n  /** BYTE */\n\n  Constants.TEXTURETYPE_BYTE = 3;\n  /** SHORT */\n\n  Constants.TEXTURETYPE_SHORT = 4;\n  /** UNSIGNED_SHORT */\n\n  Constants.TEXTURETYPE_UNSIGNED_SHORT = 5;\n  /** INT */\n\n  Constants.TEXTURETYPE_INT = 6;\n  /** UNSIGNED_INT */\n\n  Constants.TEXTURETYPE_UNSIGNED_INTEGER = 7;\n  /** UNSIGNED_SHORT_4_4_4_4 */\n\n  Constants.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = 8;\n  /** UNSIGNED_SHORT_5_5_5_1 */\n\n  Constants.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = 9;\n  /** UNSIGNED_SHORT_5_6_5 */\n\n  Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = 10;\n  /** UNSIGNED_INT_2_10_10_10_REV */\n\n  Constants.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = 11;\n  /** UNSIGNED_INT_24_8 */\n\n  Constants.TEXTURETYPE_UNSIGNED_INT_24_8 = 12;\n  /** UNSIGNED_INT_10F_11F_11F_REV */\n\n  Constants.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = 13;\n  /** UNSIGNED_INT_5_9_9_9_REV */\n\n  Constants.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = 14;\n  /** FLOAT_32_UNSIGNED_INT_24_8_REV */\n\n  Constants.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = 15;\n  /** nearest is mag = nearest and min = nearest and no mip */\n\n  Constants.TEXTURE_NEAREST_SAMPLINGMODE = 1;\n  /** mag = nearest and min = nearest and mip = none */\n\n  Constants.TEXTURE_NEAREST_NEAREST = 1;\n  /** Bilinear is mag = linear and min = linear and no mip */\n\n  Constants.TEXTURE_BILINEAR_SAMPLINGMODE = 2;\n  /** mag = linear and min = linear and mip = none */\n\n  Constants.TEXTURE_LINEAR_LINEAR = 2;\n  /** Trilinear is mag = linear and min = linear and mip = linear */\n\n  Constants.TEXTURE_TRILINEAR_SAMPLINGMODE = 3;\n  /** Trilinear is mag = linear and min = linear and mip = linear */\n\n  Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR = 3;\n  /** mag = nearest and min = nearest and mip = nearest */\n\n  Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST = 4;\n  /** mag = nearest and min = linear and mip = nearest */\n\n  Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST = 5;\n  /** mag = nearest and min = linear and mip = linear */\n\n  Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR = 6;\n  /** mag = nearest and min = linear and mip = none */\n\n  Constants.TEXTURE_NEAREST_LINEAR = 7;\n  /** nearest is mag = nearest and min = nearest and mip = linear */\n\n  Constants.TEXTURE_NEAREST_NEAREST_MIPLINEAR = 8;\n  /** mag = linear and min = nearest and mip = nearest */\n\n  Constants.TEXTURE_LINEAR_NEAREST_MIPNEAREST = 9;\n  /** mag = linear and min = nearest and mip = linear */\n\n  Constants.TEXTURE_LINEAR_NEAREST_MIPLINEAR = 10;\n  /** Bilinear is mag = linear and min = linear and mip = nearest */\n\n  Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST = 11;\n  /** mag = linear and min = nearest and mip = none */\n\n  Constants.TEXTURE_LINEAR_NEAREST = 12;\n  /** Explicit coordinates mode */\n\n  Constants.TEXTURE_EXPLICIT_MODE = 0;\n  /** Spherical coordinates mode */\n\n  Constants.TEXTURE_SPHERICAL_MODE = 1;\n  /** Planar coordinates mode */\n\n  Constants.TEXTURE_PLANAR_MODE = 2;\n  /** Cubic coordinates mode */\n\n  Constants.TEXTURE_CUBIC_MODE = 3;\n  /** Projection coordinates mode */\n\n  Constants.TEXTURE_PROJECTION_MODE = 4;\n  /** Skybox coordinates mode */\n\n  Constants.TEXTURE_SKYBOX_MODE = 5;\n  /** Inverse Cubic coordinates mode */\n\n  Constants.TEXTURE_INVCUBIC_MODE = 6;\n  /** Equirectangular coordinates mode */\n\n  Constants.TEXTURE_EQUIRECTANGULAR_MODE = 7;\n  /** Equirectangular Fixed coordinates mode */\n\n  Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MODE = 8;\n  /** Equirectangular Fixed Mirrored coordinates mode */\n\n  Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\n  /** Offline (baking) quality for texture filtering */\n\n  Constants.TEXTURE_FILTERING_QUALITY_OFFLINE = 4096;\n  /** High quality for texture filtering */\n\n  Constants.TEXTURE_FILTERING_QUALITY_HIGH = 64;\n  /** Medium quality for texture filtering */\n\n  Constants.TEXTURE_FILTERING_QUALITY_MEDIUM = 16;\n  /** Low quality for texture filtering */\n\n  Constants.TEXTURE_FILTERING_QUALITY_LOW = 8; // Texture rescaling mode\n\n  /** Defines that texture rescaling will use a floor to find the closer power of 2 size */\n\n  Constants.SCALEMODE_FLOOR = 1;\n  /** Defines that texture rescaling will look for the nearest power of 2 size */\n\n  Constants.SCALEMODE_NEAREST = 2;\n  /** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\n\n  Constants.SCALEMODE_CEILING = 3;\n  /**\r\n   * The dirty texture flag value\r\n   */\n\n  Constants.MATERIAL_TextureDirtyFlag = 1;\n  /**\r\n   * The dirty light flag value\r\n   */\n\n  Constants.MATERIAL_LightDirtyFlag = 2;\n  /**\r\n   * The dirty fresnel flag value\r\n   */\n\n  Constants.MATERIAL_FresnelDirtyFlag = 4;\n  /**\r\n   * The dirty attribute flag value\r\n   */\n\n  Constants.MATERIAL_AttributesDirtyFlag = 8;\n  /**\r\n   * The dirty misc flag value\r\n   */\n\n  Constants.MATERIAL_MiscDirtyFlag = 16;\n  /**\r\n   * The dirty prepass flag value\r\n   */\n\n  Constants.MATERIAL_PrePassDirtyFlag = 32;\n  /**\r\n   * The all dirty flag value\r\n   */\n\n  Constants.MATERIAL_AllDirtyFlag = 63;\n  /**\r\n   * Returns the triangle fill mode\r\n   */\n\n  Constants.MATERIAL_TriangleFillMode = 0;\n  /**\r\n   * Returns the wireframe mode\r\n   */\n\n  Constants.MATERIAL_WireFrameFillMode = 1;\n  /**\r\n   * Returns the point fill mode\r\n   */\n\n  Constants.MATERIAL_PointFillMode = 2;\n  /**\r\n   * Returns the point list draw mode\r\n   */\n\n  Constants.MATERIAL_PointListDrawMode = 3;\n  /**\r\n   * Returns the line list draw mode\r\n   */\n\n  Constants.MATERIAL_LineListDrawMode = 4;\n  /**\r\n   * Returns the line loop draw mode\r\n   */\n\n  Constants.MATERIAL_LineLoopDrawMode = 5;\n  /**\r\n   * Returns the line strip draw mode\r\n   */\n\n  Constants.MATERIAL_LineStripDrawMode = 6;\n  /**\r\n   * Returns the triangle strip draw mode\r\n   */\n\n  Constants.MATERIAL_TriangleStripDrawMode = 7;\n  /**\r\n   * Returns the triangle fan draw mode\r\n   */\n\n  Constants.MATERIAL_TriangleFanDrawMode = 8;\n  /**\r\n   * Stores the clock-wise side orientation\r\n   */\n\n  Constants.MATERIAL_ClockWiseSideOrientation = 0;\n  /**\r\n   * Stores the counter clock-wise side orientation\r\n   */\n\n  Constants.MATERIAL_CounterClockWiseSideOrientation = 1;\n  /**\r\n   * Nothing\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_NothingTrigger = 0;\n  /**\r\n   * On pick\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnPickTrigger = 1;\n  /**\r\n   * On left pick\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnLeftPickTrigger = 2;\n  /**\r\n   * On right pick\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnRightPickTrigger = 3;\n  /**\r\n   * On center pick\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnCenterPickTrigger = 4;\n  /**\r\n   * On pick down\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnPickDownTrigger = 5;\n  /**\r\n   * On double pick\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnDoublePickTrigger = 6;\n  /**\r\n   * On pick up\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnPickUpTrigger = 7;\n  /**\r\n   * On pick out.\r\n   * This trigger will only be raised if you also declared a OnPickDown\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnPickOutTrigger = 16;\n  /**\r\n   * On long press\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnLongPressTrigger = 8;\n  /**\r\n   * On pointer over\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnPointerOverTrigger = 9;\n  /**\r\n   * On pointer out\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnPointerOutTrigger = 10;\n  /**\r\n   * On every frame\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnEveryFrameTrigger = 11;\n  /**\r\n   * On intersection enter\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnIntersectionEnterTrigger = 12;\n  /**\r\n   * On intersection exit\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnIntersectionExitTrigger = 13;\n  /**\r\n   * On key down\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnKeyDownTrigger = 14;\n  /**\r\n   * On key up\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n   */\n\n  Constants.ACTION_OnKeyUpTrigger = 15;\n  /**\r\n   * Billboard mode will only apply to Y axis\r\n   */\n\n  Constants.PARTICLES_BILLBOARDMODE_Y = 2;\n  /**\r\n   * Billboard mode will apply to all axes\r\n   */\n\n  Constants.PARTICLES_BILLBOARDMODE_ALL = 7;\n  /**\r\n   * Special billboard mode where the particle will be biilboard to the camera but rotated to align with direction\r\n   */\n\n  Constants.PARTICLES_BILLBOARDMODE_STRETCHED = 8;\n  /** Default culling strategy : this is an exclusion test and it's the more accurate.\r\n   *  Test order :\r\n   *  Is the bounding sphere outside the frustum ?\r\n   *  If not, are the bounding box vertices outside the frustum ?\r\n   *  It not, then the cullable object is in the frustum.\r\n   */\n\n  Constants.MESHES_CULLINGSTRATEGY_STANDARD = 0;\n  /** Culling strategy : Bounding Sphere Only.\r\n   *  This is an exclusion test. It's faster than the standard strategy because the bounding box is not tested.\r\n   *  It's also less accurate than the standard because some not visible objects can still be selected.\r\n   *  Test : is the bounding sphere outside the frustum ?\r\n   *  If not, then the cullable object is in the frustum.\r\n   */\n\n  Constants.MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY = 1;\n  /** Culling strategy : Optimistic Inclusion.\r\n   *  This in an inclusion test first, then the standard exclusion test.\r\n   *  This can be faster when a cullable object is expected to be almost always in the camera frustum.\r\n   *  This could also be a little slower than the standard test when the tested object center is not the frustum but one of its bounding box vertex is still inside.\r\n   *  Anyway, it's as accurate as the standard strategy.\r\n   *  Test :\r\n   *  Is the cullable object bounding sphere center in the frustum ?\r\n   *  If not, apply the default culling strategy.\r\n   */\n\n  Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION = 2;\n  /** Culling strategy : Optimistic Inclusion then Bounding Sphere Only.\r\n   *  This in an inclusion test first, then the bounding sphere only exclusion test.\r\n   *  This can be the fastest test when a cullable object is expected to be almost always in the camera frustum.\r\n   *  This could also be a little slower than the BoundingSphereOnly strategy when the tested object center is not in the frustum but its bounding sphere still intersects it.\r\n   *  It's less accurate than the standard strategy and as accurate as the BoundingSphereOnly strategy.\r\n   *  Test :\r\n   *  Is the cullable object bounding sphere center in the frustum ?\r\n   *  If not, apply the Bounding Sphere Only strategy. No Bounding Box is tested here.\r\n   */\n\n  Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY = 3;\n  /**\r\n   * No logging while loading\r\n   */\n\n  Constants.SCENELOADER_NO_LOGGING = 0;\n  /**\r\n   * Minimal logging while loading\r\n   */\n\n  Constants.SCENELOADER_MINIMAL_LOGGING = 1;\n  /**\r\n   * Summary logging while loading\r\n   */\n\n  Constants.SCENELOADER_SUMMARY_LOGGING = 2;\n  /**\r\n   * Detailled logging while loading\r\n   */\n\n  Constants.SCENELOADER_DETAILED_LOGGING = 3;\n  /**\r\n   * Constant used to retrieve the irradiance texture index in the textures array in the prepass\r\n   * using getIndex(0)\r\n   */\n\n  Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE = 0;\n  /**\r\n   * Constant used to retrieve the position texture index in the textures array in the prepass\r\n   * using getIndex(undefined)\r\n   */\n\n  Constants.PREPASS_POSITION_TEXTURE_TYPE = 1;\n  /**\r\n   * Constant used to retrieve the velocity texture index in the textures array in the prepass\r\n   * using getIndex(undefined)\r\n   */\n\n  Constants.PREPASS_VELOCITY_TEXTURE_TYPE = 2;\n  /**\r\n   * Constant used to retrieve the reflectivity texture index in the textures array in the prepass\r\n   * using the getIndex(3)\r\n   */\n\n  Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE = 3;\n  /**\r\n   * Constant used to retrieve the lit color texture index in the textures array in the prepass\r\n   * using the getIndex(4)\r\n   */\n\n  Constants.PREPASS_COLOR_TEXTURE_TYPE = 4;\n  /**\r\n   * Constant used to retrieve depth + normal index in the textures array in the prepass\r\n   * using the getIndex(5)\r\n   */\n\n  Constants.PREPASS_DEPTHNORMAL_TEXTURE_TYPE = 5;\n  /**\r\n   * Constant used to retrieve albedo index in the textures array in the prepass\r\n   * using the getIndex(6)\r\n   */\n\n  Constants.PREPASS_ALBEDO_TEXTURE_TYPE = 6;\n  return Constants;\n}();\n\nexport { Constants };","map":{"version":3,"sources":["../../../sourceES6/core/Engines/constants.ts"],"names":[],"mappings":"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","sourcesContent":["/** Defines the cross module used constants to avoid circular dependncies */\r\nexport class Constants {\r\n    /** Defines that alpha blending is disabled */\r\n    public static readonly ALPHA_DISABLE = 0;\r\n    /** Defines that alpha blending is SRC ALPHA * SRC + DEST */\r\n    public static readonly ALPHA_ADD = 1;\r\n    /** Defines that alpha blending is SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_COMBINE = 2;\r\n    /** Defines that alpha blending is DEST - SRC * DEST */\r\n    public static readonly ALPHA_SUBTRACT = 3;\r\n    /** Defines that alpha blending is SRC * DEST */\r\n    public static readonly ALPHA_MULTIPLY = 4;\r\n    /** Defines that alpha blending is SRC ALPHA * SRC + (1 - SRC) * DEST */\r\n    public static readonly ALPHA_MAXIMIZED = 5;\r\n    /** Defines that alpha blending is SRC + DEST */\r\n    public static readonly ALPHA_ONEONE = 6;\r\n    /** Defines that alpha blending is SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_PREMULTIPLIED = 7;\r\n    /**\r\n     * Defines that alpha blending is SRC + (1 - SRC ALPHA) * DEST\r\n     * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_PREMULTIPLIED_PORTERDUFF = 8;\r\n    /** Defines that alpha blending is CST * SRC + (1 - CST) * DEST */\r\n    public static readonly ALPHA_INTERPOLATE = 9;\r\n    /**\r\n     * Defines that alpha blending is SRC + (1 - SRC) * DEST\r\n     * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_SCREENMODE = 10;\r\n    /**\r\n     * Defines that alpha blending is SRC + DST\r\n     * Alpha will be set to SRC ALPHA + DST ALPHA\r\n     */\r\n    public static readonly ALPHA_ONEONE_ONEONE = 11;\r\n    /**\r\n     * Defines that alpha blending is SRC * DST ALPHA + DST\r\n     * Alpha will be set to 0\r\n     */\r\n    public static readonly ALPHA_ALPHATOCOLOR = 12;\r\n    /**\r\n     * Defines that alpha blending is SRC * (1 - DST) + DST * (1 - SRC)\r\n     */\r\n    public static readonly ALPHA_REVERSEONEMINUS = 13;\r\n    /**\r\n     * Defines that alpha blending is SRC + DST * (1 - SRC ALPHA)\r\n     * Alpha will be set to SRC ALPHA + DST ALPHA * (1 - SRC ALPHA)\r\n     */\r\n    public static readonly ALPHA_SRC_DSTONEMINUSSRCALPHA = 14;\r\n    /**\r\n     * Defines that alpha blending is SRC + DST\r\n     * Alpha will be set to SRC ALPHA\r\n     */\r\n    public static readonly ALPHA_ONEONE_ONEZERO = 15;\r\n    /**\r\n     * Defines that alpha blending is SRC * (1 - DST) + DST * (1 - SRC)\r\n     * Alpha will be set to DST ALPHA\r\n     */\r\n    public static readonly ALPHA_EXCLUSION = 16;\r\n\r\n    /** Defines that alpha blending equation a SUM */\r\n    public static readonly ALPHA_EQUATION_ADD = 0;\r\n    /** Defines that alpha blending equation a SUBSTRACTION */\r\n    public static readonly ALPHA_EQUATION_SUBSTRACT = 1;\r\n    /** Defines that alpha blending equation a REVERSE SUBSTRACTION */\r\n    public static readonly ALPHA_EQUATION_REVERSE_SUBTRACT = 2;\r\n    /** Defines that alpha blending equation a MAX operation */\r\n    public static readonly ALPHA_EQUATION_MAX = 3;\r\n    /** Defines that alpha blending equation a MIN operation */\r\n    public static readonly ALPHA_EQUATION_MIN = 4;\r\n    /**\r\n     * Defines that alpha blending equation a DARKEN operation:\r\n     * It takes the min of the src and sums the alpha channels.\r\n     */\r\n    public static readonly ALPHA_EQUATION_DARKEN = 5;\r\n\r\n    /** Defines that the ressource is not delayed*/\r\n    public static readonly DELAYLOADSTATE_NONE = 0;\r\n    /** Defines that the ressource was successfully delay loaded */\r\n    public static readonly DELAYLOADSTATE_LOADED = 1;\r\n    /** Defines that the ressource is currently delay loading */\r\n    public static readonly DELAYLOADSTATE_LOADING = 2;\r\n    /** Defines that the ressource is delayed and has not started loading */\r\n    public static readonly DELAYLOADSTATE_NOTLOADED = 4;\r\n\r\n    // Depht or Stencil test Constants.\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\r\n    public static readonly NEVER = 0x0200;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\r\n    public static readonly ALWAYS = 0x0207;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\r\n    public static readonly LESS = 0x0201;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\r\n    public static readonly EQUAL = 0x0202;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\r\n    public static readonly LEQUAL = 0x0203;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\r\n    public static readonly GREATER = 0x0204;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\r\n    public static readonly GEQUAL = 0x0206;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\r\n    public static readonly NOTEQUAL = 0x0205;\r\n\r\n    // Stencil Actions Constants.\r\n    /** Passed to stencilOperation to specify that stencil value must be kept */\r\n    public static readonly KEEP = 0x1E00;\r\n    /** Passed to stencilOperation to specify that stencil value must be replaced */\r\n    public static readonly REPLACE = 0x1E01;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented */\r\n    public static readonly INCR = 0x1E02;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented */\r\n    public static readonly DECR = 0x1E03;\r\n    /** Passed to stencilOperation to specify that stencil value must be inverted */\r\n    public static readonly INVERT = 0x150A;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\r\n    public static readonly INCR_WRAP = 0x8507;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\r\n    public static readonly DECR_WRAP = 0x8508;\r\n\r\n    /** Texture is not repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_CLAMP_ADDRESSMODE = 0;\r\n    /** Texture is repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_WRAP_ADDRESSMODE = 1;\r\n    /** Texture is repeating and mirrored */\r\n    public static readonly TEXTURE_MIRROR_ADDRESSMODE = 2;\r\n\r\n    /** ALPHA */\r\n    public static readonly TEXTUREFORMAT_ALPHA = 0;\r\n    /** LUMINANCE */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE = 1;\r\n    /** LUMINANCE_ALPHA */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE_ALPHA = 2;\r\n    /** RGB */\r\n    public static readonly TEXTUREFORMAT_RGB = 4;\r\n    /** RGBA */\r\n    public static readonly TEXTUREFORMAT_RGBA = 5;\r\n    /** RED */\r\n    public static readonly TEXTUREFORMAT_RED = 6;\r\n    /** RED (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R = 6;\r\n    /** RG */\r\n    public static readonly TEXTUREFORMAT_RG = 7;\r\n    /** RED_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RED_INTEGER = 8;\r\n    /** RED_INTEGER (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R_INTEGER = 8;\r\n    /** RG_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RG_INTEGER = 9;\r\n    /** RGB_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGB_INTEGER = 10;\r\n    /** RGBA_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGBA_INTEGER = 11;\r\n\r\n    /** UNSIGNED_BYTE */\r\n    public static readonly TEXTURETYPE_UNSIGNED_BYTE = 0;\r\n    /** UNSIGNED_BYTE (2nd reference) */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT = 0;\r\n    /** FLOAT */\r\n    public static readonly TEXTURETYPE_FLOAT = 1;\r\n    /** HALF_FLOAT */\r\n    public static readonly TEXTURETYPE_HALF_FLOAT = 2;\r\n    /** BYTE */\r\n    public static readonly TEXTURETYPE_BYTE = 3;\r\n    /** SHORT */\r\n    public static readonly TEXTURETYPE_SHORT = 4;\r\n    /** UNSIGNED_SHORT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT = 5;\r\n    /** INT */\r\n    public static readonly TEXTURETYPE_INT = 6;\r\n    /** UNSIGNED_INT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INTEGER = 7;\r\n    /** UNSIGNED_SHORT_4_4_4_4 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = 8;\r\n    /** UNSIGNED_SHORT_5_5_5_1 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = 9;\r\n    /** UNSIGNED_SHORT_5_6_5 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = 10;\r\n    /** UNSIGNED_INT_2_10_10_10_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = 11;\r\n    /** UNSIGNED_INT_24_8 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_24_8 = 12;\r\n    /** UNSIGNED_INT_10F_11F_11F_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = 13;\r\n    /** UNSIGNED_INT_5_9_9_9_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = 14;\r\n    /** FLOAT_32_UNSIGNED_INT_24_8_REV */\r\n    public static readonly TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = 15;\r\n\r\n    /** nearest is mag = nearest and min = nearest and no mip */\r\n    public static readonly TEXTURE_NEAREST_SAMPLINGMODE = 1;\r\n    /** mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_NEAREST = 1;\r\n\r\n    /** Bilinear is mag = linear and min = linear and no mip */\r\n    public static readonly TEXTURE_BILINEAR_SAMPLINGMODE = 2;\r\n    /** mag = linear and min = linear and mip = none */\r\n    public static readonly TEXTURE_LINEAR_LINEAR = 2;\r\n\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_TRILINEAR_SAMPLINGMODE = 3;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPLINEAR = 3;\r\n\r\n    /** mag = nearest and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPNEAREST = 4;\r\n    /** mag = nearest and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPNEAREST = 5;\r\n    /** mag = nearest and min = linear and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPLINEAR = 6;\r\n    /** mag = nearest and min = linear and mip = none */\r\n    public static readonly TEXTURE_NEAREST_LINEAR = 7;\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPLINEAR = 8;\r\n    /** mag = linear and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPNEAREST = 9;\r\n    /** mag = linear and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPLINEAR = 10;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPNEAREST = 11;\r\n    /** mag = linear and min = nearest and mip = none */\r\n    public static readonly TEXTURE_LINEAR_NEAREST = 12;\r\n\r\n    /** Explicit coordinates mode */\r\n    public static readonly TEXTURE_EXPLICIT_MODE = 0;\r\n    /** Spherical coordinates mode */\r\n    public static readonly TEXTURE_SPHERICAL_MODE = 1;\r\n    /** Planar coordinates mode */\r\n    public static readonly TEXTURE_PLANAR_MODE = 2;\r\n    /** Cubic coordinates mode */\r\n    public static readonly TEXTURE_CUBIC_MODE = 3;\r\n    /** Projection coordinates mode */\r\n    public static readonly TEXTURE_PROJECTION_MODE = 4;\r\n    /** Skybox coordinates mode */\r\n    public static readonly TEXTURE_SKYBOX_MODE = 5;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly TEXTURE_INVCUBIC_MODE = 6;\r\n    /** Equirectangular coordinates mode */\r\n    public static readonly TEXTURE_EQUIRECTANGULAR_MODE = 7;\r\n    /** Equirectangular Fixed coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MODE = 8;\r\n    /** Equirectangular Fixed Mirrored coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9;\r\n\r\n    /** Offline (baking) quality for texture filtering */\r\n    public static readonly TEXTURE_FILTERING_QUALITY_OFFLINE = 4096;\r\n\r\n    /** High quality for texture filtering */\r\n    public static readonly TEXTURE_FILTERING_QUALITY_HIGH = 64;\r\n\r\n    /** Medium quality for texture filtering */\r\n    public static readonly TEXTURE_FILTERING_QUALITY_MEDIUM = 16;\r\n\r\n    /** Low quality for texture filtering */\r\n    public static readonly TEXTURE_FILTERING_QUALITY_LOW = 8;\r\n\r\n    // Texture rescaling mode\r\n    /** Defines that texture rescaling will use a floor to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_FLOOR = 1;\r\n    /** Defines that texture rescaling will look for the nearest power of 2 size */\r\n    public static readonly SCALEMODE_NEAREST = 2;\r\n    /** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_CEILING = 3;\r\n\r\n    /**\r\n     * The dirty texture flag value\r\n     */\r\n    public static readonly MATERIAL_TextureDirtyFlag = 1;\r\n    /**\r\n     * The dirty light flag value\r\n     */\r\n    public static readonly MATERIAL_LightDirtyFlag = 2;\r\n    /**\r\n     * The dirty fresnel flag value\r\n     */\r\n    public static readonly MATERIAL_FresnelDirtyFlag = 4;\r\n    /**\r\n     * The dirty attribute flag value\r\n     */\r\n    public static readonly MATERIAL_AttributesDirtyFlag = 8;\r\n    /**\r\n     * The dirty misc flag value\r\n     */\r\n    public static readonly MATERIAL_MiscDirtyFlag = 16;\r\n    /**\r\n     * The dirty prepass flag value\r\n     */\r\n    public static readonly MATERIAL_PrePassDirtyFlag = 32;\r\n    /**\r\n     * The all dirty flag value\r\n     */\r\n    public static readonly MATERIAL_AllDirtyFlag = 63;\r\n\r\n    /**\r\n     * Returns the triangle fill mode\r\n     */\r\n    public static readonly MATERIAL_TriangleFillMode = 0;\r\n    /**\r\n     * Returns the wireframe mode\r\n     */\r\n    public static readonly MATERIAL_WireFrameFillMode = 1;\r\n    /**\r\n     * Returns the point fill mode\r\n     */\r\n    public static readonly MATERIAL_PointFillMode = 2;\r\n    /**\r\n     * Returns the point list draw mode\r\n     */\r\n    public static readonly MATERIAL_PointListDrawMode = 3;\r\n    /**\r\n     * Returns the line list draw mode\r\n     */\r\n    public static readonly MATERIAL_LineListDrawMode = 4;\r\n    /**\r\n     * Returns the line loop draw mode\r\n     */\r\n    public static readonly MATERIAL_LineLoopDrawMode = 5;\r\n    /**\r\n     * Returns the line strip draw mode\r\n     */\r\n    public static readonly MATERIAL_LineStripDrawMode = 6;\r\n\r\n    /**\r\n     * Returns the triangle strip draw mode\r\n     */\r\n    public static readonly MATERIAL_TriangleStripDrawMode = 7;\r\n    /**\r\n     * Returns the triangle fan draw mode\r\n     */\r\n    public static readonly MATERIAL_TriangleFanDrawMode = 8;\r\n\r\n    /**\r\n     * Stores the clock-wise side orientation\r\n     */\r\n    public static readonly MATERIAL_ClockWiseSideOrientation = 0;\r\n    /**\r\n     * Stores the counter clock-wise side orientation\r\n     */\r\n    public static readonly MATERIAL_CounterClockWiseSideOrientation = 1;\r\n\r\n    /**\r\n     * Nothing\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_NothingTrigger = 0;\r\n    /**\r\n     * On pick\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPickTrigger = 1;\r\n    /**\r\n     * On left pick\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnLeftPickTrigger = 2;\r\n    /**\r\n     * On right pick\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnRightPickTrigger = 3;\r\n    /**\r\n     * On center pick\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnCenterPickTrigger = 4;\r\n    /**\r\n     * On pick down\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPickDownTrigger = 5;\r\n    /**\r\n     * On double pick\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnDoublePickTrigger = 6;\r\n    /**\r\n     * On pick up\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPickUpTrigger = 7;\r\n    /**\r\n     * On pick out.\r\n     * This trigger will only be raised if you also declared a OnPickDown\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPickOutTrigger = 16;\r\n    /**\r\n     * On long press\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnLongPressTrigger = 8;\r\n    /**\r\n     * On pointer over\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPointerOverTrigger = 9;\r\n    /**\r\n     * On pointer out\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnPointerOutTrigger = 10;\r\n    /**\r\n     * On every frame\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnEveryFrameTrigger = 11;\r\n    /**\r\n     * On intersection enter\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnIntersectionEnterTrigger = 12;\r\n    /**\r\n     * On intersection exit\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnIntersectionExitTrigger = 13;\r\n    /**\r\n     * On key down\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnKeyDownTrigger = 14;\r\n    /**\r\n     * On key up\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_actions#triggers\r\n     */\r\n    public static readonly ACTION_OnKeyUpTrigger = 15;\r\n\r\n    /**\r\n     * Billboard mode will only apply to Y axis\r\n     */\r\n    public static readonly PARTICLES_BILLBOARDMODE_Y = 2;\r\n    /**\r\n     * Billboard mode will apply to all axes\r\n     */\r\n    public static readonly PARTICLES_BILLBOARDMODE_ALL = 7;\r\n    /**\r\n     * Special billboard mode where the particle will be biilboard to the camera but rotated to align with direction\r\n     */\r\n    public static readonly PARTICLES_BILLBOARDMODE_STRETCHED = 8;\r\n\r\n    /** Default culling strategy : this is an exclusion test and it's the more accurate.\r\n     *  Test order :\r\n     *  Is the bounding sphere outside the frustum ?\r\n     *  If not, are the bounding box vertices outside the frustum ?\r\n     *  It not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly MESHES_CULLINGSTRATEGY_STANDARD = 0;\r\n    /** Culling strategy : Bounding Sphere Only.\r\n     *  This is an exclusion test. It's faster than the standard strategy because the bounding box is not tested.\r\n     *  It's also less accurate than the standard because some not visible objects can still be selected.\r\n     *  Test : is the bounding sphere outside the frustum ?\r\n     *  If not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY = 1;\r\n    /** Culling strategy : Optimistic Inclusion.\r\n     *  This in an inclusion test first, then the standard exclusion test.\r\n     *  This can be faster when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the standard test when the tested object center is not the frustum but one of its bounding box vertex is still inside.\r\n     *  Anyway, it's as accurate as the standard strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the default culling strategy.\r\n     */\r\n    public static readonly MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION = 2;\r\n    /** Culling strategy : Optimistic Inclusion then Bounding Sphere Only.\r\n     *  This in an inclusion test first, then the bounding sphere only exclusion test.\r\n     *  This can be the fastest test when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the BoundingSphereOnly strategy when the tested object center is not in the frustum but its bounding sphere still intersects it.\r\n     *  It's less accurate than the standard strategy and as accurate as the BoundingSphereOnly strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the Bounding Sphere Only strategy. No Bounding Box is tested here.\r\n     */\r\n    public static readonly MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY = 3;\r\n\r\n    /**\r\n     * No logging while loading\r\n     */\r\n    public static readonly SCENELOADER_NO_LOGGING = 0;\r\n    /**\r\n     * Minimal logging while loading\r\n     */\r\n    public static readonly SCENELOADER_MINIMAL_LOGGING = 1;\r\n    /**\r\n     * Summary logging while loading\r\n     */\r\n    public static readonly SCENELOADER_SUMMARY_LOGGING = 2;\r\n    /**\r\n     * Detailled logging while loading\r\n     */\r\n    public static readonly SCENELOADER_DETAILED_LOGGING = 3;\r\n\r\n    /**\r\n     * Constant used to retrieve the irradiance texture index in the textures array in the prepass\r\n     * using getIndex(0)\r\n     */\r\n    public static readonly PREPASS_IRRADIANCE_TEXTURE_TYPE = 0;\r\n    /**\r\n     * Constant used to retrieve the position texture index in the textures array in the prepass\r\n     * using getIndex(undefined)\r\n     */\r\n    public static readonly PREPASS_POSITION_TEXTURE_TYPE = 1;\r\n    /**\r\n     * Constant used to retrieve the velocity texture index in the textures array in the prepass\r\n     * using getIndex(undefined)\r\n     */\r\n    public static readonly PREPASS_VELOCITY_TEXTURE_TYPE = 2;\r\n    /**\r\n     * Constant used to retrieve the reflectivity texture index in the textures array in the prepass\r\n     * using the getIndex(3)\r\n     */\r\n    public static readonly PREPASS_REFLECTIVITY_TEXTURE_TYPE = 3;\r\n    /**\r\n     * Constant used to retrieve the lit color texture index in the textures array in the prepass\r\n     * using the getIndex(4)\r\n     */\r\n    public static readonly PREPASS_COLOR_TEXTURE_TYPE = 4;\r\n    /**\r\n     * Constant used to retrieve depth + normal index in the textures array in the prepass\r\n     * using the getIndex(5)\r\n     */\r\n    public static readonly PREPASS_DEPTHNORMAL_TEXTURE_TYPE = 5;\r\n    /**\r\n     * Constant used to retrieve albedo index in the textures array in the prepass\r\n     * using the getIndex(6)\r\n     */\r\n    public static readonly PREPASS_ALBEDO_TEXTURE_TYPE = 6;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}