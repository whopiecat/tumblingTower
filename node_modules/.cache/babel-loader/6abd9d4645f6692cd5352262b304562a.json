{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine\";\n\nThinEngine.prototype.setAlphaConstants = function (r, g, b, a) {\n  this._alphaState.setAlphaBlendConstants(r, g, b, a);\n};\n\nThinEngine.prototype.setAlphaMode = function (mode, noDepthWriteChange) {\n  if (noDepthWriteChange === void 0) {\n    noDepthWriteChange = false;\n  }\n\n  if (this._alphaMode === mode) {\n    return;\n  }\n\n  switch (mode) {\n    case 0:\n      this._alphaState.alphaBlend = false;\n      break;\n\n    case 7:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 8:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 2:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 6:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 1:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 3:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ZERO, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 4:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_COLOR, this._gl.ZERO, this._gl.ONE, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 5:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 9:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.CONSTANT_COLOR, this._gl.ONE_MINUS_CONSTANT_COLOR, this._gl.CONSTANT_ALPHA, this._gl.ONE_MINUS_CONSTANT_ALPHA);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 10:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 11:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 12:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ZERO);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 13:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE_MINUS_DST_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 14:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 15:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ZERO);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 16:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ZERO, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n  }\n\n  if (!noDepthWriteChange) {\n    this.depthCullingState.depthMask = mode === 0;\n  }\n\n  this._alphaMode = mode;\n};\n\nThinEngine.prototype.getAlphaMode = function () {\n  return this._alphaMode;\n};\n\nThinEngine.prototype.setAlphaEquation = function (equation) {\n  if (this._alphaEquation === equation) {\n    return;\n  }\n\n  switch (equation) {\n    case 0:\n      this._alphaState.setAlphaEquationParameters(this._gl.FUNC_ADD, this._gl.FUNC_ADD);\n\n      break;\n\n    case 1:\n      this._alphaState.setAlphaEquationParameters(this._gl.FUNC_SUBTRACT, this._gl.FUNC_SUBTRACT);\n\n      break;\n\n    case 2:\n      this._alphaState.setAlphaEquationParameters(this._gl.FUNC_REVERSE_SUBTRACT, this._gl.FUNC_REVERSE_SUBTRACT);\n\n      break;\n\n    case 3:\n      this._alphaState.setAlphaEquationParameters(this._gl.MAX, this._gl.MAX);\n\n      break;\n\n    case 4:\n      this._alphaState.setAlphaEquationParameters(this._gl.MIN, this._gl.MIN);\n\n      break;\n\n    case 5:\n      this._alphaState.setAlphaEquationParameters(this._gl.MIN, this._gl.FUNC_ADD);\n\n      break;\n  }\n\n  this._alphaEquation = equation;\n};\n\nThinEngine.prototype.getAlphaEquation = function () {\n  return this._alphaEquation;\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/Extensions/engine.alpha.ts"],"names":[],"mappings":"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","sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\n\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Sets alpha constants used by some alpha blending modes\r\n         * @param r defines the red component\r\n         * @param g defines the green component\r\n         * @param b defines the blue component\r\n         * @param a defines the alpha component\r\n         */\r\n        setAlphaConstants(r: number, g: number, b: number, a: number): void;\r\n\r\n        /**\r\n         * Sets the current alpha mode\r\n         * @param mode defines the mode to use (one of the Engine.ALPHA_XXX)\r\n         * @param noDepthWriteChange defines if depth writing state should remains unchanged (false by default)\r\n         * @see https://doc.babylonjs.com/resources/transparency_and_how_meshes_are_rendered\r\n         */\r\n        setAlphaMode(mode: number, noDepthWriteChange?: boolean): void;\r\n\r\n        /**\r\n         * Gets the current alpha mode\r\n         * @see https://doc.babylonjs.com/resources/transparency_and_how_meshes_are_rendered\r\n         * @returns the current alpha mode\r\n         */\r\n        getAlphaMode(): number;\r\n\r\n        /**\r\n         * Sets the current alpha equation\r\n         * @param equation defines the equation to use (one of the Engine.ALPHA_EQUATION_XXX)\r\n         */\r\n        setAlphaEquation(equation: number): void;\r\n\r\n        /**\r\n         * Gets the current alpha equation.\r\n         * @returns the current alpha equation\r\n         */\r\n        getAlphaEquation(): number;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.setAlphaConstants = function(r: number, g: number, b: number, a: number) {\r\n    this._alphaState.setAlphaBlendConstants(r, g, b, a);\r\n};\r\n\r\nThinEngine.prototype.setAlphaMode = function(mode: number, noDepthWriteChange: boolean = false): void {\r\n    if (this._alphaMode === mode) {\r\n        return;\r\n    }\r\n\r\n    switch (mode) {\r\n        case 0:\r\n            this._alphaState.alphaBlend = false;\r\n            break;\r\n        case 7:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 8:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 2:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 6:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 1:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 3:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ZERO, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 4:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_COLOR, this._gl.ZERO, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 5:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 9:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.CONSTANT_COLOR, this._gl.ONE_MINUS_CONSTANT_COLOR, this._gl.CONSTANT_ALPHA, this._gl.ONE_MINUS_CONSTANT_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 10:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 11:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 12:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ZERO);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 13:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE_MINUS_DST_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 14:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 15:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ZERO);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case 16:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n    }\r\n    if (!noDepthWriteChange) {\r\n        this.depthCullingState.depthMask = (mode === 0);\r\n    }\r\n    this._alphaMode = mode;\r\n};\r\n\r\nThinEngine.prototype.getAlphaMode = function(): number {\r\n    return this._alphaMode;\r\n};\r\n\r\nThinEngine.prototype.setAlphaEquation = function(equation: number): void {\r\n    if (this._alphaEquation === equation) {\r\n        return;\r\n    }\r\n\r\n    switch (equation) {\r\n        case 0:\r\n            this._alphaState.setAlphaEquationParameters(this._gl.FUNC_ADD, this._gl.FUNC_ADD);\r\n            break;\r\n        case 1:\r\n            this._alphaState.setAlphaEquationParameters(this._gl.FUNC_SUBTRACT, this._gl.FUNC_SUBTRACT);\r\n            break;\r\n        case 2:\r\n            this._alphaState.setAlphaEquationParameters(this._gl.FUNC_REVERSE_SUBTRACT, this._gl.FUNC_REVERSE_SUBTRACT);\r\n            break;\r\n        case 3:\r\n            this._alphaState.setAlphaEquationParameters(this._gl.MAX, this._gl.MAX);\r\n            break;\r\n        case 4:\r\n            this._alphaState.setAlphaEquationParameters(this._gl.MIN, this._gl.MIN);\r\n            break;\r\n        case 5:\r\n            this._alphaState.setAlphaEquationParameters(this._gl.MIN, this._gl.FUNC_ADD);\r\n            break;\r\n    }\r\n    this._alphaEquation = equation;\r\n};\r\n\r\nThinEngine.prototype.getAlphaEquation = function() {\r\n    return this._alphaEquation;\r\n};"],"sourceRoot":""},"metadata":{},"sourceType":"module"}