{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { InputBlock } from '../Input/inputBlock';\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\nimport { ReflectionTextureBaseBlock } from './reflectionTextureBaseBlock';\n/**\r\n * Block used to read a reflection texture from a sampler\r\n */\n\nvar ReflectionTextureBlock =\n/** @class */\nfunction (_super) {\n  __extends(ReflectionTextureBlock, _super);\n  /**\r\n   * Create a new ReflectionTextureBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function ReflectionTextureBlock(name) {\n    var _this = _super.call(this, name) || this;\n\n    _this.registerInput(\"position\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment); // Flagging as fragment as the normal can be changed by fragment code\n\n\n    _this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  ReflectionTextureBlock.prototype.getClassName = function () {\n    return \"ReflectionTextureBlock\";\n  };\n\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"position\", {\n    /**\r\n     * Gets the world position input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"worldPosition\", {\n    /**\r\n     * Gets the world position input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"worldNormal\", {\n    /**\r\n     * Gets the world normal input component\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"world\", {\n    /**\r\n     * Gets the world input component\r\n     */\n    get: function () {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"cameraPosition\", {\n    /**\r\n    * Gets the camera (or eye) position component\r\n    */\n    get: function () {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"view\", {\n    /**\r\n     * Gets the view input component\r\n     */\n    get: function () {\n      return this._inputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"rgb\", {\n    /**\r\n     * Gets the rgb output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"rgba\", {\n    /**\r\n     * Gets the rgba output component\r\n     */\n    get: function () {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"r\", {\n    /**\r\n     * Gets the r output component\r\n     */\n    get: function () {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"g\", {\n    /**\r\n     * Gets the g output component\r\n     */\n    get: function () {\n      return this._outputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"b\", {\n    /**\r\n     * Gets the b output component\r\n     */\n    get: function () {\n      return this._outputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"a\", {\n    /**\r\n     * Gets the a output component\r\n     */\n    get: function () {\n      return this._outputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ReflectionTextureBlock.prototype.autoConfigure = function (material) {\n    _super.prototype.autoConfigure.call(this, material);\n\n    if (!this.cameraPosition.isConnected) {\n      var cameraPositionInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.CameraPosition;\n      });\n\n      if (!cameraPositionInput) {\n        cameraPositionInput = new InputBlock(\"cameraPosition\");\n        cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\n      }\n\n      cameraPositionInput.output.connectTo(this.cameraPosition);\n    }\n  };\n\n  ReflectionTextureBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (!this.texture) {\n      state.compilationString += this.writeOutputs(state, \"vec3(0.)\");\n      return this;\n    }\n\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      state.compilationString += this.handleVertexSide(state);\n      return this;\n    }\n\n    this.handleFragmentSideInits(state);\n\n    var normalWUnit = state._getFreeVariableName(\"normalWUnit\");\n\n    state.compilationString += \"vec4 \" + normalWUnit + \" = normalize(\" + this.worldNormal.associatedVariableName + \");\\r\\n\";\n    state.compilationString += this.handleFragmentSideCodeReflectionCoords(normalWUnit);\n    state.compilationString += this.handleFragmentSideCodeReflectionColor(undefined, \"\");\n    state.compilationString += this.writeOutputs(state, this._reflectionColorName);\n    return this;\n  };\n\n  return ReflectionTextureBlock;\n}(ReflectionTextureBaseBlock);\n\nexport { ReflectionTextureBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.ReflectionTextureBlock\"] = ReflectionTextureBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Dual/reflectionTextureBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { NodeMaterial } from '../../nodeMaterial';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\nimport { InputBlock } from '../Input/inputBlock';\r\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\r\nimport { ReflectionTextureBaseBlock } from './reflectionTextureBaseBlock';\r\n\r\n/**\r\n * Block used to read a reflection texture from a sampler\r\n */\r\nexport class ReflectionTextureBlock extends ReflectionTextureBaseBlock {\r\n    /**\r\n     * Create a new ReflectionTextureBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"position\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment); // Flagging as fragment as the normal can be changed by fragment code\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\r\n\r\n        this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector4);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ReflectionTextureBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get position(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the world input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n    * Gets the camera (or eye) position component\r\n    */\r\n    public get cameraPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the view input component\r\n     */\r\n    public get view(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb output component\r\n     */\r\n    public get rgb(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba output component\r\n     */\r\n    public get rgba(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the r output component\r\n     */\r\n    public get r(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the g output component\r\n     */\r\n    public get g(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the b output component\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the a output component\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._outputs[5];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        super.autoConfigure(material);\r\n\r\n        if (!this.cameraPosition.isConnected) {\r\n            let cameraPositionInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.CameraPosition);\r\n\r\n            if (!cameraPositionInput) {\r\n                cameraPositionInput = new InputBlock(\"cameraPosition\");\r\n                cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\r\n            }\r\n            cameraPositionInput.output.connectTo(this.cameraPosition);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (!this.texture) {\r\n            state.compilationString += this.writeOutputs(state, \"vec3(0.)\");\r\n            return this;\r\n        }\r\n\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            state.compilationString += this.handleVertexSide(state);\r\n            return this;\r\n        }\r\n\r\n        this.handleFragmentSideInits(state);\r\n\r\n        const normalWUnit = state._getFreeVariableName(\"normalWUnit\");\r\n\r\n        state.compilationString += `vec4 ${normalWUnit} = normalize(${this.worldNormal.associatedVariableName});\\r\\n`;\r\n\r\n        state.compilationString += this.handleFragmentSideCodeReflectionCoords(normalWUnit);\r\n\r\n        state.compilationString += this.handleFragmentSideCodeReflectionColor(undefined, \"\");\r\n\r\n        state.compilationString += this.writeOutputs(state, this._reflectionColorName);\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ReflectionTextureBlock\"] = ReflectionTextureBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}