{"ast":null,"code":"/**\r\n * This is the base class for all WebXR features.\r\n * Since most features require almost the same resources and callbacks, this class can be used to simplify the development\r\n * Note that since the features manager is using the `IWebXRFeature` you are in no way obligated to use this class\r\n */\nvar WebXRAbstractFeature =\n/** @class */\nfunction () {\n  /**\r\n   * Construct a new (abstract) WebXR feature\r\n   * @param _xrSessionManager the xr session manager for this feature\r\n   */\n  function WebXRAbstractFeature(_xrSessionManager) {\n    this._xrSessionManager = _xrSessionManager;\n    this._attached = false;\n    this._removeOnDetach = [];\n    /**\r\n     * Is this feature disposed?\r\n     */\n\n    this.isDisposed = false;\n    /**\r\n     * Should auto-attach be disabled?\r\n     */\n\n    this.disableAutoAttach = false;\n    /**\r\n     * The name of the native xr feature name (like anchor, hit-test, or hand-tracking)\r\n     */\n\n    this.xrNativeFeatureName = \"\";\n  }\n\n  Object.defineProperty(WebXRAbstractFeature.prototype, \"attached\", {\n    /**\r\n     * Is this feature attached\r\n     */\n    get: function () {\n      return this._attached;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * attach this feature\r\n   *\r\n   * @param force should attachment be forced (even when already attached)\r\n   * @returns true if successful, false is failed or already attached\r\n   */\n\n  WebXRAbstractFeature.prototype.attach = function (force) {\n    var _this = this; // do not attach a disposed feature\n\n\n    if (this.isDisposed) {\n      return false;\n    }\n\n    if (!force) {\n      if (this.attached) {\n        return false;\n      }\n    } else {\n      if (this.attached) {\n        // detach first, to be sure\n        this.detach();\n      }\n    }\n\n    this._attached = true;\n\n    this._addNewAttachObserver(this._xrSessionManager.onXRFrameObservable, function (frame) {\n      return _this._onXRFrame(frame);\n    });\n\n    return true;\n  };\n  /**\r\n   * detach this feature.\r\n   *\r\n   * @returns true if successful, false if failed or already detached\r\n   */\n\n\n  WebXRAbstractFeature.prototype.detach = function () {\n    if (!this._attached) {\n      this.disableAutoAttach = true;\n      return false;\n    }\n\n    this._attached = false;\n\n    this._removeOnDetach.forEach(function (toRemove) {\n      toRemove.observable.remove(toRemove.observer);\n    });\n\n    return true;\n  };\n  /**\r\n   * Dispose this feature and all of the resources attached\r\n   */\n\n\n  WebXRAbstractFeature.prototype.dispose = function () {\n    this.detach();\n    this.isDisposed = true;\n  };\n  /**\r\n   * This function will be executed during before enabling the feature and can be used to not-allow enabling it.\r\n   * Note that at this point the session has NOT started, so this is purely checking if the browser supports it\r\n   *\r\n   * @returns whether or not the feature is compatible in this environment\r\n   */\n\n\n  WebXRAbstractFeature.prototype.isCompatible = function () {\n    return true;\n  };\n  /**\r\n   * This is used to register callbacks that will automatically be removed when detach is called.\r\n   * @param observable the observable to which the observer will be attached\r\n   * @param callback the callback to register\r\n   */\n\n\n  WebXRAbstractFeature.prototype._addNewAttachObserver = function (observable, callback) {\n    this._removeOnDetach.push({\n      observable: observable,\n      observer: observable.add(callback)\n    });\n  };\n\n  return WebXRAbstractFeature;\n}();\n\nexport { WebXRAbstractFeature };","map":{"version":3,"sources":["../../../../sourceES6/core/XR/features/WebXRAbstractFeature.ts"],"names":[],"mappings":"AAKA;;;;;AAKA,IAAA,oBAAA;AAAA;AAAA,YAAA;AAsBI;;;;AAIA,WAAA,oBAAA,CAAsB,iBAAtB,EAA4D;AAAtC,SAAA,iBAAA,GAAA,iBAAA;AAzBd,SAAA,SAAA,GAAqB,KAArB;AACA,SAAA,eAAA,GAGF,EAHE;AAKR;;;;AAGO,SAAA,UAAA,GAAsB,KAAtB;AAEP;;;;AAGO,SAAA,iBAAA,GAA6B,KAA7B;AAEP;;;;AAGO,SAAA,mBAAA,GAA8B,EAA9B;AAMyD;;AAKhE,EAAA,MAAA,CAAA,cAAA,CAAW,oBAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;AAHnB;;;SAGA,YAAA;AACI,aAAO,KAAK,SAAZ;AACH,KAFkB;qBAAA;;AAAA,GAAnB;AAIA;;;;;;;AAMO,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,KAAd,EAA6B;AAA7B,QAAA,KAAA,GAAA,IAAA,CAA6B,CACzB;;;AACA,QAAI,KAAK,UAAT,EAAqB;AACjB,aAAO,KAAP;AACH;;AACD,QAAI,CAAC,KAAL,EAAY;AACR,UAAI,KAAK,QAAT,EAAmB;AACf,eAAO,KAAP;AACH;AACJ,KAJD,MAIO;AACH,UAAI,KAAK,QAAT,EAAmB;AACf;AACA,aAAK,MAAL;AACH;AACJ;;AAED,SAAK,SAAL,GAAiB,IAAjB;;AACA,SAAK,qBAAL,CAA2B,KAAK,iBAAL,CAAuB,mBAAlD,EAAuE,UAAC,KAAD,EAAM;AAAK,aAAA,KAAI,CAAC,UAAL,CAAA,KAAA,CAAA;AAAsB,KAAxG;;AACA,WAAO,IAAP;AACH,GAnBM;AAqBP;;;;;;;AAKO,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACI,QAAI,CAAC,KAAK,SAAV,EAAqB;AACjB,WAAK,iBAAL,GAAyB,IAAzB;AACA,aAAO,KAAP;AACH;;AACD,SAAK,SAAL,GAAiB,KAAjB;;AACA,SAAK,eAAL,CAAqB,OAArB,CAA6B,UAAC,QAAD,EAAS;AAClC,MAAA,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAA2B,QAAQ,CAAC,QAApC;AACH,KAFD;;AAGA,WAAO,IAAP;AACH,GAVM;AAYP;;;;;AAGO,EAAA,oBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,SAAK,MAAL;AACA,SAAK,UAAL,GAAkB,IAAlB;AACH,GAHM;AAKP;;;;;;;;AAMO,EAAA,oBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,IAAP;AACH,GAFM;AAIP;;;;;;;AAKU,EAAA,oBAAA,CAAA,SAAA,CAAA,qBAAA,GAAV,UAAmC,UAAnC,EAA8D,QAA9D,EAAsH;AAClH,SAAK,eAAL,CAAqB,IAArB,CAA0B;AACtB,MAAA,UAAU,EAAA,UADY;AAEtB,MAAA,QAAQ,EAAE,UAAU,CAAC,GAAX,CAAe,QAAf;AAFY,KAA1B;AAIH,GALS;;AAad,SAAA,oBAAA;AAAC,CAnHD,EAAA","sourcesContent":["import { IWebXRFeature } from \"../webXRFeaturesManager\";\r\nimport { Observer, Observable, EventState } from \"../../Misc/observable\";\r\nimport { Nullable } from \"../../types\";\r\nimport { WebXRSessionManager } from \"../webXRSessionManager\";\r\n\r\n/**\r\n * This is the base class for all WebXR features.\r\n * Since most features require almost the same resources and callbacks, this class can be used to simplify the development\r\n * Note that since the features manager is using the `IWebXRFeature` you are in no way obligated to use this class\r\n */\r\nexport abstract class WebXRAbstractFeature implements IWebXRFeature {\r\n    private _attached: boolean = false;\r\n    private _removeOnDetach: {\r\n        observer: Nullable<Observer<any>>;\r\n        observable: Observable<any>;\r\n    }[] = [];\r\n\r\n    /**\r\n     * Is this feature disposed?\r\n     */\r\n    public isDisposed: boolean = false;\r\n\r\n    /**\r\n     * Should auto-attach be disabled?\r\n     */\r\n    public disableAutoAttach: boolean = false;\r\n\r\n    /**\r\n     * The name of the native xr feature name (like anchor, hit-test, or hand-tracking)\r\n     */\r\n    public xrNativeFeatureName: string = \"\";\r\n\r\n    /**\r\n     * Construct a new (abstract) WebXR feature\r\n     * @param _xrSessionManager the xr session manager for this feature\r\n     */\r\n    constructor(protected _xrSessionManager: WebXRSessionManager) {}\r\n\r\n    /**\r\n     * Is this feature attached\r\n     */\r\n    public get attached() {\r\n        return this._attached;\r\n    }\r\n\r\n    /**\r\n     * attach this feature\r\n     *\r\n     * @param force should attachment be forced (even when already attached)\r\n     * @returns true if successful, false is failed or already attached\r\n     */\r\n    public attach(force?: boolean): boolean {\r\n        // do not attach a disposed feature\r\n        if (this.isDisposed) {\r\n            return false;\r\n        }\r\n        if (!force) {\r\n            if (this.attached) {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (this.attached) {\r\n                // detach first, to be sure\r\n                this.detach();\r\n            }\r\n        }\r\n\r\n        this._attached = true;\r\n        this._addNewAttachObserver(this._xrSessionManager.onXRFrameObservable, (frame) => this._onXRFrame(frame));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * detach this feature.\r\n     *\r\n     * @returns true if successful, false if failed or already detached\r\n     */\r\n    public detach(): boolean {\r\n        if (!this._attached) {\r\n            this.disableAutoAttach = true;\r\n            return false;\r\n        }\r\n        this._attached = false;\r\n        this._removeOnDetach.forEach((toRemove) => {\r\n            toRemove.observable.remove(toRemove.observer);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        this.detach();\r\n        this.isDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * This function will be executed during before enabling the feature and can be used to not-allow enabling it.\r\n     * Note that at this point the session has NOT started, so this is purely checking if the browser supports it\r\n     *\r\n     * @returns whether or not the feature is compatible in this environment\r\n     */\r\n    public isCompatible(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This is used to register callbacks that will automatically be removed when detach is called.\r\n     * @param observable the observable to which the observer will be attached\r\n     * @param callback the callback to register\r\n     */\r\n    protected _addNewAttachObserver<T>(observable: Observable<T>, callback: (eventData: T, eventState: EventState) => void) {\r\n        this._removeOnDetach.push({\r\n            observable,\r\n            observer: observable.add(callback),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Code in this function will be executed on each xrFrame received from the browser.\r\n     * This function will not execute after the feature is detached.\r\n     * @param _xrFrame the current frame\r\n     */\r\n    protected abstract _onXRFrame(_xrFrame: XRFrame): void;\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}