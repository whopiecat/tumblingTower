{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Vector2, Vector3, TmpVectors } from \"../../../Maths/math.vector\";\nimport { Texture } from \"../../../Materials/Textures/texture\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess\";\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess\";\nimport { serialize } from \"../../../Misc/decorators\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\nimport \"../../../Shaders/ssao.fragment\";\nimport \"../../../Shaders/ssaoCombine.fragment\";\n/**\r\n * Render pipeline to produce ssao effect\r\n */\n\nvar SSAORenderingPipeline =\n/** @class */\nfunction (_super) {\n  __extends(SSAORenderingPipeline, _super);\n  /**\r\n   * @constructor\r\n   * @param name - The rendering pipeline name\r\n   * @param scene - The scene linked to this pipeline\r\n   * @param ratio - The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, combineRatio: 1.0 }\r\n   * @param cameras - The array of cameras that the rendering pipeline will be attached to\r\n   */\n\n\n  function SSAORenderingPipeline(name, scene, ratio, cameras) {\n    var _this = _super.call(this, scene.getEngine(), name) || this; // Members\n\n    /**\r\n     * @ignore\r\n    * The PassPostProcess id in the pipeline that contains the original scene color\r\n    */\n\n\n    _this.SSAOOriginalSceneColorEffect = \"SSAOOriginalSceneColorEffect\";\n    /**\r\n     * @ignore\r\n    * The SSAO PostProcess id in the pipeline\r\n    */\n\n    _this.SSAORenderEffect = \"SSAORenderEffect\";\n    /**\r\n     * @ignore\r\n    * The horizontal blur PostProcess id in the pipeline\r\n    */\n\n    _this.SSAOBlurHRenderEffect = \"SSAOBlurHRenderEffect\";\n    /**\r\n     * @ignore\r\n    * The vertical blur PostProcess id in the pipeline\r\n    */\n\n    _this.SSAOBlurVRenderEffect = \"SSAOBlurVRenderEffect\";\n    /**\r\n     * @ignore\r\n    * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\r\n    */\n\n    _this.SSAOCombineRenderEffect = \"SSAOCombineRenderEffect\";\n    /**\r\n    * The output strength of the SSAO post-process. Default value is 1.0.\r\n    */\n\n    _this.totalStrength = 1.0;\n    /**\r\n    * The radius around the analyzed pixel used by the SSAO post-process. Default value is 0.0006\r\n    */\n\n    _this.radius = 0.0001;\n    /**\r\n    * Related to fallOff, used to interpolate SSAO samples (first interpolate function input) based on the occlusion difference of each pixel\r\n    * Must not be equal to fallOff and superior to fallOff.\r\n    * Default value is 0.0075\r\n    */\n\n    _this.area = 0.0075;\n    /**\r\n    * Related to area, used to interpolate SSAO samples (second interpolate function input) based on the occlusion difference of each pixel\r\n    * Must not be equal to area and inferior to area.\r\n    * Default value is 0.000001\r\n    */\n\n    _this.fallOff = 0.000001;\n    /**\r\n    * The base color of the SSAO post-process\r\n    * The final result is \"base + ssao\" between [0, 1]\r\n    */\n\n    _this.base = 0.5;\n    _this._firstUpdate = true;\n    _this._scene = scene; // Set up assets\n\n    _this._createRandomTexture();\n\n    _this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\n\n    var ssaoRatio = ratio.ssaoRatio || ratio;\n    var combineRatio = ratio.combineRatio || ratio;\n    _this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", combineRatio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\n\n    _this._createSSAOPostProcess(ssaoRatio);\n\n    _this._createBlurPostProcess(ssaoRatio);\n\n    _this._createSSAOCombinePostProcess(combineRatio); // Set up pipeline\n\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOOriginalSceneColorEffect, function () {\n      return _this._originalColorPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAORenderEffect, function () {\n      return _this._ssaoPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurHRenderEffect, function () {\n      return _this._blurHPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurVRenderEffect, function () {\n      return _this._blurVPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOCombineRenderEffect, function () {\n      return _this._ssaoCombinePostProcess;\n    }, true)); // Finish\n\n\n    scene.postProcessRenderPipelineManager.addPipeline(_this);\n\n    if (cameras) {\n      scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(SSAORenderingPipeline.prototype, \"scene\", {\n    /**\r\n     * Gets active scene\r\n     */\n    get: function () {\n      return this._scene;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Public Methods\n\n  /**\r\n   * Get the class name\r\n   * @returns \"SSAORenderingPipeline\"\r\n   */\n\n  SSAORenderingPipeline.prototype.getClassName = function () {\n    return \"SSAORenderingPipeline\";\n  };\n  /**\r\n   * Removes the internal pipeline assets and detatches the pipeline from the scene cameras\r\n   */\n\n\n  SSAORenderingPipeline.prototype.dispose = function (disableDepthRender) {\n    if (disableDepthRender === void 0) {\n      disableDepthRender = false;\n    }\n\n    for (var i = 0; i < this._scene.cameras.length; i++) {\n      var camera = this._scene.cameras[i];\n\n      this._originalColorPostProcess.dispose(camera);\n\n      this._ssaoPostProcess.dispose(camera);\n\n      this._blurHPostProcess.dispose(camera);\n\n      this._blurVPostProcess.dispose(camera);\n\n      this._ssaoCombinePostProcess.dispose(camera);\n    }\n\n    this._randomTexture.dispose();\n\n    if (disableDepthRender) {\n      this._scene.disableDepthRenderer();\n    }\n\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n\n    _super.prototype.dispose.call(this);\n  }; // Private Methods\n\n\n  SSAORenderingPipeline.prototype._createBlurPostProcess = function (ratio) {\n    var _this = this;\n\n    var size = 16;\n    this._blurHPostProcess = new BlurPostProcess(\"BlurH\", new Vector2(1, 0), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n    this._blurVPostProcess = new BlurPostProcess(\"BlurV\", new Vector2(0, 1), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n\n    this._blurHPostProcess.onActivateObservable.add(function () {\n      var dw = _this._blurHPostProcess.width / _this._scene.getEngine().getRenderWidth();\n\n      _this._blurHPostProcess.kernel = size * dw;\n    });\n\n    this._blurVPostProcess.onActivateObservable.add(function () {\n      var dw = _this._blurVPostProcess.height / _this._scene.getEngine().getRenderHeight();\n\n      _this._blurVPostProcess.kernel = size * dw;\n    });\n  };\n  /** @hidden */\n\n\n  SSAORenderingPipeline.prototype._rebuild = function () {\n    this._firstUpdate = true;\n\n    _super.prototype._rebuild.call(this);\n  };\n\n  SSAORenderingPipeline.prototype._createSSAOPostProcess = function (ratio) {\n    var _this = this;\n\n    var numSamples = 16;\n    var sampleSphere = [0.5381, 0.1856, -0.4319, 0.1379, 0.2486, 0.4430, 0.3371, 0.5679, -0.0057, -0.6999, -0.0451, -0.0019, 0.0689, -0.1598, -0.8547, 0.0560, 0.0069, -0.1843, -0.0146, 0.1402, 0.0762, 0.0100, -0.1924, -0.0344, -0.3577, -0.5301, -0.4358, -0.3169, 0.1063, 0.0158, 0.0103, -0.5869, 0.0046, -0.0897, -0.4940, 0.3287, 0.7119, -0.0154, -0.0918, -0.0533, 0.0596, -0.5411, 0.0352, -0.0631, 0.5460, -0.4776, 0.2847, -0.0271];\n    var samplesFactor = 1.0 / numSamples;\n    this._ssaoPostProcess = new PostProcess(\"ssao\", \"ssao\", [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"area\", \"fallOff\", \"base\", \"range\", \"viewport\"], [\"randomSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define SAMPLES \" + numSamples + \"\\n#define SSAO\");\n\n    this._ssaoPostProcess.onApply = function (effect) {\n      if (_this._firstUpdate) {\n        effect.setArray3(\"sampleSphere\", sampleSphere);\n        effect.setFloat(\"samplesFactor\", samplesFactor);\n        effect.setFloat(\"randTextureTiles\", 4.0);\n      }\n\n      effect.setFloat(\"totalStrength\", _this.totalStrength);\n      effect.setFloat(\"radius\", _this.radius);\n      effect.setFloat(\"area\", _this.area);\n      effect.setFloat(\"fallOff\", _this.fallOff);\n      effect.setFloat(\"base\", _this.base);\n      effect.setTexture(\"textureSampler\", _this._depthTexture);\n      effect.setTexture(\"randomSampler\", _this._randomTexture);\n    };\n  };\n\n  SSAORenderingPipeline.prototype._createSSAOCombinePostProcess = function (ratio) {\n    var _this = this;\n\n    this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n\n    this._ssaoCombinePostProcess.onApply = function (effect) {\n      effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(0, 0, 1.0, 1.0));\n      effect.setTextureFromPostProcess(\"originalColor\", _this._originalColorPostProcess);\n    };\n  };\n\n  SSAORenderingPipeline.prototype._createRandomTexture = function () {\n    var size = 512;\n    this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\n    this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n    this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n\n    var context = this._randomTexture.getContext();\n\n    var rand = function (min, max) {\n      return Math.random() * (max - min) + min;\n    };\n\n    var randVector = Vector3.Zero();\n\n    for (var x = 0; x < size; x++) {\n      for (var y = 0; y < size; y++) {\n        randVector.x = Math.floor(rand(-1.0, 1.0) * 255);\n        randVector.y = Math.floor(rand(-1.0, 1.0) * 255);\n        randVector.z = Math.floor(rand(-1.0, 1.0) * 255);\n        context.fillStyle = 'rgb(' + randVector.x + ', ' + randVector.y + ', ' + randVector.z + ')';\n        context.fillRect(x, y, 1, 1);\n      }\n    }\n\n    this._randomTexture.update(false);\n  };\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"totalStrength\", void 0);\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"radius\", void 0);\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"area\", void 0);\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"fallOff\", void 0);\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"base\", void 0);\n\n  return SSAORenderingPipeline;\n}(PostProcessRenderPipeline);\n\nexport { SSAORenderingPipeline };","map":{"version":3,"sources":["../../../../../sourceES6/core/PostProcesses/RenderPipeline/Pipelines/ssaoRenderingPipeline.ts"],"names":[],"mappings":"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","sourcesContent":["import { Vector2, Vector3, TmpVectors } from \"../../../Maths/math.vector\";\r\nimport { Camera } from \"../../../Cameras/camera\";\r\nimport { Effect } from \"../../../Materials/effect\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\r\nimport { RenderTargetTexture } from \"../../../Materials/Textures/renderTargetTexture\";\r\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess\";\r\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess\";\r\n\r\nimport { serialize } from \"../../../Misc/decorators\";\r\nimport { Scene } from \"../../../scene\";\r\n\r\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\r\n\r\nimport \"../../../Shaders/ssao.fragment\";\r\nimport \"../../../Shaders/ssaoCombine.fragment\";\r\n\r\n/**\r\n * Render pipeline to produce ssao effect\r\n */\r\nexport class SSAORenderingPipeline extends PostProcessRenderPipeline {\r\n    // Members\r\n\r\n    /**\r\n     * @ignore\r\n    * The PassPostProcess id in the pipeline that contains the original scene color\r\n    */\r\n    public SSAOOriginalSceneColorEffect: string = \"SSAOOriginalSceneColorEffect\";\r\n    /**\r\n     * @ignore\r\n    * The SSAO PostProcess id in the pipeline\r\n    */\r\n    public SSAORenderEffect: string = \"SSAORenderEffect\";\r\n    /**\r\n     * @ignore\r\n    * The horizontal blur PostProcess id in the pipeline\r\n    */\r\n    public SSAOBlurHRenderEffect: string = \"SSAOBlurHRenderEffect\";\r\n    /**\r\n     * @ignore\r\n    * The vertical blur PostProcess id in the pipeline\r\n    */\r\n    public SSAOBlurVRenderEffect: string = \"SSAOBlurVRenderEffect\";\r\n    /**\r\n     * @ignore\r\n    * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\r\n    */\r\n    public SSAOCombineRenderEffect: string = \"SSAOCombineRenderEffect\";\r\n\r\n    /**\r\n    * The output strength of the SSAO post-process. Default value is 1.0.\r\n    */\r\n    @serialize()\r\n    public totalStrength: number = 1.0;\r\n\r\n    /**\r\n    * The radius around the analyzed pixel used by the SSAO post-process. Default value is 0.0006\r\n    */\r\n    @serialize()\r\n    public radius: number = 0.0001;\r\n\r\n    /**\r\n    * Related to fallOff, used to interpolate SSAO samples (first interpolate function input) based on the occlusion difference of each pixel\r\n    * Must not be equal to fallOff and superior to fallOff.\r\n    * Default value is 0.0075\r\n    */\r\n    @serialize()\r\n    public area: number = 0.0075;\r\n\r\n    /**\r\n    * Related to area, used to interpolate SSAO samples (second interpolate function input) based on the occlusion difference of each pixel\r\n    * Must not be equal to area and inferior to area.\r\n    * Default value is 0.000001\r\n    */\r\n    @serialize()\r\n    public fallOff: number = 0.000001;\r\n\r\n    /**\r\n    * The base color of the SSAO post-process\r\n    * The final result is \"base + ssao\" between [0, 1]\r\n    */\r\n    @serialize()\r\n    public base: number = 0.5;\r\n\r\n    private _scene: Scene;\r\n    private _depthTexture: RenderTargetTexture;\r\n    private _randomTexture: DynamicTexture;\r\n\r\n    private _originalColorPostProcess: PassPostProcess;\r\n    private _ssaoPostProcess: PostProcess;\r\n    private _blurHPostProcess: BlurPostProcess;\r\n    private _blurVPostProcess: BlurPostProcess;\r\n    private _ssaoCombinePostProcess: PostProcess;\r\n\r\n    private _firstUpdate: boolean = true;\r\n\r\n    /**\r\n     * Gets active scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name - The rendering pipeline name\r\n     * @param scene - The scene linked to this pipeline\r\n     * @param ratio - The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, combineRatio: 1.0 }\r\n     * @param cameras - The array of cameras that the rendering pipeline will be attached to\r\n     */\r\n    constructor(name: string, scene: Scene, ratio: any, cameras?: Camera[]) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._scene = scene;\r\n\r\n        // Set up assets\r\n        this._createRandomTexture();\r\n        this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\r\n\r\n        var ssaoRatio = ratio.ssaoRatio || ratio;\r\n        var combineRatio = ratio.combineRatio || ratio;\r\n\r\n        this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", combineRatio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\r\n        this._createSSAOPostProcess(ssaoRatio);\r\n        this._createBlurPostProcess(ssaoRatio);\r\n        this._createSSAOCombinePostProcess(combineRatio);\r\n\r\n        // Set up pipeline\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOOriginalSceneColorEffect, () => { return this._originalColorPostProcess; }, true));\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAORenderEffect, () => { return this._ssaoPostProcess; }, true));\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurHRenderEffect, () => { return this._blurHPostProcess; }, true));\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurVRenderEffect, () => { return this._blurVPostProcess; }, true));\r\n\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOCombineRenderEffect, () => { return this._ssaoCombinePostProcess; }, true));\r\n\r\n        // Finish\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n        if (cameras) {\r\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\r\n        }\r\n    }\r\n\r\n    // Public Methods\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"SSAORenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"SSAORenderingPipeline\";\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detatches the pipeline from the scene cameras\r\n     */\r\n    public dispose(disableDepthRender: boolean = false): void {\r\n        for (var i = 0; i < this._scene.cameras.length; i++) {\r\n            var camera = this._scene.cameras[i];\r\n\r\n            this._originalColorPostProcess.dispose(camera);\r\n            this._ssaoPostProcess.dispose(camera);\r\n            this._blurHPostProcess.dispose(camera);\r\n            this._blurVPostProcess.dispose(camera);\r\n            this._ssaoCombinePostProcess.dispose(camera);\r\n        }\r\n\r\n        this._randomTexture.dispose();\r\n\r\n        if (disableDepthRender) {\r\n            this._scene.disableDepthRenderer();\r\n        }\r\n\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    // Private Methods\r\n    private _createBlurPostProcess(ratio: number): void {\r\n        var size = 16;\r\n\r\n        this._blurHPostProcess = new BlurPostProcess(\"BlurH\", new Vector2(1, 0), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\r\n        this._blurVPostProcess = new BlurPostProcess(\"BlurV\", new Vector2(0, 1), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\r\n\r\n        this._blurHPostProcess.onActivateObservable.add(() => {\r\n            let dw = this._blurHPostProcess.width / this._scene.getEngine().getRenderWidth();\r\n            this._blurHPostProcess.kernel = size * dw;\r\n        });\r\n\r\n        this._blurVPostProcess.onActivateObservable.add(() => {\r\n            let dw = this._blurVPostProcess.height / this._scene.getEngine().getRenderHeight();\r\n            this._blurVPostProcess.kernel = size * dw;\r\n        });\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild() {\r\n        this._firstUpdate = true;\r\n        super._rebuild();\r\n    }\r\n\r\n    private _createSSAOPostProcess(ratio: number): void {\r\n        var numSamples = 16;\r\n        var sampleSphere = [\r\n            0.5381, 0.1856, -0.4319,\r\n            0.1379, 0.2486, 0.4430,\r\n            0.3371, 0.5679, -0.0057,\r\n            -0.6999, -0.0451, -0.0019,\r\n            0.0689, -0.1598, -0.8547,\r\n            0.0560, 0.0069, -0.1843,\r\n            -0.0146, 0.1402, 0.0762,\r\n            0.0100, -0.1924, -0.0344,\r\n            -0.3577, -0.5301, -0.4358,\r\n            -0.3169, 0.1063, 0.0158,\r\n            0.0103, -0.5869, 0.0046,\r\n            -0.0897, -0.4940, 0.3287,\r\n            0.7119, -0.0154, -0.0918,\r\n            -0.0533, 0.0596, -0.5411,\r\n            0.0352, -0.0631, 0.5460,\r\n            -0.4776, 0.2847, -0.0271\r\n        ];\r\n        var samplesFactor = 1.0 / numSamples;\r\n\r\n        this._ssaoPostProcess = new PostProcess(\"ssao\", \"ssao\",\r\n            [\r\n                \"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\",\r\n                \"area\", \"fallOff\", \"base\", \"range\", \"viewport\"\r\n            ],\r\n            [\"randomSampler\"],\r\n            ratio, null, Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(), false,\r\n            \"#define SAMPLES \" + numSamples + \"\\n#define SSAO\");\r\n\r\n        this._ssaoPostProcess.onApply = (effect: Effect) => {\r\n            if (this._firstUpdate) {\r\n                effect.setArray3(\"sampleSphere\", sampleSphere);\r\n                effect.setFloat(\"samplesFactor\", samplesFactor);\r\n                effect.setFloat(\"randTextureTiles\", 4.0);\r\n            }\r\n\r\n            effect.setFloat(\"totalStrength\", this.totalStrength);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            effect.setFloat(\"area\", this.area);\r\n            effect.setFloat(\"fallOff\", this.fallOff);\r\n            effect.setFloat(\"base\", this.base);\r\n\r\n            effect.setTexture(\"textureSampler\", this._depthTexture);\r\n            effect.setTexture(\"randomSampler\", this._randomTexture);\r\n        };\r\n    }\r\n\r\n    private _createSSAOCombinePostProcess(ratio: number): void {\r\n        this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"],\r\n            ratio, null, Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(), false);\r\n\r\n        this._ssaoCombinePostProcess.onApply = (effect: Effect) => {\r\n            effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(0, 0, 1.0, 1.0));\r\n            effect.setTextureFromPostProcess(\"originalColor\", this._originalColorPostProcess);\r\n        };\r\n    }\r\n\r\n    private _createRandomTexture(): void {\r\n        var size = 512;\r\n\r\n        this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\r\n        this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        var context = this._randomTexture.getContext();\r\n\r\n        var rand = (min: number, max: number) => {\r\n            return Math.random() * (max - min) + min;\r\n        };\r\n\r\n        var randVector = Vector3.Zero();\r\n\r\n        for (var x = 0; x < size; x++) {\r\n            for (var y = 0; y < size; y++) {\r\n                randVector.x = Math.floor(rand(-1.0, 1.0) * 255);\r\n                randVector.y = Math.floor(rand(-1.0, 1.0) * 255);\r\n                randVector.z = Math.floor(rand(-1.0, 1.0) * 255);\r\n\r\n                context.fillStyle = 'rgb(' + randVector.x + ', ' + randVector.y + ', ' + randVector.z + ')';\r\n                context.fillRect(x, y, 1, 1);\r\n            }\r\n        }\r\n\r\n        this._randomTexture.update(false);\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}