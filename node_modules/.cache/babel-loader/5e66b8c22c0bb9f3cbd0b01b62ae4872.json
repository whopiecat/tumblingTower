{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Action } from \"./action\";\nimport { _TypeStore } from \"../Misc/typeStore\";\n/**\r\n * A Condition applied to an Action\r\n */\n\nvar Condition =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Condition\r\n   * @param actionManager the manager of the action the condition is applied to\r\n   */\n  function Condition(actionManager) {\n    this._actionManager = actionManager;\n  }\n  /**\r\n   * Check if the current condition is valid\r\n   * @returns a boolean\r\n   */\n\n\n  Condition.prototype.isValid = function () {\n    return true;\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Condition.prototype._getProperty = function (propertyPath) {\n    return this._actionManager._getProperty(propertyPath);\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Condition.prototype._getEffectiveTarget = function (target, propertyPath) {\n    return this._actionManager._getEffectiveTarget(target, propertyPath);\n  };\n  /**\r\n   * Serialize placeholder for child classes\r\n   * @returns the serialized object\r\n   */\n\n\n  Condition.prototype.serialize = function () {};\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Condition.prototype._serialize = function (serializedCondition) {\n    return {\n      type: 2,\n      children: [],\n      name: serializedCondition.name,\n      properties: serializedCondition.properties\n    };\n  };\n\n  return Condition;\n}();\n\nexport { Condition };\n/**\r\n * Defines specific conditional operators as extensions of Condition\r\n */\n\nvar ValueCondition =\n/** @class */\nfunction (_super) {\n  __extends(ValueCondition, _super);\n  /**\r\n   * Creates a new ValueCondition\r\n   * @param actionManager manager for the action the condition applies to\r\n   * @param target for the action\r\n   * @param propertyPath path to specify the property of the target the conditional operator uses\r\n   * @param value the value compared by the conditional operator against the current value of the property\r\n   * @param operator the conditional operator, default ValueCondition.IsEqual\r\n   */\n\n\n  function ValueCondition(actionManager, target,\n  /** path to specify the property of the target the conditional operator uses  */\n  propertyPath,\n  /** the value compared by the conditional operator against the current value of the property */\n  value,\n  /** the conditional operator, default ValueCondition.IsEqual */\n  operator) {\n    if (operator === void 0) {\n      operator = ValueCondition.IsEqual;\n    }\n\n    var _this = _super.call(this, actionManager) || this;\n\n    _this.propertyPath = propertyPath;\n    _this.value = value;\n    _this.operator = operator;\n    _this._target = target;\n    _this._effectiveTarget = _this._getEffectiveTarget(target, _this.propertyPath);\n    _this._property = _this._getProperty(_this.propertyPath);\n    return _this;\n  }\n\n  Object.defineProperty(ValueCondition, \"IsEqual\", {\n    /**\r\n     * returns the number for IsEqual\r\n     */\n    get: function () {\n      return ValueCondition._IsEqual;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ValueCondition, \"IsDifferent\", {\n    /**\r\n     * Returns the number for IsDifferent\r\n     */\n    get: function () {\n      return ValueCondition._IsDifferent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ValueCondition, \"IsGreater\", {\n    /**\r\n     * Returns the number for IsGreater\r\n     */\n    get: function () {\n      return ValueCondition._IsGreater;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ValueCondition, \"IsLesser\", {\n    /**\r\n     * Returns the number for IsLesser\r\n     */\n    get: function () {\n      return ValueCondition._IsLesser;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Compares the given value with the property value for the specified conditional operator\r\n   * @returns the result of the comparison\r\n   */\n\n  ValueCondition.prototype.isValid = function () {\n    switch (this.operator) {\n      case ValueCondition.IsGreater:\n        return this._effectiveTarget[this._property] > this.value;\n\n      case ValueCondition.IsLesser:\n        return this._effectiveTarget[this._property] < this.value;\n\n      case ValueCondition.IsEqual:\n      case ValueCondition.IsDifferent:\n        var check;\n\n        if (this.value.equals) {\n          check = this.value.equals(this._effectiveTarget[this._property]);\n        } else {\n          check = this.value === this._effectiveTarget[this._property];\n        }\n\n        return this.operator === ValueCondition.IsEqual ? check : !check;\n    }\n\n    return false;\n  };\n  /**\r\n   * Serialize the ValueCondition into a JSON compatible object\r\n   * @returns serialization object\r\n   */\n\n\n  ValueCondition.prototype.serialize = function () {\n    return this._serialize({\n      name: \"ValueCondition\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }, {\n        name: \"operator\",\n        value: ValueCondition.GetOperatorName(this.operator)\n      }]\n    });\n  };\n  /**\r\n   * Gets the name of the conditional operator for the ValueCondition\r\n   * @param operator the conditional operator\r\n   * @returns the name\r\n   */\n\n\n  ValueCondition.GetOperatorName = function (operator) {\n    switch (operator) {\n      case ValueCondition._IsEqual:\n        return \"IsEqual\";\n\n      case ValueCondition._IsDifferent:\n        return \"IsDifferent\";\n\n      case ValueCondition._IsGreater:\n        return \"IsGreater\";\n\n      case ValueCondition._IsLesser:\n        return \"IsLesser\";\n\n      default:\n        return \"\";\n    }\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  ValueCondition._IsEqual = 0;\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n  ValueCondition._IsDifferent = 1;\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n  ValueCondition._IsGreater = 2;\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n  ValueCondition._IsLesser = 3;\n  return ValueCondition;\n}(Condition);\n\nexport { ValueCondition };\n/**\r\n * Defines a predicate condition as an extension of Condition\r\n */\n\nvar PredicateCondition =\n/** @class */\nfunction (_super) {\n  __extends(PredicateCondition, _super);\n  /**\r\n   * Creates a new PredicateCondition\r\n   * @param actionManager manager for the action the condition applies to\r\n   * @param predicate defines the predicate function used to validate the condition\r\n   */\n\n\n  function PredicateCondition(actionManager,\n  /** defines the predicate function used to validate the condition */\n  predicate) {\n    var _this = _super.call(this, actionManager) || this;\n\n    _this.predicate = predicate;\n    return _this;\n  }\n  /**\r\n   * @returns the validity of the predicate condition\r\n   */\n\n\n  PredicateCondition.prototype.isValid = function () {\n    return this.predicate();\n  };\n\n  return PredicateCondition;\n}(Condition);\n\nexport { PredicateCondition };\n/**\r\n * Defines a state condition as an extension of Condition\r\n */\n\nvar StateCondition =\n/** @class */\nfunction (_super) {\n  __extends(StateCondition, _super);\n  /**\r\n   * Creates a new StateCondition\r\n   * @param actionManager manager for the action the condition applies to\r\n   * @param target of the condition\r\n   * @param value to compare with target state\r\n   */\n\n\n  function StateCondition(actionManager, target,\n  /** Value to compare with target state  */\n  value) {\n    var _this = _super.call(this, actionManager) || this;\n\n    _this.value = value;\n    _this._target = target;\n    return _this;\n  }\n  /**\r\n   * Gets a boolean indicating if the current condition is met\r\n   * @returns the validity of the state\r\n   */\n\n\n  StateCondition.prototype.isValid = function () {\n    return this._target.state === this.value;\n  };\n  /**\r\n   * Serialize the StateCondition into a JSON compatible object\r\n   * @returns serialization object\r\n   */\n\n\n  StateCondition.prototype.serialize = function () {\n    return this._serialize({\n      name: \"StateCondition\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"value\",\n        value: this.value\n      }]\n    });\n  };\n\n  return StateCondition;\n}(Condition);\n\nexport { StateCondition };\n_TypeStore.RegisteredTypes[\"BABYLON.ValueCondition\"] = ValueCondition;\n_TypeStore.RegisteredTypes[\"BABYLON.PredicateCondition\"] = PredicateCondition;\n_TypeStore.RegisteredTypes[\"BABYLON.StateCondition\"] = StateCondition;","map":{"version":3,"sources":["../../../sourceES6/core/Actions/condition.ts"],"names":[],"mappings":"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","sourcesContent":["import { Action } from \"./action\";\r\nimport { _TypeStore } from \"../Misc/typeStore\";\r\n\r\ndeclare type ActionManager = import(\"./actionManager\").ActionManager;\r\n\r\n/**\r\n * A Condition applied to an Action\r\n */\r\nexport class Condition {\r\n    /**\r\n     * Internal only - manager for action\r\n     * @hidden\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    public _evaluationId: number;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    public _currentResult: boolean;\r\n\r\n    /**\r\n     * Creates a new Condition\r\n     * @param actionManager the manager of the action the condition is applied to\r\n     */\r\n    constructor(actionManager: ActionManager) {\r\n        this._actionManager = actionManager;\r\n    }\r\n\r\n    /**\r\n     * Check if the current condition is valid\r\n     * @returns a boolean\r\n     */\r\n    public isValid(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    public _getProperty(propertyPath: string): string {\r\n        return this._actionManager._getProperty(propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    public _getEffectiveTarget(target: any, propertyPath: string): any {\r\n        return this._actionManager._getEffectiveTarget(target, propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Serialize placeholder for child classes\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    protected _serialize(serializedCondition: any): any {\r\n        return {\r\n            type: 2, // Condition\r\n            children: [],\r\n            name: serializedCondition.name,\r\n            properties: serializedCondition.properties\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Defines specific conditional operators as extensions of Condition\r\n */\r\nexport class ValueCondition extends Condition {\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private static _IsEqual = 0;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private static _IsDifferent = 1;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private static _IsGreater = 2;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private static _IsLesser = 3;\r\n\r\n    /**\r\n     * returns the number for IsEqual\r\n     */\r\n    public static get IsEqual(): number {\r\n        return ValueCondition._IsEqual;\r\n    }\r\n\r\n    /**\r\n     * Returns the number for IsDifferent\r\n     */\r\n    public static get IsDifferent(): number {\r\n        return ValueCondition._IsDifferent;\r\n    }\r\n\r\n    /**\r\n     * Returns the number for IsGreater\r\n     */\r\n    public static get IsGreater(): number {\r\n        return ValueCondition._IsGreater;\r\n    }\r\n\r\n    /**\r\n     * Returns the number for IsLesser\r\n     */\r\n    public static get IsLesser(): number {\r\n        return ValueCondition._IsLesser;\r\n    }\r\n\r\n    /**\r\n     * Internal only The action manager for the condition\r\n     * @hidden\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private _target: any;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private _effectiveTarget: any;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private _property: string;\r\n\r\n    /**\r\n     * Creates a new ValueCondition\r\n     * @param actionManager manager for the action the condition applies to\r\n     * @param target for the action\r\n     * @param propertyPath path to specify the property of the target the conditional operator uses\r\n     * @param value the value compared by the conditional operator against the current value of the property\r\n     * @param operator the conditional operator, default ValueCondition.IsEqual\r\n     */\r\n    constructor(actionManager: ActionManager, target: any,\r\n        /** path to specify the property of the target the conditional operator uses  */\r\n        public propertyPath: string,\r\n        /** the value compared by the conditional operator against the current value of the property */\r\n        public value: any,\r\n        /** the conditional operator, default ValueCondition.IsEqual */\r\n        public operator: number = ValueCondition.IsEqual) {\r\n        super(actionManager);\r\n\r\n        this._target = target;\r\n        this._effectiveTarget = this._getEffectiveTarget(target, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Compares the given value with the property value for the specified conditional operator\r\n     * @returns the result of the comparison\r\n     */\r\n    public isValid(): boolean {\r\n        switch (this.operator) {\r\n            case ValueCondition.IsGreater:\r\n                return this._effectiveTarget[this._property] > this.value;\r\n            case ValueCondition.IsLesser:\r\n                return this._effectiveTarget[this._property] < this.value;\r\n            case ValueCondition.IsEqual:\r\n            case ValueCondition.IsDifferent:\r\n                var check: boolean;\r\n\r\n                if (this.value.equals) {\r\n                    check = this.value.equals(this._effectiveTarget[this._property]);\r\n                } else {\r\n                    check = this.value === this._effectiveTarget[this._property];\r\n                }\r\n                return this.operator === ValueCondition.IsEqual ? check : !check;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Serialize the ValueCondition into a JSON compatible object\r\n     * @returns serialization object\r\n     */\r\n    public serialize(): any {\r\n        return this._serialize({\r\n            name: \"ValueCondition\",\r\n            properties: [\r\n                Action._GetTargetProperty(this._target),\r\n                { name: \"propertyPath\", value: this.propertyPath },\r\n                { name: \"value\", value: Action._SerializeValueAsString(this.value) },\r\n                { name: \"operator\", value: ValueCondition.GetOperatorName(this.operator) }\r\n            ]\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the conditional operator for the ValueCondition\r\n     * @param operator the conditional operator\r\n     * @returns the name\r\n     */\r\n    public static GetOperatorName(operator: number): string {\r\n        switch (operator) {\r\n            case ValueCondition._IsEqual: return \"IsEqual\";\r\n            case ValueCondition._IsDifferent: return \"IsDifferent\";\r\n            case ValueCondition._IsGreater: return \"IsGreater\";\r\n            case ValueCondition._IsLesser: return \"IsLesser\";\r\n            default: return \"\";\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Defines a predicate condition as an extension of Condition\r\n */\r\nexport class PredicateCondition extends Condition {\r\n\r\n    /**\r\n     * Internal only - manager for action\r\n     * @hidden\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    /**\r\n     * Creates a new PredicateCondition\r\n     * @param actionManager manager for the action the condition applies to\r\n     * @param predicate defines the predicate function used to validate the condition\r\n     */\r\n    constructor(actionManager: ActionManager,\r\n        /** defines the predicate function used to validate the condition */\r\n        public predicate: () => boolean) {\r\n        super(actionManager);\r\n    }\r\n\r\n    /**\r\n     * @returns the validity of the predicate condition\r\n     */\r\n    public isValid(): boolean {\r\n        return this.predicate();\r\n    }\r\n}\r\n\r\n/**\r\n * Defines a state condition as an extension of Condition\r\n */\r\nexport class StateCondition extends Condition {\r\n\r\n    /**\r\n     * Internal only - manager for action\r\n     * @hidden\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private _target: any;\r\n\r\n    /**\r\n     * Creates a new StateCondition\r\n     * @param actionManager manager for the action the condition applies to\r\n     * @param target of the condition\r\n     * @param value to compare with target state\r\n     */\r\n    constructor(actionManager: ActionManager, target: any,\r\n        /** Value to compare with target state  */\r\n        public value: string) {\r\n        super(actionManager);\r\n\r\n        this._target = target;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current condition is met\r\n     * @returns the validity of the state\r\n     */\r\n    public isValid(): boolean {\r\n        return this._target.state === this.value;\r\n    }\r\n\r\n    /**\r\n     * Serialize the StateCondition into a JSON compatible object\r\n     * @returns serialization object\r\n     */\r\n    public serialize(): any {\r\n        return this._serialize({\r\n            name: \"StateCondition\",\r\n            properties: [\r\n                Action._GetTargetProperty(this._target),\r\n                { name: \"value\", value: this.value }\r\n            ]\r\n        });\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.ValueCondition\"] = ValueCondition;\r\n_TypeStore.RegisteredTypes[\"BABYLON.PredicateCondition\"] = PredicateCondition;\r\n_TypeStore.RegisteredTypes[\"BABYLON.StateCondition\"] = StateCondition;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}