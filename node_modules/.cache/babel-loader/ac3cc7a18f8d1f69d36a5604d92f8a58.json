{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager\";\nimport { Mesh } from \"../../Meshes/mesh\";\nimport { Quaternion } from \"../../Maths/math.vector\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { Logger } from \"../../Misc/logger\";\n/**\r\n * The motion controller class for all microsoft mixed reality controllers\r\n */\n\nvar WebXRMicrosoftMixedRealityController =\n/** @class */\nfunction (_super) {\n  __extends(WebXRMicrosoftMixedRealityController, _super);\n\n  function WebXRMicrosoftMixedRealityController(scene, gamepadObject, handedness) {\n    var _this = _super.call(this, scene, MixedRealityProfile[\"left-right\"], gamepadObject, handedness) || this; // use this in the future - https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets/profiles/microsoft\n\n\n    _this._mapping = {\n      defaultButton: {\n        valueNodeName: \"VALUE\",\n        unpressedNodeName: \"UNPRESSED\",\n        pressedNodeName: \"PRESSED\"\n      },\n      defaultAxis: {\n        valueNodeName: \"VALUE\",\n        minNodeName: \"MIN\",\n        maxNodeName: \"MAX\"\n      },\n      buttons: {\n        \"xr-standard-trigger\": {\n          rootNodeName: \"SELECT\",\n          componentProperty: \"button\",\n          states: [\"default\", \"touched\", \"pressed\"]\n        },\n        \"xr-standard-squeeze\": {\n          rootNodeName: \"GRASP\",\n          componentProperty: \"state\",\n          states: [\"pressed\"]\n        },\n        \"xr-standard-touchpad\": {\n          rootNodeName: \"TOUCHPAD_PRESS\",\n          labelAnchorNodeName: \"squeeze-label\",\n          touchPointNodeName: \"TOUCH\"\n        },\n        \"xr-standard-thumbstick\": {\n          rootNodeName: \"THUMBSTICK_PRESS\",\n          componentProperty: \"state\",\n          states: [\"pressed\"]\n        }\n      },\n      axes: {\n        \"xr-standard-touchpad\": {\n          \"x-axis\": {\n            rootNodeName: \"TOUCHPAD_TOUCH_X\"\n          },\n          \"y-axis\": {\n            rootNodeName: \"TOUCHPAD_TOUCH_Y\"\n          }\n        },\n        \"xr-standard-thumbstick\": {\n          \"x-axis\": {\n            rootNodeName: \"THUMBSTICK_X\"\n          },\n          \"y-axis\": {\n            rootNodeName: \"THUMBSTICK_Y\"\n          }\n        }\n      }\n    };\n    _this.profileId = \"microsoft-mixed-reality\";\n    return _this;\n  }\n\n  WebXRMicrosoftMixedRealityController.prototype._getFilenameAndPath = function () {\n    var filename = \"\";\n\n    if (this.handedness === \"left\") {\n      filename = WebXRMicrosoftMixedRealityController.MODEL_LEFT_FILENAME;\n    } else {\n      // Right is the default if no hand is specified\n      filename = WebXRMicrosoftMixedRealityController.MODEL_RIGHT_FILENAME;\n    }\n\n    var device = \"default\";\n    var path = WebXRMicrosoftMixedRealityController.MODEL_BASE_URL + device + \"/\";\n    return {\n      filename: filename,\n      path: path\n    };\n  };\n\n  WebXRMicrosoftMixedRealityController.prototype._getModelLoadingConstraints = function () {\n    var glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\n\n    if (!glbLoaded) {\n      Logger.Warn(\"glTF / glb loaded was not registered, using generic controller instead\");\n    }\n\n    return glbLoaded;\n  };\n\n  WebXRMicrosoftMixedRealityController.prototype._processLoadedModel = function (_meshes) {\n    var _this = this;\n\n    if (!this.rootMesh) {\n      return;\n    } // Button Meshes\n\n\n    this.getComponentIds().forEach(function (id, i) {\n      if (_this.disableAnimation) {\n        return;\n      }\n\n      if (id && _this.rootMesh) {\n        var buttonMap_1 = _this._mapping.buttons[id];\n        var buttonMeshName = buttonMap_1.rootNodeName;\n\n        if (!buttonMeshName) {\n          Logger.Log(\"Skipping unknown button at index: \" + i + \" with mapped name: \" + id);\n          return;\n        }\n\n        var buttonMesh = _this._getChildByName(_this.rootMesh, buttonMeshName);\n\n        if (!buttonMesh) {\n          Logger.Warn(\"Missing button mesh with name: \" + buttonMeshName);\n          return;\n        }\n\n        buttonMap_1.valueMesh = _this._getImmediateChildByName(buttonMesh, _this._mapping.defaultButton.valueNodeName);\n        buttonMap_1.pressedMesh = _this._getImmediateChildByName(buttonMesh, _this._mapping.defaultButton.pressedNodeName);\n        buttonMap_1.unpressedMesh = _this._getImmediateChildByName(buttonMesh, _this._mapping.defaultButton.unpressedNodeName);\n\n        if (buttonMap_1.valueMesh && buttonMap_1.pressedMesh && buttonMap_1.unpressedMesh) {\n          var comp = _this.getComponent(id);\n\n          if (comp) {\n            comp.onButtonStateChangedObservable.add(function (component) {\n              _this._lerpTransform(buttonMap_1, component.value);\n            }, undefined, true);\n          }\n        } else {\n          // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\n          Logger.Warn(\"Missing button submesh under mesh with name: \" + buttonMeshName);\n        }\n      }\n    }); // Axis Meshes\n\n    this.getComponentIds().forEach(function (id, i) {\n      var comp = _this.getComponent(id);\n\n      if (!comp.isAxes()) {\n        return;\n      }\n\n      [\"x-axis\", \"y-axis\"].forEach(function (axis) {\n        if (!_this.rootMesh) {\n          return;\n        }\n\n        var axisMap = _this._mapping.axes[id][axis];\n\n        var axisMesh = _this._getChildByName(_this.rootMesh, axisMap.rootNodeName);\n\n        if (!axisMesh) {\n          Logger.Warn(\"Missing axis mesh with name: \" + axisMap.rootNodeName);\n          return;\n        }\n\n        axisMap.valueMesh = _this._getImmediateChildByName(axisMesh, _this._mapping.defaultAxis.valueNodeName);\n        axisMap.minMesh = _this._getImmediateChildByName(axisMesh, _this._mapping.defaultAxis.minNodeName);\n        axisMap.maxMesh = _this._getImmediateChildByName(axisMesh, _this._mapping.defaultAxis.maxNodeName);\n\n        if (axisMap.valueMesh && axisMap.minMesh && axisMap.maxMesh) {\n          if (comp) {\n            comp.onAxisValueChangedObservable.add(function (axisValues) {\n              var value = axis === \"x-axis\" ? axisValues.x : axisValues.y;\n\n              _this._lerpTransform(axisMap, value, true);\n            }, undefined, true);\n          }\n        } else {\n          // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\n          Logger.Warn(\"Missing axis submesh under mesh with name: \" + axisMap.rootNodeName);\n        }\n      });\n    });\n  };\n\n  WebXRMicrosoftMixedRealityController.prototype._setRootMesh = function (meshes) {\n    this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n    this.rootMesh.isPickable = false;\n    var rootMesh; // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\n\n    for (var i = 0; i < meshes.length; i++) {\n      var mesh = meshes[i];\n      mesh.isPickable = false;\n\n      if (!mesh.parent) {\n        // Handle root node, attach to the new parentMesh\n        rootMesh = mesh;\n      }\n    }\n\n    if (rootMesh) {\n      rootMesh.setParent(this.rootMesh);\n    }\n\n    if (!this.scene.useRightHandedSystem) {\n      this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n    }\n  };\n\n  WebXRMicrosoftMixedRealityController.prototype._updateModel = function () {// no-op. model is updated using observables.\n  };\n  /**\r\n   * The base url used to load the left and right controller models\r\n   */\n\n\n  WebXRMicrosoftMixedRealityController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/microsoft/\";\n  /**\r\n   * The name of the left controller model file\r\n   */\n\n  WebXRMicrosoftMixedRealityController.MODEL_LEFT_FILENAME = \"left.glb\";\n  /**\r\n   * The name of the right controller model file\r\n   */\n\n  WebXRMicrosoftMixedRealityController.MODEL_RIGHT_FILENAME = \"right.glb\";\n  return WebXRMicrosoftMixedRealityController;\n}(WebXRAbstractMotionController);\n\nexport { WebXRMicrosoftMixedRealityController }; // register the profile\n\nWebXRMotionControllerManager.RegisterController(\"windows-mixed-reality\", function (xrInput, scene) {\n  return new WebXRMicrosoftMixedRealityController(scene, xrInput.gamepad, xrInput.handedness);\n}); // https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/microsoft/microsoft-mixed-reality.json\n\nvar MixedRealityProfile = {\n  left: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {\n          xr_standard_trigger_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_trigger_pressed_value\",\n            minNodeName: \"xr_standard_trigger_pressed_min\",\n            maxNodeName: \"xr_standard_trigger_pressed_max\"\n          }\n        }\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {\n          xr_standard_squeeze_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_squeeze_pressed_value\",\n            minNodeName: \"xr_standard_squeeze_pressed_min\",\n            maxNodeName: \"xr_standard_squeeze_pressed_max\"\n          }\n        }\n      },\n      \"xr-standard-touchpad\": {\n        type: \"touchpad\",\n        gamepadIndices: {\n          button: 2,\n          xAxis: 0,\n          yAxis: 1\n        },\n        rootNodeName: \"xr_standard_touchpad\",\n        visualResponses: {\n          xr_standard_touchpad_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_pressed_max\"\n          },\n          xr_standard_touchpad_xaxis_pressed: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_xaxis_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_xaxis_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_xaxis_pressed_max\"\n          },\n          xr_standard_touchpad_yaxis_pressed: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_yaxis_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_yaxis_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_yaxis_pressed_max\"\n          },\n          xr_standard_touchpad_xaxis_touched: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_xaxis_touched_value\",\n            minNodeName: \"xr_standard_touchpad_xaxis_touched_min\",\n            maxNodeName: \"xr_standard_touchpad_xaxis_touched_max\"\n          },\n          xr_standard_touchpad_yaxis_touched: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_yaxis_touched_value\",\n            minNodeName: \"xr_standard_touchpad_yaxis_touched_min\",\n            maxNodeName: \"xr_standard_touchpad_yaxis_touched_max\"\n          },\n          xr_standard_touchpad_axes_touched: {\n            componentProperty: \"state\",\n            states: [\"touched\", \"pressed\"],\n            valueNodeProperty: \"visibility\",\n            valueNodeName: \"xr_standard_touchpad_axes_touched_value\"\n          }\n        },\n        touchPointNodeName: \"xr_standard_touchpad_axes_touched_value\"\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {\n          xr_standard_thumbstick_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_pressed_max\"\n          },\n          xr_standard_thumbstick_xaxis_pressed: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_xaxis_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_xaxis_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_xaxis_pressed_max\"\n          },\n          xr_standard_thumbstick_yaxis_pressed: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_yaxis_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_yaxis_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_yaxis_pressed_max\"\n          }\n        }\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"microsoft-mixed-reality-left\",\n    assetPath: \"left.glb\"\n  },\n  right: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {\n          xr_standard_trigger_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_trigger_pressed_value\",\n            minNodeName: \"xr_standard_trigger_pressed_min\",\n            maxNodeName: \"xr_standard_trigger_pressed_max\"\n          }\n        }\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {\n          xr_standard_squeeze_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_squeeze_pressed_value\",\n            minNodeName: \"xr_standard_squeeze_pressed_min\",\n            maxNodeName: \"xr_standard_squeeze_pressed_max\"\n          }\n        }\n      },\n      \"xr-standard-touchpad\": {\n        type: \"touchpad\",\n        gamepadIndices: {\n          button: 2,\n          xAxis: 0,\n          yAxis: 1\n        },\n        rootNodeName: \"xr_standard_touchpad\",\n        visualResponses: {\n          xr_standard_touchpad_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_pressed_max\"\n          },\n          xr_standard_touchpad_xaxis_pressed: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_xaxis_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_xaxis_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_xaxis_pressed_max\"\n          },\n          xr_standard_touchpad_yaxis_pressed: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_yaxis_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_yaxis_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_yaxis_pressed_max\"\n          },\n          xr_standard_touchpad_xaxis_touched: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_xaxis_touched_value\",\n            minNodeName: \"xr_standard_touchpad_xaxis_touched_min\",\n            maxNodeName: \"xr_standard_touchpad_xaxis_touched_max\"\n          },\n          xr_standard_touchpad_yaxis_touched: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_yaxis_touched_value\",\n            minNodeName: \"xr_standard_touchpad_yaxis_touched_min\",\n            maxNodeName: \"xr_standard_touchpad_yaxis_touched_max\"\n          },\n          xr_standard_touchpad_axes_touched: {\n            componentProperty: \"state\",\n            states: [\"touched\", \"pressed\"],\n            valueNodeProperty: \"visibility\",\n            valueNodeName: \"xr_standard_touchpad_axes_touched_value\"\n          }\n        },\n        touchPointNodeName: \"xr_standard_touchpad_axes_touched_value\"\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {\n          xr_standard_thumbstick_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_pressed_max\"\n          },\n          xr_standard_thumbstick_xaxis_pressed: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_xaxis_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_xaxis_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_xaxis_pressed_max\"\n          },\n          xr_standard_thumbstick_yaxis_pressed: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_yaxis_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_yaxis_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_yaxis_pressed_max\"\n          }\n        }\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"microsoft-mixed-reality-right\",\n    assetPath: \"right.glb\"\n  }\n};","map":{"version":3,"sources":["../../../../sourceES6/core/XR/motionController/webXRMicrosoftMixedRealityController.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebXRAbstractMotionController, IMinimalMotionControllerObject, MotionControllerHandedness, IMotionControllerLayoutMap } from \"./webXRAbstractMotionController\";\r\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { Logger } from \"../../Misc/logger\";\r\n\r\n/**\r\n * The motion controller class for all microsoft mixed reality controllers\r\n */\r\nexport class WebXRMicrosoftMixedRealityController extends WebXRAbstractMotionController {\r\n    // use this in the future - https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets/profiles/microsoft\r\n    protected readonly _mapping = {\r\n        defaultButton: {\r\n            valueNodeName: \"VALUE\",\r\n            unpressedNodeName: \"UNPRESSED\",\r\n            pressedNodeName: \"PRESSED\",\r\n        },\r\n        defaultAxis: {\r\n            valueNodeName: \"VALUE\",\r\n            minNodeName: \"MIN\",\r\n            maxNodeName: \"MAX\",\r\n        },\r\n        buttons: {\r\n            \"xr-standard-trigger\": {\r\n                rootNodeName: \"SELECT\",\r\n                componentProperty: \"button\",\r\n                states: [\"default\", \"touched\", \"pressed\"],\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                rootNodeName: \"GRASP\",\r\n                componentProperty: \"state\",\r\n                states: [\"pressed\"],\r\n            },\r\n            \"xr-standard-touchpad\": {\r\n                rootNodeName: \"TOUCHPAD_PRESS\",\r\n                labelAnchorNodeName: \"squeeze-label\",\r\n                touchPointNodeName: \"TOUCH\", // TODO - use this for visual feedback\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                rootNodeName: \"THUMBSTICK_PRESS\",\r\n                componentProperty: \"state\",\r\n                states: [\"pressed\"],\r\n            },\r\n        },\r\n        axes: {\r\n            \"xr-standard-touchpad\": {\r\n                \"x-axis\": {\r\n                    rootNodeName: \"TOUCHPAD_TOUCH_X\",\r\n                },\r\n                \"y-axis\": {\r\n                    rootNodeName: \"TOUCHPAD_TOUCH_Y\",\r\n                },\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                \"x-axis\": {\r\n                    rootNodeName: \"THUMBSTICK_X\",\r\n                },\r\n                \"y-axis\": {\r\n                    rootNodeName: \"THUMBSTICK_Y\",\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    /**\r\n     * The base url used to load the left and right controller models\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/microsoft/\";\r\n    /**\r\n     * The name of the left controller model file\r\n     */\r\n    public static MODEL_LEFT_FILENAME: string = \"left.glb\";\r\n    /**\r\n     * The name of the right controller model file\r\n     */\r\n    public static MODEL_RIGHT_FILENAME: string = \"right.glb\";\r\n\r\n    public profileId = \"microsoft-mixed-reality\";\r\n\r\n    constructor(scene: Scene, gamepadObject: IMinimalMotionControllerObject, handedness: MotionControllerHandedness) {\r\n        super(scene, MixedRealityProfile[\"left-right\"], gamepadObject, handedness);\r\n    }\r\n\r\n    protected _getFilenameAndPath(): { filename: string; path: string } {\r\n        let filename = \"\";\r\n        if (this.handedness === \"left\") {\r\n            filename = WebXRMicrosoftMixedRealityController.MODEL_LEFT_FILENAME;\r\n        } else {\r\n            // Right is the default if no hand is specified\r\n            filename = WebXRMicrosoftMixedRealityController.MODEL_RIGHT_FILENAME;\r\n        }\r\n\r\n        const device = \"default\";\r\n        let path = WebXRMicrosoftMixedRealityController.MODEL_BASE_URL + device + \"/\";\r\n        return {\r\n            filename,\r\n            path,\r\n        };\r\n    }\r\n\r\n    protected _getModelLoadingConstraints(): boolean {\r\n        const glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\r\n        if (!glbLoaded) {\r\n            Logger.Warn(\"glTF / glb loaded was not registered, using generic controller instead\");\r\n        }\r\n        return glbLoaded;\r\n    }\r\n\r\n    protected _processLoadedModel(_meshes: AbstractMesh[]): void {\r\n        if (!this.rootMesh) {\r\n            return;\r\n        }\r\n\r\n        // Button Meshes\r\n        this.getComponentIds().forEach((id, i) => {\r\n            if (this.disableAnimation) {\r\n                return;\r\n            }\r\n            if (id && this.rootMesh) {\r\n                const buttonMap = (<any>this._mapping.buttons)[id];\r\n                const buttonMeshName = buttonMap.rootNodeName;\r\n                if (!buttonMeshName) {\r\n                    Logger.Log(\"Skipping unknown button at index: \" + i + \" with mapped name: \" + id);\r\n                    return;\r\n                }\r\n\r\n                var buttonMesh = this._getChildByName(this.rootMesh, buttonMeshName);\r\n                if (!buttonMesh) {\r\n                    Logger.Warn(\"Missing button mesh with name: \" + buttonMeshName);\r\n                    return;\r\n                }\r\n\r\n                buttonMap.valueMesh = this._getImmediateChildByName(buttonMesh, this._mapping.defaultButton.valueNodeName);\r\n                buttonMap.pressedMesh = this._getImmediateChildByName(buttonMesh, this._mapping.defaultButton.pressedNodeName);\r\n                buttonMap.unpressedMesh = this._getImmediateChildByName(buttonMesh, this._mapping.defaultButton.unpressedNodeName);\r\n\r\n                if (buttonMap.valueMesh && buttonMap.pressedMesh && buttonMap.unpressedMesh) {\r\n                    const comp = this.getComponent(id);\r\n                    if (comp) {\r\n                        comp.onButtonStateChangedObservable.add(\r\n                            (component) => {\r\n                                this._lerpTransform(buttonMap, component.value);\r\n                            },\r\n                            undefined,\r\n                            true\r\n                        );\r\n                    }\r\n                } else {\r\n                    // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\r\n                    Logger.Warn(\"Missing button submesh under mesh with name: \" + buttonMeshName);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Axis Meshes\r\n        this.getComponentIds().forEach((id, i) => {\r\n            const comp = this.getComponent(id);\r\n            if (!comp.isAxes()) {\r\n                return;\r\n            }\r\n\r\n            [\"x-axis\", \"y-axis\"].forEach((axis) => {\r\n                if (!this.rootMesh) {\r\n                    return;\r\n                }\r\n                const axisMap = (<any>this._mapping.axes)[id][axis];\r\n\r\n                var axisMesh = this._getChildByName(this.rootMesh, axisMap.rootNodeName);\r\n                if (!axisMesh) {\r\n                    Logger.Warn(\"Missing axis mesh with name: \" + axisMap.rootNodeName);\r\n                    return;\r\n                }\r\n\r\n                axisMap.valueMesh = this._getImmediateChildByName(axisMesh, this._mapping.defaultAxis.valueNodeName);\r\n                axisMap.minMesh = this._getImmediateChildByName(axisMesh, this._mapping.defaultAxis.minNodeName);\r\n                axisMap.maxMesh = this._getImmediateChildByName(axisMesh, this._mapping.defaultAxis.maxNodeName);\r\n\r\n                if (axisMap.valueMesh && axisMap.minMesh && axisMap.maxMesh) {\r\n                    if (comp) {\r\n                        comp.onAxisValueChangedObservable.add(\r\n                            (axisValues) => {\r\n                                const value = axis === \"x-axis\" ? axisValues.x : axisValues.y;\r\n                                this._lerpTransform(axisMap, value, true);\r\n                            },\r\n                            undefined,\r\n                            true\r\n                        );\r\n                    }\r\n                } else {\r\n                    // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\r\n                    Logger.Warn(\"Missing axis submesh under mesh with name: \" + axisMap.rootNodeName);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    protected _setRootMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\r\n        this.rootMesh.isPickable = false;\r\n        let rootMesh;\r\n        // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\r\n        for (let i = 0; i < meshes.length; i++) {\r\n            let mesh = meshes[i];\r\n\r\n            mesh.isPickable = false;\r\n\r\n            if (!mesh.parent) {\r\n                // Handle root node, attach to the new parentMesh\r\n                rootMesh = mesh;\r\n            }\r\n        }\r\n\r\n        if (rootMesh) {\r\n            rootMesh.setParent(this.rootMesh);\r\n        }\r\n\r\n        if (!this.scene.useRightHandedSystem) {\r\n            this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n        }\r\n    }\r\n\r\n    protected _updateModel(): void {\r\n        // no-op. model is updated using observables.\r\n    }\r\n}\r\n\r\n// register the profile\r\nWebXRMotionControllerManager.RegisterController(\"windows-mixed-reality\", (xrInput: XRInputSource, scene: Scene) => {\r\n    return new WebXRMicrosoftMixedRealityController(scene, <any>xrInput.gamepad, xrInput.handedness);\r\n});\r\n\r\n// https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/microsoft/microsoft-mixed-reality.json\r\nconst MixedRealityProfile: IMotionControllerLayoutMap = {\r\n    left: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {\r\n                    xr_standard_trigger_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_trigger_pressed_value\",\r\n                        minNodeName: \"xr_standard_trigger_pressed_min\",\r\n                        maxNodeName: \"xr_standard_trigger_pressed_max\",\r\n                    },\r\n                },\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {\r\n                    xr_standard_squeeze_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_squeeze_pressed_value\",\r\n                        minNodeName: \"xr_standard_squeeze_pressed_min\",\r\n                        maxNodeName: \"xr_standard_squeeze_pressed_max\",\r\n                    },\r\n                },\r\n            },\r\n            \"xr-standard-touchpad\": {\r\n                type: \"touchpad\",\r\n                gamepadIndices: {\r\n                    button: 2,\r\n                    xAxis: 0,\r\n                    yAxis: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_touchpad\",\r\n                visualResponses: {\r\n                    xr_standard_touchpad_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_pressed_value\",\r\n                        minNodeName: \"xr_standard_touchpad_pressed_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_pressed_max\",\r\n                    },\r\n                    xr_standard_touchpad_xaxis_pressed: {\r\n                        componentProperty: \"xAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_xaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_touchpad_xaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_xaxis_pressed_max\",\r\n                    },\r\n                    xr_standard_touchpad_yaxis_pressed: {\r\n                        componentProperty: \"yAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_yaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_touchpad_yaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_yaxis_pressed_max\",\r\n                    },\r\n                    xr_standard_touchpad_xaxis_touched: {\r\n                        componentProperty: \"xAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_xaxis_touched_value\",\r\n                        minNodeName: \"xr_standard_touchpad_xaxis_touched_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_xaxis_touched_max\",\r\n                    },\r\n                    xr_standard_touchpad_yaxis_touched: {\r\n                        componentProperty: \"yAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_yaxis_touched_value\",\r\n                        minNodeName: \"xr_standard_touchpad_yaxis_touched_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_yaxis_touched_max\",\r\n                    },\r\n                    xr_standard_touchpad_axes_touched: {\r\n                        componentProperty: \"state\",\r\n                        states: [\"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"visibility\",\r\n                        valueNodeName: \"xr_standard_touchpad_axes_touched_value\",\r\n                    },\r\n                },\r\n                touchPointNodeName: \"xr_standard_touchpad_axes_touched_value\",\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                type: \"thumbstick\",\r\n                gamepadIndices: {\r\n                    button: 3,\r\n                    xAxis: 2,\r\n                    yAxis: 3,\r\n                },\r\n                rootNodeName: \"xr_standard_thumbstick\",\r\n                visualResponses: {\r\n                    xr_standard_thumbstick_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_thumbstick_pressed_value\",\r\n                        minNodeName: \"xr_standard_thumbstick_pressed_min\",\r\n                        maxNodeName: \"xr_standard_thumbstick_pressed_max\",\r\n                    },\r\n                    xr_standard_thumbstick_xaxis_pressed: {\r\n                        componentProperty: \"xAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_thumbstick_xaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_thumbstick_xaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_thumbstick_xaxis_pressed_max\",\r\n                    },\r\n                    xr_standard_thumbstick_yaxis_pressed: {\r\n                        componentProperty: \"yAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_thumbstick_yaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_thumbstick_yaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_thumbstick_yaxis_pressed_max\",\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"microsoft-mixed-reality-left\",\r\n        assetPath: \"left.glb\",\r\n    },\r\n    right: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {\r\n                    xr_standard_trigger_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_trigger_pressed_value\",\r\n                        minNodeName: \"xr_standard_trigger_pressed_min\",\r\n                        maxNodeName: \"xr_standard_trigger_pressed_max\",\r\n                    },\r\n                },\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {\r\n                    xr_standard_squeeze_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_squeeze_pressed_value\",\r\n                        minNodeName: \"xr_standard_squeeze_pressed_min\",\r\n                        maxNodeName: \"xr_standard_squeeze_pressed_max\",\r\n                    },\r\n                },\r\n            },\r\n            \"xr-standard-touchpad\": {\r\n                type: \"touchpad\",\r\n                gamepadIndices: {\r\n                    button: 2,\r\n                    xAxis: 0,\r\n                    yAxis: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_touchpad\",\r\n                visualResponses: {\r\n                    xr_standard_touchpad_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_pressed_value\",\r\n                        minNodeName: \"xr_standard_touchpad_pressed_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_pressed_max\",\r\n                    },\r\n                    xr_standard_touchpad_xaxis_pressed: {\r\n                        componentProperty: \"xAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_xaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_touchpad_xaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_xaxis_pressed_max\",\r\n                    },\r\n                    xr_standard_touchpad_yaxis_pressed: {\r\n                        componentProperty: \"yAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_yaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_touchpad_yaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_yaxis_pressed_max\",\r\n                    },\r\n                    xr_standard_touchpad_xaxis_touched: {\r\n                        componentProperty: \"xAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_xaxis_touched_value\",\r\n                        minNodeName: \"xr_standard_touchpad_xaxis_touched_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_xaxis_touched_max\",\r\n                    },\r\n                    xr_standard_touchpad_yaxis_touched: {\r\n                        componentProperty: \"yAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_yaxis_touched_value\",\r\n                        minNodeName: \"xr_standard_touchpad_yaxis_touched_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_yaxis_touched_max\",\r\n                    },\r\n                    xr_standard_touchpad_axes_touched: {\r\n                        componentProperty: \"state\",\r\n                        states: [\"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"visibility\",\r\n                        valueNodeName: \"xr_standard_touchpad_axes_touched_value\",\r\n                    },\r\n                },\r\n                touchPointNodeName: \"xr_standard_touchpad_axes_touched_value\",\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                type: \"thumbstick\",\r\n                gamepadIndices: {\r\n                    button: 3,\r\n                    xAxis: 2,\r\n                    yAxis: 3,\r\n                },\r\n                rootNodeName: \"xr_standard_thumbstick\",\r\n                visualResponses: {\r\n                    xr_standard_thumbstick_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_thumbstick_pressed_value\",\r\n                        minNodeName: \"xr_standard_thumbstick_pressed_min\",\r\n                        maxNodeName: \"xr_standard_thumbstick_pressed_max\",\r\n                    },\r\n                    xr_standard_thumbstick_xaxis_pressed: {\r\n                        componentProperty: \"xAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_thumbstick_xaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_thumbstick_xaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_thumbstick_xaxis_pressed_max\",\r\n                    },\r\n                    xr_standard_thumbstick_yaxis_pressed: {\r\n                        componentProperty: \"yAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_thumbstick_yaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_thumbstick_yaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_thumbstick_yaxis_pressed_max\",\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"microsoft-mixed-reality-right\",\r\n        assetPath: \"right.glb\",\r\n    },\r\n};\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}