{"ast":null,"code":"/**\r\n * ActionEvent is the event being sent when an action is triggered.\r\n */\nvar ActionEvent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new ActionEvent\r\n   * @param source The mesh or sprite that triggered the action\r\n   * @param pointerX The X mouse cursor position at the time of the event\r\n   * @param pointerY The Y mouse cursor position at the time of the event\r\n   * @param meshUnderPointer The mesh that is currently pointed at (can be null)\r\n   * @param sourceEvent the original (browser) event that triggered the ActionEvent\r\n   * @param additionalData additional data for the event\r\n   */\n  function ActionEvent(\n  /** The mesh or sprite that triggered the action */\n  source,\n  /** The X mouse cursor position at the time of the event */\n  pointerX,\n  /** The Y mouse cursor position at the time of the event */\n  pointerY,\n  /** The mesh that is currently pointed at (can be null) */\n  meshUnderPointer,\n  /** the original (browser) event that triggered the ActionEvent */\n  sourceEvent,\n  /** additional data for the event */\n  additionalData) {\n    this.source = source;\n    this.pointerX = pointerX;\n    this.pointerY = pointerY;\n    this.meshUnderPointer = meshUnderPointer;\n    this.sourceEvent = sourceEvent;\n    this.additionalData = additionalData;\n  }\n  /**\r\n   * Helper function to auto-create an ActionEvent from a source mesh.\r\n   * @param source The source mesh that triggered the event\r\n   * @param evt The original (browser) event\r\n   * @param additionalData additional data for the event\r\n   * @returns the new ActionEvent\r\n   */\n\n\n  ActionEvent.CreateNew = function (source, evt, additionalData) {\n    var scene = source.getScene();\n    return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer || source, evt, additionalData);\n  };\n  /**\r\n   * Helper function to auto-create an ActionEvent from a source sprite\r\n   * @param source The source sprite that triggered the event\r\n   * @param scene Scene associated with the sprite\r\n   * @param evt The original (browser) event\r\n   * @param additionalData additional data for the event\r\n   * @returns the new ActionEvent\r\n   */\n\n\n  ActionEvent.CreateNewFromSprite = function (source, scene, evt, additionalData) {\n    return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt, additionalData);\n  };\n  /**\r\n   * Helper function to auto-create an ActionEvent from a scene. If triggered by a mesh use ActionEvent.CreateNew\r\n   * @param scene the scene where the event occurred\r\n   * @param evt The original (browser) event\r\n   * @returns the new ActionEvent\r\n   */\n\n\n  ActionEvent.CreateNewFromScene = function (scene, evt) {\n    return new ActionEvent(null, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt);\n  };\n  /**\r\n   * Helper function to auto-create an ActionEvent from a primitive\r\n   * @param prim defines the target primitive\r\n   * @param pointerPos defines the pointer position\r\n   * @param evt The original (browser) event\r\n   * @param additionalData additional data for the event\r\n   * @returns the new ActionEvent\r\n   */\n\n\n  ActionEvent.CreateNewFromPrimitive = function (prim, pointerPos, evt, additionalData) {\n    return new ActionEvent(prim, pointerPos.x, pointerPos.y, null, evt, additionalData);\n  };\n\n  return ActionEvent;\n}();\n\nexport { ActionEvent };","map":{"version":3,"sources":["../../../sourceES6/core/Actions/actionEvent.ts"],"names":[],"mappings":"AAwBA;;;AAGA,IAAA,WAAA;AAAA;AAAA,YAAA;AACI;;;;;;;;;AASA,WAAA,WAAA;AACI;AACO,EAAA,MAFX;AAGI;AACO,EAAA,QAJX;AAKI;AACO,EAAA,QANX;AAOI;AACO,EAAA,gBARX;AASI;AACO,EAAA,WAVX;AAWI;AACO,EAAA,cAZX,EAY+B;AAVpB,SAAA,MAAA,GAAA,MAAA;AAEA,SAAA,QAAA,GAAA,QAAA;AAEA,SAAA,QAAA,GAAA,QAAA;AAEA,SAAA,gBAAA,GAAA,gBAAA;AAEA,SAAA,WAAA,GAAA,WAAA;AAEA,SAAA,cAAA,GAAA,cAAA;AACV;AAED;;;;;;;;;AAOc,EAAA,WAAA,CAAA,SAAA,GAAd,UAAwB,MAAxB,EAA8C,GAA9C,EAA2D,cAA3D,EAA+E;AAC3E,QAAI,KAAK,GAAG,MAAM,CAAC,QAAP,EAAZ;AACA,WAAO,IAAI,WAAJ,CAAgB,MAAhB,EAAwB,KAAK,CAAC,QAA9B,EAAwC,KAAK,CAAC,QAA9C,EAAwD,KAAK,CAAC,gBAAN,IAA0B,MAAlF,EAA0F,GAA1F,EAA+F,cAA/F,CAAP;AACH,GAHa;AAKd;;;;;;;;;;AAQc,EAAA,WAAA,CAAA,mBAAA,GAAd,UAAkC,MAAlC,EAAkD,KAAlD,EAAgE,GAAhE,EAA6E,cAA7E,EAAiG;AAC7F,WAAO,IAAI,WAAJ,CAAgB,MAAhB,EAAwB,KAAK,CAAC,QAA9B,EAAwC,KAAK,CAAC,QAA9C,EAAwD,KAAK,CAAC,gBAA9D,EAAgF,GAAhF,EAAqF,cAArF,CAAP;AACH,GAFa;AAId;;;;;;;;AAMc,EAAA,WAAA,CAAA,kBAAA,GAAd,UAAiC,KAAjC,EAA+C,GAA/C,EAAyD;AACrD,WAAO,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,KAAK,CAAC,QAA5B,EAAsC,KAAK,CAAC,QAA5C,EAAsD,KAAK,CAAC,gBAA5D,EAA8E,GAA9E,CAAP;AACH,GAFa;AAId;;;;;;;;;;AAQc,EAAA,WAAA,CAAA,sBAAA,GAAd,UAAqC,IAArC,EAAgD,UAAhD,EAAqE,GAArE,EAAkF,cAAlF,EAAsG;AAClG,WAAO,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,UAAU,CAAC,CAAjC,EAAoC,UAAU,CAAC,CAA/C,EAAkD,IAAlD,EAAwD,GAAxD,EAA6D,cAA7D,CAAP;AACH,GAFa;;AAGlB,SAAA,WAAA;AAAC,CAtED,EAAA","sourcesContent":["import { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Nullable } from \"../types\";\r\nimport { Sprite } from \"../Sprites/sprite\";\r\nimport { Scene } from \"../scene\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\n\r\n/**\r\n * Interface used to define ActionEvent\r\n */\r\nexport interface IActionEvent {\r\n    /** The mesh or sprite that triggered the action */\r\n    source: any;\r\n    /** The X mouse cursor position at the time of the event */\r\n    pointerX: number;\r\n    /** The Y mouse cursor position at the time of the event */\r\n    pointerY: number;\r\n    /** The mesh that is currently pointed at (can be null) */\r\n    meshUnderPointer: Nullable<AbstractMesh>;\r\n    /** the original (browser) event that triggered the ActionEvent */\r\n    sourceEvent?: any;\r\n    /** additional data for the event */\r\n    additionalData?: any;\r\n}\r\n\r\n/**\r\n * ActionEvent is the event being sent when an action is triggered.\r\n */\r\nexport class ActionEvent implements IActionEvent {\r\n    /**\r\n     * Creates a new ActionEvent\r\n     * @param source The mesh or sprite that triggered the action\r\n     * @param pointerX The X mouse cursor position at the time of the event\r\n     * @param pointerY The Y mouse cursor position at the time of the event\r\n     * @param meshUnderPointer The mesh that is currently pointed at (can be null)\r\n     * @param sourceEvent the original (browser) event that triggered the ActionEvent\r\n     * @param additionalData additional data for the event\r\n     */\r\n    constructor(\r\n        /** The mesh or sprite that triggered the action */\r\n        public source: any,\r\n        /** The X mouse cursor position at the time of the event */\r\n        public pointerX: number,\r\n        /** The Y mouse cursor position at the time of the event */\r\n        public pointerY: number,\r\n        /** The mesh that is currently pointed at (can be null) */\r\n        public meshUnderPointer: Nullable<AbstractMesh>,\r\n        /** the original (browser) event that triggered the ActionEvent */\r\n        public sourceEvent?: any,\r\n        /** additional data for the event */\r\n        public additionalData?: any) {\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a source mesh.\r\n     * @param source The source mesh that triggered the event\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNew(source: AbstractMesh, evt?: Event, additionalData?: any): ActionEvent {\r\n        var scene = source.getScene();\r\n        return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer || source, evt, additionalData);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a source sprite\r\n     * @param source The source sprite that triggered the event\r\n     * @param scene Scene associated with the sprite\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromSprite(source: Sprite, scene: Scene, evt?: Event, additionalData?: any): ActionEvent {\r\n        return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt, additionalData);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a scene. If triggered by a mesh use ActionEvent.CreateNew\r\n     * @param scene the scene where the event occurred\r\n     * @param evt The original (browser) event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromScene(scene: Scene, evt: Event): ActionEvent {\r\n        return new ActionEvent(null, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a primitive\r\n     * @param prim defines the target primitive\r\n     * @param pointerPos defines the pointer position\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromPrimitive(prim: any, pointerPos: Vector2, evt?: Event, additionalData?: any): ActionEvent {\r\n        return new ActionEvent(prim, pointerPos.x, pointerPos.y, null, evt, additionalData);\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}