{"ast":null,"code":"/**\r\n * Class used to store data that will be store in GPU memory\r\n */\nvar Buffer =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   * @param engine the engine\r\n   * @param data the data to use for this buffer\r\n   * @param updatable whether the data is updatable\r\n   * @param stride the stride (optional)\r\n   * @param postponeInternalCreation whether to postpone creating the internal WebGL buffer (optional)\r\n   * @param instanced whether the buffer is instanced (optional)\r\n   * @param useBytes set to true if the stride in in bytes (optional)\r\n   * @param divisor sets an optional divisor for instances (1 by default)\r\n   */\n  function Buffer(engine, data, updatable, stride, postponeInternalCreation, instanced, useBytes, divisor) {\n    if (stride === void 0) {\n      stride = 0;\n    }\n\n    if (postponeInternalCreation === void 0) {\n      postponeInternalCreation = false;\n    }\n\n    if (instanced === void 0) {\n      instanced = false;\n    }\n\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    this._isAlreadyOwned = false;\n\n    if (engine.getScene) {\n      // old versions of VertexBuffer accepted 'mesh' instead of 'engine'\n      this._engine = engine.getScene().getEngine();\n    } else {\n      this._engine = engine;\n    }\n\n    this._updatable = updatable;\n    this._instanced = instanced;\n    this._divisor = divisor || 1;\n    this._data = data;\n    this.byteStride = useBytes ? stride : stride * Float32Array.BYTES_PER_ELEMENT;\n\n    if (!postponeInternalCreation) {\n      // by default\n      this.create();\n    }\n  }\n  /**\r\n   * Create a new VertexBuffer based on the current buffer\r\n   * @param kind defines the vertex buffer kind (position, normal, etc.)\r\n   * @param offset defines offset in the buffer (0 by default)\r\n   * @param size defines the size in floats of attributes (position is 3 for instance)\r\n   * @param stride defines the stride size in floats in the buffer (the offset to apply to reach next value when data is interleaved)\r\n   * @param instanced defines if the vertex buffer contains indexed data\r\n   * @param useBytes defines if the offset and stride are in bytes     *\r\n   * @param divisor sets an optional divisor for instances (1 by default)\r\n   * @returns the new vertex buffer\r\n   */\n\n\n  Buffer.prototype.createVertexBuffer = function (kind, offset, size, stride, instanced, useBytes, divisor) {\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    var byteOffset = useBytes ? offset : offset * Float32Array.BYTES_PER_ELEMENT;\n    var byteStride = stride ? useBytes ? stride : stride * Float32Array.BYTES_PER_ELEMENT : this.byteStride; // a lot of these parameters are ignored as they are overriden by the buffer\n\n    return new VertexBuffer(this._engine, this, kind, this._updatable, true, byteStride, instanced === undefined ? this._instanced : instanced, byteOffset, size, undefined, undefined, true, this._divisor || divisor);\n  }; // Properties\n\n  /**\r\n   * Gets a boolean indicating if the Buffer is updatable?\r\n   * @returns true if the buffer is updatable\r\n   */\n\n\n  Buffer.prototype.isUpdatable = function () {\n    return this._updatable;\n  };\n  /**\r\n   * Gets current buffer's data\r\n   * @returns a DataArray or null\r\n   */\n\n\n  Buffer.prototype.getData = function () {\n    return this._data;\n  };\n  /**\r\n   * Gets underlying native buffer\r\n   * @returns underlying native buffer\r\n   */\n\n\n  Buffer.prototype.getBuffer = function () {\n    return this._buffer;\n  };\n  /**\r\n   * Gets the stride in float32 units (i.e. byte stride / 4).\r\n   * May not be an integer if the byte stride is not divisible by 4.\r\n   * @returns the stride in float32 units\r\n   * @deprecated Please use byteStride instead.\r\n   */\n\n\n  Buffer.prototype.getStrideSize = function () {\n    return this.byteStride / Float32Array.BYTES_PER_ELEMENT;\n  }; // Methods\n\n  /**\r\n   * Store data into the buffer. If the buffer was already used it will be either recreated or updated depending on isUpdatable property\r\n   * @param data defines the data to store\r\n   */\n\n\n  Buffer.prototype.create = function (data) {\n    if (data === void 0) {\n      data = null;\n    }\n\n    if (!data && this._buffer) {\n      return; // nothing to do\n    }\n\n    data = data || this._data;\n\n    if (!data) {\n      return;\n    }\n\n    if (!this._buffer) {\n      // create buffer\n      if (this._updatable) {\n        this._buffer = this._engine.createDynamicVertexBuffer(data);\n        this._data = data;\n      } else {\n        this._buffer = this._engine.createVertexBuffer(data);\n      }\n    } else if (this._updatable) {\n      // update buffer\n      this._engine.updateDynamicVertexBuffer(this._buffer, data);\n\n      this._data = data;\n    }\n  };\n  /** @hidden */\n\n\n  Buffer.prototype._rebuild = function () {\n    this._buffer = null;\n    this.create(this._data);\n  };\n  /**\r\n   * Update current buffer data\r\n   * @param data defines the data to store\r\n   */\n\n\n  Buffer.prototype.update = function (data) {\n    this.create(data);\n  };\n  /**\r\n   * Updates the data directly.\r\n   * @param data the new data\r\n   * @param offset the new offset\r\n   * @param vertexCount the vertex count (optional)\r\n   * @param useBytes set to true if the offset is in bytes\r\n   */\n\n\n  Buffer.prototype.updateDirectly = function (data, offset, vertexCount, useBytes) {\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    if (!this._buffer) {\n      return;\n    }\n\n    if (this._updatable) {\n      // update buffer\n      this._engine.updateDynamicVertexBuffer(this._buffer, data, useBytes ? offset : offset * Float32Array.BYTES_PER_ELEMENT, vertexCount ? vertexCount * this.byteStride : undefined);\n\n      this._data = null;\n    }\n  };\n  /** @hidden */\n\n\n  Buffer.prototype._increaseReferences = function () {\n    if (!this._buffer) {\n      return;\n    }\n\n    if (!this._isAlreadyOwned) {\n      this._isAlreadyOwned = true;\n      return;\n    }\n\n    this._buffer.references++;\n  };\n  /**\r\n   * Release all resources\r\n   */\n\n\n  Buffer.prototype.dispose = function () {\n    if (!this._buffer) {\n      return;\n    }\n\n    if (this._engine._releaseBuffer(this._buffer)) {\n      this._buffer = null;\n    }\n  };\n\n  return Buffer;\n}();\n\nexport { Buffer };\n/**\r\n     * Specialized buffer used to store vertex data\r\n     */\n\nvar VertexBuffer =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   * @param engine the engine\r\n   * @param data the data to use for this vertex buffer\r\n   * @param kind the vertex buffer kind\r\n   * @param updatable whether the data is updatable\r\n   * @param postponeInternalCreation whether to postpone creating the internal WebGL buffer (optional)\r\n   * @param stride the stride (optional)\r\n   * @param instanced whether the buffer is instanced (optional)\r\n   * @param offset the offset of the data (optional)\r\n   * @param size the number of components (optional)\r\n   * @param type the type of the component (optional)\r\n   * @param normalized whether the data contains normalized data (optional)\r\n   * @param useBytes set to true if stride and offset are in bytes (optional)\r\n   * @param divisor defines the instance divisor to use (1 by default)\r\n   * @param takeBufferOwnership defines if the buffer should be released when the vertex buffer is disposed\r\n   */\n  function VertexBuffer(engine, data, kind, updatable, postponeInternalCreation, stride, instanced, offset, size, type, normalized, useBytes, divisor, takeBufferOwnership) {\n    if (normalized === void 0) {\n      normalized = false;\n    }\n\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    if (divisor === void 0) {\n      divisor = 1;\n    }\n\n    if (takeBufferOwnership === void 0) {\n      takeBufferOwnership = false;\n    }\n\n    if (data instanceof Buffer) {\n      this._buffer = data;\n      this._ownsBuffer = takeBufferOwnership;\n\n      if (takeBufferOwnership) {\n        this._buffer._increaseReferences();\n      }\n    } else {\n      this._buffer = new Buffer(engine, data, updatable, stride, postponeInternalCreation, instanced, useBytes);\n      this._ownsBuffer = true;\n    }\n\n    this._kind = kind;\n\n    if (type == undefined) {\n      var data_1 = this.getData();\n      this.type = VertexBuffer.FLOAT;\n\n      if (data_1 instanceof Int8Array) {\n        this.type = VertexBuffer.BYTE;\n      } else if (data_1 instanceof Uint8Array) {\n        this.type = VertexBuffer.UNSIGNED_BYTE;\n      } else if (data_1 instanceof Int16Array) {\n        this.type = VertexBuffer.SHORT;\n      } else if (data_1 instanceof Uint16Array) {\n        this.type = VertexBuffer.UNSIGNED_SHORT;\n      } else if (data_1 instanceof Int32Array) {\n        this.type = VertexBuffer.INT;\n      } else if (data_1 instanceof Uint32Array) {\n        this.type = VertexBuffer.UNSIGNED_INT;\n      }\n    } else {\n      this.type = type;\n    }\n\n    var typeByteLength = VertexBuffer.GetTypeByteLength(this.type);\n\n    if (useBytes) {\n      this._size = size || (stride ? stride / typeByteLength : VertexBuffer.DeduceStride(kind));\n      this.byteStride = stride || this._buffer.byteStride || this._size * typeByteLength;\n      this.byteOffset = offset || 0;\n    } else {\n      this._size = size || stride || VertexBuffer.DeduceStride(kind);\n      this.byteStride = stride ? stride * typeByteLength : this._buffer.byteStride || this._size * typeByteLength;\n      this.byteOffset = (offset || 0) * typeByteLength;\n    }\n\n    this.normalized = normalized;\n    this._instanced = instanced !== undefined ? instanced : false;\n    this._instanceDivisor = instanced ? divisor : 0;\n  }\n\n  Object.defineProperty(VertexBuffer.prototype, \"instanceDivisor\", {\n    /**\r\n     * Gets or sets the instance divisor when in instanced mode\r\n     */\n    get: function () {\n      return this._instanceDivisor;\n    },\n    set: function (value) {\n      this._instanceDivisor = value;\n\n      if (value == 0) {\n        this._instanced = false;\n      } else {\n        this._instanced = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @hidden */\n\n  VertexBuffer.prototype._rebuild = function () {\n    if (!this._buffer) {\n      return;\n    }\n\n    this._buffer._rebuild();\n  };\n  /**\r\n   * Returns the kind of the VertexBuffer (string)\r\n   * @returns a string\r\n   */\n\n\n  VertexBuffer.prototype.getKind = function () {\n    return this._kind;\n  }; // Properties\n\n  /**\r\n   * Gets a boolean indicating if the VertexBuffer is updatable?\r\n   * @returns true if the buffer is updatable\r\n   */\n\n\n  VertexBuffer.prototype.isUpdatable = function () {\n    return this._buffer.isUpdatable();\n  };\n  /**\r\n   * Gets current buffer's data\r\n   * @returns a DataArray or null\r\n   */\n\n\n  VertexBuffer.prototype.getData = function () {\n    return this._buffer.getData();\n  };\n  /**\r\n   * Gets underlying native buffer\r\n   * @returns underlying native buffer\r\n   */\n\n\n  VertexBuffer.prototype.getBuffer = function () {\n    return this._buffer.getBuffer();\n  };\n  /**\r\n   * Gets the stride in float32 units (i.e. byte stride / 4).\r\n   * May not be an integer if the byte stride is not divisible by 4.\r\n   * @returns the stride in float32 units\r\n   * @deprecated Please use byteStride instead.\r\n   */\n\n\n  VertexBuffer.prototype.getStrideSize = function () {\n    return this.byteStride / VertexBuffer.GetTypeByteLength(this.type);\n  };\n  /**\r\n   * Returns the offset as a multiple of the type byte length.\r\n   * @returns the offset in bytes\r\n   * @deprecated Please use byteOffset instead.\r\n   */\n\n\n  VertexBuffer.prototype.getOffset = function () {\n    return this.byteOffset / VertexBuffer.GetTypeByteLength(this.type);\n  };\n  /**\r\n   * Returns the number of components per vertex attribute (integer)\r\n   * @returns the size in float\r\n   */\n\n\n  VertexBuffer.prototype.getSize = function () {\n    return this._size;\n  };\n  /**\r\n   * Gets a boolean indicating is the internal buffer of the VertexBuffer is instanced\r\n   * @returns true if this buffer is instanced\r\n   */\n\n\n  VertexBuffer.prototype.getIsInstanced = function () {\n    return this._instanced;\n  };\n  /**\r\n   * Returns the instancing divisor, zero for non-instanced (integer).\r\n   * @returns a number\r\n   */\n\n\n  VertexBuffer.prototype.getInstanceDivisor = function () {\n    return this._instanceDivisor;\n  }; // Methods\n\n  /**\r\n   * Store data into the buffer. If the buffer was already used it will be either recreated or updated depending on isUpdatable property\r\n   * @param data defines the data to store\r\n   */\n\n\n  VertexBuffer.prototype.create = function (data) {\n    this._buffer.create(data);\n  };\n  /**\r\n   * Updates the underlying buffer according to the passed numeric array or Float32Array.\r\n   * This function will create a new buffer if the current one is not updatable\r\n   * @param data defines the data to store\r\n   */\n\n\n  VertexBuffer.prototype.update = function (data) {\n    this._buffer.update(data);\n  };\n  /**\r\n   * Updates directly the underlying WebGLBuffer according to the passed numeric array or Float32Array.\r\n   * Returns the directly updated WebGLBuffer.\r\n   * @param data the new data\r\n   * @param offset the new offset\r\n   * @param useBytes set to true if the offset is in bytes\r\n   */\n\n\n  VertexBuffer.prototype.updateDirectly = function (data, offset, useBytes) {\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    this._buffer.updateDirectly(data, offset, undefined, useBytes);\n  };\n  /**\r\n   * Disposes the VertexBuffer and the underlying WebGLBuffer.\r\n   */\n\n\n  VertexBuffer.prototype.dispose = function () {\n    if (this._ownsBuffer) {\n      this._buffer.dispose();\n    }\n  };\n  /**\r\n   * Enumerates each value of this vertex buffer as numbers.\r\n   * @param count the number of values to enumerate\r\n   * @param callback the callback function called for each value\r\n   */\n\n\n  VertexBuffer.prototype.forEach = function (count, callback) {\n    VertexBuffer.ForEach(this._buffer.getData(), this.byteOffset, this.byteStride, this._size, this.type, count, this.normalized, callback);\n  };\n  /**\r\n   * Deduces the stride given a kind.\r\n   * @param kind The kind string to deduce\r\n   * @returns The deduced stride\r\n   */\n\n\n  VertexBuffer.DeduceStride = function (kind) {\n    switch (kind) {\n      case VertexBuffer.UVKind:\n      case VertexBuffer.UV2Kind:\n      case VertexBuffer.UV3Kind:\n      case VertexBuffer.UV4Kind:\n      case VertexBuffer.UV5Kind:\n      case VertexBuffer.UV6Kind:\n        return 2;\n\n      case VertexBuffer.NormalKind:\n      case VertexBuffer.PositionKind:\n        return 3;\n\n      case VertexBuffer.ColorKind:\n      case VertexBuffer.MatricesIndicesKind:\n      case VertexBuffer.MatricesIndicesExtraKind:\n      case VertexBuffer.MatricesWeightsKind:\n      case VertexBuffer.MatricesWeightsExtraKind:\n      case VertexBuffer.TangentKind:\n        return 4;\n\n      default:\n        throw new Error(\"Invalid kind '\" + kind + \"'\");\n    }\n  };\n  /**\r\n   * Gets the byte length of the given type.\r\n   * @param type the type\r\n   * @returns the number of bytes\r\n   */\n\n\n  VertexBuffer.GetTypeByteLength = function (type) {\n    switch (type) {\n      case VertexBuffer.BYTE:\n      case VertexBuffer.UNSIGNED_BYTE:\n        return 1;\n\n      case VertexBuffer.SHORT:\n      case VertexBuffer.UNSIGNED_SHORT:\n        return 2;\n\n      case VertexBuffer.INT:\n      case VertexBuffer.UNSIGNED_INT:\n      case VertexBuffer.FLOAT:\n        return 4;\n\n      default:\n        throw new Error(\"Invalid type '\" + type + \"'\");\n    }\n  };\n  /**\r\n   * Enumerates each value of the given parameters as numbers.\r\n   * @param data the data to enumerate\r\n   * @param byteOffset the byte offset of the data\r\n   * @param byteStride the byte stride of the data\r\n   * @param componentCount the number of components per element\r\n   * @param componentType the type of the component\r\n   * @param count the number of values to enumerate\r\n   * @param normalized whether the data is normalized\r\n   * @param callback the callback function called for each value\r\n   */\n\n\n  VertexBuffer.ForEach = function (data, byteOffset, byteStride, componentCount, componentType, count, normalized, callback) {\n    if (data instanceof Array) {\n      var offset = byteOffset / 4;\n      var stride = byteStride / 4;\n\n      for (var index = 0; index < count; index += componentCount) {\n        for (var componentIndex = 0; componentIndex < componentCount; componentIndex++) {\n          callback(data[offset + componentIndex], index + componentIndex);\n        }\n\n        offset += stride;\n      }\n    } else {\n      var dataView = data instanceof ArrayBuffer ? new DataView(data) : new DataView(data.buffer, data.byteOffset, data.byteLength);\n      var componentByteLength = VertexBuffer.GetTypeByteLength(componentType);\n\n      for (var index = 0; index < count; index += componentCount) {\n        var componentByteOffset = byteOffset;\n\n        for (var componentIndex = 0; componentIndex < componentCount; componentIndex++) {\n          var value = VertexBuffer._GetFloatValue(dataView, componentType, componentByteOffset, normalized);\n\n          callback(value, index + componentIndex);\n          componentByteOffset += componentByteLength;\n        }\n\n        byteOffset += byteStride;\n      }\n    }\n  };\n\n  VertexBuffer._GetFloatValue = function (dataView, type, byteOffset, normalized) {\n    switch (type) {\n      case VertexBuffer.BYTE:\n        {\n          var value = dataView.getInt8(byteOffset);\n\n          if (normalized) {\n            value = Math.max(value / 127, -1);\n          }\n\n          return value;\n        }\n\n      case VertexBuffer.UNSIGNED_BYTE:\n        {\n          var value = dataView.getUint8(byteOffset);\n\n          if (normalized) {\n            value = value / 255;\n          }\n\n          return value;\n        }\n\n      case VertexBuffer.SHORT:\n        {\n          var value = dataView.getInt16(byteOffset, true);\n\n          if (normalized) {\n            value = Math.max(value / 32767, -1);\n          }\n\n          return value;\n        }\n\n      case VertexBuffer.UNSIGNED_SHORT:\n        {\n          var value = dataView.getUint16(byteOffset, true);\n\n          if (normalized) {\n            value = value / 65535;\n          }\n\n          return value;\n        }\n\n      case VertexBuffer.INT:\n        {\n          return dataView.getInt32(byteOffset, true);\n        }\n\n      case VertexBuffer.UNSIGNED_INT:\n        {\n          return dataView.getUint32(byteOffset, true);\n        }\n\n      case VertexBuffer.FLOAT:\n        {\n          return dataView.getFloat32(byteOffset, true);\n        }\n\n      default:\n        {\n          throw new Error(\"Invalid component type \" + type);\n        }\n    }\n  };\n  /**\r\n   * The byte type.\r\n   */\n\n\n  VertexBuffer.BYTE = 5120;\n  /**\r\n   * The unsigned byte type.\r\n   */\n\n  VertexBuffer.UNSIGNED_BYTE = 5121;\n  /**\r\n   * The short type.\r\n   */\n\n  VertexBuffer.SHORT = 5122;\n  /**\r\n   * The unsigned short type.\r\n   */\n\n  VertexBuffer.UNSIGNED_SHORT = 5123;\n  /**\r\n   * The integer type.\r\n   */\n\n  VertexBuffer.INT = 5124;\n  /**\r\n   * The unsigned integer type.\r\n   */\n\n  VertexBuffer.UNSIGNED_INT = 5125;\n  /**\r\n   * The float type.\r\n   */\n\n  VertexBuffer.FLOAT = 5126; // Enums\n\n  /**\r\n   * Positions\r\n   */\n\n  VertexBuffer.PositionKind = \"position\";\n  /**\r\n   * Normals\r\n   */\n\n  VertexBuffer.NormalKind = \"normal\";\n  /**\r\n   * Tangents\r\n   */\n\n  VertexBuffer.TangentKind = \"tangent\";\n  /**\r\n   * Texture coordinates\r\n   */\n\n  VertexBuffer.UVKind = \"uv\";\n  /**\r\n   * Texture coordinates 2\r\n   */\n\n  VertexBuffer.UV2Kind = \"uv2\";\n  /**\r\n   * Texture coordinates 3\r\n   */\n\n  VertexBuffer.UV3Kind = \"uv3\";\n  /**\r\n   * Texture coordinates 4\r\n   */\n\n  VertexBuffer.UV4Kind = \"uv4\";\n  /**\r\n   * Texture coordinates 5\r\n   */\n\n  VertexBuffer.UV5Kind = \"uv5\";\n  /**\r\n   * Texture coordinates 6\r\n   */\n\n  VertexBuffer.UV6Kind = \"uv6\";\n  /**\r\n   * Colors\r\n   */\n\n  VertexBuffer.ColorKind = \"color\";\n  /**\r\n   * Matrix indices (for bones)\r\n   */\n\n  VertexBuffer.MatricesIndicesKind = \"matricesIndices\";\n  /**\r\n   * Matrix weights (for bones)\r\n   */\n\n  VertexBuffer.MatricesWeightsKind = \"matricesWeights\";\n  /**\r\n   * Additional matrix indices (for bones)\r\n   */\n\n  VertexBuffer.MatricesIndicesExtraKind = \"matricesIndicesExtra\";\n  /**\r\n   * Additional matrix weights (for bones)\r\n   */\n\n  VertexBuffer.MatricesWeightsExtraKind = \"matricesWeightsExtra\";\n  return VertexBuffer;\n}();\n\nexport { VertexBuffer };","map":{"version":3,"sources":["../../../sourceES6/core/Meshes/buffer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable, DataArray } from \"../types\";\r\nimport { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { DataBuffer } from './dataBuffer';\r\n\r\n/**\r\n * Class used to store data that will be store in GPU memory\r\n */\r\nexport class Buffer {\r\n    private _engine: ThinEngine;\r\n    private _buffer: Nullable<DataBuffer>;\r\n    /** @hidden */\r\n    public _data: Nullable<DataArray>;\r\n    private _updatable: boolean;\r\n    private _instanced: boolean;\r\n    private _divisor: number;\r\n    private _isAlreadyOwned = false;\r\n\r\n    /**\r\n     * Gets the byte stride.\r\n     */\r\n    public readonly byteStride: number;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param engine the engine\r\n     * @param data the data to use for this buffer\r\n     * @param updatable whether the data is updatable\r\n     * @param stride the stride (optional)\r\n     * @param postponeInternalCreation whether to postpone creating the internal WebGL buffer (optional)\r\n     * @param instanced whether the buffer is instanced (optional)\r\n     * @param useBytes set to true if the stride in in bytes (optional)\r\n     * @param divisor sets an optional divisor for instances (1 by default)\r\n     */\r\n    constructor(engine: any, data: DataArray, updatable: boolean, stride = 0, postponeInternalCreation = false, instanced = false, useBytes = false, divisor?: number) {\r\n        if (engine.getScene) { // old versions of VertexBuffer accepted 'mesh' instead of 'engine'\r\n            this._engine = engine.getScene().getEngine();\r\n        }\r\n        else {\r\n            this._engine = engine;\r\n        }\r\n\r\n        this._updatable = updatable;\r\n        this._instanced = instanced;\r\n        this._divisor = divisor || 1;\r\n\r\n        this._data = data;\r\n\r\n        this.byteStride = useBytes ? stride : stride * Float32Array.BYTES_PER_ELEMENT;\r\n\r\n        if (!postponeInternalCreation) { // by default\r\n            this.create();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new VertexBuffer based on the current buffer\r\n     * @param kind defines the vertex buffer kind (position, normal, etc.)\r\n     * @param offset defines offset in the buffer (0 by default)\r\n     * @param size defines the size in floats of attributes (position is 3 for instance)\r\n     * @param stride defines the stride size in floats in the buffer (the offset to apply to reach next value when data is interleaved)\r\n     * @param instanced defines if the vertex buffer contains indexed data\r\n     * @param useBytes defines if the offset and stride are in bytes     *\r\n     * @param divisor sets an optional divisor for instances (1 by default)\r\n     * @returns the new vertex buffer\r\n     */\r\n    public createVertexBuffer(kind: string, offset: number, size: number, stride?: number, instanced?: boolean, useBytes = false, divisor?: number): VertexBuffer {\r\n        const byteOffset = useBytes ? offset : offset * Float32Array.BYTES_PER_ELEMENT;\r\n        const byteStride = stride ? (useBytes ? stride : stride * Float32Array.BYTES_PER_ELEMENT) : this.byteStride;\r\n\r\n        // a lot of these parameters are ignored as they are overriden by the buffer\r\n        return new VertexBuffer(this._engine, this, kind, this._updatable, true, byteStride, instanced === undefined ? this._instanced : instanced, byteOffset, size, undefined, undefined, true, this._divisor || divisor);\r\n    }\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets a boolean indicating if the Buffer is updatable?\r\n     * @returns true if the buffer is updatable\r\n     */\r\n    public isUpdatable(): boolean {\r\n        return this._updatable;\r\n    }\r\n\r\n    /**\r\n     * Gets current buffer's data\r\n     * @returns a DataArray or null\r\n     */\r\n    public getData(): Nullable<DataArray> {\r\n        return this._data;\r\n    }\r\n\r\n    /**\r\n     * Gets underlying native buffer\r\n     * @returns underlying native buffer\r\n     */\r\n    public getBuffer(): Nullable<DataBuffer> {\r\n        return this._buffer;\r\n    }\r\n\r\n    /**\r\n     * Gets the stride in float32 units (i.e. byte stride / 4).\r\n     * May not be an integer if the byte stride is not divisible by 4.\r\n     * @returns the stride in float32 units\r\n     * @deprecated Please use byteStride instead.\r\n     */\r\n    public getStrideSize(): number {\r\n        return this.byteStride / Float32Array.BYTES_PER_ELEMENT;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Store data into the buffer. If the buffer was already used it will be either recreated or updated depending on isUpdatable property\r\n     * @param data defines the data to store\r\n     */\r\n    public create(data: Nullable<DataArray> = null): void {\r\n        if (!data && this._buffer) {\r\n            return; // nothing to do\r\n        }\r\n\r\n        data = data || this._data;\r\n\r\n        if (!data) {\r\n            return;\r\n        }\r\n\r\n        if (!this._buffer) { // create buffer\r\n            if (this._updatable) {\r\n                this._buffer = this._engine.createDynamicVertexBuffer(data);\r\n                this._data = data;\r\n            } else {\r\n                this._buffer = this._engine.createVertexBuffer(data);\r\n            }\r\n        } else if (this._updatable) { // update buffer\r\n            this._engine.updateDynamicVertexBuffer(this._buffer, data);\r\n            this._data = data;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild(): void {\r\n        this._buffer = null;\r\n        this.create(this._data);\r\n    }\r\n\r\n    /**\r\n     * Update current buffer data\r\n     * @param data defines the data to store\r\n     */\r\n    public update(data: DataArray): void {\r\n        this.create(data);\r\n    }\r\n\r\n    /**\r\n     * Updates the data directly.\r\n     * @param data the new data\r\n     * @param offset the new offset\r\n     * @param vertexCount the vertex count (optional)\r\n     * @param useBytes set to true if the offset is in bytes\r\n     */\r\n    public updateDirectly(data: DataArray, offset: number, vertexCount?: number, useBytes: boolean = false): void {\r\n        if (!this._buffer) {\r\n            return;\r\n        }\r\n\r\n        if (this._updatable) { // update buffer\r\n            this._engine.updateDynamicVertexBuffer(this._buffer, data, useBytes ? offset : offset * Float32Array.BYTES_PER_ELEMENT, (vertexCount ? vertexCount * this.byteStride : undefined));\r\n            this._data = null;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _increaseReferences() {\r\n        if (!this._buffer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._isAlreadyOwned) {\r\n            this._isAlreadyOwned = true;\r\n            return;\r\n        }\r\n\r\n        this._buffer.references++;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        if (!this._buffer) {\r\n            return;\r\n        }\r\n        if (this._engine._releaseBuffer(this._buffer)) {\r\n            this._buffer = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n     * Specialized buffer used to store vertex data\r\n     */\r\nexport class VertexBuffer {\r\n    /** @hidden */\r\n    public _buffer: Buffer;\r\n    private _kind: string;\r\n    private _size: number;\r\n    private _ownsBuffer: boolean;\r\n    private _instanced: boolean;\r\n    private _instanceDivisor: number;\r\n\r\n    /**\r\n     * The byte type.\r\n     */\r\n    public static readonly BYTE = 5120;\r\n\r\n    /**\r\n     * The unsigned byte type.\r\n     */\r\n    public static readonly UNSIGNED_BYTE = 5121;\r\n\r\n    /**\r\n     * The short type.\r\n     */\r\n    public static readonly SHORT = 5122;\r\n\r\n    /**\r\n     * The unsigned short type.\r\n     */\r\n    public static readonly UNSIGNED_SHORT = 5123;\r\n\r\n    /**\r\n     * The integer type.\r\n     */\r\n    public static readonly INT = 5124;\r\n\r\n    /**\r\n     * The unsigned integer type.\r\n     */\r\n    public static readonly UNSIGNED_INT = 5125;\r\n\r\n    /**\r\n     * The float type.\r\n     */\r\n    public static readonly FLOAT = 5126;\r\n\r\n    /**\r\n     * Gets or sets the instance divisor when in instanced mode\r\n     */\r\n    public get instanceDivisor(): number {\r\n        return this._instanceDivisor;\r\n    }\r\n\r\n    public set instanceDivisor(value: number) {\r\n        this._instanceDivisor = value;\r\n        if (value == 0) {\r\n            this._instanced = false;\r\n        } else {\r\n            this._instanced = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the byte stride.\r\n     */\r\n    public readonly byteStride: number;\r\n\r\n    /**\r\n     * Gets the byte offset.\r\n     */\r\n    public readonly byteOffset: number;\r\n\r\n    /**\r\n     * Gets whether integer data values should be normalized into a certain range when being casted to a float.\r\n     */\r\n    public readonly normalized: boolean;\r\n\r\n    /**\r\n     * Gets the data type of each component in the array.\r\n     */\r\n    public readonly type: number;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param engine the engine\r\n     * @param data the data to use for this vertex buffer\r\n     * @param kind the vertex buffer kind\r\n     * @param updatable whether the data is updatable\r\n     * @param postponeInternalCreation whether to postpone creating the internal WebGL buffer (optional)\r\n     * @param stride the stride (optional)\r\n     * @param instanced whether the buffer is instanced (optional)\r\n     * @param offset the offset of the data (optional)\r\n     * @param size the number of components (optional)\r\n     * @param type the type of the component (optional)\r\n     * @param normalized whether the data contains normalized data (optional)\r\n     * @param useBytes set to true if stride and offset are in bytes (optional)\r\n     * @param divisor defines the instance divisor to use (1 by default)\r\n     * @param takeBufferOwnership defines if the buffer should be released when the vertex buffer is disposed\r\n     */\r\n    constructor(engine: any, data: DataArray | Buffer, kind: string, updatable: boolean, postponeInternalCreation?: boolean, stride?: number,\r\n        instanced?: boolean, offset?: number, size?: number, type?: number, normalized = false, useBytes = false, divisor = 1, takeBufferOwnership = false) {\r\n        if (data instanceof Buffer) {\r\n            this._buffer = data;\r\n            this._ownsBuffer = takeBufferOwnership;\r\n\r\n            if (takeBufferOwnership) {\r\n                this._buffer._increaseReferences();\r\n            }\r\n        } else {\r\n            this._buffer = new Buffer(engine, data, updatable, stride, postponeInternalCreation, instanced, useBytes);\r\n            this._ownsBuffer = true;\r\n        }\r\n\r\n        this._kind = kind;\r\n\r\n        if (type == undefined) {\r\n            const data = this.getData();\r\n            this.type = VertexBuffer.FLOAT;\r\n            if (data instanceof Int8Array) { this.type = VertexBuffer.BYTE; }\r\n            else if (data instanceof Uint8Array) { this.type = VertexBuffer.UNSIGNED_BYTE; }\r\n            else if (data instanceof Int16Array) { this.type = VertexBuffer.SHORT; }\r\n            else if (data instanceof Uint16Array) { this.type = VertexBuffer.UNSIGNED_SHORT; }\r\n            else if (data instanceof Int32Array) { this.type = VertexBuffer.INT; }\r\n            else if (data instanceof Uint32Array) { this.type = VertexBuffer.UNSIGNED_INT; }\r\n        }\r\n        else {\r\n            this.type = type;\r\n        }\r\n\r\n        const typeByteLength = VertexBuffer.GetTypeByteLength(this.type);\r\n\r\n        if (useBytes) {\r\n            this._size = size || (stride ? (stride / typeByteLength) : VertexBuffer.DeduceStride(kind));\r\n            this.byteStride = stride || this._buffer.byteStride || (this._size * typeByteLength);\r\n            this.byteOffset = offset || 0;\r\n        }\r\n        else {\r\n            this._size = size || stride || VertexBuffer.DeduceStride(kind);\r\n            this.byteStride = stride ? (stride * typeByteLength) : (this._buffer.byteStride || (this._size * typeByteLength));\r\n            this.byteOffset = (offset || 0) * typeByteLength;\r\n        }\r\n\r\n        this.normalized = normalized;\r\n\r\n        this._instanced = instanced !== undefined ? instanced : false;\r\n        this._instanceDivisor = instanced ? divisor : 0;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild(): void {\r\n        if (!this._buffer) {\r\n            return;\r\n        }\r\n\r\n        this._buffer._rebuild();\r\n    }\r\n\r\n    /**\r\n     * Returns the kind of the VertexBuffer (string)\r\n     * @returns a string\r\n     */\r\n    public getKind(): string {\r\n        return this._kind;\r\n    }\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets a boolean indicating if the VertexBuffer is updatable?\r\n     * @returns true if the buffer is updatable\r\n     */\r\n    public isUpdatable(): boolean {\r\n        return this._buffer.isUpdatable();\r\n    }\r\n\r\n    /**\r\n     * Gets current buffer's data\r\n     * @returns a DataArray or null\r\n     */\r\n    public getData(): Nullable<DataArray> {\r\n        return this._buffer.getData();\r\n    }\r\n\r\n    /**\r\n     * Gets underlying native buffer\r\n     * @returns underlying native buffer\r\n     */\r\n    public getBuffer(): Nullable<DataBuffer> {\r\n        return this._buffer.getBuffer();\r\n    }\r\n\r\n    /**\r\n     * Gets the stride in float32 units (i.e. byte stride / 4).\r\n     * May not be an integer if the byte stride is not divisible by 4.\r\n     * @returns the stride in float32 units\r\n     * @deprecated Please use byteStride instead.\r\n     */\r\n    public getStrideSize(): number {\r\n        return this.byteStride / VertexBuffer.GetTypeByteLength(this.type);\r\n    }\r\n\r\n    /**\r\n     * Returns the offset as a multiple of the type byte length.\r\n     * @returns the offset in bytes\r\n     * @deprecated Please use byteOffset instead.\r\n     */\r\n    public getOffset(): number {\r\n        return this.byteOffset / VertexBuffer.GetTypeByteLength(this.type);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of components per vertex attribute (integer)\r\n     * @returns the size in float\r\n     */\r\n    public getSize(): number {\r\n        return this._size;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating is the internal buffer of the VertexBuffer is instanced\r\n     * @returns true if this buffer is instanced\r\n     */\r\n    public getIsInstanced(): boolean {\r\n        return this._instanced;\r\n    }\r\n\r\n    /**\r\n     * Returns the instancing divisor, zero for non-instanced (integer).\r\n     * @returns a number\r\n     */\r\n    public getInstanceDivisor(): number {\r\n        return this._instanceDivisor;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Store data into the buffer. If the buffer was already used it will be either recreated or updated depending on isUpdatable property\r\n     * @param data defines the data to store\r\n     */\r\n    public create(data?: DataArray): void {\r\n        this._buffer.create(data);\r\n    }\r\n\r\n    /**\r\n     * Updates the underlying buffer according to the passed numeric array or Float32Array.\r\n     * This function will create a new buffer if the current one is not updatable\r\n     * @param data defines the data to store\r\n     */\r\n    public update(data: DataArray): void {\r\n        this._buffer.update(data);\r\n    }\r\n\r\n    /**\r\n     * Updates directly the underlying WebGLBuffer according to the passed numeric array or Float32Array.\r\n     * Returns the directly updated WebGLBuffer.\r\n     * @param data the new data\r\n     * @param offset the new offset\r\n     * @param useBytes set to true if the offset is in bytes\r\n     */\r\n    public updateDirectly(data: DataArray, offset: number, useBytes: boolean = false): void {\r\n        this._buffer.updateDirectly(data, offset, undefined, useBytes);\r\n    }\r\n\r\n    /**\r\n     * Disposes the VertexBuffer and the underlying WebGLBuffer.\r\n     */\r\n    public dispose(): void {\r\n        if (this._ownsBuffer) {\r\n            this._buffer.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enumerates each value of this vertex buffer as numbers.\r\n     * @param count the number of values to enumerate\r\n     * @param callback the callback function called for each value\r\n     */\r\n    public forEach(count: number, callback: (value: number, index: number) => void): void {\r\n        VertexBuffer.ForEach(this._buffer.getData()!, this.byteOffset, this.byteStride, this._size, this.type, count, this.normalized, callback);\r\n    }\r\n\r\n    // Enums\r\n    /**\r\n     * Positions\r\n     */\r\n    public static readonly PositionKind = \"position\";\r\n    /**\r\n     * Normals\r\n     */\r\n    public static readonly NormalKind = \"normal\";\r\n    /**\r\n     * Tangents\r\n     */\r\n    public static readonly TangentKind = \"tangent\";\r\n    /**\r\n     * Texture coordinates\r\n     */\r\n    public static readonly UVKind = \"uv\";\r\n    /**\r\n     * Texture coordinates 2\r\n     */\r\n    public static readonly UV2Kind = \"uv2\";\r\n    /**\r\n     * Texture coordinates 3\r\n     */\r\n    public static readonly UV3Kind = \"uv3\";\r\n    /**\r\n     * Texture coordinates 4\r\n     */\r\n    public static readonly UV4Kind = \"uv4\";\r\n    /**\r\n     * Texture coordinates 5\r\n     */\r\n    public static readonly UV5Kind = \"uv5\";\r\n    /**\r\n     * Texture coordinates 6\r\n     */\r\n    public static readonly UV6Kind = \"uv6\";\r\n    /**\r\n     * Colors\r\n     */\r\n    public static readonly ColorKind = \"color\";\r\n    /**\r\n     * Matrix indices (for bones)\r\n     */\r\n    public static readonly MatricesIndicesKind = \"matricesIndices\";\r\n    /**\r\n     * Matrix weights (for bones)\r\n     */\r\n    public static readonly MatricesWeightsKind = \"matricesWeights\";\r\n    /**\r\n     * Additional matrix indices (for bones)\r\n     */\r\n    public static readonly MatricesIndicesExtraKind = \"matricesIndicesExtra\";\r\n    /**\r\n     * Additional matrix weights (for bones)\r\n     */\r\n    public static readonly MatricesWeightsExtraKind = \"matricesWeightsExtra\";\r\n\r\n    /**\r\n     * Deduces the stride given a kind.\r\n     * @param kind The kind string to deduce\r\n     * @returns The deduced stride\r\n     */\r\n    public static DeduceStride(kind: string): number {\r\n        switch (kind) {\r\n            case VertexBuffer.UVKind:\r\n            case VertexBuffer.UV2Kind:\r\n            case VertexBuffer.UV3Kind:\r\n            case VertexBuffer.UV4Kind:\r\n            case VertexBuffer.UV5Kind:\r\n            case VertexBuffer.UV6Kind:\r\n                return 2;\r\n            case VertexBuffer.NormalKind:\r\n            case VertexBuffer.PositionKind:\r\n                return 3;\r\n            case VertexBuffer.ColorKind:\r\n            case VertexBuffer.MatricesIndicesKind:\r\n            case VertexBuffer.MatricesIndicesExtraKind:\r\n            case VertexBuffer.MatricesWeightsKind:\r\n            case VertexBuffer.MatricesWeightsExtraKind:\r\n            case VertexBuffer.TangentKind:\r\n                return 4;\r\n            default:\r\n                throw new Error(\"Invalid kind '\" + kind + \"'\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the byte length of the given type.\r\n     * @param type the type\r\n     * @returns the number of bytes\r\n     */\r\n    public static GetTypeByteLength(type: number): number {\r\n        switch (type) {\r\n            case VertexBuffer.BYTE:\r\n            case VertexBuffer.UNSIGNED_BYTE:\r\n                return 1;\r\n            case VertexBuffer.SHORT:\r\n            case VertexBuffer.UNSIGNED_SHORT:\r\n                return 2;\r\n            case VertexBuffer.INT:\r\n            case VertexBuffer.UNSIGNED_INT:\r\n            case VertexBuffer.FLOAT:\r\n                return 4;\r\n            default:\r\n                throw new Error(`Invalid type '${type}'`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enumerates each value of the given parameters as numbers.\r\n     * @param data the data to enumerate\r\n     * @param byteOffset the byte offset of the data\r\n     * @param byteStride the byte stride of the data\r\n     * @param componentCount the number of components per element\r\n     * @param componentType the type of the component\r\n     * @param count the number of values to enumerate\r\n     * @param normalized whether the data is normalized\r\n     * @param callback the callback function called for each value\r\n     */\r\n    public static ForEach(data: DataArray, byteOffset: number, byteStride: number, componentCount: number, componentType: number, count: number, normalized: boolean, callback: (value: number, index: number) => void): void {\r\n        if (data instanceof Array) {\r\n            let offset = byteOffset / 4;\r\n            const stride = byteStride / 4;\r\n            for (let index = 0; index < count; index += componentCount) {\r\n                for (let componentIndex = 0; componentIndex < componentCount; componentIndex++) {\r\n                    callback(data[offset + componentIndex], index + componentIndex);\r\n                }\r\n                offset += stride;\r\n            }\r\n        }\r\n        else {\r\n            const dataView = data instanceof ArrayBuffer ? new DataView(data) : new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n            const componentByteLength = VertexBuffer.GetTypeByteLength(componentType);\r\n            for (let index = 0; index < count; index += componentCount) {\r\n                let componentByteOffset = byteOffset;\r\n                for (let componentIndex = 0; componentIndex < componentCount; componentIndex++) {\r\n                    const value = VertexBuffer._GetFloatValue(dataView, componentType, componentByteOffset, normalized);\r\n                    callback(value, index + componentIndex);\r\n                    componentByteOffset += componentByteLength;\r\n                }\r\n                byteOffset += byteStride;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _GetFloatValue(dataView: DataView, type: number, byteOffset: number, normalized: boolean): number {\r\n        switch (type) {\r\n            case VertexBuffer.BYTE: {\r\n                let value = dataView.getInt8(byteOffset);\r\n                if (normalized) {\r\n                    value = Math.max(value / 127, -1);\r\n                }\r\n                return value;\r\n            }\r\n            case VertexBuffer.UNSIGNED_BYTE: {\r\n                let value = dataView.getUint8(byteOffset);\r\n                if (normalized) {\r\n                    value = value / 255;\r\n                }\r\n                return value;\r\n            }\r\n            case VertexBuffer.SHORT: {\r\n                let value = dataView.getInt16(byteOffset, true);\r\n                if (normalized) {\r\n                    value = Math.max(value / 32767, -1);\r\n                }\r\n                return value;\r\n            }\r\n            case VertexBuffer.UNSIGNED_SHORT: {\r\n                let value = dataView.getUint16(byteOffset, true);\r\n                if (normalized) {\r\n                    value = value / 65535;\r\n                }\r\n                return value;\r\n            }\r\n            case VertexBuffer.INT: {\r\n                return dataView.getInt32(byteOffset, true);\r\n            }\r\n            case VertexBuffer.UNSIGNED_INT: {\r\n                return dataView.getUint32(byteOffset, true);\r\n            }\r\n            case VertexBuffer.FLOAT: {\r\n                return dataView.getFloat32(byteOffset, true);\r\n            }\r\n            default: {\r\n                throw new Error(`Invalid component type ${type}`);\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}