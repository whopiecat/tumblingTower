{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera\";\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Node } from \"../../node\"; // Side effect import to define the stereoscopic mode.\n\nimport \"../RigModes/vrRigMode\";\nNode.AddNodeConstructor(\"VRDeviceOrientationFreeCamera\", function (name, scene) {\n  return function () {\n    return new VRDeviceOrientationFreeCamera(name, Vector3.Zero(), scene);\n  };\n});\n/**\r\n * Camera used to simulate VR rendering (based on FreeCamera)\r\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\r\n */\n\nvar VRDeviceOrientationFreeCamera =\n/** @class */\nfunction (_super) {\n  __extends(VRDeviceOrientationFreeCamera, _super);\n  /**\r\n   * Creates a new VRDeviceOrientationFreeCamera\r\n   * @param name defines camera name\r\n   * @param position defines the start position of the camera\r\n   * @param scene defines the scene the camera belongs to\r\n   * @param compensateDistortion defines if the camera needs to compensate the lens distorsion\r\n   * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n   */\n\n\n  function VRDeviceOrientationFreeCamera(name, position, scene, compensateDistortion, vrCameraMetrics) {\n    if (compensateDistortion === void 0) {\n      compensateDistortion = true;\n    }\n\n    if (vrCameraMetrics === void 0) {\n      vrCameraMetrics = VRCameraMetrics.GetDefault();\n    }\n\n    var _this = _super.call(this, name, position, scene) || this;\n\n    vrCameraMetrics.compensateDistortion = compensateDistortion;\n\n    _this.setCameraRigMode(Camera.RIG_MODE_VR, {\n      vrCameraMetrics: vrCameraMetrics\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets camera class name\r\n   * @returns VRDeviceOrientationFreeCamera\r\n   */\n\n\n  VRDeviceOrientationFreeCamera.prototype.getClassName = function () {\n    return \"VRDeviceOrientationFreeCamera\";\n  };\n\n  return VRDeviceOrientationFreeCamera;\n}(DeviceOrientationCamera);\n\nexport { VRDeviceOrientationFreeCamera };","map":{"version":3,"sources":["../../../../sourceES6/core/Cameras/VR/vrDeviceOrientationFreeCamera.ts"],"names":[],"mappings":";AAAA,SAAS,MAAT,QAAuB,sBAAvB;AACA,SAAS,uBAAT,QAAwC,uCAAxC;AACA,SAAS,eAAT,QAAgC,mBAAhC;AAEA,SAAS,OAAT,QAAwB,yBAAxB;AACA,SAAS,IAAT,QAAqB,YAArB,C,CAEA;;AACA,OAAO,uBAAP;AAEA,IAAI,CAAC,kBAAL,CAAwB,+BAAxB,EAAyD,UAAC,IAAD,EAAO,KAAP,EAAY;AACjE,SAAO,YAAA;AAAM,WAAA,IAAI,6BAAJ,CAAkC,IAAlC,EAAwC,OAAO,CAAC,IAAR,EAAxC,EAAA,KAAA,CAAA;AAA8D,GAA3E;AACH,CAFD;AAIA;;;;;AAIA,IAAA,6BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmD,EAAA,SAAA,CAAA,6BAAA,EAAA,MAAA,CAAA;AAE/C;;;;;;;;;;AAQA,WAAA,6BAAA,CAAY,IAAZ,EAA0B,QAA1B,EAA6C,KAA7C,EAA2D,oBAA3D,EAAwF,eAAxF,EAAuJ;AAA5F,QAAA,oBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,oBAAA,GAAA,IAAA;AAA2B;;AAAE,QAAA,eAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,eAAA,GAAmC,eAAe,CAAC,UAAhB,EAAnC;AAA+D;;AAAvJ,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,QAAZ,EAAsB,KAAtB,KAA4B,IADhC;;AAGI,IAAA,eAAe,CAAC,oBAAhB,GAAuC,oBAAvC;;AACA,IAAA,KAAI,CAAC,gBAAL,CAAsB,MAAM,CAAC,WAA7B,EAA0C;AAAE,MAAA,eAAe,EAAE;AAAnB,KAA1C;;;AACH;AAED;;;;;;AAIO,EAAA,6BAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACI,WAAO,+BAAP;AACH,GAFM;;AAGX,SAAA,6BAAA;AAAC,CAxBD,CAAmD,uBAAnD,CAAA","sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera\";\r\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\r\nimport { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\n\r\n// Side effect import to define the stereoscopic mode.\r\nimport \"../RigModes/vrRigMode\";\r\n\r\nNode.AddNodeConstructor(\"VRDeviceOrientationFreeCamera\", (name, scene) => {\r\n    return () => new VRDeviceOrientationFreeCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on FreeCamera)\r\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\r\n */\r\nexport class VRDeviceOrientationFreeCamera extends DeviceOrientationCamera {\r\n\r\n    /**\r\n     * Creates a new VRDeviceOrientationFreeCamera\r\n     * @param name defines camera name\r\n     * @param position defines the start position of the camera\r\n     * @param scene defines the scene the camera belongs to\r\n     * @param compensateDistortion defines if the camera needs to compensate the lens distorsion\r\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n     */\r\n    constructor(name: string, position: Vector3, scene: Scene, compensateDistortion = true, vrCameraMetrics: VRCameraMetrics = VRCameraMetrics.GetDefault()) {\r\n        super(name, position, scene);\r\n\r\n        vrCameraMetrics.compensateDistortion = compensateDistortion;\r\n        this.setCameraRigMode(Camera.RIG_MODE_VR, { vrCameraMetrics: vrCameraMetrics });\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns VRDeviceOrientationFreeCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDeviceOrientationFreeCamera\";\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}