{"ast":null,"code":"import { Scene } from \"../scene\";\nimport { DepthRenderer } from \"./depthRenderer\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\n\nScene.prototype.enableDepthRenderer = function (camera, storeNonLinearDepth, force32bitsFloat) {\n  if (storeNonLinearDepth === void 0) {\n    storeNonLinearDepth = false;\n  }\n\n  if (force32bitsFloat === void 0) {\n    force32bitsFloat = false;\n  }\n\n  camera = camera || this.activeCamera;\n\n  if (!camera) {\n    throw \"No camera available to enable depth renderer\";\n  }\n\n  if (!this._depthRenderer) {\n    this._depthRenderer = {};\n  }\n\n  if (!this._depthRenderer[camera.id]) {\n    var supportFullfloat = !!this.getEngine().getCaps().textureFloatRender;\n    var textureType = 0;\n\n    if (this.getEngine().getCaps().textureHalfFloatRender && (!force32bitsFloat || !supportFullfloat)) {\n      textureType = 2;\n    } else if (supportFullfloat) {\n      textureType = 1;\n    } else {\n      textureType = 0;\n    }\n\n    this._depthRenderer[camera.id] = new DepthRenderer(this, textureType, camera, storeNonLinearDepth);\n  }\n\n  return this._depthRenderer[camera.id];\n};\n\nScene.prototype.disableDepthRenderer = function (camera) {\n  camera = camera || this.activeCamera;\n\n  if (!camera || !this._depthRenderer || !this._depthRenderer[camera.id]) {\n    return;\n  }\n\n  this._depthRenderer[camera.id].dispose();\n\n  delete this._depthRenderer[camera.id];\n};\n/**\r\n * Defines the Depth Renderer scene component responsible to manage a depth buffer useful\r\n * in several rendering techniques.\r\n */\n\n\nvar DepthRendererSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function DepthRendererSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_DEPTHRENDERER;\n    this.scene = scene;\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  DepthRendererSceneComponent.prototype.register = function () {\n    this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_DEPTHRENDERER, this, this._gatherRenderTargets);\n\n    this.scene._gatherActiveCameraRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER, this, this._gatherActiveCameraRenderTargets);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  DepthRendererSceneComponent.prototype.rebuild = function () {// Nothing to do for this component\n  };\n  /**\r\n   * Disposes the component and the associated ressources\r\n   */\n\n\n  DepthRendererSceneComponent.prototype.dispose = function () {\n    for (var key in this.scene._depthRenderer) {\n      this.scene._depthRenderer[key].dispose();\n    }\n  };\n\n  DepthRendererSceneComponent.prototype._gatherRenderTargets = function (renderTargets) {\n    if (this.scene._depthRenderer) {\n      for (var key in this.scene._depthRenderer) {\n        var depthRenderer = this.scene._depthRenderer[key];\n\n        if (depthRenderer.enabled && !depthRenderer.useOnlyInActiveCamera) {\n          renderTargets.push(depthRenderer.getDepthMap());\n        }\n      }\n    }\n  };\n\n  DepthRendererSceneComponent.prototype._gatherActiveCameraRenderTargets = function (renderTargets) {\n    if (this.scene._depthRenderer) {\n      for (var key in this.scene._depthRenderer) {\n        var depthRenderer = this.scene._depthRenderer[key];\n\n        if (depthRenderer.enabled && depthRenderer.useOnlyInActiveCamera && this.scene.activeCamera.id === key) {\n          renderTargets.push(depthRenderer.getDepthMap());\n        }\n      }\n    }\n  };\n\n  return DepthRendererSceneComponent;\n}();\n\nexport { DepthRendererSceneComponent };\n\nDepthRenderer._SceneComponentInitialization = function (scene) {\n  // Register the G Buffer component to the scene.\n  var component = scene._getComponent(SceneComponentConstants.NAME_DEPTHRENDERER);\n\n  if (!component) {\n    component = new DepthRendererSceneComponent(scene);\n\n    scene._addComponent(component);\n  }\n};","map":{"version":3,"sources":["../../../sourceES6/core/Rendering/depthRendererSceneComponent.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { SmartArrayNoDuplicate } from \"../Misc/smartArray\";\r\nimport { DepthRenderer } from \"./depthRenderer\";\r\nimport { Camera } from \"../Cameras/camera\";\r\n\r\nimport { ISceneComponent, SceneComponentConstants } from \"../sceneComponent\";\r\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @hidden (Backing field) */\r\n        _depthRenderer: { [id: string]: DepthRenderer };\r\n\r\n        /**\r\n         * Creates a depth renderer a given camera which contains a depth map which can be used for post processing.\r\n         * @param camera The camera to create the depth renderer on (default: scene's active camera)\r\n         * @param storeNonLinearDepth Defines whether the depth is stored linearly like in Babylon Shadows or directly like glFragCoord.z\r\n         * @param force32bitsFloat Forces 32 bits float when supported (else 16 bits float is prioritized over 32 bits float if supported)\r\n         * @returns the created depth renderer\r\n         */\r\n        enableDepthRenderer(camera?: Nullable<Camera>, storeNonLinearDepth?: boolean, force32bitsFloat?: boolean): DepthRenderer;\r\n\r\n        /**\r\n         * Disables a depth renderer for a given camera\r\n         * @param camera The camera to disable the depth renderer on (default: scene's active camera)\r\n         */\r\n        disableDepthRenderer(camera?: Nullable<Camera>): void;\r\n    }\r\n}\r\n\r\nScene.prototype.enableDepthRenderer = function(camera?: Nullable<Camera>, storeNonLinearDepth = false, force32bitsFloat: boolean = false): DepthRenderer {\r\n    camera = camera || this.activeCamera;\r\n    if (!camera) {\r\n        throw \"No camera available to enable depth renderer\";\r\n    }\r\n    if (!this._depthRenderer) {\r\n        this._depthRenderer = {};\r\n    }\r\n    if (!this._depthRenderer[camera.id]) {\r\n        const supportFullfloat = !!this.getEngine().getCaps().textureFloatRender;\r\n        let textureType = 0;\r\n        if (this.getEngine().getCaps().textureHalfFloatRender && (!force32bitsFloat || !supportFullfloat)) {\r\n            textureType = 2;\r\n        }\r\n        else if (supportFullfloat) {\r\n            textureType = 1;\r\n        } else {\r\n            textureType = 0;\r\n        }\r\n        this._depthRenderer[camera.id] = new DepthRenderer(this, textureType, camera, storeNonLinearDepth);\r\n    }\r\n\r\n    return this._depthRenderer[camera.id];\r\n};\r\n\r\nScene.prototype.disableDepthRenderer = function(camera?: Nullable<Camera>): void {\r\n    camera = camera || this.activeCamera;\r\n    if (!camera || !this._depthRenderer || !this._depthRenderer[camera.id]) {\r\n        return;\r\n    }\r\n\r\n    this._depthRenderer[camera.id].dispose();\r\n    delete this._depthRenderer[camera.id];\r\n};\r\n\r\n/**\r\n * Defines the Depth Renderer scene component responsible to manage a depth buffer useful\r\n * in several rendering techniques.\r\n */\r\nexport class DepthRendererSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_DEPTHRENDERER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_DEPTHRENDERER, this, this._gatherRenderTargets);\r\n        this.scene._gatherActiveCameraRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER, this, this._gatherActiveCameraRenderTargets);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated ressources\r\n     */\r\n    public dispose(): void {\r\n        for (var key in this.scene._depthRenderer) {\r\n            this.scene._depthRenderer[key].dispose();\r\n        }\r\n    }\r\n\r\n    private _gatherRenderTargets(renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>): void {\r\n        if (this.scene._depthRenderer) {\r\n            for (var key in this.scene._depthRenderer) {\r\n                let depthRenderer = this.scene._depthRenderer[key];\r\n                if (depthRenderer.enabled && !depthRenderer.useOnlyInActiveCamera) {\r\n                    renderTargets.push(depthRenderer.getDepthMap());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _gatherActiveCameraRenderTargets(renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>): void {\r\n        if (this.scene._depthRenderer) {\r\n            for (var key in this.scene._depthRenderer) {\r\n                let depthRenderer = this.scene._depthRenderer[key];\r\n                if (depthRenderer.enabled && depthRenderer.useOnlyInActiveCamera && this.scene.activeCamera!.id === key) {\r\n                    renderTargets.push(depthRenderer.getDepthMap());\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nDepthRenderer._SceneComponentInitialization = (scene: Scene) => {\r\n    // Register the G Buffer component to the scene.\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_DEPTHRENDERER) as DepthRendererSceneComponent;\r\n    if (!component) {\r\n        component = new DepthRendererSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}