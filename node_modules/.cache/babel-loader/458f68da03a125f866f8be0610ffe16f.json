{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\r\n */\n\nvar SmartArray =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a Smart Array.\r\n   * @param capacity defines the default capacity of the array.\r\n   */\n  function SmartArray(capacity) {\n    /**\r\n     * The active length of the array.\r\n     */\n    this.length = 0;\n    this.data = new Array(capacity);\n    this._id = SmartArray._GlobalId++;\n  }\n  /**\r\n   * Pushes a value at the end of the active data.\r\n   * @param value defines the object to push in the array.\r\n   */\n\n\n  SmartArray.prototype.push = function (value) {\n    this.data[this.length++] = value;\n\n    if (this.length > this.data.length) {\n      this.data.length *= 2;\n    }\n  };\n  /**\r\n   * Iterates over the active data and apply the lambda to them.\r\n   * @param func defines the action to apply on each value.\r\n   */\n\n\n  SmartArray.prototype.forEach = function (func) {\n    for (var index = 0; index < this.length; index++) {\n      func(this.data[index]);\n    }\n  };\n  /**\r\n   * Sorts the full sets of data.\r\n   * @param compareFn defines the comparison function to apply.\r\n   */\n\n\n  SmartArray.prototype.sort = function (compareFn) {\n    this.data.sort(compareFn);\n  };\n  /**\r\n   * Resets the active data to an empty array.\r\n   */\n\n\n  SmartArray.prototype.reset = function () {\n    this.length = 0;\n  };\n  /**\r\n   * Releases all the data from the array as well as the array.\r\n   */\n\n\n  SmartArray.prototype.dispose = function () {\n    this.reset();\n\n    if (this.data) {\n      this.data.length = 0;\n      this.data = [];\n    }\n  };\n  /**\r\n   * Concats the active data with a given array.\r\n   * @param array defines the data to concatenate with.\r\n   */\n\n\n  SmartArray.prototype.concat = function (array) {\n    if (array.length === 0) {\n      return;\n    }\n\n    if (this.length + array.length > this.data.length) {\n      this.data.length = (this.length + array.length) * 2;\n    }\n\n    for (var index = 0; index < array.length; index++) {\n      this.data[this.length++] = (array.data || array)[index];\n    }\n  };\n  /**\r\n   * Returns the position of a value in the active data.\r\n   * @param value defines the value to find the index for\r\n   * @returns the index if found in the active data otherwise -1\r\n   */\n\n\n  SmartArray.prototype.indexOf = function (value) {\n    var position = this.data.indexOf(value);\n\n    if (position >= this.length) {\n      return -1;\n    }\n\n    return position;\n  };\n  /**\r\n   * Returns whether an element is part of the active data.\r\n   * @param value defines the value to look for\r\n   * @returns true if found in the active data otherwise false\r\n   */\n\n\n  SmartArray.prototype.contains = function (value) {\n    return this.indexOf(value) !== -1;\n  }; // Statics\n\n\n  SmartArray._GlobalId = 0;\n  return SmartArray;\n}();\n\nexport { SmartArray };\n/**\r\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\r\n * The data in this array can only be present once\r\n */\n\nvar SmartArrayNoDuplicate =\n/** @class */\nfunction (_super) {\n  __extends(SmartArrayNoDuplicate, _super);\n\n  function SmartArrayNoDuplicate() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._duplicateId = 0;\n    return _this;\n  }\n  /**\r\n   * Pushes a value at the end of the active data.\r\n   * THIS DOES NOT PREVENT DUPPLICATE DATA\r\n   * @param value defines the object to push in the array.\r\n   */\n\n\n  SmartArrayNoDuplicate.prototype.push = function (value) {\n    _super.prototype.push.call(this, value);\n\n    if (!value.__smartArrayFlags) {\n      value.__smartArrayFlags = {};\n    }\n\n    value.__smartArrayFlags[this._id] = this._duplicateId;\n  };\n  /**\r\n   * Pushes a value at the end of the active data.\r\n   * If the data is already present, it won t be added again\r\n   * @param value defines the object to push in the array.\r\n   * @returns true if added false if it was already present\r\n   */\n\n\n  SmartArrayNoDuplicate.prototype.pushNoDuplicate = function (value) {\n    if (value.__smartArrayFlags && value.__smartArrayFlags[this._id] === this._duplicateId) {\n      return false;\n    }\n\n    this.push(value);\n    return true;\n  };\n  /**\r\n   * Resets the active data to an empty array.\r\n   */\n\n\n  SmartArrayNoDuplicate.prototype.reset = function () {\n    _super.prototype.reset.call(this);\n\n    this._duplicateId++;\n  };\n  /**\r\n   * Concats the active data with a given array.\r\n   * This ensures no dupplicate will be present in the result.\r\n   * @param array defines the data to concatenate with.\r\n   */\n\n\n  SmartArrayNoDuplicate.prototype.concatWithNoDuplicate = function (array) {\n    if (array.length === 0) {\n      return;\n    }\n\n    if (this.length + array.length > this.data.length) {\n      this.data.length = (this.length + array.length) * 2;\n    }\n\n    for (var index = 0; index < array.length; index++) {\n      var item = (array.data || array)[index];\n      this.pushNoDuplicate(item);\n    }\n  };\n\n  return SmartArrayNoDuplicate;\n}(SmartArray);\n\nexport { SmartArrayNoDuplicate };","map":{"version":3,"sources":["../../../sourceES6/core/Misc/smartArray.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Defines an array and its length.\r\n * It can be helpfull to group result from both Arrays and smart arrays in one structure.\r\n */\r\nexport interface ISmartArrayLike<T> {\r\n    /**\r\n     * The data of the array.\r\n     */\r\n    data: Array<T>;\r\n    /**\r\n     * The active length of the array.\r\n     */\r\n    length: number;\r\n}\r\n\r\n/**\r\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\r\n */\r\nexport class SmartArray<T> implements ISmartArrayLike<T> {\r\n    /**\r\n     * The full set of data from the array.\r\n     */\r\n    public data: Array<T>;\r\n\r\n    /**\r\n     * The active length of the array.\r\n     */\r\n    public length: number = 0;\r\n\r\n    protected _id: number;\r\n\r\n    /**\r\n     * Instantiates a Smart Array.\r\n     * @param capacity defines the default capacity of the array.\r\n     */\r\n    constructor(capacity: number) {\r\n        this.data = new Array(capacity);\r\n        this._id = SmartArray._GlobalId++;\r\n    }\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * @param value defines the object to push in the array.\r\n     */\r\n    public push(value: T): void {\r\n        this.data[this.length++] = value;\r\n\r\n        if (this.length > this.data.length) {\r\n            this.data.length *= 2;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterates over the active data and apply the lambda to them.\r\n     * @param func defines the action to apply on each value.\r\n     */\r\n    public forEach(func: (content: T) => void): void {\r\n        for (var index = 0; index < this.length; index++) {\r\n            func(this.data[index]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sorts the full sets of data.\r\n     * @param compareFn defines the comparison function to apply.\r\n     */\r\n    public sort(compareFn: (a: T, b: T) => number): void {\r\n        this.data.sort(compareFn);\r\n    }\r\n\r\n    /**\r\n     * Resets the active data to an empty array.\r\n     */\r\n    public reset(): void {\r\n        this.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Releases all the data from the array as well as the array.\r\n     */\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        if (this.data) {\r\n            this.data.length = 0;\r\n            this.data = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Concats the active data with a given array.\r\n     * @param array defines the data to concatenate with.\r\n     */\r\n    public concat(array: any): void {\r\n        if (array.length === 0) {\r\n            return;\r\n        }\r\n        if (this.length + array.length > this.data.length) {\r\n            this.data.length = (this.length + array.length) * 2;\r\n        }\r\n\r\n        for (var index = 0; index < array.length; index++) {\r\n            this.data[this.length++] = (array.data || array)[index];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the position of a value in the active data.\r\n     * @param value defines the value to find the index for\r\n     * @returns the index if found in the active data otherwise -1\r\n     */\r\n    public indexOf(value: T): number {\r\n        var position = this.data.indexOf(value);\r\n\r\n        if (position >= this.length) {\r\n            return -1;\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    /**\r\n     * Returns whether an element is part of the active data.\r\n     * @param value defines the value to look for\r\n     * @returns true if found in the active data otherwise false\r\n     */\r\n    public contains(value: T): boolean {\r\n        return this.indexOf(value) !== -1;\r\n    }\r\n\r\n    // Statics\r\n    private static _GlobalId = 0;\r\n}\r\n\r\n/**\r\n * Defines an GC Friendly array where the backfield array do not shrink to prevent over allocations.\r\n * The data in this array can only be present once\r\n */\r\nexport class SmartArrayNoDuplicate<T> extends SmartArray<T> {\r\n    private _duplicateId = 0;\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * THIS DOES NOT PREVENT DUPPLICATE DATA\r\n     * @param value defines the object to push in the array.\r\n     */\r\n    public push(value: T): void {\r\n        super.push(value);\r\n\r\n        if (!(<any>value).__smartArrayFlags) {\r\n            (<any>value).__smartArrayFlags = {};\r\n        }\r\n\r\n        (<any>value).__smartArrayFlags[this._id] = this._duplicateId;\r\n    }\r\n\r\n    /**\r\n     * Pushes a value at the end of the active data.\r\n     * If the data is already present, it won t be added again\r\n     * @param value defines the object to push in the array.\r\n     * @returns true if added false if it was already present\r\n     */\r\n    public pushNoDuplicate(value: T): boolean {\r\n        if ((<any>value).__smartArrayFlags && (<any>value).__smartArrayFlags[this._id] === this._duplicateId) {\r\n            return false;\r\n        }\r\n        this.push(value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Resets the active data to an empty array.\r\n     */\r\n    public reset(): void {\r\n        super.reset();\r\n        this._duplicateId++;\r\n    }\r\n\r\n    /**\r\n     * Concats the active data with a given array.\r\n     * This ensures no dupplicate will be present in the result.\r\n     * @param array defines the data to concatenate with.\r\n     */\r\n    public concatWithNoDuplicate(array: any): void {\r\n        if (array.length === 0) {\r\n            return;\r\n        }\r\n        if (this.length + array.length > this.data.length) {\r\n            this.data.length = (this.length + array.length) * 2;\r\n        }\r\n\r\n        for (var index = 0; index < array.length; index++) {\r\n            var item = (array.data || array)[index];\r\n            this.pushNoDuplicate(item);\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}