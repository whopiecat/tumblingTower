{"ast":null,"code":"import { ArrayTools } from \"../Misc/arrayTools\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\n/**\r\n * Class used to store bounding sphere information\r\n */\n\nvar BoundingSphere =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new bounding sphere\r\n   * @param min defines the minimum vector (in local space)\r\n   * @param max defines the maximum vector (in local space)\r\n   * @param worldMatrix defines the new world matrix\r\n   */\n  function BoundingSphere(min, max, worldMatrix) {\n    /**\r\n     * Gets the center of the bounding sphere in local space\r\n     */\n    this.center = Vector3.Zero();\n    /**\r\n     * Gets the center of the bounding sphere in world space\r\n     */\n\n    this.centerWorld = Vector3.Zero();\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\n\n    this.minimum = Vector3.Zero();\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\n\n    this.maximum = Vector3.Zero();\n    this.reConstruct(min, max, worldMatrix);\n  }\n  /**\r\n   * Recreates the entire bounding sphere from scratch as if we call the constructor in place\r\n   * @param min defines the new minimum vector (in local space)\r\n   * @param max defines the new maximum vector (in local space)\r\n   * @param worldMatrix defines the new world matrix\r\n   */\n\n\n  BoundingSphere.prototype.reConstruct = function (min, max, worldMatrix) {\n    this.minimum.copyFrom(min);\n    this.maximum.copyFrom(max);\n    var distance = Vector3.Distance(min, max);\n    max.addToRef(min, this.center).scaleInPlace(0.5);\n    this.radius = distance * 0.5;\n\n    this._update(worldMatrix || Matrix.IdentityReadOnly);\n  };\n  /**\r\n   * Scale the current bounding sphere by applying a scale factor\r\n   * @param factor defines the scale factor to apply\r\n   * @returns the current bounding box\r\n   */\n\n\n  BoundingSphere.prototype.scale = function (factor) {\n    var newRadius = this.radius * factor;\n    var tmpVectors = BoundingSphere.TmpVector3;\n    var tempRadiusVector = tmpVectors[0].setAll(newRadius);\n    var min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\n    var max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\n    this.reConstruct(min, max, this._worldMatrix);\n    return this;\n  };\n  /**\r\n   * Gets the world matrix of the bounding box\r\n   * @returns a matrix\r\n   */\n\n\n  BoundingSphere.prototype.getWorldMatrix = function () {\n    return this._worldMatrix;\n  }; // Methods\n\n  /** @hidden */\n\n\n  BoundingSphere.prototype._update = function (worldMatrix) {\n    if (!worldMatrix.isIdentity()) {\n      Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\n      var tempVector = BoundingSphere.TmpVector3[0];\n      Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\n      this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\n    } else {\n      this.centerWorld.copyFrom(this.center);\n      this.radiusWorld = this.radius;\n    }\n  };\n  /**\r\n   * Tests if the bounding sphere is intersecting the frustum planes\r\n   * @param frustumPlanes defines the frustum planes to test\r\n   * @returns true if there is an intersection\r\n   */\n\n\n  BoundingSphere.prototype.isInFrustum = function (frustumPlanes) {\n    var center = this.centerWorld;\n    var radius = this.radiusWorld;\n\n    for (var i = 0; i < 6; i++) {\n      if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Tests if the bounding sphere center is in between the frustum planes.\r\n   * Used for optimistic fast inclusion.\r\n   * @param frustumPlanes defines the frustum planes to test\r\n   * @returns true if the sphere center is in between the frustum planes\r\n   */\n\n\n  BoundingSphere.prototype.isCenterInFrustum = function (frustumPlanes) {\n    var center = this.centerWorld;\n\n    for (var i = 0; i < 6; i++) {\n      if (frustumPlanes[i].dotCoordinate(center) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Tests if a point is inside the bounding sphere\r\n   * @param point defines the point to test\r\n   * @returns true if the point is inside the bounding sphere\r\n   */\n\n\n  BoundingSphere.prototype.intersectsPoint = function (point) {\n    var squareDistance = Vector3.DistanceSquared(this.centerWorld, point);\n\n    if (this.radiusWorld * this.radiusWorld < squareDistance) {\n      return false;\n    }\n\n    return true;\n  }; // Statics\n\n  /**\r\n   * Checks if two sphere intersct\r\n   * @param sphere0 sphere 0\r\n   * @param sphere1 sphere 1\r\n   * @returns true if the speres intersect\r\n   */\n\n\n  BoundingSphere.Intersects = function (sphere0, sphere1) {\n    var squareDistance = Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\n    var radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\n\n    if (radiusSum * radiusSum < squareDistance) {\n      return false;\n    }\n\n    return true;\n  };\n\n  BoundingSphere.TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);\n  return BoundingSphere;\n}();\n\nexport { BoundingSphere };","map":{"version":3,"sources":["../../../sourceES6/core/Culling/boundingSphere.ts"],"names":[],"mappings":"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","sourcesContent":["import { DeepImmutable } from \"../types\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Plane } from '../Maths/math.plane';\r\n\r\n/**\r\n * Class used to store bounding sphere information\r\n */\r\nexport class BoundingSphere {\r\n    /**\r\n     * Gets the center of the bounding sphere in local space\r\n     */\r\n    public readonly center = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in local space\r\n     */\r\n    public radius: number;\r\n    /**\r\n     * Gets the center of the bounding sphere in world space\r\n     */\r\n    public readonly centerWorld = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in world space\r\n     */\r\n    public radiusWorld: number;\r\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\r\n    public readonly minimum = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\r\n    public readonly maximum = Vector3.Zero();\r\n\r\n    private _worldMatrix: DeepImmutable<Matrix>;\r\n    private static readonly TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);\r\n\r\n    /**\r\n     * Creates a new bounding sphere\r\n     * @param min defines the minimum vector (in local space)\r\n     * @param max defines the maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Recreates the entire bounding sphere from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.minimum.copyFrom(min);\r\n        this.maximum.copyFrom(max);\r\n\r\n        var distance = Vector3.Distance(min, max);\r\n\r\n        max.addToRef(min, this.center).scaleInPlace(0.5);\r\n        this.radius = distance * 0.5;\r\n\r\n        this._update(worldMatrix || Matrix.IdentityReadOnly);\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding sphere by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding box\r\n     */\r\n    public scale(factor: number): BoundingSphere {\r\n        const newRadius = this.radius * factor;\r\n        const tmpVectors = BoundingSphere.TmpVector3;\r\n        const tempRadiusVector = tmpVectors[0].setAll(newRadius);\r\n        const min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\r\n        const max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\r\n\r\n        this.reConstruct(min, max, this._worldMatrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the world matrix of the bounding box\r\n     * @returns a matrix\r\n     */\r\n    public getWorldMatrix(): DeepImmutable<Matrix> {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    // Methods\r\n    /** @hidden */\r\n    public _update(worldMatrix: DeepImmutable<Matrix>): void {\r\n        if (!worldMatrix.isIdentity()) {\r\n            Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\r\n            const tempVector = BoundingSphere.TmpVector3[0];\r\n            Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\r\n            this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\r\n        }\r\n        else {\r\n            this.centerWorld.copyFrom(this.center);\r\n            this.radiusWorld = this.radius;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere is intersecting the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        let center = this.centerWorld;\r\n        let radius = this.radiusWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere center is in between the frustum planes.\r\n     * Used for optimistic fast inclusion.\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if the sphere center is in between the frustum planes\r\n     */\r\n    public isCenterInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        let center = this.centerWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is inside the bounding sphere\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside the bounding sphere\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(this.centerWorld, point);\r\n        if (this.radiusWorld * this.radiusWorld < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Checks if two sphere intersct\r\n     * @param sphere0 sphere 0\r\n     * @param sphere1 sphere 1\r\n     * @returns true if the speres intersect\r\n     */\r\n    public static Intersects(sphere0: DeepImmutable<BoundingSphere>, sphere1: DeepImmutable<BoundingSphere>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\r\n        const radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\r\n\r\n        if (radiusSum * radiusSum < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}