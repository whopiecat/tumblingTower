{"ast":null,"code":"import { Scene } from \"../scene\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { SubSurfaceConfiguration } from \"./subSurfaceConfiguration\";\nimport { AbstractScene } from \"../abstractScene\";\nimport { Color3 } from \"../Maths/math.color\"; // Adds the parser to the scene parsers.\n\nAbstractScene.AddParser(SceneComponentConstants.NAME_SUBSURFACE, function (parsedData, scene) {\n  // Diffusion profiles\n  if (parsedData.ssDiffusionProfileColors !== undefined && parsedData.ssDiffusionProfileColors !== null) {\n    scene.enableSubSurfaceForPrePass();\n\n    if (scene.subSurfaceConfiguration) {\n      for (var index = 0, cache = parsedData.ssDiffusionProfileColors.length; index < cache; index++) {\n        var color = parsedData.ssDiffusionProfileColors[index];\n        scene.subSurfaceConfiguration.addDiffusionProfile(new Color3(color.r, color.g, color.b));\n      }\n    }\n  }\n});\nObject.defineProperty(Scene.prototype, \"subSurfaceConfiguration\", {\n  get: function () {\n    return this._subSurfaceConfiguration;\n  },\n  set: function (value) {\n    if (value) {\n      if (this.enablePrePassRenderer()) {\n        this._subSurfaceConfiguration = value;\n      }\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\n\nScene.prototype.enableSubSurfaceForPrePass = function () {\n  if (this._subSurfaceConfiguration) {\n    return this._subSurfaceConfiguration;\n  }\n\n  var prePassRenderer = this.enablePrePassRenderer();\n\n  if (prePassRenderer) {\n    this._subSurfaceConfiguration = new SubSurfaceConfiguration(this);\n    prePassRenderer.addEffectConfiguration(this._subSurfaceConfiguration);\n    return this._subSurfaceConfiguration;\n  }\n\n  return null;\n};\n\nScene.prototype.disableSubSurfaceForPrePass = function () {\n  if (!this._subSurfaceConfiguration) {\n    return;\n  }\n\n  this._subSurfaceConfiguration.dispose();\n\n  this._subSurfaceConfiguration = null;\n};\n/**\r\n * Defines the Geometry Buffer scene component responsible to manage a G-Buffer useful\r\n * in several rendering techniques.\r\n */\n\n\nvar SubSurfaceSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function SubSurfaceSceneComponent(scene) {\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_PREPASSRENDERER;\n    this.scene = scene;\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  SubSurfaceSceneComponent.prototype.register = function () {};\n  /**\r\n   * Serializes the component data to the specified json object\r\n   * @param serializationObject The object to serialize to\r\n   */\n\n\n  SubSurfaceSceneComponent.prototype.serialize = function (serializationObject) {\n    if (!this.scene.subSurfaceConfiguration) {\n      return;\n    }\n\n    var ssDiffusionProfileColors = this.scene.subSurfaceConfiguration.ssDiffusionProfileColors;\n    serializationObject.ssDiffusionProfileColors = [];\n\n    for (var i = 0; i < ssDiffusionProfileColors.length; i++) {\n      serializationObject.ssDiffusionProfileColors.push({\n        r: ssDiffusionProfileColors[i].r,\n        g: ssDiffusionProfileColors[i].g,\n        b: ssDiffusionProfileColors[i].b\n      });\n    }\n  };\n  /**\r\n   * Adds all the elements from the container to the scene\r\n   * @param container the container holding the elements\r\n   */\n\n\n  SubSurfaceSceneComponent.prototype.addFromContainer = function (container) {// Nothing to do\n  };\n  /**\r\n   * Removes all the elements in the container from the scene\r\n   * @param container contains the elements to remove\r\n   * @param dispose if the removed element should be disposed (default: false)\r\n   */\n\n\n  SubSurfaceSceneComponent.prototype.removeFromContainer = function (container, dispose) {\n    // Make sure nothing will be serialized\n    if (!this.scene.prePassRenderer) {\n      return;\n    }\n\n    if (this.scene.subSurfaceConfiguration) {\n      this.scene.subSurfaceConfiguration.clearAllDiffusionProfiles();\n    }\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  SubSurfaceSceneComponent.prototype.rebuild = function () {// Nothing to do for this component\n  };\n  /**\r\n   * Disposes the component and the associated ressources\r\n   */\n\n\n  SubSurfaceSceneComponent.prototype.dispose = function () {// Nothing to do for this component\n  };\n\n  return SubSurfaceSceneComponent;\n}();\n\nexport { SubSurfaceSceneComponent };\n\nSubSurfaceConfiguration._SceneComponentInitialization = function (scene) {\n  // Register the G Buffer component to the scene.\n  var component = scene._getComponent(SceneComponentConstants.NAME_SUBSURFACE);\n\n  if (!component) {\n    component = new SubSurfaceSceneComponent(scene);\n\n    scene._addComponent(component);\n  }\n};","map":{"version":3,"sources":["../../../sourceES6/core/Rendering/subSurfaceSceneComponent.ts"],"names":[],"mappings":"AACA,SAAS,KAAT,QAAsB,UAAtB;AACA,SAAsC,uBAAtC,QAAqE,mBAArE;AACA,SAAS,uBAAT,QAAwC,2BAAxC;AACA,SAAS,aAAT,QAA8B,kBAA9B;AACA,SAAS,MAAT,QAAuB,qBAAvB,C,CAEA;;AACA,aAAa,CAAC,SAAd,CAAwB,uBAAuB,CAAC,eAAhD,EAAiE,UAAC,UAAD,EAAkB,KAAlB,EAA8B;AAC3F;AACA,MAAI,UAAU,CAAC,wBAAX,KAAwC,SAAxC,IAAqD,UAAU,CAAC,wBAAX,KAAwC,IAAjG,EAAuG;AACnG,IAAA,KAAK,CAAC,0BAAN;;AACA,QAAI,KAAK,CAAC,uBAAV,EAAmC;AAC/B,WAAK,IAAI,KAAK,GAAG,CAAZ,EAAe,KAAK,GAAG,UAAU,CAAC,wBAAX,CAAoC,MAAhE,EAAwE,KAAK,GAAG,KAAhF,EAAuF,KAAK,EAA5F,EAAgG;AAC5F,YAAI,KAAK,GAAG,UAAU,CAAC,wBAAX,CAAoC,KAApC,CAAZ;AACA,QAAA,KAAK,CAAC,uBAAN,CAA8B,mBAA9B,CAAkD,IAAI,MAAJ,CAAW,KAAK,CAAC,CAAjB,EAAoB,KAAK,CAAC,CAA1B,EAA6B,KAAK,CAAC,CAAnC,CAAlD;AACH;AACJ;AACJ;AACJ,CAXD;AAoCA,MAAM,CAAC,cAAP,CAAsB,KAAK,CAAC,SAA5B,EAAuC,yBAAvC,EAAkE;AAC9D,EAAA,GAAG,EAAE,YAAA;AACD,WAAO,KAAK,wBAAZ;AACH,GAH6D;AAI9D,EAAA,GAAG,EAAE,UAAsB,KAAtB,EAA8D;AAC/D,QAAI,KAAJ,EAAW;AACP,UAAI,KAAK,qBAAL,EAAJ,EAAkC;AAC1B,aAAK,wBAAL,GAAgC,KAAhC;AACP;AACJ;AACJ,GAV6D;AAW9D,EAAA,UAAU,EAAE,IAXkD;AAY9D,EAAA,YAAY,EAAE;AAZgD,CAAlE;;AAeA,KAAK,CAAC,SAAN,CAAgB,0BAAhB,GAA6C,YAAA;AACzC,MAAI,KAAK,wBAAT,EAAmC;AAC/B,WAAO,KAAK,wBAAZ;AACH;;AAED,MAAM,eAAe,GAAG,KAAK,qBAAL,EAAxB;;AACA,MAAI,eAAJ,EAAqB;AACjB,SAAK,wBAAL,GAAgC,IAAI,uBAAJ,CAA4B,IAA5B,CAAhC;AACA,IAAA,eAAe,CAAC,sBAAhB,CAAuC,KAAK,wBAA5C;AACA,WAAO,KAAK,wBAAZ;AACH;;AAED,SAAO,IAAP;AAEH,CAdD;;AAgBA,KAAK,CAAC,SAAN,CAAgB,2BAAhB,GAA8C,YAAA;AAC1C,MAAI,CAAC,KAAK,wBAAV,EAAoC;AAChC;AACH;;AAED,OAAK,wBAAL,CAA8B,OAA9B;;AACA,OAAK,wBAAL,GAAgC,IAAhC;AACH,CAPD;AASA;;;;;;AAIA,IAAA,wBAAA;AAAA;AAAA,YAAA;AAWI;;;;AAIA,WAAA,wBAAA,CAAY,KAAZ,EAAwB;AAdxB;;;AAGgB,SAAA,IAAA,GAAO,uBAAuB,CAAC,oBAA/B;AAYZ,SAAK,KAAL,GAAa,KAAb;AACH;AAED;;;;;AAGO,EAAA,wBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA,CACC,CADM;AAGP;;;;;;AAIO,EAAA,wBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,mBAAjB,EAAyC;AACrC,QAAI,CAAC,KAAK,KAAL,CAAW,uBAAhB,EAAyC;AACrC;AACH;;AAED,QAAM,wBAAwB,GAAG,KAAK,KAAL,CAAW,uBAAX,CAAmC,wBAApE;AACA,IAAA,mBAAmB,CAAC,wBAApB,GAA+C,EAA/C;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,wBAAwB,CAAC,MAA7C,EAAqD,CAAC,EAAtD,EAA0D;AACtD,MAAA,mBAAmB,CAAC,wBAApB,CAA6C,IAA7C,CAAkD;AAAE,QAAA,CAAC,EAAE,wBAAwB,CAAC,CAAD,CAAxB,CAA4B,CAAjC;AACE,QAAA,CAAC,EAAE,wBAAwB,CAAC,CAAD,CAAxB,CAA4B,CADjC;AAEE,QAAA,CAAC,EAAE,wBAAwB,CAAC,CAAD,CAAxB,CAA4B;AAFjC,OAAlD;AAGH;AACJ,GAbM;AAeP;;;;;;AAIO,EAAA,wBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,SAAxB,EAAgD,CAC5C;AACH,GAFM;AAIP;;;;;;;AAKO,EAAA,wBAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,SAA3B,EAAqD,OAArD,EAAsE;AAClE;AACA,QAAI,CAAC,KAAK,KAAL,CAAW,eAAhB,EAAiC;AAC7B;AACH;;AAED,QAAI,KAAK,KAAL,CAAW,uBAAf,EAAwC;AACpC,WAAK,KAAL,CAAW,uBAAX,CAAmC,yBAAnC;AACH;AACJ,GATM;AAWP;;;;;;AAIO,EAAA,wBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA,CACI;AACH,GAFM;AAIP;;;;;AAGO,EAAA,wBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA,CACI;AACH,GAFM;;AAIX,SAAA,wBAAA;AAAC,CAnFD,EAAA;;;;AAqFA,uBAAuB,CAAC,6BAAxB,GAAwD,UAAC,KAAD,EAAa;AACjE;AACA,MAAI,SAAS,GAAG,KAAK,CAAC,aAAN,CAAoB,uBAAuB,CAAC,eAA5C,CAAhB;;AACA,MAAI,CAAC,SAAL,EAAgB;AACZ,IAAA,SAAS,GAAG,IAAI,wBAAJ,CAA6B,KAA7B,CAAZ;;AACA,IAAA,KAAK,CAAC,aAAN,CAAoB,SAApB;AACH;AACJ,CAPD","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { ISceneSerializableComponent, SceneComponentConstants } from \"../sceneComponent\";\r\nimport { SubSurfaceConfiguration } from \"./subSurfaceConfiguration\";\r\nimport { AbstractScene } from \"../abstractScene\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\n\r\n// Adds the parser to the scene parsers.\r\nAbstractScene.AddParser(SceneComponentConstants.NAME_SUBSURFACE, (parsedData: any, scene: Scene) => {\r\n    // Diffusion profiles\r\n    if (parsedData.ssDiffusionProfileColors !== undefined && parsedData.ssDiffusionProfileColors !== null) {\r\n        scene.enableSubSurfaceForPrePass();\r\n        if (scene.subSurfaceConfiguration) {\r\n            for (var index = 0, cache = parsedData.ssDiffusionProfileColors.length; index < cache; index++) {\r\n                var color = parsedData.ssDiffusionProfileColors[index];\r\n                scene.subSurfaceConfiguration.addDiffusionProfile(new Color3(color.r, color.g, color.b));\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ndeclare module \"../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /** @hidden (Backing field) */\r\n        _subSurfaceConfiguration: Nullable<SubSurfaceConfiguration>;\r\n\r\n        /**\r\n         * Gets or Sets the current prepass renderer associated to the scene.\r\n         */\r\n        subSurfaceConfiguration: Nullable<SubSurfaceConfiguration>;\r\n\r\n        /**\r\n         * Enables the subsurface effect for prepass\r\n         * @returns the SubSurfaceConfiguration\r\n         */\r\n        enableSubSurfaceForPrePass(): Nullable<SubSurfaceConfiguration>;\r\n\r\n        /**\r\n         * Disables the subsurface effect for prepass\r\n         */\r\n        disableSubSurfaceForPrePass(): void;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"subSurfaceConfiguration\", {\r\n    get: function(this: Scene) {\r\n        return this._subSurfaceConfiguration;\r\n    },\r\n    set: function(this: Scene, value: Nullable<SubSurfaceConfiguration>) {\r\n        if (value) {\r\n            if (this.enablePrePassRenderer()) {\r\n                    this._subSurfaceConfiguration = value;\r\n            }\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n});\r\n\r\nScene.prototype.enableSubSurfaceForPrePass = function(): Nullable<SubSurfaceConfiguration> {\r\n    if (this._subSurfaceConfiguration) {\r\n        return this._subSurfaceConfiguration;\r\n    }\r\n\r\n    const prePassRenderer = this.enablePrePassRenderer();\r\n    if (prePassRenderer) {\r\n        this._subSurfaceConfiguration = new SubSurfaceConfiguration(this);\r\n        prePassRenderer.addEffectConfiguration(this._subSurfaceConfiguration);\r\n        return this._subSurfaceConfiguration;\r\n    }\r\n\r\n    return null;\r\n\r\n};\r\n\r\nScene.prototype.disableSubSurfaceForPrePass = function(): void {\r\n    if (!this._subSurfaceConfiguration) {\r\n        return;\r\n    }\r\n\r\n    this._subSurfaceConfiguration.dispose();\r\n    this._subSurfaceConfiguration = null;\r\n};\r\n\r\n/**\r\n * Defines the Geometry Buffer scene component responsible to manage a G-Buffer useful\r\n * in several rendering techniques.\r\n */\r\nexport class SubSurfaceSceneComponent implements ISceneSerializableComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_PREPASSRENDERER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n    }\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        if (!this.scene.subSurfaceConfiguration) {\r\n            return;\r\n        }\r\n\r\n        const ssDiffusionProfileColors = this.scene.subSurfaceConfiguration.ssDiffusionProfileColors;\r\n        serializationObject.ssDiffusionProfileColors = [];\r\n\r\n        for (let i = 0; i < ssDiffusionProfileColors.length; i++) {\r\n            serializationObject.ssDiffusionProfileColors.push({ r: ssDiffusionProfileColors[i].r,\r\n                                                                g: ssDiffusionProfileColors[i].g,\r\n                                                                b: ssDiffusionProfileColors[i].b });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    public addFromContainer(container: AbstractScene): void {\r\n        // Nothing to do\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    public removeFromContainer(container: AbstractScene, dispose?: boolean): void {\r\n        // Make sure nothing will be serialized\r\n        if (!this.scene.prePassRenderer) {\r\n            return;\r\n        }\r\n\r\n        if (this.scene.subSurfaceConfiguration) {\r\n            this.scene.subSurfaceConfiguration.clearAllDiffusionProfiles();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated ressources\r\n     */\r\n    public dispose(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n}\r\n\r\nSubSurfaceConfiguration._SceneComponentInitialization = (scene: Scene) => {\r\n    // Register the G Buffer component to the scene.\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_SUBSURFACE) as SubSurfaceSceneComponent;\r\n    if (!component) {\r\n        component = new SubSurfaceSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}