{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Logger } from \"../../../Misc/logger\";\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators\";\nimport { Vector3, TmpVectors } from \"../../../Maths/math.vector\";\nimport { Texture } from \"../../../Materials/Textures/texture\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess\";\nimport { _TypeStore } from '../../../Misc/typeStore';\nimport { EngineStore } from '../../../Engines/engineStore';\nimport { SSAO2Configuration } from \"../../../Rendering/ssao2Configuration\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\nimport \"../../../Shaders/ssao2.fragment\";\nimport \"../../../Shaders/ssaoCombine.fragment\";\n/**\r\n * Render pipeline to produce ssao effect\r\n */\n\nvar SSAO2RenderingPipeline =\n/** @class */\nfunction (_super) {\n  __extends(SSAO2RenderingPipeline, _super);\n  /**\r\n   * @constructor\r\n   * @param name The rendering pipeline name\r\n   * @param scene The scene linked to this pipeline\r\n   * @param ratio The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, blurRatio: 1.0 }\r\n   * @param cameras The array of cameras that the rendering pipeline will be attached to\r\n   * @param forceGeometryBuffer Set to true if you want to use the legacy geometry buffer renderer\r\n   */\n\n\n  function SSAO2RenderingPipeline(name, scene, ratio, cameras, forceGeometryBuffer) {\n    if (forceGeometryBuffer === void 0) {\n      forceGeometryBuffer = true;\n    }\n\n    var _this = _super.call(this, scene.getEngine(), name) || this; // Members\n\n    /**\r\n     * @ignore\r\n    * The PassPostProcess id in the pipeline that contains the original scene color\r\n    */\n\n\n    _this.SSAOOriginalSceneColorEffect = \"SSAOOriginalSceneColorEffect\";\n    /**\r\n     * @ignore\r\n    * The SSAO PostProcess id in the pipeline\r\n    */\n\n    _this.SSAORenderEffect = \"SSAORenderEffect\";\n    /**\r\n     * @ignore\r\n    * The horizontal blur PostProcess id in the pipeline\r\n    */\n\n    _this.SSAOBlurHRenderEffect = \"SSAOBlurHRenderEffect\";\n    /**\r\n     * @ignore\r\n    * The vertical blur PostProcess id in the pipeline\r\n    */\n\n    _this.SSAOBlurVRenderEffect = \"SSAOBlurVRenderEffect\";\n    /**\r\n     * @ignore\r\n    * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\r\n    */\n\n    _this.SSAOCombineRenderEffect = \"SSAOCombineRenderEffect\";\n    /**\r\n    * The output strength of the SSAO post-process. Default value is 1.0.\r\n    */\n\n    _this.totalStrength = 1.0;\n    /**\r\n    * Maximum depth value to still render AO. A smooth falloff makes the dimming more natural, so there will be no abrupt shading change.\r\n    */\n\n    _this.maxZ = 100.0;\n    /**\r\n    * In order to save performances, SSAO radius is clamped on close geometry. This ratio changes by how much\r\n    */\n\n    _this.minZAspect = 0.2;\n    _this._samples = 8;\n    _this._textureSamples = 1;\n    /**\r\n     * Force rendering the geometry through geometry buffer\r\n     */\n\n    _this._forceGeometryBuffer = false;\n    _this._expensiveBlur = true;\n    /**\r\n    * The radius around the analyzed pixel used by the SSAO post-process. Default value is 2.0\r\n    */\n\n    _this.radius = 2.0;\n    /**\r\n    * The base color of the SSAO post-process\r\n    * The final result is \"base + ssao\" between [0, 1]\r\n    */\n\n    _this.base = 0;\n    _this._bits = new Uint32Array(1);\n    _this._scene = scene;\n    _this._ratio = ratio;\n    _this._forceGeometryBuffer = forceGeometryBuffer;\n\n    if (!_this.isSupported) {\n      Logger.Error(\"SSAO 2 needs WebGL 2 support.\");\n      return _this;\n    }\n\n    var ssaoRatio = _this._ratio.ssaoRatio || ratio;\n    var blurRatio = _this._ratio.blurRatio || ratio; // Set up assets\n\n    if (_this._forceGeometryBuffer) {\n      scene.enableGeometryBufferRenderer();\n    } else {\n      _this._prePassRenderer = scene.enablePrePassRenderer();\n    }\n\n    _this._createRandomTexture();\n\n    _this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\n    _this._originalColorPostProcess.samples = _this.textureSamples;\n\n    _this._createSSAOPostProcess(1.0);\n\n    _this._createBlurPostProcess(ssaoRatio, blurRatio);\n\n    _this._createSSAOCombinePostProcess(blurRatio); // Set up pipeline\n\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOOriginalSceneColorEffect, function () {\n      return _this._originalColorPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAORenderEffect, function () {\n      return _this._ssaoPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurHRenderEffect, function () {\n      return _this._blurHPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurVRenderEffect, function () {\n      return _this._blurVPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOCombineRenderEffect, function () {\n      return _this._ssaoCombinePostProcess;\n    }, true)); // Finish\n\n\n    scene.postProcessRenderPipelineManager.addPipeline(_this);\n\n    if (cameras) {\n      scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(SSAO2RenderingPipeline.prototype, \"samples\", {\n    get: function () {\n      return this._samples;\n    },\n\n    /**\r\n    * Number of samples used for the SSAO calculations. Default value is 8\r\n    */\n    set: function (n) {\n      this._samples = n;\n\n      this._ssaoPostProcess.updateEffect(this._getDefinesForSSAO());\n\n      this._sampleSphere = this._generateHemisphere();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SSAO2RenderingPipeline.prototype, \"textureSamples\", {\n    get: function () {\n      return this._textureSamples;\n    },\n\n    /**\r\n    * Number of samples to use for antialiasing\r\n    */\n    set: function (n) {\n      this._textureSamples = n;\n      this._originalColorPostProcess.samples = n;\n      this._blurHPostProcess.samples = n;\n      this._blurVPostProcess.samples = n;\n      this._ssaoPostProcess.samples = n;\n      this._ssaoCombinePostProcess.samples = n;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SSAO2RenderingPipeline.prototype, \"expensiveBlur\", {\n    get: function () {\n      return this._expensiveBlur;\n    },\n\n    /**\r\n    * If bilateral blur should be used\r\n    */\n    set: function (b) {\n      this._blurHPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\"textureSampler\", \"depthNormalSampler\"]);\n\n      this._blurVPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\"textureSampler\", \"depthNormalSampler\"]);\n\n      this._expensiveBlur = b;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SSAO2RenderingPipeline, \"IsSupported\", {\n    /**\r\n    *  Support test.\r\n    */\n    get: function () {\n      var engine = EngineStore.LastCreatedEngine;\n\n      if (!engine) {\n        return false;\n      }\n\n      return engine.webGLVersion >= 2;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SSAO2RenderingPipeline.prototype, \"scene\", {\n    /**\r\n     * Gets active scene\r\n     */\n    get: function () {\n      return this._scene;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Public Methods\n\n  /**\r\n   * Get the class name\r\n   * @returns \"SSAO2RenderingPipeline\"\r\n   */\n\n  SSAO2RenderingPipeline.prototype.getClassName = function () {\n    return \"SSAO2RenderingPipeline\";\n  };\n  /**\r\n   * Removes the internal pipeline assets and detatches the pipeline from the scene cameras\r\n   */\n\n\n  SSAO2RenderingPipeline.prototype.dispose = function (disableGeometryBufferRenderer) {\n    if (disableGeometryBufferRenderer === void 0) {\n      disableGeometryBufferRenderer = false;\n    }\n\n    for (var i = 0; i < this._scene.cameras.length; i++) {\n      var camera = this._scene.cameras[i];\n\n      this._originalColorPostProcess.dispose(camera);\n\n      this._ssaoPostProcess.dispose(camera);\n\n      this._blurHPostProcess.dispose(camera);\n\n      this._blurVPostProcess.dispose(camera);\n\n      this._ssaoCombinePostProcess.dispose(camera);\n    }\n\n    this._randomTexture.dispose();\n\n    if (disableGeometryBufferRenderer) {\n      this._scene.disableGeometryBufferRenderer();\n    }\n\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n\n    _super.prototype.dispose.call(this);\n  }; // Private Methods\n\n\n  SSAO2RenderingPipeline.prototype._createBlurPostProcess = function (ssaoRatio, blurRatio) {\n    var _this = this;\n\n    this._samplerOffsets = [];\n    var expensive = this.expensiveBlur;\n\n    for (var i = -8; i < 8; i++) {\n      this._samplerOffsets.push(i * 2 + 0.5);\n    }\n\n    this._blurHPostProcess = new PostProcess(\"BlurH\", \"ssao2\", [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"], [\"depthNormalSampler\"], ssaoRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\");\n\n    this._blurHPostProcess.onApply = function (effect) {\n      if (!_this._scene.activeCamera) {\n        return;\n      }\n\n      effect.setFloat(\"outSize\", _this._ssaoCombinePostProcess.width > 0 ? _this._ssaoCombinePostProcess.width : _this._originalColorPostProcess.width);\n      effect.setFloat(\"near\", _this._scene.activeCamera.minZ);\n      effect.setFloat(\"far\", _this._scene.activeCamera.maxZ);\n      effect.setFloat(\"radius\", _this.radius);\n\n      if (_this._forceGeometryBuffer) {\n        effect.setTexture(\"depthNormalSampler\", _this._scene.enableGeometryBufferRenderer().getGBuffer().textures[0]);\n      } else {\n        effect.setTexture(\"depthNormalSampler\", _this._prePassRenderer.prePassRT.textures[_this._prePassRenderer.getIndex(5)]);\n      }\n\n      effect.setArray(\"samplerOffsets\", _this._samplerOffsets);\n    };\n\n    this._blurVPostProcess = new PostProcess(\"BlurV\", \"ssao2\", [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"], [\"depthNormalSampler\"], blurRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_V\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\");\n\n    this._blurVPostProcess.onApply = function (effect) {\n      if (!_this._scene.activeCamera) {\n        return;\n      }\n\n      effect.setFloat(\"outSize\", _this._ssaoCombinePostProcess.height > 0 ? _this._ssaoCombinePostProcess.height : _this._originalColorPostProcess.height);\n      effect.setFloat(\"near\", _this._scene.activeCamera.minZ);\n      effect.setFloat(\"far\", _this._scene.activeCamera.maxZ);\n      effect.setFloat(\"radius\", _this.radius);\n\n      if (_this._forceGeometryBuffer) {\n        effect.setTexture(\"depthNormalSampler\", _this._scene.enableGeometryBufferRenderer().getGBuffer().textures[0]);\n      } else {\n        effect.setTexture(\"depthNormalSampler\", _this._prePassRenderer.prePassRT.textures[_this._prePassRenderer.getIndex(5)]);\n      }\n\n      effect.setArray(\"samplerOffsets\", _this._samplerOffsets);\n    };\n\n    this._blurHPostProcess.samples = this.textureSamples;\n    this._blurVPostProcess.samples = this.textureSamples;\n  };\n  /** @hidden */\n\n\n  SSAO2RenderingPipeline.prototype._rebuild = function () {\n    _super.prototype._rebuild.call(this);\n  }; //Van der Corput radical inverse\n\n\n  SSAO2RenderingPipeline.prototype._radicalInverse_VdC = function (i) {\n    this._bits[0] = i;\n    this._bits[0] = (this._bits[0] << 16 | this._bits[0] >> 16) >>> 0;\n    this._bits[0] = (this._bits[0] & 0x55555555) << 1 | (this._bits[0] & 0xAAAAAAAA) >>> 1 >>> 0;\n    this._bits[0] = (this._bits[0] & 0x33333333) << 2 | (this._bits[0] & 0xCCCCCCCC) >>> 2 >>> 0;\n    this._bits[0] = (this._bits[0] & 0x0F0F0F0F) << 4 | (this._bits[0] & 0xF0F0F0F0) >>> 4 >>> 0;\n    this._bits[0] = (this._bits[0] & 0x00FF00FF) << 8 | (this._bits[0] & 0xFF00FF00) >>> 8 >>> 0;\n    return this._bits[0] * 2.3283064365386963e-10; // / 0x100000000 or / 4294967296\n  };\n\n  SSAO2RenderingPipeline.prototype._hammersley = function (i, n) {\n    return [i / n, this._radicalInverse_VdC(i)];\n  };\n\n  SSAO2RenderingPipeline.prototype._hemisphereSample_uniform = function (u, v) {\n    var phi = v * 2.0 * Math.PI; // rejecting samples that are close to tangent plane to avoid z-fighting artifacts\n\n    var cosTheta = 1.0 - (u * 0.85 + 0.15);\n    var sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);\n    return new Vector3(Math.cos(phi) * sinTheta, Math.sin(phi) * sinTheta, cosTheta);\n  };\n\n  SSAO2RenderingPipeline.prototype._generateHemisphere = function () {\n    var numSamples = this.samples;\n    var result = [];\n    var vector;\n    var i = 0;\n\n    while (i < numSamples) {\n      if (numSamples < 16) {\n        vector = this._hemisphereSample_uniform(Math.random(), Math.random());\n      } else {\n        var rand = this._hammersley(i, numSamples);\n\n        vector = this._hemisphereSample_uniform(rand[0], rand[1]);\n      }\n\n      result.push(vector.x, vector.y, vector.z);\n      i++;\n    }\n\n    return result;\n  };\n\n  SSAO2RenderingPipeline.prototype._getDefinesForSSAO = function () {\n    var defines = \"#define SAMPLES \" + this.samples + \"\\n#define SSAO\";\n\n    if (this._forceGeometryBuffer) {\n      defines = defines + \"\\n#define GEOMETRYBUFFER\";\n    }\n\n    return defines;\n  };\n\n  SSAO2RenderingPipeline.prototype._createSSAOPostProcess = function (ratio) {\n    var _this = this;\n\n    this._sampleSphere = this._generateHemisphere();\n\n    var defines = this._getDefinesForSSAO();\n\n    var samplers;\n\n    if (this._forceGeometryBuffer) {\n      samplers = [\"randomSampler\", \"depthSampler\", \"normalSampler\"];\n    } else {\n      samplers = [\"randomSampler\", \"depthNormalSampler\"];\n    }\n\n    this._ssaoPostProcess = new PostProcess(\"ssao2\", \"ssao2\", [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"base\", \"range\", \"projection\", \"near\", \"far\", \"texelSize\", \"xViewport\", \"yViewport\", \"maxZ\", \"minZAspect\"], samplers, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, defines);\n\n    this._ssaoPostProcess.onApply = function (effect) {\n      if (!_this._scene.activeCamera) {\n        return;\n      }\n\n      effect.setArray3(\"sampleSphere\", _this._sampleSphere);\n      effect.setFloat(\"randTextureTiles\", 32.0);\n      effect.setFloat(\"samplesFactor\", 1 / _this.samples);\n      effect.setFloat(\"totalStrength\", _this.totalStrength);\n      effect.setFloat2(\"texelSize\", 1 / _this._ssaoPostProcess.width, 1 / _this._ssaoPostProcess.height);\n      effect.setFloat(\"radius\", _this.radius);\n      effect.setFloat(\"maxZ\", _this.maxZ);\n      effect.setFloat(\"minZAspect\", _this.minZAspect);\n      effect.setFloat(\"base\", _this.base);\n      effect.setFloat(\"near\", _this._scene.activeCamera.minZ);\n      effect.setFloat(\"far\", _this._scene.activeCamera.maxZ);\n      effect.setFloat(\"xViewport\", Math.tan(_this._scene.activeCamera.fov / 2) * _this._scene.getEngine().getAspectRatio(_this._scene.activeCamera, true));\n      effect.setFloat(\"yViewport\", Math.tan(_this._scene.activeCamera.fov / 2));\n      effect.setMatrix(\"projection\", _this._scene.getProjectionMatrix());\n\n      if (_this._forceGeometryBuffer) {\n        effect.setTexture(\"depthSampler\", _this._scene.enableGeometryBufferRenderer().getGBuffer().textures[0]);\n        effect.setTexture(\"normalSampler\", _this._scene.enableGeometryBufferRenderer().getGBuffer().textures[1]);\n      } else {\n        effect.setTexture(\"depthNormalSampler\", _this._prePassRenderer.prePassRT.textures[_this._prePassRenderer.getIndex(5)]);\n      }\n\n      effect.setTexture(\"randomSampler\", _this._randomTexture);\n    };\n\n    this._ssaoPostProcess.samples = this.textureSamples;\n  };\n\n  SSAO2RenderingPipeline.prototype._createSSAOCombinePostProcess = function (ratio) {\n    var _this = this;\n\n    this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n\n    this._ssaoCombinePostProcess.onApply = function (effect) {\n      var viewport = _this._scene.activeCamera.viewport;\n      effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(viewport.x, viewport.y, viewport.width, viewport.height));\n      effect.setTextureFromPostProcessOutput(\"originalColor\", _this._originalColorPostProcess);\n    };\n\n    this._ssaoCombinePostProcess.samples = this.textureSamples;\n\n    if (!this._forceGeometryBuffer) {\n      this._ssaoCombinePostProcess._prePassEffectConfiguration = new SSAO2Configuration();\n    }\n  };\n\n  SSAO2RenderingPipeline.prototype._createRandomTexture = function () {\n    var size = 128;\n    this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\n    this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n    this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n\n    var context = this._randomTexture.getContext();\n\n    var rand = function (min, max) {\n      return Math.random() * (max - min) + min;\n    };\n\n    var randVector = Vector3.Zero();\n\n    for (var x = 0; x < size; x++) {\n      for (var y = 0; y < size; y++) {\n        randVector.x = rand(0.0, 1.0);\n        randVector.y = rand(0.0, 1.0);\n        randVector.z = 0.0;\n        randVector.normalize();\n        randVector.scaleInPlace(255);\n        randVector.x = Math.floor(randVector.x);\n        randVector.y = Math.floor(randVector.y);\n        context.fillStyle = 'rgb(' + randVector.x + ', ' + randVector.y + ', ' + randVector.z + ')';\n        context.fillRect(x, y, 1, 1);\n      }\n    }\n\n    this._randomTexture.update(false);\n  };\n  /**\r\n   * Serialize the rendering pipeline (Used when exporting)\r\n   * @returns the serialized object\r\n   */\n\n\n  SSAO2RenderingPipeline.prototype.serialize = function () {\n    var serializationObject = SerializationHelper.Serialize(this);\n    serializationObject.customType = \"SSAO2RenderingPipeline\";\n    return serializationObject;\n  };\n  /**\r\n   * Parse the serialized pipeline\r\n   * @param source Source pipeline.\r\n   * @param scene The scene to load the pipeline to.\r\n   * @param rootUrl The URL of the serialized pipeline.\r\n   * @returns An instantiated pipeline from the serialized object.\r\n   */\n\n\n  SSAO2RenderingPipeline.Parse = function (source, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new SSAO2RenderingPipeline(source._name, scene, source._ratio);\n    }, source, scene, rootUrl);\n  };\n\n  __decorate([serialize()], SSAO2RenderingPipeline.prototype, \"totalStrength\", void 0);\n\n  __decorate([serialize()], SSAO2RenderingPipeline.prototype, \"maxZ\", void 0);\n\n  __decorate([serialize()], SSAO2RenderingPipeline.prototype, \"minZAspect\", void 0);\n\n  __decorate([serialize(\"samples\")], SSAO2RenderingPipeline.prototype, \"_samples\", void 0);\n\n  __decorate([serialize(\"textureSamples\")], SSAO2RenderingPipeline.prototype, \"_textureSamples\", void 0);\n\n  __decorate([serialize()], SSAO2RenderingPipeline.prototype, \"_ratio\", void 0);\n\n  __decorate([serialize(\"expensiveBlur\")], SSAO2RenderingPipeline.prototype, \"_expensiveBlur\", void 0);\n\n  __decorate([serialize()], SSAO2RenderingPipeline.prototype, \"radius\", void 0);\n\n  __decorate([serialize()], SSAO2RenderingPipeline.prototype, \"base\", void 0);\n\n  return SSAO2RenderingPipeline;\n}(PostProcessRenderPipeline);\n\nexport { SSAO2RenderingPipeline };\n_TypeStore.RegisteredTypes[\"BABYLON.SSAO2RenderingPipeline\"] = SSAO2RenderingPipeline;","map":{"version":3,"sources":["../../../../../sourceES6/core/PostProcesses/RenderPipeline/Pipelines/ssao2RenderingPipeline.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from \"../../../Misc/logger\";\r\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators\";\r\nimport { Vector3, TmpVectors } from \"../../../Maths/math.vector\";\r\nimport { Camera } from \"../../../Cameras/camera\";\r\nimport { Effect } from \"../../../Materials/effect\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\r\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess\";\r\nimport { Scene } from \"../../../scene\";\r\nimport { _TypeStore } from '../../../Misc/typeStore';\r\nimport { EngineStore } from '../../../Engines/engineStore';\r\nimport { SSAO2Configuration } from \"../../../Rendering/ssao2Configuration\";\r\nimport { PrePassRenderer } from \"../../../Rendering/prePassRenderer\";\r\n\r\n\r\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\r\n\r\nimport \"../../../Shaders/ssao2.fragment\";\r\nimport \"../../../Shaders/ssaoCombine.fragment\";\r\n\r\n/**\r\n * Render pipeline to produce ssao effect\r\n */\r\nexport class SSAO2RenderingPipeline extends PostProcessRenderPipeline {\r\n    // Members\r\n\r\n    /**\r\n     * @ignore\r\n    * The PassPostProcess id in the pipeline that contains the original scene color\r\n    */\r\n    public SSAOOriginalSceneColorEffect: string = \"SSAOOriginalSceneColorEffect\";\r\n    /**\r\n     * @ignore\r\n    * The SSAO PostProcess id in the pipeline\r\n    */\r\n    public SSAORenderEffect: string = \"SSAORenderEffect\";\r\n    /**\r\n     * @ignore\r\n    * The horizontal blur PostProcess id in the pipeline\r\n    */\r\n    public SSAOBlurHRenderEffect: string = \"SSAOBlurHRenderEffect\";\r\n    /**\r\n     * @ignore\r\n    * The vertical blur PostProcess id in the pipeline\r\n    */\r\n    public SSAOBlurVRenderEffect: string = \"SSAOBlurVRenderEffect\";\r\n    /**\r\n     * @ignore\r\n    * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\r\n    */\r\n    public SSAOCombineRenderEffect: string = \"SSAOCombineRenderEffect\";\r\n\r\n    /**\r\n    * The output strength of the SSAO post-process. Default value is 1.0.\r\n    */\r\n    @serialize()\r\n    public totalStrength: number = 1.0;\r\n\r\n    /**\r\n    * Maximum depth value to still render AO. A smooth falloff makes the dimming more natural, so there will be no abrupt shading change.\r\n    */\r\n    @serialize()\r\n    public maxZ: number = 100.0;\r\n\r\n    /**\r\n    * In order to save performances, SSAO radius is clamped on close geometry. This ratio changes by how much\r\n    */\r\n    @serialize()\r\n    public minZAspect: number = 0.2;\r\n\r\n    @serialize(\"samples\")\r\n    private _samples: number = 8;\r\n    /**\r\n    * Number of samples used for the SSAO calculations. Default value is 8\r\n    */\r\n    public set samples(n: number) {\r\n        this._samples = n;\r\n        this._ssaoPostProcess.updateEffect(this._getDefinesForSSAO());\r\n        this._sampleSphere = this._generateHemisphere();\r\n    }\r\n    public get samples(): number {\r\n        return this._samples;\r\n    }\r\n\r\n    @serialize(\"textureSamples\")\r\n    private _textureSamples: number = 1;\r\n    /**\r\n    * Number of samples to use for antialiasing\r\n    */\r\n    public set textureSamples(n: number) {\r\n        this._textureSamples = n;\r\n\r\n        this._originalColorPostProcess.samples = n;\r\n        this._blurHPostProcess.samples = n;\r\n        this._blurVPostProcess.samples = n;\r\n        this._ssaoPostProcess.samples = n;\r\n        this._ssaoCombinePostProcess.samples = n;\r\n    }\r\n    public get textureSamples(): number {\r\n        return this._textureSamples;\r\n    }\r\n\r\n    /**\r\n     * Force rendering the geometry through geometry buffer\r\n     */\r\n    private _forceGeometryBuffer: boolean = false;\r\n\r\n    /**\r\n     * Ratio object used for SSAO ratio and blur ratio\r\n     */\r\n    @serialize()\r\n    private _ratio: any;\r\n\r\n    /**\r\n    * Dynamically generated sphere sampler.\r\n    */\r\n    private _sampleSphere: number[];\r\n\r\n    /**\r\n    * Blur filter offsets\r\n    */\r\n    private _samplerOffsets: number[];\r\n\r\n    @serialize(\"expensiveBlur\")\r\n    private _expensiveBlur: boolean = true;\r\n    /**\r\n    * If bilateral blur should be used\r\n    */\r\n    public set expensiveBlur(b: boolean) {\r\n        this._blurHPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\",\r\n            null, [\"textureSampler\", \"depthNormalSampler\"]);\r\n        this._blurVPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\",\r\n            null, [\"textureSampler\", \"depthNormalSampler\"]);\r\n        this._expensiveBlur = b;\r\n    }\r\n\r\n    public get expensiveBlur(): boolean {\r\n        return this._expensiveBlur;\r\n    }\r\n\r\n    /**\r\n    * The radius around the analyzed pixel used by the SSAO post-process. Default value is 2.0\r\n    */\r\n    @serialize()\r\n    public radius: number = 2.0;\r\n\r\n    /**\r\n    * The base color of the SSAO post-process\r\n    * The final result is \"base + ssao\" between [0, 1]\r\n    */\r\n    @serialize()\r\n    public base: number = 0;\r\n\r\n    /**\r\n    *  Support test.\r\n    */\r\n    public static get IsSupported(): boolean {\r\n        var engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            return false;\r\n        }\r\n        return engine.webGLVersion >= 2;\r\n    }\r\n\r\n    private _scene: Scene;\r\n    private _randomTexture: DynamicTexture;\r\n    private _originalColorPostProcess: PassPostProcess;\r\n    private _ssaoPostProcess: PostProcess;\r\n    private _blurHPostProcess: PostProcess;\r\n    private _blurVPostProcess: PostProcess;\r\n    private _ssaoCombinePostProcess: PostProcess;\r\n\r\n    private _prePassRenderer: PrePassRenderer;\r\n\r\n    /**\r\n     * Gets active scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name The rendering pipeline name\r\n     * @param scene The scene linked to this pipeline\r\n     * @param ratio The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, blurRatio: 1.0 }\r\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\r\n     * @param forceGeometryBuffer Set to true if you want to use the legacy geometry buffer renderer\r\n     */\r\n    constructor(name: string, scene: Scene, ratio: any, cameras?: Camera[], forceGeometryBuffer = true) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._scene = scene;\r\n        this._ratio = ratio;\r\n        this._forceGeometryBuffer = forceGeometryBuffer;\r\n\r\n        if (!this.isSupported) {\r\n            Logger.Error(\"SSAO 2 needs WebGL 2 support.\");\r\n            return;\r\n        }\r\n\r\n        var ssaoRatio = this._ratio.ssaoRatio || ratio;\r\n        var blurRatio = this._ratio.blurRatio || ratio;\r\n\r\n        // Set up assets\r\n        if (this._forceGeometryBuffer) {\r\n            scene.enableGeometryBufferRenderer();\r\n        } else {\r\n            this._prePassRenderer = <PrePassRenderer>scene.enablePrePassRenderer();\r\n        }\r\n\r\n        this._createRandomTexture();\r\n\r\n        this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\r\n        this._originalColorPostProcess.samples = this.textureSamples;\r\n        this._createSSAOPostProcess(1.0);\r\n        this._createBlurPostProcess(ssaoRatio, blurRatio);\r\n        this._createSSAOCombinePostProcess(blurRatio);\r\n\r\n        // Set up pipeline\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOOriginalSceneColorEffect, () => { return this._originalColorPostProcess; }, true));\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAORenderEffect, () => { return this._ssaoPostProcess; }, true));\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurHRenderEffect, () => { return this._blurHPostProcess; }, true));\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOBlurVRenderEffect, () => { return this._blurVPostProcess; }, true));\r\n        this.addEffect(new PostProcessRenderEffect(scene.getEngine(), this.SSAOCombineRenderEffect, () => { return this._ssaoCombinePostProcess; }, true));\r\n\r\n        // Finish\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n        if (cameras) {\r\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\r\n        }\r\n    }\r\n\r\n    // Public Methods\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"SSAO2RenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"SSAO2RenderingPipeline\";\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detatches the pipeline from the scene cameras\r\n     */\r\n    public dispose(disableGeometryBufferRenderer: boolean = false): void {\r\n        for (var i = 0; i < this._scene.cameras.length; i++) {\r\n            var camera = this._scene.cameras[i];\r\n\r\n            this._originalColorPostProcess.dispose(camera);\r\n            this._ssaoPostProcess.dispose(camera);\r\n            this._blurHPostProcess.dispose(camera);\r\n            this._blurVPostProcess.dispose(camera);\r\n            this._ssaoCombinePostProcess.dispose(camera);\r\n        }\r\n\r\n        this._randomTexture.dispose();\r\n\r\n        if (disableGeometryBufferRenderer) {\r\n            this._scene.disableGeometryBufferRenderer();\r\n        }\r\n\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    // Private Methods\r\n    private _createBlurPostProcess(ssaoRatio: number, blurRatio: number): void {\r\n        this._samplerOffsets = [];\r\n        var expensive = this.expensiveBlur;\r\n\r\n        for (var i = -8; i < 8; i++) {\r\n            this._samplerOffsets.push(i * 2 + 0.5);\r\n        }\r\n\r\n        this._blurHPostProcess = new PostProcess(\"BlurH\", \"ssao2\", [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"], [\"depthNormalSampler\"], ssaoRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\");\r\n        this._blurHPostProcess.onApply = (effect: Effect) => {\r\n            if (!this._scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            effect.setFloat(\"outSize\", this._ssaoCombinePostProcess.width > 0 ? this._ssaoCombinePostProcess.width : this._originalColorPostProcess.width);\r\n            effect.setFloat(\"near\", this._scene.activeCamera.minZ);\r\n            effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            if (this._forceGeometryBuffer) {\r\n                effect.setTexture(\"depthNormalSampler\", this._scene.enableGeometryBufferRenderer()!.getGBuffer().textures[0]);\r\n            } else {\r\n                effect.setTexture(\"depthNormalSampler\", this._prePassRenderer.prePassRT.textures[this._prePassRenderer.getIndex(5)]);\r\n            }\r\n            effect.setArray(\"samplerOffsets\", this._samplerOffsets);\r\n        };\r\n\r\n        this._blurVPostProcess = new PostProcess(\"BlurV\", \"ssao2\", [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"], [\"depthNormalSampler\"], blurRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_V\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\");\r\n        this._blurVPostProcess.onApply = (effect: Effect) => {\r\n            if (!this._scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            effect.setFloat(\"outSize\", this._ssaoCombinePostProcess.height > 0 ? this._ssaoCombinePostProcess.height : this._originalColorPostProcess.height);\r\n            effect.setFloat(\"near\", this._scene.activeCamera.minZ);\r\n            effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            if (this._forceGeometryBuffer) {\r\n                effect.setTexture(\"depthNormalSampler\", this._scene.enableGeometryBufferRenderer()!.getGBuffer().textures[0]);\r\n            } else {\r\n                effect.setTexture(\"depthNormalSampler\", this._prePassRenderer.prePassRT.textures[this._prePassRenderer.getIndex(5)]);\r\n            }\r\n            effect.setArray(\"samplerOffsets\", this._samplerOffsets);\r\n\r\n        };\r\n\r\n        this._blurHPostProcess.samples = this.textureSamples;\r\n        this._blurVPostProcess.samples = this.textureSamples;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild() {\r\n        super._rebuild();\r\n    }\r\n\r\n    private _bits = new Uint32Array(1);\r\n\r\n    //Van der Corput radical inverse\r\n    private _radicalInverse_VdC(i: number) {\r\n        this._bits[0] = i;\r\n        this._bits[0] = ((this._bits[0] << 16) | (this._bits[0] >> 16)) >>> 0;\r\n        this._bits[0] = ((this._bits[0] & 0x55555555) << 1) | ((this._bits[0] & 0xAAAAAAAA) >>> 1) >>> 0;\r\n        this._bits[0] = ((this._bits[0] & 0x33333333) << 2) | ((this._bits[0] & 0xCCCCCCCC) >>> 2) >>> 0;\r\n        this._bits[0] = ((this._bits[0] & 0x0F0F0F0F) << 4) | ((this._bits[0] & 0xF0F0F0F0) >>> 4) >>> 0;\r\n        this._bits[0] = ((this._bits[0] & 0x00FF00FF) << 8) | ((this._bits[0] & 0xFF00FF00) >>> 8) >>> 0;\r\n        return this._bits[0] * 2.3283064365386963e-10; // / 0x100000000 or / 4294967296\r\n    }\r\n\r\n    private _hammersley(i: number, n: number) {\r\n        return [i / n, this._radicalInverse_VdC(i)];\r\n    }\r\n\r\n    private _hemisphereSample_uniform(u: number, v: number): Vector3 {\r\n        var phi = v * 2.0 * Math.PI;\r\n        // rejecting samples that are close to tangent plane to avoid z-fighting artifacts\r\n        var cosTheta = 1.0 - (u * 0.85 + 0.15);\r\n        var sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);\r\n        return new Vector3(Math.cos(phi) * sinTheta, Math.sin(phi) * sinTheta, cosTheta);\r\n    }\r\n\r\n    private _generateHemisphere(): number[] {\r\n        var numSamples = this.samples;\r\n        var result = [];\r\n        var vector;\r\n\r\n        var i = 0;\r\n        while (i < numSamples) {\r\n            if (numSamples < 16) {\r\n                vector = this._hemisphereSample_uniform(Math.random(), Math.random());\r\n            } else {\r\n                var rand = this._hammersley(i, numSamples);\r\n                vector = this._hemisphereSample_uniform(rand[0], rand[1]);\r\n            }\r\n\r\n            result.push(vector.x, vector.y, vector.z);\r\n            i++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private _getDefinesForSSAO() {\r\n        let defines = \"#define SAMPLES \" + this.samples + \"\\n#define SSAO\";\r\n\r\n        if (this._forceGeometryBuffer) {\r\n            defines = defines + \"\\n#define GEOMETRYBUFFER\";\r\n        }\r\n\r\n        return defines;\r\n    }\r\n\r\n    private _createSSAOPostProcess(ratio: number): void {\r\n        this._sampleSphere = this._generateHemisphere();\r\n\r\n        const defines = this._getDefinesForSSAO();\r\n        let samplers;\r\n\r\n        if (this._forceGeometryBuffer) {\r\n            samplers = [\"randomSampler\", \"depthSampler\", \"normalSampler\"];\r\n        } else {\r\n            samplers = [\"randomSampler\", \"depthNormalSampler\"];\r\n        }\r\n\r\n        this._ssaoPostProcess = new PostProcess(\"ssao2\", \"ssao2\",\r\n            [\r\n                \"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\",\r\n                \"base\", \"range\", \"projection\", \"near\", \"far\", \"texelSize\",\r\n                \"xViewport\", \"yViewport\", \"maxZ\", \"minZAspect\"\r\n            ],\r\n            samplers,\r\n            ratio, null, Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(), false,\r\n            defines);\r\n\r\n        this._ssaoPostProcess.onApply = (effect: Effect) => {\r\n            if (!this._scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            effect.setArray3(\"sampleSphere\", this._sampleSphere);\r\n            effect.setFloat(\"randTextureTiles\", 32.0);\r\n            effect.setFloat(\"samplesFactor\", 1 / this.samples);\r\n            effect.setFloat(\"totalStrength\", this.totalStrength);\r\n            effect.setFloat2(\"texelSize\", 1 / this._ssaoPostProcess.width, 1 / this._ssaoPostProcess.height);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            effect.setFloat(\"maxZ\", this.maxZ);\r\n            effect.setFloat(\"minZAspect\", this.minZAspect);\r\n            effect.setFloat(\"base\", this.base);\r\n            effect.setFloat(\"near\", this._scene.activeCamera.minZ);\r\n            effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\r\n            effect.setFloat(\"xViewport\", Math.tan(this._scene.activeCamera.fov / 2) * this._scene.getEngine().getAspectRatio(this._scene.activeCamera, true));\r\n            effect.setFloat(\"yViewport\", Math.tan(this._scene.activeCamera.fov / 2));\r\n            effect.setMatrix(\"projection\", this._scene.getProjectionMatrix());\r\n\r\n            if (this._forceGeometryBuffer) {\r\n                effect.setTexture(\"depthSampler\", this._scene.enableGeometryBufferRenderer()!.getGBuffer().textures[0]);\r\n                effect.setTexture(\"normalSampler\", this._scene.enableGeometryBufferRenderer()!.getGBuffer().textures[1]);\r\n            } else {\r\n                effect.setTexture(\"depthNormalSampler\", this._prePassRenderer.prePassRT.textures[this._prePassRenderer.getIndex(5)]);\r\n            }\r\n            effect.setTexture(\"randomSampler\", this._randomTexture);\r\n        };\r\n        this._ssaoPostProcess.samples = this.textureSamples;\r\n    }\r\n\r\n    private _createSSAOCombinePostProcess(ratio: number): void {\r\n        this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"],\r\n            ratio, null, Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(), false);\r\n\r\n        this._ssaoCombinePostProcess.onApply = (effect: Effect) => {\r\n            let viewport = this._scene.activeCamera!.viewport;\r\n            effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(viewport.x, viewport.y, viewport.width, viewport.height));\r\n            effect.setTextureFromPostProcessOutput(\"originalColor\", this._originalColorPostProcess);\r\n        };\r\n        this._ssaoCombinePostProcess.samples = this.textureSamples;\r\n\r\n        if (!this._forceGeometryBuffer) {\r\n            this._ssaoCombinePostProcess._prePassEffectConfiguration = new SSAO2Configuration();\r\n        }\r\n    }\r\n\r\n    private _createRandomTexture(): void {\r\n        var size = 128;\r\n\r\n        this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\r\n        this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        var context = this._randomTexture.getContext();\r\n\r\n        var rand = (min: number, max: number) => {\r\n            return Math.random() * (max - min) + min;\r\n        };\r\n\r\n        var randVector = Vector3.Zero();\r\n\r\n        for (var x = 0; x < size; x++) {\r\n            for (var y = 0; y < size; y++) {\r\n                randVector.x = rand(0.0, 1.0);\r\n                randVector.y = rand(0.0, 1.0);\r\n                randVector.z = 0.0;\r\n\r\n                randVector.normalize();\r\n\r\n                randVector.scaleInPlace(255);\r\n                randVector.x = Math.floor(randVector.x);\r\n                randVector.y = Math.floor(randVector.y);\r\n\r\n                context.fillStyle = 'rgb(' + randVector.x + ', ' + randVector.y + ', ' + randVector.z + ')';\r\n                context.fillRect(x, y, 1, 1);\r\n            }\r\n        }\r\n\r\n        this._randomTexture.update(false);\r\n    }\r\n\r\n    /**\r\n     * Serialize the rendering pipeline (Used when exporting)\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"SSAO2RenderingPipeline\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse the serialized pipeline\r\n     * @param source Source pipeline.\r\n     * @param scene The scene to load the pipeline to.\r\n     * @param rootUrl The URL of the serialized pipeline.\r\n     * @returns An instantiated pipeline from the serialized object.\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SSAO2RenderingPipeline {\r\n        return SerializationHelper.Parse(() => new SSAO2RenderingPipeline(source._name, scene, source._ratio), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.SSAO2RenderingPipeline\"] = SSAO2RenderingPipeline;\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}