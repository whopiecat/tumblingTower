{"ast":null,"code":"import { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\nimport { Logger } from '../../Misc/logger';\nimport { ThinEngine } from '../thinEngine';\n\nThinEngine.prototype.restoreSingleAttachment = function () {\n  var gl = this._gl;\n  this.bindAttachments([gl.BACK]);\n};\n\nThinEngine.prototype.buildTextureLayout = function (textureStatus) {\n  var gl = this._gl;\n  var result = [];\n\n  for (var i = 0; i < textureStatus.length; i++) {\n    if (textureStatus[i]) {\n      result.push(gl[\"COLOR_ATTACHMENT\" + i]);\n    } else {\n      result.push(gl.NONE);\n    }\n  }\n\n  return result;\n};\n\nThinEngine.prototype.bindAttachments = function (attachments) {\n  var gl = this._gl;\n  gl.drawBuffers(attachments);\n};\n\nThinEngine.prototype.unBindMultiColorAttachmentFramebuffer = function (textures, disableGenerateMipMaps, onBeforeUnbind) {\n  if (disableGenerateMipMaps === void 0) {\n    disableGenerateMipMaps = false;\n  }\n\n  this._currentRenderTarget = null; // If MSAA, we need to bitblt back to main texture\n\n  var gl = this._gl;\n  var attachments = textures[0]._attachments;\n  var count = attachments.length;\n\n  if (textures[0]._MSAAFramebuffer) {\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, textures[0]._MSAAFramebuffer);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, textures[0]._framebuffer);\n\n    for (var i = 0; i < count; i++) {\n      var texture = textures[i];\n\n      for (var j = 0; j < count; j++) {\n        attachments[j] = gl.NONE;\n      }\n\n      attachments[i] = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n      gl.readBuffer(attachments[i]);\n      gl.drawBuffers(attachments);\n      gl.blitFramebuffer(0, 0, texture.width, texture.height, 0, 0, texture.width, texture.height, gl.COLOR_BUFFER_BIT, gl.NEAREST);\n    }\n\n    for (var i = 0; i < count; i++) {\n      attachments[i] = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n    }\n\n    gl.drawBuffers(attachments);\n  }\n\n  for (var i = 0; i < count; i++) {\n    var texture = textures[i];\n\n    if (texture.generateMipMaps && !disableGenerateMipMaps && !texture.isCube) {\n      this._bindTextureDirectly(gl.TEXTURE_2D, texture, true);\n\n      gl.generateMipmap(gl.TEXTURE_2D);\n\n      this._bindTextureDirectly(gl.TEXTURE_2D, null);\n    }\n  }\n\n  if (onBeforeUnbind) {\n    if (textures[0]._MSAAFramebuffer) {\n      // Bind the correct framebuffer\n      this._bindUnboundFramebuffer(textures[0]._framebuffer);\n    }\n\n    onBeforeUnbind();\n  }\n\n  this._bindUnboundFramebuffer(null);\n};\n\nThinEngine.prototype.createMultipleRenderTarget = function (size, options) {\n  var generateMipMaps = false;\n  var generateDepthBuffer = true;\n  var generateStencilBuffer = false;\n  var generateDepthTexture = false;\n  var textureCount = 1;\n  var defaultType = 0;\n  var defaultSamplingMode = 3;\n  var types = new Array();\n  var samplingModes = new Array();\n\n  if (options !== undefined) {\n    generateMipMaps = options.generateMipMaps === undefined ? false : options.generateMipMaps;\n    generateDepthBuffer = options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\n    generateStencilBuffer = options.generateStencilBuffer === undefined ? false : options.generateStencilBuffer;\n    generateDepthTexture = options.generateDepthTexture === undefined ? false : options.generateDepthTexture;\n    textureCount = options.textureCount || 1;\n\n    if (options.types) {\n      types = options.types;\n    }\n\n    if (options.samplingModes) {\n      samplingModes = options.samplingModes;\n    }\n  }\n\n  var gl = this._gl; // Create the framebuffer\n\n  var framebuffer = gl.createFramebuffer();\n\n  this._bindUnboundFramebuffer(framebuffer);\n\n  var width = size.width || size;\n  var height = size.height || size;\n  var textures = [];\n  var attachments = [];\n\n  var depthStencilBuffer = this._setupFramebufferDepthAttachments(generateStencilBuffer, generateDepthBuffer, width, height);\n\n  for (var i = 0; i < textureCount; i++) {\n    var samplingMode = samplingModes[i] || defaultSamplingMode;\n    var type = types[i] || defaultType;\n\n    if (type === 1 && !this._caps.textureFloatLinearFiltering) {\n      // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n      samplingMode = 1;\n    } else if (type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n      // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n      samplingMode = 1;\n    }\n\n    var filters = this._getSamplingParameters(samplingMode, generateMipMaps);\n\n    if (type === 1 && !this._caps.textureFloat) {\n      type = 0;\n      Logger.Warn(\"Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type\");\n    }\n\n    var texture = new InternalTexture(this, InternalTextureSource.MultiRenderTarget);\n    var attachment = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n    textures.push(texture);\n    attachments.push(attachment);\n    gl.activeTexture(gl[\"TEXTURE\" + i]);\n    gl.bindTexture(gl.TEXTURE_2D, texture._webGLTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filters.mag);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filters.min);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, this._getRGBABufferInternalSizedFormat(type), width, height, 0, gl.RGBA, this._getWebGLTextureType(type), null);\n    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture._webGLTexture, 0);\n\n    if (generateMipMaps) {\n      this._gl.generateMipmap(this._gl.TEXTURE_2D);\n    } // Unbind\n\n\n    this._bindTextureDirectly(gl.TEXTURE_2D, null);\n\n    texture._framebuffer = framebuffer;\n    texture._depthStencilBuffer = depthStencilBuffer;\n    texture.baseWidth = width;\n    texture.baseHeight = height;\n    texture.width = width;\n    texture.height = height;\n    texture.isReady = true;\n    texture.samples = 1;\n    texture.generateMipMaps = generateMipMaps;\n    texture.samplingMode = samplingMode;\n    texture.type = type;\n    texture._generateDepthBuffer = generateDepthBuffer;\n    texture._generateStencilBuffer = generateStencilBuffer;\n    texture._attachments = attachments;\n    texture._textureArray = textures;\n\n    this._internalTexturesCache.push(texture);\n  }\n\n  if (generateDepthTexture && this._caps.depthTextureExtension) {\n    // Depth texture\n    var depthTexture = new InternalTexture(this, InternalTextureSource.MultiRenderTarget);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, depthTexture._webGLTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.webGLVersion < 2 ? gl.DEPTH_COMPONENT : gl.DEPTH_COMPONENT16, width, height, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, null);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture._webGLTexture, 0);\n    depthTexture._framebuffer = framebuffer;\n    depthTexture.baseWidth = width;\n    depthTexture.baseHeight = height;\n    depthTexture.width = width;\n    depthTexture.height = height;\n    depthTexture.isReady = true;\n    depthTexture.samples = 1;\n    depthTexture.generateMipMaps = generateMipMaps;\n    depthTexture.samplingMode = gl.NEAREST;\n    depthTexture._generateDepthBuffer = generateDepthBuffer;\n    depthTexture._generateStencilBuffer = generateStencilBuffer;\n    textures.push(depthTexture);\n\n    this._internalTexturesCache.push(depthTexture);\n  }\n\n  gl.drawBuffers(attachments);\n\n  this._bindUnboundFramebuffer(null);\n\n  this.resetTextureCache();\n  return textures;\n};\n\nThinEngine.prototype.updateMultipleRenderTargetTextureSampleCount = function (textures, samples) {\n  if (this.webGLVersion < 2 || !textures) {\n    return 1;\n  }\n\n  if (textures[0].samples === samples) {\n    return samples;\n  }\n\n  var count = textures[0]._attachments.length;\n\n  if (count === 0) {\n    return 1;\n  }\n\n  var gl = this._gl;\n  samples = Math.min(samples, this.getCaps().maxMSAASamples); // Dispose previous render buffers\n\n  if (textures[0]._depthStencilBuffer) {\n    gl.deleteRenderbuffer(textures[0]._depthStencilBuffer);\n    textures[0]._depthStencilBuffer = null;\n  }\n\n  if (textures[0]._MSAAFramebuffer) {\n    gl.deleteFramebuffer(textures[0]._MSAAFramebuffer);\n    textures[0]._MSAAFramebuffer = null;\n  }\n\n  for (var i = 0; i < count; i++) {\n    if (textures[i]._MSAARenderBuffer) {\n      gl.deleteRenderbuffer(textures[i]._MSAARenderBuffer);\n      textures[i]._MSAARenderBuffer = null;\n    }\n  }\n\n  if (samples > 1 && gl.renderbufferStorageMultisample) {\n    var framebuffer = gl.createFramebuffer();\n\n    if (!framebuffer) {\n      throw new Error(\"Unable to create multi sampled framebuffer\");\n    }\n\n    this._bindUnboundFramebuffer(framebuffer);\n\n    var depthStencilBuffer = this._setupFramebufferDepthAttachments(textures[0]._generateStencilBuffer, textures[0]._generateDepthBuffer, textures[0].width, textures[0].height, samples);\n\n    var attachments = [];\n\n    for (var i = 0; i < count; i++) {\n      var texture = textures[i];\n      var attachment = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n      var colorRenderbuffer = gl.createRenderbuffer();\n\n      if (!colorRenderbuffer) {\n        throw new Error(\"Unable to create multi sampled framebuffer\");\n      }\n\n      gl.bindRenderbuffer(gl.RENDERBUFFER, colorRenderbuffer);\n      gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, this._getRGBAMultiSampleBufferFormat(texture.type), texture.width, texture.height);\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, colorRenderbuffer);\n      texture._MSAAFramebuffer = framebuffer;\n      texture._MSAARenderBuffer = colorRenderbuffer;\n      texture.samples = samples;\n      texture._depthStencilBuffer = depthStencilBuffer;\n      gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n      attachments.push(attachment);\n    }\n\n    gl.drawBuffers(attachments);\n  } else {\n    this._bindUnboundFramebuffer(textures[0]._framebuffer);\n  }\n\n  this._bindUnboundFramebuffer(null);\n\n  return samples;\n};","map":{"version":3,"sources":["../../../../sourceES6/core/Engines/Extensions/engine.multiRender.ts"],"names":[],"mappings":"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","sourcesContent":["import { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\r\nimport { IMultiRenderTargetOptions } from '../../Materials/Textures/multiRenderTarget';\r\nimport { Logger } from '../../Misc/logger';\r\nimport { Nullable } from '../../types';\r\n\r\nimport { ThinEngine } from '../thinEngine';\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Unbind a list of render target textures from the webGL context\r\n         * This is used only when drawBuffer extension or webGL2 are active\r\n         * @param textures defines the render target textures to unbind\r\n         * @param disableGenerateMipMaps defines a boolean indicating that mipmaps must not be generated\r\n         * @param onBeforeUnbind defines a function which will be called before the effective unbind\r\n         */\r\n        unBindMultiColorAttachmentFramebuffer(textures: InternalTexture[], disableGenerateMipMaps: boolean, onBeforeUnbind?: () => void): void;\r\n\r\n        /**\r\n         * Create a multi render target texture\r\n         * @see https://doc.babylonjs.com/features/webgl2#multiple-render-target\r\n         * @param size defines the size of the texture\r\n         * @param options defines the creation options\r\n         * @returns the cube texture as an InternalTexture\r\n         */\r\n        createMultipleRenderTarget(size: any, options: IMultiRenderTargetOptions): InternalTexture[];\r\n\r\n        /**\r\n         * Update the sample count for a given multiple render target texture\r\n         * @see https://doc.babylonjs.com/features/webgl2#multisample-render-targets\r\n         * @param textures defines the textures to update\r\n         * @param samples defines the sample count to set\r\n         * @returns the effective sample count (could be 0 if multisample render targets are not supported)\r\n         */\r\n        updateMultipleRenderTargetTextureSampleCount(textures: Nullable<InternalTexture[]>, samples: number): number;\r\n\r\n        /**\r\n         * Select a subsets of attachments to draw to.\r\n         * @param attachments gl attachments\r\n         */\r\n        bindAttachments(attachments: number[]) : void;\r\n\r\n        /**\r\n         * Creates a layout object to draw/clear on specific textures in a MRT\r\n         * @param textureStatus textureStatus[i] indicates if the i-th is active\r\n         * @returns A layout to be fed to the engine, calling `bindAttachments`.\r\n         */\r\n        buildTextureLayout(textureStatus: boolean[]) : number[];\r\n\r\n        /**\r\n         * Restores the webgl state to only draw on the main color attachment\r\n         */\r\n        restoreSingleAttachment() : void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.restoreSingleAttachment = function(): void {\r\n    const gl = this._gl;\r\n\r\n    this.bindAttachments([gl.BACK]);\r\n};\r\n\r\nThinEngine.prototype.buildTextureLayout = function(textureStatus: boolean[]): number[] {\r\n    const gl = this._gl;\r\n\r\n    const result = [];\r\n\r\n    for (let i = 0; i < textureStatus.length; i++) {\r\n        if (textureStatus[i]) {\r\n            result.push((<any>gl)[\"COLOR_ATTACHMENT\" + i]);\r\n        } else {\r\n            result.push(gl.NONE);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nThinEngine.prototype.bindAttachments = function(attachments: number[]): void {\r\n    const gl = this._gl;\r\n\r\n    gl.drawBuffers(attachments);\r\n};\r\n\r\nThinEngine.prototype.unBindMultiColorAttachmentFramebuffer = function(textures: InternalTexture[], disableGenerateMipMaps: boolean = false, onBeforeUnbind?: () => void): void {\r\n    this._currentRenderTarget = null;\r\n\r\n    // If MSAA, we need to bitblt back to main texture\r\n    var gl = this._gl;\r\n\r\n    var attachments = textures[0]._attachments!;\r\n    var count = attachments.length;\r\n\r\n    if (textures[0]._MSAAFramebuffer) {\r\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, textures[0]._MSAAFramebuffer);\r\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, textures[0]._framebuffer);\r\n\r\n        for (var i = 0; i < count; i++) {\r\n            var texture = textures[i];\r\n\r\n            for (var j = 0; j < count; j++) {\r\n                attachments[j] = gl.NONE;\r\n            }\r\n\r\n            attachments[i] = (<any>gl)[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\r\n            gl.readBuffer(attachments[i]);\r\n            gl.drawBuffers(attachments);\r\n            gl.blitFramebuffer(0, 0, texture.width, texture.height,\r\n                0, 0, texture.width, texture.height,\r\n                gl.COLOR_BUFFER_BIT, gl.NEAREST);\r\n\r\n        }\r\n\r\n        for (var i = 0; i < count; i++) {\r\n            attachments[i] = (<any>gl)[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\r\n        }\r\n\r\n        gl.drawBuffers(attachments);\r\n    }\r\n\r\n    for (var i = 0; i < count; i++) {\r\n        var texture = textures[i];\r\n        if (texture.generateMipMaps && !disableGenerateMipMaps && !texture.isCube) {\r\n            this._bindTextureDirectly(gl.TEXTURE_2D, texture, true);\r\n            gl.generateMipmap(gl.TEXTURE_2D);\r\n            this._bindTextureDirectly(gl.TEXTURE_2D, null);\r\n        }\r\n    }\r\n\r\n    if (onBeforeUnbind) {\r\n        if (textures[0]._MSAAFramebuffer) {\r\n            // Bind the correct framebuffer\r\n            this._bindUnboundFramebuffer(textures[0]._framebuffer);\r\n        }\r\n        onBeforeUnbind();\r\n    }\r\n\r\n    this._bindUnboundFramebuffer(null);\r\n};\r\n\r\nThinEngine.prototype.createMultipleRenderTarget = function(size: any, options: IMultiRenderTargetOptions): InternalTexture[] {\r\n    var generateMipMaps = false;\r\n    var generateDepthBuffer = true;\r\n    var generateStencilBuffer = false;\r\n    var generateDepthTexture = false;\r\n    var textureCount = 1;\r\n\r\n    var defaultType = 0;\r\n    var defaultSamplingMode = 3;\r\n\r\n    var types = new Array<number>();\r\n    var samplingModes = new Array<number>();\r\n\r\n    if (options !== undefined) {\r\n        generateMipMaps = options.generateMipMaps === undefined ? false : options.generateMipMaps;\r\n        generateDepthBuffer = options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\r\n        generateStencilBuffer = options.generateStencilBuffer === undefined ? false : options.generateStencilBuffer;\r\n        generateDepthTexture = options.generateDepthTexture === undefined ? false : options.generateDepthTexture;\r\n        textureCount = options.textureCount || 1;\r\n\r\n        if (options.types) {\r\n            types = options.types;\r\n        }\r\n        if (options.samplingModes) {\r\n            samplingModes = options.samplingModes;\r\n        }\r\n\r\n    }\r\n    var gl = this._gl;\r\n    // Create the framebuffer\r\n    var framebuffer = gl.createFramebuffer();\r\n    this._bindUnboundFramebuffer(framebuffer);\r\n\r\n    var width = size.width || size;\r\n    var height = size.height || size;\r\n\r\n    var textures = [];\r\n    var attachments = [];\r\n\r\n    var depthStencilBuffer = this._setupFramebufferDepthAttachments(generateStencilBuffer, generateDepthBuffer, width, height);\r\n\r\n    for (var i = 0; i < textureCount; i++) {\r\n        var samplingMode = samplingModes[i] || defaultSamplingMode;\r\n        var type = types[i] || defaultType;\r\n\r\n        if (type === 1 && !this._caps.textureFloatLinearFiltering) {\r\n            // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\r\n            samplingMode = 1;\r\n        }\r\n        else if (type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\r\n            // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\r\n            samplingMode = 1;\r\n        }\r\n\r\n        var filters = this._getSamplingParameters(samplingMode, generateMipMaps);\r\n        if (type === 1 && !this._caps.textureFloat) {\r\n            type = 0;\r\n            Logger.Warn(\"Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type\");\r\n        }\r\n\r\n        var texture = new InternalTexture(this, InternalTextureSource.MultiRenderTarget);\r\n        var attachment = (<any>gl)[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\r\n\r\n        textures.push(texture);\r\n        attachments.push(attachment);\r\n\r\n        gl.activeTexture((<any>gl)[\"TEXTURE\" + i]);\r\n        gl.bindTexture(gl.TEXTURE_2D, texture._webGLTexture);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filters.mag);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filters.min);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, this._getRGBABufferInternalSizedFormat(type), width, height, 0, gl.RGBA, this._getWebGLTextureType(type), null);\r\n\r\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture._webGLTexture, 0);\r\n\r\n        if (generateMipMaps) {\r\n            this._gl.generateMipmap(this._gl.TEXTURE_2D);\r\n        }\r\n\r\n        // Unbind\r\n        this._bindTextureDirectly(gl.TEXTURE_2D, null);\r\n\r\n        texture._framebuffer = framebuffer;\r\n        texture._depthStencilBuffer = depthStencilBuffer;\r\n        texture.baseWidth = width;\r\n        texture.baseHeight = height;\r\n        texture.width = width;\r\n        texture.height = height;\r\n        texture.isReady = true;\r\n        texture.samples = 1;\r\n        texture.generateMipMaps = generateMipMaps;\r\n        texture.samplingMode = samplingMode;\r\n        texture.type = type;\r\n        texture._generateDepthBuffer = generateDepthBuffer;\r\n        texture._generateStencilBuffer = generateStencilBuffer;\r\n        texture._attachments = attachments;\r\n        texture._textureArray = textures;\r\n\r\n        this._internalTexturesCache.push(texture);\r\n    }\r\n\r\n    if (generateDepthTexture && this._caps.depthTextureExtension) {\r\n        // Depth texture\r\n        var depthTexture = new InternalTexture(this, InternalTextureSource.MultiRenderTarget);\r\n\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, depthTexture._webGLTexture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            this.webGLVersion < 2 ? gl.DEPTH_COMPONENT : gl.DEPTH_COMPONENT16,\r\n            width,\r\n            height,\r\n            0,\r\n            gl.DEPTH_COMPONENT,\r\n            gl.UNSIGNED_SHORT,\r\n            null\r\n        );\r\n\r\n        gl.framebufferTexture2D(\r\n            gl.FRAMEBUFFER,\r\n            gl.DEPTH_ATTACHMENT,\r\n            gl.TEXTURE_2D,\r\n            depthTexture._webGLTexture,\r\n            0\r\n        );\r\n\r\n        depthTexture._framebuffer = framebuffer;\r\n        depthTexture.baseWidth = width;\r\n        depthTexture.baseHeight = height;\r\n        depthTexture.width = width;\r\n        depthTexture.height = height;\r\n        depthTexture.isReady = true;\r\n        depthTexture.samples = 1;\r\n        depthTexture.generateMipMaps = generateMipMaps;\r\n        depthTexture.samplingMode = gl.NEAREST;\r\n        depthTexture._generateDepthBuffer = generateDepthBuffer;\r\n        depthTexture._generateStencilBuffer = generateStencilBuffer;\r\n\r\n        textures.push(depthTexture);\r\n        this._internalTexturesCache.push(depthTexture);\r\n    }\r\n\r\n    gl.drawBuffers(attachments);\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    this.resetTextureCache();\r\n\r\n    return textures;\r\n};\r\n\r\nThinEngine.prototype.updateMultipleRenderTargetTextureSampleCount = function(textures: Nullable<InternalTexture[]>, samples: number): number {\r\n    if (this.webGLVersion < 2 || !textures) {\r\n        return 1;\r\n    }\r\n\r\n    if (textures[0].samples === samples) {\r\n        return samples;\r\n    }\r\n\r\n    var count = textures[0]._attachments!.length;\r\n\r\n    if (count === 0) {\r\n        return 1;\r\n    }\r\n\r\n    var gl = this._gl;\r\n\r\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\r\n\r\n    // Dispose previous render buffers\r\n    if (textures[0]._depthStencilBuffer) {\r\n        gl.deleteRenderbuffer(textures[0]._depthStencilBuffer);\r\n        textures[0]._depthStencilBuffer = null;\r\n    }\r\n\r\n    if (textures[0]._MSAAFramebuffer) {\r\n        gl.deleteFramebuffer(textures[0]._MSAAFramebuffer);\r\n        textures[0]._MSAAFramebuffer = null;\r\n    }\r\n\r\n    for (var i = 0; i < count; i++) {\r\n        if (textures[i]._MSAARenderBuffer) {\r\n            gl.deleteRenderbuffer(textures[i]._MSAARenderBuffer);\r\n            textures[i]._MSAARenderBuffer = null;\r\n        }\r\n    }\r\n\r\n    if (samples > 1 && gl.renderbufferStorageMultisample) {\r\n        let framebuffer = gl.createFramebuffer();\r\n\r\n        if (!framebuffer) {\r\n            throw new Error(\"Unable to create multi sampled framebuffer\");\r\n        }\r\n\r\n        this._bindUnboundFramebuffer(framebuffer);\r\n\r\n        let depthStencilBuffer = this._setupFramebufferDepthAttachments(textures[0]._generateStencilBuffer, textures[0]._generateDepthBuffer, textures[0].width, textures[0].height, samples);\r\n\r\n        var attachments = [];\r\n\r\n        for (var i = 0; i < count; i++) {\r\n            var texture = textures[i];\r\n            var attachment = (<any>gl)[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\r\n\r\n            var colorRenderbuffer = gl.createRenderbuffer();\r\n\r\n            if (!colorRenderbuffer) {\r\n                throw new Error(\"Unable to create multi sampled framebuffer\");\r\n            }\r\n\r\n            gl.bindRenderbuffer(gl.RENDERBUFFER, colorRenderbuffer);\r\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, this._getRGBAMultiSampleBufferFormat(texture.type), texture.width, texture.height);\r\n\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, colorRenderbuffer);\r\n\r\n            texture._MSAAFramebuffer = framebuffer;\r\n            texture._MSAARenderBuffer = colorRenderbuffer;\r\n            texture.samples = samples;\r\n            texture._depthStencilBuffer = depthStencilBuffer;\r\n            gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n            attachments.push(attachment);\r\n        }\r\n        gl.drawBuffers(attachments);\r\n    } else {\r\n        this._bindUnboundFramebuffer(textures[0]._framebuffer);\r\n    }\r\n\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    return samples;\r\n};\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}