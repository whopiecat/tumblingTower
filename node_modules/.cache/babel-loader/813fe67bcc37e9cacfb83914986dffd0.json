{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ShaderDefineExpression } from \"../shaderDefineExpression\";\n/** @hidden */\n\nvar ShaderDefineIsDefinedOperator =\n/** @class */\nfunction (_super) {\n  __extends(ShaderDefineIsDefinedOperator, _super);\n\n  function ShaderDefineIsDefinedOperator(define, not) {\n    if (not === void 0) {\n      not = false;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.define = define;\n    _this.not = not;\n    return _this;\n  }\n\n  ShaderDefineIsDefinedOperator.prototype.isTrue = function (preprocessors) {\n    var condition = preprocessors[this.define] !== undefined;\n\n    if (this.not) {\n      condition = !condition;\n    }\n\n    return condition;\n  };\n\n  return ShaderDefineIsDefinedOperator;\n}(ShaderDefineExpression);\n\nexport { ShaderDefineIsDefinedOperator };","map":{"version":3,"sources":["../../../../../../sourceES6/core/Engines/Processors/Expressions/Operators/shaderDefineIsDefinedOperator.ts"],"names":[],"mappings":";AAAA,SAAS,sBAAT,QAAuC,2BAAvC;AAEA;;AACA,IAAA,6BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmD,EAAA,SAAA,CAAA,6BAAA,EAAA,MAAA,CAAA;;AAE/C,WAAA,6BAAA,CAA0B,MAA1B,EAAiD,GAAjD,EAAqE;AAApB,QAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,GAAA,GAAA,KAAA;AAAoB;;AAArE,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAA0B,IAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AAAuB,IAAA,KAAA,CAAA,GAAA,GAAA,GAAA;;AAEhD;;AAEM,EAAA,6BAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,aAAd,EAAsD;AAClD,QAAI,SAAS,GAAG,aAAa,CAAC,KAAK,MAAN,CAAb,KAA+B,SAA/C;;AAEA,QAAI,KAAK,GAAT,EAAc;AACV,MAAA,SAAS,GAAG,CAAC,SAAb;AACH;;AAED,WAAO,SAAP;AACH,GARM;;AASX,SAAA,6BAAA;AAAC,CAfD,CAAmD,sBAAnD,CAAA","sourcesContent":["import { ShaderDefineExpression } from \"../shaderDefineExpression\";\r\n\r\n/** @hidden */\r\nexport class ShaderDefineIsDefinedOperator extends ShaderDefineExpression {\r\n\r\n    public constructor(public define: string, public not: boolean = false) {\r\n        super();\r\n    }\r\n\r\n    public isTrue(preprocessors: { [key: string]: string }) {\r\n        let condition = preprocessors[this.define] !== undefined;\r\n\r\n        if (this.not) {\r\n            condition = !condition;\r\n        }\r\n\r\n        return condition;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}