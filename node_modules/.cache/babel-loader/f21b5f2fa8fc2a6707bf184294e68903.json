{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\nimport { Observable } from \"../../Misc/observable\";\nimport { Vector3, Matrix } from \"../../Maths/math.vector\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\nimport { Tools } from \"../../Misc/tools\";\n/**\r\n * The currently-working hit-test module.\r\n * Hit test (or Ray-casting) is used to interact with the real world.\r\n * For further information read here - https://github.com/immersive-web/hit-test\r\n */\n\nvar WebXRHitTestLegacy =\n/** @class */\nfunction (_super) {\n  __extends(WebXRHitTestLegacy, _super);\n  /**\r\n   * Creates a new instance of the (legacy version) hit test feature\r\n   * @param _xrSessionManager an instance of WebXRSessionManager\r\n   * @param options options to use when constructing this feature\r\n   */\n\n\n  function WebXRHitTestLegacy(_xrSessionManager,\n  /**\r\n   * options to use when constructing this feature\r\n   */\n  options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, _xrSessionManager) || this;\n\n    _this.options = options; // in XR space z-forward is negative\n\n    _this._direction = new Vector3(0, 0, -1);\n    _this._mat = new Matrix();\n    _this._onSelectEnabled = false;\n    _this._origin = new Vector3(0, 0, 0);\n    /**\r\n     * Populated with the last native XR Hit Results\r\n     */\n\n    _this.lastNativeXRHitResults = [];\n    /**\r\n     * Triggered when new babylon (transformed) hit test results are available\r\n     */\n\n    _this.onHitTestResultObservable = new Observable();\n\n    _this._onHitTestResults = function (xrResults) {\n      var mats = xrResults.map(function (result) {\n        var mat = Matrix.FromArray(result.hitMatrix);\n\n        if (!_this._xrSessionManager.scene.useRightHandedSystem) {\n          mat.toggleModelMatrixHandInPlace();\n        } // if (this.options.coordinatesSpace === Space.WORLD) {\n\n\n        if (_this.options.worldParentNode) {\n          mat.multiplyToRef(_this.options.worldParentNode.getWorldMatrix(), mat);\n        }\n\n        return {\n          xrHitResult: result,\n          transformationMatrix: mat\n        };\n      });\n      _this.lastNativeXRHitResults = xrResults;\n\n      _this.onHitTestResultObservable.notifyObservers(mats);\n    }; // can be done using pointerdown event, and xrSessionManager.currentFrame\n\n\n    _this._onSelect = function (event) {\n      if (!_this._onSelectEnabled) {\n        return;\n      }\n\n      WebXRHitTestLegacy.XRHitTestWithSelectEvent(event, _this._xrSessionManager.referenceSpace);\n    };\n\n    _this.xrNativeFeatureName = \"hit-test\";\n    Tools.Warn(\"A newer version of this plugin is available\");\n    return _this;\n  }\n  /**\r\n   * execute a hit test with an XR Ray\r\n   *\r\n   * @param xrSession a native xrSession that will execute this hit test\r\n   * @param xrRay the ray (position and direction) to use for ray-casting\r\n   * @param referenceSpace native XR reference space to use for the hit-test\r\n   * @param filter filter function that will filter the results\r\n   * @returns a promise that resolves with an array of native XR hit result in xr coordinates system\r\n   */\n\n\n  WebXRHitTestLegacy.XRHitTestWithRay = function (xrSession, xrRay, referenceSpace, filter) {\n    return xrSession.requestHitTest(xrRay, referenceSpace).then(function (results) {\n      var filterFunction = filter || function (result) {\n        return !!result.hitMatrix;\n      };\n\n      return results.filter(filterFunction);\n    });\n  };\n  /**\r\n   * Execute a hit test on the current running session using a select event returned from a transient input (such as touch)\r\n   * @param event the (select) event to use to select with\r\n   * @param referenceSpace the reference space to use for this hit test\r\n   * @returns a promise that resolves with an array of native XR hit result in xr coordinates system\r\n   */\n\n\n  WebXRHitTestLegacy.XRHitTestWithSelectEvent = function (event, referenceSpace) {\n    var targetRayPose = event.frame.getPose(event.inputSource.targetRaySpace, referenceSpace);\n\n    if (!targetRayPose) {\n      return Promise.resolve([]);\n    }\n\n    var targetRay = new XRRay(targetRayPose.transform);\n    return this.XRHitTestWithRay(event.frame.session, targetRay, referenceSpace);\n  };\n  /**\r\n   * attach this feature\r\n   * Will usually be called by the features manager\r\n   *\r\n   * @returns true if successful.\r\n   */\n\n\n  WebXRHitTestLegacy.prototype.attach = function () {\n    if (!_super.prototype.attach.call(this)) {\n      return false;\n    }\n\n    if (this.options.testOnPointerDownOnly) {\n      this._xrSessionManager.session.addEventListener(\"select\", this._onSelect, false);\n    }\n\n    return true;\n  };\n  /**\r\n   * detach this feature.\r\n   * Will usually be called by the features manager\r\n   *\r\n   * @returns true if successful.\r\n   */\n\n\n  WebXRHitTestLegacy.prototype.detach = function () {\n    if (!_super.prototype.detach.call(this)) {\n      return false;\n    } // disable select\n\n\n    this._onSelectEnabled = false;\n\n    this._xrSessionManager.session.removeEventListener(\"select\", this._onSelect);\n\n    return true;\n  };\n  /**\r\n   * Dispose this feature and all of the resources attached\r\n   */\n\n\n  WebXRHitTestLegacy.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onHitTestResultObservable.clear();\n  };\n\n  WebXRHitTestLegacy.prototype._onXRFrame = function (frame) {\n    // make sure we do nothing if (async) not attached\n    if (!this.attached || this.options.testOnPointerDownOnly) {\n      return;\n    }\n\n    var pose = frame.getViewerPose(this._xrSessionManager.referenceSpace);\n\n    if (!pose) {\n      return;\n    }\n\n    Matrix.FromArrayToRef(pose.transform.matrix, 0, this._mat);\n    Vector3.TransformCoordinatesFromFloatsToRef(0, 0, 0, this._mat, this._origin);\n    Vector3.TransformCoordinatesFromFloatsToRef(0, 0, -1, this._mat, this._direction);\n\n    this._direction.subtractInPlace(this._origin);\n\n    this._direction.normalize();\n\n    var ray = new XRRay({\n      x: this._origin.x,\n      y: this._origin.y,\n      z: this._origin.z,\n      w: 0\n    }, {\n      x: this._direction.x,\n      y: this._direction.y,\n      z: this._direction.z,\n      w: 0\n    });\n    WebXRHitTestLegacy.XRHitTestWithRay(this._xrSessionManager.session, ray, this._xrSessionManager.referenceSpace).then(this._onHitTestResults);\n  };\n  /**\r\n   * The module's name\r\n   */\n\n\n  WebXRHitTestLegacy.Name = WebXRFeatureName.HIT_TEST;\n  /**\r\n   * The (Babylon) version of this module.\r\n   * This is an integer representing the implementation version.\r\n   * This number does not correspond to the WebXR specs version\r\n   */\n\n  WebXRHitTestLegacy.Version = 1;\n  return WebXRHitTestLegacy;\n}(WebXRAbstractFeature);\n\nexport { WebXRHitTestLegacy }; //register the plugin versions\n\nWebXRFeaturesManager.AddWebXRFeature(WebXRHitTestLegacy.Name, function (xrSessionManager, options) {\n  return function () {\n    return new WebXRHitTestLegacy(xrSessionManager, options);\n  };\n}, WebXRHitTestLegacy.Version, false);","map":{"version":3,"sources":["../../../../sourceES6/core/XR/features/WebXRHitTestLegacy.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebXRFeaturesManager, WebXRFeatureName, IWebXRFeature } from \"../webXRFeaturesManager\";\r\nimport { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Vector3, Matrix } from \"../../Maths/math.vector\";\r\nimport { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n// the plugin is registered at the end of the file\r\n\r\n/**\r\n * An interface for all Hit test features\r\n */\r\nexport interface IWebXRHitTestFeature<T extends IWebXRLegacyHitResult> extends IWebXRFeature {\r\n    /**\r\n     * Triggered when new babylon (transformed) hit test results are available\r\n     */\r\n    onHitTestResultObservable: Observable<T[]>;\r\n}\r\n\r\n/**\r\n * Options used for hit testing\r\n */\r\nexport interface IWebXRLegacyHitTestOptions {\r\n    /**\r\n     * Only test when user interacted with the scene. Default - hit test every frame\r\n     */\r\n    testOnPointerDownOnly?: boolean;\r\n    /**\r\n     * The node to use to transform the local results to world coordinates\r\n     */\r\n    worldParentNode?: TransformNode;\r\n}\r\n\r\n/**\r\n * Interface defining the babylon result of raycasting/hit-test\r\n */\r\nexport interface IWebXRLegacyHitResult {\r\n    /**\r\n     * Transformation matrix that can be applied to a node that will put it in the hit point location\r\n     */\r\n    transformationMatrix: Matrix;\r\n    /**\r\n     * The native hit test result\r\n     */\r\n    xrHitResult: XRHitResult | XRHitTestResult;\r\n}\r\n\r\n/**\r\n * The currently-working hit-test module.\r\n * Hit test (or Ray-casting) is used to interact with the real world.\r\n * For further information read here - https://github.com/immersive-web/hit-test\r\n */\r\nexport class WebXRHitTestLegacy extends WebXRAbstractFeature implements IWebXRHitTestFeature<IWebXRLegacyHitResult> {\r\n    // in XR space z-forward is negative\r\n    private _direction = new Vector3(0, 0, -1);\r\n    private _mat = new Matrix();\r\n    private _onSelectEnabled = false;\r\n    private _origin = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.HIT_TEST;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /**\r\n     * Populated with the last native XR Hit Results\r\n     */\r\n    public lastNativeXRHitResults: XRHitResult[] = [];\r\n    /**\r\n     * Triggered when new babylon (transformed) hit test results are available\r\n     */\r\n    public onHitTestResultObservable: Observable<IWebXRLegacyHitResult[]> = new Observable();\r\n\r\n    /**\r\n     * Creates a new instance of the (legacy version) hit test feature\r\n     * @param _xrSessionManager an instance of WebXRSessionManager\r\n     * @param options options to use when constructing this feature\r\n     */\r\n    constructor(\r\n        _xrSessionManager: WebXRSessionManager,\r\n        /**\r\n         * options to use when constructing this feature\r\n         */\r\n        public readonly options: IWebXRLegacyHitTestOptions = {}\r\n    ) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"hit-test\";\r\n        Tools.Warn(\"A newer version of this plugin is available\");\r\n    }\r\n\r\n    /**\r\n     * execute a hit test with an XR Ray\r\n     *\r\n     * @param xrSession a native xrSession that will execute this hit test\r\n     * @param xrRay the ray (position and direction) to use for ray-casting\r\n     * @param referenceSpace native XR reference space to use for the hit-test\r\n     * @param filter filter function that will filter the results\r\n     * @returns a promise that resolves with an array of native XR hit result in xr coordinates system\r\n     */\r\n    public static XRHitTestWithRay(xrSession: XRSession, xrRay: XRRay, referenceSpace: XRReferenceSpace, filter?: (result: XRHitResult) => boolean): Promise<XRHitResult[]> {\r\n        return xrSession.requestHitTest!(xrRay, referenceSpace).then((results) => {\r\n            const filterFunction = filter || ((result) => !!result.hitMatrix);\r\n            return results.filter(filterFunction);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Execute a hit test on the current running session using a select event returned from a transient input (such as touch)\r\n     * @param event the (select) event to use to select with\r\n     * @param referenceSpace the reference space to use for this hit test\r\n     * @returns a promise that resolves with an array of native XR hit result in xr coordinates system\r\n     */\r\n    public static XRHitTestWithSelectEvent(event: XRInputSourceEvent, referenceSpace: XRReferenceSpace): Promise<XRHitResult[]> {\r\n        let targetRayPose = event.frame.getPose(event.inputSource.targetRaySpace, referenceSpace);\r\n        if (!targetRayPose) {\r\n            return Promise.resolve([]);\r\n        }\r\n        let targetRay = new XRRay(targetRayPose.transform);\r\n\r\n        return this.XRHitTestWithRay(event.frame.session, targetRay, referenceSpace);\r\n    }\r\n\r\n    /**\r\n     * attach this feature\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public attach(): boolean {\r\n        if (!super.attach()) {\r\n            return false;\r\n        }\r\n        if (this.options.testOnPointerDownOnly) {\r\n            this._xrSessionManager.session.addEventListener(\"select\", this._onSelect, false);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * detach this feature.\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public detach(): boolean {\r\n        if (!super.detach()) {\r\n            return false;\r\n        }\r\n        // disable select\r\n        this._onSelectEnabled = false;\r\n        this._xrSessionManager.session.removeEventListener(\"select\", this._onSelect);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n        this.onHitTestResultObservable.clear();\r\n    }\r\n\r\n    protected _onXRFrame(frame: XRFrame) {\r\n        // make sure we do nothing if (async) not attached\r\n        if (!this.attached || this.options.testOnPointerDownOnly) {\r\n            return;\r\n        }\r\n        let pose = frame.getViewerPose(this._xrSessionManager.referenceSpace);\r\n        if (!pose) {\r\n            return;\r\n        }\r\n        Matrix.FromArrayToRef(pose.transform.matrix, 0, this._mat);\r\n        Vector3.TransformCoordinatesFromFloatsToRef(0, 0, 0, this._mat, this._origin);\r\n        Vector3.TransformCoordinatesFromFloatsToRef(0, 0, -1, this._mat, this._direction);\r\n        this._direction.subtractInPlace(this._origin);\r\n        this._direction.normalize();\r\n        let ray = new XRRay(<DOMPointReadOnly>{ x: this._origin.x, y: this._origin.y, z: this._origin.z, w: 0 }, <DOMPointReadOnly>{ x: this._direction.x, y: this._direction.y, z: this._direction.z, w: 0 });\r\n        WebXRHitTestLegacy.XRHitTestWithRay(this._xrSessionManager.session, ray, this._xrSessionManager.referenceSpace).then(this._onHitTestResults);\r\n    }\r\n\r\n    private _onHitTestResults = (xrResults: XRHitResult[]) => {\r\n        const mats = xrResults.map((result) => {\r\n            let mat = Matrix.FromArray(result.hitMatrix);\r\n            if (!this._xrSessionManager.scene.useRightHandedSystem) {\r\n                mat.toggleModelMatrixHandInPlace();\r\n            }\r\n            // if (this.options.coordinatesSpace === Space.WORLD) {\r\n            if (this.options.worldParentNode) {\r\n                mat.multiplyToRef(this.options.worldParentNode.getWorldMatrix(), mat);\r\n            }\r\n            return {\r\n                xrHitResult: result,\r\n                transformationMatrix: mat,\r\n            };\r\n        });\r\n\r\n        this.lastNativeXRHitResults = xrResults;\r\n        this.onHitTestResultObservable.notifyObservers(mats);\r\n    };\r\n\r\n    // can be done using pointerdown event, and xrSessionManager.currentFrame\r\n    private _onSelect = (event: XRInputSourceEvent) => {\r\n        if (!this._onSelectEnabled) {\r\n            return;\r\n        }\r\n        WebXRHitTestLegacy.XRHitTestWithSelectEvent(event, this._xrSessionManager.referenceSpace);\r\n    };\r\n}\r\n\r\n//register the plugin versions\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRHitTestLegacy.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRHitTestLegacy(xrSessionManager, options);\r\n    },\r\n    WebXRHitTestLegacy.Version,\r\n    false\r\n);\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}