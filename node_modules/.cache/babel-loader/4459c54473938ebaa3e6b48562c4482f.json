{"ast":null,"code":"/**\r\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\r\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\r\n */\nvar EffectFallbacks =\n/** @class */\nfunction () {\n  function EffectFallbacks() {\n    this._defines = {};\n    this._currentRank = 32;\n    this._maxRank = -1;\n    this._mesh = null;\n  }\n  /**\r\n   * Removes the fallback from the bound mesh.\r\n   */\n\n\n  EffectFallbacks.prototype.unBindMesh = function () {\n    this._mesh = null;\n  };\n  /**\r\n   * Adds a fallback on the specified property.\r\n   * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n   * @param define The name of the define in the shader\r\n   */\n\n\n  EffectFallbacks.prototype.addFallback = function (rank, define) {\n    if (!this._defines[rank]) {\n      if (rank < this._currentRank) {\n        this._currentRank = rank;\n      }\n\n      if (rank > this._maxRank) {\n        this._maxRank = rank;\n      }\n\n      this._defines[rank] = new Array();\n    }\n\n    this._defines[rank].push(define);\n  };\n  /**\r\n   * Sets the mesh to use CPU skinning when needing to fallback.\r\n   * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n   * @param mesh The mesh to use the fallbacks.\r\n   */\n\n\n  EffectFallbacks.prototype.addCPUSkinningFallback = function (rank, mesh) {\n    this._mesh = mesh;\n\n    if (rank < this._currentRank) {\n      this._currentRank = rank;\n    }\n\n    if (rank > this._maxRank) {\n      this._maxRank = rank;\n    }\n  };\n\n  Object.defineProperty(EffectFallbacks.prototype, \"hasMoreFallbacks\", {\n    /**\r\n     * Checks to see if more fallbacks are still availible.\r\n     */\n    get: function () {\n      return this._currentRank <= this._maxRank;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Removes the defines that should be removed when falling back.\r\n   * @param currentDefines defines the current define statements for the shader.\r\n   * @param effect defines the current effect we try to compile\r\n   * @returns The resulting defines with defines of the current rank removed.\r\n   */\n\n  EffectFallbacks.prototype.reduce = function (currentDefines, effect) {\n    // First we try to switch to CPU skinning\n    if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\n      this._mesh.computeBonesUsingShaders = false;\n      currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\n      effect._bonesComputationForcedToCPU = true;\n\n      var scene = this._mesh.getScene();\n\n      for (var index = 0; index < scene.meshes.length; index++) {\n        var otherMesh = scene.meshes[index];\n\n        if (!otherMesh.material) {\n          if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\n            otherMesh.computeBonesUsingShaders = false;\n          }\n\n          continue;\n        }\n\n        if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\n          continue;\n        }\n\n        if (otherMesh.material.getEffect() === effect) {\n          otherMesh.computeBonesUsingShaders = false;\n        } else if (otherMesh.subMeshes) {\n          for (var _i = 0, _a = otherMesh.subMeshes; _i < _a.length; _i++) {\n            var subMesh = _a[_i];\n            var subMeshEffect = subMesh.effect;\n\n            if (subMeshEffect === effect) {\n              otherMesh.computeBonesUsingShaders = false;\n              break;\n            }\n          }\n        }\n      }\n    } else {\n      var currentFallbacks = this._defines[this._currentRank];\n\n      if (currentFallbacks) {\n        for (var index = 0; index < currentFallbacks.length; index++) {\n          currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\n        }\n      }\n\n      this._currentRank++;\n    }\n\n    return currentDefines;\n  };\n\n  return EffectFallbacks;\n}();\n\nexport { EffectFallbacks };","map":{"version":3,"sources":["../../../sourceES6/core/Materials/effectFallbacks.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from '../types';\r\nimport { IEffectFallbacks } from './iEffectFallbacks';\r\n\r\ndeclare type Effect = import(\"./effect\").Effect;\r\ndeclare type AbstractMesh = import(\"../Meshes/abstractMesh\").AbstractMesh;\r\n\r\n/**\r\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\r\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\r\n */\r\nexport class EffectFallbacks implements IEffectFallbacks {\r\n    private _defines: { [key: string]: Array<String> } = {};\r\n\r\n    private _currentRank = 32;\r\n    private _maxRank = -1;\r\n\r\n    private _mesh: Nullable<AbstractMesh> = null;\r\n\r\n    /**\r\n     * Removes the fallback from the bound mesh.\r\n     */\r\n    public unBindMesh() {\r\n        this._mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Adds a fallback on the specified property.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param define The name of the define in the shader\r\n     */\r\n    public addFallback(rank: number, define: string): void {\r\n        if (!this._defines[rank]) {\r\n            if (rank < this._currentRank) {\r\n                this._currentRank = rank;\r\n            }\r\n\r\n            if (rank > this._maxRank) {\r\n                this._maxRank = rank;\r\n            }\r\n\r\n            this._defines[rank] = new Array<String>();\r\n        }\r\n\r\n        this._defines[rank].push(define);\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh to use CPU skinning when needing to fallback.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param mesh The mesh to use the fallbacks.\r\n     */\r\n    public addCPUSkinningFallback(rank: number, mesh: AbstractMesh) {\r\n        this._mesh = mesh;\r\n\r\n        if (rank < this._currentRank) {\r\n            this._currentRank = rank;\r\n        }\r\n        if (rank > this._maxRank) {\r\n            this._maxRank = rank;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks to see if more fallbacks are still availible.\r\n     */\r\n    public get hasMoreFallbacks(): boolean {\r\n        return this._currentRank <= this._maxRank;\r\n    }\r\n\r\n    /**\r\n     * Removes the defines that should be removed when falling back.\r\n     * @param currentDefines defines the current define statements for the shader.\r\n     * @param effect defines the current effect we try to compile\r\n     * @returns The resulting defines with defines of the current rank removed.\r\n     */\r\n    public reduce(currentDefines: string, effect: Effect): string {\r\n        // First we try to switch to CPU skinning\r\n        if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\r\n            this._mesh.computeBonesUsingShaders = false;\r\n            currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\r\n            effect._bonesComputationForcedToCPU = true;\r\n\r\n            var scene = this._mesh.getScene();\r\n            for (var index = 0; index < scene.meshes.length; index++) {\r\n                var otherMesh = scene.meshes[index];\r\n\r\n                if (!otherMesh.material) {\r\n                    if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\r\n                        otherMesh.computeBonesUsingShaders = false;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (otherMesh.material.getEffect() === effect) {\r\n                    otherMesh.computeBonesUsingShaders = false;\r\n                } else if (otherMesh.subMeshes) {\r\n                    for (var subMesh of otherMesh.subMeshes) {\r\n                        let subMeshEffect = subMesh.effect;\r\n\r\n                        if (subMeshEffect === effect) {\r\n                            otherMesh.computeBonesUsingShaders = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var currentFallbacks = this._defines[this._currentRank];\r\n            if (currentFallbacks) {\r\n                for (var index = 0; index < currentFallbacks.length; index++) {\r\n                    currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\r\n                }\r\n            }\r\n\r\n            this._currentRank++;\r\n        }\r\n\r\n        return currentDefines;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}