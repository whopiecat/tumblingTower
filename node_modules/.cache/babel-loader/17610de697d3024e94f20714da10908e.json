{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { MaterialHelper } from '../../../materialHelper';\nimport { InputBlock } from '../Input/inputBlock';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport \"../../../../Shaders/ShadersInclude/fogFragmentDeclaration\";\n/**\r\n * Block used to add support for scene fog\r\n */\n\nvar FogBlock =\n/** @class */\nfunction (_super) {\n  __extends(FogBlock, _super);\n  /**\r\n   * Create a new FogBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function FogBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.VertexAndFragment, true) || this; // Vertex\n\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex); // Fragment\n\n\n    _this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Color3, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"fogColor\", NodeMaterialBlockConnectionPointTypes.Color3, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.input.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color4);\n\n    _this.fogColor.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color4);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  FogBlock.prototype.getClassName = function () {\n    return \"FogBlock\";\n  };\n\n  Object.defineProperty(FogBlock.prototype, \"worldPosition\", {\n    /**\r\n     * Gets the world position input component\r\n     */\n    get: function () {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FogBlock.prototype, \"view\", {\n    /**\r\n     * Gets the view input component\r\n     */\n    get: function () {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FogBlock.prototype, \"input\", {\n    /**\r\n     * Gets the color input component\r\n     */\n    get: function () {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FogBlock.prototype, \"fogColor\", {\n    /**\r\n     * Gets the fog color input component\r\n     */\n    get: function () {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FogBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function () {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FogBlock.prototype.autoConfigure = function (material) {\n    if (!this.view.isConnected) {\n      var viewInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.View;\n      });\n\n      if (!viewInput) {\n        viewInput = new InputBlock(\"view\");\n        viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\n      }\n\n      viewInput.output.connectTo(this.view);\n    }\n\n    if (!this.fogColor.isConnected) {\n      var fogColorInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.FogColor;\n      });\n\n      if (!fogColorInput) {\n        fogColorInput = new InputBlock(\"fogColor\", undefined, NodeMaterialBlockConnectionPointTypes.Color3);\n        fogColorInput.setAsSystemValue(NodeMaterialSystemValues.FogColor);\n      }\n\n      fogColorInput.output.connectTo(this.fogColor);\n    }\n  };\n\n  FogBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    var scene = mesh.getScene();\n    defines.setValue(\"FOG\", nodeMaterial.fogEnabled && MaterialHelper.GetFogState(mesh, scene));\n  };\n\n  FogBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n\n    var scene = mesh.getScene();\n    effect.setFloat4(this._fogParameters, scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);\n  };\n\n  FogBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.blocksWithDefines.push(this);\n      state.sharedData.bindableBlocks.push(this);\n\n      state._emitFunctionFromInclude(\"fogFragmentDeclaration\", \"//\" + this.name, {\n        removeUniforms: true,\n        removeVaryings: true,\n        removeIfDef: false,\n        replaceStrings: [{\n          search: /float CalcFogFactor\\(\\)/,\n          replace: \"float CalcFogFactor(vec3 vFogDistance, vec4 vFogInfos)\"\n        }]\n      });\n\n      var tempFogVariablename = state._getFreeVariableName(\"fog\");\n\n      var color = this.input;\n      var fogColor = this.fogColor;\n      this._fogParameters = state._getFreeVariableName(\"fogParameters\");\n      var output = this._outputs[0];\n\n      state._emitUniformFromString(this._fogParameters, \"vec4\");\n\n      state.compilationString += \"#ifdef FOG\\r\\n\";\n      state.compilationString += \"float \" + tempFogVariablename + \" = CalcFogFactor(\" + this._fogDistanceName + \", \" + this._fogParameters + \");\\r\\n\";\n      state.compilationString += this._declareOutput(output, state) + (\" = \" + tempFogVariablename + \" * \" + color.associatedVariableName + \".rgb + (1.0 - \" + tempFogVariablename + \") * \" + fogColor.associatedVariableName + \".rgb;\\r\\n\");\n      state.compilationString += \"#else\\r\\n\" + this._declareOutput(output, state) + \" =  \" + color.associatedVariableName + \".rgb;\\r\\n\";\n      state.compilationString += \"#endif\\r\\n\";\n    } else {\n      var worldPos = this.worldPosition;\n      var view = this.view;\n      this._fogDistanceName = state._getFreeVariableName(\"vFogDistance\");\n\n      state._emitVaryingFromString(this._fogDistanceName, \"vec3\");\n\n      state.compilationString += this._fogDistanceName + \" = (\" + view.associatedVariableName + \" * \" + worldPos.associatedVariableName + \").xyz;\\r\\n\";\n    }\n\n    return this;\n  };\n\n  return FogBlock;\n}(NodeMaterialBlock);\n\nexport { FogBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.FogBlock\"] = FogBlock;","map":{"version":3,"sources":["../../../../../../sourceES6/core/Materials/Node/Blocks/Dual/fogBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import { NodeMaterialBlock } from '../../nodeMaterialBlock';\r\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\r\nimport { NodeMaterialBuildState } from '../../nodeMaterialBuildState';\r\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\r\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\r\nimport { Mesh } from '../../../../Meshes/mesh';\r\nimport { Effect } from '../../../effect';\r\nimport { NodeMaterialConnectionPoint } from '../../nodeMaterialBlockConnectionPoint';\r\nimport { AbstractMesh } from '../../../../Meshes/abstractMesh';\r\nimport { MaterialHelper } from '../../../materialHelper';\r\nimport { NodeMaterial, NodeMaterialDefines } from '../../nodeMaterial';\r\nimport { InputBlock } from '../Input/inputBlock';\r\nimport { _TypeStore } from '../../../../Misc/typeStore';\r\n\r\nimport \"../../../../Shaders/ShadersInclude/fogFragmentDeclaration\";\r\n\r\n/**\r\n * Block used to add support for scene fog\r\n */\r\nexport class FogBlock extends NodeMaterialBlock {\r\n    private _fogDistanceName: string;\r\n    private _fogParameters: string;\r\n\r\n    /**\r\n     * Create a new FogBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.VertexAndFragment, true);\r\n\r\n        // Vertex\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\r\n\r\n        // Fragment\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Color3, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"fogColor\", NodeMaterialBlockConnectionPointTypes.Color3, false, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.input.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color4);\r\n        this.fogColor.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color4);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"FogBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the view input component\r\n     */\r\n    public get view(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the fog color input component\r\n     */\r\n    public get fogColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.view.isConnected) {\r\n            let viewInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.View);\r\n\r\n            if (!viewInput) {\r\n                viewInput = new InputBlock(\"view\");\r\n                viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\r\n            }\r\n            viewInput.output.connectTo(this.view);\r\n        }\r\n        if (!this.fogColor.isConnected) {\r\n            let fogColorInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.FogColor);\r\n\r\n            if (!fogColorInput) {\r\n                fogColorInput = new InputBlock(\"fogColor\", undefined, NodeMaterialBlockConnectionPointTypes.Color3);\r\n                fogColorInput.setAsSystemValue(NodeMaterialSystemValues.FogColor);\r\n            }\r\n            fogColorInput.output.connectTo(this.fogColor);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        let scene = mesh.getScene();\r\n        defines.setValue(\"FOG\", nodeMaterial.fogEnabled && MaterialHelper.GetFogState(mesh, scene));\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const scene = mesh.getScene();\r\n        effect.setFloat4(this._fogParameters, scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.blocksWithDefines.push(this);\r\n            state.sharedData.bindableBlocks.push(this);\r\n\r\n            state._emitFunctionFromInclude(\"fogFragmentDeclaration\", `//${this.name}`, {\r\n                removeUniforms: true,\r\n                removeVaryings: true,\r\n                removeIfDef: false,\r\n                replaceStrings: [{ search: /float CalcFogFactor\\(\\)/, replace: \"float CalcFogFactor(vec3 vFogDistance, vec4 vFogInfos)\" }]\r\n            });\r\n\r\n            let tempFogVariablename = state._getFreeVariableName(\"fog\");\r\n            let color = this.input;\r\n            let fogColor = this.fogColor;\r\n            this._fogParameters = state._getFreeVariableName(\"fogParameters\");\r\n            let output = this._outputs[0];\r\n\r\n            state._emitUniformFromString(this._fogParameters, \"vec4\");\r\n\r\n            state.compilationString += `#ifdef FOG\\r\\n`;\r\n            state.compilationString += `float ${tempFogVariablename} = CalcFogFactor(${this._fogDistanceName}, ${this._fogParameters});\\r\\n`;\r\n            state.compilationString += this._declareOutput(output, state) + ` = ${tempFogVariablename} * ${color.associatedVariableName}.rgb + (1.0 - ${tempFogVariablename}) * ${fogColor.associatedVariableName}.rgb;\\r\\n`;\r\n            state.compilationString += `#else\\r\\n${this._declareOutput(output, state)} =  ${color.associatedVariableName}.rgb;\\r\\n`;\r\n            state.compilationString += `#endif\\r\\n`;\r\n        } else {\r\n            let worldPos = this.worldPosition;\r\n            let view = this.view;\r\n            this._fogDistanceName = state._getFreeVariableName(\"vFogDistance\");\r\n            state._emitVaryingFromString(this._fogDistanceName, \"vec3\");\r\n            state.compilationString += `${this._fogDistanceName} = (${view.associatedVariableName} * ${worldPos.associatedVariableName}).xyz;\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.FogBlock\"] = FogBlock;"],"sourceRoot":""},"metadata":{},"sourceType":"module"}